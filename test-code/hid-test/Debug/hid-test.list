
hid-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000254  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac5c  08000254  08000254  00001254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  0800aeb0  0800aeb0  0000beb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800afd8  0800afd8  0000c164  2**0
                  CONTENTS
  4 .ARM          00000000  0800afd8  0800afd8  0000c164  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800afd8  0800afd8  0000c164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800afd8  0800afd8  0000bfd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800afdc  0800afdc  0000bfdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000164  20000000  0800afe0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000954  20000164  0800b144  0000c164  2**2
                  ALLOC
 10 ._user_heap_stack 00000d00  20000ab8  0800b144  0000cab8  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000c164  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014767  00000000  00000000  0000c19a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032e9  00000000  00000000  00020901  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001148  00000000  00000000  00023bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cd5  00000000  00000000  00024d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d5f3  00000000  00000000  00025a0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000151c2  00000000  00000000  00053000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010f7b2  00000000  00000000  000681c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00177974  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e9c  00000000  00000000  001779b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0017c854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000254 <__do_global_dtors_aux>:
 8000254:	b510      	push	{r4, lr}
 8000256:	4c05      	ldr	r4, [pc, #20]	@ (800026c <__do_global_dtors_aux+0x18>)
 8000258:	7823      	ldrb	r3, [r4, #0]
 800025a:	b933      	cbnz	r3, 800026a <__do_global_dtors_aux+0x16>
 800025c:	4b04      	ldr	r3, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x1c>)
 800025e:	b113      	cbz	r3, 8000266 <__do_global_dtors_aux+0x12>
 8000260:	4804      	ldr	r0, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x20>)
 8000262:	f3af 8000 	nop.w
 8000266:	2301      	movs	r3, #1
 8000268:	7023      	strb	r3, [r4, #0]
 800026a:	bd10      	pop	{r4, pc}
 800026c:	20000164 	.word	0x20000164
 8000270:	00000000 	.word	0x00000000
 8000274:	0800ae98 	.word	0x0800ae98

08000278 <frame_dummy>:
 8000278:	b508      	push	{r3, lr}
 800027a:	4b03      	ldr	r3, [pc, #12]	@ (8000288 <frame_dummy+0x10>)
 800027c:	b11b      	cbz	r3, 8000286 <frame_dummy+0xe>
 800027e:	4903      	ldr	r1, [pc, #12]	@ (800028c <frame_dummy+0x14>)
 8000280:	4803      	ldr	r0, [pc, #12]	@ (8000290 <frame_dummy+0x18>)
 8000282:	f3af 8000 	nop.w
 8000286:	bd08      	pop	{r3, pc}
 8000288:	00000000 	.word	0x00000000
 800028c:	20000168 	.word	0x20000168
 8000290:	0800ae98 	.word	0x0800ae98

08000294 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000298:	f000 fc80 	bl	8000b9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800029c:	f000 f868 	bl	8000370 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002a0:	f000 f954 	bl	800054c <MX_GPIO_Init>
  MX_FDCAN1_Init();
 80002a4:	f000 f8da 	bl	800045c <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  /* Initialize the USB Device Library */
   USBD_Init(&hUsbDeviceFS, &Class_Desc, DEVICE_FS);
 80002a8:	2200      	movs	r2, #0
 80002aa:	4927      	ldr	r1, [pc, #156]	@ (8000348 <main+0xb4>)
 80002ac:	4827      	ldr	r0, [pc, #156]	@ (800034c <main+0xb8>)
 80002ae:	f008 fb19 	bl	80088e4 <USBD_Init>

   USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID);
 80002b2:	4927      	ldr	r1, [pc, #156]	@ (8000350 <main+0xbc>)
 80002b4:	4825      	ldr	r0, [pc, #148]	@ (800034c <main+0xb8>)
 80002b6:	f008 fb53 	bl	8008960 <USBD_RegisterClass>

   USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_template_fops);
 80002ba:	4926      	ldr	r1, [pc, #152]	@ (8000354 <main+0xc0>)
 80002bc:	4823      	ldr	r0, [pc, #140]	@ (800034c <main+0xb8>)
 80002be:	f008 f8dd 	bl	800847c <USBD_CUSTOM_HID_RegisterInterface>

   USBD_Start(&hUsbDeviceFS);
 80002c2:	4822      	ldr	r0, [pc, #136]	@ (800034c <main+0xb8>)
 80002c4:	f008 fb90 	bl	80089e8 <USBD_Start>

  FDCAN_Config(); // need to set up the FD CAN peripheral with our parameters.
 80002c8:	f000 f99a 	bl	8000600 <FDCAN_Config>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80002cc:	2201      	movs	r2, #1
 80002ce:	2101      	movs	r1, #1
 80002d0:	4821      	ldr	r0, [pc, #132]	@ (8000358 <main+0xc4>)
 80002d2:	f001 fed3 	bl	800207c <HAL_GPIO_WritePin>
  		if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &Tx_Header, txData) != HAL_OK) // not useful rn
 80002d6:	4a21      	ldr	r2, [pc, #132]	@ (800035c <main+0xc8>)
 80002d8:	4921      	ldr	r1, [pc, #132]	@ (8000360 <main+0xcc>)
 80002da:	4822      	ldr	r0, [pc, #136]	@ (8000364 <main+0xd0>)
 80002dc:	f001 f8dd 	bl	800149a <HAL_FDCAN_AddMessageToTxFifoQ>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <main+0x56>
  		{
  			Error_Handler();
 80002e6:	f000 fa07 	bl	80006f8 <Error_Handler>
  		}
  		HAL_Delay(50);
 80002ea:	2032      	movs	r0, #50	@ 0x32
 80002ec:	f000 fd14 	bl	8000d18 <HAL_Delay>

  	    	buttons[0] = ((rxData[0] > 64) + 2*(rxData[1] > 64) + 4*(rxData[2] > 64) + 8*(rxData[3] > 64));
 80002f0:	4b1d      	ldr	r3, [pc, #116]	@ (8000368 <main+0xd4>)
 80002f2:	781b      	ldrb	r3, [r3, #0]
 80002f4:	2b40      	cmp	r3, #64	@ 0x40
 80002f6:	bf8c      	ite	hi
 80002f8:	2301      	movhi	r3, #1
 80002fa:	2300      	movls	r3, #0
 80002fc:	b2db      	uxtb	r3, r3
 80002fe:	461a      	mov	r2, r3
 8000300:	4b19      	ldr	r3, [pc, #100]	@ (8000368 <main+0xd4>)
 8000302:	785b      	ldrb	r3, [r3, #1]
 8000304:	2b40      	cmp	r3, #64	@ 0x40
 8000306:	d901      	bls.n	800030c <main+0x78>
 8000308:	2302      	movs	r3, #2
 800030a:	e000      	b.n	800030e <main+0x7a>
 800030c:	2300      	movs	r3, #0
 800030e:	4413      	add	r3, r2
 8000310:	b2db      	uxtb	r3, r3
 8000312:	4a15      	ldr	r2, [pc, #84]	@ (8000368 <main+0xd4>)
 8000314:	7892      	ldrb	r2, [r2, #2]
 8000316:	2a40      	cmp	r2, #64	@ 0x40
 8000318:	d901      	bls.n	800031e <main+0x8a>
 800031a:	2204      	movs	r2, #4
 800031c:	e000      	b.n	8000320 <main+0x8c>
 800031e:	2200      	movs	r2, #0
 8000320:	4413      	add	r3, r2
 8000322:	b2db      	uxtb	r3, r3
 8000324:	4a10      	ldr	r2, [pc, #64]	@ (8000368 <main+0xd4>)
 8000326:	78d2      	ldrb	r2, [r2, #3]
 8000328:	2a40      	cmp	r2, #64	@ 0x40
 800032a:	d901      	bls.n	8000330 <main+0x9c>
 800032c:	2208      	movs	r2, #8
 800032e:	e000      	b.n	8000332 <main+0x9e>
 8000330:	2200      	movs	r2, #0
 8000332:	4413      	add	r3, r2
 8000334:	b2da      	uxtb	r2, r3
 8000336:	4b0d      	ldr	r3, [pc, #52]	@ (800036c <main+0xd8>)
 8000338:	701a      	strb	r2, [r3, #0]
  	    USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, buttons, sizeof(buttons));
 800033a:	2202      	movs	r2, #2
 800033c:	490b      	ldr	r1, [pc, #44]	@ (800036c <main+0xd8>)
 800033e:	4803      	ldr	r0, [pc, #12]	@ (800034c <main+0xb8>)
 8000340:	f007 ff6e 	bl	8008220 <USBD_CUSTOM_HID_SendReport>
  		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000344:	e7c2      	b.n	80002cc <main+0x38>
 8000346:	bf00      	nop
 8000348:	200000b8 	.word	0x200000b8
 800034c:	200004c4 	.word	0x200004c4
 8000350:	2000000c 	.word	0x2000000c
 8000354:	200000a8 	.word	0x200000a8
 8000358:	42020000 	.word	0x42020000
 800035c:	20000800 	.word	0x20000800
 8000360:	200007dc 	.word	0x200007dc
 8000364:	20000180 	.word	0x20000180
 8000368:	200007d4 	.word	0x200007d4
 800036c:	20000804 	.word	0x20000804

08000370 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b09c      	sub	sp, #112	@ 0x70
 8000374:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000376:	f107 0320 	add.w	r3, r7, #32
 800037a:	2250      	movs	r2, #80	@ 0x50
 800037c:	2100      	movs	r1, #0
 800037e:	4618      	mov	r0, r3
 8000380:	f009 ff2b 	bl	800a1da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000384:	f107 0308 	add.w	r3, r7, #8
 8000388:	2200      	movs	r2, #0
 800038a:	601a      	str	r2, [r3, #0]
 800038c:	605a      	str	r2, [r3, #4]
 800038e:	609a      	str	r2, [r3, #8]
 8000390:	60da      	str	r2, [r3, #12]
 8000392:	611a      	str	r2, [r3, #16]
 8000394:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000396:	4b2f      	ldr	r3, [pc, #188]	@ (8000454 <SystemClock_Config+0xe4>)
 8000398:	691b      	ldr	r3, [r3, #16]
 800039a:	4a2e      	ldr	r2, [pc, #184]	@ (8000454 <SystemClock_Config+0xe4>)
 800039c:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80003a0:	6113      	str	r3, [r2, #16]
 80003a2:	4b2c      	ldr	r3, [pc, #176]	@ (8000454 <SystemClock_Config+0xe4>)
 80003a4:	691b      	ldr	r3, [r3, #16]
 80003a6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80003aa:	607b      	str	r3, [r7, #4]
 80003ac:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80003ae:	bf00      	nop
 80003b0:	4b28      	ldr	r3, [pc, #160]	@ (8000454 <SystemClock_Config+0xe4>)
 80003b2:	695b      	ldr	r3, [r3, #20]
 80003b4:	f003 0308 	and.w	r3, r3, #8
 80003b8:	2b08      	cmp	r3, #8
 80003ba:	d1f9      	bne.n	80003b0 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_CSI;
 80003bc:	2330      	movs	r3, #48	@ 0x30
 80003be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80003c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80003c4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 80003c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80003ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 80003cc:	2320      	movs	r3, #32
 80003ce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003d0:	2302      	movs	r3, #2
 80003d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_CSI;
 80003d4:	2302      	movs	r3, #2
 80003d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80003d8:	2301      	movs	r3, #1
 80003da:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 80003dc:	2378      	movs	r3, #120	@ 0x78
 80003de:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80003e0:	2302      	movs	r3, #2
 80003e2:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80003e4:	2302      	movs	r3, #2
 80003e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80003e8:	2302      	movs	r3, #2
 80003ea:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_2;
 80003ec:	2308      	movs	r3, #8
 80003ee:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 80003f0:	2300      	movs	r3, #0
 80003f2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80003f4:	2300      	movs	r3, #0
 80003f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003f8:	f107 0320 	add.w	r3, r7, #32
 80003fc:	4618      	mov	r0, r3
 80003fe:	f003 fb11 	bl	8003a24 <HAL_RCC_OscConfig>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	d001      	beq.n	800040c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000408:	f000 f976 	bl	80006f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800040c:	231f      	movs	r3, #31
 800040e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000410:	2303      	movs	r3, #3
 8000412:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000414:	2300      	movs	r3, #0
 8000416:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000418:	2300      	movs	r3, #0
 800041a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800041c:	2300      	movs	r3, #0
 800041e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000420:	2300      	movs	r3, #0
 8000422:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000424:	f107 0308 	add.w	r3, r7, #8
 8000428:	2105      	movs	r1, #5
 800042a:	4618      	mov	r0, r3
 800042c:	f003 ff32 	bl	8004294 <HAL_RCC_ClockConfig>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d001      	beq.n	800043a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000436:	f000 f95f 	bl	80006f8 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 800043a:	4b07      	ldr	r3, [pc, #28]	@ (8000458 <SystemClock_Config+0xe8>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000442:	4a05      	ldr	r2, [pc, #20]	@ (8000458 <SystemClock_Config+0xe8>)
 8000444:	f043 0320 	orr.w	r3, r3, #32
 8000448:	6013      	str	r3, [r2, #0]
}
 800044a:	bf00      	nop
 800044c:	3770      	adds	r7, #112	@ 0x70
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	44020800 	.word	0x44020800
 8000458:	40022000 	.word	0x40022000

0800045c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000460:	4b1f      	ldr	r3, [pc, #124]	@ (80004e0 <MX_FDCAN1_Init+0x84>)
 8000462:	4a20      	ldr	r2, [pc, #128]	@ (80004e4 <MX_FDCAN1_Init+0x88>)
 8000464:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000466:	4b1e      	ldr	r3, [pc, #120]	@ (80004e0 <MX_FDCAN1_Init+0x84>)
 8000468:	2200      	movs	r2, #0
 800046a:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800046c:	4b1c      	ldr	r3, [pc, #112]	@ (80004e0 <MX_FDCAN1_Init+0x84>)
 800046e:	2200      	movs	r2, #0
 8000470:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000472:	4b1b      	ldr	r3, [pc, #108]	@ (80004e0 <MX_FDCAN1_Init+0x84>)
 8000474:	2200      	movs	r2, #0
 8000476:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000478:	4b19      	ldr	r3, [pc, #100]	@ (80004e0 <MX_FDCAN1_Init+0x84>)
 800047a:	2200      	movs	r2, #0
 800047c:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800047e:	4b18      	ldr	r3, [pc, #96]	@ (80004e0 <MX_FDCAN1_Init+0x84>)
 8000480:	2200      	movs	r2, #0
 8000482:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000484:	4b16      	ldr	r3, [pc, #88]	@ (80004e0 <MX_FDCAN1_Init+0x84>)
 8000486:	2200      	movs	r2, #0
 8000488:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 15;
 800048a:	4b15      	ldr	r3, [pc, #84]	@ (80004e0 <MX_FDCAN1_Init+0x84>)
 800048c:	220f      	movs	r2, #15
 800048e:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 2;
 8000490:	4b13      	ldr	r3, [pc, #76]	@ (80004e0 <MX_FDCAN1_Init+0x84>)
 8000492:	2202      	movs	r2, #2
 8000494:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 8000496:	4b12      	ldr	r3, [pc, #72]	@ (80004e0 <MX_FDCAN1_Init+0x84>)
 8000498:	220d      	movs	r2, #13
 800049a:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800049c:	4b10      	ldr	r3, [pc, #64]	@ (80004e0 <MX_FDCAN1_Init+0x84>)
 800049e:	2202      	movs	r2, #2
 80004a0:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 15;
 80004a2:	4b0f      	ldr	r3, [pc, #60]	@ (80004e0 <MX_FDCAN1_Init+0x84>)
 80004a4:	220f      	movs	r2, #15
 80004a6:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 2;
 80004a8:	4b0d      	ldr	r3, [pc, #52]	@ (80004e0 <MX_FDCAN1_Init+0x84>)
 80004aa:	2202      	movs	r2, #2
 80004ac:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 13;
 80004ae:	4b0c      	ldr	r3, [pc, #48]	@ (80004e0 <MX_FDCAN1_Init+0x84>)
 80004b0:	220d      	movs	r2, #13
 80004b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 80004b4:	4b0a      	ldr	r3, [pc, #40]	@ (80004e0 <MX_FDCAN1_Init+0x84>)
 80004b6:	2202      	movs	r2, #2
 80004b8:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 80004ba:	4b09      	ldr	r3, [pc, #36]	@ (80004e0 <MX_FDCAN1_Init+0x84>)
 80004bc:	2201      	movs	r2, #1
 80004be:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80004c0:	4b07      	ldr	r3, [pc, #28]	@ (80004e0 <MX_FDCAN1_Init+0x84>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80004c6:	4b06      	ldr	r3, [pc, #24]	@ (80004e0 <MX_FDCAN1_Init+0x84>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80004cc:	4804      	ldr	r0, [pc, #16]	@ (80004e0 <MX_FDCAN1_Init+0x84>)
 80004ce:	f000 fdd7 	bl	8001080 <HAL_FDCAN_Init>
 80004d2:	4603      	mov	r3, r0
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d001      	beq.n	80004dc <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80004d8:	f000 f90e 	bl	80006f8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80004dc:	bf00      	nop
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	20000180 	.word	0x20000180
 80004e4:	4000a400 	.word	0x4000a400

080004e8 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
void MX_USB_PCD_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 80004ec:	4b15      	ldr	r3, [pc, #84]	@ (8000544 <MX_USB_PCD_Init+0x5c>)
 80004ee:	4a16      	ldr	r2, [pc, #88]	@ (8000548 <MX_USB_PCD_Init+0x60>)
 80004f0:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 80004f2:	4b14      	ldr	r3, [pc, #80]	@ (8000544 <MX_USB_PCD_Init+0x5c>)
 80004f4:	2208      	movs	r2, #8
 80004f6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 80004f8:	4b12      	ldr	r3, [pc, #72]	@ (8000544 <MX_USB_PCD_Init+0x5c>)
 80004fa:	2202      	movs	r2, #2
 80004fc:	71da      	strb	r2, [r3, #7]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80004fe:	4b11      	ldr	r3, [pc, #68]	@ (8000544 <MX_USB_PCD_Init+0x5c>)
 8000500:	2202      	movs	r2, #2
 8000502:	725a      	strb	r2, [r3, #9]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 8000504:	4b0f      	ldr	r3, [pc, #60]	@ (8000544 <MX_USB_PCD_Init+0x5c>)
 8000506:	2200      	movs	r2, #0
 8000508:	729a      	strb	r2, [r3, #10]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 800050a:	4b0e      	ldr	r3, [pc, #56]	@ (8000544 <MX_USB_PCD_Init+0x5c>)
 800050c:	2200      	movs	r2, #0
 800050e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 8000510:	4b0c      	ldr	r3, [pc, #48]	@ (8000544 <MX_USB_PCD_Init+0x5c>)
 8000512:	2200      	movs	r2, #0
 8000514:	731a      	strb	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 8000516:	4b0b      	ldr	r3, [pc, #44]	@ (8000544 <MX_USB_PCD_Init+0x5c>)
 8000518:	2200      	movs	r2, #0
 800051a:	735a      	strb	r2, [r3, #13]
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 800051c:	4b09      	ldr	r3, [pc, #36]	@ (8000544 <MX_USB_PCD_Init+0x5c>)
 800051e:	2200      	movs	r2, #0
 8000520:	739a      	strb	r2, [r3, #14]
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 8000522:	4b08      	ldr	r3, [pc, #32]	@ (8000544 <MX_USB_PCD_Init+0x5c>)
 8000524:	2200      	movs	r2, #0
 8000526:	73da      	strb	r2, [r3, #15]
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 8000528:	4b06      	ldr	r3, [pc, #24]	@ (8000544 <MX_USB_PCD_Init+0x5c>)
 800052a:	2200      	movs	r2, #0
 800052c:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 800052e:	4805      	ldr	r0, [pc, #20]	@ (8000544 <MX_USB_PCD_Init+0x5c>)
 8000530:	f001 fe1f 	bl	8002172 <HAL_PCD_Init>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d001      	beq.n	800053e <MX_USB_PCD_Init+0x56>
  {
    Error_Handler();
 800053a:	f000 f8dd 	bl	80006f8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800053e:	bf00      	nop
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	200001e4 	.word	0x200001e4
 8000548:	40016000 	.word	0x40016000

0800054c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b088      	sub	sp, #32
 8000550:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000552:	f107 030c 	add.w	r3, r7, #12
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
 800055a:	605a      	str	r2, [r3, #4]
 800055c:	609a      	str	r2, [r3, #8]
 800055e:	60da      	str	r2, [r3, #12]
 8000560:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000562:	4b24      	ldr	r3, [pc, #144]	@ (80005f4 <MX_GPIO_Init+0xa8>)
 8000564:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000568:	4a22      	ldr	r2, [pc, #136]	@ (80005f4 <MX_GPIO_Init+0xa8>)
 800056a:	f043 0301 	orr.w	r3, r3, #1
 800056e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000572:	4b20      	ldr	r3, [pc, #128]	@ (80005f4 <MX_GPIO_Init+0xa8>)
 8000574:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000578:	f003 0301 	and.w	r3, r3, #1
 800057c:	60bb      	str	r3, [r7, #8]
 800057e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000580:	4b1c      	ldr	r3, [pc, #112]	@ (80005f4 <MX_GPIO_Init+0xa8>)
 8000582:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000586:	4a1b      	ldr	r2, [pc, #108]	@ (80005f4 <MX_GPIO_Init+0xa8>)
 8000588:	f043 0302 	orr.w	r3, r3, #2
 800058c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000590:	4b18      	ldr	r3, [pc, #96]	@ (80005f4 <MX_GPIO_Init+0xa8>)
 8000592:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000596:	f003 0302 	and.w	r3, r3, #2
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800059e:	2200      	movs	r2, #0
 80005a0:	21ff      	movs	r1, #255	@ 0xff
 80005a2:	4815      	ldr	r0, [pc, #84]	@ (80005f8 <MX_GPIO_Init+0xac>)
 80005a4:	f001 fd6a 	bl	800207c <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80005a8:	2200      	movs	r2, #0
 80005aa:	210f      	movs	r1, #15
 80005ac:	4813      	ldr	r0, [pc, #76]	@ (80005fc <MX_GPIO_Init+0xb0>)
 80005ae:	f001 fd65 	bl	800207c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80005b2:	23ff      	movs	r3, #255	@ 0xff
 80005b4:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b6:	2301      	movs	r3, #1
 80005b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ba:	2300      	movs	r3, #0
 80005bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005be:	2300      	movs	r3, #0
 80005c0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c2:	f107 030c 	add.w	r3, r7, #12
 80005c6:	4619      	mov	r1, r3
 80005c8:	480b      	ldr	r0, [pc, #44]	@ (80005f8 <MX_GPIO_Init+0xac>)
 80005ca:	f001 fc05 	bl	8001dd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80005ce:	230f      	movs	r3, #15
 80005d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d2:	2301      	movs	r3, #1
 80005d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d6:	2300      	movs	r3, #0
 80005d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005da:	2300      	movs	r3, #0
 80005dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005de:	f107 030c 	add.w	r3, r7, #12
 80005e2:	4619      	mov	r1, r3
 80005e4:	4805      	ldr	r0, [pc, #20]	@ (80005fc <MX_GPIO_Init+0xb0>)
 80005e6:	f001 fbf7 	bl	8001dd8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005ea:	bf00      	nop
 80005ec:	3720      	adds	r7, #32
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	44020c00 	.word	0x44020c00
 80005f8:	42020000 	.word	0x42020000
 80005fc:	42020400 	.word	0x42020400

08000600 <FDCAN_Config>:

/* USER CODE BEGIN 4 */
static void FDCAN_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b088      	sub	sp, #32
 8000604:	af02      	add	r7, sp, #8
	FDCAN_FilterTypeDef filter;

	filter.IdType = FDCAN_STANDARD_ID;
 8000606:	2300      	movs	r3, #0
 8000608:	603b      	str	r3, [r7, #0]
	filter.FilterIndex = 0;
 800060a:	2300      	movs	r3, #0
 800060c:	607b      	str	r3, [r7, #4]
	filter.FilterType = FDCAN_FILTER_RANGE;
 800060e:	2300      	movs	r3, #0
 8000610:	60bb      	str	r3, [r7, #8]
	filter.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000612:	2301      	movs	r3, #1
 8000614:	60fb      	str	r3, [r7, #12]
	filter.FilterID1 = 0x0;
 8000616:	2300      	movs	r3, #0
 8000618:	613b      	str	r3, [r7, #16]
	filter.FilterID2 = 0x7FF;
 800061a:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800061e:	617b      	str	r3, [r7, #20]

	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &filter) != HAL_OK)
 8000620:	463b      	mov	r3, r7
 8000622:	4619      	mov	r1, r3
 8000624:	4823      	ldr	r0, [pc, #140]	@ (80006b4 <FDCAN_Config+0xb4>)
 8000626:	f000 fe85 	bl	8001334 <HAL_FDCAN_ConfigFilter>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <FDCAN_Config+0x34>
	  {
	    Error_Handler();
 8000630:	f000 f862 	bl	80006f8 <Error_Handler>
	  }

	if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 8000634:	2300      	movs	r3, #0
 8000636:	9300      	str	r3, [sp, #0]
 8000638:	2300      	movs	r3, #0
 800063a:	2202      	movs	r2, #2
 800063c:	2102      	movs	r1, #2
 800063e:	481d      	ldr	r0, [pc, #116]	@ (80006b4 <FDCAN_Config+0xb4>)
 8000640:	f000 fed2 	bl	80013e8 <HAL_FDCAN_ConfigGlobalFilter>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <FDCAN_Config+0x4e>
	  {
	    Error_Handler();
 800064a:	f000 f855 	bl	80006f8 <Error_Handler>
	  }

	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 800064e:	4819      	ldr	r0, [pc, #100]	@ (80006b4 <FDCAN_Config+0xb4>)
 8000650:	f000 fefb 	bl	800144a <HAL_FDCAN_Start>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <FDCAN_Config+0x5e>
	  {
	    Error_Handler();
 800065a:	f000 f84d 	bl	80006f8 <Error_Handler>
	  }

	  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 800065e:	2200      	movs	r2, #0
 8000660:	2101      	movs	r1, #1
 8000662:	4814      	ldr	r0, [pc, #80]	@ (80006b4 <FDCAN_Config+0xb4>)
 8000664:	f001 f866 	bl	8001734 <HAL_FDCAN_ActivateNotification>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <FDCAN_Config+0x72>
	  {
	    Error_Handler();
 800066e:	f000 f843 	bl	80006f8 <Error_Handler>
	  }

	  Tx_Header.Identifier = 0x23D;
 8000672:	4b11      	ldr	r3, [pc, #68]	@ (80006b8 <FDCAN_Config+0xb8>)
 8000674:	f240 223d 	movw	r2, #573	@ 0x23d
 8000678:	601a      	str	r2, [r3, #0]
	  Tx_Header.IdType = FDCAN_STANDARD_ID;
 800067a:	4b0f      	ldr	r3, [pc, #60]	@ (80006b8 <FDCAN_Config+0xb8>)
 800067c:	2200      	movs	r2, #0
 800067e:	605a      	str	r2, [r3, #4]
	  Tx_Header.TxFrameType = FDCAN_DATA_FRAME;
 8000680:	4b0d      	ldr	r3, [pc, #52]	@ (80006b8 <FDCAN_Config+0xb8>)
 8000682:	2200      	movs	r2, #0
 8000684:	609a      	str	r2, [r3, #8]
	  Tx_Header.DataLength = FDCAN_DLC_BYTES_4;
 8000686:	4b0c      	ldr	r3, [pc, #48]	@ (80006b8 <FDCAN_Config+0xb8>)
 8000688:	2204      	movs	r2, #4
 800068a:	60da      	str	r2, [r3, #12]
	  Tx_Header.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800068c:	4b0a      	ldr	r3, [pc, #40]	@ (80006b8 <FDCAN_Config+0xb8>)
 800068e:	2200      	movs	r2, #0
 8000690:	611a      	str	r2, [r3, #16]
	  Tx_Header.BitRateSwitch = FDCAN_BRS_OFF;
 8000692:	4b09      	ldr	r3, [pc, #36]	@ (80006b8 <FDCAN_Config+0xb8>)
 8000694:	2200      	movs	r2, #0
 8000696:	615a      	str	r2, [r3, #20]
	  Tx_Header.FDFormat = FDCAN_CLASSIC_CAN;
 8000698:	4b07      	ldr	r3, [pc, #28]	@ (80006b8 <FDCAN_Config+0xb8>)
 800069a:	2200      	movs	r2, #0
 800069c:	619a      	str	r2, [r3, #24]
	  Tx_Header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800069e:	4b06      	ldr	r3, [pc, #24]	@ (80006b8 <FDCAN_Config+0xb8>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	61da      	str	r2, [r3, #28]
	  Tx_Header.MessageMarker = 0;
 80006a4:	4b04      	ldr	r3, [pc, #16]	@ (80006b8 <FDCAN_Config+0xb8>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	621a      	str	r2, [r3, #32]
}
 80006aa:	bf00      	nop
 80006ac:	3718      	adds	r7, #24
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	20000180 	.word	0x20000180
 80006b8:	200007dc 	.word	0x200007dc

080006bc <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
 80006c4:	6039      	str	r1, [r7, #0]
	if (RxFifo0ITs == FDCAN_IT_RX_FIFO0_NEW_MESSAGE) // we have a new message!
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	2b01      	cmp	r3, #1
 80006ca:	d10a      	bne.n	80006e2 <HAL_FDCAN_RxFifo0Callback+0x26>
	{
		if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &Rx_Header, rxData) != HAL_OK)
 80006cc:	4b07      	ldr	r3, [pc, #28]	@ (80006ec <HAL_FDCAN_RxFifo0Callback+0x30>)
 80006ce:	4a08      	ldr	r2, [pc, #32]	@ (80006f0 <HAL_FDCAN_RxFifo0Callback+0x34>)
 80006d0:	2140      	movs	r1, #64	@ 0x40
 80006d2:	4808      	ldr	r0, [pc, #32]	@ (80006f4 <HAL_FDCAN_RxFifo0Callback+0x38>)
 80006d4:	f000 ff26 	bl	8001524 <HAL_FDCAN_GetRxMessage>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <HAL_FDCAN_RxFifo0Callback+0x26>
		{
			Error_Handler();
 80006de:	f000 f80b 	bl	80006f8 <Error_Handler>
		}
	}
}
 80006e2:	bf00      	nop
 80006e4:	3708      	adds	r7, #8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	200007d4 	.word	0x200007d4
 80006f0:	200007ac 	.word	0x200007ac
 80006f4:	20000180 	.word	0x20000180

080006f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006fc:	b672      	cpsid	i
}
 80006fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000700:	bf00      	nop
 8000702:	e7fd      	b.n	8000700 <Error_Handler+0x8>

08000704 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000708:	bf00      	nop
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
	...

08000714 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b0be      	sub	sp, #248	@ 0xf8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800072c:	f107 0310 	add.w	r3, r7, #16
 8000730:	22d0      	movs	r2, #208	@ 0xd0
 8000732:	2100      	movs	r1, #0
 8000734:	4618      	mov	r0, r3
 8000736:	f009 fd50 	bl	800a1da <memset>
  if(hfdcan->Instance==FDCAN1)
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4a2b      	ldr	r2, [pc, #172]	@ (80007ec <HAL_FDCAN_MspInit+0xd8>)
 8000740:	4293      	cmp	r3, r2
 8000742:	d14f      	bne.n	80007e4 <HAL_FDCAN_MspInit+0xd0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000744:	f04f 0200 	mov.w	r2, #0
 8000748:	f04f 0304 	mov.w	r3, #4
 800074c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL1Q;
 8000750:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000754:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000758:	f107 0310 	add.w	r3, r7, #16
 800075c:	4618      	mov	r0, r3
 800075e:	f004 f899 	bl	8004894 <HAL_RCCEx_PeriphCLKConfig>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8000768:	f7ff ffc6 	bl	80006f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800076c:	4b20      	ldr	r3, [pc, #128]	@ (80007f0 <HAL_FDCAN_MspInit+0xdc>)
 800076e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000772:	4a1f      	ldr	r2, [pc, #124]	@ (80007f0 <HAL_FDCAN_MspInit+0xdc>)
 8000774:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000778:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 800077c:	4b1c      	ldr	r3, [pc, #112]	@ (80007f0 <HAL_FDCAN_MspInit+0xdc>)
 800077e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000782:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800078a:	4b19      	ldr	r3, [pc, #100]	@ (80007f0 <HAL_FDCAN_MspInit+0xdc>)
 800078c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000790:	4a17      	ldr	r2, [pc, #92]	@ (80007f0 <HAL_FDCAN_MspInit+0xdc>)
 8000792:	f043 0302 	orr.w	r3, r3, #2
 8000796:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800079a:	4b15      	ldr	r3, [pc, #84]	@ (80007f0 <HAL_FDCAN_MspInit+0xdc>)
 800079c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007a0:	f003 0302 	and.w	r3, r3, #2
 80007a4:	60bb      	str	r3, [r7, #8]
 80007a6:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB7     ------> FDCAN1_TX
    PB8     ------> FDCAN1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80007a8:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80007ac:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b0:	2302      	movs	r3, #2
 80007b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b6:	2300      	movs	r3, #0
 80007b8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007bc:	2300      	movs	r3, #0
 80007be:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80007c2:	2309      	movs	r3, #9
 80007c4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80007cc:	4619      	mov	r1, r3
 80007ce:	4809      	ldr	r0, [pc, #36]	@ (80007f4 <HAL_FDCAN_MspInit+0xe0>)
 80007d0:	f001 fb02 	bl	8001dd8 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80007d4:	2200      	movs	r2, #0
 80007d6:	2100      	movs	r1, #0
 80007d8:	2027      	movs	r0, #39	@ 0x27
 80007da:	f000 fb79 	bl	8000ed0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80007de:	2027      	movs	r0, #39	@ 0x27
 80007e0:	f000 fb90 	bl	8000f04 <HAL_NVIC_EnableIRQ>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 80007e4:	bf00      	nop
 80007e6:	37f8      	adds	r7, #248	@ 0xf8
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	4000a400 	.word	0x4000a400
 80007f0:	44020c00 	.word	0x44020c00
 80007f4:	42020400 	.word	0x42020400

080007f8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b0b8      	sub	sp, #224	@ 0xe0
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000800:	f107 0310 	add.w	r3, r7, #16
 8000804:	22d0      	movs	r2, #208	@ 0xd0
 8000806:	2100      	movs	r1, #0
 8000808:	4618      	mov	r0, r3
 800080a:	f009 fce6 	bl	800a1da <memset>
  if(hpcd->Instance==USB_DRD_FS)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4a19      	ldr	r2, [pc, #100]	@ (8000878 <HAL_PCD_MspInit+0x80>)
 8000814:	4293      	cmp	r3, r2
 8000816:	d12b      	bne.n	8000870 <HAL_PCD_MspInit+0x78>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000818:	f04f 0200 	mov.w	r2, #0
 800081c:	f04f 0310 	mov.w	r3, #16
 8000820:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000824:	2330      	movs	r3, #48	@ 0x30
 8000826:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800082a:	f107 0310 	add.w	r3, r7, #16
 800082e:	4618      	mov	r0, r3
 8000830:	f004 f830 	bl	8004894 <HAL_RCCEx_PeriphCLKConfig>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <HAL_PCD_MspInit+0x46>
    {
      Error_Handler();
 800083a:	f7ff ff5d 	bl	80006f8 <Error_Handler>
    }

  /* Enable VDDUSB */
  HAL_PWREx_EnableVddUSB();
 800083e:	f003 f8e1 	bl	8003a04 <HAL_PWREx_EnableVddUSB>
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000842:	4b0e      	ldr	r3, [pc, #56]	@ (800087c <HAL_PCD_MspInit+0x84>)
 8000844:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000848:	4a0c      	ldr	r2, [pc, #48]	@ (800087c <HAL_PCD_MspInit+0x84>)
 800084a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800084e:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000852:	4b0a      	ldr	r3, [pc, #40]	@ (800087c <HAL_PCD_MspInit+0x84>)
 8000854:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000858:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	68fb      	ldr	r3, [r7, #12]
    /* USB_DRD_FS interrupt Init */
    HAL_NVIC_SetPriority(USB_DRD_FS_IRQn, 0, 0);
 8000860:	2200      	movs	r2, #0
 8000862:	2100      	movs	r1, #0
 8000864:	204a      	movs	r0, #74	@ 0x4a
 8000866:	f000 fb33 	bl	8000ed0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_DRD_FS_IRQn);
 800086a:	204a      	movs	r0, #74	@ 0x4a
 800086c:	f000 fb4a 	bl	8000f04 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_DRD_FS_MspInit 1 */

  }

}
 8000870:	bf00      	nop
 8000872:	37e0      	adds	r7, #224	@ 0xe0
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	40016000 	.word	0x40016000
 800087c:	44020c00 	.word	0x44020c00

08000880 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000884:	bf00      	nop
 8000886:	e7fd      	b.n	8000884 <NMI_Handler+0x4>

08000888 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800088c:	bf00      	nop
 800088e:	e7fd      	b.n	800088c <HardFault_Handler+0x4>

08000890 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000894:	bf00      	nop
 8000896:	e7fd      	b.n	8000894 <MemManage_Handler+0x4>

08000898 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800089c:	bf00      	nop
 800089e:	e7fd      	b.n	800089c <BusFault_Handler+0x4>

080008a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008a4:	bf00      	nop
 80008a6:	e7fd      	b.n	80008a4 <UsageFault_Handler+0x4>

080008a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ac:	bf00      	nop
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr

080008b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ba:	bf00      	nop
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr

080008c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr

080008d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008d2:	b580      	push	{r7, lr}
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008d6:	f000 f9ff 	bl	8000cd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
	...

080008e0 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80008e4:	4802      	ldr	r0, [pc, #8]	@ (80008f0 <FDCAN1_IT0_IRQHandler+0x10>)
 80008e6:	f001 f80b 	bl	8001900 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	20000180 	.word	0x20000180

080008f4 <USB_DRD_FS_IRQHandler>:

/**
  * @brief This function handles USB FS global interrupt.
  */
void USB_DRD_FS_IRQHandler(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DRD_FS_IRQn 0 */

  /* USER CODE END USB_DRD_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_DRD_FS);
 80008f8:	4802      	ldr	r0, [pc, #8]	@ (8000904 <USB_DRD_FS_IRQHandler+0x10>)
 80008fa:	f001 fd2d 	bl	8002358 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_DRD_FS_IRQn 1 */

  /* USER CODE END USB_DRD_FS_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	200001e4 	.word	0x200001e4

08000908 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b086      	sub	sp, #24
 800090c:	af00      	add	r7, sp, #0
 800090e:	60f8      	str	r0, [r7, #12]
 8000910:	60b9      	str	r1, [r7, #8]
 8000912:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000914:	2300      	movs	r3, #0
 8000916:	617b      	str	r3, [r7, #20]
 8000918:	e00a      	b.n	8000930 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800091a:	f3af 8000 	nop.w
 800091e:	4601      	mov	r1, r0
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	1c5a      	adds	r2, r3, #1
 8000924:	60ba      	str	r2, [r7, #8]
 8000926:	b2ca      	uxtb	r2, r1
 8000928:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800092a:	697b      	ldr	r3, [r7, #20]
 800092c:	3301      	adds	r3, #1
 800092e:	617b      	str	r3, [r7, #20]
 8000930:	697a      	ldr	r2, [r7, #20]
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	429a      	cmp	r2, r3
 8000936:	dbf0      	blt.n	800091a <_read+0x12>
  }

  return len;
 8000938:	687b      	ldr	r3, [r7, #4]
}
 800093a:	4618      	mov	r0, r3
 800093c:	3718      	adds	r7, #24
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}

08000942 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000942:	b580      	push	{r7, lr}
 8000944:	b086      	sub	sp, #24
 8000946:	af00      	add	r7, sp, #0
 8000948:	60f8      	str	r0, [r7, #12]
 800094a:	60b9      	str	r1, [r7, #8]
 800094c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800094e:	2300      	movs	r3, #0
 8000950:	617b      	str	r3, [r7, #20]
 8000952:	e009      	b.n	8000968 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	1c5a      	adds	r2, r3, #1
 8000958:	60ba      	str	r2, [r7, #8]
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	4618      	mov	r0, r3
 800095e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000962:	697b      	ldr	r3, [r7, #20]
 8000964:	3301      	adds	r3, #1
 8000966:	617b      	str	r3, [r7, #20]
 8000968:	697a      	ldr	r2, [r7, #20]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	429a      	cmp	r2, r3
 800096e:	dbf1      	blt.n	8000954 <_write+0x12>
  }
  return len;
 8000970:	687b      	ldr	r3, [r7, #4]
}
 8000972:	4618      	mov	r0, r3
 8000974:	3718      	adds	r7, #24
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}

0800097a <_close>:

int _close(int file)
{
 800097a:	b480      	push	{r7}
 800097c:	b083      	sub	sp, #12
 800097e:	af00      	add	r7, sp, #0
 8000980:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000982:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000986:	4618      	mov	r0, r3
 8000988:	370c      	adds	r7, #12
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr

08000992 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000992:	b480      	push	{r7}
 8000994:	b083      	sub	sp, #12
 8000996:	af00      	add	r7, sp, #0
 8000998:	6078      	str	r0, [r7, #4]
 800099a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80009a2:	605a      	str	r2, [r3, #4]
  return 0;
 80009a4:	2300      	movs	r3, #0
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	370c      	adds	r7, #12
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr

080009b2 <_isatty>:

int _isatty(int file)
{
 80009b2:	b480      	push	{r7}
 80009b4:	b083      	sub	sp, #12
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009ba:	2301      	movs	r3, #1
}
 80009bc:	4618      	mov	r0, r3
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b085      	sub	sp, #20
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	60f8      	str	r0, [r7, #12]
 80009d0:	60b9      	str	r1, [r7, #8]
 80009d2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009d4:	2300      	movs	r3, #0
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3714      	adds	r7, #20
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
	...

080009e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b086      	sub	sp, #24
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009ec:	4a14      	ldr	r2, [pc, #80]	@ (8000a40 <_sbrk+0x5c>)
 80009ee:	4b15      	ldr	r3, [pc, #84]	@ (8000a44 <_sbrk+0x60>)
 80009f0:	1ad3      	subs	r3, r2, r3
 80009f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009f8:	4b13      	ldr	r3, [pc, #76]	@ (8000a48 <_sbrk+0x64>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d102      	bne.n	8000a06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a00:	4b11      	ldr	r3, [pc, #68]	@ (8000a48 <_sbrk+0x64>)
 8000a02:	4a12      	ldr	r2, [pc, #72]	@ (8000a4c <_sbrk+0x68>)
 8000a04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a06:	4b10      	ldr	r3, [pc, #64]	@ (8000a48 <_sbrk+0x64>)
 8000a08:	681a      	ldr	r2, [r3, #0]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4413      	add	r3, r2
 8000a0e:	693a      	ldr	r2, [r7, #16]
 8000a10:	429a      	cmp	r2, r3
 8000a12:	d207      	bcs.n	8000a24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a14:	f009 fc30 	bl	800a278 <__errno>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	220c      	movs	r2, #12
 8000a1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a22:	e009      	b.n	8000a38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a24:	4b08      	ldr	r3, [pc, #32]	@ (8000a48 <_sbrk+0x64>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a2a:	4b07      	ldr	r3, [pc, #28]	@ (8000a48 <_sbrk+0x64>)
 8000a2c:	681a      	ldr	r2, [r3, #0]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4413      	add	r3, r2
 8000a32:	4a05      	ldr	r2, [pc, #20]	@ (8000a48 <_sbrk+0x64>)
 8000a34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a36:	68fb      	ldr	r3, [r7, #12]
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3718      	adds	r7, #24
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	20044000 	.word	0x20044000
 8000a44:	00000700 	.word	0x00000700
 8000a48:	20000808 	.word	0x20000808
 8000a4c:	20000ab8 	.word	0x20000ab8

08000a50 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a56:	4b35      	ldr	r3, [pc, #212]	@ (8000b2c <SystemInit+0xdc>)
 8000a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a5c:	4a33      	ldr	r2, [pc, #204]	@ (8000b2c <SystemInit+0xdc>)
 8000a5e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a62:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8000a66:	4b32      	ldr	r3, [pc, #200]	@ (8000b30 <SystemInit+0xe0>)
 8000a68:	2201      	movs	r2, #1
 8000a6a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000a6c:	4b30      	ldr	r3, [pc, #192]	@ (8000b30 <SystemInit+0xe0>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000a72:	4b2f      	ldr	r3, [pc, #188]	@ (8000b30 <SystemInit+0xe0>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8000a78:	4b2d      	ldr	r3, [pc, #180]	@ (8000b30 <SystemInit+0xe0>)
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	492c      	ldr	r1, [pc, #176]	@ (8000b30 <SystemInit+0xe0>)
 8000a7e:	4b2d      	ldr	r3, [pc, #180]	@ (8000b34 <SystemInit+0xe4>)
 8000a80:	4013      	ands	r3, r2
 8000a82:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8000a84:	4b2a      	ldr	r3, [pc, #168]	@ (8000b30 <SystemInit+0xe0>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8000a8a:	4b29      	ldr	r3, [pc, #164]	@ (8000b30 <SystemInit+0xe0>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8000a90:	4b27      	ldr	r3, [pc, #156]	@ (8000b30 <SystemInit+0xe0>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8000a96:	4b26      	ldr	r3, [pc, #152]	@ (8000b30 <SystemInit+0xe0>)
 8000a98:	4a27      	ldr	r2, [pc, #156]	@ (8000b38 <SystemInit+0xe8>)
 8000a9a:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8000a9c:	4b24      	ldr	r3, [pc, #144]	@ (8000b30 <SystemInit+0xe0>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8000aa2:	4b23      	ldr	r3, [pc, #140]	@ (8000b30 <SystemInit+0xe0>)
 8000aa4:	4a24      	ldr	r2, [pc, #144]	@ (8000b38 <SystemInit+0xe8>)
 8000aa6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8000aa8:	4b21      	ldr	r3, [pc, #132]	@ (8000b30 <SystemInit+0xe0>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8000aae:	4b20      	ldr	r3, [pc, #128]	@ (8000b30 <SystemInit+0xe0>)
 8000ab0:	4a21      	ldr	r2, [pc, #132]	@ (8000b38 <SystemInit+0xe8>)
 8000ab2:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8000ab4:	4b1e      	ldr	r3, [pc, #120]	@ (8000b30 <SystemInit+0xe0>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000aba:	4b1d      	ldr	r3, [pc, #116]	@ (8000b30 <SystemInit+0xe0>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4a1c      	ldr	r2, [pc, #112]	@ (8000b30 <SystemInit+0xe0>)
 8000ac0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ac4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000ac6:	4b1a      	ldr	r3, [pc, #104]	@ (8000b30 <SystemInit+0xe0>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000acc:	4b17      	ldr	r3, [pc, #92]	@ (8000b2c <SystemInit+0xdc>)
 8000ace:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000ad2:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8000ad4:	4b19      	ldr	r3, [pc, #100]	@ (8000b3c <SystemInit+0xec>)
 8000ad6:	699b      	ldr	r3, [r3, #24]
 8000ad8:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8000adc:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8000ae4:	d003      	beq.n	8000aee <SystemInit+0x9e>
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8000aec:	d117      	bne.n	8000b1e <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8000aee:	4b13      	ldr	r3, [pc, #76]	@ (8000b3c <SystemInit+0xec>)
 8000af0:	69db      	ldr	r3, [r3, #28]
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d005      	beq.n	8000b06 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8000afa:	4b10      	ldr	r3, [pc, #64]	@ (8000b3c <SystemInit+0xec>)
 8000afc:	4a10      	ldr	r2, [pc, #64]	@ (8000b40 <SystemInit+0xf0>)
 8000afe:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8000b00:	4b0e      	ldr	r3, [pc, #56]	@ (8000b3c <SystemInit+0xec>)
 8000b02:	4a10      	ldr	r2, [pc, #64]	@ (8000b44 <SystemInit+0xf4>)
 8000b04:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8000b06:	4b0d      	ldr	r3, [pc, #52]	@ (8000b3c <SystemInit+0xec>)
 8000b08:	69db      	ldr	r3, [r3, #28]
 8000b0a:	4a0c      	ldr	r2, [pc, #48]	@ (8000b3c <SystemInit+0xec>)
 8000b0c:	f043 0302 	orr.w	r3, r3, #2
 8000b10:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8000b12:	4b0a      	ldr	r3, [pc, #40]	@ (8000b3c <SystemInit+0xec>)
 8000b14:	69db      	ldr	r3, [r3, #28]
 8000b16:	4a09      	ldr	r2, [pc, #36]	@ (8000b3c <SystemInit+0xec>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	61d3      	str	r3, [r2, #28]
  }
}
 8000b1e:	bf00      	nop
 8000b20:	370c      	adds	r7, #12
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	e000ed00 	.word	0xe000ed00
 8000b30:	44020c00 	.word	0x44020c00
 8000b34:	eae2eae3 	.word	0xeae2eae3
 8000b38:	01010280 	.word	0x01010280
 8000b3c:	40022000 	.word	0x40022000
 8000b40:	08192a3b 	.word	0x08192a3b
 8000b44:	4c5d6e7f 	.word	0x4c5d6e7f

08000b48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b48:	480d      	ldr	r0, [pc, #52]	@ (8000b80 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b4a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b4c:	f7ff ff80 	bl	8000a50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b50:	480c      	ldr	r0, [pc, #48]	@ (8000b84 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b52:	490d      	ldr	r1, [pc, #52]	@ (8000b88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b54:	4a0d      	ldr	r2, [pc, #52]	@ (8000b8c <LoopForever+0xe>)
  movs r3, #0
 8000b56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b58:	e002      	b.n	8000b60 <LoopCopyDataInit>

08000b5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b5e:	3304      	adds	r3, #4

08000b60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b64:	d3f9      	bcc.n	8000b5a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b66:	4a0a      	ldr	r2, [pc, #40]	@ (8000b90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b68:	4c0a      	ldr	r4, [pc, #40]	@ (8000b94 <LoopForever+0x16>)
  movs r3, #0
 8000b6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b6c:	e001      	b.n	8000b72 <LoopFillZerobss>

08000b6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b70:	3204      	adds	r2, #4

08000b72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b74:	d3fb      	bcc.n	8000b6e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b76:	f009 fb85 	bl	800a284 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b7a:	f7ff fb8b 	bl	8000294 <main>

08000b7e <LoopForever>:

LoopForever:
    b LoopForever
 8000b7e:	e7fe      	b.n	8000b7e <LoopForever>
  ldr   r0, =_estack
 8000b80:	20044000 	.word	0x20044000
  ldr r0, =_sdata
 8000b84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b88:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 8000b8c:	0800afe0 	.word	0x0800afe0
  ldr r2, =_sbss
 8000b90:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 8000b94:	20000ab8 	.word	0x20000ab8

08000b98 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b98:	e7fe      	b.n	8000b98 <ADC1_IRQHandler>
	...

08000b9c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ba0:	2003      	movs	r0, #3
 8000ba2:	f000 f98a 	bl	8000eba <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000ba6:	f003 fd2d 	bl	8004604 <HAL_RCC_GetSysClockFreq>
 8000baa:	4602      	mov	r2, r0
 8000bac:	4b0c      	ldr	r3, [pc, #48]	@ (8000be0 <HAL_Init+0x44>)
 8000bae:	6a1b      	ldr	r3, [r3, #32]
 8000bb0:	f003 030f 	and.w	r3, r3, #15
 8000bb4:	490b      	ldr	r1, [pc, #44]	@ (8000be4 <HAL_Init+0x48>)
 8000bb6:	5ccb      	ldrb	r3, [r1, r3]
 8000bb8:	fa22 f303 	lsr.w	r3, r2, r3
 8000bbc:	4a0a      	ldr	r2, [pc, #40]	@ (8000be8 <HAL_Init+0x4c>)
 8000bbe:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000bc0:	2004      	movs	r0, #4
 8000bc2:	f000 f9cf 	bl	8000f64 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bc6:	200f      	movs	r0, #15
 8000bc8:	f000 f810 	bl	8000bec <HAL_InitTick>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	e002      	b.n	8000bdc <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000bd6:	f7ff fd95 	bl	8000704 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bda:	2300      	movs	r3, #0
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	44020c00 	.word	0x44020c00
 8000be4:	0800af84 	.word	0x0800af84
 8000be8:	20000000 	.word	0x20000000

08000bec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000bf8:	4b33      	ldr	r3, [pc, #204]	@ (8000cc8 <HAL_InitTick+0xdc>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d101      	bne.n	8000c04 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8000c00:	2301      	movs	r3, #1
 8000c02:	e05c      	b.n	8000cbe <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8000c04:	4b31      	ldr	r3, [pc, #196]	@ (8000ccc <HAL_InitTick+0xe0>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f003 0304 	and.w	r3, r3, #4
 8000c0c:	2b04      	cmp	r3, #4
 8000c0e:	d10c      	bne.n	8000c2a <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8000c10:	4b2f      	ldr	r3, [pc, #188]	@ (8000cd0 <HAL_InitTick+0xe4>)
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	4b2c      	ldr	r3, [pc, #176]	@ (8000cc8 <HAL_InitTick+0xdc>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	4619      	mov	r1, r3
 8000c1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	e037      	b.n	8000c9a <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8000c2a:	f000 f9f3 	bl	8001014 <HAL_SYSTICK_GetCLKSourceConfig>
 8000c2e:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	2b02      	cmp	r3, #2
 8000c34:	d023      	beq.n	8000c7e <HAL_InitTick+0x92>
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	2b02      	cmp	r3, #2
 8000c3a:	d82d      	bhi.n	8000c98 <HAL_InitTick+0xac>
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d003      	beq.n	8000c4a <HAL_InitTick+0x5e>
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d00d      	beq.n	8000c64 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8000c48:	e026      	b.n	8000c98 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8000c4a:	4b21      	ldr	r3, [pc, #132]	@ (8000cd0 <HAL_InitTick+0xe4>)
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	4b1e      	ldr	r3, [pc, #120]	@ (8000cc8 <HAL_InitTick+0xdc>)
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	4619      	mov	r1, r3
 8000c54:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8000c58:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c60:	60fb      	str	r3, [r7, #12]
        break;
 8000c62:	e01a      	b.n	8000c9a <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000c64:	4b18      	ldr	r3, [pc, #96]	@ (8000cc8 <HAL_InitTick+0xdc>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	461a      	mov	r2, r3
 8000c6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c6e:	fbb3 f3f2 	udiv	r3, r3, r2
 8000c72:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c7a:	60fb      	str	r3, [r7, #12]
        break;
 8000c7c:	e00d      	b.n	8000c9a <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000c7e:	4b12      	ldr	r3, [pc, #72]	@ (8000cc8 <HAL_InitTick+0xdc>)
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	461a      	mov	r2, r3
 8000c84:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c88:	fbb3 f3f2 	udiv	r3, r3, r2
 8000c8c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c94:	60fb      	str	r3, [r7, #12]
        break;
 8000c96:	e000      	b.n	8000c9a <HAL_InitTick+0xae>
        break;
 8000c98:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8000c9a:	68f8      	ldr	r0, [r7, #12]
 8000c9c:	f000 f940 	bl	8000f20 <HAL_SYSTICK_Config>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e009      	b.n	8000cbe <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000caa:	2200      	movs	r2, #0
 8000cac:	6879      	ldr	r1, [r7, #4]
 8000cae:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb2:	f000 f90d 	bl	8000ed0 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8000cb6:	4a07      	ldr	r2, [pc, #28]	@ (8000cd4 <HAL_InitTick+0xe8>)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000cbc:	2300      	movs	r3, #0
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3710      	adds	r7, #16
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20000008 	.word	0x20000008
 8000ccc:	e000e010 	.word	0xe000e010
 8000cd0:	20000000 	.word	0x20000000
 8000cd4:	20000004 	.word	0x20000004

08000cd8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cdc:	4b06      	ldr	r3, [pc, #24]	@ (8000cf8 <HAL_IncTick+0x20>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	4b06      	ldr	r3, [pc, #24]	@ (8000cfc <HAL_IncTick+0x24>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	4a04      	ldr	r2, [pc, #16]	@ (8000cfc <HAL_IncTick+0x24>)
 8000cea:	6013      	str	r3, [r2, #0]
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	20000008 	.word	0x20000008
 8000cfc:	2000080c 	.word	0x2000080c

08000d00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  return uwTick;
 8000d04:	4b03      	ldr	r3, [pc, #12]	@ (8000d14 <HAL_GetTick+0x14>)
 8000d06:	681b      	ldr	r3, [r3, #0]
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	2000080c 	.word	0x2000080c

08000d18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d20:	f7ff ffee 	bl	8000d00 <HAL_GetTick>
 8000d24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d30:	d005      	beq.n	8000d3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d32:	4b0a      	ldr	r3, [pc, #40]	@ (8000d5c <HAL_Delay+0x44>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	461a      	mov	r2, r3
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d3e:	bf00      	nop
 8000d40:	f7ff ffde 	bl	8000d00 <HAL_GetTick>
 8000d44:	4602      	mov	r2, r0
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	1ad3      	subs	r3, r2, r3
 8000d4a:	68fa      	ldr	r2, [r7, #12]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d8f7      	bhi.n	8000d40 <HAL_Delay+0x28>
  {
  }
}
 8000d50:	bf00      	nop
 8000d52:	bf00      	nop
 8000d54:	3710      	adds	r7, #16
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20000008 	.word	0x20000008

08000d60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b085      	sub	sp, #20
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	f003 0307 	and.w	r3, r3, #7
 8000d6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d70:	4b0c      	ldr	r3, [pc, #48]	@ (8000da4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d76:	68ba      	ldr	r2, [r7, #8]
 8000d78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d92:	4a04      	ldr	r2, [pc, #16]	@ (8000da4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	60d3      	str	r3, [r2, #12]
}
 8000d98:	bf00      	nop
 8000d9a:	3714      	adds	r7, #20
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dac:	4b04      	ldr	r3, [pc, #16]	@ (8000dc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	0a1b      	lsrs	r3, r3, #8
 8000db2:	f003 0307 	and.w	r3, r3, #7
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000dce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	db0b      	blt.n	8000dee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dd6:	88fb      	ldrh	r3, [r7, #6]
 8000dd8:	f003 021f 	and.w	r2, r3, #31
 8000ddc:	4907      	ldr	r1, [pc, #28]	@ (8000dfc <__NVIC_EnableIRQ+0x38>)
 8000dde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000de2:	095b      	lsrs	r3, r3, #5
 8000de4:	2001      	movs	r0, #1
 8000de6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dee:	bf00      	nop
 8000df0:	370c      	adds	r7, #12
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	e000e100 	.word	0xe000e100

08000e00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	6039      	str	r1, [r7, #0]
 8000e0a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000e0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	db0a      	blt.n	8000e2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	b2da      	uxtb	r2, r3
 8000e18:	490c      	ldr	r1, [pc, #48]	@ (8000e4c <__NVIC_SetPriority+0x4c>)
 8000e1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e1e:	0112      	lsls	r2, r2, #4
 8000e20:	b2d2      	uxtb	r2, r2
 8000e22:	440b      	add	r3, r1
 8000e24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e28:	e00a      	b.n	8000e40 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	b2da      	uxtb	r2, r3
 8000e2e:	4908      	ldr	r1, [pc, #32]	@ (8000e50 <__NVIC_SetPriority+0x50>)
 8000e30:	88fb      	ldrh	r3, [r7, #6]
 8000e32:	f003 030f 	and.w	r3, r3, #15
 8000e36:	3b04      	subs	r3, #4
 8000e38:	0112      	lsls	r2, r2, #4
 8000e3a:	b2d2      	uxtb	r2, r2
 8000e3c:	440b      	add	r3, r1
 8000e3e:	761a      	strb	r2, [r3, #24]
}
 8000e40:	bf00      	nop
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	e000e100 	.word	0xe000e100
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b089      	sub	sp, #36	@ 0x24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	f003 0307 	and.w	r3, r3, #7
 8000e66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	f1c3 0307 	rsb	r3, r3, #7
 8000e6e:	2b04      	cmp	r3, #4
 8000e70:	bf28      	it	cs
 8000e72:	2304      	movcs	r3, #4
 8000e74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	3304      	adds	r3, #4
 8000e7a:	2b06      	cmp	r3, #6
 8000e7c:	d902      	bls.n	8000e84 <NVIC_EncodePriority+0x30>
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	3b03      	subs	r3, #3
 8000e82:	e000      	b.n	8000e86 <NVIC_EncodePriority+0x32>
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e88:	f04f 32ff 	mov.w	r2, #4294967295
 8000e8c:	69bb      	ldr	r3, [r7, #24]
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	43da      	mvns	r2, r3
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	401a      	ands	r2, r3
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea6:	43d9      	mvns	r1, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eac:	4313      	orrs	r3, r2
         );
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3724      	adds	r7, #36	@ 0x24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr

08000eba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b082      	sub	sp, #8
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f7ff ff4c 	bl	8000d60 <__NVIC_SetPriorityGrouping>
}
 8000ec8:	bf00      	nop
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b086      	sub	sp, #24
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	60b9      	str	r1, [r7, #8]
 8000eda:	607a      	str	r2, [r7, #4]
 8000edc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ede:	f7ff ff63 	bl	8000da8 <__NVIC_GetPriorityGrouping>
 8000ee2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ee4:	687a      	ldr	r2, [r7, #4]
 8000ee6:	68b9      	ldr	r1, [r7, #8]
 8000ee8:	6978      	ldr	r0, [r7, #20]
 8000eea:	f7ff ffb3 	bl	8000e54 <NVIC_EncodePriority>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ef4:	4611      	mov	r1, r2
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff ff82 	bl	8000e00 <__NVIC_SetPriority>
}
 8000efc:	bf00      	nop
 8000efe:	3718      	adds	r7, #24
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff ff56 	bl	8000dc4 <__NVIC_EnableIRQ>
}
 8000f18:	bf00      	nop
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	3b01      	subs	r3, #1
 8000f2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f30:	d301      	bcc.n	8000f36 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8000f32:	2301      	movs	r3, #1
 8000f34:	e00d      	b.n	8000f52 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8000f36:	4a0a      	ldr	r2, [pc, #40]	@ (8000f60 <HAL_SYSTICK_Config+0x40>)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3b01      	subs	r3, #1
 8000f3c:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8000f3e:	4b08      	ldr	r3, [pc, #32]	@ (8000f60 <HAL_SYSTICK_Config+0x40>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8000f44:	4b06      	ldr	r3, [pc, #24]	@ (8000f60 <HAL_SYSTICK_Config+0x40>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a05      	ldr	r2, [pc, #20]	@ (8000f60 <HAL_SYSTICK_Config+0x40>)
 8000f4a:	f043 0303 	orr.w	r3, r3, #3
 8000f4e:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8000f50:	2300      	movs	r3, #0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	e000e010 	.word	0xe000e010

08000f64 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2b04      	cmp	r3, #4
 8000f70:	d844      	bhi.n	8000ffc <HAL_SYSTICK_CLKSourceConfig+0x98>
 8000f72:	a201      	add	r2, pc, #4	@ (adr r2, 8000f78 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8000f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f78:	08000f9b 	.word	0x08000f9b
 8000f7c:	08000fb9 	.word	0x08000fb9
 8000f80:	08000fdb 	.word	0x08000fdb
 8000f84:	08000ffd 	.word	0x08000ffd
 8000f88:	08000f8d 	.word	0x08000f8d
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000f8c:	4b1f      	ldr	r3, [pc, #124]	@ (800100c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a1e      	ldr	r2, [pc, #120]	@ (800100c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000f92:	f043 0304 	orr.w	r3, r3, #4
 8000f96:	6013      	str	r3, [r2, #0]
      break;
 8000f98:	e031      	b.n	8000ffe <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000f9a:	4b1c      	ldr	r3, [pc, #112]	@ (800100c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a1b      	ldr	r2, [pc, #108]	@ (800100c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000fa0:	f023 0304 	bic.w	r3, r3, #4
 8000fa4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8000fa6:	4b1a      	ldr	r3, [pc, #104]	@ (8001010 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000fa8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000fac:	4a18      	ldr	r2, [pc, #96]	@ (8001010 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000fae:	f023 030c 	bic.w	r3, r3, #12
 8000fb2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8000fb6:	e022      	b.n	8000ffe <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000fb8:	4b14      	ldr	r3, [pc, #80]	@ (800100c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a13      	ldr	r2, [pc, #76]	@ (800100c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000fbe:	f023 0304 	bic.w	r3, r3, #4
 8000fc2:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8000fc4:	4b12      	ldr	r3, [pc, #72]	@ (8001010 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000fc6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000fca:	f023 030c 	bic.w	r3, r3, #12
 8000fce:	4a10      	ldr	r2, [pc, #64]	@ (8001010 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000fd0:	f043 0304 	orr.w	r3, r3, #4
 8000fd4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8000fd8:	e011      	b.n	8000ffe <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000fda:	4b0c      	ldr	r3, [pc, #48]	@ (800100c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a0b      	ldr	r2, [pc, #44]	@ (800100c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000fe0:	f023 0304 	bic.w	r3, r3, #4
 8000fe4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8000fe6:	4b0a      	ldr	r3, [pc, #40]	@ (8001010 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000fe8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000fec:	f023 030c 	bic.w	r3, r3, #12
 8000ff0:	4a07      	ldr	r2, [pc, #28]	@ (8001010 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000ff2:	f043 0308 	orr.w	r3, r3, #8
 8000ff6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8000ffa:	e000      	b.n	8000ffe <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8000ffc:	bf00      	nop
  }
}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	e000e010 	.word	0xe000e010
 8001010:	44020c00 	.word	0x44020c00

08001014 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 800101a:	4b17      	ldr	r3, [pc, #92]	@ (8001078 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f003 0304 	and.w	r3, r3, #4
 8001022:	2b00      	cmp	r3, #0
 8001024:	d002      	beq.n	800102c <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8001026:	2304      	movs	r3, #4
 8001028:	607b      	str	r3, [r7, #4]
 800102a:	e01e      	b.n	800106a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 800102c:	4b13      	ldr	r3, [pc, #76]	@ (800107c <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 800102e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001032:	f003 030c 	and.w	r3, r3, #12
 8001036:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	2b08      	cmp	r3, #8
 800103c:	d00f      	beq.n	800105e <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	2b08      	cmp	r3, #8
 8001042:	d80f      	bhi.n	8001064 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d003      	beq.n	8001052 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	2b04      	cmp	r3, #4
 800104e:	d003      	beq.n	8001058 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8001050:	e008      	b.n	8001064 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001052:	2300      	movs	r3, #0
 8001054:	607b      	str	r3, [r7, #4]
        break;
 8001056:	e008      	b.n	800106a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8001058:	2301      	movs	r3, #1
 800105a:	607b      	str	r3, [r7, #4]
        break;
 800105c:	e005      	b.n	800106a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 800105e:	2302      	movs	r3, #2
 8001060:	607b      	str	r3, [r7, #4]
        break;
 8001062:	e002      	b.n	800106a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001064:	2300      	movs	r3, #0
 8001066:	607b      	str	r3, [r7, #4]
        break;
 8001068:	bf00      	nop
    }
  }
  return systick_source;
 800106a:	687b      	ldr	r3, [r7, #4]
}
 800106c:	4618      	mov	r0, r3
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	e000e010 	.word	0xe000e010
 800107c:	44020c00 	.word	0x44020c00

08001080 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d101      	bne.n	8001092 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e147      	b.n	8001322 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001098:	b2db      	uxtb	r3, r3
 800109a:	2b00      	cmp	r3, #0
 800109c:	d106      	bne.n	80010ac <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2200      	movs	r2, #0
 80010a2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f7ff fb34 	bl	8000714 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	699a      	ldr	r2, [r3, #24]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f022 0210 	bic.w	r2, r2, #16
 80010ba:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010bc:	f7ff fe20 	bl	8000d00 <HAL_GetTick>
 80010c0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80010c2:	e012      	b.n	80010ea <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80010c4:	f7ff fe1c 	bl	8000d00 <HAL_GetTick>
 80010c8:	4602      	mov	r2, r0
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	2b0a      	cmp	r3, #10
 80010d0:	d90b      	bls.n	80010ea <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010d6:	f043 0201 	orr.w	r2, r3, #1
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2203      	movs	r2, #3
 80010e2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e11b      	b.n	8001322 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	f003 0308 	and.w	r3, r3, #8
 80010f4:	2b08      	cmp	r3, #8
 80010f6:	d0e5      	beq.n	80010c4 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	699a      	ldr	r2, [r3, #24]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f042 0201 	orr.w	r2, r2, #1
 8001106:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001108:	f7ff fdfa 	bl	8000d00 <HAL_GetTick>
 800110c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800110e:	e012      	b.n	8001136 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001110:	f7ff fdf6 	bl	8000d00 <HAL_GetTick>
 8001114:	4602      	mov	r2, r0
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	2b0a      	cmp	r3, #10
 800111c:	d90b      	bls.n	8001136 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001122:	f043 0201 	orr.w	r2, r3, #1
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2203      	movs	r2, #3
 800112e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e0f5      	b.n	8001322 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	699b      	ldr	r3, [r3, #24]
 800113c:	f003 0301 	and.w	r3, r3, #1
 8001140:	2b00      	cmp	r3, #0
 8001142:	d0e5      	beq.n	8001110 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	699a      	ldr	r2, [r3, #24]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f042 0202 	orr.w	r2, r2, #2
 8001152:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a74      	ldr	r2, [pc, #464]	@ (800132c <HAL_FDCAN_Init+0x2ac>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d103      	bne.n	8001166 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800115e:	4a74      	ldr	r2, [pc, #464]	@ (8001330 <HAL_FDCAN_Init+0x2b0>)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	7c1b      	ldrb	r3, [r3, #16]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d108      	bne.n	8001180 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	699a      	ldr	r2, [r3, #24]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800117c:	619a      	str	r2, [r3, #24]
 800117e:	e007      	b.n	8001190 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	699a      	ldr	r2, [r3, #24]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800118e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	7c5b      	ldrb	r3, [r3, #17]
 8001194:	2b01      	cmp	r3, #1
 8001196:	d108      	bne.n	80011aa <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	699a      	ldr	r2, [r3, #24]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80011a6:	619a      	str	r2, [r3, #24]
 80011a8:	e007      	b.n	80011ba <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	699a      	ldr	r2, [r3, #24]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80011b8:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	7c9b      	ldrb	r3, [r3, #18]
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d108      	bne.n	80011d4 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	699a      	ldr	r2, [r3, #24]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80011d0:	619a      	str	r2, [r3, #24]
 80011d2:	e007      	b.n	80011e4 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	699a      	ldr	r2, [r3, #24]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80011e2:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	699b      	ldr	r3, [r3, #24]
 80011ea:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	689a      	ldr	r2, [r3, #8]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	430a      	orrs	r2, r1
 80011f8:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	699a      	ldr	r2, [r3, #24]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8001208:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	691a      	ldr	r2, [r3, #16]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f022 0210 	bic.w	r2, r2, #16
 8001218:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	68db      	ldr	r3, [r3, #12]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d108      	bne.n	8001234 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	699a      	ldr	r2, [r3, #24]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f042 0204 	orr.w	r2, r2, #4
 8001230:	619a      	str	r2, [r3, #24]
 8001232:	e02c      	b.n	800128e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d028      	beq.n	800128e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	2b02      	cmp	r3, #2
 8001242:	d01c      	beq.n	800127e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	699a      	ldr	r2, [r3, #24]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001252:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	691a      	ldr	r2, [r3, #16]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f042 0210 	orr.w	r2, r2, #16
 8001262:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	2b03      	cmp	r3, #3
 800126a:	d110      	bne.n	800128e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	699a      	ldr	r2, [r3, #24]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f042 0220 	orr.w	r2, r2, #32
 800127a:	619a      	str	r2, [r3, #24]
 800127c:	e007      	b.n	800128e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	699a      	ldr	r2, [r3, #24]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f042 0220 	orr.w	r2, r2, #32
 800128c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	699b      	ldr	r3, [r3, #24]
 8001292:	3b01      	subs	r3, #1
 8001294:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	69db      	ldr	r3, [r3, #28]
 800129a:	3b01      	subs	r3, #1
 800129c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800129e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6a1b      	ldr	r3, [r3, #32]
 80012a4:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80012a6:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	695b      	ldr	r3, [r3, #20]
 80012ae:	3b01      	subs	r3, #1
 80012b0:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80012b6:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80012b8:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80012c2:	d115      	bne.n	80012f0 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012c8:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012ce:	3b01      	subs	r3, #1
 80012d0:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80012d2:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d8:	3b01      	subs	r3, #1
 80012da:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80012dc:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012e4:	3b01      	subs	r3, #1
 80012e6:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80012ec:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80012ee:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	430a      	orrs	r2, r1
 8001302:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f000 fc88 	bl	8001c1c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2200      	movs	r2, #0
 8001310:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2200      	movs	r2, #0
 8001316:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2201      	movs	r2, #1
 800131c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	4000a400 	.word	0x4000a400
 8001330:	4000a500 	.word	0x4000a500

08001334 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8001334:	b480      	push	{r7}
 8001336:	b087      	sub	sp, #28
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001344:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001346:	7dfb      	ldrb	r3, [r7, #23]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d002      	beq.n	8001352 <HAL_FDCAN_ConfigFilter+0x1e>
 800134c:	7dfb      	ldrb	r3, [r7, #23]
 800134e:	2b02      	cmp	r3, #2
 8001350:	d13d      	bne.n	80013ce <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d119      	bne.n	800138e <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001366:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	691b      	ldr	r3, [r3, #16]
 800136c:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 800136e:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001374:	4313      	orrs	r3, r2
 8001376:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	4413      	add	r3, r2
 8001384:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	693a      	ldr	r2, [r7, #16]
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	e01d      	b.n	80013ca <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	68db      	ldr	r3, [r3, #12]
 8001392:	075a      	lsls	r2, r3, #29
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	691b      	ldr	r3, [r3, #16]
 8001398:	4313      	orrs	r3, r2
 800139a:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	079a      	lsls	r2, r3, #30
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	695b      	ldr	r3, [r3, #20]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	00db      	lsls	r3, r3, #3
 80013b4:	4413      	add	r3, r2
 80013b6:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	3304      	adds	r3, #4
 80013c2:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	68fa      	ldr	r2, [r7, #12]
 80013c8:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80013ca:	2300      	movs	r3, #0
 80013cc:	e006      	b.n	80013dc <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013d2:	f043 0202 	orr.w	r2, r3, #2
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
  }
}
 80013dc:	4618      	mov	r0, r3
 80013de:	371c      	adds	r7, #28
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
 80013f4:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d116      	bne.n	8001430 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800140a:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	011a      	lsls	r2, r3, #4
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	431a      	orrs	r2, r3
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	431a      	orrs	r2, r3
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	431a      	orrs	r2, r3
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	430a      	orrs	r2, r1
 8001428:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 800142c:	2300      	movs	r3, #0
 800142e:	e006      	b.n	800143e <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001434:	f043 0204 	orr.w	r2, r3, #4
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800143c:	2301      	movs	r3, #1
  }
}
 800143e:	4618      	mov	r0, r3
 8001440:	3714      	adds	r7, #20
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr

0800144a <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800144a:	b480      	push	{r7}
 800144c:	b083      	sub	sp, #12
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001458:	b2db      	uxtb	r3, r3
 800145a:	2b01      	cmp	r3, #1
 800145c:	d110      	bne.n	8001480 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2202      	movs	r2, #2
 8001462:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	699a      	ldr	r2, [r3, #24]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f022 0201 	bic.w	r2, r2, #1
 8001474:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2200      	movs	r2, #0
 800147a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 800147c:	2300      	movs	r3, #0
 800147e:	e006      	b.n	800148e <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001484:	f043 0204 	orr.w	r2, r3, #4
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
  }
}
 800148e:	4618      	mov	r0, r3
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr

0800149a <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b086      	sub	sp, #24
 800149e:	af00      	add	r7, sp, #0
 80014a0:	60f8      	str	r0, [r7, #12]
 80014a2:	60b9      	str	r1, [r7, #8]
 80014a4:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d12c      	bne.n	800150c <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80014ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d007      	beq.n	80014d2 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014c6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e023      	b.n	800151a <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80014da:	0c1b      	lsrs	r3, r3, #16
 80014dc:	f003 0303 	and.w	r3, r3, #3
 80014e0:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	68b9      	ldr	r1, [r7, #8]
 80014e8:	68f8      	ldr	r0, [r7, #12]
 80014ea:	f000 fbf9 	bl	8001ce0 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2101      	movs	r1, #1
 80014f4:	697a      	ldr	r2, [r7, #20]
 80014f6:	fa01 f202 	lsl.w	r2, r1, r2
 80014fa:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80014fe:	2201      	movs	r2, #1
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	409a      	lsls	r2, r3
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8001508:	2300      	movs	r3, #0
 800150a:	e006      	b.n	800151a <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001510:	f043 0208 	orr.w	r2, r3, #8
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
  }
}
 800151a:	4618      	mov	r0, r3
 800151c:	3718      	adds	r7, #24
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
	...

08001524 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001524:	b480      	push	{r7}
 8001526:	b08b      	sub	sp, #44	@ 0x2c
 8001528:	af00      	add	r7, sp, #0
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	60b9      	str	r1, [r7, #8]
 800152e:	607a      	str	r2, [r7, #4]
 8001530:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8001532:	2300      	movs	r3, #0
 8001534:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800153c:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 800153e:	7efb      	ldrb	r3, [r7, #27]
 8001540:	2b02      	cmp	r3, #2
 8001542:	f040 80e8 	bne.w	8001716 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	2b40      	cmp	r3, #64	@ 0x40
 800154a:	d137      	bne.n	80015bc <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001554:	f003 030f 	and.w	r3, r3, #15
 8001558:	2b00      	cmp	r3, #0
 800155a:	d107      	bne.n	800156c <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001560:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e0db      	b.n	8001724 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001574:	0e1b      	lsrs	r3, r3, #24
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	2b01      	cmp	r3, #1
 800157c:	d10a      	bne.n	8001594 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001586:	0a5b      	lsrs	r3, r3, #9
 8001588:	f003 0301 	and.w	r3, r3, #1
 800158c:	2b01      	cmp	r3, #1
 800158e:	d101      	bne.n	8001594 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001590:	2301      	movs	r3, #1
 8001592:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800159c:	0a1b      	lsrs	r3, r3, #8
 800159e:	f003 0303 	and.w	r3, r3, #3
 80015a2:	69fa      	ldr	r2, [r7, #28]
 80015a4:	4413      	add	r3, r2
 80015a6:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 80015ac:	69fa      	ldr	r2, [r7, #28]
 80015ae:	4613      	mov	r3, r2
 80015b0:	00db      	lsls	r3, r3, #3
 80015b2:	4413      	add	r3, r2
 80015b4:	00db      	lsls	r3, r3, #3
 80015b6:	440b      	add	r3, r1
 80015b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80015ba:	e036      	b.n	800162a <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80015c4:	f003 030f 	and.w	r3, r3, #15
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d107      	bne.n	80015dc <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015d0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e0a3      	b.n	8001724 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80015e4:	0e1b      	lsrs	r3, r3, #24
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d10a      	bne.n	8001604 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80015f6:	0a1b      	lsrs	r3, r3, #8
 80015f8:	f003 0301 	and.w	r3, r3, #1
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d101      	bne.n	8001604 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001600:	2301      	movs	r3, #1
 8001602:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800160c:	0a1b      	lsrs	r3, r3, #8
 800160e:	f003 0303 	and.w	r3, r3, #3
 8001612:	69fa      	ldr	r2, [r7, #28]
 8001614:	4413      	add	r3, r2
 8001616:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800161c:	69fa      	ldr	r2, [r7, #28]
 800161e:	4613      	mov	r3, r2
 8001620:	00db      	lsls	r3, r3, #3
 8001622:	4413      	add	r3, r2
 8001624:	00db      	lsls	r3, r3, #3
 8001626:	440b      	add	r3, r1
 8001628:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800162a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d107      	bne.n	800164e <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800163e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	0c9b      	lsrs	r3, r3, #18
 8001644:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	e005      	b.n	800165a <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800164e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800165a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001674:	3304      	adds	r3, #4
 8001676:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	b29a      	uxth	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8001682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	0c1b      	lsrs	r3, r3, #16
 8001688:	f003 020f 	and.w	r2, r3, #15
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800169c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80016a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	0e1b      	lsrs	r3, r3, #24
 80016ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80016b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	0fda      	lsrs	r2, r3, #31
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80016c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016c2:	3304      	adds	r3, #4
 80016c4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80016c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016c8:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80016ca:	2300      	movs	r3, #0
 80016cc:	623b      	str	r3, [r7, #32]
 80016ce:	e00a      	b.n	80016e6 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80016d0:	697a      	ldr	r2, [r7, #20]
 80016d2:	6a3b      	ldr	r3, [r7, #32]
 80016d4:	441a      	add	r2, r3
 80016d6:	6839      	ldr	r1, [r7, #0]
 80016d8:	6a3b      	ldr	r3, [r7, #32]
 80016da:	440b      	add	r3, r1
 80016dc:	7812      	ldrb	r2, [r2, #0]
 80016de:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80016e0:	6a3b      	ldr	r3, [r7, #32]
 80016e2:	3301      	adds	r3, #1
 80016e4:	623b      	str	r3, [r7, #32]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	68db      	ldr	r3, [r3, #12]
 80016ea:	4a11      	ldr	r2, [pc, #68]	@ (8001730 <HAL_FDCAN_GetRxMessage+0x20c>)
 80016ec:	5cd3      	ldrb	r3, [r2, r3]
 80016ee:	461a      	mov	r2, r3
 80016f0:	6a3b      	ldr	r3, [r7, #32]
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d3ec      	bcc.n	80016d0 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	2b40      	cmp	r3, #64	@ 0x40
 80016fa:	d105      	bne.n	8001708 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	69fa      	ldr	r2, [r7, #28]
 8001702:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8001706:	e004      	b.n	8001712 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	69fa      	ldr	r2, [r7, #28]
 800170e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8001712:	2300      	movs	r3, #0
 8001714:	e006      	b.n	8001724 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800171a:	f043 0208 	orr.w	r2, r3, #8
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
  }
}
 8001724:	4618      	mov	r0, r3
 8001726:	372c      	adds	r7, #44	@ 0x2c
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	0800af94 	.word	0x0800af94

08001734 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8001734:	b480      	push	{r7}
 8001736:	b087      	sub	sp, #28
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001746:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001748:	7dfb      	ldrb	r3, [r7, #23]
 800174a:	2b01      	cmp	r3, #1
 800174c:	d003      	beq.n	8001756 <HAL_FDCAN_ActivateNotification+0x22>
 800174e:	7dfb      	ldrb	r3, [r7, #23]
 8001750:	2b02      	cmp	r3, #2
 8001752:	f040 80c8 	bne.w	80018e6 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800175c:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	f003 0307 	and.w	r3, r3, #7
 8001764:	2b00      	cmp	r3, #0
 8001766:	d004      	beq.n	8001772 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	2b00      	cmp	r3, #0
 8001770:	d03b      	beq.n	80017ea <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001778:	2b00      	cmp	r3, #0
 800177a:	d004      	beq.n	8001786 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	2b00      	cmp	r3, #0
 8001784:	d031      	beq.n	80017ea <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 800178c:	2b00      	cmp	r3, #0
 800178e:	d004      	beq.n	800179a <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	f003 0304 	and.w	r3, r3, #4
 8001796:	2b00      	cmp	r3, #0
 8001798:	d027      	beq.n	80017ea <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d004      	beq.n	80017ae <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	f003 0308 	and.w	r3, r3, #8
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d01d      	beq.n	80017ea <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d004      	beq.n	80017c2 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	f003 0310 	and.w	r3, r3, #16
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d013      	beq.n	80017ea <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d004      	beq.n	80017d6 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	f003 0320 	and.w	r3, r3, #32
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d009      	beq.n	80017ea <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d00c      	beq.n	80017fa <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d107      	bne.n	80017fa <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f042 0201 	orr.w	r2, r2, #1
 80017f8:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	f003 0307 	and.w	r3, r3, #7
 8001800:	2b00      	cmp	r3, #0
 8001802:	d004      	beq.n	800180e <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	2b00      	cmp	r3, #0
 800180c:	d13b      	bne.n	8001886 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001814:	2b00      	cmp	r3, #0
 8001816:	d004      	beq.n	8001822 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d131      	bne.n	8001886 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001828:	2b00      	cmp	r3, #0
 800182a:	d004      	beq.n	8001836 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	f003 0304 	and.w	r3, r3, #4
 8001832:	2b00      	cmp	r3, #0
 8001834:	d127      	bne.n	8001886 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 800183c:	2b00      	cmp	r3, #0
 800183e:	d004      	beq.n	800184a <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	f003 0308 	and.w	r3, r3, #8
 8001846:	2b00      	cmp	r3, #0
 8001848:	d11d      	bne.n	8001886 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001850:	2b00      	cmp	r3, #0
 8001852:	d004      	beq.n	800185e <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	f003 0310 	and.w	r3, r3, #16
 800185a:	2b00      	cmp	r3, #0
 800185c:	d113      	bne.n	8001886 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001864:	2b00      	cmp	r3, #0
 8001866:	d004      	beq.n	8001872 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	f003 0320 	and.w	r3, r3, #32
 800186e:	2b00      	cmp	r3, #0
 8001870:	d109      	bne.n	8001886 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001878:	2b00      	cmp	r3, #0
 800187a:	d00c      	beq.n	8001896 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001882:	2b00      	cmp	r3, #0
 8001884:	d007      	beq.n	8001896 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f042 0202 	orr.w	r2, r2, #2
 8001894:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800189c:	2b00      	cmp	r3, #0
 800189e:	d009      	beq.n	80018b4 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	430a      	orrs	r2, r1
 80018b0:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d009      	beq.n	80018d2 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	430a      	orrs	r2, r1
 80018ce:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	68ba      	ldr	r2, [r7, #8]
 80018de:	430a      	orrs	r2, r1
 80018e0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 80018e2:	2300      	movs	r3, #0
 80018e4:	e006      	b.n	80018f4 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018ea:	f043 0202 	orr.w	r2, r3, #2
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
  }
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	371c      	adds	r7, #28
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b08c      	sub	sp, #48	@ 0x30
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800190e:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8001912:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800191a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800191c:	4013      	ands	r3, r2
 800191e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001926:	f003 0307 	and.w	r3, r3, #7
 800192a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001932:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001934:	4013      	ands	r3, r2
 8001936:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800193e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001942:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800194a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800194c:	4013      	ands	r3, r2
 800194e:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001956:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 800195a:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001962:	6a3a      	ldr	r2, [r7, #32]
 8001964:	4013      	ands	r3, r2
 8001966:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800196e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001972:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800197a:	69fa      	ldr	r2, [r7, #28]
 800197c:	4013      	ands	r3, r2
 800197e:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001986:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800198e:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001996:	2b00      	cmp	r3, #0
 8001998:	d00b      	beq.n	80019b2 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d006      	beq.n	80019b2 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2240      	movs	r2, #64	@ 0x40
 80019aa:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f000 f916 	bl	8001bde <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d019      	beq.n	80019f0 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d014      	beq.n	80019f0 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80019ce:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	4013      	ands	r3, r2
 80019dc:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019e6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80019e8:	6939      	ldr	r1, [r7, #16]
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f000 f8d8 	bl	8001ba0 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80019f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d007      	beq.n	8001a06 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80019fc:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80019fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f000 f8a2 	bl	8001b4a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d007      	beq.n	8001a1c <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001a12:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001a14:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f7fe fe50 	bl	80006bc <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d007      	beq.n	8001a32 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a28:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001a2a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f000 f897 	bl	8001b60 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d00c      	beq.n	8001a56 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d007      	beq.n	8001a56 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a4e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f000 f890 	bl	8001b76 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d018      	beq.n	8001a92 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d013      	beq.n	8001a92 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001a72:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001a7c:	68fa      	ldr	r2, [r7, #12]
 8001a7e:	4013      	ands	r3, r2
 8001a80:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2280      	movs	r2, #128	@ 0x80
 8001a88:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001a8a:	68f9      	ldr	r1, [r7, #12]
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f000 f87c 	bl	8001b8a <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d00c      	beq.n	8001ab6 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d007      	beq.n	8001ab6 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001aae:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f000 f880 	bl	8001bb6 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d00c      	beq.n	8001ada <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d007      	beq.n	8001ada <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001ad2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f000 f878 	bl	8001bca <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d00f      	beq.n	8001b04 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d00a      	beq.n	8001b04 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001af6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001afc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d007      	beq.n	8001b1a <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	69fa      	ldr	r2, [r7, #28]
 8001b10:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001b12:	69f9      	ldr	r1, [r7, #28]
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f000 f876 	bl	8001c06 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001b1a:	6a3b      	ldr	r3, [r7, #32]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d009      	beq.n	8001b34 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	6a3a      	ldr	r2, [r7, #32]
 8001b26:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001b2c:	6a3b      	ldr	r3, [r7, #32]
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d002      	beq.n	8001b42 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f000 f858 	bl	8001bf2 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001b42:	bf00      	nop
 8001b44:	3730      	adds	r7, #48	@ 0x30
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	b083      	sub	sp, #12
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
 8001b52:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001b54:	bf00      	nop
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001b6a:	bf00      	nop
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr

08001b76 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001b76:	b480      	push	{r7}
 8001b78:	b083      	sub	sp, #12
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001b7e:	bf00      	nop
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr

08001b8a <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	b083      	sub	sp, #12
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
 8001b92:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001b94:	bf00      	nop
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001baa:	bf00      	nop
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	b083      	sub	sp, #12
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr

08001bca <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	b083      	sub	sp, #12
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001bd2:	bf00      	nop
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr

08001bde <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001bde:	b480      	push	{r7}
 8001be0:	b083      	sub	sp, #12
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr

08001bf2 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b083      	sub	sp, #12
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001c06:	b480      	push	{r7}
 8001c08:	b083      	sub	sp, #12
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
 8001c0e:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001c24:	4b2c      	ldr	r3, [pc, #176]	@ (8001cd8 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 8001c26:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a2b      	ldr	r2, [pc, #172]	@ (8001cdc <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d103      	bne.n	8001c3a <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001c38:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	68ba      	ldr	r2, [r7, #8]
 8001c3e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c48:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c50:	041a      	lsls	r2, r3, #16
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	430a      	orrs	r2, r1
 8001c58:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c6e:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c76:	061a      	lsls	r2, r3, #24
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	60fb      	str	r3, [r7, #12]
 8001cae:	e005      	b.n	8001cbc <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	3304      	adds	r3, #4
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001cc2:	68fa      	ldr	r2, [r7, #12]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d3f3      	bcc.n	8001cb0 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 8001cc8:	bf00      	nop
 8001cca:	bf00      	nop
 8001ccc:	3714      	adds	r7, #20
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	4000ac00 	.word	0x4000ac00
 8001cdc:	4000a800 	.word	0x4000a800

08001ce0 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b089      	sub	sp, #36	@ 0x24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
 8001cec:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d10a      	bne.n	8001d0c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8001cfe:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001d06:	4313      	orrs	r3, r2
 8001d08:	61fb      	str	r3, [r7, #28]
 8001d0a:	e00a      	b.n	8001d22 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8001d14:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8001d1a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001d1c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001d20:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	6a1b      	ldr	r3, [r3, #32]
 8001d26:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001d2c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8001d32:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8001d38:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001d40:	4313      	orrs	r3, r2
 8001d42:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001d48:	683a      	ldr	r2, [r7, #0]
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	00db      	lsls	r3, r3, #3
 8001d4e:	4413      	add	r3, r2
 8001d50:	00db      	lsls	r3, r3, #3
 8001d52:	440b      	add	r3, r1
 8001d54:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	69fa      	ldr	r2, [r7, #28]
 8001d5a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	3304      	adds	r3, #4
 8001d60:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	693a      	ldr	r2, [r7, #16]
 8001d66:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	3304      	adds	r3, #4
 8001d6c:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8001d6e:	2300      	movs	r3, #0
 8001d70:	617b      	str	r3, [r7, #20]
 8001d72:	e020      	b.n	8001db6 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	3303      	adds	r3, #3
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	3302      	adds	r3, #2
 8001d84:	6879      	ldr	r1, [r7, #4]
 8001d86:	440b      	add	r3, r1
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001d8c:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	3301      	adds	r3, #1
 8001d92:	6879      	ldr	r1, [r7, #4]
 8001d94:	440b      	add	r3, r1
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001d9a:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8001d9c:	6879      	ldr	r1, [r7, #4]
 8001d9e:	697a      	ldr	r2, [r7, #20]
 8001da0:	440a      	add	r2, r1
 8001da2:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001da4:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	3304      	adds	r3, #4
 8001dae:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	3304      	adds	r3, #4
 8001db4:	617b      	str	r3, [r7, #20]
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	4a06      	ldr	r2, [pc, #24]	@ (8001dd4 <FDCAN_CopyMessageToRAM+0xf4>)
 8001dbc:	5cd3      	ldrb	r3, [r2, r3]
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d3d6      	bcc.n	8001d74 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8001dc6:	bf00      	nop
 8001dc8:	bf00      	nop
 8001dca:	3724      	adds	r7, #36	@ 0x24
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr
 8001dd4:	0800af94 	.word	0x0800af94

08001dd8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b087      	sub	sp, #28
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001de2:	2300      	movs	r3, #0
 8001de4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001de6:	e136      	b.n	8002056 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	2101      	movs	r1, #1
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	fa01 f303 	lsl.w	r3, r1, r3
 8001df4:	4013      	ands	r3, r2
 8001df6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	f000 8128 	beq.w	8002050 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d003      	beq.n	8001e10 <HAL_GPIO_Init+0x38>
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	2b12      	cmp	r3, #18
 8001e0e:	d125      	bne.n	8001e5c <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	08da      	lsrs	r2, r3, #3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	3208      	adds	r2, #8
 8001e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e1c:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	f003 0307 	and.w	r3, r3, #7
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	220f      	movs	r2, #15
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	697a      	ldr	r2, [r7, #20]
 8001e30:	4013      	ands	r3, r2
 8001e32:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	691b      	ldr	r3, [r3, #16]
 8001e38:	f003 020f 	and.w	r2, r3, #15
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	f003 0307 	and.w	r3, r3, #7
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	697a      	ldr	r2, [r7, #20]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	08da      	lsrs	r2, r3, #3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	3208      	adds	r2, #8
 8001e56:	6979      	ldr	r1, [r7, #20]
 8001e58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	2203      	movs	r2, #3
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	697a      	ldr	r2, [r7, #20]
 8001e70:	4013      	ands	r3, r2
 8001e72:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f003 0203 	and.w	r2, r3, #3
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	697a      	ldr	r2, [r7, #20]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	697a      	ldr	r2, [r7, #20]
 8001e8e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d00b      	beq.n	8001eb0 <HAL_GPIO_Init+0xd8>
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d007      	beq.n	8001eb0 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ea4:	2b11      	cmp	r3, #17
 8001ea6:	d003      	beq.n	8001eb0 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	2b12      	cmp	r3, #18
 8001eae:	d130      	bne.n	8001f12 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	2203      	movs	r2, #3
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	697a      	ldr	r2, [r7, #20]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	68da      	ldr	r2, [r3, #12]
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	697a      	ldr	r2, [r7, #20]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	697a      	ldr	r2, [r7, #20]
 8001ede:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	43db      	mvns	r3, r3
 8001ef0:	697a      	ldr	r2, [r7, #20]
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	091b      	lsrs	r3, r3, #4
 8001efc:	f003 0201 	and.w	r2, r3, #1
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	697a      	ldr	r2, [r7, #20]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	697a      	ldr	r2, [r7, #20]
 8001f10:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	2b03      	cmp	r3, #3
 8001f18:	d017      	beq.n	8001f4a <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	2203      	movs	r2, #3
 8001f26:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	697a      	ldr	r2, [r7, #20]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	689a      	ldr	r2, [r3, #8]
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3e:	697a      	ldr	r2, [r7, #20]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	697a      	ldr	r2, [r7, #20]
 8001f48:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d07c      	beq.n	8002050 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001f56:	4a47      	ldr	r2, [pc, #284]	@ (8002074 <HAL_GPIO_Init+0x29c>)
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	089b      	lsrs	r3, r3, #2
 8001f5c:	3318      	adds	r3, #24
 8001f5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f62:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	f003 0303 	and.w	r3, r3, #3
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	220f      	movs	r2, #15
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	43db      	mvns	r3, r3
 8001f74:	697a      	ldr	r2, [r7, #20]
 8001f76:	4013      	ands	r3, r2
 8001f78:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	0a9a      	lsrs	r2, r3, #10
 8001f7e:	4b3e      	ldr	r3, [pc, #248]	@ (8002078 <HAL_GPIO_Init+0x2a0>)
 8001f80:	4013      	ands	r3, r2
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	f002 0203 	and.w	r2, r2, #3
 8001f88:	00d2      	lsls	r2, r2, #3
 8001f8a:	4093      	lsls	r3, r2
 8001f8c:	697a      	ldr	r2, [r7, #20]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001f92:	4938      	ldr	r1, [pc, #224]	@ (8002074 <HAL_GPIO_Init+0x29c>)
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	089b      	lsrs	r3, r3, #2
 8001f98:	3318      	adds	r3, #24
 8001f9a:	697a      	ldr	r2, [r7, #20]
 8001f9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001fa0:	4b34      	ldr	r3, [pc, #208]	@ (8002074 <HAL_GPIO_Init+0x29c>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	697a      	ldr	r2, [r7, #20]
 8001fac:	4013      	ands	r3, r2
 8001fae:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d003      	beq.n	8001fc4 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8001fbc:	697a      	ldr	r2, [r7, #20]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001fc4:	4a2b      	ldr	r2, [pc, #172]	@ (8002074 <HAL_GPIO_Init+0x29c>)
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001fca:	4b2a      	ldr	r3, [pc, #168]	@ (8002074 <HAL_GPIO_Init+0x29c>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	697a      	ldr	r2, [r7, #20]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d003      	beq.n	8001fee <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8001fe6:	697a      	ldr	r2, [r7, #20]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001fee:	4a21      	ldr	r2, [pc, #132]	@ (8002074 <HAL_GPIO_Init+0x29c>)
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001ff4:	4b1f      	ldr	r3, [pc, #124]	@ (8002074 <HAL_GPIO_Init+0x29c>)
 8001ff6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001ffa:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	43db      	mvns	r3, r3
 8002000:	697a      	ldr	r2, [r7, #20]
 8002002:	4013      	ands	r3, r2
 8002004:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d003      	beq.n	800201a <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8002012:	697a      	ldr	r2, [r7, #20]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	4313      	orrs	r3, r2
 8002018:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800201a:	4a16      	ldr	r2, [pc, #88]	@ (8002074 <HAL_GPIO_Init+0x29c>)
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8002022:	4b14      	ldr	r3, [pc, #80]	@ (8002074 <HAL_GPIO_Init+0x29c>)
 8002024:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002028:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	43db      	mvns	r3, r3
 800202e:	697a      	ldr	r2, [r7, #20]
 8002030:	4013      	ands	r3, r2
 8002032:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d003      	beq.n	8002048 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8002040:	697a      	ldr	r2, [r7, #20]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	4313      	orrs	r3, r2
 8002046:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8002048:	4a0a      	ldr	r2, [pc, #40]	@ (8002074 <HAL_GPIO_Init+0x29c>)
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	3301      	adds	r3, #1
 8002054:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	fa22 f303 	lsr.w	r3, r2, r3
 8002060:	2b00      	cmp	r3, #0
 8002062:	f47f aec1 	bne.w	8001de8 <HAL_GPIO_Init+0x10>
  }
}
 8002066:	bf00      	nop
 8002068:	bf00      	nop
 800206a:	371c      	adds	r7, #28
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr
 8002074:	44022000 	.word	0x44022000
 8002078:	002f7f7f 	.word	0x002f7f7f

0800207c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	460b      	mov	r3, r1
 8002086:	807b      	strh	r3, [r7, #2]
 8002088:	4613      	mov	r3, r2
 800208a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800208c:	787b      	ldrb	r3, [r7, #1]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d003      	beq.n	800209a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002092:	887a      	ldrh	r2, [r7, #2]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002098:	e002      	b.n	80020a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800209a:	887a      	ldrh	r2, [r7, #2]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <PCD_GET_EP_RX_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_RX_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	460b      	mov	r3, r1
 80020b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 80020b8:	230a      	movs	r3, #10
 80020ba:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 80020bc:	e002      	b.n	80020c4 <PCD_GET_EP_RX_CNT+0x18>
  {
    count--;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	3b01      	subs	r3, #1
 80020c2:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d1f9      	bne.n	80020be <PCD_GET_EP_RX_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_RX_CNT((Instance), (bEpNum));
 80020ca:	887b      	ldrh	r3, [r7, #2]
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80020d2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	0c1b      	lsrs	r3, r3, #16
 80020da:	b29b      	uxth	r3, r3
 80020dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020e0:	b29b      	uxth	r3, r3
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3714      	adds	r7, #20
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr

080020ee <PCD_GET_EP_DBUF0_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF0_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 80020ee:	b480      	push	{r7}
 80020f0:	b085      	sub	sp, #20
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
 80020f6:	460b      	mov	r3, r1
 80020f8:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 80020fa:	230a      	movs	r3, #10
 80020fc:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 80020fe:	e002      	b.n	8002106 <PCD_GET_EP_DBUF0_CNT+0x18>
  {
    count--;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	3b01      	subs	r3, #1
 8002104:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d1f9      	bne.n	8002100 <PCD_GET_EP_DBUF0_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF0_CNT((Instance), (bEpNum));
 800210c:	887b      	ldrh	r3, [r7, #2]
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002114:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	0c1b      	lsrs	r3, r3, #16
 800211c:	b29b      	uxth	r3, r3
 800211e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002122:	b29b      	uxth	r3, r3
}
 8002124:	4618      	mov	r0, r3
 8002126:	3714      	adds	r7, #20
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <PCD_GET_EP_DBUF1_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF1_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8002130:	b480      	push	{r7}
 8002132:	b085      	sub	sp, #20
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	460b      	mov	r3, r1
 800213a:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 800213c:	230a      	movs	r3, #10
 800213e:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8002140:	e002      	b.n	8002148 <PCD_GET_EP_DBUF1_CNT+0x18>
  {
    count--;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	3b01      	subs	r3, #1
 8002146:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d1f9      	bne.n	8002142 <PCD_GET_EP_DBUF1_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF1_CNT((Instance), (bEpNum));
 800214e:	887b      	ldrh	r3, [r7, #2]
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002156:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	0c1b      	lsrs	r3, r3, #16
 800215e:	b29b      	uxth	r3, r3
 8002160:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002164:	b29b      	uxth	r3, r3
}
 8002166:	4618      	mov	r0, r3
 8002168:	3714      	adds	r7, #20
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr

08002172 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b086      	sub	sp, #24
 8002176:	af02      	add	r7, sp, #8
 8002178:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d101      	bne.n	8002184 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e0c3      	b.n	800230c <HAL_PCD_Init+0x19a>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f893 3295 	ldrb.w	r3, [r3, #661]	@ 0x295
 800218a:	b2db      	uxtb	r3, r3
 800218c:	2b00      	cmp	r3, #0
 800218e:	d106      	bne.n	800219e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f7fe fb2d 	bl	80007f8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2203      	movs	r2, #3
 80021a2:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f003 fe76 	bl	8005e9c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021b0:	2300      	movs	r3, #0
 80021b2:	73fb      	strb	r3, [r7, #15]
 80021b4:	e03f      	b.n	8002236 <HAL_PCD_Init+0xc4>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80021b6:	7bfa      	ldrb	r2, [r7, #15]
 80021b8:	6879      	ldr	r1, [r7, #4]
 80021ba:	4613      	mov	r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	4413      	add	r3, r2
 80021c0:	00db      	lsls	r3, r3, #3
 80021c2:	440b      	add	r3, r1
 80021c4:	3315      	adds	r3, #21
 80021c6:	2201      	movs	r2, #1
 80021c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80021ca:	7bfa      	ldrb	r2, [r7, #15]
 80021cc:	6879      	ldr	r1, [r7, #4]
 80021ce:	4613      	mov	r3, r2
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	4413      	add	r3, r2
 80021d4:	00db      	lsls	r3, r3, #3
 80021d6:	440b      	add	r3, r1
 80021d8:	3314      	adds	r3, #20
 80021da:	7bfa      	ldrb	r2, [r7, #15]
 80021dc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80021de:	7bfa      	ldrb	r2, [r7, #15]
 80021e0:	6879      	ldr	r1, [r7, #4]
 80021e2:	4613      	mov	r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	4413      	add	r3, r2
 80021e8:	00db      	lsls	r3, r3, #3
 80021ea:	440b      	add	r3, r1
 80021ec:	3317      	adds	r3, #23
 80021ee:	2200      	movs	r2, #0
 80021f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80021f2:	7bfa      	ldrb	r2, [r7, #15]
 80021f4:	6879      	ldr	r1, [r7, #4]
 80021f6:	4613      	mov	r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	4413      	add	r3, r2
 80021fc:	00db      	lsls	r3, r3, #3
 80021fe:	440b      	add	r3, r1
 8002200:	3324      	adds	r3, #36	@ 0x24
 8002202:	2200      	movs	r2, #0
 8002204:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002206:	7bfa      	ldrb	r2, [r7, #15]
 8002208:	6879      	ldr	r1, [r7, #4]
 800220a:	4613      	mov	r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4413      	add	r3, r2
 8002210:	00db      	lsls	r3, r3, #3
 8002212:	440b      	add	r3, r1
 8002214:	3328      	adds	r3, #40	@ 0x28
 8002216:	2200      	movs	r2, #0
 8002218:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800221a:	7bfb      	ldrb	r3, [r7, #15]
 800221c:	6879      	ldr	r1, [r7, #4]
 800221e:	1c5a      	adds	r2, r3, #1
 8002220:	4613      	mov	r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	4413      	add	r3, r2
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	440b      	add	r3, r1
 800222a:	3304      	adds	r3, #4
 800222c:	2200      	movs	r2, #0
 800222e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002230:	7bfb      	ldrb	r3, [r7, #15]
 8002232:	3301      	adds	r3, #1
 8002234:	73fb      	strb	r3, [r7, #15]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	791b      	ldrb	r3, [r3, #4]
 800223a:	7bfa      	ldrb	r2, [r7, #15]
 800223c:	429a      	cmp	r2, r3
 800223e:	d3ba      	bcc.n	80021b6 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002240:	2300      	movs	r3, #0
 8002242:	73fb      	strb	r3, [r7, #15]
 8002244:	e044      	b.n	80022d0 <HAL_PCD_Init+0x15e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002246:	7bfa      	ldrb	r2, [r7, #15]
 8002248:	6879      	ldr	r1, [r7, #4]
 800224a:	4613      	mov	r3, r2
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	4413      	add	r3, r2
 8002250:	00db      	lsls	r3, r3, #3
 8002252:	440b      	add	r3, r1
 8002254:	f203 1355 	addw	r3, r3, #341	@ 0x155
 8002258:	2200      	movs	r2, #0
 800225a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800225c:	7bfa      	ldrb	r2, [r7, #15]
 800225e:	6879      	ldr	r1, [r7, #4]
 8002260:	4613      	mov	r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	4413      	add	r3, r2
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	440b      	add	r3, r1
 800226a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800226e:	7bfa      	ldrb	r2, [r7, #15]
 8002270:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002272:	7bfa      	ldrb	r2, [r7, #15]
 8002274:	6879      	ldr	r1, [r7, #4]
 8002276:	4613      	mov	r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	4413      	add	r3, r2
 800227c:	00db      	lsls	r3, r3, #3
 800227e:	440b      	add	r3, r1
 8002280:	f203 1357 	addw	r3, r3, #343	@ 0x157
 8002284:	2200      	movs	r2, #0
 8002286:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002288:	7bfa      	ldrb	r2, [r7, #15]
 800228a:	6879      	ldr	r1, [r7, #4]
 800228c:	4613      	mov	r3, r2
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	4413      	add	r3, r2
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	440b      	add	r3, r1
 8002296:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800229a:	2200      	movs	r2, #0
 800229c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800229e:	7bfa      	ldrb	r2, [r7, #15]
 80022a0:	6879      	ldr	r1, [r7, #4]
 80022a2:	4613      	mov	r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	4413      	add	r3, r2
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	440b      	add	r3, r1
 80022ac:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80022b4:	7bfa      	ldrb	r2, [r7, #15]
 80022b6:	6879      	ldr	r1, [r7, #4]
 80022b8:	4613      	mov	r3, r2
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	4413      	add	r3, r2
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	440b      	add	r3, r1
 80022c2:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80022c6:	2200      	movs	r2, #0
 80022c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022ca:	7bfb      	ldrb	r3, [r7, #15]
 80022cc:	3301      	adds	r3, #1
 80022ce:	73fb      	strb	r3, [r7, #15]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	791b      	ldrb	r3, [r3, #4]
 80022d4:	7bfa      	ldrb	r2, [r7, #15]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d3b5      	bcc.n	8002246 <HAL_PCD_Init+0xd4>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6818      	ldr	r0, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	7c1a      	ldrb	r2, [r3, #16]
 80022e2:	f88d 2000 	strb.w	r2, [sp]
 80022e6:	3304      	adds	r3, #4
 80022e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022ea:	f003 fe0f 	bl	8005f0c <USB_DevInit>

  hpcd->USB_Address = 0U;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	7b1b      	ldrb	r3, [r3, #12]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d102      	bne.n	800230a <HAL_PCD_Init+0x198>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f001 fb4e 	bl	80039a6 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	3710      	adds	r7, #16
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8002322:	2b01      	cmp	r3, #1
 8002324:	d101      	bne.n	800232a <HAL_PCD_Start+0x16>
 8002326:	2302      	movs	r3, #2
 8002328:	e012      	b.n	8002350 <HAL_PCD_Start+0x3c>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2201      	movs	r2, #1
 800232e:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  __HAL_PCD_ENABLE(hpcd);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4618      	mov	r0, r3
 8002338:	f003 fd9c 	bl	8005e74 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4618      	mov	r0, r3
 8002342:	f005 fc48 	bl	8007bd6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	3708      	adds	r7, #8
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4618      	mov	r0, r3
 8002366:	f005 fc47 	bl	8007bf8 <USB_ReadInterrupts>
 800236a:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d003      	beq.n	800237e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 fada 	bl	8002930 <PCD_EP_ISR_Handler>

    return;
 800237c:	e0de      	b.n	800253c <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002384:	2b00      	cmp	r3, #0
 8002386:	d010      	beq.n	80023aa <HAL_PCD_IRQHandler+0x52>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	f64f 33ff 	movw	r3, #64511	@ 0xfbff
 8002396:	400b      	ands	r3, r1
 8002398:	6453      	str	r3, [r2, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f006 f8fc 	bl	8008598 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80023a0:	2100      	movs	r1, #0
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f000 f8e1 	bl	800256a <HAL_PCD_SetAddress>

    return;
 80023a8:	e0c8      	b.n	800253c <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d009      	beq.n	80023c8 <HAL_PCD_IRQHandler+0x70>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	f64b 73ff 	movw	r3, #49151	@ 0xbfff
 80023c2:	400b      	ands	r3, r1
 80023c4:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 80023c6:	e0b9      	b.n	800253c <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d009      	beq.n	80023e6 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	f64d 73ff 	movw	r3, #57343	@ 0xdfff
 80023e0:	400b      	ands	r3, r1
 80023e2:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 80023e4:	e0aa      	b.n	800253c <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d029      	beq.n	8002444 <HAL_PCD_IRQHandler+0xec>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPRDY);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f022 0204 	bic.w	r2, r2, #4
 80023fe:	641a      	str	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPEN);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f022 0208 	bic.w	r2, r2, #8
 800240e:	641a      	str	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 8002416:	2b01      	cmp	r3, #1
 8002418:	d107      	bne.n	800242a <HAL_PCD_IRQHandler+0xd2>
    {
      hpcd->LPM_State = LPM_L0;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002422:	2100      	movs	r1, #0
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f001 fae0 	bl	80039ea <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 f893 	bl	8002556 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 800243e:	400b      	ands	r3, r1
 8002440:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8002442:	e07b      	b.n	800253c <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800244a:	2b00      	cmp	r3, #0
 800244c:	d01c      	beq.n	8002488 <HAL_PCD_IRQHandler+0x130>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f042 0208 	orr.w	r2, r2, #8
 800245c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	f24f 73ff 	movw	r3, #63487	@ 0xf7ff
 800246c:	400b      	ands	r3, r1
 800246e:	6453      	str	r3, [r2, #68]	@ 0x44

    hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f042 0204 	orr.w	r2, r2, #4
 800247e:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f000 f85e 	bl	8002542 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002486:	e059      	b.n	800253c <HAL_PCD_IRQHandler+0x1e4>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800248e:	2b00      	cmp	r3, #0
 8002490:	d033      	beq.n	80024fa <HAL_PCD_IRQHandler+0x1a2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	f64f 737f 	movw	r3, #65407	@ 0xff7f
 80024a0:	400b      	ands	r3, r1
 80024a2:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d121      	bne.n	80024f2 <HAL_PCD_IRQHandler+0x19a>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f042 0204 	orr.w	r2, r2, #4
 80024bc:	641a      	str	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f042 0208 	orr.w	r2, r2, #8
 80024cc:	641a      	str	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2201      	movs	r2, #1
 80024d2:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024dc:	089b      	lsrs	r3, r3, #2
 80024de:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80024e8:	2101      	movs	r1, #1
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f001 fa7d 	bl	80039ea <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80024f0:	e024      	b.n	800253c <HAL_PCD_IRQHandler+0x1e4>
      HAL_PCD_SuspendCallback(hpcd);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f000 f825 	bl	8002542 <HAL_PCD_SuspendCallback>
    return;
 80024f8:	e020      	b.n	800253c <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002500:	2b00      	cmp	r3, #0
 8002502:	d00c      	beq.n	800251e <HAL_PCD_IRQHandler+0x1c6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	f64f 53ff 	movw	r3, #65023	@ 0xfdff
 8002512:	400b      	ands	r3, r1
 8002514:	6453      	str	r3, [r2, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f006 f830 	bl	800857c <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800251c:	e00e      	b.n	800253c <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002524:	2b00      	cmp	r3, #0
 8002526:	d009      	beq.n	800253c <HAL_PCD_IRQHandler+0x1e4>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8002536:	400b      	ands	r3, r1
 8002538:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 800253a:	bf00      	nop
  }
}
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8002542:	b480      	push	{r7}
 8002544:	b083      	sub	sp, #12
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 800254a:	bf00      	nop
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr

08002556 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8002556:	b480      	push	{r7}
 8002558:	b083      	sub	sp, #12
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 800255e:	bf00      	nop
 8002560:	370c      	adds	r7, #12
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr

0800256a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b082      	sub	sp, #8
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
 8002572:	460b      	mov	r3, r1
 8002574:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 800257c:	2b01      	cmp	r3, #1
 800257e:	d101      	bne.n	8002584 <HAL_PCD_SetAddress+0x1a>
 8002580:	2302      	movs	r3, #2
 8002582:	e012      	b.n	80025aa <HAL_PCD_SetAddress+0x40>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  hpcd->USB_Address = address;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	78fa      	ldrb	r2, [r7, #3]
 8002590:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	78fa      	ldrb	r2, [r7, #3]
 8002598:	4611      	mov	r1, r2
 800259a:	4618      	mov	r0, r3
 800259c:	f005 fb08 	bl	8007bb0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b084      	sub	sp, #16
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
 80025ba:	4608      	mov	r0, r1
 80025bc:	4611      	mov	r1, r2
 80025be:	461a      	mov	r2, r3
 80025c0:	4603      	mov	r3, r0
 80025c2:	70fb      	strb	r3, [r7, #3]
 80025c4:	460b      	mov	r3, r1
 80025c6:	803b      	strh	r3, [r7, #0]
 80025c8:	4613      	mov	r3, r2
 80025ca:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80025cc:	2300      	movs	r3, #0
 80025ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80025d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	da0f      	bge.n	80025f8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025d8:	78fb      	ldrb	r3, [r7, #3]
 80025da:	f003 0207 	and.w	r2, r3, #7
 80025de:	4613      	mov	r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	4413      	add	r3, r2
 80025e4:	00db      	lsls	r3, r3, #3
 80025e6:	3310      	adds	r3, #16
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	4413      	add	r3, r2
 80025ec:	3304      	adds	r3, #4
 80025ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2201      	movs	r2, #1
 80025f4:	705a      	strb	r2, [r3, #1]
 80025f6:	e00f      	b.n	8002618 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025f8:	78fb      	ldrb	r3, [r7, #3]
 80025fa:	f003 0207 	and.w	r2, r3, #7
 80025fe:	4613      	mov	r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	4413      	add	r3, r2
 8002604:	00db      	lsls	r3, r3, #3
 8002606:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	4413      	add	r3, r2
 800260e:	3304      	adds	r3, #4
 8002610:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2200      	movs	r2, #0
 8002616:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002618:	78fb      	ldrb	r3, [r7, #3]
 800261a:	f003 0307 	and.w	r3, r3, #7
 800261e:	b2da      	uxtb	r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002624:	883b      	ldrh	r3, [r7, #0]
 8002626:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	78ba      	ldrb	r2, [r7, #2]
 8002632:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002634:	78bb      	ldrb	r3, [r7, #2]
 8002636:	2b02      	cmp	r3, #2
 8002638:	d102      	bne.n	8002640 <HAL_PCD_EP_Open+0x8e>
  {
    ep->data_pid_start = 0U;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2200      	movs	r2, #0
 800263e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8002646:	2b01      	cmp	r3, #1
 8002648:	d101      	bne.n	800264e <HAL_PCD_EP_Open+0x9c>
 800264a:	2302      	movs	r3, #2
 800264c:	e00e      	b.n	800266c <HAL_PCD_EP_Open+0xba>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2201      	movs	r2, #1
 8002652:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	68f9      	ldr	r1, [r7, #12]
 800265c:	4618      	mov	r0, r3
 800265e:	f003 fc79 	bl	8005f54 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return ret;
 800266a:	7afb      	ldrb	r3, [r7, #11]
}
 800266c:	4618      	mov	r0, r3
 800266e:	3710      	adds	r7, #16
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	460b      	mov	r3, r1
 800267e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002680:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002684:	2b00      	cmp	r3, #0
 8002686:	da0f      	bge.n	80026a8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002688:	78fb      	ldrb	r3, [r7, #3]
 800268a:	f003 0207 	and.w	r2, r3, #7
 800268e:	4613      	mov	r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	4413      	add	r3, r2
 8002694:	00db      	lsls	r3, r3, #3
 8002696:	3310      	adds	r3, #16
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	4413      	add	r3, r2
 800269c:	3304      	adds	r3, #4
 800269e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2201      	movs	r2, #1
 80026a4:	705a      	strb	r2, [r3, #1]
 80026a6:	e00f      	b.n	80026c8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026a8:	78fb      	ldrb	r3, [r7, #3]
 80026aa:	f003 0207 	and.w	r2, r3, #7
 80026ae:	4613      	mov	r3, r2
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	4413      	add	r3, r2
 80026b4:	00db      	lsls	r3, r3, #3
 80026b6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	4413      	add	r3, r2
 80026be:	3304      	adds	r3, #4
 80026c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2200      	movs	r2, #0
 80026c6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80026c8:	78fb      	ldrb	r3, [r7, #3]
 80026ca:	f003 0307 	and.w	r3, r3, #7
 80026ce:	b2da      	uxtb	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d101      	bne.n	80026e2 <HAL_PCD_EP_Close+0x6e>
 80026de:	2302      	movs	r3, #2
 80026e0:	e00e      	b.n	8002700 <HAL_PCD_EP_Close+0x8c>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2201      	movs	r2, #1
 80026e6:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	68f9      	ldr	r1, [r7, #12]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f003 ff8f 	bl	8006614 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  return HAL_OK;
 80026fe:	2300      	movs	r3, #0
}
 8002700:	4618      	mov	r0, r3
 8002702:	3710      	adds	r7, #16
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	607a      	str	r2, [r7, #4]
 8002712:	603b      	str	r3, [r7, #0]
 8002714:	460b      	mov	r3, r1
 8002716:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002718:	7afb      	ldrb	r3, [r7, #11]
 800271a:	f003 0207 	and.w	r2, r3, #7
 800271e:	4613      	mov	r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	4413      	add	r3, r2
 8002724:	00db      	lsls	r3, r3, #3
 8002726:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800272a:	68fa      	ldr	r2, [r7, #12]
 800272c:	4413      	add	r3, r2
 800272e:	3304      	adds	r3, #4
 8002730:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	683a      	ldr	r2, [r7, #0]
 800273c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	2200      	movs	r2, #0
 8002742:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	2200      	movs	r2, #0
 8002748:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800274a:	7afb      	ldrb	r3, [r7, #11]
 800274c:	f003 0307 	and.w	r3, r3, #7
 8002750:	b2da      	uxtb	r2, r3
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	6979      	ldr	r1, [r7, #20]
 800275c:	4618      	mov	r0, r3
 800275e:	f004 f8e3 	bl	8006928 <USB_EPStartXfer>

  return HAL_OK;
 8002762:	2300      	movs	r3, #0
}
 8002764:	4618      	mov	r0, r3
 8002766:	3718      	adds	r7, #24
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b086      	sub	sp, #24
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	607a      	str	r2, [r7, #4]
 8002776:	603b      	str	r3, [r7, #0]
 8002778:	460b      	mov	r3, r1
 800277a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800277c:	7afb      	ldrb	r3, [r7, #11]
 800277e:	f003 0207 	and.w	r2, r3, #7
 8002782:	4613      	mov	r3, r2
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	4413      	add	r3, r2
 8002788:	00db      	lsls	r3, r3, #3
 800278a:	3310      	adds	r3, #16
 800278c:	68fa      	ldr	r2, [r7, #12]
 800278e:	4413      	add	r3, r2
 8002790:	3304      	adds	r3, #4
 8002792:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	683a      	ldr	r2, [r7, #0]
 80027ac:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	2200      	movs	r2, #0
 80027b2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	2201      	movs	r2, #1
 80027b8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027ba:	7afb      	ldrb	r3, [r7, #11]
 80027bc:	f003 0307 	and.w	r3, r3, #7
 80027c0:	b2da      	uxtb	r2, r3
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	6979      	ldr	r1, [r7, #20]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f004 f8ab 	bl	8006928 <USB_EPStartXfer>

  return HAL_OK;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3718      	adds	r7, #24
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	460b      	mov	r3, r1
 80027e6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80027e8:	78fb      	ldrb	r3, [r7, #3]
 80027ea:	f003 0307 	and.w	r3, r3, #7
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	7912      	ldrb	r2, [r2, #4]
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d901      	bls.n	80027fa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e040      	b.n	800287c <HAL_PCD_EP_SetStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80027fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	da0f      	bge.n	8002822 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002802:	78fb      	ldrb	r3, [r7, #3]
 8002804:	f003 0207 	and.w	r2, r3, #7
 8002808:	4613      	mov	r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	4413      	add	r3, r2
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	3310      	adds	r3, #16
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	4413      	add	r3, r2
 8002816:	3304      	adds	r3, #4
 8002818:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2201      	movs	r2, #1
 800281e:	705a      	strb	r2, [r3, #1]
 8002820:	e00d      	b.n	800283e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002822:	78fa      	ldrb	r2, [r7, #3]
 8002824:	4613      	mov	r3, r2
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	4413      	add	r3, r2
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	4413      	add	r3, r2
 8002834:	3304      	adds	r3, #4
 8002836:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2200      	movs	r2, #0
 800283c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2201      	movs	r2, #1
 8002842:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002844:	78fb      	ldrb	r3, [r7, #3]
 8002846:	f003 0307 	and.w	r3, r3, #7
 800284a:	b2da      	uxtb	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8002856:	2b01      	cmp	r3, #1
 8002858:	d101      	bne.n	800285e <HAL_PCD_EP_SetStall+0x82>
 800285a:	2302      	movs	r3, #2
 800285c:	e00e      	b.n	800287c <HAL_PCD_EP_SetStall+0xa0>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2201      	movs	r2, #1
 8002862:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68f9      	ldr	r1, [r7, #12]
 800286c:	4618      	mov	r0, r3
 800286e:	f005 f8c5 	bl	80079fc <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 800287a:	2300      	movs	r3, #0
}
 800287c:	4618      	mov	r0, r3
 800287e:	3710      	adds	r7, #16
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	460b      	mov	r3, r1
 800288e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002890:	78fb      	ldrb	r3, [r7, #3]
 8002892:	f003 030f 	and.w	r3, r3, #15
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	7912      	ldrb	r2, [r2, #4]
 800289a:	4293      	cmp	r3, r2
 800289c:	d901      	bls.n	80028a2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e042      	b.n	8002928 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80028a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	da0f      	bge.n	80028ca <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028aa:	78fb      	ldrb	r3, [r7, #3]
 80028ac:	f003 0207 	and.w	r2, r3, #7
 80028b0:	4613      	mov	r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	4413      	add	r3, r2
 80028b6:	00db      	lsls	r3, r3, #3
 80028b8:	3310      	adds	r3, #16
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	4413      	add	r3, r2
 80028be:	3304      	adds	r3, #4
 80028c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2201      	movs	r2, #1
 80028c6:	705a      	strb	r2, [r3, #1]
 80028c8:	e00f      	b.n	80028ea <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028ca:	78fb      	ldrb	r3, [r7, #3]
 80028cc:	f003 0207 	and.w	r2, r3, #7
 80028d0:	4613      	mov	r3, r2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	4413      	add	r3, r2
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	4413      	add	r3, r2
 80028e0:	3304      	adds	r3, #4
 80028e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2200      	movs	r2, #0
 80028e8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2200      	movs	r2, #0
 80028ee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028f0:	78fb      	ldrb	r3, [r7, #3]
 80028f2:	f003 0307 	and.w	r3, r3, #7
 80028f6:	b2da      	uxtb	r2, r3
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8002902:	2b01      	cmp	r3, #1
 8002904:	d101      	bne.n	800290a <HAL_PCD_EP_ClrStall+0x86>
 8002906:	2302      	movs	r3, #2
 8002908:	e00e      	b.n	8002928 <HAL_PCD_EP_ClrStall+0xa4>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2201      	movs	r2, #1
 800290e:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	68f9      	ldr	r1, [r7, #12]
 8002918:	4618      	mov	r0, r3
 800291a:	f005 f8b5 	bl	8007a88 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8002926:	2300      	movs	r3, #0
}
 8002928:	4618      	mov	r0, r3
 800292a:	3710      	adds	r7, #16
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b08e      	sub	sp, #56	@ 0x38
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002938:	e326      	b.n	8002f88 <PCD_EP_ISR_Handler+0x658>
  {
    wIstr = (uint16_t)hpcd->Instance->ISTR;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002940:	847b      	strh	r3, [r7, #34]	@ 0x22

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_IDN);
 8002942:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002944:	b2db      	uxtb	r3, r3
 8002946:	f003 030f 	and.w	r3, r3, #15
 800294a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

    if (epindex == 0U)
 800294e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002952:	2b00      	cmp	r3, #0
 8002954:	f040 8124 	bne.w	8002ba0 <PCD_EP_ISR_Handler+0x270>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002958:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800295a:	f003 0310 	and.w	r3, r3, #16
 800295e:	2b00      	cmp	r3, #0
 8002960:	d13e      	bne.n	80029e0 <PCD_EP_ISR_Handler+0xb0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	4b89      	ldr	r3, [pc, #548]	@ (8002b90 <PCD_EP_ISR_Handler+0x260>)
 800296a:	4013      	ands	r3, r2
 800296c:	60bb      	str	r3, [r7, #8]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68ba      	ldr	r2, [r7, #8]
 8002974:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002978:	601a      	str	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	3314      	adds	r3, #20
 800297e:	637b      	str	r3, [r7, #52]	@ 0x34

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002980:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	00db      	lsls	r3, r3, #3
 8002986:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800298a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	0c1b      	lsrs	r3, r3, #16
 8002992:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002996:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002998:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800299a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800299c:	695a      	ldr	r2, [r3, #20]
 800299e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029a0:	69db      	ldr	r3, [r3, #28]
 80029a2:	441a      	add	r2, r3
 80029a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029a6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80029a8:	2100      	movs	r1, #0
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f005 fdcc 	bl	8008548 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	7c5b      	ldrb	r3, [r3, #17]
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	f000 82e6 	beq.w	8002f88 <PCD_EP_ISR_Handler+0x658>
 80029bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	f040 82e1 	bne.w	8002f88 <PCD_EP_ISR_Handler+0x658>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	7c5b      	ldrb	r3, [r3, #17]
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80029d0:	b2da      	uxtb	r2, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	64da      	str	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	745a      	strb	r2, [r3, #17]
 80029de:	e2d3      	b.n	8002f88 <PCD_EP_ISR_Handler+0x658>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80029e6:	637b      	str	r3, [r7, #52]	@ 0x34
        wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	867b      	strh	r3, [r7, #50]	@ 0x32

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80029f0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80029f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d027      	beq.n	8002a4a <PCD_EP_ISR_Handler+0x11a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	4619      	mov	r1, r3
 8002a04:	4610      	mov	r0, r2
 8002a06:	f7ff fb51 	bl	80020ac <PCD_GET_EP_RX_CNT>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a10:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6818      	ldr	r0, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f503 7127 	add.w	r1, r3, #668	@ 0x29c
 8002a1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a1e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002a20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a22:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	f005 f956 	bl	8007cd6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	4b58      	ldr	r3, [pc, #352]	@ (8002b94 <PCD_EP_ISR_Handler+0x264>)
 8002a32:	4013      	ands	r3, r2
 8002a34:	60fb      	str	r3, [r7, #12]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	68fa      	ldr	r2, [r7, #12]
 8002a3c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002a40:	601a      	str	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f005 fd53 	bl	80084ee <HAL_PCD_SetupStageCallback>
 8002a48:	e29e      	b.n	8002f88 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_VTRX) != 0U)
 8002a4a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	f280 829a 	bge.w	8002f88 <PCD_EP_ISR_Handler+0x658>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	4b4e      	ldr	r3, [pc, #312]	@ (8002b94 <PCD_EP_ISR_Handler+0x264>)
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a66:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002a6a:	601a      	str	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	4619      	mov	r1, r3
 8002a76:	4610      	mov	r0, r2
 8002a78:	f7ff fb18 	bl	80020ac <PCD_GET_EP_RX_CNT>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	461a      	mov	r2, r3
 8002a80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a82:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002a84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a86:	69db      	ldr	r3, [r3, #28]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d019      	beq.n	8002ac0 <PCD_EP_ISR_Handler+0x190>
 8002a8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a8e:	695b      	ldr	r3, [r3, #20]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d015      	beq.n	8002ac0 <PCD_EP_ISR_Handler+0x190>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6818      	ldr	r0, [r3, #0]
 8002a98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a9a:	6959      	ldr	r1, [r3, #20]
 8002a9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a9e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002aa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002aa2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	f005 f916 	bl	8007cd6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002aaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002aac:	695a      	ldr	r2, [r3, #20]
 8002aae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ab0:	69db      	ldr	r3, [r3, #28]
 8002ab2:	441a      	add	r2, r3
 8002ab4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ab6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002ab8:	2100      	movs	r1, #0
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f005 fd29 	bl	8008512 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	867b      	strh	r3, [r7, #50]	@ 0x32

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002ac8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002aca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	f040 825a 	bne.w	8002f88 <PCD_EP_ISR_Handler+0x658>
 8002ad4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002ad6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002ada:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002ade:	f000 8253 	beq.w	8002f88 <PCD_EP_ISR_Handler+0x658>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002ae2:	4b2d      	ldr	r3, [pc, #180]	@ (8002b98 <PCD_EP_ISR_Handler+0x268>)
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	4a2c      	ldr	r2, [pc, #176]	@ (8002b98 <PCD_EP_ISR_Handler+0x268>)
 8002ae8:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8002aec:	6053      	str	r3, [r2, #4]
 8002aee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d106      	bne.n	8002b04 <PCD_EP_ISR_Handler+0x1d4>
 8002af6:	4b28      	ldr	r3, [pc, #160]	@ (8002b98 <PCD_EP_ISR_Handler+0x268>)
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	4a27      	ldr	r2, [pc, #156]	@ (8002b98 <PCD_EP_ISR_Handler+0x268>)
 8002afc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002b00:	6053      	str	r3, [r2, #4]
 8002b02:	e02e      	b.n	8002b62 <PCD_EP_ISR_Handler+0x232>
 8002b04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b06:	691b      	ldr	r3, [r3, #16]
 8002b08:	2b3e      	cmp	r3, #62	@ 0x3e
 8002b0a:	d814      	bhi.n	8002b36 <PCD_EP_ISR_Handler+0x206>
 8002b0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b0e:	691b      	ldr	r3, [r3, #16]
 8002b10:	085b      	lsrs	r3, r3, #1
 8002b12:	617b      	str	r3, [r7, #20]
 8002b14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b16:	691b      	ldr	r3, [r3, #16]
 8002b18:	f003 0301 	and.w	r3, r3, #1
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d002      	beq.n	8002b26 <PCD_EP_ISR_Handler+0x1f6>
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	3301      	adds	r3, #1
 8002b24:	617b      	str	r3, [r7, #20]
 8002b26:	4b1c      	ldr	r3, [pc, #112]	@ (8002b98 <PCD_EP_ISR_Handler+0x268>)
 8002b28:	685a      	ldr	r2, [r3, #4]
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	069b      	lsls	r3, r3, #26
 8002b2e:	491a      	ldr	r1, [pc, #104]	@ (8002b98 <PCD_EP_ISR_Handler+0x268>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	604b      	str	r3, [r1, #4]
 8002b34:	e015      	b.n	8002b62 <PCD_EP_ISR_Handler+0x232>
 8002b36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b38:	691b      	ldr	r3, [r3, #16]
 8002b3a:	095b      	lsrs	r3, r3, #5
 8002b3c:	617b      	str	r3, [r7, #20]
 8002b3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	f003 031f 	and.w	r3, r3, #31
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d102      	bne.n	8002b50 <PCD_EP_ISR_Handler+0x220>
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	3b01      	subs	r3, #1
 8002b4e:	617b      	str	r3, [r7, #20]
 8002b50:	4b11      	ldr	r3, [pc, #68]	@ (8002b98 <PCD_EP_ISR_Handler+0x268>)
 8002b52:	685a      	ldr	r2, [r3, #4]
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	069b      	lsls	r3, r3, #26
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	4a0f      	ldr	r2, [pc, #60]	@ (8002b98 <PCD_EP_ISR_Handler+0x268>)
 8002b5c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002b60:	6053      	str	r3, [r2, #4]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	4b0c      	ldr	r3, [pc, #48]	@ (8002b9c <PCD_EP_ISR_Handler+0x26c>)
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	613b      	str	r3, [r7, #16]
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002b74:	613b      	str	r3, [r7, #16]
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002b7c:	613b      	str	r3, [r7, #16]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b8c:	6013      	str	r3, [r2, #0]
 8002b8e:	e1fb      	b.n	8002f88 <PCD_EP_ISR_Handler+0x658>
 8002b90:	07ff8f0f 	.word	0x07ff8f0f
 8002b94:	07ff0f8f 	.word	0x07ff0f8f
 8002b98:	40016400 	.word	0x40016400
 8002b9c:	07ffbf8f 	.word	0x07ffbf8f
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	4413      	add	r3, r2
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	867b      	strh	r3, [r7, #50]	@ 0x32

      if ((wEPVal & USB_EP_VTRX) != 0U)
 8002bb2:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	f280 80bd 	bge.w	8002d36 <PCD_EP_ISR_Handler+0x406>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	4413      	add	r3, r2
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	4b9e      	ldr	r3, [pc, #632]	@ (8002e48 <PCD_EP_ISR_Handler+0x518>)
 8002bce:	4013      	ands	r3, r2
 8002bd0:	61fb      	str	r3, [r7, #28]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	4413      	add	r3, r2
 8002be0:	69fa      	ldr	r2, [r7, #28]
 8002be2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002be6:	601a      	str	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002be8:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8002bec:	4613      	mov	r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	4413      	add	r3, r2
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	3304      	adds	r3, #4
 8002bfe:	637b      	str	r3, [r7, #52]	@ 0x34

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002c00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c02:	7b1b      	ldrb	r3, [r3, #12]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d116      	bne.n	8002c36 <PCD_EP_ISR_Handler+0x306>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	4619      	mov	r1, r3
 8002c12:	4610      	mov	r0, r2
 8002c14:	f7ff fa4a 	bl	80020ac <PCD_GET_EP_RX_CNT>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	84bb      	strh	r3, [r7, #36]	@ 0x24

          if (count != 0U)
 8002c1c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d067      	beq.n	8002cf2 <PCD_EP_ISR_Handler+0x3c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6818      	ldr	r0, [r3, #0]
 8002c26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c28:	6959      	ldr	r1, [r3, #20]
 8002c2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c2c:	88da      	ldrh	r2, [r3, #6]
 8002c2e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002c30:	f005 f851 	bl	8007cd6 <USB_ReadPMA>
 8002c34:	e05d      	b.n	8002cf2 <PCD_EP_ISR_Handler+0x3c2>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002c36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c38:	78db      	ldrb	r3, [r3, #3]
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d108      	bne.n	8002c50 <PCD_EP_ISR_Handler+0x320>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002c3e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002c40:	461a      	mov	r2, r3
 8002c42:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f000 f9ad 	bl	8002fa4 <HAL_PCD_EP_DB_Receive>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8002c4e:	e050      	b.n	8002cf2 <PCD_EP_ISR_Handler+0x3c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	461a      	mov	r2, r3
 8002c56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	4413      	add	r3, r2
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	4b7a      	ldr	r3, [pc, #488]	@ (8002e4c <PCD_EP_ISR_Handler+0x51c>)
 8002c62:	4013      	ands	r3, r2
 8002c64:	61bb      	str	r3, [r7, #24]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	441a      	add	r2, r3
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c7a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002c7e:	6013      	str	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	461a      	mov	r2, r3
 8002c86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	4413      	add	r3, r2
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d016      	beq.n	8002cc6 <PCD_EP_ISR_Handler+0x396>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	4610      	mov	r0, r2
 8002ca4:	f7ff fa23 	bl	80020ee <PCD_GET_EP_DBUF0_CNT>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	84bb      	strh	r3, [r7, #36]	@ 0x24

              if (count != 0U)
 8002cac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d01f      	beq.n	8002cf2 <PCD_EP_ISR_Handler+0x3c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6818      	ldr	r0, [r3, #0]
 8002cb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cb8:	6959      	ldr	r1, [r3, #20]
 8002cba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cbc:	891a      	ldrh	r2, [r3, #8]
 8002cbe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002cc0:	f005 f809 	bl	8007cd6 <USB_ReadPMA>
 8002cc4:	e015      	b.n	8002cf2 <PCD_EP_ISR_Handler+0x3c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	4619      	mov	r1, r3
 8002cd0:	4610      	mov	r0, r2
 8002cd2:	f7ff fa2d 	bl	8002130 <PCD_GET_EP_DBUF1_CNT>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	84bb      	strh	r3, [r7, #36]	@ 0x24

              if (count != 0U)
 8002cda:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d008      	beq.n	8002cf2 <PCD_EP_ISR_Handler+0x3c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6818      	ldr	r0, [r3, #0]
 8002ce4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ce6:	6959      	ldr	r1, [r3, #20]
 8002ce8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cea:	895a      	ldrh	r2, [r3, #10]
 8002cec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002cee:	f004 fff2 	bl	8007cd6 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002cf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cf4:	69da      	ldr	r2, [r3, #28]
 8002cf6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002cf8:	441a      	add	r2, r3
 8002cfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cfc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002cfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d00:	695a      	ldr	r2, [r3, #20]
 8002d02:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002d04:	441a      	add	r2, r3
 8002d06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d08:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002d0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d004      	beq.n	8002d1c <PCD_EP_ISR_Handler+0x3ec>
 8002d12:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002d14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d16:	691b      	ldr	r3, [r3, #16]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d206      	bcs.n	8002d2a <PCD_EP_ISR_Handler+0x3fa>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002d1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	4619      	mov	r1, r3
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f005 fbf5 	bl	8008512 <HAL_PCD_DataOutStageCallback>
 8002d28:	e005      	b.n	8002d36 <PCD_EP_ISR_Handler+0x406>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002d30:	4618      	mov	r0, r3
 8002d32:	f003 fdf9 	bl	8006928 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_VTTX) != 0U)
 8002d36:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002d38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	f000 8123 	beq.w	8002f88 <PCD_EP_ISR_Handler+0x658>
      {
        ep = &hpcd->IN_ep[epindex];
 8002d42:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8002d46:	4613      	mov	r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	4413      	add	r3, r2
 8002d4c:	00db      	lsls	r3, r3, #3
 8002d4e:	3310      	adds	r3, #16
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	4413      	add	r3, r2
 8002d54:	3304      	adds	r3, #4
 8002d56:	637b      	str	r3, [r7, #52]	@ 0x34

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	4413      	add	r3, r2
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	4b39      	ldr	r3, [pc, #228]	@ (8002e50 <PCD_EP_ISR_Handler+0x520>)
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	461a      	mov	r2, r3
 8002d74:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	4413      	add	r3, r2
 8002d7c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002d7e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002d82:	601a      	str	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002d84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d86:	78db      	ldrb	r3, [r3, #3]
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	f040 80b8 	bne.w	8002efe <PCD_EP_ISR_Handler+0x5ce>
        {
          ep->xfer_len = 0U;
 8002d8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d90:	2200      	movs	r2, #0
 8002d92:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002d94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d96:	7b1b      	ldrb	r3, [r3, #12]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	f000 80a9 	beq.w	8002ef0 <PCD_EP_ISR_Handler+0x5c0>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002d9e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002da0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d055      	beq.n	8002e54 <PCD_EP_ISR_Handler+0x524>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002da8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002daa:	785b      	ldrb	r3, [r3, #1]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d124      	bne.n	8002dfa <PCD_EP_ISR_Handler+0x4ca>
 8002db0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	00db      	lsls	r3, r3, #3
 8002db6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002dba:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	00db      	lsls	r3, r3, #3
 8002dc6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002dca:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002dce:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8002dd2:	601a      	str	r2, [r3, #0]
 8002dd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	00db      	lsls	r3, r3, #3
 8002dda:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002dde:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	00db      	lsls	r3, r3, #3
 8002dea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002dee:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002df2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002df6:	601a      	str	r2, [r3, #0]
 8002df8:	e07a      	b.n	8002ef0 <PCD_EP_ISR_Handler+0x5c0>
 8002dfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dfc:	785b      	ldrb	r3, [r3, #1]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d176      	bne.n	8002ef0 <PCD_EP_ISR_Handler+0x5c0>
 8002e02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002e0c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002e1c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002e20:	b292      	uxth	r2, r2
 8002e22:	601a      	str	r2, [r3, #0]
 8002e24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	00db      	lsls	r3, r3, #3
 8002e2a:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8002e2e:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8002e32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	00db      	lsls	r3, r3, #3
 8002e38:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002e3c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002e40:	6812      	ldr	r2, [r2, #0]
 8002e42:	601a      	str	r2, [r3, #0]
 8002e44:	e054      	b.n	8002ef0 <PCD_EP_ISR_Handler+0x5c0>
 8002e46:	bf00      	nop
 8002e48:	07ff0f8f 	.word	0x07ff0f8f
 8002e4c:	07ff8f8f 	.word	0x07ff8f8f
 8002e50:	07ff8f0f 	.word	0x07ff8f0f
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e56:	785b      	ldrb	r3, [r3, #1]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d124      	bne.n	8002ea6 <PCD_EP_ISR_Handler+0x576>
 8002e5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	00db      	lsls	r3, r3, #3
 8002e62:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002e66:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002e6a:	685a      	ldr	r2, [r3, #4]
 8002e6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	00db      	lsls	r3, r3, #3
 8002e72:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002e76:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002e7a:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8002e7e:	605a      	str	r2, [r3, #4]
 8002e80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	00db      	lsls	r3, r3, #3
 8002e86:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002e8a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002e8e:	685a      	ldr	r2, [r3, #4]
 8002e90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	00db      	lsls	r3, r3, #3
 8002e96:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002e9a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002e9e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002ea2:	605a      	str	r2, [r3, #4]
 8002ea4:	e024      	b.n	8002ef0 <PCD_EP_ISR_Handler+0x5c0>
 8002ea6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ea8:	785b      	ldrb	r3, [r3, #1]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d120      	bne.n	8002ef0 <PCD_EP_ISR_Handler+0x5c0>
 8002eae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	00db      	lsls	r3, r3, #3
 8002eb4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002eb8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002ebc:	685a      	ldr	r2, [r3, #4]
 8002ebe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	00db      	lsls	r3, r3, #3
 8002ec4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002ec8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002ecc:	b292      	uxth	r2, r2
 8002ece:	605a      	str	r2, [r3, #4]
 8002ed0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	00db      	lsls	r3, r3, #3
 8002ed6:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8002eda:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8002ede:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	00db      	lsls	r3, r3, #3
 8002ee4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002ee8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002eec:	6852      	ldr	r2, [r2, #4]
 8002eee:	605a      	str	r2, [r3, #4]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002ef0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f005 fb26 	bl	8008548 <HAL_PCD_DataInStageCallback>
 8002efc:	e044      	b.n	8002f88 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002efe:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002f00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d139      	bne.n	8002f7c <PCD_EP_ISR_Handler+0x64c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002f08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	00db      	lsls	r3, r3, #3
 8002f0e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002f12:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	0c1b      	lsrs	r3, r3, #16
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f20:	84fb      	strh	r3, [r7, #38]	@ 0x26

            if (ep->xfer_len > TxPctSize)
 8002f22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f24:	699a      	ldr	r2, [r3, #24]
 8002f26:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d906      	bls.n	8002f3a <PCD_EP_ISR_Handler+0x60a>
            {
              ep->xfer_len -= TxPctSize;
 8002f2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f2e:	699a      	ldr	r2, [r3, #24]
 8002f30:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002f32:	1ad2      	subs	r2, r2, r3
 8002f34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f36:	619a      	str	r2, [r3, #24]
 8002f38:	e002      	b.n	8002f40 <PCD_EP_ISR_Handler+0x610>
            }
            else
            {
              ep->xfer_len = 0U;
 8002f3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002f40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d106      	bne.n	8002f56 <PCD_EP_ISR_Handler+0x626>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002f48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f005 fafa 	bl	8008548 <HAL_PCD_DataInStageCallback>
 8002f54:	e018      	b.n	8002f88 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002f56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f58:	695a      	ldr	r2, [r3, #20]
 8002f5a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002f5c:	441a      	add	r2, r3
 8002f5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f60:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002f62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f64:	69da      	ldr	r2, [r3, #28]
 8002f66:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002f68:	441a      	add	r2, r3
 8002f6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f6c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002f74:	4618      	mov	r0, r3
 8002f76:	f003 fcd7 	bl	8006928 <USB_EPStartXfer>
 8002f7a:	e005      	b.n	8002f88 <PCD_EP_ISR_Handler+0x658>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002f7c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002f7e:	461a      	mov	r2, r3
 8002f80:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 f8e8 	bl	8003158 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f8e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	f47f acd1 	bne.w	800293a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3738      	adds	r7, #56	@ 0x38
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop

08002fa4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b08a      	sub	sp, #40	@ 0x28
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	4613      	mov	r3, r2
 8002fb0:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002fb2:	88fb      	ldrh	r3, [r7, #6]
 8002fb4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d062      	beq.n	8003082 <HAL_PCD_EP_DB_Receive+0xde>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	4610      	mov	r0, r2
 8002fc8:	f7ff f891 	bl	80020ee <PCD_GET_EP_DBUF0_CNT>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	699a      	ldr	r2, [r3, #24]
 8002fd4:	8bfb      	ldrh	r3, [r7, #30]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d306      	bcc.n	8002fe8 <HAL_PCD_EP_DB_Receive+0x44>
    {
      ep->xfer_len -= count;
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	699a      	ldr	r2, [r3, #24]
 8002fde:	8bfb      	ldrh	r3, [r7, #30]
 8002fe0:	1ad2      	subs	r2, r2, r3
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	619a      	str	r2, [r3, #24]
 8002fe6:	e002      	b.n	8002fee <HAL_PCD_EP_DB_Receive+0x4a>
    }
    else
    {
      ep->xfer_len = 0U;
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	2200      	movs	r2, #0
 8002fec:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d11b      	bne.n	800302e <HAL_PCD_EP_DB_Receive+0x8a>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	4413      	add	r3, r2
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	4b52      	ldr	r3, [pc, #328]	@ (8003150 <HAL_PCD_EP_DB_Receive+0x1ac>)
 8003008:	4013      	ands	r3, r2
 800300a:	61bb      	str	r3, [r7, #24]
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003012:	61bb      	str	r3, [r7, #24]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	461a      	mov	r2, r3
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	441a      	add	r2, r3
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003028:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800302c:	6013      	str	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800302e:	88fb      	ldrh	r3, [r7, #6]
 8003030:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003034:	2b00      	cmp	r3, #0
 8003036:	d017      	beq.n	8003068 <HAL_PCD_EP_DB_Receive+0xc4>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	461a      	mov	r2, r3
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	4413      	add	r3, r2
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	4b42      	ldr	r3, [pc, #264]	@ (8003154 <HAL_PCD_EP_DB_Receive+0x1b0>)
 800304a:	4013      	ands	r3, r2
 800304c:	617b      	str	r3, [r7, #20]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	461a      	mov	r2, r3
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	441a      	add	r2, r3
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003062:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003066:	6013      	str	r3, [r2, #0]
    }

    if (count != 0U)
 8003068:	8bfb      	ldrh	r3, [r7, #30]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d06b      	beq.n	8003146 <HAL_PCD_EP_DB_Receive+0x1a2>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6818      	ldr	r0, [r3, #0]
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	6959      	ldr	r1, [r3, #20]
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	891a      	ldrh	r2, [r3, #8]
 800307a:	8bfb      	ldrh	r3, [r7, #30]
 800307c:	f004 fe2b 	bl	8007cd6 <USB_ReadPMA>
 8003080:	e061      	b.n	8003146 <HAL_PCD_EP_DB_Receive+0x1a2>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	4619      	mov	r1, r3
 800308c:	4610      	mov	r0, r2
 800308e:	f7ff f84f 	bl	8002130 <PCD_GET_EP_DBUF1_CNT>
 8003092:	4603      	mov	r3, r0
 8003094:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	699a      	ldr	r2, [r3, #24]
 800309a:	8bfb      	ldrh	r3, [r7, #30]
 800309c:	429a      	cmp	r2, r3
 800309e:	d306      	bcc.n	80030ae <HAL_PCD_EP_DB_Receive+0x10a>
    {
      ep->xfer_len -= count;
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	699a      	ldr	r2, [r3, #24]
 80030a4:	8bfb      	ldrh	r3, [r7, #30]
 80030a6:	1ad2      	subs	r2, r2, r3
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	619a      	str	r2, [r3, #24]
 80030ac:	e002      	b.n	80030b4 <HAL_PCD_EP_DB_Receive+0x110>
    }
    else
    {
      ep->xfer_len = 0U;
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	2200      	movs	r2, #0
 80030b2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d11b      	bne.n	80030f4 <HAL_PCD_EP_DB_Receive+0x150>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	461a      	mov	r2, r3
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	4413      	add	r3, r2
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	4b20      	ldr	r3, [pc, #128]	@ (8003150 <HAL_PCD_EP_DB_Receive+0x1ac>)
 80030ce:	4013      	ands	r3, r2
 80030d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80030d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80030d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	461a      	mov	r2, r3
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	441a      	add	r2, r3
 80030e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80030ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030f2:	6013      	str	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80030f4:	88fb      	ldrh	r3, [r7, #6]
 80030f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d117      	bne.n	800312e <HAL_PCD_EP_DB_Receive+0x18a>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	461a      	mov	r2, r3
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	4413      	add	r3, r2
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	4b11      	ldr	r3, [pc, #68]	@ (8003154 <HAL_PCD_EP_DB_Receive+0x1b0>)
 8003110:	4013      	ands	r3, r2
 8003112:	623b      	str	r3, [r7, #32]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	461a      	mov	r2, r3
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	441a      	add	r2, r3
 8003122:	6a3b      	ldr	r3, [r7, #32]
 8003124:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003128:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800312c:	6013      	str	r3, [r2, #0]
    }

    if (count != 0U)
 800312e:	8bfb      	ldrh	r3, [r7, #30]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d008      	beq.n	8003146 <HAL_PCD_EP_DB_Receive+0x1a2>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6818      	ldr	r0, [r3, #0]
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	6959      	ldr	r1, [r3, #20]
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	895a      	ldrh	r2, [r3, #10]
 8003140:	8bfb      	ldrh	r3, [r7, #30]
 8003142:	f004 fdc8 	bl	8007cd6 <USB_ReadPMA>
    }
  }

  return count;
 8003146:	8bfb      	ldrh	r3, [r7, #30]
}
 8003148:	4618      	mov	r0, r3
 800314a:	3728      	adds	r7, #40	@ 0x28
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	07ffbf8f 	.word	0x07ffbf8f
 8003154:	07ff8f8f 	.word	0x07ff8f8f

08003158 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b08e      	sub	sp, #56	@ 0x38
 800315c:	af00      	add	r7, sp, #0
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	60b9      	str	r1, [r7, #8]
 8003162:	4613      	mov	r3, r2
 8003164:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003166:	88fb      	ldrh	r3, [r7, #6]
 8003168:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800316c:	2b00      	cmp	r3, #0
 800316e:	f000 81d5 	beq.w	800351c <HAL_PCD_EP_DB_Transmit+0x3c4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	4619      	mov	r1, r3
 800317c:	4610      	mov	r0, r2
 800317e:	f7fe ffb6 	bl	80020ee <PCD_GET_EP_DBUF0_CNT>
 8003182:	4603      	mov	r3, r0
 8003184:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len > TxPctSize)
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	699a      	ldr	r2, [r3, #24]
 800318a:	8bfb      	ldrh	r3, [r7, #30]
 800318c:	429a      	cmp	r2, r3
 800318e:	d906      	bls.n	800319e <HAL_PCD_EP_DB_Transmit+0x46>
    {
      ep->xfer_len -= TxPctSize;
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	699a      	ldr	r2, [r3, #24]
 8003194:	8bfb      	ldrh	r3, [r7, #30]
 8003196:	1ad2      	subs	r2, r2, r3
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	619a      	str	r2, [r3, #24]
 800319c:	e002      	b.n	80031a4 <HAL_PCD_EP_DB_Transmit+0x4c>
    }
    else
    {
      ep->xfer_len = 0U;
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	2200      	movs	r2, #0
 80031a2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	699b      	ldr	r3, [r3, #24]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	f040 80c1 	bne.w	8003330 <HAL_PCD_EP_DB_Transmit+0x1d8>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	785b      	ldrb	r3, [r3, #1]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d124      	bne.n	8003200 <HAL_PCD_EP_DB_Transmit+0xa8>
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80031c0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	00db      	lsls	r3, r3, #3
 80031cc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80031d0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80031d4:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80031d8:	601a      	str	r2, [r3, #0]
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	00db      	lsls	r3, r3, #3
 80031e0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80031e4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	00db      	lsls	r3, r3, #3
 80031f0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80031f4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80031f8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80031fc:	601a      	str	r2, [r3, #0]
 80031fe:	e024      	b.n	800324a <HAL_PCD_EP_DB_Transmit+0xf2>
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	785b      	ldrb	r3, [r3, #1]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d120      	bne.n	800324a <HAL_PCD_EP_DB_Transmit+0xf2>
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	00db      	lsls	r3, r3, #3
 800320e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003212:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	00db      	lsls	r3, r3, #3
 800321e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003222:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003226:	b292      	uxth	r2, r2
 8003228:	601a      	str	r2, [r3, #0]
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	00db      	lsls	r3, r3, #3
 8003230:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8003234:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	00db      	lsls	r3, r3, #3
 800323e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003242:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003246:	6812      	ldr	r2, [r2, #0]
 8003248:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	785b      	ldrb	r3, [r3, #1]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d124      	bne.n	800329c <HAL_PCD_EP_DB_Transmit+0x144>
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800325c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003260:	685a      	ldr	r2, [r3, #4]
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800326c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003270:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8003274:	605a      	str	r2, [r3, #4]
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	00db      	lsls	r3, r3, #3
 800327c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003280:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003284:	685a      	ldr	r2, [r3, #4]
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	00db      	lsls	r3, r3, #3
 800328c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003290:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003294:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003298:	605a      	str	r2, [r3, #4]
 800329a:	e024      	b.n	80032e6 <HAL_PCD_EP_DB_Transmit+0x18e>
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	785b      	ldrb	r3, [r3, #1]
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d120      	bne.n	80032e6 <HAL_PCD_EP_DB_Transmit+0x18e>
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	00db      	lsls	r3, r3, #3
 80032aa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80032ae:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80032b2:	685a      	ldr	r2, [r3, #4]
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	00db      	lsls	r3, r3, #3
 80032ba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80032be:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80032c2:	b292      	uxth	r2, r2
 80032c4:	605a      	str	r2, [r3, #4]
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	00db      	lsls	r3, r3, #3
 80032cc:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 80032d0:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	00db      	lsls	r3, r3, #3
 80032da:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80032de:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80032e2:	6852      	ldr	r2, [r2, #4]
 80032e4:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	4619      	mov	r1, r3
 80032ec:	68f8      	ldr	r0, [r7, #12]
 80032ee:	f005 f92b 	bl	8008548 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80032f2:	88fb      	ldrh	r3, [r7, #6]
 80032f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	f000 82e5 	beq.w	80038c8 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	461a      	mov	r2, r3
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	4413      	add	r3, r2
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	4b8e      	ldr	r3, [pc, #568]	@ (8003548 <HAL_PCD_EP_DB_Transmit+0x3f0>)
 8003310:	4013      	ands	r3, r2
 8003312:	637b      	str	r3, [r7, #52]	@ 0x34
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	461a      	mov	r2, r3
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	441a      	add	r2, r3
 8003322:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003324:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003328:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800332c:	6013      	str	r3, [r2, #0]
 800332e:	e2cb      	b.n	80038c8 <HAL_PCD_EP_DB_Transmit+0x770>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003330:	88fb      	ldrh	r3, [r7, #6]
 8003332:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d017      	beq.n	800336a <HAL_PCD_EP_DB_Transmit+0x212>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	461a      	mov	r2, r3
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	4413      	add	r3, r2
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	4b7f      	ldr	r3, [pc, #508]	@ (8003548 <HAL_PCD_EP_DB_Transmit+0x3f0>)
 800334c:	4013      	ands	r3, r2
 800334e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	461a      	mov	r2, r3
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	441a      	add	r2, r3
 800335e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003360:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003364:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003368:	6013      	str	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003370:	2b01      	cmp	r3, #1
 8003372:	f040 82a9 	bne.w	80038c8 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        ep->xfer_buff += TxPctSize;
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	695a      	ldr	r2, [r3, #20]
 800337a:	8bfb      	ldrh	r3, [r7, #30]
 800337c:	441a      	add	r2, r3
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	69da      	ldr	r2, [r3, #28]
 8003386:	8bfb      	ldrh	r3, [r7, #30]
 8003388:	441a      	add	r2, r3
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	6a1a      	ldr	r2, [r3, #32]
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	429a      	cmp	r2, r3
 8003398:	d309      	bcc.n	80033ae <HAL_PCD_EP_DB_Transmit+0x256>
        {
          len = ep->maxpacket;
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	6a1a      	ldr	r2, [r3, #32]
 80033a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a6:	1ad2      	subs	r2, r2, r3
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	621a      	str	r2, [r3, #32]
 80033ac:	e014      	b.n	80033d8 <HAL_PCD_EP_DB_Transmit+0x280>
        }
        else if (ep->xfer_len_db == 0U)
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	6a1b      	ldr	r3, [r3, #32]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d106      	bne.n	80033c4 <HAL_PCD_EP_DB_Transmit+0x26c>
        {
          len = TxPctSize;
 80033b6:	8bfb      	ldrh	r3, [r7, #30]
 80033b8:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80033c2:	e009      	b.n	80033d8 <HAL_PCD_EP_DB_Transmit+0x280>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	6a1b      	ldr	r3, [r3, #32]
 80033d0:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	2200      	movs	r2, #0
 80033d6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	785b      	ldrb	r3, [r3, #1]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d16a      	bne.n	80034b6 <HAL_PCD_EP_DB_Transmit+0x35e>
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	00db      	lsls	r3, r3, #3
 80033e6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80033ea:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	00db      	lsls	r3, r3, #3
 80033f6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80033fa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80033fe:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8003402:	601a      	str	r2, [r3, #0]
 8003404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003406:	2b00      	cmp	r3, #0
 8003408:	d112      	bne.n	8003430 <HAL_PCD_EP_DB_Transmit+0x2d8>
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	00db      	lsls	r3, r3, #3
 8003410:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003414:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	00db      	lsls	r3, r3, #3
 8003420:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003424:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003428:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800342c:	601a      	str	r2, [r3, #0]
 800342e:	e06a      	b.n	8003506 <HAL_PCD_EP_DB_Transmit+0x3ae>
 8003430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003432:	2b3e      	cmp	r3, #62	@ 0x3e
 8003434:	d81e      	bhi.n	8003474 <HAL_PCD_EP_DB_Transmit+0x31c>
 8003436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003438:	085b      	lsrs	r3, r3, #1
 800343a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800343c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	2b00      	cmp	r3, #0
 8003444:	d002      	beq.n	800344c <HAL_PCD_EP_DB_Transmit+0x2f4>
 8003446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003448:	3301      	adds	r3, #1
 800344a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	00db      	lsls	r3, r3, #3
 8003452:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003456:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800345a:	6819      	ldr	r1, [r3, #0]
 800345c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800345e:	069a      	lsls	r2, r3, #26
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	00db      	lsls	r3, r3, #3
 8003466:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800346a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800346e:	430a      	orrs	r2, r1
 8003470:	601a      	str	r2, [r3, #0]
 8003472:	e048      	b.n	8003506 <HAL_PCD_EP_DB_Transmit+0x3ae>
 8003474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003476:	095b      	lsrs	r3, r3, #5
 8003478:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800347a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800347c:	f003 031f 	and.w	r3, r3, #31
 8003480:	2b00      	cmp	r3, #0
 8003482:	d102      	bne.n	800348a <HAL_PCD_EP_DB_Transmit+0x332>
 8003484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003486:	3b01      	subs	r3, #1
 8003488:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	00db      	lsls	r3, r3, #3
 8003490:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003494:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800349c:	069b      	lsls	r3, r3, #26
 800349e:	431a      	orrs	r2, r3
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	00db      	lsls	r3, r3, #3
 80034a6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80034aa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80034ae:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80034b2:	601a      	str	r2, [r3, #0]
 80034b4:	e027      	b.n	8003506 <HAL_PCD_EP_DB_Transmit+0x3ae>
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	785b      	ldrb	r3, [r3, #1]
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d123      	bne.n	8003506 <HAL_PCD_EP_DB_Transmit+0x3ae>
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	00db      	lsls	r3, r3, #3
 80034c4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80034c8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	00db      	lsls	r3, r3, #3
 80034d4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80034d8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80034dc:	b292      	uxth	r2, r2
 80034de:	601a      	str	r2, [r3, #0]
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	00db      	lsls	r3, r3, #3
 80034e6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80034ea:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80034ee:	6819      	ldr	r1, [r3, #0]
 80034f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f2:	041a      	lsls	r2, r3, #16
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	00db      	lsls	r3, r3, #3
 80034fa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80034fe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003502:	430a      	orrs	r2, r1
 8003504:	601a      	str	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6818      	ldr	r0, [r3, #0]
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	6959      	ldr	r1, [r3, #20]
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	891a      	ldrh	r2, [r3, #8]
 8003512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003514:	b29b      	uxth	r3, r3
 8003516:	f004 fb7d 	bl	8007c14 <USB_WritePMA>
 800351a:	e1d5      	b.n	80038c8 <HAL_PCD_EP_DB_Transmit+0x770>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	4619      	mov	r1, r3
 8003526:	4610      	mov	r0, r2
 8003528:	f7fe fe02 	bl	8002130 <PCD_GET_EP_DBUF1_CNT>
 800352c:	4603      	mov	r3, r0
 800352e:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= TxPctSize)
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	699a      	ldr	r2, [r3, #24]
 8003534:	8bfb      	ldrh	r3, [r7, #30]
 8003536:	429a      	cmp	r2, r3
 8003538:	d308      	bcc.n	800354c <HAL_PCD_EP_DB_Transmit+0x3f4>
    {
      ep->xfer_len -= TxPctSize;
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	699a      	ldr	r2, [r3, #24]
 800353e:	8bfb      	ldrh	r3, [r7, #30]
 8003540:	1ad2      	subs	r2, r2, r3
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	619a      	str	r2, [r3, #24]
 8003546:	e004      	b.n	8003552 <HAL_PCD_EP_DB_Transmit+0x3fa>
 8003548:	07ff8f8f 	.word	0x07ff8f8f
    }
    else
    {
      ep->xfer_len = 0U;
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	2200      	movs	r2, #0
 8003550:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	699b      	ldr	r3, [r3, #24]
 8003556:	2b00      	cmp	r3, #0
 8003558:	f040 80c1 	bne.w	80036de <HAL_PCD_EP_DB_Transmit+0x586>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	785b      	ldrb	r3, [r3, #1]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d124      	bne.n	80035ae <HAL_PCD_EP_DB_Transmit+0x456>
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	00db      	lsls	r3, r3, #3
 800356a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800356e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	00db      	lsls	r3, r3, #3
 800357a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800357e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003582:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8003586:	601a      	str	r2, [r3, #0]
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	00db      	lsls	r3, r3, #3
 800358e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003592:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	00db      	lsls	r3, r3, #3
 800359e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80035a2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80035a6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80035aa:	601a      	str	r2, [r3, #0]
 80035ac:	e024      	b.n	80035f8 <HAL_PCD_EP_DB_Transmit+0x4a0>
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	785b      	ldrb	r3, [r3, #1]
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d120      	bne.n	80035f8 <HAL_PCD_EP_DB_Transmit+0x4a0>
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	00db      	lsls	r3, r3, #3
 80035bc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80035c0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	00db      	lsls	r3, r3, #3
 80035cc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80035d0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80035d4:	b292      	uxth	r2, r2
 80035d6:	601a      	str	r2, [r3, #0]
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	00db      	lsls	r3, r3, #3
 80035de:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 80035e2:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	00db      	lsls	r3, r3, #3
 80035ec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80035f0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80035f4:	6812      	ldr	r2, [r2, #0]
 80035f6:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	785b      	ldrb	r3, [r3, #1]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d124      	bne.n	800364a <HAL_PCD_EP_DB_Transmit+0x4f2>
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	00db      	lsls	r3, r3, #3
 8003606:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800360a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800360e:	685a      	ldr	r2, [r3, #4]
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	00db      	lsls	r3, r3, #3
 8003616:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800361a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800361e:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8003622:	605a      	str	r2, [r3, #4]
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	00db      	lsls	r3, r3, #3
 800362a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800362e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003632:	685a      	ldr	r2, [r3, #4]
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	00db      	lsls	r3, r3, #3
 800363a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800363e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003642:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003646:	605a      	str	r2, [r3, #4]
 8003648:	e024      	b.n	8003694 <HAL_PCD_EP_DB_Transmit+0x53c>
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	785b      	ldrb	r3, [r3, #1]
 800364e:	2b01      	cmp	r3, #1
 8003650:	d120      	bne.n	8003694 <HAL_PCD_EP_DB_Transmit+0x53c>
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	00db      	lsls	r3, r3, #3
 8003658:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800365c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003660:	685a      	ldr	r2, [r3, #4]
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	00db      	lsls	r3, r3, #3
 8003668:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800366c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003670:	b292      	uxth	r2, r2
 8003672:	605a      	str	r2, [r3, #4]
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	00db      	lsls	r3, r3, #3
 800367a:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 800367e:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	00db      	lsls	r3, r3, #3
 8003688:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800368c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003690:	6852      	ldr	r2, [r2, #4]
 8003692:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	4619      	mov	r1, r3
 800369a:	68f8      	ldr	r0, [r7, #12]
 800369c:	f004 ff54 	bl	8008548 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80036a0:	88fb      	ldrh	r3, [r7, #6]
 80036a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	f040 810e 	bne.w	80038c8 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	461a      	mov	r2, r3
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	4413      	add	r3, r2
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	4b95      	ldr	r3, [pc, #596]	@ (8003914 <HAL_PCD_EP_DB_Transmit+0x7bc>)
 80036be:	4013      	ands	r3, r2
 80036c0:	623b      	str	r3, [r7, #32]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	461a      	mov	r2, r3
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	441a      	add	r2, r3
 80036d0:	6a3b      	ldr	r3, [r7, #32]
 80036d2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80036d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036da:	6013      	str	r3, [r2, #0]
 80036dc:	e0f4      	b.n	80038c8 <HAL_PCD_EP_DB_Transmit+0x770>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80036de:	88fb      	ldrh	r3, [r7, #6]
 80036e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d117      	bne.n	8003718 <HAL_PCD_EP_DB_Transmit+0x5c0>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	461a      	mov	r2, r3
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	4413      	add	r3, r2
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	4b86      	ldr	r3, [pc, #536]	@ (8003914 <HAL_PCD_EP_DB_Transmit+0x7bc>)
 80036fa:	4013      	ands	r3, r2
 80036fc:	617b      	str	r3, [r7, #20]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	461a      	mov	r2, r3
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	441a      	add	r2, r3
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003712:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003716:	6013      	str	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800371e:	2b01      	cmp	r3, #1
 8003720:	f040 80d2 	bne.w	80038c8 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        ep->xfer_buff += TxPctSize;
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	695a      	ldr	r2, [r3, #20]
 8003728:	8bfb      	ldrh	r3, [r7, #30]
 800372a:	441a      	add	r2, r3
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	69da      	ldr	r2, [r3, #28]
 8003734:	8bfb      	ldrh	r3, [r7, #30]
 8003736:	441a      	add	r2, r3
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	6a1a      	ldr	r2, [r3, #32]
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	691b      	ldr	r3, [r3, #16]
 8003744:	429a      	cmp	r2, r3
 8003746:	d309      	bcc.n	800375c <HAL_PCD_EP_DB_Transmit+0x604>
        {
          len = ep->maxpacket;
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	691b      	ldr	r3, [r3, #16]
 800374c:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	6a1a      	ldr	r2, [r3, #32]
 8003752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003754:	1ad2      	subs	r2, r2, r3
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	621a      	str	r2, [r3, #32]
 800375a:	e014      	b.n	8003786 <HAL_PCD_EP_DB_Transmit+0x62e>
        }
        else if (ep->xfer_len_db == 0U)
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	6a1b      	ldr	r3, [r3, #32]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d106      	bne.n	8003772 <HAL_PCD_EP_DB_Transmit+0x61a>
        {
          len = TxPctSize;
 8003764:	8bfb      	ldrh	r3, [r7, #30]
 8003766:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003770:	e009      	b.n	8003786 <HAL_PCD_EP_DB_Transmit+0x62e>
        }
        else
        {
          len = ep->xfer_len_db;
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	6a1b      	ldr	r3, [r3, #32]
 8003776:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	2200      	movs	r2, #0
 800377c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	785b      	ldrb	r3, [r3, #1]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d16a      	bne.n	8003864 <HAL_PCD_EP_DB_Transmit+0x70c>
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	00db      	lsls	r3, r3, #3
 8003794:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003798:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800379c:	685a      	ldr	r2, [r3, #4]
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	00db      	lsls	r3, r3, #3
 80037a4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80037a8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80037ac:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80037b0:	605a      	str	r2, [r3, #4]
 80037b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d112      	bne.n	80037de <HAL_PCD_EP_DB_Transmit+0x686>
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	00db      	lsls	r3, r3, #3
 80037be:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80037c2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80037c6:	685a      	ldr	r2, [r3, #4]
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	00db      	lsls	r3, r3, #3
 80037ce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80037d2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80037d6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80037da:	605a      	str	r2, [r3, #4]
 80037dc:	e06a      	b.n	80038b4 <HAL_PCD_EP_DB_Transmit+0x75c>
 80037de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e0:	2b3e      	cmp	r3, #62	@ 0x3e
 80037e2:	d81e      	bhi.n	8003822 <HAL_PCD_EP_DB_Transmit+0x6ca>
 80037e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e6:	085b      	lsrs	r3, r3, #1
 80037e8:	61bb      	str	r3, [r7, #24]
 80037ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ec:	f003 0301 	and.w	r3, r3, #1
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d002      	beq.n	80037fa <HAL_PCD_EP_DB_Transmit+0x6a2>
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	3301      	adds	r3, #1
 80037f8:	61bb      	str	r3, [r7, #24]
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	00db      	lsls	r3, r3, #3
 8003800:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003804:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003808:	6859      	ldr	r1, [r3, #4]
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	069a      	lsls	r2, r3, #26
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	00db      	lsls	r3, r3, #3
 8003814:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003818:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800381c:	430a      	orrs	r2, r1
 800381e:	605a      	str	r2, [r3, #4]
 8003820:	e048      	b.n	80038b4 <HAL_PCD_EP_DB_Transmit+0x75c>
 8003822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003824:	095b      	lsrs	r3, r3, #5
 8003826:	61bb      	str	r3, [r7, #24]
 8003828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800382a:	f003 031f 	and.w	r3, r3, #31
 800382e:	2b00      	cmp	r3, #0
 8003830:	d102      	bne.n	8003838 <HAL_PCD_EP_DB_Transmit+0x6e0>
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	3b01      	subs	r3, #1
 8003836:	61bb      	str	r3, [r7, #24]
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	00db      	lsls	r3, r3, #3
 800383e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003842:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003846:	685a      	ldr	r2, [r3, #4]
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	069b      	lsls	r3, r3, #26
 800384c:	431a      	orrs	r2, r3
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	00db      	lsls	r3, r3, #3
 8003854:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003858:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800385c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003860:	605a      	str	r2, [r3, #4]
 8003862:	e027      	b.n	80038b4 <HAL_PCD_EP_DB_Transmit+0x75c>
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	785b      	ldrb	r3, [r3, #1]
 8003868:	2b01      	cmp	r3, #1
 800386a:	d123      	bne.n	80038b4 <HAL_PCD_EP_DB_Transmit+0x75c>
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	00db      	lsls	r3, r3, #3
 8003872:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003876:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800387a:	685a      	ldr	r2, [r3, #4]
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	00db      	lsls	r3, r3, #3
 8003882:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003886:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800388a:	b292      	uxth	r2, r2
 800388c:	605a      	str	r2, [r3, #4]
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	00db      	lsls	r3, r3, #3
 8003894:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003898:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800389c:	6859      	ldr	r1, [r3, #4]
 800389e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a0:	041a      	lsls	r2, r3, #16
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	00db      	lsls	r3, r3, #3
 80038a8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80038ac:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80038b0:	430a      	orrs	r2, r1
 80038b2:	605a      	str	r2, [r3, #4]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6818      	ldr	r0, [r3, #0]
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	6959      	ldr	r1, [r3, #20]
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	895a      	ldrh	r2, [r3, #10]
 80038c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	f004 f9a6 	bl	8007c14 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	461a      	mov	r2, r3
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	4413      	add	r3, r2
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	4b0f      	ldr	r3, [pc, #60]	@ (8003918 <HAL_PCD_EP_DB_Transmit+0x7c0>)
 80038da:	4013      	ands	r3, r2
 80038dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80038de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038e0:	f083 0310 	eor.w	r3, r3, #16
 80038e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80038e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038e8:	f083 0320 	eor.w	r3, r3, #32
 80038ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	461a      	mov	r2, r3
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	441a      	add	r2, r3
 80038fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003902:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003906:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3738      	adds	r7, #56	@ 0x38
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	07ff8f8f 	.word	0x07ff8f8f
 8003918:	07ff8fbf 	.word	0x07ff8fbf

0800391c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800391c:	b480      	push	{r7}
 800391e:	b087      	sub	sp, #28
 8003920:	af00      	add	r7, sp, #0
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	607b      	str	r3, [r7, #4]
 8003926:	460b      	mov	r3, r1
 8003928:	817b      	strh	r3, [r7, #10]
 800392a:	4613      	mov	r3, r2
 800392c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800392e:	897b      	ldrh	r3, [r7, #10]
 8003930:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003934:	b29b      	uxth	r3, r3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00c      	beq.n	8003954 <HAL_PCDEx_PMAConfig+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800393a:	897b      	ldrh	r3, [r7, #10]
 800393c:	f003 0207 	and.w	r2, r3, #7
 8003940:	4613      	mov	r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	4413      	add	r3, r2
 8003946:	00db      	lsls	r3, r3, #3
 8003948:	3310      	adds	r3, #16
 800394a:	68fa      	ldr	r2, [r7, #12]
 800394c:	4413      	add	r3, r2
 800394e:	3304      	adds	r3, #4
 8003950:	617b      	str	r3, [r7, #20]
 8003952:	e00a      	b.n	800396a <HAL_PCDEx_PMAConfig+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003954:	897a      	ldrh	r2, [r7, #10]
 8003956:	4613      	mov	r3, r2
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	4413      	add	r3, r2
 800395c:	00db      	lsls	r3, r3, #3
 800395e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003962:	68fa      	ldr	r2, [r7, #12]
 8003964:	4413      	add	r3, r2
 8003966:	3304      	adds	r3, #4
 8003968:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800396a:	893b      	ldrh	r3, [r7, #8]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d107      	bne.n	8003980 <HAL_PCDEx_PMAConfig+0x64>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	2200      	movs	r2, #0
 8003974:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	b29a      	uxth	r2, r3
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	80da      	strh	r2, [r3, #6]
 800397e:	e00b      	b.n	8003998 <HAL_PCDEx_PMAConfig+0x7c>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	2201      	movs	r2, #1
 8003984:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	b29a      	uxth	r2, r3
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	0c1b      	lsrs	r3, r3, #16
 8003992:	b29a      	uxth	r2, r3
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	371c      	adds	r7, #28
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr

080039a6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80039a6:	b480      	push	{r7}
 80039a8:	b085      	sub	sp, #20
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
  hpcd->LPM_State = LPM_L0;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039c8:	f043 0201 	orr.w	r2, r3, #1
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	655a      	str	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039d4:	f043 0202 	orr.w	r2, r3, #2
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	655a      	str	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3714      	adds	r7, #20
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr

080039ea <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80039ea:	b480      	push	{r7}
 80039ec:	b083      	sub	sp, #12
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
 80039f2:	460b      	mov	r3, r1
 80039f4:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80039f6:	bf00      	nop
 80039f8:	370c      	adds	r7, #12
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
	...

08003a04 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003a04:	b480      	push	{r7}
 8003a06:	af00      	add	r7, sp, #0
  SET_BIT(PWR->USBSCR, PWR_USBSCR_USB33SV);
 8003a08:	4b05      	ldr	r3, [pc, #20]	@ (8003a20 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003a0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a0c:	4a04      	ldr	r2, [pc, #16]	@ (8003a20 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003a0e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003a12:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003a14:	bf00      	nop
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	44020800 	.word	0x44020800

08003a24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b088      	sub	sp, #32
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d102      	bne.n	8003a38 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	f000 bc28 	b.w	8004288 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a38:	4b94      	ldr	r3, [pc, #592]	@ (8003c8c <HAL_RCC_OscConfig+0x268>)
 8003a3a:	69db      	ldr	r3, [r3, #28]
 8003a3c:	f003 0318 	and.w	r3, r3, #24
 8003a40:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8003a42:	4b92      	ldr	r3, [pc, #584]	@ (8003c8c <HAL_RCC_OscConfig+0x268>)
 8003a44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a46:	f003 0303 	and.w	r3, r3, #3
 8003a4a:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0310 	and.w	r3, r3, #16
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d05b      	beq.n	8003b10 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	2b08      	cmp	r3, #8
 8003a5c:	d005      	beq.n	8003a6a <HAL_RCC_OscConfig+0x46>
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	2b18      	cmp	r3, #24
 8003a62:	d114      	bne.n	8003a8e <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d111      	bne.n	8003a8e <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	69db      	ldr	r3, [r3, #28]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d102      	bne.n	8003a78 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	f000 bc08 	b.w	8004288 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8003a78:	4b84      	ldr	r3, [pc, #528]	@ (8003c8c <HAL_RCC_OscConfig+0x268>)
 8003a7a:	699b      	ldr	r3, [r3, #24]
 8003a7c:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a1b      	ldr	r3, [r3, #32]
 8003a84:	041b      	lsls	r3, r3, #16
 8003a86:	4981      	ldr	r1, [pc, #516]	@ (8003c8c <HAL_RCC_OscConfig+0x268>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8003a8c:	e040      	b.n	8003b10 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	69db      	ldr	r3, [r3, #28]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d023      	beq.n	8003ade <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003a96:	4b7d      	ldr	r3, [pc, #500]	@ (8003c8c <HAL_RCC_OscConfig+0x268>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a7c      	ldr	r2, [pc, #496]	@ (8003c8c <HAL_RCC_OscConfig+0x268>)
 8003a9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003aa0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa2:	f7fd f92d 	bl	8000d00 <HAL_GetTick>
 8003aa6:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003aa8:	e008      	b.n	8003abc <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8003aaa:	f7fd f929 	bl	8000d00 <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d901      	bls.n	8003abc <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e3e5      	b.n	8004288 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003abc:	4b73      	ldr	r3, [pc, #460]	@ (8003c8c <HAL_RCC_OscConfig+0x268>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d0f0      	beq.n	8003aaa <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8003ac8:	4b70      	ldr	r3, [pc, #448]	@ (8003c8c <HAL_RCC_OscConfig+0x268>)
 8003aca:	699b      	ldr	r3, [r3, #24]
 8003acc:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a1b      	ldr	r3, [r3, #32]
 8003ad4:	041b      	lsls	r3, r3, #16
 8003ad6:	496d      	ldr	r1, [pc, #436]	@ (8003c8c <HAL_RCC_OscConfig+0x268>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	618b      	str	r3, [r1, #24]
 8003adc:	e018      	b.n	8003b10 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003ade:	4b6b      	ldr	r3, [pc, #428]	@ (8003c8c <HAL_RCC_OscConfig+0x268>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a6a      	ldr	r2, [pc, #424]	@ (8003c8c <HAL_RCC_OscConfig+0x268>)
 8003ae4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ae8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aea:	f7fd f909 	bl	8000d00 <HAL_GetTick>
 8003aee:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003af0:	e008      	b.n	8003b04 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8003af2:	f7fd f905 	bl	8000d00 <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d901      	bls.n	8003b04 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e3c1      	b.n	8004288 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003b04:	4b61      	ldr	r3, [pc, #388]	@ (8003c8c <HAL_RCC_OscConfig+0x268>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d1f0      	bne.n	8003af2 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0301 	and.w	r3, r3, #1
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	f000 80a0 	beq.w	8003c5e <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	2b10      	cmp	r3, #16
 8003b22:	d005      	beq.n	8003b30 <HAL_RCC_OscConfig+0x10c>
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	2b18      	cmp	r3, #24
 8003b28:	d109      	bne.n	8003b3e <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	2b03      	cmp	r3, #3
 8003b2e:	d106      	bne.n	8003b3e <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	f040 8092 	bne.w	8003c5e <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e3a4      	b.n	8004288 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b46:	d106      	bne.n	8003b56 <HAL_RCC_OscConfig+0x132>
 8003b48:	4b50      	ldr	r3, [pc, #320]	@ (8003c8c <HAL_RCC_OscConfig+0x268>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a4f      	ldr	r2, [pc, #316]	@ (8003c8c <HAL_RCC_OscConfig+0x268>)
 8003b4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b52:	6013      	str	r3, [r2, #0]
 8003b54:	e058      	b.n	8003c08 <HAL_RCC_OscConfig+0x1e4>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d112      	bne.n	8003b84 <HAL_RCC_OscConfig+0x160>
 8003b5e:	4b4b      	ldr	r3, [pc, #300]	@ (8003c8c <HAL_RCC_OscConfig+0x268>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a4a      	ldr	r2, [pc, #296]	@ (8003c8c <HAL_RCC_OscConfig+0x268>)
 8003b64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b68:	6013      	str	r3, [r2, #0]
 8003b6a:	4b48      	ldr	r3, [pc, #288]	@ (8003c8c <HAL_RCC_OscConfig+0x268>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a47      	ldr	r2, [pc, #284]	@ (8003c8c <HAL_RCC_OscConfig+0x268>)
 8003b70:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003b74:	6013      	str	r3, [r2, #0]
 8003b76:	4b45      	ldr	r3, [pc, #276]	@ (8003c8c <HAL_RCC_OscConfig+0x268>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a44      	ldr	r2, [pc, #272]	@ (8003c8c <HAL_RCC_OscConfig+0x268>)
 8003b7c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b80:	6013      	str	r3, [r2, #0]
 8003b82:	e041      	b.n	8003c08 <HAL_RCC_OscConfig+0x1e4>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b8c:	d112      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x190>
 8003b8e:	4b3f      	ldr	r3, [pc, #252]	@ (8003c8c <HAL_RCC_OscConfig+0x268>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a3e      	ldr	r2, [pc, #248]	@ (8003c8c <HAL_RCC_OscConfig+0x268>)
 8003b94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b98:	6013      	str	r3, [r2, #0]
 8003b9a:	4b3c      	ldr	r3, [pc, #240]	@ (8003c8c <HAL_RCC_OscConfig+0x268>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a3b      	ldr	r2, [pc, #236]	@ (8003c8c <HAL_RCC_OscConfig+0x268>)
 8003ba0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003ba4:	6013      	str	r3, [r2, #0]
 8003ba6:	4b39      	ldr	r3, [pc, #228]	@ (8003c8c <HAL_RCC_OscConfig+0x268>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a38      	ldr	r2, [pc, #224]	@ (8003c8c <HAL_RCC_OscConfig+0x268>)
 8003bac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bb0:	6013      	str	r3, [r2, #0]
 8003bb2:	e029      	b.n	8003c08 <HAL_RCC_OscConfig+0x1e4>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8003bbc:	d112      	bne.n	8003be4 <HAL_RCC_OscConfig+0x1c0>
 8003bbe:	4b33      	ldr	r3, [pc, #204]	@ (8003c8c <HAL_RCC_OscConfig+0x268>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a32      	ldr	r2, [pc, #200]	@ (8003c8c <HAL_RCC_OscConfig+0x268>)
 8003bc4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003bc8:	6013      	str	r3, [r2, #0]
 8003bca:	4b30      	ldr	r3, [pc, #192]	@ (8003c8c <HAL_RCC_OscConfig+0x268>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a2f      	ldr	r2, [pc, #188]	@ (8003c8c <HAL_RCC_OscConfig+0x268>)
 8003bd0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003bd4:	6013      	str	r3, [r2, #0]
 8003bd6:	4b2d      	ldr	r3, [pc, #180]	@ (8003c8c <HAL_RCC_OscConfig+0x268>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a2c      	ldr	r2, [pc, #176]	@ (8003c8c <HAL_RCC_OscConfig+0x268>)
 8003bdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003be0:	6013      	str	r3, [r2, #0]
 8003be2:	e011      	b.n	8003c08 <HAL_RCC_OscConfig+0x1e4>
 8003be4:	4b29      	ldr	r3, [pc, #164]	@ (8003c8c <HAL_RCC_OscConfig+0x268>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a28      	ldr	r2, [pc, #160]	@ (8003c8c <HAL_RCC_OscConfig+0x268>)
 8003bea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bee:	6013      	str	r3, [r2, #0]
 8003bf0:	4b26      	ldr	r3, [pc, #152]	@ (8003c8c <HAL_RCC_OscConfig+0x268>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a25      	ldr	r2, [pc, #148]	@ (8003c8c <HAL_RCC_OscConfig+0x268>)
 8003bf6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003bfa:	6013      	str	r3, [r2, #0]
 8003bfc:	4b23      	ldr	r3, [pc, #140]	@ (8003c8c <HAL_RCC_OscConfig+0x268>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a22      	ldr	r2, [pc, #136]	@ (8003c8c <HAL_RCC_OscConfig+0x268>)
 8003c02:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003c06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d013      	beq.n	8003c38 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c10:	f7fd f876 	bl	8000d00 <HAL_GetTick>
 8003c14:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c16:	e008      	b.n	8003c2a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003c18:	f7fd f872 	bl	8000d00 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b64      	cmp	r3, #100	@ 0x64
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e32e      	b.n	8004288 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c2a:	4b18      	ldr	r3, [pc, #96]	@ (8003c8c <HAL_RCC_OscConfig+0x268>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d0f0      	beq.n	8003c18 <HAL_RCC_OscConfig+0x1f4>
 8003c36:	e012      	b.n	8003c5e <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c38:	f7fd f862 	bl	8000d00 <HAL_GetTick>
 8003c3c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c3e:	e008      	b.n	8003c52 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003c40:	f7fd f85e 	bl	8000d00 <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	2b64      	cmp	r3, #100	@ 0x64
 8003c4c:	d901      	bls.n	8003c52 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e31a      	b.n	8004288 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c52:	4b0e      	ldr	r3, [pc, #56]	@ (8003c8c <HAL_RCC_OscConfig+0x268>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d1f0      	bne.n	8003c40 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0302 	and.w	r3, r3, #2
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	f000 809a 	beq.w	8003da0 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d005      	beq.n	8003c7e <HAL_RCC_OscConfig+0x25a>
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	2b18      	cmp	r3, #24
 8003c76:	d149      	bne.n	8003d0c <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d146      	bne.n	8003d0c <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d104      	bne.n	8003c90 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e2fe      	b.n	8004288 <HAL_RCC_OscConfig+0x864>
 8003c8a:	bf00      	nop
 8003c8c:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d11c      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8003c96:	4b9a      	ldr	r3, [pc, #616]	@ (8003f00 <HAL_RCC_OscConfig+0x4dc>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0218 	and.w	r2, r3, #24
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d014      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8003ca6:	4b96      	ldr	r3, [pc, #600]	@ (8003f00 <HAL_RCC_OscConfig+0x4dc>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f023 0218 	bic.w	r2, r3, #24
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	4993      	ldr	r1, [pc, #588]	@ (8003f00 <HAL_RCC_OscConfig+0x4dc>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8003cb8:	f000 fdd0 	bl	800485c <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003cbc:	4b91      	ldr	r3, [pc, #580]	@ (8003f04 <HAL_RCC_OscConfig+0x4e0>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f7fc ff93 	bl	8000bec <HAL_InitTick>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d001      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e2db      	b.n	8004288 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd0:	f7fd f816 	bl	8000d00 <HAL_GetTick>
 8003cd4:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cd6:	e008      	b.n	8003cea <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003cd8:	f7fd f812 	bl	8000d00 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d901      	bls.n	8003cea <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e2ce      	b.n	8004288 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cea:	4b85      	ldr	r3, [pc, #532]	@ (8003f00 <HAL_RCC_OscConfig+0x4dc>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d0f0      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8003cf6:	4b82      	ldr	r3, [pc, #520]	@ (8003f00 <HAL_RCC_OscConfig+0x4dc>)
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	041b      	lsls	r3, r3, #16
 8003d04:	497e      	ldr	r1, [pc, #504]	@ (8003f00 <HAL_RCC_OscConfig+0x4dc>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8003d0a:	e049      	b.n	8003da0 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d02c      	beq.n	8003d6e <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8003d14:	4b7a      	ldr	r3, [pc, #488]	@ (8003f00 <HAL_RCC_OscConfig+0x4dc>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f023 0218 	bic.w	r2, r3, #24
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	4977      	ldr	r1, [pc, #476]	@ (8003f00 <HAL_RCC_OscConfig+0x4dc>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8003d26:	4b76      	ldr	r3, [pc, #472]	@ (8003f00 <HAL_RCC_OscConfig+0x4dc>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a75      	ldr	r2, [pc, #468]	@ (8003f00 <HAL_RCC_OscConfig+0x4dc>)
 8003d2c:	f043 0301 	orr.w	r3, r3, #1
 8003d30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d32:	f7fc ffe5 	bl	8000d00 <HAL_GetTick>
 8003d36:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d38:	e008      	b.n	8003d4c <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003d3a:	f7fc ffe1 	bl	8000d00 <HAL_GetTick>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d901      	bls.n	8003d4c <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	e29d      	b.n	8004288 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d4c:	4b6c      	ldr	r3, [pc, #432]	@ (8003f00 <HAL_RCC_OscConfig+0x4dc>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0302 	and.w	r3, r3, #2
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d0f0      	beq.n	8003d3a <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8003d58:	4b69      	ldr	r3, [pc, #420]	@ (8003f00 <HAL_RCC_OscConfig+0x4dc>)
 8003d5a:	691b      	ldr	r3, [r3, #16]
 8003d5c:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	695b      	ldr	r3, [r3, #20]
 8003d64:	041b      	lsls	r3, r3, #16
 8003d66:	4966      	ldr	r1, [pc, #408]	@ (8003f00 <HAL_RCC_OscConfig+0x4dc>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	610b      	str	r3, [r1, #16]
 8003d6c:	e018      	b.n	8003da0 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d6e:	4b64      	ldr	r3, [pc, #400]	@ (8003f00 <HAL_RCC_OscConfig+0x4dc>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a63      	ldr	r2, [pc, #396]	@ (8003f00 <HAL_RCC_OscConfig+0x4dc>)
 8003d74:	f023 0301 	bic.w	r3, r3, #1
 8003d78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d7a:	f7fc ffc1 	bl	8000d00 <HAL_GetTick>
 8003d7e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d80:	e008      	b.n	8003d94 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003d82:	f7fc ffbd 	bl	8000d00 <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d901      	bls.n	8003d94 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e279      	b.n	8004288 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d94:	4b5a      	ldr	r3, [pc, #360]	@ (8003f00 <HAL_RCC_OscConfig+0x4dc>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0302 	and.w	r3, r3, #2
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d1f0      	bne.n	8003d82 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0308 	and.w	r3, r3, #8
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d03c      	beq.n	8003e26 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	699b      	ldr	r3, [r3, #24]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d01c      	beq.n	8003dee <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003db4:	4b52      	ldr	r3, [pc, #328]	@ (8003f00 <HAL_RCC_OscConfig+0x4dc>)
 8003db6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003dba:	4a51      	ldr	r2, [pc, #324]	@ (8003f00 <HAL_RCC_OscConfig+0x4dc>)
 8003dbc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003dc0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dc4:	f7fc ff9c 	bl	8000d00 <HAL_GetTick>
 8003dc8:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003dca:	e008      	b.n	8003dde <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003dcc:	f7fc ff98 	bl	8000d00 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d901      	bls.n	8003dde <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e254      	b.n	8004288 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003dde:	4b48      	ldr	r3, [pc, #288]	@ (8003f00 <HAL_RCC_OscConfig+0x4dc>)
 8003de0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003de4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d0ef      	beq.n	8003dcc <HAL_RCC_OscConfig+0x3a8>
 8003dec:	e01b      	b.n	8003e26 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dee:	4b44      	ldr	r3, [pc, #272]	@ (8003f00 <HAL_RCC_OscConfig+0x4dc>)
 8003df0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003df4:	4a42      	ldr	r2, [pc, #264]	@ (8003f00 <HAL_RCC_OscConfig+0x4dc>)
 8003df6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003dfa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dfe:	f7fc ff7f 	bl	8000d00 <HAL_GetTick>
 8003e02:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003e04:	e008      	b.n	8003e18 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003e06:	f7fc ff7b 	bl	8000d00 <HAL_GetTick>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d901      	bls.n	8003e18 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e237      	b.n	8004288 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003e18:	4b39      	ldr	r3, [pc, #228]	@ (8003f00 <HAL_RCC_OscConfig+0x4dc>)
 8003e1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e1e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d1ef      	bne.n	8003e06 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0304 	and.w	r3, r3, #4
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	f000 80d2 	beq.w	8003fd8 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003e34:	4b34      	ldr	r3, [pc, #208]	@ (8003f08 <HAL_RCC_OscConfig+0x4e4>)
 8003e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e38:	f003 0301 	and.w	r3, r3, #1
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d118      	bne.n	8003e72 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8003e40:	4b31      	ldr	r3, [pc, #196]	@ (8003f08 <HAL_RCC_OscConfig+0x4e4>)
 8003e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e44:	4a30      	ldr	r2, [pc, #192]	@ (8003f08 <HAL_RCC_OscConfig+0x4e4>)
 8003e46:	f043 0301 	orr.w	r3, r3, #1
 8003e4a:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e4c:	f7fc ff58 	bl	8000d00 <HAL_GetTick>
 8003e50:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003e52:	e008      	b.n	8003e66 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e54:	f7fc ff54 	bl	8000d00 <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e210      	b.n	8004288 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003e66:	4b28      	ldr	r3, [pc, #160]	@ (8003f08 <HAL_RCC_OscConfig+0x4e4>)
 8003e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e6a:	f003 0301 	and.w	r3, r3, #1
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d0f0      	beq.n	8003e54 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d108      	bne.n	8003e8c <HAL_RCC_OscConfig+0x468>
 8003e7a:	4b21      	ldr	r3, [pc, #132]	@ (8003f00 <HAL_RCC_OscConfig+0x4dc>)
 8003e7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e80:	4a1f      	ldr	r2, [pc, #124]	@ (8003f00 <HAL_RCC_OscConfig+0x4dc>)
 8003e82:	f043 0301 	orr.w	r3, r3, #1
 8003e86:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003e8a:	e074      	b.n	8003f76 <HAL_RCC_OscConfig+0x552>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d118      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x4a2>
 8003e94:	4b1a      	ldr	r3, [pc, #104]	@ (8003f00 <HAL_RCC_OscConfig+0x4dc>)
 8003e96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e9a:	4a19      	ldr	r2, [pc, #100]	@ (8003f00 <HAL_RCC_OscConfig+0x4dc>)
 8003e9c:	f023 0301 	bic.w	r3, r3, #1
 8003ea0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003ea4:	4b16      	ldr	r3, [pc, #88]	@ (8003f00 <HAL_RCC_OscConfig+0x4dc>)
 8003ea6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003eaa:	4a15      	ldr	r2, [pc, #84]	@ (8003f00 <HAL_RCC_OscConfig+0x4dc>)
 8003eac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003eb0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003eb4:	4b12      	ldr	r3, [pc, #72]	@ (8003f00 <HAL_RCC_OscConfig+0x4dc>)
 8003eb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003eba:	4a11      	ldr	r2, [pc, #68]	@ (8003f00 <HAL_RCC_OscConfig+0x4dc>)
 8003ebc:	f023 0304 	bic.w	r3, r3, #4
 8003ec0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003ec4:	e057      	b.n	8003f76 <HAL_RCC_OscConfig+0x552>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	2b05      	cmp	r3, #5
 8003ecc:	d11e      	bne.n	8003f0c <HAL_RCC_OscConfig+0x4e8>
 8003ece:	4b0c      	ldr	r3, [pc, #48]	@ (8003f00 <HAL_RCC_OscConfig+0x4dc>)
 8003ed0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ed4:	4a0a      	ldr	r2, [pc, #40]	@ (8003f00 <HAL_RCC_OscConfig+0x4dc>)
 8003ed6:	f043 0304 	orr.w	r3, r3, #4
 8003eda:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003ede:	4b08      	ldr	r3, [pc, #32]	@ (8003f00 <HAL_RCC_OscConfig+0x4dc>)
 8003ee0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ee4:	4a06      	ldr	r2, [pc, #24]	@ (8003f00 <HAL_RCC_OscConfig+0x4dc>)
 8003ee6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003eea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003eee:	4b04      	ldr	r3, [pc, #16]	@ (8003f00 <HAL_RCC_OscConfig+0x4dc>)
 8003ef0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ef4:	4a02      	ldr	r2, [pc, #8]	@ (8003f00 <HAL_RCC_OscConfig+0x4dc>)
 8003ef6:	f043 0301 	orr.w	r3, r3, #1
 8003efa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003efe:	e03a      	b.n	8003f76 <HAL_RCC_OscConfig+0x552>
 8003f00:	44020c00 	.word	0x44020c00
 8003f04:	20000004 	.word	0x20000004
 8003f08:	44020800 	.word	0x44020800
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	2b85      	cmp	r3, #133	@ 0x85
 8003f12:	d118      	bne.n	8003f46 <HAL_RCC_OscConfig+0x522>
 8003f14:	4ba2      	ldr	r3, [pc, #648]	@ (80041a0 <HAL_RCC_OscConfig+0x77c>)
 8003f16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f1a:	4aa1      	ldr	r2, [pc, #644]	@ (80041a0 <HAL_RCC_OscConfig+0x77c>)
 8003f1c:	f043 0304 	orr.w	r3, r3, #4
 8003f20:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003f24:	4b9e      	ldr	r3, [pc, #632]	@ (80041a0 <HAL_RCC_OscConfig+0x77c>)
 8003f26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f2a:	4a9d      	ldr	r2, [pc, #628]	@ (80041a0 <HAL_RCC_OscConfig+0x77c>)
 8003f2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f30:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003f34:	4b9a      	ldr	r3, [pc, #616]	@ (80041a0 <HAL_RCC_OscConfig+0x77c>)
 8003f36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f3a:	4a99      	ldr	r2, [pc, #612]	@ (80041a0 <HAL_RCC_OscConfig+0x77c>)
 8003f3c:	f043 0301 	orr.w	r3, r3, #1
 8003f40:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003f44:	e017      	b.n	8003f76 <HAL_RCC_OscConfig+0x552>
 8003f46:	4b96      	ldr	r3, [pc, #600]	@ (80041a0 <HAL_RCC_OscConfig+0x77c>)
 8003f48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f4c:	4a94      	ldr	r2, [pc, #592]	@ (80041a0 <HAL_RCC_OscConfig+0x77c>)
 8003f4e:	f023 0301 	bic.w	r3, r3, #1
 8003f52:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003f56:	4b92      	ldr	r3, [pc, #584]	@ (80041a0 <HAL_RCC_OscConfig+0x77c>)
 8003f58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f5c:	4a90      	ldr	r2, [pc, #576]	@ (80041a0 <HAL_RCC_OscConfig+0x77c>)
 8003f5e:	f023 0304 	bic.w	r3, r3, #4
 8003f62:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003f66:	4b8e      	ldr	r3, [pc, #568]	@ (80041a0 <HAL_RCC_OscConfig+0x77c>)
 8003f68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f6c:	4a8c      	ldr	r2, [pc, #560]	@ (80041a0 <HAL_RCC_OscConfig+0x77c>)
 8003f6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f72:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d016      	beq.n	8003fac <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f7e:	f7fc febf 	bl	8000d00 <HAL_GetTick>
 8003f82:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f84:	e00a      	b.n	8003f9c <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f86:	f7fc febb 	bl	8000d00 <HAL_GetTick>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d901      	bls.n	8003f9c <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	e175      	b.n	8004288 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f9c:	4b80      	ldr	r3, [pc, #512]	@ (80041a0 <HAL_RCC_OscConfig+0x77c>)
 8003f9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003fa2:	f003 0302 	and.w	r3, r3, #2
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d0ed      	beq.n	8003f86 <HAL_RCC_OscConfig+0x562>
 8003faa:	e015      	b.n	8003fd8 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fac:	f7fc fea8 	bl	8000d00 <HAL_GetTick>
 8003fb0:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003fb2:	e00a      	b.n	8003fca <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fb4:	f7fc fea4 	bl	8000d00 <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d901      	bls.n	8003fca <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e15e      	b.n	8004288 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003fca:	4b75      	ldr	r3, [pc, #468]	@ (80041a0 <HAL_RCC_OscConfig+0x77c>)
 8003fcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003fd0:	f003 0302 	and.w	r3, r3, #2
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d1ed      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0320 	and.w	r3, r3, #32
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d036      	beq.n	8004052 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d019      	beq.n	8004020 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003fec:	4b6c      	ldr	r3, [pc, #432]	@ (80041a0 <HAL_RCC_OscConfig+0x77c>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a6b      	ldr	r2, [pc, #428]	@ (80041a0 <HAL_RCC_OscConfig+0x77c>)
 8003ff2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003ff6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ff8:	f7fc fe82 	bl	8000d00 <HAL_GetTick>
 8003ffc:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003ffe:	e008      	b.n	8004012 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8004000:	f7fc fe7e 	bl	8000d00 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	2b02      	cmp	r3, #2
 800400c:	d901      	bls.n	8004012 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e13a      	b.n	8004288 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004012:	4b63      	ldr	r3, [pc, #396]	@ (80041a0 <HAL_RCC_OscConfig+0x77c>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d0f0      	beq.n	8004000 <HAL_RCC_OscConfig+0x5dc>
 800401e:	e018      	b.n	8004052 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004020:	4b5f      	ldr	r3, [pc, #380]	@ (80041a0 <HAL_RCC_OscConfig+0x77c>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a5e      	ldr	r2, [pc, #376]	@ (80041a0 <HAL_RCC_OscConfig+0x77c>)
 8004026:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800402a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800402c:	f7fc fe68 	bl	8000d00 <HAL_GetTick>
 8004030:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004032:	e008      	b.n	8004046 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8004034:	f7fc fe64 	bl	8000d00 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	2b02      	cmp	r3, #2
 8004040:	d901      	bls.n	8004046 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e120      	b.n	8004288 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004046:	4b56      	ldr	r3, [pc, #344]	@ (80041a0 <HAL_RCC_OscConfig+0x77c>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1f0      	bne.n	8004034 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004056:	2b00      	cmp	r3, #0
 8004058:	f000 8115 	beq.w	8004286 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	2b18      	cmp	r3, #24
 8004060:	f000 80af 	beq.w	80041c2 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004068:	2b02      	cmp	r3, #2
 800406a:	f040 8086 	bne.w	800417a <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800406e:	4b4c      	ldr	r3, [pc, #304]	@ (80041a0 <HAL_RCC_OscConfig+0x77c>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a4b      	ldr	r2, [pc, #300]	@ (80041a0 <HAL_RCC_OscConfig+0x77c>)
 8004074:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004078:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800407a:	f7fc fe41 	bl	8000d00 <HAL_GetTick>
 800407e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004080:	e008      	b.n	8004094 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8004082:	f7fc fe3d 	bl	8000d00 <HAL_GetTick>
 8004086:	4602      	mov	r2, r0
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	2b02      	cmp	r3, #2
 800408e:	d901      	bls.n	8004094 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e0f9      	b.n	8004288 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004094:	4b42      	ldr	r3, [pc, #264]	@ (80041a0 <HAL_RCC_OscConfig+0x77c>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1f0      	bne.n	8004082 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 80040a0:	4b3f      	ldr	r3, [pc, #252]	@ (80041a0 <HAL_RCC_OscConfig+0x77c>)
 80040a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040a4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80040a8:	f023 0303 	bic.w	r3, r3, #3
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80040b4:	0212      	lsls	r2, r2, #8
 80040b6:	430a      	orrs	r2, r1
 80040b8:	4939      	ldr	r1, [pc, #228]	@ (80041a0 <HAL_RCC_OscConfig+0x77c>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	628b      	str	r3, [r1, #40]	@ 0x28
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040c2:	3b01      	subs	r3, #1
 80040c4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040cc:	3b01      	subs	r3, #1
 80040ce:	025b      	lsls	r3, r3, #9
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	431a      	orrs	r2, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040d8:	3b01      	subs	r3, #1
 80040da:	041b      	lsls	r3, r3, #16
 80040dc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80040e0:	431a      	orrs	r2, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e6:	3b01      	subs	r3, #1
 80040e8:	061b      	lsls	r3, r3, #24
 80040ea:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80040ee:	492c      	ldr	r1, [pc, #176]	@ (80041a0 <HAL_RCC_OscConfig+0x77c>)
 80040f0:	4313      	orrs	r3, r2
 80040f2:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80040f4:	4b2a      	ldr	r3, [pc, #168]	@ (80041a0 <HAL_RCC_OscConfig+0x77c>)
 80040f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040f8:	4a29      	ldr	r2, [pc, #164]	@ (80041a0 <HAL_RCC_OscConfig+0x77c>)
 80040fa:	f023 0310 	bic.w	r3, r3, #16
 80040fe:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004104:	4a26      	ldr	r2, [pc, #152]	@ (80041a0 <HAL_RCC_OscConfig+0x77c>)
 8004106:	00db      	lsls	r3, r3, #3
 8004108:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800410a:	4b25      	ldr	r3, [pc, #148]	@ (80041a0 <HAL_RCC_OscConfig+0x77c>)
 800410c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800410e:	4a24      	ldr	r2, [pc, #144]	@ (80041a0 <HAL_RCC_OscConfig+0x77c>)
 8004110:	f043 0310 	orr.w	r3, r3, #16
 8004114:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8004116:	4b22      	ldr	r3, [pc, #136]	@ (80041a0 <HAL_RCC_OscConfig+0x77c>)
 8004118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800411a:	f023 020c 	bic.w	r2, r3, #12
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004122:	491f      	ldr	r1, [pc, #124]	@ (80041a0 <HAL_RCC_OscConfig+0x77c>)
 8004124:	4313      	orrs	r3, r2
 8004126:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8004128:	4b1d      	ldr	r3, [pc, #116]	@ (80041a0 <HAL_RCC_OscConfig+0x77c>)
 800412a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800412c:	f023 0220 	bic.w	r2, r3, #32
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004134:	491a      	ldr	r1, [pc, #104]	@ (80041a0 <HAL_RCC_OscConfig+0x77c>)
 8004136:	4313      	orrs	r3, r2
 8004138:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 800413a:	4b19      	ldr	r3, [pc, #100]	@ (80041a0 <HAL_RCC_OscConfig+0x77c>)
 800413c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800413e:	4a18      	ldr	r2, [pc, #96]	@ (80041a0 <HAL_RCC_OscConfig+0x77c>)
 8004140:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004144:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8004146:	4b16      	ldr	r3, [pc, #88]	@ (80041a0 <HAL_RCC_OscConfig+0x77c>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a15      	ldr	r2, [pc, #84]	@ (80041a0 <HAL_RCC_OscConfig+0x77c>)
 800414c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004150:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004152:	f7fc fdd5 	bl	8000d00 <HAL_GetTick>
 8004156:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004158:	e008      	b.n	800416c <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800415a:	f7fc fdd1 	bl	8000d00 <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	2b02      	cmp	r3, #2
 8004166:	d901      	bls.n	800416c <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e08d      	b.n	8004288 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800416c:	4b0c      	ldr	r3, [pc, #48]	@ (80041a0 <HAL_RCC_OscConfig+0x77c>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d0f0      	beq.n	800415a <HAL_RCC_OscConfig+0x736>
 8004178:	e085      	b.n	8004286 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800417a:	4b09      	ldr	r3, [pc, #36]	@ (80041a0 <HAL_RCC_OscConfig+0x77c>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a08      	ldr	r2, [pc, #32]	@ (80041a0 <HAL_RCC_OscConfig+0x77c>)
 8004180:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004184:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004186:	f7fc fdbb 	bl	8000d00 <HAL_GetTick>
 800418a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800418c:	e00a      	b.n	80041a4 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800418e:	f7fc fdb7 	bl	8000d00 <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	2b02      	cmp	r3, #2
 800419a:	d903      	bls.n	80041a4 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e073      	b.n	8004288 <HAL_RCC_OscConfig+0x864>
 80041a0:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80041a4:	4b3a      	ldr	r3, [pc, #232]	@ (8004290 <HAL_RCC_OscConfig+0x86c>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d1ee      	bne.n	800418e <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80041b0:	4b37      	ldr	r3, [pc, #220]	@ (8004290 <HAL_RCC_OscConfig+0x86c>)
 80041b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041b4:	4a36      	ldr	r2, [pc, #216]	@ (8004290 <HAL_RCC_OscConfig+0x86c>)
 80041b6:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80041ba:	f023 0303 	bic.w	r3, r3, #3
 80041be:	6293      	str	r3, [r2, #40]	@ 0x28
 80041c0:	e061      	b.n	8004286 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80041c2:	4b33      	ldr	r3, [pc, #204]	@ (8004290 <HAL_RCC_OscConfig+0x86c>)
 80041c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041c6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80041c8:	4b31      	ldr	r3, [pc, #196]	@ (8004290 <HAL_RCC_OscConfig+0x86c>)
 80041ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041cc:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d031      	beq.n	800423a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	f003 0203 	and.w	r2, r3, #3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d12a      	bne.n	800423a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	0a1b      	lsrs	r3, r3, #8
 80041e8:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d122      	bne.n	800423a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041fe:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8004200:	429a      	cmp	r2, r3
 8004202:	d11a      	bne.n	800423a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	0a5b      	lsrs	r3, r3, #9
 8004208:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004210:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8004212:	429a      	cmp	r2, r3
 8004214:	d111      	bne.n	800423a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	0c1b      	lsrs	r3, r3, #16
 800421a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004222:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8004224:	429a      	cmp	r2, r3
 8004226:	d108      	bne.n	800423a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	0e1b      	lsrs	r3, r3, #24
 800422c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004234:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8004236:	429a      	cmp	r2, r3
 8004238:	d001      	beq.n	800423e <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e024      	b.n	8004288 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800423e:	4b14      	ldr	r3, [pc, #80]	@ (8004290 <HAL_RCC_OscConfig+0x86c>)
 8004240:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004242:	08db      	lsrs	r3, r3, #3
 8004244:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800424c:	429a      	cmp	r2, r3
 800424e:	d01a      	beq.n	8004286 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8004250:	4b0f      	ldr	r3, [pc, #60]	@ (8004290 <HAL_RCC_OscConfig+0x86c>)
 8004252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004254:	4a0e      	ldr	r2, [pc, #56]	@ (8004290 <HAL_RCC_OscConfig+0x86c>)
 8004256:	f023 0310 	bic.w	r3, r3, #16
 800425a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800425c:	f7fc fd50 	bl	8000d00 <HAL_GetTick>
 8004260:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8004262:	bf00      	nop
 8004264:	f7fc fd4c 	bl	8000d00 <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	4293      	cmp	r3, r2
 800426e:	d0f9      	beq.n	8004264 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004274:	4a06      	ldr	r2, [pc, #24]	@ (8004290 <HAL_RCC_OscConfig+0x86c>)
 8004276:	00db      	lsls	r3, r3, #3
 8004278:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800427a:	4b05      	ldr	r3, [pc, #20]	@ (8004290 <HAL_RCC_OscConfig+0x86c>)
 800427c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800427e:	4a04      	ldr	r2, [pc, #16]	@ (8004290 <HAL_RCC_OscConfig+0x86c>)
 8004280:	f043 0310 	orr.w	r3, r3, #16
 8004284:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8004286:	2300      	movs	r3, #0
}
 8004288:	4618      	mov	r0, r3
 800428a:	3720      	adds	r7, #32
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	44020c00 	.word	0x44020c00

08004294 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d101      	bne.n	80042a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e19e      	b.n	80045e6 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042a8:	4b83      	ldr	r3, [pc, #524]	@ (80044b8 <HAL_RCC_ClockConfig+0x224>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 030f 	and.w	r3, r3, #15
 80042b0:	683a      	ldr	r2, [r7, #0]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d910      	bls.n	80042d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042b6:	4b80      	ldr	r3, [pc, #512]	@ (80044b8 <HAL_RCC_ClockConfig+0x224>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f023 020f 	bic.w	r2, r3, #15
 80042be:	497e      	ldr	r1, [pc, #504]	@ (80044b8 <HAL_RCC_ClockConfig+0x224>)
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042c6:	4b7c      	ldr	r3, [pc, #496]	@ (80044b8 <HAL_RCC_ClockConfig+0x224>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 030f 	and.w	r3, r3, #15
 80042ce:	683a      	ldr	r2, [r7, #0]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d001      	beq.n	80042d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e186      	b.n	80045e6 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0310 	and.w	r3, r3, #16
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d012      	beq.n	800430a <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	695a      	ldr	r2, [r3, #20]
 80042e8:	4b74      	ldr	r3, [pc, #464]	@ (80044bc <HAL_RCC_ClockConfig+0x228>)
 80042ea:	6a1b      	ldr	r3, [r3, #32]
 80042ec:	0a1b      	lsrs	r3, r3, #8
 80042ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d909      	bls.n	800430a <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80042f6:	4b71      	ldr	r3, [pc, #452]	@ (80044bc <HAL_RCC_ClockConfig+0x228>)
 80042f8:	6a1b      	ldr	r3, [r3, #32]
 80042fa:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	021b      	lsls	r3, r3, #8
 8004304:	496d      	ldr	r1, [pc, #436]	@ (80044bc <HAL_RCC_ClockConfig+0x228>)
 8004306:	4313      	orrs	r3, r2
 8004308:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 0308 	and.w	r3, r3, #8
 8004312:	2b00      	cmp	r3, #0
 8004314:	d012      	beq.n	800433c <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	691a      	ldr	r2, [r3, #16]
 800431a:	4b68      	ldr	r3, [pc, #416]	@ (80044bc <HAL_RCC_ClockConfig+0x228>)
 800431c:	6a1b      	ldr	r3, [r3, #32]
 800431e:	091b      	lsrs	r3, r3, #4
 8004320:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004324:	429a      	cmp	r2, r3
 8004326:	d909      	bls.n	800433c <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8004328:	4b64      	ldr	r3, [pc, #400]	@ (80044bc <HAL_RCC_ClockConfig+0x228>)
 800432a:	6a1b      	ldr	r3, [r3, #32]
 800432c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	691b      	ldr	r3, [r3, #16]
 8004334:	011b      	lsls	r3, r3, #4
 8004336:	4961      	ldr	r1, [pc, #388]	@ (80044bc <HAL_RCC_ClockConfig+0x228>)
 8004338:	4313      	orrs	r3, r2
 800433a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0304 	and.w	r3, r3, #4
 8004344:	2b00      	cmp	r3, #0
 8004346:	d010      	beq.n	800436a <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	68da      	ldr	r2, [r3, #12]
 800434c:	4b5b      	ldr	r3, [pc, #364]	@ (80044bc <HAL_RCC_ClockConfig+0x228>)
 800434e:	6a1b      	ldr	r3, [r3, #32]
 8004350:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004354:	429a      	cmp	r2, r3
 8004356:	d908      	bls.n	800436a <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8004358:	4b58      	ldr	r3, [pc, #352]	@ (80044bc <HAL_RCC_ClockConfig+0x228>)
 800435a:	6a1b      	ldr	r3, [r3, #32]
 800435c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	4955      	ldr	r1, [pc, #340]	@ (80044bc <HAL_RCC_ClockConfig+0x228>)
 8004366:	4313      	orrs	r3, r2
 8004368:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0302 	and.w	r3, r3, #2
 8004372:	2b00      	cmp	r3, #0
 8004374:	d010      	beq.n	8004398 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	689a      	ldr	r2, [r3, #8]
 800437a:	4b50      	ldr	r3, [pc, #320]	@ (80044bc <HAL_RCC_ClockConfig+0x228>)
 800437c:	6a1b      	ldr	r3, [r3, #32]
 800437e:	f003 030f 	and.w	r3, r3, #15
 8004382:	429a      	cmp	r2, r3
 8004384:	d908      	bls.n	8004398 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8004386:	4b4d      	ldr	r3, [pc, #308]	@ (80044bc <HAL_RCC_ClockConfig+0x228>)
 8004388:	6a1b      	ldr	r3, [r3, #32]
 800438a:	f023 020f 	bic.w	r2, r3, #15
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	494a      	ldr	r1, [pc, #296]	@ (80044bc <HAL_RCC_ClockConfig+0x228>)
 8004394:	4313      	orrs	r3, r2
 8004396:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0301 	and.w	r3, r3, #1
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	f000 8093 	beq.w	80044cc <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	2b03      	cmp	r3, #3
 80043ac:	d107      	bne.n	80043be <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80043ae:	4b43      	ldr	r3, [pc, #268]	@ (80044bc <HAL_RCC_ClockConfig+0x228>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d121      	bne.n	80043fe <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e113      	b.n	80045e6 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	2b02      	cmp	r3, #2
 80043c4:	d107      	bne.n	80043d6 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043c6:	4b3d      	ldr	r3, [pc, #244]	@ (80044bc <HAL_RCC_ClockConfig+0x228>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d115      	bne.n	80043fe <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e107      	b.n	80045e6 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d107      	bne.n	80043ee <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80043de:	4b37      	ldr	r3, [pc, #220]	@ (80044bc <HAL_RCC_ClockConfig+0x228>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d109      	bne.n	80043fe <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e0fb      	b.n	80045e6 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043ee:	4b33      	ldr	r3, [pc, #204]	@ (80044bc <HAL_RCC_ClockConfig+0x228>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0302 	and.w	r3, r3, #2
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d101      	bne.n	80043fe <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e0f3      	b.n	80045e6 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 80043fe:	4b2f      	ldr	r3, [pc, #188]	@ (80044bc <HAL_RCC_ClockConfig+0x228>)
 8004400:	69db      	ldr	r3, [r3, #28]
 8004402:	f023 0203 	bic.w	r2, r3, #3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	492c      	ldr	r1, [pc, #176]	@ (80044bc <HAL_RCC_ClockConfig+0x228>)
 800440c:	4313      	orrs	r3, r2
 800440e:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004410:	f7fc fc76 	bl	8000d00 <HAL_GetTick>
 8004414:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	2b03      	cmp	r3, #3
 800441c:	d112      	bne.n	8004444 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800441e:	e00a      	b.n	8004436 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004420:	f7fc fc6e 	bl	8000d00 <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800442e:	4293      	cmp	r3, r2
 8004430:	d901      	bls.n	8004436 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e0d7      	b.n	80045e6 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004436:	4b21      	ldr	r3, [pc, #132]	@ (80044bc <HAL_RCC_ClockConfig+0x228>)
 8004438:	69db      	ldr	r3, [r3, #28]
 800443a:	f003 0318 	and.w	r3, r3, #24
 800443e:	2b18      	cmp	r3, #24
 8004440:	d1ee      	bne.n	8004420 <HAL_RCC_ClockConfig+0x18c>
 8004442:	e043      	b.n	80044cc <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	2b02      	cmp	r3, #2
 800444a:	d112      	bne.n	8004472 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800444c:	e00a      	b.n	8004464 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800444e:	f7fc fc57 	bl	8000d00 <HAL_GetTick>
 8004452:	4602      	mov	r2, r0
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	f241 3288 	movw	r2, #5000	@ 0x1388
 800445c:	4293      	cmp	r3, r2
 800445e:	d901      	bls.n	8004464 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	e0c0      	b.n	80045e6 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004464:	4b15      	ldr	r3, [pc, #84]	@ (80044bc <HAL_RCC_ClockConfig+0x228>)
 8004466:	69db      	ldr	r3, [r3, #28]
 8004468:	f003 0318 	and.w	r3, r3, #24
 800446c:	2b10      	cmp	r3, #16
 800446e:	d1ee      	bne.n	800444e <HAL_RCC_ClockConfig+0x1ba>
 8004470:	e02c      	b.n	80044cc <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	2b01      	cmp	r3, #1
 8004478:	d122      	bne.n	80044c0 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800447a:	e00a      	b.n	8004492 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800447c:	f7fc fc40 	bl	8000d00 <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	f241 3288 	movw	r2, #5000	@ 0x1388
 800448a:	4293      	cmp	r3, r2
 800448c:	d901      	bls.n	8004492 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e0a9      	b.n	80045e6 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8004492:	4b0a      	ldr	r3, [pc, #40]	@ (80044bc <HAL_RCC_ClockConfig+0x228>)
 8004494:	69db      	ldr	r3, [r3, #28]
 8004496:	f003 0318 	and.w	r3, r3, #24
 800449a:	2b08      	cmp	r3, #8
 800449c:	d1ee      	bne.n	800447c <HAL_RCC_ClockConfig+0x1e8>
 800449e:	e015      	b.n	80044cc <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80044a0:	f7fc fc2e 	bl	8000d00 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d906      	bls.n	80044c0 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e097      	b.n	80045e6 <HAL_RCC_ClockConfig+0x352>
 80044b6:	bf00      	nop
 80044b8:	40022000 	.word	0x40022000
 80044bc:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80044c0:	4b4b      	ldr	r3, [pc, #300]	@ (80045f0 <HAL_RCC_ClockConfig+0x35c>)
 80044c2:	69db      	ldr	r3, [r3, #28]
 80044c4:	f003 0318 	and.w	r3, r3, #24
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d1e9      	bne.n	80044a0 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0302 	and.w	r3, r3, #2
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d010      	beq.n	80044fa <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	689a      	ldr	r2, [r3, #8]
 80044dc:	4b44      	ldr	r3, [pc, #272]	@ (80045f0 <HAL_RCC_ClockConfig+0x35c>)
 80044de:	6a1b      	ldr	r3, [r3, #32]
 80044e0:	f003 030f 	and.w	r3, r3, #15
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d208      	bcs.n	80044fa <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80044e8:	4b41      	ldr	r3, [pc, #260]	@ (80045f0 <HAL_RCC_ClockConfig+0x35c>)
 80044ea:	6a1b      	ldr	r3, [r3, #32]
 80044ec:	f023 020f 	bic.w	r2, r3, #15
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	493e      	ldr	r1, [pc, #248]	@ (80045f0 <HAL_RCC_ClockConfig+0x35c>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044fa:	4b3e      	ldr	r3, [pc, #248]	@ (80045f4 <HAL_RCC_ClockConfig+0x360>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 030f 	and.w	r3, r3, #15
 8004502:	683a      	ldr	r2, [r7, #0]
 8004504:	429a      	cmp	r2, r3
 8004506:	d210      	bcs.n	800452a <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004508:	4b3a      	ldr	r3, [pc, #232]	@ (80045f4 <HAL_RCC_ClockConfig+0x360>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f023 020f 	bic.w	r2, r3, #15
 8004510:	4938      	ldr	r1, [pc, #224]	@ (80045f4 <HAL_RCC_ClockConfig+0x360>)
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	4313      	orrs	r3, r2
 8004516:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004518:	4b36      	ldr	r3, [pc, #216]	@ (80045f4 <HAL_RCC_ClockConfig+0x360>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 030f 	and.w	r3, r3, #15
 8004520:	683a      	ldr	r2, [r7, #0]
 8004522:	429a      	cmp	r2, r3
 8004524:	d001      	beq.n	800452a <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e05d      	b.n	80045e6 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0304 	and.w	r3, r3, #4
 8004532:	2b00      	cmp	r3, #0
 8004534:	d010      	beq.n	8004558 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	68da      	ldr	r2, [r3, #12]
 800453a:	4b2d      	ldr	r3, [pc, #180]	@ (80045f0 <HAL_RCC_ClockConfig+0x35c>)
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004542:	429a      	cmp	r2, r3
 8004544:	d208      	bcs.n	8004558 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8004546:	4b2a      	ldr	r3, [pc, #168]	@ (80045f0 <HAL_RCC_ClockConfig+0x35c>)
 8004548:	6a1b      	ldr	r3, [r3, #32]
 800454a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	4927      	ldr	r1, [pc, #156]	@ (80045f0 <HAL_RCC_ClockConfig+0x35c>)
 8004554:	4313      	orrs	r3, r2
 8004556:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0308 	and.w	r3, r3, #8
 8004560:	2b00      	cmp	r3, #0
 8004562:	d012      	beq.n	800458a <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	691a      	ldr	r2, [r3, #16]
 8004568:	4b21      	ldr	r3, [pc, #132]	@ (80045f0 <HAL_RCC_ClockConfig+0x35c>)
 800456a:	6a1b      	ldr	r3, [r3, #32]
 800456c:	091b      	lsrs	r3, r3, #4
 800456e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004572:	429a      	cmp	r2, r3
 8004574:	d209      	bcs.n	800458a <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8004576:	4b1e      	ldr	r3, [pc, #120]	@ (80045f0 <HAL_RCC_ClockConfig+0x35c>)
 8004578:	6a1b      	ldr	r3, [r3, #32]
 800457a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	691b      	ldr	r3, [r3, #16]
 8004582:	011b      	lsls	r3, r3, #4
 8004584:	491a      	ldr	r1, [pc, #104]	@ (80045f0 <HAL_RCC_ClockConfig+0x35c>)
 8004586:	4313      	orrs	r3, r2
 8004588:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0310 	and.w	r3, r3, #16
 8004592:	2b00      	cmp	r3, #0
 8004594:	d012      	beq.n	80045bc <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	695a      	ldr	r2, [r3, #20]
 800459a:	4b15      	ldr	r3, [pc, #84]	@ (80045f0 <HAL_RCC_ClockConfig+0x35c>)
 800459c:	6a1b      	ldr	r3, [r3, #32]
 800459e:	0a1b      	lsrs	r3, r3, #8
 80045a0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d209      	bcs.n	80045bc <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80045a8:	4b11      	ldr	r3, [pc, #68]	@ (80045f0 <HAL_RCC_ClockConfig+0x35c>)
 80045aa:	6a1b      	ldr	r3, [r3, #32]
 80045ac:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	695b      	ldr	r3, [r3, #20]
 80045b4:	021b      	lsls	r3, r3, #8
 80045b6:	490e      	ldr	r1, [pc, #56]	@ (80045f0 <HAL_RCC_ClockConfig+0x35c>)
 80045b8:	4313      	orrs	r3, r2
 80045ba:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80045bc:	f000 f822 	bl	8004604 <HAL_RCC_GetSysClockFreq>
 80045c0:	4602      	mov	r2, r0
 80045c2:	4b0b      	ldr	r3, [pc, #44]	@ (80045f0 <HAL_RCC_ClockConfig+0x35c>)
 80045c4:	6a1b      	ldr	r3, [r3, #32]
 80045c6:	f003 030f 	and.w	r3, r3, #15
 80045ca:	490b      	ldr	r1, [pc, #44]	@ (80045f8 <HAL_RCC_ClockConfig+0x364>)
 80045cc:	5ccb      	ldrb	r3, [r1, r3]
 80045ce:	fa22 f303 	lsr.w	r3, r2, r3
 80045d2:	4a0a      	ldr	r2, [pc, #40]	@ (80045fc <HAL_RCC_ClockConfig+0x368>)
 80045d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80045d6:	4b0a      	ldr	r3, [pc, #40]	@ (8004600 <HAL_RCC_ClockConfig+0x36c>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4618      	mov	r0, r3
 80045dc:	f7fc fb06 	bl	8000bec <HAL_InitTick>
 80045e0:	4603      	mov	r3, r0
 80045e2:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 80045e4:	7afb      	ldrb	r3, [r7, #11]
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3710      	adds	r7, #16
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	44020c00 	.word	0x44020c00
 80045f4:	40022000 	.word	0x40022000
 80045f8:	0800af84 	.word	0x0800af84
 80045fc:	20000000 	.word	0x20000000
 8004600:	20000004 	.word	0x20000004

08004604 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004604:	b480      	push	{r7}
 8004606:	b089      	sub	sp, #36	@ 0x24
 8004608:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 800460a:	4b8c      	ldr	r3, [pc, #560]	@ (800483c <HAL_RCC_GetSysClockFreq+0x238>)
 800460c:	69db      	ldr	r3, [r3, #28]
 800460e:	f003 0318 	and.w	r3, r3, #24
 8004612:	2b08      	cmp	r3, #8
 8004614:	d102      	bne.n	800461c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004616:	4b8a      	ldr	r3, [pc, #552]	@ (8004840 <HAL_RCC_GetSysClockFreq+0x23c>)
 8004618:	61fb      	str	r3, [r7, #28]
 800461a:	e107      	b.n	800482c <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800461c:	4b87      	ldr	r3, [pc, #540]	@ (800483c <HAL_RCC_GetSysClockFreq+0x238>)
 800461e:	69db      	ldr	r3, [r3, #28]
 8004620:	f003 0318 	and.w	r3, r3, #24
 8004624:	2b00      	cmp	r3, #0
 8004626:	d112      	bne.n	800464e <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8004628:	4b84      	ldr	r3, [pc, #528]	@ (800483c <HAL_RCC_GetSysClockFreq+0x238>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0320 	and.w	r3, r3, #32
 8004630:	2b00      	cmp	r3, #0
 8004632:	d009      	beq.n	8004648 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004634:	4b81      	ldr	r3, [pc, #516]	@ (800483c <HAL_RCC_GetSysClockFreq+0x238>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	08db      	lsrs	r3, r3, #3
 800463a:	f003 0303 	and.w	r3, r3, #3
 800463e:	4a81      	ldr	r2, [pc, #516]	@ (8004844 <HAL_RCC_GetSysClockFreq+0x240>)
 8004640:	fa22 f303 	lsr.w	r3, r2, r3
 8004644:	61fb      	str	r3, [r7, #28]
 8004646:	e0f1      	b.n	800482c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8004648:	4b7e      	ldr	r3, [pc, #504]	@ (8004844 <HAL_RCC_GetSysClockFreq+0x240>)
 800464a:	61fb      	str	r3, [r7, #28]
 800464c:	e0ee      	b.n	800482c <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800464e:	4b7b      	ldr	r3, [pc, #492]	@ (800483c <HAL_RCC_GetSysClockFreq+0x238>)
 8004650:	69db      	ldr	r3, [r3, #28]
 8004652:	f003 0318 	and.w	r3, r3, #24
 8004656:	2b10      	cmp	r3, #16
 8004658:	d102      	bne.n	8004660 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800465a:	4b7b      	ldr	r3, [pc, #492]	@ (8004848 <HAL_RCC_GetSysClockFreq+0x244>)
 800465c:	61fb      	str	r3, [r7, #28]
 800465e:	e0e5      	b.n	800482c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004660:	4b76      	ldr	r3, [pc, #472]	@ (800483c <HAL_RCC_GetSysClockFreq+0x238>)
 8004662:	69db      	ldr	r3, [r3, #28]
 8004664:	f003 0318 	and.w	r3, r3, #24
 8004668:	2b18      	cmp	r3, #24
 800466a:	f040 80dd 	bne.w	8004828 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800466e:	4b73      	ldr	r3, [pc, #460]	@ (800483c <HAL_RCC_GetSysClockFreq+0x238>)
 8004670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004672:	f003 0303 	and.w	r3, r3, #3
 8004676:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8004678:	4b70      	ldr	r3, [pc, #448]	@ (800483c <HAL_RCC_GetSysClockFreq+0x238>)
 800467a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800467c:	0a1b      	lsrs	r3, r3, #8
 800467e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004682:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004684:	4b6d      	ldr	r3, [pc, #436]	@ (800483c <HAL_RCC_GetSysClockFreq+0x238>)
 8004686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004688:	091b      	lsrs	r3, r3, #4
 800468a:	f003 0301 	and.w	r3, r3, #1
 800468e:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8004690:	4b6a      	ldr	r3, [pc, #424]	@ (800483c <HAL_RCC_GetSysClockFreq+0x238>)
 8004692:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8004694:	08db      	lsrs	r3, r3, #3
 8004696:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800469a:	68fa      	ldr	r2, [r7, #12]
 800469c:	fb02 f303 	mul.w	r3, r2, r3
 80046a0:	ee07 3a90 	vmov	s15, r3
 80046a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046a8:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	f000 80b7 	beq.w	8004822 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d003      	beq.n	80046c2 <HAL_RCC_GetSysClockFreq+0xbe>
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	2b03      	cmp	r3, #3
 80046be:	d056      	beq.n	800476e <HAL_RCC_GetSysClockFreq+0x16a>
 80046c0:	e077      	b.n	80047b2 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80046c2:	4b5e      	ldr	r3, [pc, #376]	@ (800483c <HAL_RCC_GetSysClockFreq+0x238>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0320 	and.w	r3, r3, #32
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d02d      	beq.n	800472a <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80046ce:	4b5b      	ldr	r3, [pc, #364]	@ (800483c <HAL_RCC_GetSysClockFreq+0x238>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	08db      	lsrs	r3, r3, #3
 80046d4:	f003 0303 	and.w	r3, r3, #3
 80046d8:	4a5a      	ldr	r2, [pc, #360]	@ (8004844 <HAL_RCC_GetSysClockFreq+0x240>)
 80046da:	fa22 f303 	lsr.w	r3, r2, r3
 80046de:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	ee07 3a90 	vmov	s15, r3
 80046e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	ee07 3a90 	vmov	s15, r3
 80046f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046f8:	4b50      	ldr	r3, [pc, #320]	@ (800483c <HAL_RCC_GetSysClockFreq+0x238>)
 80046fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004700:	ee07 3a90 	vmov	s15, r3
 8004704:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8004708:	ed97 6a02 	vldr	s12, [r7, #8]
 800470c:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 800484c <HAL_RCC_GetSysClockFreq+0x248>
 8004710:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004714:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8004718:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800471c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004720:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004724:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8004728:	e065      	b.n	80047f6 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	ee07 3a90 	vmov	s15, r3
 8004730:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004734:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8004850 <HAL_RCC_GetSysClockFreq+0x24c>
 8004738:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800473c:	4b3f      	ldr	r3, [pc, #252]	@ (800483c <HAL_RCC_GetSysClockFreq+0x238>)
 800473e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004740:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004744:	ee07 3a90 	vmov	s15, r3
 8004748:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 800474c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004750:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800484c <HAL_RCC_GetSysClockFreq+0x248>
 8004754:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004758:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 800475c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004760:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004764:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004768:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 800476c:	e043      	b.n	80047f6 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	ee07 3a90 	vmov	s15, r3
 8004774:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004778:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8004854 <HAL_RCC_GetSysClockFreq+0x250>
 800477c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004780:	4b2e      	ldr	r3, [pc, #184]	@ (800483c <HAL_RCC_GetSysClockFreq+0x238>)
 8004782:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004784:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004788:	ee07 3a90 	vmov	s15, r3
 800478c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004790:	ed97 6a02 	vldr	s12, [r7, #8]
 8004794:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 800484c <HAL_RCC_GetSysClockFreq+0x248>
 8004798:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800479c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80047a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80047a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047ac:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 80047b0:	e021      	b.n	80047f6 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	ee07 3a90 	vmov	s15, r3
 80047b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047bc:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004858 <HAL_RCC_GetSysClockFreq+0x254>
 80047c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047c4:	4b1d      	ldr	r3, [pc, #116]	@ (800483c <HAL_RCC_GetSysClockFreq+0x238>)
 80047c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047cc:	ee07 3a90 	vmov	s15, r3
 80047d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80047d4:	ed97 6a02 	vldr	s12, [r7, #8]
 80047d8:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 800484c <HAL_RCC_GetSysClockFreq+0x248>
 80047dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80047e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80047e4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80047ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047f0:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80047f4:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 80047f6:	4b11      	ldr	r3, [pc, #68]	@ (800483c <HAL_RCC_GetSysClockFreq+0x238>)
 80047f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047fa:	0a5b      	lsrs	r3, r3, #9
 80047fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004800:	3301      	adds	r3, #1
 8004802:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	ee07 3a90 	vmov	s15, r3
 800480a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800480e:	edd7 6a06 	vldr	s13, [r7, #24]
 8004812:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004816:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800481a:	ee17 3a90 	vmov	r3, s15
 800481e:	61fb      	str	r3, [r7, #28]
 8004820:	e004      	b.n	800482c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8004822:	2300      	movs	r3, #0
 8004824:	61fb      	str	r3, [r7, #28]
 8004826:	e001      	b.n	800482c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8004828:	4b06      	ldr	r3, [pc, #24]	@ (8004844 <HAL_RCC_GetSysClockFreq+0x240>)
 800482a:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 800482c:	69fb      	ldr	r3, [r7, #28]
}
 800482e:	4618      	mov	r0, r3
 8004830:	3724      	adds	r7, #36	@ 0x24
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	44020c00 	.word	0x44020c00
 8004840:	003d0900 	.word	0x003d0900
 8004844:	03d09000 	.word	0x03d09000
 8004848:	017d7840 	.word	0x017d7840
 800484c:	46000000 	.word	0x46000000
 8004850:	4c742400 	.word	0x4c742400
 8004854:	4bbebc20 	.word	0x4bbebc20
 8004858:	4a742400 	.word	0x4a742400

0800485c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004860:	f7ff fed0 	bl	8004604 <HAL_RCC_GetSysClockFreq>
 8004864:	4602      	mov	r2, r0
 8004866:	4b08      	ldr	r3, [pc, #32]	@ (8004888 <HAL_RCC_GetHCLKFreq+0x2c>)
 8004868:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800486a:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800486e:	4907      	ldr	r1, [pc, #28]	@ (800488c <HAL_RCC_GetHCLKFreq+0x30>)
 8004870:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8004872:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004876:	fa22 f303 	lsr.w	r3, r2, r3
 800487a:	4a05      	ldr	r2, [pc, #20]	@ (8004890 <HAL_RCC_GetHCLKFreq+0x34>)
 800487c:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 800487e:	4b04      	ldr	r3, [pc, #16]	@ (8004890 <HAL_RCC_GetHCLKFreq+0x34>)
 8004880:	681b      	ldr	r3, [r3, #0]
}
 8004882:	4618      	mov	r0, r3
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	44020c00 	.word	0x44020c00
 800488c:	0800af84 	.word	0x0800af84
 8004890:	20000000 	.word	0x20000000

08004894 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8004894:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004898:	b0ba      	sub	sp, #232	@ 0xe8
 800489a:	af00      	add	r7, sp, #0
 800489c:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80048a0:	2300      	movs	r3, #0
 80048a2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80048a6:	2300      	movs	r3, #0
 80048a8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80048ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80048b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b4:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 80048b8:	2500      	movs	r5, #0
 80048ba:	ea54 0305 	orrs.w	r3, r4, r5
 80048be:	d00b      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 80048c0:	4bcd      	ldr	r3, [pc, #820]	@ (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80048c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80048c6:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 80048ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80048ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048d0:	4ac9      	ldr	r2, [pc, #804]	@ (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80048d2:	430b      	orrs	r3, r1
 80048d4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80048dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e0:	f002 0801 	and.w	r8, r2, #1
 80048e4:	f04f 0900 	mov.w	r9, #0
 80048e8:	ea58 0309 	orrs.w	r3, r8, r9
 80048ec:	d042      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 80048ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80048f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048f4:	2b05      	cmp	r3, #5
 80048f6:	d823      	bhi.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0xac>
 80048f8:	a201      	add	r2, pc, #4	@ (adr r2, 8004900 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 80048fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048fe:	bf00      	nop
 8004900:	08004949 	.word	0x08004949
 8004904:	08004919 	.word	0x08004919
 8004908:	0800492d 	.word	0x0800492d
 800490c:	08004949 	.word	0x08004949
 8004910:	08004949 	.word	0x08004949
 8004914:	08004949 	.word	0x08004949
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004918:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800491c:	3308      	adds	r3, #8
 800491e:	4618      	mov	r0, r3
 8004920:	f001 f978 	bl	8005c14 <RCCEx_PLL2_Config>
 8004924:	4603      	mov	r3, r0
 8004926:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 800492a:	e00e      	b.n	800494a <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800492c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004930:	3330      	adds	r3, #48	@ 0x30
 8004932:	4618      	mov	r0, r3
 8004934:	f001 fa06 	bl	8005d44 <RCCEx_PLL3_Config>
 8004938:	4603      	mov	r3, r0
 800493a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 800493e:	e004      	b.n	800494a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004946:	e000      	b.n	800494a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8004948:	bf00      	nop
    }

    if (ret == HAL_OK)
 800494a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800494e:	2b00      	cmp	r3, #0
 8004950:	d10c      	bne.n	800496c <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8004952:	4ba9      	ldr	r3, [pc, #676]	@ (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004954:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004958:	f023 0107 	bic.w	r1, r3, #7
 800495c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004960:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004962:	4aa5      	ldr	r2, [pc, #660]	@ (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004964:	430b      	orrs	r3, r1
 8004966:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800496a:	e003      	b.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800496c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004970:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004974:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800497c:	f002 0a02 	and.w	sl, r2, #2
 8004980:	f04f 0b00 	mov.w	fp, #0
 8004984:	ea5a 030b 	orrs.w	r3, sl, fp
 8004988:	f000 8088 	beq.w	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 800498c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004990:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004992:	2b28      	cmp	r3, #40	@ 0x28
 8004994:	d868      	bhi.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8004996:	a201      	add	r2, pc, #4	@ (adr r2, 800499c <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8004998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800499c:	08004a71 	.word	0x08004a71
 80049a0:	08004a69 	.word	0x08004a69
 80049a4:	08004a69 	.word	0x08004a69
 80049a8:	08004a69 	.word	0x08004a69
 80049ac:	08004a69 	.word	0x08004a69
 80049b0:	08004a69 	.word	0x08004a69
 80049b4:	08004a69 	.word	0x08004a69
 80049b8:	08004a69 	.word	0x08004a69
 80049bc:	08004a41 	.word	0x08004a41
 80049c0:	08004a69 	.word	0x08004a69
 80049c4:	08004a69 	.word	0x08004a69
 80049c8:	08004a69 	.word	0x08004a69
 80049cc:	08004a69 	.word	0x08004a69
 80049d0:	08004a69 	.word	0x08004a69
 80049d4:	08004a69 	.word	0x08004a69
 80049d8:	08004a69 	.word	0x08004a69
 80049dc:	08004a55 	.word	0x08004a55
 80049e0:	08004a69 	.word	0x08004a69
 80049e4:	08004a69 	.word	0x08004a69
 80049e8:	08004a69 	.word	0x08004a69
 80049ec:	08004a69 	.word	0x08004a69
 80049f0:	08004a69 	.word	0x08004a69
 80049f4:	08004a69 	.word	0x08004a69
 80049f8:	08004a69 	.word	0x08004a69
 80049fc:	08004a71 	.word	0x08004a71
 8004a00:	08004a69 	.word	0x08004a69
 8004a04:	08004a69 	.word	0x08004a69
 8004a08:	08004a69 	.word	0x08004a69
 8004a0c:	08004a69 	.word	0x08004a69
 8004a10:	08004a69 	.word	0x08004a69
 8004a14:	08004a69 	.word	0x08004a69
 8004a18:	08004a69 	.word	0x08004a69
 8004a1c:	08004a71 	.word	0x08004a71
 8004a20:	08004a69 	.word	0x08004a69
 8004a24:	08004a69 	.word	0x08004a69
 8004a28:	08004a69 	.word	0x08004a69
 8004a2c:	08004a69 	.word	0x08004a69
 8004a30:	08004a69 	.word	0x08004a69
 8004a34:	08004a69 	.word	0x08004a69
 8004a38:	08004a69 	.word	0x08004a69
 8004a3c:	08004a71 	.word	0x08004a71
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004a40:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a44:	3308      	adds	r3, #8
 8004a46:	4618      	mov	r0, r3
 8004a48:	f001 f8e4 	bl	8005c14 <RCCEx_PLL2_Config>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 8004a52:	e00e      	b.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004a54:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a58:	3330      	adds	r3, #48	@ 0x30
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f001 f972 	bl	8005d44 <RCCEx_PLL3_Config>
 8004a60:	4603      	mov	r3, r0
 8004a62:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 8004a66:	e004      	b.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004a6e:	e000      	b.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8004a70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a72:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d10c      	bne.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8004a7a:	4b5f      	ldr	r3, [pc, #380]	@ (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004a7c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004a80:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004a84:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a8a:	4a5b      	ldr	r2, [pc, #364]	@ (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004a8c:	430b      	orrs	r3, r1
 8004a8e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004a92:	e003      	b.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a94:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004a98:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa4:	f002 0304 	and.w	r3, r2, #4
 8004aa8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004aac:	2300      	movs	r3, #0
 8004aae:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004ab2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004ab6:	460b      	mov	r3, r1
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	d04e      	beq.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8004abc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ac0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ac2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004ac6:	d02c      	beq.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8004ac8:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004acc:	d825      	bhi.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004ace:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ad2:	d028      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004ad4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ad8:	d81f      	bhi.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004ada:	2bc0      	cmp	r3, #192	@ 0xc0
 8004adc:	d025      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x296>
 8004ade:	2bc0      	cmp	r3, #192	@ 0xc0
 8004ae0:	d81b      	bhi.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004ae2:	2b80      	cmp	r3, #128	@ 0x80
 8004ae4:	d00f      	beq.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x272>
 8004ae6:	2b80      	cmp	r3, #128	@ 0x80
 8004ae8:	d817      	bhi.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d01f      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8004aee:	2b40      	cmp	r3, #64	@ 0x40
 8004af0:	d113      	bne.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004af2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004af6:	3308      	adds	r3, #8
 8004af8:	4618      	mov	r0, r3
 8004afa:	f001 f88b 	bl	8005c14 <RCCEx_PLL2_Config>
 8004afe:	4603      	mov	r3, r0
 8004b00:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 8004b04:	e014      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004b06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b0a:	3330      	adds	r3, #48	@ 0x30
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f001 f919 	bl	8005d44 <RCCEx_PLL3_Config>
 8004b12:	4603      	mov	r3, r0
 8004b14:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 8004b18:	e00a      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004b20:	e006      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004b22:	bf00      	nop
 8004b24:	e004      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004b26:	bf00      	nop
 8004b28:	e002      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004b2a:	bf00      	nop
 8004b2c:	e000      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004b2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b30:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d10c      	bne.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8004b38:	4b2f      	ldr	r3, [pc, #188]	@ (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004b3a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004b3e:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004b42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b48:	4a2b      	ldr	r2, [pc, #172]	@ (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004b4a:	430b      	orrs	r3, r1
 8004b4c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004b50:	e003      	b.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b52:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004b56:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b62:	f002 0308 	and.w	r3, r2, #8
 8004b66:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004b70:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004b74:	460b      	mov	r3, r1
 8004b76:	4313      	orrs	r3, r2
 8004b78:	d056      	beq.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8004b7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b7e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b80:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004b84:	d031      	beq.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x356>
 8004b86:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004b8a:	d82a      	bhi.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004b8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b90:	d02d      	beq.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004b92:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b96:	d824      	bhi.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004b98:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004b9c:	d029      	beq.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8004b9e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004ba2:	d81e      	bhi.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004ba4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ba8:	d011      	beq.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8004baa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bae:	d818      	bhi.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d023      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004bb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004bb8:	d113      	bne.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004bba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004bbe:	3308      	adds	r3, #8
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f001 f827 	bl	8005c14 <RCCEx_PLL2_Config>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 8004bcc:	e017      	b.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004bce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004bd2:	3330      	adds	r3, #48	@ 0x30
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f001 f8b5 	bl	8005d44 <RCCEx_PLL3_Config>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 8004be0:	e00d      	b.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004be8:	e009      	b.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8004bea:	bf00      	nop
 8004bec:	e007      	b.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8004bee:	bf00      	nop
 8004bf0:	e005      	b.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8004bf2:	bf00      	nop
 8004bf4:	e003      	b.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8004bf6:	bf00      	nop
 8004bf8:	44020c00 	.word	0x44020c00
        break;
 8004bfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bfe:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d10c      	bne.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8004c06:	4bb9      	ldr	r3, [pc, #740]	@ (8004eec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004c08:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004c0c:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8004c10:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c14:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004c16:	4ab5      	ldr	r2, [pc, #724]	@ (8004eec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004c18:	430b      	orrs	r3, r1
 8004c1a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004c1e:	e003      	b.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c20:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004c24:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c30:	f002 0310 	and.w	r3, r2, #16
 8004c34:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004c38:	2300      	movs	r3, #0
 8004c3a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004c3e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004c42:	460b      	mov	r3, r1
 8004c44:	4313      	orrs	r3, r2
 8004c46:	d053      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8004c48:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c4e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004c52:	d031      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8004c54:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004c58:	d82a      	bhi.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004c5a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c5e:	d02d      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x428>
 8004c60:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c64:	d824      	bhi.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004c66:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004c6a:	d029      	beq.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8004c6c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004c70:	d81e      	bhi.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004c72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c76:	d011      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8004c78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c7c:	d818      	bhi.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d020      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8004c82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c86:	d113      	bne.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004c88:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c8c:	3308      	adds	r3, #8
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f000 ffc0 	bl	8005c14 <RCCEx_PLL2_Config>
 8004c94:	4603      	mov	r3, r0
 8004c96:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 8004c9a:	e014      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004c9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ca0:	3330      	adds	r3, #48	@ 0x30
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f001 f84e 	bl	8005d44 <RCCEx_PLL3_Config>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 8004cae:	e00a      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004cb6:	e006      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004cb8:	bf00      	nop
 8004cba:	e004      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004cbc:	bf00      	nop
 8004cbe:	e002      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004cc0:	bf00      	nop
 8004cc2:	e000      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004cc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cc6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d10c      	bne.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8004cce:	4b87      	ldr	r3, [pc, #540]	@ (8004eec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004cd0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004cd4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004cd8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004cdc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004cde:	4a83      	ldr	r2, [pc, #524]	@ (8004eec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004ce0:	430b      	orrs	r3, r1
 8004ce2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004ce6:	e003      	b.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ce8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004cec:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004cf0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf8:	f002 0320 	and.w	r3, r2, #32
 8004cfc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004d00:	2300      	movs	r3, #0
 8004d02:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d06:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004d0a:	460b      	mov	r3, r1
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	d053      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8004d10:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d16:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8004d1a:	d031      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8004d1c:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8004d20:	d82a      	bhi.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004d22:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d26:	d02d      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004d28:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d2c:	d824      	bhi.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004d2e:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8004d32:	d029      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8004d34:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8004d38:	d81e      	bhi.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004d3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d3e:	d011      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8004d40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d44:	d818      	bhi.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d020      	beq.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8004d4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d4e:	d113      	bne.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004d50:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d54:	3308      	adds	r3, #8
 8004d56:	4618      	mov	r0, r3
 8004d58:	f000 ff5c 	bl	8005c14 <RCCEx_PLL2_Config>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 8004d62:	e014      	b.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004d64:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d68:	3330      	adds	r3, #48	@ 0x30
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f000 ffea 	bl	8005d44 <RCCEx_PLL3_Config>
 8004d70:	4603      	mov	r3, r0
 8004d72:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 8004d76:	e00a      	b.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004d7e:	e006      	b.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004d80:	bf00      	nop
 8004d82:	e004      	b.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004d84:	bf00      	nop
 8004d86:	e002      	b.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004d88:	bf00      	nop
 8004d8a:	e000      	b.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004d8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d8e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d10c      	bne.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8004d96:	4b55      	ldr	r3, [pc, #340]	@ (8004eec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004d98:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004d9c:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8004da0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004da4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004da6:	4a51      	ldr	r2, [pc, #324]	@ (8004eec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004da8:	430b      	orrs	r3, r1
 8004daa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004dae:	e003      	b.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004db0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004db4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004db8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc0:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004dc4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004dc8:	2300      	movs	r3, #0
 8004dca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004dce:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004dd2:	460b      	mov	r3, r1
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	d053      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8004dd8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ddc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dde:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004de2:	d031      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8004de4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004de8:	d82a      	bhi.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004dea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004dee:	d02d      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8004df0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004df4:	d824      	bhi.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004df6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004dfa:	d029      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004dfc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004e00:	d81e      	bhi.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004e02:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004e06:	d011      	beq.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x598>
 8004e08:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004e0c:	d818      	bhi.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d020      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004e12:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004e16:	d113      	bne.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004e18:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e1c:	3308      	adds	r3, #8
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f000 fef8 	bl	8005c14 <RCCEx_PLL2_Config>
 8004e24:	4603      	mov	r3, r0
 8004e26:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8004e2a:	e014      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004e2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e30:	3330      	adds	r3, #48	@ 0x30
 8004e32:	4618      	mov	r0, r3
 8004e34:	f000 ff86 	bl	8005d44 <RCCEx_PLL3_Config>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8004e3e:	e00a      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004e46:	e006      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004e48:	bf00      	nop
 8004e4a:	e004      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004e4c:	bf00      	nop
 8004e4e:	e002      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004e50:	bf00      	nop
 8004e52:	e000      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004e54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e56:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d10c      	bne.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8004e5e:	4b23      	ldr	r3, [pc, #140]	@ (8004eec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e64:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004e68:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e6e:	4a1f      	ldr	r2, [pc, #124]	@ (8004eec <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004e70:	430b      	orrs	r3, r1
 8004e72:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004e76:	e003      	b.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e78:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004e7c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e80:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e88:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004e8c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004e90:	2300      	movs	r3, #0
 8004e92:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004e96:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004e9a:	460b      	mov	r3, r1
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	d03d      	beq.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x688>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8004ea0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ea4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ea6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004eaa:	d01b      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8004eac:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004eb0:	d814      	bhi.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x648>
 8004eb2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004eb6:	d017      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x654>
 8004eb8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ebc:	d80e      	bhi.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x648>
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d016      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8004ec2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ec6:	d109      	bne.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x648>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004ec8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ecc:	3330      	adds	r3, #48	@ 0x30
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f000 ff38 	bl	8005d44 <RCCEx_PLL3_Config>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8004eda:	e00a      	b.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x65e>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004ee2:	e006      	b.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 8004ee4:	bf00      	nop
 8004ee6:	e004      	b.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 8004ee8:	bf00      	nop
 8004eea:	e002      	b.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x65e>
 8004eec:	44020c00 	.word	0x44020c00
        break;
 8004ef0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ef2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d10c      	bne.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x680>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004efa:	4b99      	ldr	r3, [pc, #612]	@ (8005160 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004efc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004f00:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004f04:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f08:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004f0a:	4a95      	ldr	r2, [pc, #596]	@ (8005160 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004f0c:	430b      	orrs	r3, r1
 8004f0e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004f12:	e003      	b.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x688>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f14:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004f18:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004f1c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f24:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004f28:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004f32:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004f36:	460b      	mov	r3, r1
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	d03b      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x720>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8004f3c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f40:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f42:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004f46:	d01b      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
 8004f48:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004f4c:	d814      	bhi.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 8004f4e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004f52:	d017      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 8004f54:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004f58:	d80e      	bhi.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d014      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 8004f5e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004f62:	d109      	bne.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004f64:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f68:	3330      	adds	r3, #48	@ 0x30
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f000 feea 	bl	8005d44 <RCCEx_PLL3_Config>
 8004f70:	4603      	mov	r3, r0
 8004f72:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8004f76:	e008      	b.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x6f6>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004f7e:	e004      	b.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8004f80:	bf00      	nop
 8004f82:	e002      	b.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8004f84:	bf00      	nop
 8004f86:	e000      	b.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8004f88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f8a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d10c      	bne.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x718>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8004f92:	4b73      	ldr	r3, [pc, #460]	@ (8005160 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004f94:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004f98:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8004f9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004fa0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004fa2:	4a6f      	ldr	r2, [pc, #444]	@ (8005160 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004fa4:	430b      	orrs	r3, r1
 8004fa6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004faa:	e003      	b.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fac:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004fb0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004fb4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fbc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004fc0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004fca:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004fce:	460b      	mov	r3, r1
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	d03d      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8004fd4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004fd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fdc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004fe0:	d01b      	beq.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x786>
 8004fe2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004fe6:	d814      	bhi.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8004fe8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004fec:	d017      	beq.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x78a>
 8004fee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004ff2:	d80e      	bhi.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d014      	beq.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x78e>
 8004ff8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ffc:	d109      	bne.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x77e>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004ffe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005002:	3330      	adds	r3, #48	@ 0x30
 8005004:	4618      	mov	r0, r3
 8005006:	f000 fe9d 	bl	8005d44 <RCCEx_PLL3_Config>
 800500a:	4603      	mov	r3, r0
 800500c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* I2C3 clock source config set later after clock selection check */
        break;
 8005010:	e008      	b.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x790>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005018:	e004      	b.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 800501a:	bf00      	nop
 800501c:	e002      	b.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 800501e:	bf00      	nop
 8005020:	e000      	b.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8005022:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005024:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005028:	2b00      	cmp	r3, #0
 800502a:	d10d      	bne.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800502c:	4b4c      	ldr	r3, [pc, #304]	@ (8005160 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800502e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005032:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005036:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800503a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800503e:	4a48      	ldr	r2, [pc, #288]	@ (8005160 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005040:	430b      	orrs	r3, r1
 8005042:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005046:	e003      	b.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005048:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800504c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8005050:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005058:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800505c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005060:	2300      	movs	r3, #0
 8005062:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005066:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800506a:	460b      	mov	r3, r1
 800506c:	4313      	orrs	r3, r2
 800506e:	d035      	beq.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x848>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8005070:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005074:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005078:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800507c:	d015      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x816>
 800507e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005082:	d80e      	bhi.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
 8005084:	2b00      	cmp	r3, #0
 8005086:	d012      	beq.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8005088:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800508c:	d109      	bne.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800508e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005092:	3330      	adds	r3, #48	@ 0x30
 8005094:	4618      	mov	r0, r3
 8005096:	f000 fe55 	bl	8005d44 <RCCEx_PLL3_Config>
 800509a:	4603      	mov	r3, r0
 800509c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 80050a0:	e006      	b.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80050a8:	e002      	b.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 80050aa:	bf00      	nop
 80050ac:	e000      	b.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 80050ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050b0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d10d      	bne.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 80050b8:	4b29      	ldr	r3, [pc, #164]	@ (8005160 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80050ba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80050be:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 80050c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050ca:	4a25      	ldr	r2, [pc, #148]	@ (8005160 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80050cc:	430b      	orrs	r3, r1
 80050ce:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80050d2:	e003      	b.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x848>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050d4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80050d8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 80050dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e4:	2100      	movs	r1, #0
 80050e6:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 80050ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80050ee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80050f2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80050f6:	460b      	mov	r3, r1
 80050f8:	4313      	orrs	r3, r2
 80050fa:	d037      	beq.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 80050fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005100:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005104:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005108:	d015      	beq.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 800510a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800510e:	d80e      	bhi.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x89a>
 8005110:	2b00      	cmp	r3, #0
 8005112:	d012      	beq.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 8005114:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005118:	d109      	bne.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x89a>
        break;

#if defined(RCC_I3C2CLKSOURCE_PLL3R)
      case RCC_I3C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800511a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800511e:	3330      	adds	r3, #48	@ 0x30
 8005120:	4618      	mov	r0, r3
 8005122:	f000 fe0f 	bl	8005d44 <RCCEx_PLL3_Config>
 8005126:	4603      	mov	r3, r0
 8005128:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 800512c:	e006      	b.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005134:	e002      	b.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 8005136:	bf00      	nop
 8005138:	e000      	b.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 800513a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800513c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005140:	2b00      	cmp	r3, #0
 8005142:	d10f      	bne.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x8d0>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 8005144:	4b06      	ldr	r3, [pc, #24]	@ (8005160 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005146:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800514a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800514e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005152:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005156:	4a02      	ldr	r2, [pc, #8]	@ (8005160 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005158:	430b      	orrs	r3, r1
 800515a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800515e:	e005      	b.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 8005160:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005164:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005168:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800516c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005174:	2100      	movs	r1, #0
 8005176:	67b9      	str	r1, [r7, #120]	@ 0x78
 8005178:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800517c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800517e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005182:	460b      	mov	r3, r1
 8005184:	4313      	orrs	r3, r2
 8005186:	d00e      	beq.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x912>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8005188:	4bb8      	ldr	r3, [pc, #736]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800518a:	69db      	ldr	r3, [r3, #28]
 800518c:	4ab7      	ldr	r2, [pc, #732]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800518e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005192:	61d3      	str	r3, [r2, #28]
 8005194:	4bb5      	ldr	r3, [pc, #724]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005196:	69d9      	ldr	r1, [r3, #28]
 8005198:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800519c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80051a0:	4ab2      	ldr	r2, [pc, #712]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80051a2:	430b      	orrs	r3, r1
 80051a4:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80051a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80051aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ae:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80051b2:	673b      	str	r3, [r7, #112]	@ 0x70
 80051b4:	2300      	movs	r3, #0
 80051b6:	677b      	str	r3, [r7, #116]	@ 0x74
 80051b8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80051bc:	460b      	mov	r3, r1
 80051be:	4313      	orrs	r3, r2
 80051c0:	d055      	beq.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x9da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 80051c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80051c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80051ca:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80051ce:	d031      	beq.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 80051d0:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80051d4:	d82a      	bhi.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x998>
 80051d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051da:	d02d      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x9a4>
 80051dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051e0:	d824      	bhi.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x998>
 80051e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80051e6:	d029      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x9a8>
 80051e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80051ec:	d81e      	bhi.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x998>
 80051ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051f2:	d011      	beq.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80051f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051f8:	d818      	bhi.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x998>
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d020      	beq.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
 80051fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005202:	d113      	bne.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x998>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005204:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005208:	3308      	adds	r3, #8
 800520a:	4618      	mov	r0, r3
 800520c:	f000 fd02 	bl	8005c14 <RCCEx_PLL2_Config>
 8005210:	4603      	mov	r3, r0
 8005212:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8005216:	e014      	b.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x9ae>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005218:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800521c:	3330      	adds	r3, #48	@ 0x30
 800521e:	4618      	mov	r0, r3
 8005220:	f000 fd90 	bl	8005d44 <RCCEx_PLL3_Config>
 8005224:	4603      	mov	r3, r0
 8005226:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800522a:	e00a      	b.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005232:	e006      	b.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8005234:	bf00      	nop
 8005236:	e004      	b.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8005238:	bf00      	nop
 800523a:	e002      	b.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 800523c:	bf00      	nop
 800523e:	e000      	b.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8005240:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005242:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005246:	2b00      	cmp	r3, #0
 8005248:	d10d      	bne.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800524a:	4b88      	ldr	r3, [pc, #544]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800524c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005250:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8005254:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005258:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800525c:	4a83      	ldr	r2, [pc, #524]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800525e:	430b      	orrs	r3, r1
 8005260:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005264:	e003      	b.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x9da>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005266:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800526a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800526e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005276:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800527a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800527c:	2300      	movs	r3, #0
 800527e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005280:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005284:	460b      	mov	r3, r1
 8005286:	4313      	orrs	r3, r2
 8005288:	d055      	beq.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 800528a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800528e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005292:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005296:	d031      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0xa68>
 8005298:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800529c:	d82a      	bhi.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 800529e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80052a2:	d02d      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
 80052a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80052a8:	d824      	bhi.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 80052aa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80052ae:	d029      	beq.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80052b0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80052b4:	d81e      	bhi.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 80052b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052ba:	d011      	beq.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 80052bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052c0:	d818      	bhi.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d020      	beq.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80052c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052ca:	d113      	bne.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80052cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80052d0:	3308      	adds	r3, #8
 80052d2:	4618      	mov	r0, r3
 80052d4:	f000 fc9e 	bl	8005c14 <RCCEx_PLL2_Config>
 80052d8:	4603      	mov	r3, r0
 80052da:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80052de:	e014      	b.n	800530a <HAL_RCCEx_PeriphCLKConfig+0xa76>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80052e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80052e4:	3330      	adds	r3, #48	@ 0x30
 80052e6:	4618      	mov	r0, r3
 80052e8:	f000 fd2c 	bl	8005d44 <RCCEx_PLL3_Config>
 80052ec:	4603      	mov	r3, r0
 80052ee:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80052f2:	e00a      	b.n	800530a <HAL_RCCEx_PeriphCLKConfig+0xa76>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80052fa:	e006      	b.n	800530a <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 80052fc:	bf00      	nop
 80052fe:	e004      	b.n	800530a <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8005300:	bf00      	nop
 8005302:	e002      	b.n	800530a <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8005304:	bf00      	nop
 8005306:	e000      	b.n	800530a <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8005308:	bf00      	nop
    }

    if (ret == HAL_OK)
 800530a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800530e:	2b00      	cmp	r3, #0
 8005310:	d10d      	bne.n	800532e <HAL_RCCEx_PeriphCLKConfig+0xa9a>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8005312:	4b56      	ldr	r3, [pc, #344]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005314:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005318:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800531c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005320:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005324:	4a51      	ldr	r2, [pc, #324]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005326:	430b      	orrs	r3, r1
 8005328:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800532c:	e003      	b.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800532e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005332:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8005336:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800533a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800533e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005342:	663b      	str	r3, [r7, #96]	@ 0x60
 8005344:	2300      	movs	r3, #0
 8005346:	667b      	str	r3, [r7, #100]	@ 0x64
 8005348:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800534c:	460b      	mov	r3, r1
 800534e:	4313      	orrs	r3, r2
 8005350:	d032      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0xb24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8005352:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005356:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800535a:	2b05      	cmp	r3, #5
 800535c:	d80f      	bhi.n	800537e <HAL_RCCEx_PeriphCLKConfig+0xaea>
 800535e:	2b03      	cmp	r3, #3
 8005360:	d211      	bcs.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 8005362:	2b01      	cmp	r3, #1
 8005364:	d911      	bls.n	800538a <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 8005366:	2b02      	cmp	r3, #2
 8005368:	d109      	bne.n	800537e <HAL_RCCEx_PeriphCLKConfig+0xaea>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800536a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800536e:	3308      	adds	r3, #8
 8005370:	4618      	mov	r0, r3
 8005372:	f000 fc4f 	bl	8005c14 <RCCEx_PLL2_Config>
 8005376:	4603      	mov	r3, r0
 8005378:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800537c:	e006      	b.n	800538c <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005384:	e002      	b.n	800538c <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 8005386:	bf00      	nop
 8005388:	e000      	b.n	800538c <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 800538a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800538c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005390:	2b00      	cmp	r3, #0
 8005392:	d10d      	bne.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8005394:	4b35      	ldr	r3, [pc, #212]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005396:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800539a:	f023 0107 	bic.w	r1, r3, #7
 800539e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80053a6:	4a31      	ldr	r2, [pc, #196]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80053a8:	430b      	orrs	r3, r1
 80053aa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80053ae:	e003      	b.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0xb24>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053b0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80053b4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 80053b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c0:	2100      	movs	r1, #0
 80053c2:	65b9      	str	r1, [r7, #88]	@ 0x58
 80053c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80053c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80053ca:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80053ce:	460b      	mov	r3, r1
 80053d0:	4313      	orrs	r3, r2
 80053d2:	d024      	beq.n	800541e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 80053d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053d8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d005      	beq.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0xb58>
 80053e0:	2b08      	cmp	r3, #8
 80053e2:	d005      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80053ea:	e002      	b.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 80053ec:	bf00      	nop
 80053ee:	e000      	b.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 80053f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053f2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d10d      	bne.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0xb82>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 80053fa:	4b1c      	ldr	r3, [pc, #112]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80053fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005400:	f023 0108 	bic.w	r1, r3, #8
 8005404:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005408:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800540c:	4a17      	ldr	r2, [pc, #92]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800540e:	430b      	orrs	r3, r1
 8005410:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005414:	e003      	b.n	800541e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005416:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800541a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800541e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005426:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800542a:	653b      	str	r3, [r7, #80]	@ 0x50
 800542c:	2300      	movs	r3, #0
 800542e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005430:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005434:	460b      	mov	r3, r1
 8005436:	4313      	orrs	r3, r2
 8005438:	f000 80b9 	beq.w	80055ae <HAL_RCCEx_PeriphCLKConfig+0xd1a>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 800543c:	4b0c      	ldr	r3, [pc, #48]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 800543e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005440:	4a0b      	ldr	r2, [pc, #44]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 8005442:	f043 0301 	orr.w	r3, r3, #1
 8005446:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005448:	f7fb fc5a 	bl	8000d00 <HAL_GetTick>
 800544c:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005450:	e010      	b.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005452:	f7fb fc55 	bl	8000d00 <HAL_GetTick>
 8005456:	4602      	mov	r2, r0
 8005458:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800545c:	1ad3      	subs	r3, r2, r3
 800545e:	2b02      	cmp	r3, #2
 8005460:	d908      	bls.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
      {
        ret = HAL_TIMEOUT;
 8005462:	2303      	movs	r3, #3
 8005464:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005468:	e00a      	b.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0xbec>
 800546a:	bf00      	nop
 800546c:	44020c00 	.word	0x44020c00
 8005470:	44020800 	.word	0x44020800
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005474:	4bba      	ldr	r3, [pc, #744]	@ (8005760 <HAL_RCCEx_PeriphCLKConfig+0xecc>)
 8005476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005478:	f003 0301 	and.w	r3, r3, #1
 800547c:	2b00      	cmp	r3, #0
 800547e:	d0e8      	beq.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0xbbe>
      }
    }

    if (ret == HAL_OK)
 8005480:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005484:	2b00      	cmp	r3, #0
 8005486:	f040 808e 	bne.w	80055a6 <HAL_RCCEx_PeriphCLKConfig+0xd12>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800548a:	4bb6      	ldr	r3, [pc, #728]	@ (8005764 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800548c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005490:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005494:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8005498:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800549c:	2b00      	cmp	r3, #0
 800549e:	d023      	beq.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 80054a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80054a4:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 80054a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d01b      	beq.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0xc54>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80054b0:	4bac      	ldr	r3, [pc, #688]	@ (8005764 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80054b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80054b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80054be:	4ba9      	ldr	r3, [pc, #676]	@ (8005764 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80054c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80054c4:	4aa7      	ldr	r2, [pc, #668]	@ (8005764 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80054c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054ca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80054ce:	4ba5      	ldr	r3, [pc, #660]	@ (8005764 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80054d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80054d4:	4aa3      	ldr	r2, [pc, #652]	@ (8005764 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80054d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054da:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80054de:	4aa1      	ldr	r2, [pc, #644]	@ (8005764 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80054e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054e4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80054e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054ec:	f003 0301 	and.w	r3, r3, #1
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d019      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054f4:	f7fb fc04 	bl	8000d00 <HAL_GetTick>
 80054f8:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054fc:	e00d      	b.n	800551a <HAL_RCCEx_PeriphCLKConfig+0xc86>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054fe:	f7fb fbff 	bl	8000d00 <HAL_GetTick>
 8005502:	4602      	mov	r2, r0
 8005504:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005508:	1ad2      	subs	r2, r2, r3
 800550a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800550e:	429a      	cmp	r2, r3
 8005510:	d903      	bls.n	800551a <HAL_RCCEx_PeriphCLKConfig+0xc86>
          {
            ret = HAL_TIMEOUT;
 8005512:	2303      	movs	r3, #3
 8005514:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 8005518:	e006      	b.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0xc94>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800551a:	4b92      	ldr	r3, [pc, #584]	@ (8005764 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800551c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005520:	f003 0302 	and.w	r3, r3, #2
 8005524:	2b00      	cmp	r3, #0
 8005526:	d0ea      	beq.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0xc6a>
          }
        }
      }

      if (ret == HAL_OK)
 8005528:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800552c:	2b00      	cmp	r3, #0
 800552e:	d135      	bne.n	800559c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8005530:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005534:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005538:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800553c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005540:	d110      	bne.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0xcd0>
 8005542:	4b88      	ldr	r3, [pc, #544]	@ (8005764 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005544:	69db      	ldr	r3, [r3, #28]
 8005546:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800554a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800554e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005552:	091b      	lsrs	r3, r3, #4
 8005554:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005558:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800555c:	4a81      	ldr	r2, [pc, #516]	@ (8005764 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800555e:	430b      	orrs	r3, r1
 8005560:	61d3      	str	r3, [r2, #28]
 8005562:	e005      	b.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8005564:	4b7f      	ldr	r3, [pc, #508]	@ (8005764 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005566:	69db      	ldr	r3, [r3, #28]
 8005568:	4a7e      	ldr	r2, [pc, #504]	@ (8005764 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800556a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800556e:	61d3      	str	r3, [r2, #28]
 8005570:	4b7c      	ldr	r3, [pc, #496]	@ (8005764 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005572:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005576:	4a7b      	ldr	r2, [pc, #492]	@ (8005764 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005578:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800557c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005580:	4b78      	ldr	r3, [pc, #480]	@ (8005764 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005582:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8005586:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800558a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800558e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005592:	4a74      	ldr	r2, [pc, #464]	@ (8005764 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005594:	430b      	orrs	r3, r1
 8005596:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800559a:	e008      	b.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800559c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80055a0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 80055a4:	e003      	b.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055a6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80055aa:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80055ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80055b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b6:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80055ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80055bc:	2300      	movs	r3, #0
 80055be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055c0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80055c4:	460b      	mov	r3, r1
 80055c6:	4313      	orrs	r3, r2
 80055c8:	d035      	beq.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0xda2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80055ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80055ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80055d2:	2b30      	cmp	r3, #48	@ 0x30
 80055d4:	d014      	beq.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
 80055d6:	2b30      	cmp	r3, #48	@ 0x30
 80055d8:	d80e      	bhi.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0xd64>
 80055da:	2b20      	cmp	r3, #32
 80055dc:	d012      	beq.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0xd70>
 80055de:	2b20      	cmp	r3, #32
 80055e0:	d80a      	bhi.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0xd64>
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d010      	beq.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0xd74>
 80055e6:	2b10      	cmp	r3, #16
 80055e8:	d106      	bne.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0xd64>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055ea:	4b5e      	ldr	r3, [pc, #376]	@ (8005764 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80055ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055ee:	4a5d      	ldr	r2, [pc, #372]	@ (8005764 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80055f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055f4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 80055f6:	e008      	b.n	800560a <HAL_RCCEx_PeriphCLKConfig+0xd76>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80055fe:	e004      	b.n	800560a <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8005600:	bf00      	nop
 8005602:	e002      	b.n	800560a <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8005604:	bf00      	nop
 8005606:	e000      	b.n	800560a <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8005608:	bf00      	nop
    }

    if (ret == HAL_OK)
 800560a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800560e:	2b00      	cmp	r3, #0
 8005610:	d10d      	bne.n	800562e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8005612:	4b54      	ldr	r3, [pc, #336]	@ (8005764 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005614:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005618:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800561c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005620:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005624:	4a4f      	ldr	r2, [pc, #316]	@ (8005764 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005626:	430b      	orrs	r3, r1
 8005628:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800562c:	e003      	b.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0xda2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800562e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005632:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005636:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800563a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800563e:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005642:	643b      	str	r3, [r7, #64]	@ 0x40
 8005644:	2300      	movs	r3, #0
 8005646:	647b      	str	r3, [r7, #68]	@ 0x44
 8005648:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800564c:	460b      	mov	r3, r1
 800564e:	4313      	orrs	r3, r2
 8005650:	d033      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8005652:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005656:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800565a:	2b00      	cmp	r3, #0
 800565c:	d002      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
 800565e:	2b40      	cmp	r3, #64	@ 0x40
 8005660:	d007      	beq.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005662:	e010      	b.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005664:	4b3f      	ldr	r3, [pc, #252]	@ (8005764 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005668:	4a3e      	ldr	r2, [pc, #248]	@ (8005764 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800566a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800566e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8005670:	e00d      	b.n	800568e <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005672:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005676:	3308      	adds	r3, #8
 8005678:	4618      	mov	r0, r3
 800567a:	f000 facb 	bl	8005c14 <RCCEx_PLL2_Config>
 800567e:	4603      	mov	r3, r0
 8005680:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8005684:	e003      	b.n	800568e <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      default:
        ret = HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800568c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800568e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005692:	2b00      	cmp	r3, #0
 8005694:	d10d      	bne.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8005696:	4b33      	ldr	r3, [pc, #204]	@ (8005764 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005698:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800569c:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 80056a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80056a8:	4a2e      	ldr	r2, [pc, #184]	@ (8005764 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80056aa:	430b      	orrs	r3, r1
 80056ac:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80056b0:	e003      	b.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0xe26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056b2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80056b6:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80056ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c2:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80056c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80056c8:	2300      	movs	r3, #0
 80056ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80056cc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80056d0:	460b      	mov	r3, r1
 80056d2:	4313      	orrs	r3, r2
 80056d4:	d04c      	beq.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0xedc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 80056d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80056de:	2b04      	cmp	r3, #4
 80056e0:	d827      	bhi.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 80056e2:	a201      	add	r2, pc, #4	@ (adr r2, 80056e8 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
 80056e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056e8:	080056fd 	.word	0x080056fd
 80056ec:	0800570b 	.word	0x0800570b
 80056f0:	0800571f 	.word	0x0800571f
 80056f4:	0800573b 	.word	0x0800573b
 80056f8:	0800573b 	.word	0x0800573b
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056fc:	4b19      	ldr	r3, [pc, #100]	@ (8005764 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80056fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005700:	4a18      	ldr	r2, [pc, #96]	@ (8005764 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005702:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005706:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005708:	e018      	b.n	800573c <HAL_RCCEx_PeriphCLKConfig+0xea8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800570a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800570e:	3308      	adds	r3, #8
 8005710:	4618      	mov	r0, r3
 8005712:	f000 fa7f 	bl	8005c14 <RCCEx_PLL2_Config>
 8005716:	4603      	mov	r3, r0
 8005718:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800571c:	e00e      	b.n	800573c <HAL_RCCEx_PeriphCLKConfig+0xea8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800571e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005722:	3330      	adds	r3, #48	@ 0x30
 8005724:	4618      	mov	r0, r3
 8005726:	f000 fb0d 	bl	8005d44 <RCCEx_PLL3_Config>
 800572a:	4603      	mov	r3, r0
 800572c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005730:	e004      	b.n	800573c <HAL_RCCEx_PeriphCLKConfig+0xea8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005738:	e000      	b.n	800573c <HAL_RCCEx_PeriphCLKConfig+0xea8>
        break;
 800573a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800573c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005740:	2b00      	cmp	r3, #0
 8005742:	d111      	bne.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0xed4>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005744:	4b07      	ldr	r3, [pc, #28]	@ (8005764 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005746:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800574a:	f023 0107 	bic.w	r1, r3, #7
 800574e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005752:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005756:	4a03      	ldr	r2, [pc, #12]	@ (8005764 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005758:	430b      	orrs	r3, r1
 800575a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800575e:	e007      	b.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0xedc>
 8005760:	44020800 	.word	0x44020800
 8005764:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005768:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800576c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8005770:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005778:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800577c:	633b      	str	r3, [r7, #48]	@ 0x30
 800577e:	2300      	movs	r3, #0
 8005780:	637b      	str	r3, [r7, #52]	@ 0x34
 8005782:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005786:	460b      	mov	r3, r1
 8005788:	4313      	orrs	r3, r2
 800578a:	f000 8081 	beq.w	8005890 <HAL_RCCEx_PeriphCLKConfig+0xffc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 800578e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005792:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005796:	2b20      	cmp	r3, #32
 8005798:	d85f      	bhi.n	800585a <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 800579a:	a201      	add	r2, pc, #4	@ (adr r2, 80057a0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>)
 800579c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057a0:	08005825 	.word	0x08005825
 80057a4:	0800585b 	.word	0x0800585b
 80057a8:	0800585b 	.word	0x0800585b
 80057ac:	0800585b 	.word	0x0800585b
 80057b0:	0800585b 	.word	0x0800585b
 80057b4:	0800585b 	.word	0x0800585b
 80057b8:	0800585b 	.word	0x0800585b
 80057bc:	0800585b 	.word	0x0800585b
 80057c0:	08005833 	.word	0x08005833
 80057c4:	0800585b 	.word	0x0800585b
 80057c8:	0800585b 	.word	0x0800585b
 80057cc:	0800585b 	.word	0x0800585b
 80057d0:	0800585b 	.word	0x0800585b
 80057d4:	0800585b 	.word	0x0800585b
 80057d8:	0800585b 	.word	0x0800585b
 80057dc:	0800585b 	.word	0x0800585b
 80057e0:	08005847 	.word	0x08005847
 80057e4:	0800585b 	.word	0x0800585b
 80057e8:	0800585b 	.word	0x0800585b
 80057ec:	0800585b 	.word	0x0800585b
 80057f0:	0800585b 	.word	0x0800585b
 80057f4:	0800585b 	.word	0x0800585b
 80057f8:	0800585b 	.word	0x0800585b
 80057fc:	0800585b 	.word	0x0800585b
 8005800:	08005863 	.word	0x08005863
 8005804:	0800585b 	.word	0x0800585b
 8005808:	0800585b 	.word	0x0800585b
 800580c:	0800585b 	.word	0x0800585b
 8005810:	0800585b 	.word	0x0800585b
 8005814:	0800585b 	.word	0x0800585b
 8005818:	0800585b 	.word	0x0800585b
 800581c:	0800585b 	.word	0x0800585b
 8005820:	08005863 	.word	0x08005863
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005824:	4bb9      	ldr	r3, [pc, #740]	@ (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005828:	4ab8      	ldr	r2, [pc, #736]	@ (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800582a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800582e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005830:	e018      	b.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0xfd0>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005832:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005836:	3308      	adds	r3, #8
 8005838:	4618      	mov	r0, r3
 800583a:	f000 f9eb 	bl	8005c14 <RCCEx_PLL2_Config>
 800583e:	4603      	mov	r3, r0
 8005840:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005844:	e00e      	b.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0xfd0>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005846:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800584a:	3330      	adds	r3, #48	@ 0x30
 800584c:	4618      	mov	r0, r3
 800584e:	f000 fa79 	bl	8005d44 <RCCEx_PLL3_Config>
 8005852:	4603      	mov	r3, r0
 8005854:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005858:	e004      	b.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005860:	e000      	b.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        break;
 8005862:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005864:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005868:	2b00      	cmp	r3, #0
 800586a:	d10d      	bne.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0xff4>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800586c:	4ba7      	ldr	r3, [pc, #668]	@ (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800586e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005872:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005876:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800587a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800587e:	4aa3      	ldr	r2, [pc, #652]	@ (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005880:	430b      	orrs	r3, r1
 8005882:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005886:	e003      	b.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0xffc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005888:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800588c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8005890:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005898:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800589c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800589e:	2300      	movs	r3, #0
 80058a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80058a2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80058a6:	460b      	mov	r3, r1
 80058a8:	4313      	orrs	r3, r2
 80058aa:	d04e      	beq.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x10b6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 80058ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80058b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058b8:	d02e      	beq.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80058ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058be:	d827      	bhi.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80058c0:	2bc0      	cmp	r3, #192	@ 0xc0
 80058c2:	d02b      	beq.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x1088>
 80058c4:	2bc0      	cmp	r3, #192	@ 0xc0
 80058c6:	d823      	bhi.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80058c8:	2b80      	cmp	r3, #128	@ 0x80
 80058ca:	d017      	beq.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x1068>
 80058cc:	2b80      	cmp	r3, #128	@ 0x80
 80058ce:	d81f      	bhi.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d002      	beq.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x1046>
 80058d4:	2b40      	cmp	r3, #64	@ 0x40
 80058d6:	d007      	beq.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x1054>
 80058d8:	e01a      	b.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058da:	4b8c      	ldr	r3, [pc, #560]	@ (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80058dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058de:	4a8b      	ldr	r2, [pc, #556]	@ (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80058e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058e4:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80058e6:	e01a      	b.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x108a>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80058e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058ec:	3308      	adds	r3, #8
 80058ee:	4618      	mov	r0, r3
 80058f0:	f000 f990 	bl	8005c14 <RCCEx_PLL2_Config>
 80058f4:	4603      	mov	r3, r0
 80058f6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80058fa:	e010      	b.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x108a>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80058fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005900:	3330      	adds	r3, #48	@ 0x30
 8005902:	4618      	mov	r0, r3
 8005904:	f000 fa1e 	bl	8005d44 <RCCEx_PLL3_Config>
 8005908:	4603      	mov	r3, r0
 800590a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800590e:	e006      	b.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x108a>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005916:	e002      	b.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 8005918:	bf00      	nop
 800591a:	e000      	b.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 800591c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800591e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005922:	2b00      	cmp	r3, #0
 8005924:	d10d      	bne.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8005926:	4b79      	ldr	r3, [pc, #484]	@ (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005928:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800592c:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 8005930:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005934:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005938:	4974      	ldr	r1, [pc, #464]	@ (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800593a:	4313      	orrs	r3, r2
 800593c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005940:	e003      	b.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x10b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005942:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005946:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 800594a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800594e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005952:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005956:	623b      	str	r3, [r7, #32]
 8005958:	2300      	movs	r3, #0
 800595a:	627b      	str	r3, [r7, #36]	@ 0x24
 800595c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005960:	460b      	mov	r3, r1
 8005962:	4313      	orrs	r3, r2
 8005964:	d055      	beq.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x117e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8005966:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800596a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800596e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005972:	d031      	beq.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x1144>
 8005974:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005978:	d82a      	bhi.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 800597a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800597e:	d02d      	beq.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x1148>
 8005980:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005984:	d824      	bhi.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8005986:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800598a:	d029      	beq.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x114c>
 800598c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005990:	d81e      	bhi.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8005992:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005996:	d011      	beq.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x1128>
 8005998:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800599c:	d818      	bhi.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d020      	beq.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x1150>
 80059a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80059a6:	d113      	bne.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x113c>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80059a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80059ac:	3308      	adds	r3, #8
 80059ae:	4618      	mov	r0, r3
 80059b0:	f000 f930 	bl	8005c14 <RCCEx_PLL2_Config>
 80059b4:	4603      	mov	r3, r0
 80059b6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 80059ba:	e014      	b.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x1152>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80059bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80059c0:	3330      	adds	r3, #48	@ 0x30
 80059c2:	4618      	mov	r0, r3
 80059c4:	f000 f9be 	bl	8005d44 <RCCEx_PLL3_Config>
 80059c8:	4603      	mov	r3, r0
 80059ca:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 80059ce:	e00a      	b.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80059d6:	e006      	b.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 80059d8:	bf00      	nop
 80059da:	e004      	b.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 80059dc:	bf00      	nop
 80059de:	e002      	b.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 80059e0:	bf00      	nop
 80059e2:	e000      	b.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 80059e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059e6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d10d      	bne.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x1176>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 80059ee:	4b47      	ldr	r3, [pc, #284]	@ (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80059f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80059f4:	f423 6260 	bic.w	r2, r3, #3584	@ 0xe00
 80059f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80059fc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005a00:	4942      	ldr	r1, [pc, #264]	@ (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005a02:	4313      	orrs	r3, r2
 8005a04:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005a08:	e003      	b.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x117e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a0a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005a0e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005a12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a1a:	2100      	movs	r1, #0
 8005a1c:	61b9      	str	r1, [r7, #24]
 8005a1e:	f003 0302 	and.w	r3, r3, #2
 8005a22:	61fb      	str	r3, [r7, #28]
 8005a24:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005a28:	460b      	mov	r3, r1
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	d03c      	beq.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8005a2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a32:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005a36:	2b03      	cmp	r3, #3
 8005a38:	d81b      	bhi.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x11de>
 8005a3a:	a201      	add	r2, pc, #4	@ (adr r2, 8005a40 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
 8005a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a40:	08005a7b 	.word	0x08005a7b
 8005a44:	08005a51 	.word	0x08005a51
 8005a48:	08005a5f 	.word	0x08005a5f
 8005a4c:	08005a7b 	.word	0x08005a7b
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a50:	4b2e      	ldr	r3, [pc, #184]	@ (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005a52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a54:	4a2d      	ldr	r2, [pc, #180]	@ (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005a56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a5a:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005a5c:	e00e      	b.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x11e8>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005a5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a62:	3308      	adds	r3, #8
 8005a64:	4618      	mov	r0, r3
 8005a66:	f000 f8d5 	bl	8005c14 <RCCEx_PLL2_Config>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8005a70:	e004      	b.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x11e8>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005a78:	e000      	b.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x11e8>
        break;
 8005a7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a7c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d10d      	bne.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x120c>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8005a84:	4b21      	ldr	r3, [pc, #132]	@ (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005a86:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005a8a:	f023 0203 	bic.w	r2, r3, #3
 8005a8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a92:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005a96:	491d      	ldr	r1, [pc, #116]	@ (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8005a9e:	e003      	b.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aa0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005aa4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005aa8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab0:	2100      	movs	r1, #0
 8005ab2:	6139      	str	r1, [r7, #16]
 8005ab4:	f003 0304 	and.w	r3, r3, #4
 8005ab8:	617b      	str	r3, [r7, #20]
 8005aba:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005abe:	460b      	mov	r3, r1
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	d03c      	beq.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x12aa>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8005ac4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005ac8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005acc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ad0:	d00e      	beq.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8005ad2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ad6:	d815      	bhi.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x1270>
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d019      	beq.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x127c>
 8005adc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ae0:	d110      	bne.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x1270>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ae2:	4b0a      	ldr	r3, [pc, #40]	@ (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ae6:	4a09      	ldr	r2, [pc, #36]	@ (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005ae8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005aec:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005aee:	e010      	b.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x127e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005af0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005af4:	3308      	adds	r3, #8
 8005af6:	4618      	mov	r0, r3
 8005af8:	f000 f88c 	bl	8005c14 <RCCEx_PLL2_Config>
 8005afc:	4603      	mov	r3, r0
 8005afe:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005b02:	e006      	b.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x127e>

      default:
        ret = HAL_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005b0a:	e002      	b.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x127e>
 8005b0c:	44020c00 	.word	0x44020c00
        break;
 8005b10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b12:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d10d      	bne.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x12a2>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8005b1a:	4b3d      	ldr	r3, [pc, #244]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005b1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005b20:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005b24:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b2c:	4938      	ldr	r1, [pc, #224]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8005b34:	e003      	b.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x12aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b36:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005b3a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005b3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b46:	2100      	movs	r1, #0
 8005b48:	60b9      	str	r1, [r7, #8]
 8005b4a:	f003 0310 	and.w	r3, r3, #16
 8005b4e:	60fb      	str	r3, [r7, #12]
 8005b50:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005b54:	460b      	mov	r3, r1
 8005b56:	4313      	orrs	r3, r2
 8005b58:	d038      	beq.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x1338>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8005b5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b5e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005b62:	2b30      	cmp	r3, #48	@ 0x30
 8005b64:	d01b      	beq.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x130a>
 8005b66:	2b30      	cmp	r3, #48	@ 0x30
 8005b68:	d815      	bhi.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x1302>
 8005b6a:	2b10      	cmp	r3, #16
 8005b6c:	d002      	beq.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
 8005b6e:	2b20      	cmp	r3, #32
 8005b70:	d007      	beq.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x12ee>
 8005b72:	e010      	b.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x1302>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b74:	4b26      	ldr	r3, [pc, #152]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b78:	4a25      	ldr	r2, [pc, #148]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005b7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b7e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8005b80:	e00e      	b.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x130c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005b82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b86:	3330      	adds	r3, #48	@ 0x30
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f000 f8db 	bl	8005d44 <RCCEx_PLL3_Config>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8005b94:	e004      	b.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x130c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005b9c:	e000      	b.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x130c>
        break;
 8005b9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ba0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d10d      	bne.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x1330>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8005ba8:	4b19      	ldr	r3, [pc, #100]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005baa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005bae:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005bb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005bb6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005bba:	4915      	ldr	r1, [pc, #84]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8005bc2:	e003      	b.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x1338>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bc4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005bc8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005bcc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd4:	2100      	movs	r1, #0
 8005bd6:	6039      	str	r1, [r7, #0]
 8005bd8:	f003 0308 	and.w	r3, r3, #8
 8005bdc:	607b      	str	r3, [r7, #4]
 8005bde:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005be2:	460b      	mov	r3, r1
 8005be4:	4313      	orrs	r3, r2
 8005be6:	d00c      	beq.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x136e>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8005be8:	4b09      	ldr	r3, [pc, #36]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005bea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005bee:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005bf2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005bf6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005bfa:	4905      	ldr	r1, [pc, #20]	@ (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 8005c02:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	37e8      	adds	r7, #232	@ 0xe8
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c10:	44020c00 	.word	0x44020c00

08005c14 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b084      	sub	sp, #16
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8005c1c:	4b48      	ldr	r3, [pc, #288]	@ (8005d40 <RCCEx_PLL2_Config+0x12c>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a47      	ldr	r2, [pc, #284]	@ (8005d40 <RCCEx_PLL2_Config+0x12c>)
 8005c22:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005c26:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005c28:	f7fb f86a 	bl	8000d00 <HAL_GetTick>
 8005c2c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005c2e:	e008      	b.n	8005c42 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005c30:	f7fb f866 	bl	8000d00 <HAL_GetTick>
 8005c34:	4602      	mov	r2, r0
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	1ad3      	subs	r3, r2, r3
 8005c3a:	2b02      	cmp	r3, #2
 8005c3c:	d901      	bls.n	8005c42 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005c3e:	2303      	movs	r3, #3
 8005c40:	e07a      	b.n	8005d38 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005c42:	4b3f      	ldr	r3, [pc, #252]	@ (8005d40 <RCCEx_PLL2_Config+0x12c>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d1f0      	bne.n	8005c30 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8005c4e:	4b3c      	ldr	r3, [pc, #240]	@ (8005d40 <RCCEx_PLL2_Config+0x12c>)
 8005c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c52:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005c56:	f023 0303 	bic.w	r3, r3, #3
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	6811      	ldr	r1, [r2, #0]
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	6852      	ldr	r2, [r2, #4]
 8005c62:	0212      	lsls	r2, r2, #8
 8005c64:	430a      	orrs	r2, r1
 8005c66:	4936      	ldr	r1, [pc, #216]	@ (8005d40 <RCCEx_PLL2_Config+0x12c>)
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	3b01      	subs	r3, #1
 8005c72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	3b01      	subs	r3, #1
 8005c7c:	025b      	lsls	r3, r3, #9
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	431a      	orrs	r2, r3
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	691b      	ldr	r3, [r3, #16]
 8005c86:	3b01      	subs	r3, #1
 8005c88:	041b      	lsls	r3, r3, #16
 8005c8a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005c8e:	431a      	orrs	r2, r3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	695b      	ldr	r3, [r3, #20]
 8005c94:	3b01      	subs	r3, #1
 8005c96:	061b      	lsls	r3, r3, #24
 8005c98:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005c9c:	4928      	ldr	r1, [pc, #160]	@ (8005d40 <RCCEx_PLL2_Config+0x12c>)
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8005ca2:	4b27      	ldr	r3, [pc, #156]	@ (8005d40 <RCCEx_PLL2_Config+0x12c>)
 8005ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ca6:	f023 020c 	bic.w	r2, r3, #12
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	699b      	ldr	r3, [r3, #24]
 8005cae:	4924      	ldr	r1, [pc, #144]	@ (8005d40 <RCCEx_PLL2_Config+0x12c>)
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8005cb4:	4b22      	ldr	r3, [pc, #136]	@ (8005d40 <RCCEx_PLL2_Config+0x12c>)
 8005cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cb8:	f023 0220 	bic.w	r2, r3, #32
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	69db      	ldr	r3, [r3, #28]
 8005cc0:	491f      	ldr	r1, [pc, #124]	@ (8005d40 <RCCEx_PLL2_Config+0x12c>)
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8005cc6:	4b1e      	ldr	r3, [pc, #120]	@ (8005d40 <RCCEx_PLL2_Config+0x12c>)
 8005cc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cce:	491c      	ldr	r1, [pc, #112]	@ (8005d40 <RCCEx_PLL2_Config+0x12c>)
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8005cd4:	4b1a      	ldr	r3, [pc, #104]	@ (8005d40 <RCCEx_PLL2_Config+0x12c>)
 8005cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cd8:	4a19      	ldr	r2, [pc, #100]	@ (8005d40 <RCCEx_PLL2_Config+0x12c>)
 8005cda:	f023 0310 	bic.w	r3, r3, #16
 8005cde:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8005ce0:	4b17      	ldr	r3, [pc, #92]	@ (8005d40 <RCCEx_PLL2_Config+0x12c>)
 8005ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ce4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005ce8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	6a12      	ldr	r2, [r2, #32]
 8005cf0:	00d2      	lsls	r2, r2, #3
 8005cf2:	4913      	ldr	r1, [pc, #76]	@ (8005d40 <RCCEx_PLL2_Config+0x12c>)
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8005cf8:	4b11      	ldr	r3, [pc, #68]	@ (8005d40 <RCCEx_PLL2_Config+0x12c>)
 8005cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cfc:	4a10      	ldr	r2, [pc, #64]	@ (8005d40 <RCCEx_PLL2_Config+0x12c>)
 8005cfe:	f043 0310 	orr.w	r3, r3, #16
 8005d02:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8005d04:	4b0e      	ldr	r3, [pc, #56]	@ (8005d40 <RCCEx_PLL2_Config+0x12c>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a0d      	ldr	r2, [pc, #52]	@ (8005d40 <RCCEx_PLL2_Config+0x12c>)
 8005d0a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005d0e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005d10:	f7fa fff6 	bl	8000d00 <HAL_GetTick>
 8005d14:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005d16:	e008      	b.n	8005d2a <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005d18:	f7fa fff2 	bl	8000d00 <HAL_GetTick>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	1ad3      	subs	r3, r2, r3
 8005d22:	2b02      	cmp	r3, #2
 8005d24:	d901      	bls.n	8005d2a <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8005d26:	2303      	movs	r3, #3
 8005d28:	e006      	b.n	8005d38 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005d2a:	4b05      	ldr	r3, [pc, #20]	@ (8005d40 <RCCEx_PLL2_Config+0x12c>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d0f0      	beq.n	8005d18 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8005d36:	2300      	movs	r3, #0

}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3710      	adds	r7, #16
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}
 8005d40:	44020c00 	.word	0x44020c00

08005d44 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b084      	sub	sp, #16
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8005d4c:	4b48      	ldr	r3, [pc, #288]	@ (8005e70 <RCCEx_PLL3_Config+0x12c>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a47      	ldr	r2, [pc, #284]	@ (8005e70 <RCCEx_PLL3_Config+0x12c>)
 8005d52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d56:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005d58:	f7fa ffd2 	bl	8000d00 <HAL_GetTick>
 8005d5c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005d5e:	e008      	b.n	8005d72 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005d60:	f7fa ffce 	bl	8000d00 <HAL_GetTick>
 8005d64:	4602      	mov	r2, r0
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	1ad3      	subs	r3, r2, r3
 8005d6a:	2b02      	cmp	r3, #2
 8005d6c:	d901      	bls.n	8005d72 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005d6e:	2303      	movs	r3, #3
 8005d70:	e07a      	b.n	8005e68 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005d72:	4b3f      	ldr	r3, [pc, #252]	@ (8005e70 <RCCEx_PLL3_Config+0x12c>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d1f0      	bne.n	8005d60 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8005d7e:	4b3c      	ldr	r3, [pc, #240]	@ (8005e70 <RCCEx_PLL3_Config+0x12c>)
 8005d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d82:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005d86:	f023 0303 	bic.w	r3, r3, #3
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	6811      	ldr	r1, [r2, #0]
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	6852      	ldr	r2, [r2, #4]
 8005d92:	0212      	lsls	r2, r2, #8
 8005d94:	430a      	orrs	r2, r1
 8005d96:	4936      	ldr	r1, [pc, #216]	@ (8005e70 <RCCEx_PLL3_Config+0x12c>)
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	630b      	str	r3, [r1, #48]	@ 0x30
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	3b01      	subs	r3, #1
 8005da2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	3b01      	subs	r3, #1
 8005dac:	025b      	lsls	r3, r3, #9
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	431a      	orrs	r2, r3
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	3b01      	subs	r3, #1
 8005db8:	041b      	lsls	r3, r3, #16
 8005dba:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005dbe:	431a      	orrs	r2, r3
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	695b      	ldr	r3, [r3, #20]
 8005dc4:	3b01      	subs	r3, #1
 8005dc6:	061b      	lsls	r3, r3, #24
 8005dc8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005dcc:	4928      	ldr	r1, [pc, #160]	@ (8005e70 <RCCEx_PLL3_Config+0x12c>)
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005dd2:	4b27      	ldr	r3, [pc, #156]	@ (8005e70 <RCCEx_PLL3_Config+0x12c>)
 8005dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dd6:	f023 020c 	bic.w	r2, r3, #12
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	699b      	ldr	r3, [r3, #24]
 8005dde:	4924      	ldr	r1, [pc, #144]	@ (8005e70 <RCCEx_PLL3_Config+0x12c>)
 8005de0:	4313      	orrs	r3, r2
 8005de2:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8005de4:	4b22      	ldr	r3, [pc, #136]	@ (8005e70 <RCCEx_PLL3_Config+0x12c>)
 8005de6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005de8:	f023 0220 	bic.w	r2, r3, #32
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	69db      	ldr	r3, [r3, #28]
 8005df0:	491f      	ldr	r1, [pc, #124]	@ (8005e70 <RCCEx_PLL3_Config+0x12c>)
 8005df2:	4313      	orrs	r3, r2
 8005df4:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8005df6:	4b1e      	ldr	r3, [pc, #120]	@ (8005e70 <RCCEx_PLL3_Config+0x12c>)
 8005df8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dfe:	491c      	ldr	r1, [pc, #112]	@ (8005e70 <RCCEx_PLL3_Config+0x12c>)
 8005e00:	4313      	orrs	r3, r2
 8005e02:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8005e04:	4b1a      	ldr	r3, [pc, #104]	@ (8005e70 <RCCEx_PLL3_Config+0x12c>)
 8005e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e08:	4a19      	ldr	r2, [pc, #100]	@ (8005e70 <RCCEx_PLL3_Config+0x12c>)
 8005e0a:	f023 0310 	bic.w	r3, r3, #16
 8005e0e:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8005e10:	4b17      	ldr	r3, [pc, #92]	@ (8005e70 <RCCEx_PLL3_Config+0x12c>)
 8005e12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e14:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005e18:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	6a12      	ldr	r2, [r2, #32]
 8005e20:	00d2      	lsls	r2, r2, #3
 8005e22:	4913      	ldr	r1, [pc, #76]	@ (8005e70 <RCCEx_PLL3_Config+0x12c>)
 8005e24:	4313      	orrs	r3, r2
 8005e26:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8005e28:	4b11      	ldr	r3, [pc, #68]	@ (8005e70 <RCCEx_PLL3_Config+0x12c>)
 8005e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e2c:	4a10      	ldr	r2, [pc, #64]	@ (8005e70 <RCCEx_PLL3_Config+0x12c>)
 8005e2e:	f043 0310 	orr.w	r3, r3, #16
 8005e32:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8005e34:	4b0e      	ldr	r3, [pc, #56]	@ (8005e70 <RCCEx_PLL3_Config+0x12c>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a0d      	ldr	r2, [pc, #52]	@ (8005e70 <RCCEx_PLL3_Config+0x12c>)
 8005e3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e3e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005e40:	f7fa ff5e 	bl	8000d00 <HAL_GetTick>
 8005e44:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005e46:	e008      	b.n	8005e5a <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005e48:	f7fa ff5a 	bl	8000d00 <HAL_GetTick>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	2b02      	cmp	r3, #2
 8005e54:	d901      	bls.n	8005e5a <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 8005e56:	2303      	movs	r3, #3
 8005e58:	e006      	b.n	8005e68 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005e5a:	4b05      	ldr	r3, [pc, #20]	@ (8005e70 <RCCEx_PLL3_Config+0x12c>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d0f0      	beq.n	8005e48 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 8005e66:	2300      	movs	r3, #0
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3710      	adds	r7, #16
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}
 8005e70:	44020c00 	.word	0x44020c00

08005e74 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_DRD_TypeDef *USBx)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b085      	sub	sp, #20
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005e82:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8005e86:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = winterruptmask;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	68fa      	ldr	r2, [r7, #12]
 8005e8c:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005e8e:	2300      	movs	r3, #0
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3714      	adds	r7, #20
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b085      	sub	sp, #20
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005ea4:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8005ea8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	43db      	mvns	r3, r3
 8005eb2:	401a      	ands	r2, r3
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005eb8:	2300      	movs	r3, #0
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3714      	adds	r7, #20
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr

08005ec6 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 8005ec6:	b480      	push	{r7}
 8005ec8:	b083      	sub	sp, #12
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
 8005ece:	460b      	mov	r3, r1
 8005ed0:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 8005ed2:	78fb      	ldrb	r3, [r7, #3]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d106      	bne.n	8005ee6 <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005edc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	641a      	str	r2, [r3, #64]	@ 0x40
 8005ee4:	e00b      	b.n	8005efe <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 8005ee6:	78fb      	ldrb	r3, [r7, #3]
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d106      	bne.n	8005efa <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ef0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	641a      	str	r2, [r3, #64]	@ 0x40
 8005ef8:	e001      	b.n	8005efe <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	e000      	b.n	8005f00 <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 8005efe:	2300      	movs	r3, #0
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	370c      	adds	r7, #12
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr

08005f0c <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 8005f0c:	b084      	sub	sp, #16
 8005f0e:	b580      	push	{r7, lr}
 8005f10:	b084      	sub	sp, #16
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	6078      	str	r0, [r7, #4]
 8005f16:	f107 001c 	add.w	r0, r7, #28
 8005f1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2201      	movs	r2, #1
 8005f22:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f28:	f023 0201 	bic.w	r2, r3, #1
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 8005f30:	2100      	movs	r1, #0
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f7ff ffc7 	bl	8005ec6 <USB_SetCurrentMode>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 8005f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3710      	adds	r7, #16
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f4e:	b004      	add	sp, #16
 8005f50:	4770      	bx	lr
	...

08005f54 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b09f      	sub	sp, #124	@ 0x7c
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  uint32_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005f64:	687a      	ldr	r2, [r7, #4]
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	781b      	ldrb	r3, [r3, #0]
 8005f6a:	009b      	lsls	r3, r3, #2
 8005f6c:	4413      	add	r3, r2
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	4ba0      	ldr	r3, [pc, #640]	@ (80061f4 <USB_ActivateEndpoint+0x2a0>)
 8005f72:	4013      	ands	r3, r2
 8005f74:	673b      	str	r3, [r7, #112]	@ 0x70

  /* initialize Endpoint */
  switch (ep->type)
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	78db      	ldrb	r3, [r3, #3]
 8005f7a:	2b03      	cmp	r3, #3
 8005f7c:	d819      	bhi.n	8005fb2 <USB_ActivateEndpoint+0x5e>
 8005f7e:	a201      	add	r2, pc, #4	@ (adr r2, 8005f84 <USB_ActivateEndpoint+0x30>)
 8005f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f84:	08005f95 	.word	0x08005f95
 8005f88:	08005fa9 	.word	0x08005fa9
 8005f8c:	08005fbb 	.word	0x08005fbb
 8005f90:	08005f9f 	.word	0x08005f9f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005f94:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005f96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005f9a:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 8005f9c:	e00e      	b.n	8005fbc <USB_ActivateEndpoint+0x68>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005f9e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005fa0:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8005fa4:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 8005fa6:	e009      	b.n	8005fbc <USB_ActivateEndpoint+0x68>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005fa8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005faa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005fae:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 8005fb0:	e004      	b.n	8005fbc <USB_ActivateEndpoint+0x68>

    default:
      ret = HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      break;
 8005fb8:	e000      	b.n	8005fbc <USB_ActivateEndpoint+0x68>
      break;
 8005fba:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_VTRX | USB_EP_VTTX));
 8005fbc:	687a      	ldr	r2, [r7, #4]
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	781b      	ldrb	r3, [r3, #0]
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	441a      	add	r2, r3
 8005fc6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005fc8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005fcc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fd0:	6013      	str	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	009b      	lsls	r3, r3, #2
 8005fda:	4413      	add	r3, r2
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	4b86      	ldr	r3, [pc, #536]	@ (80061f8 <USB_ActivateEndpoint+0x2a4>)
 8005fe0:	4013      	ands	r3, r2
 8005fe2:	683a      	ldr	r2, [r7, #0]
 8005fe4:	7812      	ldrb	r2, [r2, #0]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	441a      	add	r2, r3
 8005ff4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005ff6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ffa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ffe:	6013      	str	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	7b1b      	ldrb	r3, [r3, #12]
 8006004:	2b00      	cmp	r3, #0
 8006006:	f040 8177 	bne.w	80062f8 <USB_ActivateEndpoint+0x3a4>
  {
    if (ep->is_in != 0U)
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	785b      	ldrb	r3, [r3, #1]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d079      	beq.n	8006106 <USB_ActivateEndpoint+0x1b2>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	00db      	lsls	r3, r3, #3
 8006018:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800601c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	00db      	lsls	r3, r3, #3
 8006028:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800602c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006030:	0c12      	lsrs	r2, r2, #16
 8006032:	0412      	lsls	r2, r2, #16
 8006034:	601a      	str	r2, [r3, #0]
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	00db      	lsls	r3, r3, #3
 800603c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006040:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006044:	6819      	ldr	r1, [r3, #0]
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	88db      	ldrh	r3, [r3, #6]
 800604a:	089b      	lsrs	r3, r3, #2
 800604c:	b29b      	uxth	r3, r3
 800604e:	009a      	lsls	r2, r3, #2
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	00db      	lsls	r3, r3, #3
 8006056:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800605a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800605e:	430a      	orrs	r2, r1
 8006060:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	4413      	add	r3, r2
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	61bb      	str	r3, [r7, #24]
 8006070:	69bb      	ldr	r3, [r7, #24]
 8006072:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006076:	2b00      	cmp	r3, #0
 8006078:	d013      	beq.n	80060a2 <USB_ActivateEndpoint+0x14e>
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	009b      	lsls	r3, r3, #2
 8006082:	4413      	add	r3, r2
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	4b5c      	ldr	r3, [pc, #368]	@ (80061f8 <USB_ActivateEndpoint+0x2a4>)
 8006088:	4013      	ands	r3, r2
 800608a:	617b      	str	r3, [r7, #20]
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	441a      	add	r2, r3
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800609c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80060a0:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	78db      	ldrb	r3, [r3, #3]
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d018      	beq.n	80060dc <USB_ActivateEndpoint+0x188>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80060aa:	687a      	ldr	r2, [r7, #4]
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	4413      	add	r3, r2
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	4b51      	ldr	r3, [pc, #324]	@ (80061fc <USB_ActivateEndpoint+0x2a8>)
 80060b8:	4013      	ands	r3, r2
 80060ba:	60fb      	str	r3, [r7, #12]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f083 0320 	eor.w	r3, r3, #32
 80060c2:	60fb      	str	r3, [r7, #12]
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	781b      	ldrb	r3, [r3, #0]
 80060ca:	009b      	lsls	r3, r3, #2
 80060cc:	441a      	add	r2, r3
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060d8:	6013      	str	r3, [r2, #0]
 80060da:	e28c      	b.n	80065f6 <USB_ActivateEndpoint+0x6a2>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80060dc:	687a      	ldr	r2, [r7, #4]
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	4413      	add	r3, r2
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	4b44      	ldr	r3, [pc, #272]	@ (80061fc <USB_ActivateEndpoint+0x2a8>)
 80060ea:	4013      	ands	r3, r2
 80060ec:	613b      	str	r3, [r7, #16]
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	441a      	add	r2, r3
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006102:	6013      	str	r3, [r2, #0]
 8006104:	e277      	b.n	80065f6 <USB_ActivateEndpoint+0x6a2>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	00db      	lsls	r3, r3, #3
 800610c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006110:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006114:	685a      	ldr	r2, [r3, #4]
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	781b      	ldrb	r3, [r3, #0]
 800611a:	00db      	lsls	r3, r3, #3
 800611c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006120:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006124:	0c12      	lsrs	r2, r2, #16
 8006126:	0412      	lsls	r2, r2, #16
 8006128:	605a      	str	r2, [r3, #4]
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	781b      	ldrb	r3, [r3, #0]
 800612e:	00db      	lsls	r3, r3, #3
 8006130:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006134:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006138:	6859      	ldr	r1, [r3, #4]
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	88db      	ldrh	r3, [r3, #6]
 800613e:	089b      	lsrs	r3, r3, #2
 8006140:	b29b      	uxth	r3, r3
 8006142:	009a      	lsls	r2, r3, #2
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	00db      	lsls	r3, r3, #3
 800614a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800614e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006152:	430a      	orrs	r2, r1
 8006154:	605a      	str	r2, [r3, #4]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	781b      	ldrb	r3, [r3, #0]
 800615a:	00db      	lsls	r3, r3, #3
 800615c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006160:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006164:	685a      	ldr	r2, [r3, #4]
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	00db      	lsls	r3, r3, #3
 800616c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006170:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006174:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8006178:	605a      	str	r2, [r3, #4]
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	691b      	ldr	r3, [r3, #16]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d112      	bne.n	80061a8 <USB_ActivateEndpoint+0x254>
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	00db      	lsls	r3, r3, #3
 8006188:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800618c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006190:	685a      	ldr	r2, [r3, #4]
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	00db      	lsls	r3, r3, #3
 8006198:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800619c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80061a0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80061a4:	605a      	str	r2, [r3, #4]
 80061a6:	e04d      	b.n	8006244 <USB_ActivateEndpoint+0x2f0>
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	691b      	ldr	r3, [r3, #16]
 80061ac:	2b3e      	cmp	r3, #62	@ 0x3e
 80061ae:	d827      	bhi.n	8006200 <USB_ActivateEndpoint+0x2ac>
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	691b      	ldr	r3, [r3, #16]
 80061b4:	085b      	lsrs	r3, r3, #1
 80061b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	691b      	ldr	r3, [r3, #16]
 80061bc:	f003 0301 	and.w	r3, r3, #1
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d002      	beq.n	80061ca <USB_ActivateEndpoint+0x276>
 80061c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80061c6:	3301      	adds	r3, #1
 80061c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	00db      	lsls	r3, r3, #3
 80061d0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80061d4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80061d8:	6859      	ldr	r1, [r3, #4]
 80061da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80061dc:	069a      	lsls	r2, r3, #26
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	00db      	lsls	r3, r3, #3
 80061e4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80061e8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80061ec:	430a      	orrs	r2, r1
 80061ee:	605a      	str	r2, [r3, #4]
 80061f0:	e028      	b.n	8006244 <USB_ActivateEndpoint+0x2f0>
 80061f2:	bf00      	nop
 80061f4:	07ff898f 	.word	0x07ff898f
 80061f8:	07ff8f8f 	.word	0x07ff8f8f
 80061fc:	07ff8fbf 	.word	0x07ff8fbf
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	095b      	lsrs	r3, r3, #5
 8006206:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	691b      	ldr	r3, [r3, #16]
 800620c:	f003 031f 	and.w	r3, r3, #31
 8006210:	2b00      	cmp	r3, #0
 8006212:	d102      	bne.n	800621a <USB_ActivateEndpoint+0x2c6>
 8006214:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006216:	3b01      	subs	r3, #1
 8006218:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	00db      	lsls	r3, r3, #3
 8006220:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006224:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006228:	685a      	ldr	r2, [r3, #4]
 800622a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800622c:	069b      	lsls	r3, r3, #26
 800622e:	431a      	orrs	r2, r3
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	00db      	lsls	r3, r3, #3
 8006236:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800623a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800623e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006242:	605a      	str	r2, [r3, #4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	781b      	ldrb	r3, [r3, #0]
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	4413      	add	r3, r2
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006254:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006258:	2b00      	cmp	r3, #0
 800625a:	d013      	beq.n	8006284 <USB_ActivateEndpoint+0x330>
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	4413      	add	r3, r2
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	4b9c      	ldr	r3, [pc, #624]	@ (80064dc <USB_ActivateEndpoint+0x588>)
 800626a:	4013      	ands	r3, r2
 800626c:	627b      	str	r3, [r7, #36]	@ 0x24
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	781b      	ldrb	r3, [r3, #0]
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	441a      	add	r2, r3
 8006278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800627a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800627e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006282:	6013      	str	r3, [r2, #0]

      if (ep->num == 0U)
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d11c      	bne.n	80062c6 <USB_ActivateEndpoint+0x372>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	4413      	add	r3, r2
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	4b91      	ldr	r3, [pc, #580]	@ (80064e0 <USB_ActivateEndpoint+0x58c>)
 800629a:	4013      	ands	r3, r2
 800629c:	61fb      	str	r3, [r7, #28]
 800629e:	69fb      	ldr	r3, [r7, #28]
 80062a0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80062a4:	61fb      	str	r3, [r7, #28]
 80062a6:	69fb      	ldr	r3, [r7, #28]
 80062a8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80062ac:	61fb      	str	r3, [r7, #28]
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	441a      	add	r2, r3
 80062b8:	69fb      	ldr	r3, [r7, #28]
 80062ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062c2:	6013      	str	r3, [r2, #0]
 80062c4:	e197      	b.n	80065f6 <USB_ActivateEndpoint+0x6a2>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	4413      	add	r3, r2
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	4b83      	ldr	r3, [pc, #524]	@ (80064e0 <USB_ActivateEndpoint+0x58c>)
 80062d4:	4013      	ands	r3, r2
 80062d6:	623b      	str	r3, [r7, #32]
 80062d8:	6a3b      	ldr	r3, [r7, #32]
 80062da:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80062de:	623b      	str	r3, [r7, #32]
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	781b      	ldrb	r3, [r3, #0]
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	441a      	add	r2, r3
 80062ea:	6a3b      	ldr	r3, [r7, #32]
 80062ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062f4:	6013      	str	r3, [r2, #0]
 80062f6:	e17e      	b.n	80065f6 <USB_ActivateEndpoint+0x6a2>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	78db      	ldrb	r3, [r3, #3]
 80062fc:	2b02      	cmp	r3, #2
 80062fe:	d114      	bne.n	800632a <USB_ActivateEndpoint+0x3d6>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	4413      	add	r3, r2
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	4b73      	ldr	r3, [pc, #460]	@ (80064dc <USB_ActivateEndpoint+0x588>)
 800630e:	4013      	ands	r3, r2
 8006310:	663b      	str	r3, [r7, #96]	@ 0x60
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	441a      	add	r2, r3
 800631c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800631e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006322:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006326:	6013      	str	r3, [r2, #0]
 8006328:	e013      	b.n	8006352 <USB_ActivateEndpoint+0x3fe>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800632a:	687a      	ldr	r2, [r7, #4]
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	009b      	lsls	r3, r3, #2
 8006332:	4413      	add	r3, r2
 8006334:	681a      	ldr	r2, [r3, #0]
 8006336:	4b6b      	ldr	r3, [pc, #428]	@ (80064e4 <USB_ActivateEndpoint+0x590>)
 8006338:	4013      	ands	r3, r2
 800633a:	667b      	str	r3, [r7, #100]	@ 0x64
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	009b      	lsls	r3, r3, #2
 8006344:	441a      	add	r2, r3
 8006346:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006348:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800634c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006350:	6013      	str	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	00db      	lsls	r3, r3, #3
 8006358:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800635c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	781b      	ldrb	r3, [r3, #0]
 8006366:	00db      	lsls	r3, r3, #3
 8006368:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800636c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006370:	0c12      	lsrs	r2, r2, #16
 8006372:	0412      	lsls	r2, r2, #16
 8006374:	601a      	str	r2, [r3, #0]
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	00db      	lsls	r3, r3, #3
 800637c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006380:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006384:	6819      	ldr	r1, [r3, #0]
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	891b      	ldrh	r3, [r3, #8]
 800638a:	089b      	lsrs	r3, r3, #2
 800638c:	b29b      	uxth	r3, r3
 800638e:	009a      	lsls	r2, r3, #2
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	00db      	lsls	r3, r3, #3
 8006396:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800639a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800639e:	430a      	orrs	r2, r1
 80063a0:	601a      	str	r2, [r3, #0]
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	00db      	lsls	r3, r3, #3
 80063a8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80063ac:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80063b0:	685a      	ldr	r2, [r3, #4]
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	00db      	lsls	r3, r3, #3
 80063b8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80063bc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80063c0:	0c12      	lsrs	r2, r2, #16
 80063c2:	0412      	lsls	r2, r2, #16
 80063c4:	605a      	str	r2, [r3, #4]
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	00db      	lsls	r3, r3, #3
 80063cc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80063d0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80063d4:	6859      	ldr	r1, [r3, #4]
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	895b      	ldrh	r3, [r3, #10]
 80063da:	089b      	lsrs	r3, r3, #2
 80063dc:	b29b      	uxth	r3, r3
 80063de:	009a      	lsls	r2, r3, #2
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	781b      	ldrb	r3, [r3, #0]
 80063e4:	00db      	lsls	r3, r3, #3
 80063e6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80063ea:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80063ee:	430a      	orrs	r2, r1
 80063f0:	605a      	str	r2, [r3, #4]

    if (ep->is_in == 0U)
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	785b      	ldrb	r3, [r3, #1]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d178      	bne.n	80064ec <USB_ActivateEndpoint+0x598>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	009b      	lsls	r3, r3, #2
 8006402:	4413      	add	r3, r2
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	643b      	str	r3, [r7, #64]	@ 0x40
 8006408:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800640a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800640e:	2b00      	cmp	r3, #0
 8006410:	d013      	beq.n	800643a <USB_ActivateEndpoint+0x4e6>
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	009b      	lsls	r3, r3, #2
 800641a:	4413      	add	r3, r2
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	4b2f      	ldr	r3, [pc, #188]	@ (80064dc <USB_ActivateEndpoint+0x588>)
 8006420:	4013      	ands	r3, r2
 8006422:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006424:	687a      	ldr	r2, [r7, #4]
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	441a      	add	r2, r3
 800642e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006430:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006434:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006438:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	4413      	add	r3, r2
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800644a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800644e:	2b00      	cmp	r3, #0
 8006450:	d013      	beq.n	800647a <USB_ActivateEndpoint+0x526>
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	4413      	add	r3, r2
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	4b1f      	ldr	r3, [pc, #124]	@ (80064dc <USB_ActivateEndpoint+0x588>)
 8006460:	4013      	ands	r3, r2
 8006462:	637b      	str	r3, [r7, #52]	@ 0x34
 8006464:	687a      	ldr	r2, [r7, #4]
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	781b      	ldrb	r3, [r3, #0]
 800646a:	009b      	lsls	r3, r3, #2
 800646c:	441a      	add	r2, r3
 800646e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006470:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006474:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006478:	6013      	str	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800647a:	687a      	ldr	r2, [r7, #4]
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	009b      	lsls	r3, r3, #2
 8006482:	4413      	add	r3, r2
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	4b16      	ldr	r3, [pc, #88]	@ (80064e0 <USB_ActivateEndpoint+0x58c>)
 8006488:	4013      	ands	r3, r2
 800648a:	633b      	str	r3, [r7, #48]	@ 0x30
 800648c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800648e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006492:	633b      	str	r3, [r7, #48]	@ 0x30
 8006494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006496:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800649a:	633b      	str	r3, [r7, #48]	@ 0x30
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	009b      	lsls	r3, r3, #2
 80064a4:	441a      	add	r2, r3
 80064a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064b0:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	4413      	add	r3, r2
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	4b0a      	ldr	r3, [pc, #40]	@ (80064e8 <USB_ActivateEndpoint+0x594>)
 80064c0:	4013      	ands	r3, r2
 80064c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	009b      	lsls	r3, r3, #2
 80064cc:	441a      	add	r2, r3
 80064ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064d8:	6013      	str	r3, [r2, #0]
 80064da:	e08c      	b.n	80065f6 <USB_ActivateEndpoint+0x6a2>
 80064dc:	07ff8f8f 	.word	0x07ff8f8f
 80064e0:	07ffbf8f 	.word	0x07ffbf8f
 80064e4:	07ff8e8f 	.word	0x07ff8e8f
 80064e8:	07ff8fbf 	.word	0x07ff8fbf
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	009b      	lsls	r3, r3, #2
 80064f4:	4413      	add	r3, r2
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80064fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80064fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006500:	2b00      	cmp	r3, #0
 8006502:	d013      	beq.n	800652c <USB_ActivateEndpoint+0x5d8>
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	4413      	add	r3, r2
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	4b3d      	ldr	r3, [pc, #244]	@ (8006608 <USB_ActivateEndpoint+0x6b4>)
 8006512:	4013      	ands	r3, r2
 8006514:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	781b      	ldrb	r3, [r3, #0]
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	441a      	add	r2, r3
 8006520:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006522:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006526:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800652a:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800652c:	687a      	ldr	r2, [r7, #4]
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	4413      	add	r3, r2
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	657b      	str	r3, [r7, #84]	@ 0x54
 800653a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800653c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006540:	2b00      	cmp	r3, #0
 8006542:	d013      	beq.n	800656c <USB_ActivateEndpoint+0x618>
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	4413      	add	r3, r2
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	4b2d      	ldr	r3, [pc, #180]	@ (8006608 <USB_ActivateEndpoint+0x6b4>)
 8006552:	4013      	ands	r3, r2
 8006554:	653b      	str	r3, [r7, #80]	@ 0x50
 8006556:	687a      	ldr	r2, [r7, #4]
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	441a      	add	r2, r3
 8006560:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006562:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006566:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800656a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	78db      	ldrb	r3, [r3, #3]
 8006570:	2b01      	cmp	r3, #1
 8006572:	d018      	beq.n	80065a6 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	4413      	add	r3, r2
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	4b22      	ldr	r3, [pc, #136]	@ (800660c <USB_ActivateEndpoint+0x6b8>)
 8006582:	4013      	ands	r3, r2
 8006584:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006586:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006588:	f083 0320 	eor.w	r3, r3, #32
 800658c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	781b      	ldrb	r3, [r3, #0]
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	441a      	add	r2, r3
 8006598:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800659a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800659e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065a2:	6013      	str	r3, [r2, #0]
 80065a4:	e013      	b.n	80065ce <USB_ActivateEndpoint+0x67a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	4413      	add	r3, r2
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	4b16      	ldr	r3, [pc, #88]	@ (800660c <USB_ActivateEndpoint+0x6b8>)
 80065b4:	4013      	ands	r3, r2
 80065b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	441a      	add	r2, r3
 80065c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065cc:	6013      	str	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80065ce:	687a      	ldr	r2, [r7, #4]
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	009b      	lsls	r3, r3, #2
 80065d6:	4413      	add	r3, r2
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	4b0d      	ldr	r3, [pc, #52]	@ (8006610 <USB_ActivateEndpoint+0x6bc>)
 80065dc:	4013      	ands	r3, r2
 80065de:	647b      	str	r3, [r7, #68]	@ 0x44
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	441a      	add	r2, r3
 80065ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065f4:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80065f6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	377c      	adds	r7, #124	@ 0x7c
 80065fe:	46bd      	mov	sp, r7
 8006600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006604:	4770      	bx	lr
 8006606:	bf00      	nop
 8006608:	07ff8f8f 	.word	0x07ff8f8f
 800660c:	07ff8fbf 	.word	0x07ff8fbf
 8006610:	07ffbf8f 	.word	0x07ffbf8f

08006614 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8006614:	b480      	push	{r7}
 8006616:	b097      	sub	sp, #92	@ 0x5c
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	7b1b      	ldrb	r3, [r3, #12]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d16d      	bne.n	8006702 <USB_DeactivateEndpoint+0xee>
  {
    if (ep->is_in != 0U)
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	785b      	ldrb	r3, [r3, #1]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d034      	beq.n	8006698 <USB_DeactivateEndpoint+0x84>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	4413      	add	r3, r2
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	613b      	str	r3, [r7, #16]
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006642:	2b00      	cmp	r3, #0
 8006644:	d013      	beq.n	800666e <USB_DeactivateEndpoint+0x5a>
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	4413      	add	r3, r2
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	4b6d      	ldr	r3, [pc, #436]	@ (8006808 <USB_DeactivateEndpoint+0x1f4>)
 8006654:	4013      	ands	r3, r2
 8006656:	60fb      	str	r3, [r7, #12]
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	009b      	lsls	r3, r3, #2
 8006660:	441a      	add	r2, r3
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006668:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800666c:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	009b      	lsls	r3, r3, #2
 8006676:	4413      	add	r3, r2
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	4b64      	ldr	r3, [pc, #400]	@ (800680c <USB_DeactivateEndpoint+0x1f8>)
 800667c:	4013      	ands	r3, r2
 800667e:	60bb      	str	r3, [r7, #8]
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	441a      	add	r2, r3
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006690:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006694:	6013      	str	r3, [r2, #0]
 8006696:	e139      	b.n	800690c <USB_DeactivateEndpoint+0x2f8>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	781b      	ldrb	r3, [r3, #0]
 800669e:	009b      	lsls	r3, r3, #2
 80066a0:	4413      	add	r3, r2
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	61fb      	str	r3, [r7, #28]
 80066a6:	69fb      	ldr	r3, [r7, #28]
 80066a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d013      	beq.n	80066d8 <USB_DeactivateEndpoint+0xc4>
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	4413      	add	r3, r2
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	4b52      	ldr	r3, [pc, #328]	@ (8006808 <USB_DeactivateEndpoint+0x1f4>)
 80066be:	4013      	ands	r3, r2
 80066c0:	61bb      	str	r3, [r7, #24]
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	441a      	add	r2, r3
 80066cc:	69bb      	ldr	r3, [r7, #24]
 80066ce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80066d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066d6:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	781b      	ldrb	r3, [r3, #0]
 80066de:	009b      	lsls	r3, r3, #2
 80066e0:	4413      	add	r3, r2
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	4b4a      	ldr	r3, [pc, #296]	@ (8006810 <USB_DeactivateEndpoint+0x1fc>)
 80066e6:	4013      	ands	r3, r2
 80066e8:	617b      	str	r3, [r7, #20]
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	009b      	lsls	r3, r3, #2
 80066f2:	441a      	add	r2, r3
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066fe:	6013      	str	r3, [r2, #0]
 8006700:	e104      	b.n	800690c <USB_DeactivateEndpoint+0x2f8>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	785b      	ldrb	r3, [r3, #1]
 8006706:	2b00      	cmp	r3, #0
 8006708:	f040 8084 	bne.w	8006814 <USB_DeactivateEndpoint+0x200>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	009b      	lsls	r3, r3, #2
 8006714:	4413      	add	r3, r2
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	63bb      	str	r3, [r7, #56]	@ 0x38
 800671a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800671c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006720:	2b00      	cmp	r3, #0
 8006722:	d013      	beq.n	800674c <USB_DeactivateEndpoint+0x138>
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	781b      	ldrb	r3, [r3, #0]
 800672a:	009b      	lsls	r3, r3, #2
 800672c:	4413      	add	r3, r2
 800672e:	681a      	ldr	r2, [r3, #0]
 8006730:	4b35      	ldr	r3, [pc, #212]	@ (8006808 <USB_DeactivateEndpoint+0x1f4>)
 8006732:	4013      	ands	r3, r2
 8006734:	637b      	str	r3, [r7, #52]	@ 0x34
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	781b      	ldrb	r3, [r3, #0]
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	441a      	add	r2, r3
 8006740:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006742:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006746:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800674a:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	781b      	ldrb	r3, [r3, #0]
 8006752:	009b      	lsls	r3, r3, #2
 8006754:	4413      	add	r3, r2
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	633b      	str	r3, [r7, #48]	@ 0x30
 800675a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800675c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006760:	2b00      	cmp	r3, #0
 8006762:	d013      	beq.n	800678c <USB_DeactivateEndpoint+0x178>
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	4413      	add	r3, r2
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	4b25      	ldr	r3, [pc, #148]	@ (8006808 <USB_DeactivateEndpoint+0x1f4>)
 8006772:	4013      	ands	r3, r2
 8006774:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	009b      	lsls	r3, r3, #2
 800677e:	441a      	add	r2, r3
 8006780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006782:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006786:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800678a:	6013      	str	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	4413      	add	r3, r2
 8006796:	681a      	ldr	r2, [r3, #0]
 8006798:	4b1b      	ldr	r3, [pc, #108]	@ (8006808 <USB_DeactivateEndpoint+0x1f4>)
 800679a:	4013      	ands	r3, r2
 800679c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	441a      	add	r2, r3
 80067a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067ae:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80067b2:	6013      	str	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80067b4:	687a      	ldr	r2, [r7, #4]
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	009b      	lsls	r3, r3, #2
 80067bc:	4413      	add	r3, r2
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	4b13      	ldr	r3, [pc, #76]	@ (8006810 <USB_DeactivateEndpoint+0x1fc>)
 80067c2:	4013      	ands	r3, r2
 80067c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	009b      	lsls	r3, r3, #2
 80067ce:	441a      	add	r2, r3
 80067d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067da:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80067dc:	687a      	ldr	r2, [r7, #4]
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	781b      	ldrb	r3, [r3, #0]
 80067e2:	009b      	lsls	r3, r3, #2
 80067e4:	4413      	add	r3, r2
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	4b08      	ldr	r3, [pc, #32]	@ (800680c <USB_DeactivateEndpoint+0x1f8>)
 80067ea:	4013      	ands	r3, r2
 80067ec:	623b      	str	r3, [r7, #32]
 80067ee:	687a      	ldr	r2, [r7, #4]
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	441a      	add	r2, r3
 80067f8:	6a3b      	ldr	r3, [r7, #32]
 80067fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006802:	6013      	str	r3, [r2, #0]
 8006804:	e082      	b.n	800690c <USB_DeactivateEndpoint+0x2f8>
 8006806:	bf00      	nop
 8006808:	07ff8f8f 	.word	0x07ff8f8f
 800680c:	07ff8fbf 	.word	0x07ff8fbf
 8006810:	07ffbf8f 	.word	0x07ffbf8f
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	781b      	ldrb	r3, [r3, #0]
 800681a:	009b      	lsls	r3, r3, #2
 800681c:	4413      	add	r3, r2
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	657b      	str	r3, [r7, #84]	@ 0x54
 8006822:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006824:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006828:	2b00      	cmp	r3, #0
 800682a:	d013      	beq.n	8006854 <USB_DeactivateEndpoint+0x240>
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	781b      	ldrb	r3, [r3, #0]
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	4413      	add	r3, r2
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	4b38      	ldr	r3, [pc, #224]	@ (800691c <USB_DeactivateEndpoint+0x308>)
 800683a:	4013      	ands	r3, r2
 800683c:	653b      	str	r3, [r7, #80]	@ 0x50
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	009b      	lsls	r3, r3, #2
 8006846:	441a      	add	r2, r3
 8006848:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800684a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800684e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006852:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	4413      	add	r3, r2
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006862:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006864:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006868:	2b00      	cmp	r3, #0
 800686a:	d013      	beq.n	8006894 <USB_DeactivateEndpoint+0x280>
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	009b      	lsls	r3, r3, #2
 8006874:	4413      	add	r3, r2
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	4b28      	ldr	r3, [pc, #160]	@ (800691c <USB_DeactivateEndpoint+0x308>)
 800687a:	4013      	ands	r3, r2
 800687c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	781b      	ldrb	r3, [r3, #0]
 8006884:	009b      	lsls	r3, r3, #2
 8006886:	441a      	add	r2, r3
 8006888:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800688a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800688e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006892:	6013      	str	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	4413      	add	r3, r2
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	4b1e      	ldr	r3, [pc, #120]	@ (800691c <USB_DeactivateEndpoint+0x308>)
 80068a2:	4013      	ands	r3, r2
 80068a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	009b      	lsls	r3, r3, #2
 80068ae:	441a      	add	r2, r3
 80068b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068b2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80068b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068ba:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	4413      	add	r3, r2
 80068c6:	681a      	ldr	r2, [r3, #0]
 80068c8:	4b15      	ldr	r3, [pc, #84]	@ (8006920 <USB_DeactivateEndpoint+0x30c>)
 80068ca:	4013      	ands	r3, r2
 80068cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	009b      	lsls	r3, r3, #2
 80068d6:	441a      	add	r2, r3
 80068d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068e2:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	009b      	lsls	r3, r3, #2
 80068ec:	4413      	add	r3, r2
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	4b0c      	ldr	r3, [pc, #48]	@ (8006924 <USB_DeactivateEndpoint+0x310>)
 80068f2:	4013      	ands	r3, r2
 80068f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	009b      	lsls	r3, r3, #2
 80068fe:	441a      	add	r2, r3
 8006900:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006902:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006906:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800690a:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800690c:	2300      	movs	r3, #0
}
 800690e:	4618      	mov	r0, r3
 8006910:	375c      	adds	r7, #92	@ 0x5c
 8006912:	46bd      	mov	sp, r7
 8006914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006918:	4770      	bx	lr
 800691a:	bf00      	nop
 800691c:	07ff8f8f 	.word	0x07ff8f8f
 8006920:	07ff8fbf 	.word	0x07ff8fbf
 8006924:	07ffbf8f 	.word	0x07ffbf8f

08006928 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b096      	sub	sp, #88	@ 0x58
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	785b      	ldrb	r3, [r3, #1]
 8006936:	2b01      	cmp	r3, #1
 8006938:	f040 84ed 	bne.w	8007316 <USB_EPStartXfer+0x9ee>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	699a      	ldr	r2, [r3, #24]
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	691b      	ldr	r3, [r3, #16]
 8006944:	429a      	cmp	r2, r3
 8006946:	d903      	bls.n	8006950 <USB_EPStartXfer+0x28>
    {
      len = ep->maxpacket;
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	691b      	ldr	r3, [r3, #16]
 800694c:	657b      	str	r3, [r7, #84]	@ 0x54
 800694e:	e002      	b.n	8006956 <USB_EPStartXfer+0x2e>
    }
    else
    {
      len = ep->xfer_len;
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	699b      	ldr	r3, [r3, #24]
 8006954:	657b      	str	r3, [r7, #84]	@ 0x54
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	7b1b      	ldrb	r3, [r3, #12]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d12e      	bne.n	80069bc <USB_EPStartXfer+0x94>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	6959      	ldr	r1, [r3, #20]
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	88da      	ldrh	r2, [r3, #6]
 8006966:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006968:	b29b      	uxth	r3, r3
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f001 f952 	bl	8007c14 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	00db      	lsls	r3, r3, #3
 8006976:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800697a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	00db      	lsls	r3, r3, #3
 8006986:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800698a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800698e:	b292      	uxth	r2, r2
 8006990:	601a      	str	r2, [r3, #0]
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	00db      	lsls	r3, r3, #3
 8006998:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800699c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80069a0:	6819      	ldr	r1, [r3, #0]
 80069a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80069a4:	041a      	lsls	r2, r3, #16
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	00db      	lsls	r3, r3, #3
 80069ac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80069b0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80069b4:	430a      	orrs	r2, r1
 80069b6:	601a      	str	r2, [r3, #0]
 80069b8:	f000 bc90 	b.w	80072dc <USB_EPStartXfer+0x9b4>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	78db      	ldrb	r3, [r3, #3]
 80069c0:	2b02      	cmp	r3, #2
 80069c2:	f040 8332 	bne.w	800702a <USB_EPStartXfer+0x702>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	6a1a      	ldr	r2, [r3, #32]
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	691b      	ldr	r3, [r3, #16]
 80069ce:	429a      	cmp	r2, r3
 80069d0:	f240 82e4 	bls.w	8006f9c <USB_EPStartXfer+0x674>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	4413      	add	r3, r2
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	4ba4      	ldr	r3, [pc, #656]	@ (8006c74 <USB_EPStartXfer+0x34c>)
 80069e2:	4013      	ands	r3, r2
 80069e4:	613b      	str	r3, [r7, #16]
 80069e6:	687a      	ldr	r2, [r7, #4]
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	781b      	ldrb	r3, [r3, #0]
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	441a      	add	r2, r3
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80069f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069fa:	6013      	str	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	6a1a      	ldr	r2, [r3, #32]
 8006a00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a02:	1ad2      	subs	r2, r2, r3
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	009b      	lsls	r3, r3, #2
 8006a10:	4413      	add	r3, r2
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	f000 8161 	beq.w	8006ce0 <USB_EPStartXfer+0x3b8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	785b      	ldrb	r3, [r3, #1]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d16a      	bne.n	8006afc <USB_EPStartXfer+0x1d4>
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	781b      	ldrb	r3, [r3, #0]
 8006a2a:	00db      	lsls	r3, r3, #3
 8006a2c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006a30:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006a34:	685a      	ldr	r2, [r3, #4]
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	781b      	ldrb	r3, [r3, #0]
 8006a3a:	00db      	lsls	r3, r3, #3
 8006a3c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006a40:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006a44:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8006a48:	605a      	str	r2, [r3, #4]
 8006a4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d112      	bne.n	8006a76 <USB_EPStartXfer+0x14e>
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	00db      	lsls	r3, r3, #3
 8006a56:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006a5a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006a5e:	685a      	ldr	r2, [r3, #4]
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	00db      	lsls	r3, r3, #3
 8006a66:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006a6a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006a6e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006a72:	605a      	str	r2, [r3, #4]
 8006a74:	e06a      	b.n	8006b4c <USB_EPStartXfer+0x224>
 8006a76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a78:	2b3e      	cmp	r3, #62	@ 0x3e
 8006a7a:	d81e      	bhi.n	8006aba <USB_EPStartXfer+0x192>
 8006a7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a7e:	085b      	lsrs	r3, r3, #1
 8006a80:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a84:	f003 0301 	and.w	r3, r3, #1
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d002      	beq.n	8006a92 <USB_EPStartXfer+0x16a>
 8006a8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a8e:	3301      	adds	r3, #1
 8006a90:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	00db      	lsls	r3, r3, #3
 8006a98:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006a9c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006aa0:	6859      	ldr	r1, [r3, #4]
 8006aa2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006aa4:	069a      	lsls	r2, r3, #26
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	781b      	ldrb	r3, [r3, #0]
 8006aaa:	00db      	lsls	r3, r3, #3
 8006aac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006ab0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006ab4:	430a      	orrs	r2, r1
 8006ab6:	605a      	str	r2, [r3, #4]
 8006ab8:	e048      	b.n	8006b4c <USB_EPStartXfer+0x224>
 8006aba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006abc:	095b      	lsrs	r3, r3, #5
 8006abe:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ac0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ac2:	f003 031f 	and.w	r3, r3, #31
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d102      	bne.n	8006ad0 <USB_EPStartXfer+0x1a8>
 8006aca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006acc:	3b01      	subs	r3, #1
 8006ace:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	781b      	ldrb	r3, [r3, #0]
 8006ad4:	00db      	lsls	r3, r3, #3
 8006ad6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006ada:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006ade:	685a      	ldr	r2, [r3, #4]
 8006ae0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ae2:	069b      	lsls	r3, r3, #26
 8006ae4:	431a      	orrs	r2, r3
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	781b      	ldrb	r3, [r3, #0]
 8006aea:	00db      	lsls	r3, r3, #3
 8006aec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006af0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006af4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006af8:	605a      	str	r2, [r3, #4]
 8006afa:	e027      	b.n	8006b4c <USB_EPStartXfer+0x224>
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	785b      	ldrb	r3, [r3, #1]
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d123      	bne.n	8006b4c <USB_EPStartXfer+0x224>
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	781b      	ldrb	r3, [r3, #0]
 8006b08:	00db      	lsls	r3, r3, #3
 8006b0a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006b0e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006b12:	685a      	ldr	r2, [r3, #4]
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	00db      	lsls	r3, r3, #3
 8006b1a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006b1e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006b22:	b292      	uxth	r2, r2
 8006b24:	605a      	str	r2, [r3, #4]
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	781b      	ldrb	r3, [r3, #0]
 8006b2a:	00db      	lsls	r3, r3, #3
 8006b2c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006b30:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006b34:	6859      	ldr	r1, [r3, #4]
 8006b36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b38:	041a      	lsls	r2, r3, #16
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	00db      	lsls	r3, r3, #3
 8006b40:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006b44:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006b48:	430a      	orrs	r2, r1
 8006b4a:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	895b      	ldrh	r3, [r3, #10]
 8006b50:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	6959      	ldr	r1, [r3, #20]
 8006b56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	8b7a      	ldrh	r2, [r7, #26]
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f001 f859 	bl	8007c14 <USB_WritePMA>
            ep->xfer_buff += len;
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	695a      	ldr	r2, [r3, #20]
 8006b66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b68:	441a      	add	r2, r3
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	6a1a      	ldr	r2, [r3, #32]
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	691b      	ldr	r3, [r3, #16]
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d906      	bls.n	8006b88 <USB_EPStartXfer+0x260>
            {
              ep->xfer_len_db -= len;
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	6a1a      	ldr	r2, [r3, #32]
 8006b7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b80:	1ad2      	subs	r2, r2, r3
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	621a      	str	r2, [r3, #32]
 8006b86:	e005      	b.n	8006b94 <USB_EPStartXfer+0x26c>
            }
            else
            {
              len = ep->xfer_len_db;
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	6a1b      	ldr	r3, [r3, #32]
 8006b8c:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	2200      	movs	r2, #0
 8006b92:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	785b      	ldrb	r3, [r3, #1]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d16d      	bne.n	8006c78 <USB_EPStartXfer+0x350>
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	781b      	ldrb	r3, [r3, #0]
 8006ba0:	00db      	lsls	r3, r3, #3
 8006ba2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006ba6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006baa:	681a      	ldr	r2, [r3, #0]
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	00db      	lsls	r3, r3, #3
 8006bb2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006bb6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006bba:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8006bbe:	601a      	str	r2, [r3, #0]
 8006bc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d112      	bne.n	8006bec <USB_EPStartXfer+0x2c4>
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	00db      	lsls	r3, r3, #3
 8006bcc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006bd0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	00db      	lsls	r3, r3, #3
 8006bdc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006be0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006be4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006be8:	601a      	str	r2, [r3, #0]
 8006bea:	e06d      	b.n	8006cc8 <USB_EPStartXfer+0x3a0>
 8006bec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006bee:	2b3e      	cmp	r3, #62	@ 0x3e
 8006bf0:	d81e      	bhi.n	8006c30 <USB_EPStartXfer+0x308>
 8006bf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006bf4:	085b      	lsrs	r3, r3, #1
 8006bf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006bf8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006bfa:	f003 0301 	and.w	r3, r3, #1
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d002      	beq.n	8006c08 <USB_EPStartXfer+0x2e0>
 8006c02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c04:	3301      	adds	r3, #1
 8006c06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	00db      	lsls	r3, r3, #3
 8006c0e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006c12:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006c16:	6819      	ldr	r1, [r3, #0]
 8006c18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c1a:	069a      	lsls	r2, r3, #26
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	781b      	ldrb	r3, [r3, #0]
 8006c20:	00db      	lsls	r3, r3, #3
 8006c22:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006c26:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006c2a:	430a      	orrs	r2, r1
 8006c2c:	601a      	str	r2, [r3, #0]
 8006c2e:	e04b      	b.n	8006cc8 <USB_EPStartXfer+0x3a0>
 8006c30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c32:	095b      	lsrs	r3, r3, #5
 8006c34:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c38:	f003 031f 	and.w	r3, r3, #31
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d102      	bne.n	8006c46 <USB_EPStartXfer+0x31e>
 8006c40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c42:	3b01      	subs	r3, #1
 8006c44:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	781b      	ldrb	r3, [r3, #0]
 8006c4a:	00db      	lsls	r3, r3, #3
 8006c4c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006c50:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c58:	069b      	lsls	r3, r3, #26
 8006c5a:	431a      	orrs	r2, r3
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	00db      	lsls	r3, r3, #3
 8006c62:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006c66:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006c6a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006c6e:	601a      	str	r2, [r3, #0]
 8006c70:	e02a      	b.n	8006cc8 <USB_EPStartXfer+0x3a0>
 8006c72:	bf00      	nop
 8006c74:	07ff8f8f 	.word	0x07ff8f8f
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	785b      	ldrb	r3, [r3, #1]
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d123      	bne.n	8006cc8 <USB_EPStartXfer+0x3a0>
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	00db      	lsls	r3, r3, #3
 8006c86:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006c8a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	00db      	lsls	r3, r3, #3
 8006c96:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006c9a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006c9e:	b292      	uxth	r2, r2
 8006ca0:	601a      	str	r2, [r3, #0]
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	00db      	lsls	r3, r3, #3
 8006ca8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006cac:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006cb0:	6819      	ldr	r1, [r3, #0]
 8006cb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006cb4:	041a      	lsls	r2, r3, #16
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	781b      	ldrb	r3, [r3, #0]
 8006cba:	00db      	lsls	r3, r3, #3
 8006cbc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006cc0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006cc4:	430a      	orrs	r2, r1
 8006cc6:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	891b      	ldrh	r3, [r3, #8]
 8006ccc:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	6959      	ldr	r1, [r3, #20]
 8006cd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	8b7a      	ldrh	r2, [r7, #26]
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f000 ff9b 	bl	8007c14 <USB_WritePMA>
 8006cde:	e2fd      	b.n	80072dc <USB_EPStartXfer+0x9b4>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	785b      	ldrb	r3, [r3, #1]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d16a      	bne.n	8006dbe <USB_EPStartXfer+0x496>
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	00db      	lsls	r3, r3, #3
 8006cee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006cf2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	00db      	lsls	r3, r3, #3
 8006cfe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006d02:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006d06:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8006d0a:	601a      	str	r2, [r3, #0]
 8006d0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d112      	bne.n	8006d38 <USB_EPStartXfer+0x410>
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	00db      	lsls	r3, r3, #3
 8006d18:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006d1c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	00db      	lsls	r3, r3, #3
 8006d28:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006d2c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006d30:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006d34:	601a      	str	r2, [r3, #0]
 8006d36:	e06a      	b.n	8006e0e <USB_EPStartXfer+0x4e6>
 8006d38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d3a:	2b3e      	cmp	r3, #62	@ 0x3e
 8006d3c:	d81e      	bhi.n	8006d7c <USB_EPStartXfer+0x454>
 8006d3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d40:	085b      	lsrs	r3, r3, #1
 8006d42:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d46:	f003 0301 	and.w	r3, r3, #1
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d002      	beq.n	8006d54 <USB_EPStartXfer+0x42c>
 8006d4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d50:	3301      	adds	r3, #1
 8006d52:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	00db      	lsls	r3, r3, #3
 8006d5a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006d5e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006d62:	6819      	ldr	r1, [r3, #0]
 8006d64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d66:	069a      	lsls	r2, r3, #26
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	781b      	ldrb	r3, [r3, #0]
 8006d6c:	00db      	lsls	r3, r3, #3
 8006d6e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006d72:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006d76:	430a      	orrs	r2, r1
 8006d78:	601a      	str	r2, [r3, #0]
 8006d7a:	e048      	b.n	8006e0e <USB_EPStartXfer+0x4e6>
 8006d7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d7e:	095b      	lsrs	r3, r3, #5
 8006d80:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d84:	f003 031f 	and.w	r3, r3, #31
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d102      	bne.n	8006d92 <USB_EPStartXfer+0x46a>
 8006d8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d8e:	3b01      	subs	r3, #1
 8006d90:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	00db      	lsls	r3, r3, #3
 8006d98:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006d9c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006da0:	681a      	ldr	r2, [r3, #0]
 8006da2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006da4:	069b      	lsls	r3, r3, #26
 8006da6:	431a      	orrs	r2, r3
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	00db      	lsls	r3, r3, #3
 8006dae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006db2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006db6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006dba:	601a      	str	r2, [r3, #0]
 8006dbc:	e027      	b.n	8006e0e <USB_EPStartXfer+0x4e6>
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	785b      	ldrb	r3, [r3, #1]
 8006dc2:	2b01      	cmp	r3, #1
 8006dc4:	d123      	bne.n	8006e0e <USB_EPStartXfer+0x4e6>
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	781b      	ldrb	r3, [r3, #0]
 8006dca:	00db      	lsls	r3, r3, #3
 8006dcc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006dd0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	00db      	lsls	r3, r3, #3
 8006ddc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006de0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006de4:	b292      	uxth	r2, r2
 8006de6:	601a      	str	r2, [r3, #0]
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	781b      	ldrb	r3, [r3, #0]
 8006dec:	00db      	lsls	r3, r3, #3
 8006dee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006df2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006df6:	6819      	ldr	r1, [r3, #0]
 8006df8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006dfa:	041a      	lsls	r2, r3, #16
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	00db      	lsls	r3, r3, #3
 8006e02:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006e06:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006e0a:	430a      	orrs	r2, r1
 8006e0c:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	891b      	ldrh	r3, [r3, #8]
 8006e12:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	6959      	ldr	r1, [r3, #20]
 8006e18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	8b7a      	ldrh	r2, [r7, #26]
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f000 fef8 	bl	8007c14 <USB_WritePMA>
            ep->xfer_buff += len;
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	695a      	ldr	r2, [r3, #20]
 8006e28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e2a:	441a      	add	r2, r3
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	6a1a      	ldr	r2, [r3, #32]
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	691b      	ldr	r3, [r3, #16]
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d906      	bls.n	8006e4a <USB_EPStartXfer+0x522>
            {
              ep->xfer_len_db -= len;
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	6a1a      	ldr	r2, [r3, #32]
 8006e40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e42:	1ad2      	subs	r2, r2, r3
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	621a      	str	r2, [r3, #32]
 8006e48:	e005      	b.n	8006e56 <USB_EPStartXfer+0x52e>
            }
            else
            {
              len = ep->xfer_len_db;
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	6a1b      	ldr	r3, [r3, #32]
 8006e4e:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	2200      	movs	r2, #0
 8006e54:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	785b      	ldrb	r3, [r3, #1]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d16a      	bne.n	8006f34 <USB_EPStartXfer+0x60c>
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	00db      	lsls	r3, r3, #3
 8006e64:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006e68:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006e6c:	685a      	ldr	r2, [r3, #4]
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	781b      	ldrb	r3, [r3, #0]
 8006e72:	00db      	lsls	r3, r3, #3
 8006e74:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006e78:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006e7c:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8006e80:	605a      	str	r2, [r3, #4]
 8006e82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d112      	bne.n	8006eae <USB_EPStartXfer+0x586>
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	781b      	ldrb	r3, [r3, #0]
 8006e8c:	00db      	lsls	r3, r3, #3
 8006e8e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006e92:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006e96:	685a      	ldr	r2, [r3, #4]
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	00db      	lsls	r3, r3, #3
 8006e9e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006ea2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006ea6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006eaa:	605a      	str	r2, [r3, #4]
 8006eac:	e06a      	b.n	8006f84 <USB_EPStartXfer+0x65c>
 8006eae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006eb0:	2b3e      	cmp	r3, #62	@ 0x3e
 8006eb2:	d81e      	bhi.n	8006ef2 <USB_EPStartXfer+0x5ca>
 8006eb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006eb6:	085b      	lsrs	r3, r3, #1
 8006eb8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006eba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ebc:	f003 0301 	and.w	r3, r3, #1
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d002      	beq.n	8006eca <USB_EPStartXfer+0x5a2>
 8006ec4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	00db      	lsls	r3, r3, #3
 8006ed0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006ed4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006ed8:	6859      	ldr	r1, [r3, #4]
 8006eda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006edc:	069a      	lsls	r2, r3, #26
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	781b      	ldrb	r3, [r3, #0]
 8006ee2:	00db      	lsls	r3, r3, #3
 8006ee4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006ee8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006eec:	430a      	orrs	r2, r1
 8006eee:	605a      	str	r2, [r3, #4]
 8006ef0:	e048      	b.n	8006f84 <USB_EPStartXfer+0x65c>
 8006ef2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ef4:	095b      	lsrs	r3, r3, #5
 8006ef6:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ef8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006efa:	f003 031f 	and.w	r3, r3, #31
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d102      	bne.n	8006f08 <USB_EPStartXfer+0x5e0>
 8006f02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f04:	3b01      	subs	r3, #1
 8006f06:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	781b      	ldrb	r3, [r3, #0]
 8006f0c:	00db      	lsls	r3, r3, #3
 8006f0e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006f12:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006f16:	685a      	ldr	r2, [r3, #4]
 8006f18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f1a:	069b      	lsls	r3, r3, #26
 8006f1c:	431a      	orrs	r2, r3
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	00db      	lsls	r3, r3, #3
 8006f24:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006f28:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006f2c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006f30:	605a      	str	r2, [r3, #4]
 8006f32:	e027      	b.n	8006f84 <USB_EPStartXfer+0x65c>
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	785b      	ldrb	r3, [r3, #1]
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d123      	bne.n	8006f84 <USB_EPStartXfer+0x65c>
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	00db      	lsls	r3, r3, #3
 8006f42:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006f46:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006f4a:	685a      	ldr	r2, [r3, #4]
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	00db      	lsls	r3, r3, #3
 8006f52:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006f56:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006f5a:	b292      	uxth	r2, r2
 8006f5c:	605a      	str	r2, [r3, #4]
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	781b      	ldrb	r3, [r3, #0]
 8006f62:	00db      	lsls	r3, r3, #3
 8006f64:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006f68:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006f6c:	6859      	ldr	r1, [r3, #4]
 8006f6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f70:	041a      	lsls	r2, r3, #16
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	781b      	ldrb	r3, [r3, #0]
 8006f76:	00db      	lsls	r3, r3, #3
 8006f78:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006f7c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006f80:	430a      	orrs	r2, r1
 8006f82:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	895b      	ldrh	r3, [r3, #10]
 8006f88:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	6959      	ldr	r1, [r3, #20]
 8006f8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	8b7a      	ldrh	r2, [r7, #26]
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f000 fe3d 	bl	8007c14 <USB_WritePMA>
 8006f9a:	e19f      	b.n	80072dc <USB_EPStartXfer+0x9b4>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	6a1b      	ldr	r3, [r3, #32]
 8006fa0:	657b      	str	r3, [r7, #84]	@ 0x54

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006fa2:	687a      	ldr	r2, [r7, #4]
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	781b      	ldrb	r3, [r3, #0]
 8006fa8:	009b      	lsls	r3, r3, #2
 8006faa:	4413      	add	r3, r2
 8006fac:	681a      	ldr	r2, [r3, #0]
 8006fae:	4ba0      	ldr	r3, [pc, #640]	@ (8007230 <USB_EPStartXfer+0x908>)
 8006fb0:	4013      	ands	r3, r2
 8006fb2:	617b      	str	r3, [r7, #20]
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	441a      	add	r2, r3
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006fc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fc8:	6013      	str	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	781b      	ldrb	r3, [r3, #0]
 8006fce:	00db      	lsls	r3, r3, #3
 8006fd0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006fd4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	781b      	ldrb	r3, [r3, #0]
 8006fde:	00db      	lsls	r3, r3, #3
 8006fe0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006fe4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006fe8:	b292      	uxth	r2, r2
 8006fea:	601a      	str	r2, [r3, #0]
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	00db      	lsls	r3, r3, #3
 8006ff2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006ff6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006ffa:	6819      	ldr	r1, [r3, #0]
 8006ffc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ffe:	041a      	lsls	r2, r3, #16
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	781b      	ldrb	r3, [r3, #0]
 8007004:	00db      	lsls	r3, r3, #3
 8007006:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800700a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800700e:	430a      	orrs	r2, r1
 8007010:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	891b      	ldrh	r3, [r3, #8]
 8007016:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	6959      	ldr	r1, [r3, #20]
 800701c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800701e:	b29b      	uxth	r3, r3
 8007020:	8b7a      	ldrh	r2, [r7, #26]
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f000 fdf6 	bl	8007c14 <USB_WritePMA>
 8007028:	e158      	b.n	80072dc <USB_EPStartXfer+0x9b4>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	6a1a      	ldr	r2, [r3, #32]
 800702e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007030:	1ad2      	subs	r2, r2, r3
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007036:	687a      	ldr	r2, [r7, #4]
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	781b      	ldrb	r3, [r3, #0]
 800703c:	009b      	lsls	r3, r3, #2
 800703e:	4413      	add	r3, r2
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007046:	2b00      	cmp	r3, #0
 8007048:	f000 80a3 	beq.w	8007192 <USB_EPStartXfer+0x86a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	785b      	ldrb	r3, [r3, #1]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d16a      	bne.n	800712a <USB_EPStartXfer+0x802>
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	781b      	ldrb	r3, [r3, #0]
 8007058:	00db      	lsls	r3, r3, #3
 800705a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800705e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007062:	685a      	ldr	r2, [r3, #4]
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	781b      	ldrb	r3, [r3, #0]
 8007068:	00db      	lsls	r3, r3, #3
 800706a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800706e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007072:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8007076:	605a      	str	r2, [r3, #4]
 8007078:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800707a:	2b00      	cmp	r3, #0
 800707c:	d112      	bne.n	80070a4 <USB_EPStartXfer+0x77c>
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	781b      	ldrb	r3, [r3, #0]
 8007082:	00db      	lsls	r3, r3, #3
 8007084:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007088:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800708c:	685a      	ldr	r2, [r3, #4]
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	781b      	ldrb	r3, [r3, #0]
 8007092:	00db      	lsls	r3, r3, #3
 8007094:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007098:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800709c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80070a0:	605a      	str	r2, [r3, #4]
 80070a2:	e06a      	b.n	800717a <USB_EPStartXfer+0x852>
 80070a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070a6:	2b3e      	cmp	r3, #62	@ 0x3e
 80070a8:	d81e      	bhi.n	80070e8 <USB_EPStartXfer+0x7c0>
 80070aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070ac:	085b      	lsrs	r3, r3, #1
 80070ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80070b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070b2:	f003 0301 	and.w	r3, r3, #1
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d002      	beq.n	80070c0 <USB_EPStartXfer+0x798>
 80070ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070bc:	3301      	adds	r3, #1
 80070be:	643b      	str	r3, [r7, #64]	@ 0x40
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	781b      	ldrb	r3, [r3, #0]
 80070c4:	00db      	lsls	r3, r3, #3
 80070c6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80070ca:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80070ce:	6859      	ldr	r1, [r3, #4]
 80070d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070d2:	069a      	lsls	r2, r3, #26
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	00db      	lsls	r3, r3, #3
 80070da:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80070de:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80070e2:	430a      	orrs	r2, r1
 80070e4:	605a      	str	r2, [r3, #4]
 80070e6:	e048      	b.n	800717a <USB_EPStartXfer+0x852>
 80070e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070ea:	095b      	lsrs	r3, r3, #5
 80070ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80070ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070f0:	f003 031f 	and.w	r3, r3, #31
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d102      	bne.n	80070fe <USB_EPStartXfer+0x7d6>
 80070f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070fa:	3b01      	subs	r3, #1
 80070fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	781b      	ldrb	r3, [r3, #0]
 8007102:	00db      	lsls	r3, r3, #3
 8007104:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007108:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800710c:	685a      	ldr	r2, [r3, #4]
 800710e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007110:	069b      	lsls	r3, r3, #26
 8007112:	431a      	orrs	r2, r3
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	781b      	ldrb	r3, [r3, #0]
 8007118:	00db      	lsls	r3, r3, #3
 800711a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800711e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007122:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8007126:	605a      	str	r2, [r3, #4]
 8007128:	e027      	b.n	800717a <USB_EPStartXfer+0x852>
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	785b      	ldrb	r3, [r3, #1]
 800712e:	2b01      	cmp	r3, #1
 8007130:	d123      	bne.n	800717a <USB_EPStartXfer+0x852>
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	00db      	lsls	r3, r3, #3
 8007138:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800713c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007140:	685a      	ldr	r2, [r3, #4]
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	00db      	lsls	r3, r3, #3
 8007148:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800714c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007150:	b292      	uxth	r2, r2
 8007152:	605a      	str	r2, [r3, #4]
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	781b      	ldrb	r3, [r3, #0]
 8007158:	00db      	lsls	r3, r3, #3
 800715a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800715e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007162:	6859      	ldr	r1, [r3, #4]
 8007164:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007166:	041a      	lsls	r2, r3, #16
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	781b      	ldrb	r3, [r3, #0]
 800716c:	00db      	lsls	r3, r3, #3
 800716e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007172:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007176:	430a      	orrs	r2, r1
 8007178:	605a      	str	r2, [r3, #4]
          pmabuffer = ep->pmaaddr1;
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	895b      	ldrh	r3, [r3, #10]
 800717e:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	6959      	ldr	r1, [r3, #20]
 8007184:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007186:	b29b      	uxth	r3, r3
 8007188:	8b7a      	ldrh	r2, [r7, #26]
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f000 fd42 	bl	8007c14 <USB_WritePMA>
 8007190:	e0a4      	b.n	80072dc <USB_EPStartXfer+0x9b4>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	785b      	ldrb	r3, [r3, #1]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d16d      	bne.n	8007276 <USB_EPStartXfer+0x94e>
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	00db      	lsls	r3, r3, #3
 80071a0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80071a4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	781b      	ldrb	r3, [r3, #0]
 80071ae:	00db      	lsls	r3, r3, #3
 80071b0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80071b4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80071b8:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80071bc:	601a      	str	r2, [r3, #0]
 80071be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d112      	bne.n	80071ea <USB_EPStartXfer+0x8c2>
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	781b      	ldrb	r3, [r3, #0]
 80071c8:	00db      	lsls	r3, r3, #3
 80071ca:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80071ce:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	781b      	ldrb	r3, [r3, #0]
 80071d8:	00db      	lsls	r3, r3, #3
 80071da:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80071de:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80071e2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80071e6:	601a      	str	r2, [r3, #0]
 80071e8:	e06d      	b.n	80072c6 <USB_EPStartXfer+0x99e>
 80071ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80071ec:	2b3e      	cmp	r3, #62	@ 0x3e
 80071ee:	d821      	bhi.n	8007234 <USB_EPStartXfer+0x90c>
 80071f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80071f2:	085b      	lsrs	r3, r3, #1
 80071f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80071f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80071f8:	f003 0301 	and.w	r3, r3, #1
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d002      	beq.n	8007206 <USB_EPStartXfer+0x8de>
 8007200:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007202:	3301      	adds	r3, #1
 8007204:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	781b      	ldrb	r3, [r3, #0]
 800720a:	00db      	lsls	r3, r3, #3
 800720c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007210:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007214:	6819      	ldr	r1, [r3, #0]
 8007216:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007218:	069a      	lsls	r2, r3, #26
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	781b      	ldrb	r3, [r3, #0]
 800721e:	00db      	lsls	r3, r3, #3
 8007220:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007224:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007228:	430a      	orrs	r2, r1
 800722a:	601a      	str	r2, [r3, #0]
 800722c:	e04b      	b.n	80072c6 <USB_EPStartXfer+0x99e>
 800722e:	bf00      	nop
 8007230:	07ff8e8f 	.word	0x07ff8e8f
 8007234:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007236:	095b      	lsrs	r3, r3, #5
 8007238:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800723a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800723c:	f003 031f 	and.w	r3, r3, #31
 8007240:	2b00      	cmp	r3, #0
 8007242:	d102      	bne.n	800724a <USB_EPStartXfer+0x922>
 8007244:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007246:	3b01      	subs	r3, #1
 8007248:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	781b      	ldrb	r3, [r3, #0]
 800724e:	00db      	lsls	r3, r3, #3
 8007250:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007254:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800725c:	069b      	lsls	r3, r3, #26
 800725e:	431a      	orrs	r2, r3
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	781b      	ldrb	r3, [r3, #0]
 8007264:	00db      	lsls	r3, r3, #3
 8007266:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800726a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800726e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8007272:	601a      	str	r2, [r3, #0]
 8007274:	e027      	b.n	80072c6 <USB_EPStartXfer+0x99e>
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	785b      	ldrb	r3, [r3, #1]
 800727a:	2b01      	cmp	r3, #1
 800727c:	d123      	bne.n	80072c6 <USB_EPStartXfer+0x99e>
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	00db      	lsls	r3, r3, #3
 8007284:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007288:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800728c:	681a      	ldr	r2, [r3, #0]
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	781b      	ldrb	r3, [r3, #0]
 8007292:	00db      	lsls	r3, r3, #3
 8007294:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007298:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800729c:	b292      	uxth	r2, r2
 800729e:	601a      	str	r2, [r3, #0]
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	00db      	lsls	r3, r3, #3
 80072a6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80072aa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80072ae:	6819      	ldr	r1, [r3, #0]
 80072b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072b2:	041a      	lsls	r2, r3, #16
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	00db      	lsls	r3, r3, #3
 80072ba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80072be:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80072c2:	430a      	orrs	r2, r1
 80072c4:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	891b      	ldrh	r3, [r3, #8]
 80072ca:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	6959      	ldr	r1, [r3, #20]
 80072d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	8b7a      	ldrh	r2, [r7, #26]
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f000 fc9c 	bl	8007c14 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80072dc:	687a      	ldr	r2, [r7, #4]
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	781b      	ldrb	r3, [r3, #0]
 80072e2:	009b      	lsls	r3, r3, #2
 80072e4:	4413      	add	r3, r2
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	4b8b      	ldr	r3, [pc, #556]	@ (8007518 <USB_EPStartXfer+0xbf0>)
 80072ea:	4013      	ands	r3, r2
 80072ec:	60fb      	str	r3, [r7, #12]
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	f083 0310 	eor.w	r3, r3, #16
 80072f4:	60fb      	str	r3, [r7, #12]
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	f083 0320 	eor.w	r3, r3, #32
 80072fc:	60fb      	str	r3, [r7, #12]
 80072fe:	687a      	ldr	r2, [r7, #4]
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	781b      	ldrb	r3, [r3, #0]
 8007304:	009b      	lsls	r3, r3, #2
 8007306:	441a      	add	r2, r3
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800730e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007312:	6013      	str	r3, [r2, #0]
 8007314:	e36b      	b.n	80079ee <USB_EPStartXfer+0x10c6>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	7b1b      	ldrb	r3, [r3, #12]
 800731a:	2b00      	cmp	r3, #0
 800731c:	f040 8081 	bne.w	8007422 <USB_EPStartXfer+0xafa>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	699a      	ldr	r2, [r3, #24]
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	691b      	ldr	r3, [r3, #16]
 8007328:	429a      	cmp	r2, r3
 800732a:	d909      	bls.n	8007340 <USB_EPStartXfer+0xa18>
      {
        len = ep->maxpacket;
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	691b      	ldr	r3, [r3, #16]
 8007330:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len -= len;
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	699a      	ldr	r2, [r3, #24]
 8007336:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007338:	1ad2      	subs	r2, r2, r3
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	619a      	str	r2, [r3, #24]
 800733e:	e005      	b.n	800734c <USB_EPStartXfer+0xa24>
      }
      else
      {
        len = ep->xfer_len;
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	699b      	ldr	r3, [r3, #24]
 8007344:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len = 0U;
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	2200      	movs	r2, #0
 800734a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	00db      	lsls	r3, r3, #3
 8007352:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007356:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800735a:	685a      	ldr	r2, [r3, #4]
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	781b      	ldrb	r3, [r3, #0]
 8007360:	00db      	lsls	r3, r3, #3
 8007362:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007366:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800736a:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800736e:	605a      	str	r2, [r3, #4]
 8007370:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007372:	2b00      	cmp	r3, #0
 8007374:	d112      	bne.n	800739c <USB_EPStartXfer+0xa74>
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	781b      	ldrb	r3, [r3, #0]
 800737a:	00db      	lsls	r3, r3, #3
 800737c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007380:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007384:	685a      	ldr	r2, [r3, #4]
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	781b      	ldrb	r3, [r3, #0]
 800738a:	00db      	lsls	r3, r3, #3
 800738c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007390:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007394:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8007398:	605a      	str	r2, [r3, #4]
 800739a:	e30c      	b.n	80079b6 <USB_EPStartXfer+0x108e>
 800739c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800739e:	2b3e      	cmp	r3, #62	@ 0x3e
 80073a0:	d81e      	bhi.n	80073e0 <USB_EPStartXfer+0xab8>
 80073a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80073a4:	085b      	lsrs	r3, r3, #1
 80073a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80073a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80073aa:	f003 0301 	and.w	r3, r3, #1
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d002      	beq.n	80073b8 <USB_EPStartXfer+0xa90>
 80073b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073b4:	3301      	adds	r3, #1
 80073b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	00db      	lsls	r3, r3, #3
 80073be:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80073c2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80073c6:	6859      	ldr	r1, [r3, #4]
 80073c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073ca:	069a      	lsls	r2, r3, #26
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	781b      	ldrb	r3, [r3, #0]
 80073d0:	00db      	lsls	r3, r3, #3
 80073d2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80073d6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80073da:	430a      	orrs	r2, r1
 80073dc:	605a      	str	r2, [r3, #4]
 80073de:	e2ea      	b.n	80079b6 <USB_EPStartXfer+0x108e>
 80073e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80073e2:	095b      	lsrs	r3, r3, #5
 80073e4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80073e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80073e8:	f003 031f 	and.w	r3, r3, #31
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d102      	bne.n	80073f6 <USB_EPStartXfer+0xace>
 80073f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073f2:	3b01      	subs	r3, #1
 80073f4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	781b      	ldrb	r3, [r3, #0]
 80073fa:	00db      	lsls	r3, r3, #3
 80073fc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007400:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007404:	685a      	ldr	r2, [r3, #4]
 8007406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007408:	069b      	lsls	r3, r3, #26
 800740a:	431a      	orrs	r2, r3
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	00db      	lsls	r3, r3, #3
 8007412:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007416:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800741a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800741e:	605a      	str	r2, [r3, #4]
 8007420:	e2c9      	b.n	80079b6 <USB_EPStartXfer+0x108e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	78db      	ldrb	r3, [r3, #3]
 8007426:	2b02      	cmp	r3, #2
 8007428:	f040 8176 	bne.w	8007718 <USB_EPStartXfer+0xdf0>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	785b      	ldrb	r3, [r3, #1]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d173      	bne.n	800751c <USB_EPStartXfer+0xbf4>
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	781b      	ldrb	r3, [r3, #0]
 8007438:	00db      	lsls	r3, r3, #3
 800743a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800743e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007442:	681a      	ldr	r2, [r3, #0]
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	00db      	lsls	r3, r3, #3
 800744a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800744e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007452:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8007456:	601a      	str	r2, [r3, #0]
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	691b      	ldr	r3, [r3, #16]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d112      	bne.n	8007486 <USB_EPStartXfer+0xb5e>
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	00db      	lsls	r3, r3, #3
 8007466:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800746a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800746e:	681a      	ldr	r2, [r3, #0]
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	00db      	lsls	r3, r3, #3
 8007476:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800747a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800747e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8007482:	601a      	str	r2, [r3, #0]
 8007484:	e073      	b.n	800756e <USB_EPStartXfer+0xc46>
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	691b      	ldr	r3, [r3, #16]
 800748a:	2b3e      	cmp	r3, #62	@ 0x3e
 800748c:	d820      	bhi.n	80074d0 <USB_EPStartXfer+0xba8>
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	691b      	ldr	r3, [r3, #16]
 8007492:	085b      	lsrs	r3, r3, #1
 8007494:	637b      	str	r3, [r7, #52]	@ 0x34
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	691b      	ldr	r3, [r3, #16]
 800749a:	f003 0301 	and.w	r3, r3, #1
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d002      	beq.n	80074a8 <USB_EPStartXfer+0xb80>
 80074a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074a4:	3301      	adds	r3, #1
 80074a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	781b      	ldrb	r3, [r3, #0]
 80074ac:	00db      	lsls	r3, r3, #3
 80074ae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80074b2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80074b6:	6819      	ldr	r1, [r3, #0]
 80074b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074ba:	069a      	lsls	r2, r3, #26
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	781b      	ldrb	r3, [r3, #0]
 80074c0:	00db      	lsls	r3, r3, #3
 80074c2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80074c6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80074ca:	430a      	orrs	r2, r1
 80074cc:	601a      	str	r2, [r3, #0]
 80074ce:	e04e      	b.n	800756e <USB_EPStartXfer+0xc46>
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	691b      	ldr	r3, [r3, #16]
 80074d4:	095b      	lsrs	r3, r3, #5
 80074d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	691b      	ldr	r3, [r3, #16]
 80074dc:	f003 031f 	and.w	r3, r3, #31
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d102      	bne.n	80074ea <USB_EPStartXfer+0xbc2>
 80074e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074e6:	3b01      	subs	r3, #1
 80074e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	781b      	ldrb	r3, [r3, #0]
 80074ee:	00db      	lsls	r3, r3, #3
 80074f0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80074f4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80074f8:	681a      	ldr	r2, [r3, #0]
 80074fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074fc:	069b      	lsls	r3, r3, #26
 80074fe:	431a      	orrs	r2, r3
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	00db      	lsls	r3, r3, #3
 8007506:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800750a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800750e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8007512:	601a      	str	r2, [r3, #0]
 8007514:	e02b      	b.n	800756e <USB_EPStartXfer+0xc46>
 8007516:	bf00      	nop
 8007518:	07ff8fbf 	.word	0x07ff8fbf
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	785b      	ldrb	r3, [r3, #1]
 8007520:	2b01      	cmp	r3, #1
 8007522:	d124      	bne.n	800756e <USB_EPStartXfer+0xc46>
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	781b      	ldrb	r3, [r3, #0]
 8007528:	00db      	lsls	r3, r3, #3
 800752a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800752e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	00db      	lsls	r3, r3, #3
 800753a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800753e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007542:	b292      	uxth	r2, r2
 8007544:	601a      	str	r2, [r3, #0]
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	00db      	lsls	r3, r3, #3
 800754c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007550:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007554:	6819      	ldr	r1, [r3, #0]
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	691b      	ldr	r3, [r3, #16]
 800755a:	041a      	lsls	r2, r3, #16
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	781b      	ldrb	r3, [r3, #0]
 8007560:	00db      	lsls	r3, r3, #3
 8007562:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007566:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800756a:	430a      	orrs	r2, r1
 800756c:	601a      	str	r2, [r3, #0]
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	785b      	ldrb	r3, [r3, #1]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d170      	bne.n	8007658 <USB_EPStartXfer+0xd30>
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	781b      	ldrb	r3, [r3, #0]
 800757a:	00db      	lsls	r3, r3, #3
 800757c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007580:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007584:	685a      	ldr	r2, [r3, #4]
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	781b      	ldrb	r3, [r3, #0]
 800758a:	00db      	lsls	r3, r3, #3
 800758c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007590:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007594:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8007598:	605a      	str	r2, [r3, #4]
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	691b      	ldr	r3, [r3, #16]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d112      	bne.n	80075c8 <USB_EPStartXfer+0xca0>
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	781b      	ldrb	r3, [r3, #0]
 80075a6:	00db      	lsls	r3, r3, #3
 80075a8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80075ac:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80075b0:	685a      	ldr	r2, [r3, #4]
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	781b      	ldrb	r3, [r3, #0]
 80075b6:	00db      	lsls	r3, r3, #3
 80075b8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80075bc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80075c0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80075c4:	605a      	str	r2, [r3, #4]
 80075c6:	e070      	b.n	80076aa <USB_EPStartXfer+0xd82>
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	691b      	ldr	r3, [r3, #16]
 80075cc:	2b3e      	cmp	r3, #62	@ 0x3e
 80075ce:	d820      	bhi.n	8007612 <USB_EPStartXfer+0xcea>
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	691b      	ldr	r3, [r3, #16]
 80075d4:	085b      	lsrs	r3, r3, #1
 80075d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	691b      	ldr	r3, [r3, #16]
 80075dc:	f003 0301 	and.w	r3, r3, #1
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d002      	beq.n	80075ea <USB_EPStartXfer+0xcc2>
 80075e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075e6:	3301      	adds	r3, #1
 80075e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	781b      	ldrb	r3, [r3, #0]
 80075ee:	00db      	lsls	r3, r3, #3
 80075f0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80075f4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80075f8:	6859      	ldr	r1, [r3, #4]
 80075fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075fc:	069a      	lsls	r2, r3, #26
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	781b      	ldrb	r3, [r3, #0]
 8007602:	00db      	lsls	r3, r3, #3
 8007604:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007608:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800760c:	430a      	orrs	r2, r1
 800760e:	605a      	str	r2, [r3, #4]
 8007610:	e04b      	b.n	80076aa <USB_EPStartXfer+0xd82>
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	691b      	ldr	r3, [r3, #16]
 8007616:	095b      	lsrs	r3, r3, #5
 8007618:	633b      	str	r3, [r7, #48]	@ 0x30
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	691b      	ldr	r3, [r3, #16]
 800761e:	f003 031f 	and.w	r3, r3, #31
 8007622:	2b00      	cmp	r3, #0
 8007624:	d102      	bne.n	800762c <USB_EPStartXfer+0xd04>
 8007626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007628:	3b01      	subs	r3, #1
 800762a:	633b      	str	r3, [r7, #48]	@ 0x30
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	00db      	lsls	r3, r3, #3
 8007632:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007636:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800763a:	685a      	ldr	r2, [r3, #4]
 800763c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800763e:	069b      	lsls	r3, r3, #26
 8007640:	431a      	orrs	r2, r3
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	00db      	lsls	r3, r3, #3
 8007648:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800764c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007650:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8007654:	605a      	str	r2, [r3, #4]
 8007656:	e028      	b.n	80076aa <USB_EPStartXfer+0xd82>
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	785b      	ldrb	r3, [r3, #1]
 800765c:	2b01      	cmp	r3, #1
 800765e:	d124      	bne.n	80076aa <USB_EPStartXfer+0xd82>
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	781b      	ldrb	r3, [r3, #0]
 8007664:	00db      	lsls	r3, r3, #3
 8007666:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800766a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800766e:	685a      	ldr	r2, [r3, #4]
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	781b      	ldrb	r3, [r3, #0]
 8007674:	00db      	lsls	r3, r3, #3
 8007676:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800767a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800767e:	b292      	uxth	r2, r2
 8007680:	605a      	str	r2, [r3, #4]
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	781b      	ldrb	r3, [r3, #0]
 8007686:	00db      	lsls	r3, r3, #3
 8007688:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800768c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007690:	6859      	ldr	r1, [r3, #4]
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	691b      	ldr	r3, [r3, #16]
 8007696:	041a      	lsls	r2, r3, #16
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	00db      	lsls	r3, r3, #3
 800769e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80076a2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80076a6:	430a      	orrs	r2, r1
 80076a8:	605a      	str	r2, [r3, #4]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	69db      	ldr	r3, [r3, #28]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	f000 8181 	beq.w	80079b6 <USB_EPStartXfer+0x108e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(USBx, ep->num);
 80076b4:	687a      	ldr	r2, [r7, #4]
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	009b      	lsls	r3, r3, #2
 80076bc:	4413      	add	r3, r2
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	84fb      	strh	r3, [r7, #38]	@ 0x26

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80076c2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80076c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d004      	beq.n	80076d6 <USB_EPStartXfer+0xdae>
 80076cc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80076ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d10b      	bne.n	80076ee <USB_EPStartXfer+0xdc6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80076d6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80076d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80076dc:	2b00      	cmp	r3, #0
 80076de:	f040 816a 	bne.w	80079b6 <USB_EPStartXfer+0x108e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80076e2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80076e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	f040 8164 	bne.w	80079b6 <USB_EPStartXfer+0x108e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80076ee:	687a      	ldr	r2, [r7, #4]
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	781b      	ldrb	r3, [r3, #0]
 80076f4:	009b      	lsls	r3, r3, #2
 80076f6:	4413      	add	r3, r2
 80076f8:	681a      	ldr	r2, [r3, #0]
 80076fa:	4b98      	ldr	r3, [pc, #608]	@ (800795c <USB_EPStartXfer+0x1034>)
 80076fc:	4013      	ands	r3, r2
 80076fe:	623b      	str	r3, [r7, #32]
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	009b      	lsls	r3, r3, #2
 8007708:	441a      	add	r2, r3
 800770a:	6a3b      	ldr	r3, [r7, #32]
 800770c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007710:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007714:	6013      	str	r3, [r2, #0]
 8007716:	e14e      	b.n	80079b6 <USB_EPStartXfer+0x108e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	78db      	ldrb	r3, [r3, #3]
 800771c:	2b01      	cmp	r3, #1
 800771e:	f040 8148 	bne.w	80079b2 <USB_EPStartXfer+0x108a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	699a      	ldr	r2, [r3, #24]
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	691b      	ldr	r3, [r3, #16]
 800772a:	429a      	cmp	r2, r3
 800772c:	d909      	bls.n	8007742 <USB_EPStartXfer+0xe1a>
        {
          len = ep->maxpacket;
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	691b      	ldr	r3, [r3, #16]
 8007732:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len -= len;
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	699a      	ldr	r2, [r3, #24]
 8007738:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800773a:	1ad2      	subs	r2, r2, r3
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	619a      	str	r2, [r3, #24]
 8007740:	e005      	b.n	800774e <USB_EPStartXfer+0xe26>
        }
        else
        {
          len = ep->xfer_len;
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	699b      	ldr	r3, [r3, #24]
 8007746:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len = 0U;
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	2200      	movs	r2, #0
 800774c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	785b      	ldrb	r3, [r3, #1]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d16a      	bne.n	800782c <USB_EPStartXfer+0xf04>
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	781b      	ldrb	r3, [r3, #0]
 800775a:	00db      	lsls	r3, r3, #3
 800775c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007760:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007764:	681a      	ldr	r2, [r3, #0]
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	781b      	ldrb	r3, [r3, #0]
 800776a:	00db      	lsls	r3, r3, #3
 800776c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007770:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007774:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8007778:	601a      	str	r2, [r3, #0]
 800777a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800777c:	2b00      	cmp	r3, #0
 800777e:	d112      	bne.n	80077a6 <USB_EPStartXfer+0xe7e>
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	00db      	lsls	r3, r3, #3
 8007786:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800778a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	781b      	ldrb	r3, [r3, #0]
 8007794:	00db      	lsls	r3, r3, #3
 8007796:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800779a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800779e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80077a2:	601a      	str	r2, [r3, #0]
 80077a4:	e06a      	b.n	800787c <USB_EPStartXfer+0xf54>
 80077a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077a8:	2b3e      	cmp	r3, #62	@ 0x3e
 80077aa:	d81e      	bhi.n	80077ea <USB_EPStartXfer+0xec2>
 80077ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077ae:	085b      	lsrs	r3, r3, #1
 80077b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80077b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077b4:	f003 0301 	and.w	r3, r3, #1
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d002      	beq.n	80077c2 <USB_EPStartXfer+0xe9a>
 80077bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077be:	3301      	adds	r3, #1
 80077c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	00db      	lsls	r3, r3, #3
 80077c8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80077cc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80077d0:	6819      	ldr	r1, [r3, #0]
 80077d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077d4:	069a      	lsls	r2, r3, #26
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	00db      	lsls	r3, r3, #3
 80077dc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80077e0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80077e4:	430a      	orrs	r2, r1
 80077e6:	601a      	str	r2, [r3, #0]
 80077e8:	e048      	b.n	800787c <USB_EPStartXfer+0xf54>
 80077ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077ec:	095b      	lsrs	r3, r3, #5
 80077ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80077f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077f2:	f003 031f 	and.w	r3, r3, #31
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d102      	bne.n	8007800 <USB_EPStartXfer+0xed8>
 80077fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077fc:	3b01      	subs	r3, #1
 80077fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	00db      	lsls	r3, r3, #3
 8007806:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800780a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800780e:	681a      	ldr	r2, [r3, #0]
 8007810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007812:	069b      	lsls	r3, r3, #26
 8007814:	431a      	orrs	r2, r3
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	781b      	ldrb	r3, [r3, #0]
 800781a:	00db      	lsls	r3, r3, #3
 800781c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007820:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007824:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8007828:	601a      	str	r2, [r3, #0]
 800782a:	e027      	b.n	800787c <USB_EPStartXfer+0xf54>
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	785b      	ldrb	r3, [r3, #1]
 8007830:	2b01      	cmp	r3, #1
 8007832:	d123      	bne.n	800787c <USB_EPStartXfer+0xf54>
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	00db      	lsls	r3, r3, #3
 800783a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800783e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007842:	681a      	ldr	r2, [r3, #0]
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	00db      	lsls	r3, r3, #3
 800784a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800784e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007852:	b292      	uxth	r2, r2
 8007854:	601a      	str	r2, [r3, #0]
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	781b      	ldrb	r3, [r3, #0]
 800785a:	00db      	lsls	r3, r3, #3
 800785c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007860:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007864:	6819      	ldr	r1, [r3, #0]
 8007866:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007868:	041a      	lsls	r2, r3, #16
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	781b      	ldrb	r3, [r3, #0]
 800786e:	00db      	lsls	r3, r3, #3
 8007870:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007874:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007878:	430a      	orrs	r2, r1
 800787a:	601a      	str	r2, [r3, #0]
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	785b      	ldrb	r3, [r3, #1]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d16d      	bne.n	8007960 <USB_EPStartXfer+0x1038>
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	781b      	ldrb	r3, [r3, #0]
 8007888:	00db      	lsls	r3, r3, #3
 800788a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800788e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007892:	685a      	ldr	r2, [r3, #4]
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	781b      	ldrb	r3, [r3, #0]
 8007898:	00db      	lsls	r3, r3, #3
 800789a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800789e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80078a2:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80078a6:	605a      	str	r2, [r3, #4]
 80078a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d112      	bne.n	80078d4 <USB_EPStartXfer+0xfac>
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	00db      	lsls	r3, r3, #3
 80078b4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80078b8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80078bc:	685a      	ldr	r2, [r3, #4]
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	781b      	ldrb	r3, [r3, #0]
 80078c2:	00db      	lsls	r3, r3, #3
 80078c4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80078c8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80078cc:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80078d0:	605a      	str	r2, [r3, #4]
 80078d2:	e070      	b.n	80079b6 <USB_EPStartXfer+0x108e>
 80078d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078d6:	2b3e      	cmp	r3, #62	@ 0x3e
 80078d8:	d81e      	bhi.n	8007918 <USB_EPStartXfer+0xff0>
 80078da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078dc:	085b      	lsrs	r3, r3, #1
 80078de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80078e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078e2:	f003 0301 	and.w	r3, r3, #1
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d002      	beq.n	80078f0 <USB_EPStartXfer+0xfc8>
 80078ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078ec:	3301      	adds	r3, #1
 80078ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	781b      	ldrb	r3, [r3, #0]
 80078f4:	00db      	lsls	r3, r3, #3
 80078f6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80078fa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80078fe:	6859      	ldr	r1, [r3, #4]
 8007900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007902:	069a      	lsls	r2, r3, #26
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	00db      	lsls	r3, r3, #3
 800790a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800790e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007912:	430a      	orrs	r2, r1
 8007914:	605a      	str	r2, [r3, #4]
 8007916:	e04e      	b.n	80079b6 <USB_EPStartXfer+0x108e>
 8007918:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800791a:	095b      	lsrs	r3, r3, #5
 800791c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800791e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007920:	f003 031f 	and.w	r3, r3, #31
 8007924:	2b00      	cmp	r3, #0
 8007926:	d102      	bne.n	800792e <USB_EPStartXfer+0x1006>
 8007928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800792a:	3b01      	subs	r3, #1
 800792c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	781b      	ldrb	r3, [r3, #0]
 8007932:	00db      	lsls	r3, r3, #3
 8007934:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007938:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800793c:	685a      	ldr	r2, [r3, #4]
 800793e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007940:	069b      	lsls	r3, r3, #26
 8007942:	431a      	orrs	r2, r3
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	781b      	ldrb	r3, [r3, #0]
 8007948:	00db      	lsls	r3, r3, #3
 800794a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800794e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007952:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8007956:	605a      	str	r2, [r3, #4]
 8007958:	e02d      	b.n	80079b6 <USB_EPStartXfer+0x108e>
 800795a:	bf00      	nop
 800795c:	07ff8f8f 	.word	0x07ff8f8f
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	785b      	ldrb	r3, [r3, #1]
 8007964:	2b01      	cmp	r3, #1
 8007966:	d126      	bne.n	80079b6 <USB_EPStartXfer+0x108e>
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	781b      	ldrb	r3, [r3, #0]
 800796c:	00db      	lsls	r3, r3, #3
 800796e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007972:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007976:	685a      	ldr	r2, [r3, #4]
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	00db      	lsls	r3, r3, #3
 800797e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007982:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007986:	b292      	uxth	r2, r2
 8007988:	605a      	str	r2, [r3, #4]
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	781b      	ldrb	r3, [r3, #0]
 800798e:	00db      	lsls	r3, r3, #3
 8007990:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007994:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007998:	6859      	ldr	r1, [r3, #4]
 800799a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800799c:	041a      	lsls	r2, r3, #16
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	00db      	lsls	r3, r3, #3
 80079a4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80079a8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80079ac:	430a      	orrs	r2, r1
 80079ae:	605a      	str	r2, [r3, #4]
 80079b0:	e001      	b.n	80079b6 <USB_EPStartXfer+0x108e>
      }
      else
      {
        return HAL_ERROR;
 80079b2:	2301      	movs	r3, #1
 80079b4:	e01c      	b.n	80079f0 <USB_EPStartXfer+0x10c8>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80079b6:	687a      	ldr	r2, [r7, #4]
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	781b      	ldrb	r3, [r3, #0]
 80079bc:	009b      	lsls	r3, r3, #2
 80079be:	4413      	add	r3, r2
 80079c0:	681a      	ldr	r2, [r3, #0]
 80079c2:	4b0d      	ldr	r3, [pc, #52]	@ (80079f8 <USB_EPStartXfer+0x10d0>)
 80079c4:	4013      	ands	r3, r2
 80079c6:	61fb      	str	r3, [r7, #28]
 80079c8:	69fb      	ldr	r3, [r7, #28]
 80079ca:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80079ce:	61fb      	str	r3, [r7, #28]
 80079d0:	69fb      	ldr	r3, [r7, #28]
 80079d2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80079d6:	61fb      	str	r3, [r7, #28]
 80079d8:	687a      	ldr	r2, [r7, #4]
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	009b      	lsls	r3, r3, #2
 80079e0:	441a      	add	r2, r3
 80079e2:	69fb      	ldr	r3, [r7, #28]
 80079e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80079e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079ec:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80079ee:	2300      	movs	r3, #0
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3758      	adds	r7, #88	@ 0x58
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}
 80079f8:	07ffbf8f 	.word	0x07ffbf8f

080079fc <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b085      	sub	sp, #20
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	785b      	ldrb	r3, [r3, #1]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d018      	beq.n	8007a40 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007a0e:	687a      	ldr	r2, [r7, #4]
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	781b      	ldrb	r3, [r3, #0]
 8007a14:	009b      	lsls	r3, r3, #2
 8007a16:	4413      	add	r3, r2
 8007a18:	681a      	ldr	r2, [r3, #0]
 8007a1a:	4b19      	ldr	r3, [pc, #100]	@ (8007a80 <USB_EPSetStall+0x84>)
 8007a1c:	4013      	ands	r3, r2
 8007a1e:	60bb      	str	r3, [r7, #8]
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	f083 0310 	eor.w	r3, r3, #16
 8007a26:	60bb      	str	r3, [r7, #8]
 8007a28:	687a      	ldr	r2, [r7, #4]
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	781b      	ldrb	r3, [r3, #0]
 8007a2e:	009b      	lsls	r3, r3, #2
 8007a30:	441a      	add	r2, r3
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a3c:	6013      	str	r3, [r2, #0]
 8007a3e:	e017      	b.n	8007a70 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007a40:	687a      	ldr	r2, [r7, #4]
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	781b      	ldrb	r3, [r3, #0]
 8007a46:	009b      	lsls	r3, r3, #2
 8007a48:	4413      	add	r3, r2
 8007a4a:	681a      	ldr	r2, [r3, #0]
 8007a4c:	4b0d      	ldr	r3, [pc, #52]	@ (8007a84 <USB_EPSetStall+0x88>)
 8007a4e:	4013      	ands	r3, r2
 8007a50:	60fb      	str	r3, [r7, #12]
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007a58:	60fb      	str	r3, [r7, #12]
 8007a5a:	687a      	ldr	r2, [r7, #4]
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	781b      	ldrb	r3, [r3, #0]
 8007a60:	009b      	lsls	r3, r3, #2
 8007a62:	441a      	add	r2, r3
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a6e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007a70:	2300      	movs	r3, #0
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3714      	adds	r7, #20
 8007a76:	46bd      	mov	sp, r7
 8007a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7c:	4770      	bx	lr
 8007a7e:	bf00      	nop
 8007a80:	07ff8fbf 	.word	0x07ff8fbf
 8007a84:	07ffbf8f 	.word	0x07ffbf8f

08007a88 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b089      	sub	sp, #36	@ 0x24
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	7b1b      	ldrb	r3, [r3, #12]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d17c      	bne.n	8007b94 <USB_EPClearStall+0x10c>
  {
    if (ep->is_in != 0U)
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	785b      	ldrb	r3, [r3, #1]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d03c      	beq.n	8007b1c <USB_EPClearStall+0x94>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007aa2:	687a      	ldr	r2, [r7, #4]
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	781b      	ldrb	r3, [r3, #0]
 8007aa8:	009b      	lsls	r3, r3, #2
 8007aaa:	4413      	add	r3, r2
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	613b      	str	r3, [r7, #16]
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d013      	beq.n	8007ae2 <USB_EPClearStall+0x5a>
 8007aba:	687a      	ldr	r2, [r7, #4]
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	781b      	ldrb	r3, [r3, #0]
 8007ac0:	009b      	lsls	r3, r3, #2
 8007ac2:	4413      	add	r3, r2
 8007ac4:	681a      	ldr	r2, [r3, #0]
 8007ac6:	4b37      	ldr	r3, [pc, #220]	@ (8007ba4 <USB_EPClearStall+0x11c>)
 8007ac8:	4013      	ands	r3, r2
 8007aca:	60fb      	str	r3, [r7, #12]
 8007acc:	687a      	ldr	r2, [r7, #4]
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	781b      	ldrb	r3, [r3, #0]
 8007ad2:	009b      	lsls	r3, r3, #2
 8007ad4:	441a      	add	r2, r3
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007adc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007ae0:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	78db      	ldrb	r3, [r3, #3]
 8007ae6:	2b01      	cmp	r3, #1
 8007ae8:	d054      	beq.n	8007b94 <USB_EPClearStall+0x10c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007aea:	687a      	ldr	r2, [r7, #4]
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	781b      	ldrb	r3, [r3, #0]
 8007af0:	009b      	lsls	r3, r3, #2
 8007af2:	4413      	add	r3, r2
 8007af4:	681a      	ldr	r2, [r3, #0]
 8007af6:	4b2c      	ldr	r3, [pc, #176]	@ (8007ba8 <USB_EPClearStall+0x120>)
 8007af8:	4013      	ands	r3, r2
 8007afa:	60bb      	str	r3, [r7, #8]
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	f083 0320 	eor.w	r3, r3, #32
 8007b02:	60bb      	str	r3, [r7, #8]
 8007b04:	687a      	ldr	r2, [r7, #4]
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	781b      	ldrb	r3, [r3, #0]
 8007b0a:	009b      	lsls	r3, r3, #2
 8007b0c:	441a      	add	r2, r3
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b18:	6013      	str	r3, [r2, #0]
 8007b1a:	e03b      	b.n	8007b94 <USB_EPClearStall+0x10c>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007b1c:	687a      	ldr	r2, [r7, #4]
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	009b      	lsls	r3, r3, #2
 8007b24:	4413      	add	r3, r2
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	61fb      	str	r3, [r7, #28]
 8007b2a:	69fb      	ldr	r3, [r7, #28]
 8007b2c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d013      	beq.n	8007b5c <USB_EPClearStall+0xd4>
 8007b34:	687a      	ldr	r2, [r7, #4]
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	781b      	ldrb	r3, [r3, #0]
 8007b3a:	009b      	lsls	r3, r3, #2
 8007b3c:	4413      	add	r3, r2
 8007b3e:	681a      	ldr	r2, [r3, #0]
 8007b40:	4b18      	ldr	r3, [pc, #96]	@ (8007ba4 <USB_EPClearStall+0x11c>)
 8007b42:	4013      	ands	r3, r2
 8007b44:	61bb      	str	r3, [r7, #24]
 8007b46:	687a      	ldr	r2, [r7, #4]
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	781b      	ldrb	r3, [r3, #0]
 8007b4c:	009b      	lsls	r3, r3, #2
 8007b4e:	441a      	add	r2, r3
 8007b50:	69bb      	ldr	r3, [r7, #24]
 8007b52:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007b56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b5a:	6013      	str	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007b5c:	687a      	ldr	r2, [r7, #4]
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	781b      	ldrb	r3, [r3, #0]
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	4413      	add	r3, r2
 8007b66:	681a      	ldr	r2, [r3, #0]
 8007b68:	4b10      	ldr	r3, [pc, #64]	@ (8007bac <USB_EPClearStall+0x124>)
 8007b6a:	4013      	ands	r3, r2
 8007b6c:	617b      	str	r3, [r7, #20]
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007b74:	617b      	str	r3, [r7, #20]
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007b7c:	617b      	str	r3, [r7, #20]
 8007b7e:	687a      	ldr	r2, [r7, #4]
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	781b      	ldrb	r3, [r3, #0]
 8007b84:	009b      	lsls	r3, r3, #2
 8007b86:	441a      	add	r2, r3
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b92:	6013      	str	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007b94:	2300      	movs	r3, #0
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3724      	adds	r7, #36	@ 0x24
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba0:	4770      	bx	lr
 8007ba2:	bf00      	nop
 8007ba4:	07ff8f8f 	.word	0x07ff8f8f
 8007ba8:	07ff8fbf 	.word	0x07ff8fbf
 8007bac:	07ffbf8f 	.word	0x07ffbf8f

08007bb0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_DRD_TypeDef *USBx, uint8_t address)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b083      	sub	sp, #12
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
 8007bb8:	460b      	mov	r3, r1
 8007bba:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007bbc:	78fb      	ldrb	r3, [r7, #3]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d102      	bne.n	8007bc8 <USB_SetDevAddress+0x18>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2280      	movs	r2, #128	@ 0x80
 8007bc6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8007bc8:	2300      	movs	r3, #0
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	370c      	adds	r7, #12
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr

08007bd6 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_DRD_TypeDef *USBx)
{
 8007bd6:	b480      	push	{r7}
 8007bd8:	b083      	sub	sp, #12
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007be2:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8007bea:	2300      	movs	r3, #0
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	370c      	adds	r7, #12
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr

08007bf8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_DRD_TypeDef const *USBx)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b085      	sub	sp, #20
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c04:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007c06:	68fb      	ldr	r3, [r7, #12]
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3714      	adds	r7, #20
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr

08007c14 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b08b      	sub	sp, #44	@ 0x2c
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	60f8      	str	r0, [r7, #12]
 8007c1c:	60b9      	str	r1, [r7, #8]
 8007c1e:	4611      	mov	r1, r2
 8007c20:	461a      	mov	r2, r3
 8007c22:	460b      	mov	r3, r1
 8007c24:	80fb      	strh	r3, [r7, #6]
 8007c26:	4613      	mov	r3, r2
 8007c28:	80bb      	strh	r3, [r7, #4]
  UNUSED(USBx);
  uint32_t WrVal;
  uint32_t count;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 8007c2a:	88bb      	ldrh	r3, [r7, #4]
 8007c2c:	3303      	adds	r3, #3
 8007c2e:	089b      	lsrs	r3, r3, #2
 8007c30:	61bb      	str	r3, [r7, #24]
  /* Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 8007c32:	88bb      	ldrh	r3, [r7, #4]
 8007c34:	f003 0303 	and.w	r3, r3, #3
 8007c38:	82fb      	strh	r3, [r7, #22]
  uint8_t *pBuf = pbUsrBuf;
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	613b      	str	r3, [r7, #16]

  /* Check if there is a remaining byte */
  if (remaining_bytes != 0U)
 8007c3e:	8afb      	ldrh	r3, [r7, #22]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d002      	beq.n	8007c4a <USB_WritePMA+0x36>
  {
    NbWords--;
 8007c44:	69bb      	ldr	r3, [r7, #24]
 8007c46:	3b01      	subs	r3, #1
 8007c48:	61bb      	str	r3, [r7, #24]
  }

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 8007c4a:	88fb      	ldrh	r3, [r7, #6]
 8007c4c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007c50:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007c54:	61fb      	str	r3, [r7, #28]

  /* Write the Calculated Word into the PMA related Buffer */
  for (count = NbWords; count != 0U; count--)
 8007c56:	69bb      	ldr	r3, [r7, #24]
 8007c58:	623b      	str	r3, [r7, #32]
 8007c5a:	e015      	b.n	8007c88 <USB_WritePMA+0x74>
  {
    *pdwVal = __UNALIGNED_UINT32_READ(pBuf);
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	681a      	ldr	r2, [r3, #0]
 8007c60:	69fb      	ldr	r3, [r7, #28]
 8007c62:	601a      	str	r2, [r3, #0]
    pdwVal++;
 8007c64:	69fb      	ldr	r3, [r7, #28]
 8007c66:	3304      	adds	r3, #4
 8007c68:	61fb      	str	r3, [r7, #28]
    /* Increment pBuf 4 Time as Word Increment */
    pBuf++;
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	3301      	adds	r3, #1
 8007c6e:	613b      	str	r3, [r7, #16]
    pBuf++;
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	3301      	adds	r3, #1
 8007c74:	613b      	str	r3, [r7, #16]
    pBuf++;
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	3301      	adds	r3, #1
 8007c7a:	613b      	str	r3, [r7, #16]
    pBuf++;
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	3301      	adds	r3, #1
 8007c80:	613b      	str	r3, [r7, #16]
  for (count = NbWords; count != 0U; count--)
 8007c82:	6a3b      	ldr	r3, [r7, #32]
 8007c84:	3b01      	subs	r3, #1
 8007c86:	623b      	str	r3, [r7, #32]
 8007c88:	6a3b      	ldr	r3, [r7, #32]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d1e6      	bne.n	8007c5c <USB_WritePMA+0x48>
  }

  /* When Number of data is not word aligned, write the remaining Byte */
  if (remaining_bytes != 0U)
 8007c8e:	8afb      	ldrh	r3, [r7, #22]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d01a      	beq.n	8007cca <USB_WritePMA+0xb6>
  {
    WrVal = 0U;
 8007c94:	2300      	movs	r3, #0
 8007c96:	627b      	str	r3, [r7, #36]	@ 0x24

    do
    {
      WrVal |= (uint32_t)(*(uint8_t *)pBuf) << (8U * count);
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	781b      	ldrb	r3, [r3, #0]
 8007c9c:	461a      	mov	r2, r3
 8007c9e:	6a3b      	ldr	r3, [r7, #32]
 8007ca0:	00db      	lsls	r3, r3, #3
 8007ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ca6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	627b      	str	r3, [r7, #36]	@ 0x24
      count++;
 8007cac:	6a3b      	ldr	r3, [r7, #32]
 8007cae:	3301      	adds	r3, #1
 8007cb0:	623b      	str	r3, [r7, #32]
      pBuf++;
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	3301      	adds	r3, #1
 8007cb6:	613b      	str	r3, [r7, #16]
      remaining_bytes--;
 8007cb8:	8afb      	ldrh	r3, [r7, #22]
 8007cba:	3b01      	subs	r3, #1
 8007cbc:	82fb      	strh	r3, [r7, #22]
    } while (remaining_bytes != 0U);
 8007cbe:	8afb      	ldrh	r3, [r7, #22]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d1e9      	bne.n	8007c98 <USB_WritePMA+0x84>

    *pdwVal = WrVal;
 8007cc4:	69fb      	ldr	r3, [r7, #28]
 8007cc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007cc8:	601a      	str	r2, [r3, #0]
  }
}
 8007cca:	bf00      	nop
 8007ccc:	372c      	adds	r7, #44	@ 0x2c
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd4:	4770      	bx	lr

08007cd6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007cd6:	b480      	push	{r7}
 8007cd8:	b08b      	sub	sp, #44	@ 0x2c
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	60f8      	str	r0, [r7, #12]
 8007cde:	60b9      	str	r1, [r7, #8]
 8007ce0:	4611      	mov	r1, r2
 8007ce2:	461a      	mov	r2, r3
 8007ce4:	460b      	mov	r3, r1
 8007ce6:	80fb      	strh	r3, [r7, #6]
 8007ce8:	4613      	mov	r3, r2
 8007cea:	80bb      	strh	r3, [r7, #4]
  UNUSED(USBx);
  uint32_t count;
  uint32_t RdVal;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 8007cec:	88bb      	ldrh	r3, [r7, #4]
 8007cee:	3303      	adds	r3, #3
 8007cf0:	089b      	lsrs	r3, r3, #2
 8007cf2:	61fb      	str	r3, [r7, #28]
  /*Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 8007cf4:	88bb      	ldrh	r3, [r7, #4]
 8007cf6:	f003 0303 	and.w	r3, r3, #3
 8007cfa:	837b      	strh	r3, [r7, #26]
  uint8_t *pBuf = pbUsrBuf;
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	617b      	str	r3, [r7, #20]

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 8007d00:	88fb      	ldrh	r3, [r7, #6]
 8007d02:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007d06:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007d0a:	623b      	str	r3, [r7, #32]

  /* if nbre of byte is not word aligned decrement the nbre of word*/
  if (remaining_bytes != 0U)
 8007d0c:	8b7b      	ldrh	r3, [r7, #26]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d002      	beq.n	8007d18 <USB_ReadPMA+0x42>
  {
    NbWords--;
 8007d12:	69fb      	ldr	r3, [r7, #28]
 8007d14:	3b01      	subs	r3, #1
 8007d16:	61fb      	str	r3, [r7, #28]
  }

  /*Read the Calculated Word From the PMA related Buffer*/
  for (count = NbWords; count != 0U; count--)
 8007d18:	69fb      	ldr	r3, [r7, #28]
 8007d1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d1c:	e015      	b.n	8007d4a <USB_ReadPMA+0x74>
  {
    __UNALIGNED_UINT32_WRITE(pBuf, *pdwVal);
 8007d1e:	6a3b      	ldr	r3, [r7, #32]
 8007d20:	681a      	ldr	r2, [r3, #0]
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	601a      	str	r2, [r3, #0]

    pdwVal++;
 8007d26:	6a3b      	ldr	r3, [r7, #32]
 8007d28:	3304      	adds	r3, #4
 8007d2a:	623b      	str	r3, [r7, #32]
    pBuf++;
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	3301      	adds	r3, #1
 8007d30:	617b      	str	r3, [r7, #20]
    pBuf++;
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	3301      	adds	r3, #1
 8007d36:	617b      	str	r3, [r7, #20]
    pBuf++;
 8007d38:	697b      	ldr	r3, [r7, #20]
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	617b      	str	r3, [r7, #20]
    pBuf++;
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	3301      	adds	r3, #1
 8007d42:	617b      	str	r3, [r7, #20]
  for (count = NbWords; count != 0U; count--)
 8007d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d46:	3b01      	subs	r3, #1
 8007d48:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d1e6      	bne.n	8007d1e <USB_ReadPMA+0x48>
  }

  /*When Number of data is not word aligned, read the remaining byte*/
  if (remaining_bytes != 0U)
 8007d50:	8b7b      	ldrh	r3, [r7, #26]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d017      	beq.n	8007d86 <USB_ReadPMA+0xb0>
  {
    RdVal = *(__IO uint32_t *)pdwVal;
 8007d56:	6a3b      	ldr	r3, [r7, #32]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	613b      	str	r3, [r7, #16]

    do
    {
      *(uint8_t *)pBuf = (uint8_t)(RdVal >> (8U * (uint8_t)(count)));
 8007d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d5e:	b2db      	uxtb	r3, r3
 8007d60:	00db      	lsls	r3, r3, #3
 8007d62:	693a      	ldr	r2, [r7, #16]
 8007d64:	fa22 f303 	lsr.w	r3, r2, r3
 8007d68:	b2da      	uxtb	r2, r3
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	701a      	strb	r2, [r3, #0]
      count++;
 8007d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d70:	3301      	adds	r3, #1
 8007d72:	627b      	str	r3, [r7, #36]	@ 0x24
      pBuf++;
 8007d74:	697b      	ldr	r3, [r7, #20]
 8007d76:	3301      	adds	r3, #1
 8007d78:	617b      	str	r3, [r7, #20]
      remaining_bytes--;
 8007d7a:	8b7b      	ldrh	r3, [r7, #26]
 8007d7c:	3b01      	subs	r3, #1
 8007d7e:	837b      	strh	r3, [r7, #26]
    } while (remaining_bytes != 0U);
 8007d80:	8b7b      	ldrh	r3, [r7, #26]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d1ea      	bne.n	8007d5c <USB_ReadPMA+0x86>
  }
}
 8007d86:	bf00      	nop
 8007d88:	372c      	adds	r7, #44	@ 0x2c
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr
	...

08007d94 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b084      	sub	sp, #16
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	460b      	mov	r3, r1
 8007d9e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8007da0:	2054      	movs	r0, #84	@ 0x54
 8007da2:	f000 fd5b 	bl	800885c <USBD_static_malloc>
 8007da6:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d10a      	bne.n	8007dc4 <USBD_CUSTOM_HID_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007db4:	687a      	ldr	r2, [r7, #4]
 8007db6:	33b0      	adds	r3, #176	@ 0xb0
 8007db8:	009b      	lsls	r3, r3, #2
 8007dba:	4413      	add	r3, r2
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	605a      	str	r2, [r3, #4]
    return (uint8_t)USBD_EMEM;
 8007dc0:	2302      	movs	r3, #2
 8007dc2:	e08d      	b.n	8007ee0 <USBD_CUSTOM_HID_Init+0x14c>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007dca:	687a      	ldr	r2, [r7, #4]
 8007dcc:	33b0      	adds	r3, #176	@ 0xb0
 8007dce:	009b      	lsls	r3, r3, #2
 8007dd0:	4413      	add	r3, r2
 8007dd2:	68fa      	ldr	r2, [r7, #12]
 8007dd4:	605a      	str	r2, [r3, #4]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007ddc:	687a      	ldr	r2, [r7, #4]
 8007dde:	33b0      	adds	r3, #176	@ 0xb0
 8007de0:	009b      	lsls	r3, r3, #2
 8007de2:	4413      	add	r3, r2
 8007de4:	685a      	ldr	r2, [r3, #4]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	7c1b      	ldrb	r3, [r3, #16]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d11b      	bne.n	8007e2c <USBD_CUSTOM_HID_Init+0x98>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8007df4:	4b3c      	ldr	r3, [pc, #240]	@ (8007ee8 <USBD_CUSTOM_HID_Init+0x154>)
 8007df6:	781b      	ldrb	r3, [r3, #0]
 8007df8:	f003 020f 	and.w	r2, r3, #15
 8007dfc:	6879      	ldr	r1, [r7, #4]
 8007dfe:	4613      	mov	r3, r2
 8007e00:	009b      	lsls	r3, r3, #2
 8007e02:	4413      	add	r3, r2
 8007e04:	009b      	lsls	r3, r3, #2
 8007e06:	440b      	add	r3, r1
 8007e08:	3326      	adds	r3, #38	@ 0x26
 8007e0a:	2205      	movs	r2, #5
 8007e0c:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8007e0e:	4b37      	ldr	r3, [pc, #220]	@ (8007eec <USBD_CUSTOM_HID_Init+0x158>)
 8007e10:	781b      	ldrb	r3, [r3, #0]
 8007e12:	f003 020f 	and.w	r2, r3, #15
 8007e16:	6879      	ldr	r1, [r7, #4]
 8007e18:	4613      	mov	r3, r2
 8007e1a:	009b      	lsls	r3, r3, #2
 8007e1c:	4413      	add	r3, r2
 8007e1e:	009b      	lsls	r3, r3, #2
 8007e20:	440b      	add	r3, r1
 8007e22:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8007e26:	2205      	movs	r2, #5
 8007e28:	801a      	strh	r2, [r3, #0]
 8007e2a:	e01a      	b.n	8007e62 <USBD_CUSTOM_HID_Init+0xce>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8007e2c:	4b2e      	ldr	r3, [pc, #184]	@ (8007ee8 <USBD_CUSTOM_HID_Init+0x154>)
 8007e2e:	781b      	ldrb	r3, [r3, #0]
 8007e30:	f003 020f 	and.w	r2, r3, #15
 8007e34:	6879      	ldr	r1, [r7, #4]
 8007e36:	4613      	mov	r3, r2
 8007e38:	009b      	lsls	r3, r3, #2
 8007e3a:	4413      	add	r3, r2
 8007e3c:	009b      	lsls	r3, r3, #2
 8007e3e:	440b      	add	r3, r1
 8007e40:	3326      	adds	r3, #38	@ 0x26
 8007e42:	2205      	movs	r2, #5
 8007e44:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8007e46:	4b29      	ldr	r3, [pc, #164]	@ (8007eec <USBD_CUSTOM_HID_Init+0x158>)
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	f003 020f 	and.w	r2, r3, #15
 8007e4e:	6879      	ldr	r1, [r7, #4]
 8007e50:	4613      	mov	r3, r2
 8007e52:	009b      	lsls	r3, r3, #2
 8007e54:	4413      	add	r3, r2
 8007e56:	009b      	lsls	r3, r3, #2
 8007e58:	440b      	add	r3, r1
 8007e5a:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8007e5e:	2205      	movs	r2, #5
 8007e60:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 8007e62:	4b21      	ldr	r3, [pc, #132]	@ (8007ee8 <USBD_CUSTOM_HID_Init+0x154>)
 8007e64:	7819      	ldrb	r1, [r3, #0]
 8007e66:	2340      	movs	r3, #64	@ 0x40
 8007e68:	2203      	movs	r2, #3
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f000 fc0f 	bl	800868e <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 8007e70:	4b1d      	ldr	r3, [pc, #116]	@ (8007ee8 <USBD_CUSTOM_HID_Init+0x154>)
 8007e72:	781b      	ldrb	r3, [r3, #0]
 8007e74:	f003 020f 	and.w	r2, r3, #15
 8007e78:	6879      	ldr	r1, [r7, #4]
 8007e7a:	4613      	mov	r3, r2
 8007e7c:	009b      	lsls	r3, r3, #2
 8007e7e:	4413      	add	r3, r2
 8007e80:	009b      	lsls	r3, r3, #2
 8007e82:	440b      	add	r3, r1
 8007e84:	3324      	adds	r3, #36	@ 0x24
 8007e86:	2201      	movs	r2, #1
 8007e88:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 8007e8a:	4b18      	ldr	r3, [pc, #96]	@ (8007eec <USBD_CUSTOM_HID_Init+0x158>)
 8007e8c:	7819      	ldrb	r1, [r3, #0]
 8007e8e:	2340      	movs	r3, #64	@ 0x40
 8007e90:	2203      	movs	r2, #3
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f000 fbfb 	bl	800868e <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 8007e98:	4b14      	ldr	r3, [pc, #80]	@ (8007eec <USBD_CUSTOM_HID_Init+0x158>)
 8007e9a:	781b      	ldrb	r3, [r3, #0]
 8007e9c:	f003 020f 	and.w	r2, r3, #15
 8007ea0:	6879      	ldr	r1, [r7, #4]
 8007ea2:	4613      	mov	r3, r2
 8007ea4:	009b      	lsls	r3, r3, #2
 8007ea6:	4413      	add	r3, r2
 8007ea8:	009b      	lsls	r3, r3, #2
 8007eaa:	440b      	add	r3, r1
 8007eac:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007eb0:	2201      	movs	r2, #1
 8007eb2:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007ec2:	687a      	ldr	r2, [r7, #4]
 8007ec4:	33b2      	adds	r3, #178	@ 0xb2
 8007ec6:	009b      	lsls	r3, r3, #2
 8007ec8:	4413      	add	r3, r2
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8007ed0:	4b06      	ldr	r3, [pc, #24]	@ (8007eec <USBD_CUSTOM_HID_Init+0x158>)
 8007ed2:	7819      	ldrb	r1, [r3, #0]
 8007ed4:	68fa      	ldr	r2, [r7, #12]
 8007ed6:	2340      	movs	r3, #64	@ 0x40
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f000 fca3 	bl	8008824 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
 8007ede:	2300      	movs	r3, #0
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3710      	adds	r7, #16
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}
 8007ee8:	20000086 	.word	0x20000086
 8007eec:	20000087 	.word	0x20000087

08007ef0 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b082      	sub	sp, #8
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	460b      	mov	r3, r1
 8007efa:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 8007efc:	4b39      	ldr	r3, [pc, #228]	@ (8007fe4 <USBD_CUSTOM_HID_DeInit+0xf4>)
 8007efe:	781b      	ldrb	r3, [r3, #0]
 8007f00:	4619      	mov	r1, r3
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 fbe3 	bl	80086ce <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 8007f08:	4b36      	ldr	r3, [pc, #216]	@ (8007fe4 <USBD_CUSTOM_HID_DeInit+0xf4>)
 8007f0a:	781b      	ldrb	r3, [r3, #0]
 8007f0c:	f003 020f 	and.w	r2, r3, #15
 8007f10:	6879      	ldr	r1, [r7, #4]
 8007f12:	4613      	mov	r3, r2
 8007f14:	009b      	lsls	r3, r3, #2
 8007f16:	4413      	add	r3, r2
 8007f18:	009b      	lsls	r3, r3, #2
 8007f1a:	440b      	add	r3, r1
 8007f1c:	3324      	adds	r3, #36	@ 0x24
 8007f1e:	2200      	movs	r2, #0
 8007f20:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 8007f22:	4b30      	ldr	r3, [pc, #192]	@ (8007fe4 <USBD_CUSTOM_HID_DeInit+0xf4>)
 8007f24:	781b      	ldrb	r3, [r3, #0]
 8007f26:	f003 020f 	and.w	r2, r3, #15
 8007f2a:	6879      	ldr	r1, [r7, #4]
 8007f2c:	4613      	mov	r3, r2
 8007f2e:	009b      	lsls	r3, r3, #2
 8007f30:	4413      	add	r3, r2
 8007f32:	009b      	lsls	r3, r3, #2
 8007f34:	440b      	add	r3, r1
 8007f36:	3326      	adds	r3, #38	@ 0x26
 8007f38:	2200      	movs	r2, #0
 8007f3a:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 8007f3c:	4b2a      	ldr	r3, [pc, #168]	@ (8007fe8 <USBD_CUSTOM_HID_DeInit+0xf8>)
 8007f3e:	781b      	ldrb	r3, [r3, #0]
 8007f40:	4619      	mov	r1, r3
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f000 fbc3 	bl	80086ce <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 8007f48:	4b27      	ldr	r3, [pc, #156]	@ (8007fe8 <USBD_CUSTOM_HID_DeInit+0xf8>)
 8007f4a:	781b      	ldrb	r3, [r3, #0]
 8007f4c:	f003 020f 	and.w	r2, r3, #15
 8007f50:	6879      	ldr	r1, [r7, #4]
 8007f52:	4613      	mov	r3, r2
 8007f54:	009b      	lsls	r3, r3, #2
 8007f56:	4413      	add	r3, r2
 8007f58:	009b      	lsls	r3, r3, #2
 8007f5a:	440b      	add	r3, r1
 8007f5c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007f60:	2200      	movs	r2, #0
 8007f62:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 8007f64:	4b20      	ldr	r3, [pc, #128]	@ (8007fe8 <USBD_CUSTOM_HID_DeInit+0xf8>)
 8007f66:	781b      	ldrb	r3, [r3, #0]
 8007f68:	f003 020f 	and.w	r2, r3, #15
 8007f6c:	6879      	ldr	r1, [r7, #4]
 8007f6e:	4613      	mov	r3, r2
 8007f70:	009b      	lsls	r3, r3, #2
 8007f72:	4413      	add	r3, r2
 8007f74:	009b      	lsls	r3, r3, #2
 8007f76:	440b      	add	r3, r1
 8007f78:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007f86:	687a      	ldr	r2, [r7, #4]
 8007f88:	33b0      	adds	r3, #176	@ 0xb0
 8007f8a:	009b      	lsls	r3, r3, #2
 8007f8c:	4413      	add	r3, r2
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d021      	beq.n	8007fd8 <USBD_CUSTOM_HID_DeInit+0xe8>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007f9a:	687a      	ldr	r2, [r7, #4]
 8007f9c:	33b2      	adds	r3, #178	@ 0xb2
 8007f9e:	009b      	lsls	r3, r3, #2
 8007fa0:	4413      	add	r3, r2
 8007fa2:	685b      	ldr	r3, [r3, #4]
 8007fa4:	689b      	ldr	r3, [r3, #8]
 8007fa6:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007fae:	687a      	ldr	r2, [r7, #4]
 8007fb0:	33b0      	adds	r3, #176	@ 0xb0
 8007fb2:	009b      	lsls	r3, r3, #2
 8007fb4:	4413      	add	r3, r2
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f000 fc5d 	bl	8008878 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007fc4:	687a      	ldr	r2, [r7, #4]
 8007fc6:	33b0      	adds	r3, #176	@ 0xb0
 8007fc8:	009b      	lsls	r3, r3, #2
 8007fca:	4413      	add	r3, r2
 8007fcc:	2200      	movs	r2, #0
 8007fce:	605a      	str	r2, [r3, #4]
    pdev->pClassData = NULL;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  }

  return (uint8_t)USBD_OK;
 8007fd8:	2300      	movs	r3, #0
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3708      	adds	r7, #8
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}
 8007fe2:	bf00      	nop
 8007fe4:	20000086 	.word	0x20000086
 8007fe8:	20000087 	.word	0x20000087

08007fec <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b088      	sub	sp, #32
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007ffc:	687a      	ldr	r2, [r7, #4]
 8007ffe:	33b0      	adds	r3, #176	@ 0xb0
 8008000:	009b      	lsls	r3, r3, #2
 8008002:	4413      	add	r3, r2
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8008008:	2300      	movs	r3, #0
 800800a:	83fb      	strh	r3, [r7, #30]
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
  uint16_t ReportLength = 0U;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */
  uint8_t  *pbuf = NULL;
 800800c:	2300      	movs	r3, #0
 800800e:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8008010:	2300      	movs	r3, #0
 8008012:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8008014:	2300      	movs	r3, #0
 8008016:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d101      	bne.n	8008022 <USBD_CUSTOM_HID_Setup+0x36>
  {
    return (uint8_t)USBD_FAIL;
 800801e:	2303      	movs	r3, #3
 8008020:	e0f7      	b.n	8008212 <USBD_CUSTOM_HID_Setup+0x226>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	781b      	ldrb	r3, [r3, #0]
 8008026:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800802a:	2b00      	cmp	r3, #0
 800802c:	d055      	beq.n	80080da <USBD_CUSTOM_HID_Setup+0xee>
 800802e:	2b20      	cmp	r3, #32
 8008030:	f040 80e7 	bne.w	8008202 <USBD_CUSTOM_HID_Setup+0x216>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	785b      	ldrb	r3, [r3, #1]
 8008038:	3b02      	subs	r3, #2
 800803a:	2b09      	cmp	r3, #9
 800803c:	d845      	bhi.n	80080ca <USBD_CUSTOM_HID_Setup+0xde>
 800803e:	a201      	add	r2, pc, #4	@ (adr r2, 8008044 <USBD_CUSTOM_HID_Setup+0x58>)
 8008040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008044:	0800809d 	.word	0x0800809d
 8008048:	0800807b 	.word	0x0800807b
 800804c:	080080cb 	.word	0x080080cb
 8008050:	080080cb 	.word	0x080080cb
 8008054:	080080cb 	.word	0x080080cb
 8008058:	080080cb 	.word	0x080080cb
 800805c:	080080cb 	.word	0x080080cb
 8008060:	080080ad 	.word	0x080080ad
 8008064:	0800808b 	.word	0x0800808b
 8008068:	0800806d 	.word	0x0800806d
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	885b      	ldrh	r3, [r3, #2]
 8008070:	b2db      	uxtb	r3, r3
 8008072:	461a      	mov	r2, r3
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	641a      	str	r2, [r3, #64]	@ 0x40
          break;
 8008078:	e02e      	b.n	80080d8 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	3340      	adds	r3, #64	@ 0x40
 800807e:	2201      	movs	r2, #1
 8008080:	4619      	mov	r1, r3
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f001 ff09 	bl	8009e9a <USBD_CtlSendData>
          break;
 8008088:	e026      	b.n	80080d8 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	885b      	ldrh	r3, [r3, #2]
 800808e:	0a1b      	lsrs	r3, r3, #8
 8008090:	b29b      	uxth	r3, r3
 8008092:	b2db      	uxtb	r3, r3
 8008094:	461a      	mov	r2, r3
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	645a      	str	r2, [r3, #68]	@ 0x44
          break;
 800809a:	e01d      	b.n	80080d8 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	3344      	adds	r3, #68	@ 0x44
 80080a0:	2201      	movs	r2, #1
 80080a2:	4619      	mov	r1, r3
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f001 fef8 	bl	8009e9a <USBD_CtlSendData>
          break;
 80080aa:	e015      	b.n	80080d8 <USBD_CUSTOM_HID_Setup+0xec>
            ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->CtrlReqComplete(req->bRequest,
                                                                                            req->wLength);
          }
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED
          hhid->IsReportAvailable = 1U;
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	2201      	movs	r2, #1
 80080b0:	64da      	str	r2, [r3, #76]	@ 0x4c
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 80080b2:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	88db      	ldrh	r3, [r3, #6]
 80080b8:	2b40      	cmp	r3, #64	@ 0x40
 80080ba:	bf28      	it	cs
 80080bc:	2340      	movcs	r3, #64	@ 0x40
 80080be:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 80080c0:	461a      	mov	r2, r3
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f001 ff15 	bl	8009ef2 <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
 80080c8:	e006      	b.n	80080d8 <USBD_CUSTOM_HID_Setup+0xec>
          }
          break;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */

        default:
          USBD_CtlError(pdev, req);
 80080ca:	6839      	ldr	r1, [r7, #0]
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f001 fd64 	bl	8009b9a <USBD_CtlError>
          ret = USBD_FAIL;
 80080d2:	2303      	movs	r3, #3
 80080d4:	75fb      	strb	r3, [r7, #23]
          break;
 80080d6:	bf00      	nop
      }
      break;
 80080d8:	e09a      	b.n	8008210 <USBD_CUSTOM_HID_Setup+0x224>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	785b      	ldrb	r3, [r3, #1]
 80080de:	2b0b      	cmp	r3, #11
 80080e0:	f200 8086 	bhi.w	80081f0 <USBD_CUSTOM_HID_Setup+0x204>
 80080e4:	a201      	add	r2, pc, #4	@ (adr r2, 80080ec <USBD_CUSTOM_HID_Setup+0x100>)
 80080e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ea:	bf00      	nop
 80080ec:	0800811d 	.word	0x0800811d
 80080f0:	080081ff 	.word	0x080081ff
 80080f4:	080081f1 	.word	0x080081f1
 80080f8:	080081f1 	.word	0x080081f1
 80080fc:	080081f1 	.word	0x080081f1
 8008100:	080081f1 	.word	0x080081f1
 8008104:	08008147 	.word	0x08008147
 8008108:	080081f1 	.word	0x080081f1
 800810c:	080081f1 	.word	0x080081f1
 8008110:	080081f1 	.word	0x080081f1
 8008114:	0800819f 	.word	0x0800819f
 8008118:	080081c9 	.word	0x080081c9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008122:	b2db      	uxtb	r3, r3
 8008124:	2b03      	cmp	r3, #3
 8008126:	d107      	bne.n	8008138 <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008128:	f107 030e 	add.w	r3, r7, #14
 800812c:	2202      	movs	r2, #2
 800812e:	4619      	mov	r1, r3
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f001 feb2 	bl	8009e9a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008136:	e063      	b.n	8008200 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8008138:	6839      	ldr	r1, [r7, #0]
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f001 fd2d 	bl	8009b9a <USBD_CtlError>
            ret = USBD_FAIL;
 8008140:	2303      	movs	r3, #3
 8008142:	75fb      	strb	r3, [r7, #23]
          break;
 8008144:	e05c      	b.n	8008200 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	885b      	ldrh	r3, [r3, #2]
 800814a:	0a1b      	lsrs	r3, r3, #8
 800814c:	b29b      	uxth	r3, r3
 800814e:	2b22      	cmp	r3, #34	@ 0x22
 8008150:	d110      	bne.n	8008174 <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	88db      	ldrh	r3, [r3, #6]
 8008156:	2b1e      	cmp	r3, #30
 8008158:	bf28      	it	cs
 800815a:	231e      	movcs	r3, #30
 800815c:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	33b2      	adds	r3, #178	@ 0xb2
 8008168:	009b      	lsls	r3, r3, #2
 800816a:	4413      	add	r3, r2
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	61bb      	str	r3, [r7, #24]
 8008172:	e00d      	b.n	8008190 <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	885b      	ldrh	r3, [r3, #2]
 8008178:	0a1b      	lsrs	r3, r3, #8
 800817a:	b29b      	uxth	r3, r3
 800817c:	2b21      	cmp	r3, #33	@ 0x21
 800817e:	d107      	bne.n	8008190 <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8008180:	4b26      	ldr	r3, [pc, #152]	@ (800821c <USBD_CUSTOM_HID_Setup+0x230>)
 8008182:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	88db      	ldrh	r3, [r3, #6]
 8008188:	2b09      	cmp	r3, #9
 800818a:	bf28      	it	cs
 800818c:	2309      	movcs	r3, #9
 800818e:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 8008190:	8bfb      	ldrh	r3, [r7, #30]
 8008192:	461a      	mov	r2, r3
 8008194:	69b9      	ldr	r1, [r7, #24]
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f001 fe7f 	bl	8009e9a <USBD_CtlSendData>
          break;
 800819c:	e030      	b.n	8008200 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081a4:	b2db      	uxtb	r3, r3
 80081a6:	2b03      	cmp	r3, #3
 80081a8:	d107      	bne.n	80081ba <USBD_CUSTOM_HID_Setup+0x1ce>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	3348      	adds	r3, #72	@ 0x48
 80081ae:	2201      	movs	r2, #1
 80081b0:	4619      	mov	r1, r3
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f001 fe71 	bl	8009e9a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80081b8:	e022      	b.n	8008200 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 80081ba:	6839      	ldr	r1, [r7, #0]
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f001 fcec 	bl	8009b9a <USBD_CtlError>
            ret = USBD_FAIL;
 80081c2:	2303      	movs	r3, #3
 80081c4:	75fb      	strb	r3, [r7, #23]
          break;
 80081c6:	e01b      	b.n	8008200 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081ce:	b2db      	uxtb	r3, r3
 80081d0:	2b03      	cmp	r3, #3
 80081d2:	d106      	bne.n	80081e2 <USBD_CUSTOM_HID_Setup+0x1f6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	885b      	ldrh	r3, [r3, #2]
 80081d8:	b2db      	uxtb	r3, r3
 80081da:	461a      	mov	r2, r3
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	649a      	str	r2, [r3, #72]	@ 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80081e0:	e00e      	b.n	8008200 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 80081e2:	6839      	ldr	r1, [r7, #0]
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f001 fcd8 	bl	8009b9a <USBD_CtlError>
            ret = USBD_FAIL;
 80081ea:	2303      	movs	r3, #3
 80081ec:	75fb      	strb	r3, [r7, #23]
          break;
 80081ee:	e007      	b.n	8008200 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80081f0:	6839      	ldr	r1, [r7, #0]
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f001 fcd1 	bl	8009b9a <USBD_CtlError>
          ret = USBD_FAIL;
 80081f8:	2303      	movs	r3, #3
 80081fa:	75fb      	strb	r3, [r7, #23]
          break;
 80081fc:	e000      	b.n	8008200 <USBD_CUSTOM_HID_Setup+0x214>
          break;
 80081fe:	bf00      	nop
      }
      break;
 8008200:	e006      	b.n	8008210 <USBD_CUSTOM_HID_Setup+0x224>

    default:
      USBD_CtlError(pdev, req);
 8008202:	6839      	ldr	r1, [r7, #0]
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f001 fcc8 	bl	8009b9a <USBD_CtlError>
      ret = USBD_FAIL;
 800820a:	2303      	movs	r3, #3
 800820c:	75fb      	strb	r3, [r7, #23]
      break;
 800820e:	bf00      	nop
  }
  return (uint8_t)ret;
 8008210:	7dfb      	ldrb	r3, [r7, #23]
}
 8008212:	4618      	mov	r0, r3
 8008214:	3720      	adds	r7, #32
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}
 800821a:	bf00      	nop
 800821c:	20000070 	.word	0x20000070

08008220 <USBD_CUSTOM_HID_SendReport>:
{
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b086      	sub	sp, #24
 8008224:	af00      	add	r7, sp, #0
 8008226:	60f8      	str	r0, [r7, #12]
 8008228:	60b9      	str	r1, [r7, #8]
 800822a:	4613      	mov	r3, r2
 800822c:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008234:	68fa      	ldr	r2, [r7, #12]
 8008236:	33b0      	adds	r3, #176	@ 0xb0
 8008238:	009b      	lsls	r3, r3, #2
 800823a:	4413      	add	r3, r2
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 8008240:	697b      	ldr	r3, [r7, #20]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d101      	bne.n	800824a <USBD_CUSTOM_HID_SendReport+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008246:	2303      	movs	r3, #3
 8008248:	e019      	b.n	800827e <USBD_CUSTOM_HID_SendReport+0x5e>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008250:	b2db      	uxtb	r3, r3
 8008252:	2b03      	cmp	r3, #3
 8008254:	d112      	bne.n	800827c <USBD_CUSTOM_HID_SendReport+0x5c>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800825c:	2b00      	cmp	r3, #0
 800825e:	d10b      	bne.n	8008278 <USBD_CUSTOM_HID_SendReport+0x58>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	2201      	movs	r2, #1
 8008264:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 8008268:	4b07      	ldr	r3, [pc, #28]	@ (8008288 <USBD_CUSTOM_HID_SendReport+0x68>)
 800826a:	7819      	ldrb	r1, [r3, #0]
 800826c:	88fb      	ldrh	r3, [r7, #6]
 800826e:	68ba      	ldr	r2, [r7, #8]
 8008270:	68f8      	ldr	r0, [r7, #12]
 8008272:	f000 fabc 	bl	80087ee <USBD_LL_Transmit>
 8008276:	e001      	b.n	800827c <USBD_CUSTOM_HID_SendReport+0x5c>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 8008278:	2301      	movs	r3, #1
 800827a:	e000      	b.n	800827e <USBD_CUSTOM_HID_SendReport+0x5e>
    }
  }
  return (uint8_t)USBD_OK;
 800827c:	2300      	movs	r3, #0
}
 800827e:	4618      	mov	r0, r3
 8008280:	3718      	adds	r7, #24
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}
 8008286:	bf00      	nop
 8008288:	20000086 	.word	0x20000086

0800828c <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b084      	sub	sp, #16
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8008294:	2181      	movs	r1, #129	@ 0x81
 8008296:	4815      	ldr	r0, [pc, #84]	@ (80082ec <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8008298:	f000 fe49 	bl	8008f2e <USBD_GetEpDesc>
 800829c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 800829e:	2101      	movs	r1, #1
 80082a0:	4812      	ldr	r0, [pc, #72]	@ (80082ec <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 80082a2:	f000 fe44 	bl	8008f2e <USBD_GetEpDesc>
 80082a6:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d009      	beq.n	80082c2 <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	2200      	movs	r2, #0
 80082b2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80082b6:	711a      	strb	r2, [r3, #4]
 80082b8:	2200      	movs	r2, #0
 80082ba:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2205      	movs	r2, #5
 80082c0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d009      	beq.n	80082dc <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	2200      	movs	r2, #0
 80082cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80082d0:	711a      	strb	r2, [r3, #4]
 80082d2:	2200      	movs	r2, #0
 80082d4:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	2205      	movs	r2, #5
 80082da:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2229      	movs	r2, #41	@ 0x29
 80082e0:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 80082e2:	4b02      	ldr	r3, [pc, #8]	@ (80082ec <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3710      	adds	r7, #16
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}
 80082ec:	20000044 	.word	0x20000044

080082f0 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b084      	sub	sp, #16
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 80082f8:	2181      	movs	r1, #129	@ 0x81
 80082fa:	4815      	ldr	r0, [pc, #84]	@ (8008350 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 80082fc:	f000 fe17 	bl	8008f2e <USBD_GetEpDesc>
 8008300:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8008302:	2101      	movs	r1, #1
 8008304:	4812      	ldr	r0, [pc, #72]	@ (8008350 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8008306:	f000 fe12 	bl	8008f2e <USBD_GetEpDesc>
 800830a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d009      	beq.n	8008326 <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	2200      	movs	r2, #0
 8008316:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800831a:	711a      	strb	r2, [r3, #4]
 800831c:	2200      	movs	r2, #0
 800831e:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	2205      	movs	r2, #5
 8008324:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d009      	beq.n	8008340 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	2200      	movs	r2, #0
 8008330:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008334:	711a      	strb	r2, [r3, #4]
 8008336:	2200      	movs	r2, #0
 8008338:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	2205      	movs	r2, #5
 800833e:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2229      	movs	r2, #41	@ 0x29
 8008344:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8008346:	4b02      	ldr	r3, [pc, #8]	@ (8008350 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 8008348:	4618      	mov	r0, r3
 800834a:	3710      	adds	r7, #16
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}
 8008350:	20000044 	.word	0x20000044

08008354 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b084      	sub	sp, #16
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 800835c:	2181      	movs	r1, #129	@ 0x81
 800835e:	4815      	ldr	r0, [pc, #84]	@ (80083b4 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8008360:	f000 fde5 	bl	8008f2e <USBD_GetEpDesc>
 8008364:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8008366:	2101      	movs	r1, #1
 8008368:	4812      	ldr	r0, [pc, #72]	@ (80083b4 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 800836a:	f000 fde0 	bl	8008f2e <USBD_GetEpDesc>
 800836e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d009      	beq.n	800838a <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	2200      	movs	r2, #0
 800837a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800837e:	711a      	strb	r2, [r3, #4]
 8008380:	2200      	movs	r2, #0
 8008382:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	2205      	movs	r2, #5
 8008388:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d009      	beq.n	80083a4 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	2200      	movs	r2, #0
 8008394:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008398:	711a      	strb	r2, [r3, #4]
 800839a:	2200      	movs	r2, #0
 800839c:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	2205      	movs	r2, #5
 80083a2:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2229      	movs	r2, #41	@ 0x29
 80083a8:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 80083aa:	4b02      	ldr	r3, [pc, #8]	@ (80083b4 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3710      	adds	r7, #16
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}
 80083b4:	20000044 	.word	0x20000044

080083b8 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b083      	sub	sp, #12
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
 80083c0:	460b      	mov	r3, r1
 80083c2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80083ca:	687a      	ldr	r2, [r7, #4]
 80083cc:	33b0      	adds	r3, #176	@ 0xb0
 80083ce:	009b      	lsls	r3, r3, #2
 80083d0:	4413      	add	r3, r2
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	2200      	movs	r2, #0
 80083d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return (uint8_t)USBD_OK;
 80083da:	2300      	movs	r3, #0
}
 80083dc:	4618      	mov	r0, r3
 80083de:	370c      	adds	r7, #12
 80083e0:	46bd      	mov	sp, r7
 80083e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e6:	4770      	bx	lr

080083e8 <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b084      	sub	sp, #16
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
 80083f0:	460b      	mov	r3, r1
 80083f2:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80083fa:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f503 7333 	add.w	r3, r3, #716	@ 0x2cc
 8008402:	68db      	ldr	r3, [r3, #12]
 8008404:	68fa      	ldr	r2, [r7, #12]
 8008406:	b2d2      	uxtb	r2, r2
 8008408:	4610      	mov	r0, r2
 800840a:	4798      	blx	r3

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 800840c:	68fa      	ldr	r2, [r7, #12]
 800840e:	2340      	movs	r3, #64	@ 0x40
 8008410:	2101      	movs	r1, #1
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f000 fa06 	bl	8008824 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 8008418:	2300      	movs	r3, #0
}
 800841a:	4618      	mov	r0, r3
 800841c:	3710      	adds	r7, #16
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}

08008422 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008422:	b580      	push	{r7, lr}
 8008424:	b084      	sub	sp, #16
 8008426:	af00      	add	r7, sp, #0
 8008428:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008430:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008436:	2b01      	cmp	r3, #1
 8008438:	d10a      	bne.n	8008450 <USBD_CUSTOM_HID_EP0_RxReady+0x2e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f503 7333 	add.w	r3, r3, #716	@ 0x2cc
 8008440:	68db      	ldr	r3, [r3, #12]
 8008442:	68fa      	ldr	r2, [r7, #12]
 8008444:	b2d2      	uxtb	r2, r2
 8008446:	4610      	mov	r0, r2
 8008448:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2200      	movs	r2, #0
 800844e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return USBD_OK;
 8008450:	2300      	movs	r3, #0
}
 8008452:	4618      	mov	r0, r3
 8008454:	3710      	adds	r7, #16
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}
	...

0800845c <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800845c:	b480      	push	{r7}
 800845e:	b083      	sub	sp, #12
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	220a      	movs	r2, #10
 8008468:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 800846a:	4b03      	ldr	r3, [pc, #12]	@ (8008478 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 800846c:	4618      	mov	r0, r3
 800846e:	370c      	adds	r7, #12
 8008470:	46bd      	mov	sp, r7
 8008472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008476:	4770      	bx	lr
 8008478:	2000007c 	.word	0x2000007c

0800847c <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 800847c:	b480      	push	{r7}
 800847e:	b083      	sub	sp, #12
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
 8008484:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d101      	bne.n	8008490 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800848c:	2303      	movs	r3, #3
 800848e:	e009      	b.n	80084a4 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008496:	687a      	ldr	r2, [r7, #4]
 8008498:	33b2      	adds	r3, #178	@ 0xb2
 800849a:	009b      	lsls	r3, r3, #2
 800849c:	4413      	add	r3, r2
 800849e:	683a      	ldr	r2, [r7, #0]
 80084a0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80084a2:	2300      	movs	r3, #0
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	370c      	adds	r7, #12
 80084a8:	46bd      	mov	sp, r7
 80084aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ae:	4770      	bx	lr

080084b0 <CUSTOM_HID_Init>:
  *         Initializes the CUSTOM HID media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init(void)
{
 80084b0:	b480      	push	{r7}
 80084b2:	af00      	add	r7, sp, #0
  return (0);
 80084b4:	2300      	movs	r3, #0
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	46bd      	mov	sp, r7
 80084ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084be:	4770      	bx	lr

080084c0 <CUSTOM_HID_DeInit>:
  *         DeInitializes the CUSTOM HID media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit(void)
{
 80084c0:	b480      	push	{r7}
 80084c2:	af00      	add	r7, sp, #0
  /*
     Add your deinitialization code here
  */
  return (0);
 80084c4:	2300      	movs	r3, #0
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	46bd      	mov	sp, r7
 80084ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ce:	4770      	bx	lr

080084d0 <CUSTOM_HID_OutEvent>:
  * @param  event_idx: event index
  * @param  state: event state
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent(uint8_t event_idx, uint8_t state)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b083      	sub	sp, #12
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	4603      	mov	r3, r0
 80084d8:	460a      	mov	r2, r1
 80084da:	71fb      	strb	r3, [r7, #7]
 80084dc:	4613      	mov	r3, r2
 80084de:	71bb      	strb	r3, [r7, #6]
	return (0);
 80084e0:	2300      	movs	r3, #0
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	370c      	adds	r7, #12
 80084e6:	46bd      	mov	sp, r7
 80084e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ec:	4770      	bx	lr

080084ee <HAL_PCD_SetupStageCallback>:
extern PCD_HandleTypeDef hpcd_USB_DRD_FS;
/* Private function prototypes -----------------------------------------------*/
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status);
/* Private functions ---------------------------------------------------------*/
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 80084ee:	b580      	push	{r7, lr}
 80084f0:	b082      	sub	sp, #8
 80084f2:	af00      	add	r7, sp, #0
 80084f4:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f8d3 22dc 	ldr.w	r2, [r3, #732]	@ 0x2dc
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 8008502:	4619      	mov	r1, r3
 8008504:	4610      	mov	r0, r2
 8008506:	f000 fabc 	bl	8008a82 <USBD_LL_SetupStage>
}
 800850a:	bf00      	nop
 800850c:	3708      	adds	r7, #8
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}

08008512 <HAL_PCD_DataOutStageCallback>:
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8008512:	b580      	push	{r7, lr}
 8008514:	b082      	sub	sp, #8
 8008516:	af00      	add	r7, sp, #0
 8008518:	6078      	str	r0, [r7, #4]
 800851a:	460b      	mov	r3, r1
 800851c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f8d3 02dc 	ldr.w	r0, [r3, #732]	@ 0x2dc
 8008524:	78fa      	ldrb	r2, [r7, #3]
 8008526:	6879      	ldr	r1, [r7, #4]
 8008528:	4613      	mov	r3, r2
 800852a:	009b      	lsls	r3, r3, #2
 800852c:	4413      	add	r3, r2
 800852e:	00db      	lsls	r3, r3, #3
 8008530:	440b      	add	r3, r1
 8008532:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8008536:	681a      	ldr	r2, [r3, #0]
 8008538:	78fb      	ldrb	r3, [r7, #3]
 800853a:	4619      	mov	r1, r3
 800853c:	f000 faf6 	bl	8008b2c <USBD_LL_DataOutStage>
}
 8008540:	bf00      	nop
 8008542:	3708      	adds	r7, #8
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}

08008548 <HAL_PCD_DataInStageCallback>:
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b082      	sub	sp, #8
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	460b      	mov	r3, r1
 8008552:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f8d3 02dc 	ldr.w	r0, [r3, #732]	@ 0x2dc
 800855a:	78fa      	ldrb	r2, [r7, #3]
 800855c:	6879      	ldr	r1, [r7, #4]
 800855e:	4613      	mov	r3, r2
 8008560:	009b      	lsls	r3, r3, #2
 8008562:	4413      	add	r3, r2
 8008564:	00db      	lsls	r3, r3, #3
 8008566:	440b      	add	r3, r1
 8008568:	3328      	adds	r3, #40	@ 0x28
 800856a:	681a      	ldr	r2, [r3, #0]
 800856c:	78fb      	ldrb	r3, [r7, #3]
 800856e:	4619      	mov	r1, r3
 8008570:	f000 fb8f 	bl	8008c92 <USBD_LL_DataInStage>
}
 8008574:	bf00      	nop
 8008576:	3708      	adds	r7, #8
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}

0800857c <HAL_PCD_SOFCallback>:
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b082      	sub	sp, #8
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800858a:	4618      	mov	r0, r3
 800858c:	f000 fc95 	bl	8008eba <USBD_LL_SOF>
}
 8008590:	bf00      	nop
 8008592:	3708      	adds	r7, #8
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}

08008598 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b084      	sub	sp, #16
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80085a0:	2301      	movs	r3, #1
 80085a2:	73fb      	strb	r3, [r7, #15]
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	79db      	ldrb	r3, [r3, #7]
 80085a8:	2b02      	cmp	r3, #2
 80085aa:	d001      	beq.n	80085b0 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80085ac:	f7f8 f8a4 	bl	80006f8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 80085b6:	7bfa      	ldrb	r2, [r7, #15]
 80085b8:	4611      	mov	r1, r2
 80085ba:	4618      	mov	r0, r3
 80085bc:	f000 fc6d 	bl	8008e9a <USBD_LL_SetSpeed>
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 80085c6:	4618      	mov	r0, r3
 80085c8:	f000 fc15 	bl	8008df6 <USBD_LL_Reset>
}
 80085cc:	bf00      	nop
 80085ce:	3710      	adds	r7, #16
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}

080085d4 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b082      	sub	sp, #8
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
	/* Link the driver to the stack */
	pdev->pData  = &hpcd_USB_DRD_FS;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	4a20      	ldr	r2, [pc, #128]	@ (8008660 <USBD_LL_Init+0x8c>)
 80085e0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
	hpcd_USB_DRD_FS.pData = pdev;
 80085e4:	4a1e      	ldr	r2, [pc, #120]	@ (8008660 <USBD_LL_Init+0x8c>)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f8c2 32dc 	str.w	r3, [r2, #732]	@ 0x2dc
	/* Initialize LL Driver */
	MX_USB_PCD_Init();
 80085ec:	f7f7 ff7c 	bl	80004e8 <MX_USB_PCD_Init>
	/* Control Endpoints */
	HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x20);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 80085f6:	2320      	movs	r3, #32
 80085f8:	2200      	movs	r2, #0
 80085fa:	2100      	movs	r1, #0
 80085fc:	f7fb f98e 	bl	800391c <HAL_PCDEx_PMAConfig>
	HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x60);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8008606:	2360      	movs	r3, #96	@ 0x60
 8008608:	2200      	movs	r2, #0
 800860a:	2180      	movs	r1, #128	@ 0x80
 800860c:	f7fb f986 	bl	800391c <HAL_PCDEx_PMAConfig>
	/* HID Endpoints */
	HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , HID_EPIN_ADDR , PCD_SNG_BUF, 0xA0);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8008616:	23a0      	movs	r3, #160	@ 0xa0
 8008618:	2200      	movs	r2, #0
 800861a:	2181      	movs	r1, #129	@ 0x81
 800861c:	f7fb f97e 	bl	800391c <HAL_PCDEx_PMAConfig>
	/* CDC Endpoints */
	HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_OUT_EP , PCD_SNG_BUF, 0xE0);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8008626:	23e0      	movs	r3, #224	@ 0xe0
 8008628:	2200      	movs	r2, #0
 800862a:	2101      	movs	r1, #1
 800862c:	f7fb f976 	bl	800391c <HAL_PCDEx_PMAConfig>
	HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_IN_EP , PCD_SNG_BUF, 0x120);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8008636:	f44f 7390 	mov.w	r3, #288	@ 0x120
 800863a:	2200      	movs	r2, #0
 800863c:	2182      	movs	r1, #130	@ 0x82
 800863e:	f7fb f96d 	bl	800391c <HAL_PCDEx_PMAConfig>
	HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_CMD_EP , PCD_SNG_BUF, 0x140);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8008648:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800864c:	2200      	movs	r2, #0
 800864e:	2183      	movs	r1, #131	@ 0x83
 8008650:	f7fb f964 	bl	800391c <HAL_PCDEx_PMAConfig>
	return USBD_OK;
 8008654:	2300      	movs	r3, #0
}
 8008656:	4618      	mov	r0, r3
 8008658:	3708      	adds	r7, #8
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}
 800865e:	bf00      	nop
 8008660:	200001e4 	.word	0x200001e4

08008664 <USBD_LL_Start>:
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_DeInit(pdev->pData);
	return USBD_Get_USB_Status(hal_status);
}
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b084      	sub	sp, #16
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_Start(pdev->pData);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008672:	4618      	mov	r0, r3
 8008674:	f7f9 fe4e 	bl	8002314 <HAL_PCD_Start>
 8008678:	4603      	mov	r3, r0
 800867a:	73fb      	strb	r3, [r7, #15]
	return  USBD_Get_USB_Status(hal_status);
 800867c:	7bfb      	ldrb	r3, [r7, #15]
 800867e:	4618      	mov	r0, r3
 8008680:	f000 f904 	bl	800888c <USBD_Get_USB_Status>
 8008684:	4603      	mov	r3, r0
}
 8008686:	4618      	mov	r0, r3
 8008688:	3710      	adds	r7, #16
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}

0800868e <USBD_LL_OpenEP>:
	hal_status = HAL_PCD_Stop(pdev->pData);
	return USBD_Get_USB_Status(hal_status);
}
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
		uint8_t ep_type, uint16_t ep_mps)
{
 800868e:	b580      	push	{r7, lr}
 8008690:	b084      	sub	sp, #16
 8008692:	af00      	add	r7, sp, #0
 8008694:	6078      	str	r0, [r7, #4]
 8008696:	4608      	mov	r0, r1
 8008698:	4611      	mov	r1, r2
 800869a:	461a      	mov	r2, r3
 800869c:	4603      	mov	r3, r0
 800869e:	70fb      	strb	r3, [r7, #3]
 80086a0:	460b      	mov	r3, r1
 80086a2:	70bb      	strb	r3, [r7, #2]
 80086a4:	4613      	mov	r3, r2
 80086a6:	803b      	strh	r3, [r7, #0]
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 80086ae:	78bb      	ldrb	r3, [r7, #2]
 80086b0:	883a      	ldrh	r2, [r7, #0]
 80086b2:	78f9      	ldrb	r1, [r7, #3]
 80086b4:	f7f9 ff7d 	bl	80025b2 <HAL_PCD_EP_Open>
 80086b8:	4603      	mov	r3, r0
 80086ba:	73fb      	strb	r3, [r7, #15]
	return USBD_Get_USB_Status(hal_status);
 80086bc:	7bfb      	ldrb	r3, [r7, #15]
 80086be:	4618      	mov	r0, r3
 80086c0:	f000 f8e4 	bl	800888c <USBD_Get_USB_Status>
 80086c4:	4603      	mov	r3, r0
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3710      	adds	r7, #16
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}

080086ce <USBD_LL_CloseEP>:
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086ce:	b580      	push	{r7, lr}
 80086d0:	b084      	sub	sp, #16
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	6078      	str	r0, [r7, #4]
 80086d6:	460b      	mov	r3, r1
 80086d8:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80086e0:	78fa      	ldrb	r2, [r7, #3]
 80086e2:	4611      	mov	r1, r2
 80086e4:	4618      	mov	r0, r3
 80086e6:	f7f9 ffc5 	bl	8002674 <HAL_PCD_EP_Close>
 80086ea:	4603      	mov	r3, r0
 80086ec:	73fb      	strb	r3, [r7, #15]
	return USBD_Get_USB_Status(hal_status);
 80086ee:	7bfb      	ldrb	r3, [r7, #15]
 80086f0:	4618      	mov	r0, r3
 80086f2:	f000 f8cb 	bl	800888c <USBD_Get_USB_Status>
 80086f6:	4603      	mov	r3, r0
}
 80086f8:	4618      	mov	r0, r3
 80086fa:	3710      	adds	r7, #16
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}

08008700 <USBD_LL_StallEP>:
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
	return USBD_Get_USB_Status(hal_status);
}
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b084      	sub	sp, #16
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
 8008708:	460b      	mov	r3, r1
 800870a:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008712:	78fa      	ldrb	r2, [r7, #3]
 8008714:	4611      	mov	r1, r2
 8008716:	4618      	mov	r0, r3
 8008718:	f7fa f860 	bl	80027dc <HAL_PCD_EP_SetStall>
 800871c:	4603      	mov	r3, r0
 800871e:	73fb      	strb	r3, [r7, #15]
	return USBD_Get_USB_Status(hal_status);
 8008720:	7bfb      	ldrb	r3, [r7, #15]
 8008722:	4618      	mov	r0, r3
 8008724:	f000 f8b2 	bl	800888c <USBD_Get_USB_Status>
 8008728:	4603      	mov	r3, r0
}
 800872a:	4618      	mov	r0, r3
 800872c:	3710      	adds	r7, #16
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}

08008732 <USBD_LL_ClearStallEP>:
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev,
		uint8_t ep_addr)
{
 8008732:	b580      	push	{r7, lr}
 8008734:	b084      	sub	sp, #16
 8008736:	af00      	add	r7, sp, #0
 8008738:	6078      	str	r0, [r7, #4]
 800873a:	460b      	mov	r3, r1
 800873c:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008744:	78fa      	ldrb	r2, [r7, #3]
 8008746:	4611      	mov	r1, r2
 8008748:	4618      	mov	r0, r3
 800874a:	f7fa f89b 	bl	8002884 <HAL_PCD_EP_ClrStall>
 800874e:	4603      	mov	r3, r0
 8008750:	73fb      	strb	r3, [r7, #15]
	return USBD_Get_USB_Status(hal_status);
 8008752:	7bfb      	ldrb	r3, [r7, #15]
 8008754:	4618      	mov	r0, r3
 8008756:	f000 f899 	bl	800888c <USBD_Get_USB_Status>
 800875a:	4603      	mov	r3, r0
}
 800875c:	4618      	mov	r0, r3
 800875e:	3710      	adds	r7, #16
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}

08008764 <USBD_LL_IsStallEP>:
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008764:	b480      	push	{r7}
 8008766:	b085      	sub	sp, #20
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	460b      	mov	r3, r1
 800876e:	70fb      	strb	r3, [r7, #3]
	PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008776:	60fb      	str	r3, [r7, #12]
	if((ep_addr & 0x80) == 0x80)
 8008778:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800877c:	2b00      	cmp	r3, #0
 800877e:	da0b      	bge.n	8008798 <USBD_LL_IsStallEP+0x34>
	{
		return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008780:	78fb      	ldrb	r3, [r7, #3]
 8008782:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008786:	68f9      	ldr	r1, [r7, #12]
 8008788:	4613      	mov	r3, r2
 800878a:	009b      	lsls	r3, r3, #2
 800878c:	4413      	add	r3, r2
 800878e:	00db      	lsls	r3, r3, #3
 8008790:	440b      	add	r3, r1
 8008792:	3316      	adds	r3, #22
 8008794:	781b      	ldrb	r3, [r3, #0]
 8008796:	e00b      	b.n	80087b0 <USBD_LL_IsStallEP+0x4c>
	}
	else
	{
		return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008798:	78fb      	ldrb	r3, [r7, #3]
 800879a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800879e:	68f9      	ldr	r1, [r7, #12]
 80087a0:	4613      	mov	r3, r2
 80087a2:	009b      	lsls	r3, r3, #2
 80087a4:	4413      	add	r3, r2
 80087a6:	00db      	lsls	r3, r3, #3
 80087a8:	440b      	add	r3, r1
 80087aa:	f503 73ab 	add.w	r3, r3, #342	@ 0x156
 80087ae:	781b      	ldrb	r3, [r3, #0]
	}
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	3714      	adds	r7, #20
 80087b4:	46bd      	mov	sp, r7
 80087b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ba:	4770      	bx	lr

080087bc <USBD_LL_SetUSBAddress>:
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev,
		uint8_t dev_addr)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b084      	sub	sp, #16
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	460b      	mov	r3, r1
 80087c6:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80087ce:	78fa      	ldrb	r2, [r7, #3]
 80087d0:	4611      	mov	r1, r2
 80087d2:	4618      	mov	r0, r3
 80087d4:	f7f9 fec9 	bl	800256a <HAL_PCD_SetAddress>
 80087d8:	4603      	mov	r3, r0
 80087da:	73fb      	strb	r3, [r7, #15]
	return USBD_Get_USB_Status(hal_status);
 80087dc:	7bfb      	ldrb	r3, [r7, #15]
 80087de:	4618      	mov	r0, r3
 80087e0:	f000 f854 	bl	800888c <USBD_Get_USB_Status>
 80087e4:	4603      	mov	r3, r0
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3710      	adds	r7, #16
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}

080087ee <USBD_LL_Transmit>:
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
		uint8_t *pbuf, uint32_t size)
{
 80087ee:	b580      	push	{r7, lr}
 80087f0:	b086      	sub	sp, #24
 80087f2:	af00      	add	r7, sp, #0
 80087f4:	60f8      	str	r0, [r7, #12]
 80087f6:	607a      	str	r2, [r7, #4]
 80087f8:	603b      	str	r3, [r7, #0]
 80087fa:	460b      	mov	r3, r1
 80087fc:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8008804:	7af9      	ldrb	r1, [r7, #11]
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	687a      	ldr	r2, [r7, #4]
 800880a:	f7f9 ffaf 	bl	800276c <HAL_PCD_EP_Transmit>
 800880e:	4603      	mov	r3, r0
 8008810:	75fb      	strb	r3, [r7, #23]
	return USBD_Get_USB_Status(hal_status);
 8008812:	7dfb      	ldrb	r3, [r7, #23]
 8008814:	4618      	mov	r0, r3
 8008816:	f000 f839 	bl	800888c <USBD_Get_USB_Status>
 800881a:	4603      	mov	r3, r0
}
 800881c:	4618      	mov	r0, r3
 800881e:	3718      	adds	r7, #24
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}

08008824 <USBD_LL_PrepareReceive>:
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev,
		uint8_t ep_addr, uint8_t *pbuf,
		uint32_t size)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b086      	sub	sp, #24
 8008828:	af00      	add	r7, sp, #0
 800882a:	60f8      	str	r0, [r7, #12]
 800882c:	607a      	str	r2, [r7, #4]
 800882e:	603b      	str	r3, [r7, #0]
 8008830:	460b      	mov	r3, r1
 8008832:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800883a:	7af9      	ldrb	r1, [r7, #11]
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	687a      	ldr	r2, [r7, #4]
 8008840:	f7f9 ff62 	bl	8002708 <HAL_PCD_EP_Receive>
 8008844:	4603      	mov	r3, r0
 8008846:	75fb      	strb	r3, [r7, #23]
	return USBD_Get_USB_Status(hal_status);
 8008848:	7dfb      	ldrb	r3, [r7, #23]
 800884a:	4618      	mov	r0, r3
 800884c:	f000 f81e 	bl	800888c <USBD_Get_USB_Status>
 8008850:	4603      	mov	r3, r0
}
 8008852:	4618      	mov	r0, r3
 8008854:	3718      	adds	r7, #24
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}
	...

0800885c <USBD_static_malloc>:
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
	return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
}
void *USBD_static_malloc(uint32_t size)
{
 800885c:	b480      	push	{r7}
 800885e:	b083      	sub	sp, #12
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
	UNUSED(size);
	static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef) / 4) + 1]; /* On 32-bit boundary */
	return mem;
 8008864:	4b03      	ldr	r3, [pc, #12]	@ (8008874 <USBD_static_malloc+0x18>)
}
 8008866:	4618      	mov	r0, r3
 8008868:	370c      	adds	r7, #12
 800886a:	46bd      	mov	sp, r7
 800886c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008870:	4770      	bx	lr
 8008872:	bf00      	nop
 8008874:	20000810 	.word	0x20000810

08008878 <USBD_static_free>:
void USBD_static_free(void *p)
{
 8008878:	b480      	push	{r7}
 800887a:	b083      	sub	sp, #12
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
	UNUSED(p);
}
 8008880:	bf00      	nop
 8008882:	370c      	adds	r7, #12
 8008884:	46bd      	mov	sp, r7
 8008886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888a:	4770      	bx	lr

0800888c <USBD_Get_USB_Status>:
{
     HAL_Delay(Delay);
}

USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800888c:	b480      	push	{r7}
 800888e:	b085      	sub	sp, #20
 8008890:	af00      	add	r7, sp, #0
 8008892:	4603      	mov	r3, r0
 8008894:	71fb      	strb	r3, [r7, #7]
	USBD_StatusTypeDef usb_status = USBD_OK;
 8008896:	2300      	movs	r3, #0
 8008898:	73fb      	strb	r3, [r7, #15]
	switch (hal_status)
 800889a:	79fb      	ldrb	r3, [r7, #7]
 800889c:	2b03      	cmp	r3, #3
 800889e:	d817      	bhi.n	80088d0 <USBD_Get_USB_Status+0x44>
 80088a0:	a201      	add	r2, pc, #4	@ (adr r2, 80088a8 <USBD_Get_USB_Status+0x1c>)
 80088a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088a6:	bf00      	nop
 80088a8:	080088b9 	.word	0x080088b9
 80088ac:	080088bf 	.word	0x080088bf
 80088b0:	080088c5 	.word	0x080088c5
 80088b4:	080088cb 	.word	0x080088cb
	{
	case HAL_OK :
		usb_status = USBD_OK;
 80088b8:	2300      	movs	r3, #0
 80088ba:	73fb      	strb	r3, [r7, #15]
		break;
 80088bc:	e00b      	b.n	80088d6 <USBD_Get_USB_Status+0x4a>
	case HAL_ERROR :
		usb_status = USBD_FAIL;
 80088be:	2303      	movs	r3, #3
 80088c0:	73fb      	strb	r3, [r7, #15]
		break;
 80088c2:	e008      	b.n	80088d6 <USBD_Get_USB_Status+0x4a>
	case HAL_BUSY :
		usb_status = USBD_BUSY;
 80088c4:	2301      	movs	r3, #1
 80088c6:	73fb      	strb	r3, [r7, #15]
		break;
 80088c8:	e005      	b.n	80088d6 <USBD_Get_USB_Status+0x4a>
	case HAL_TIMEOUT :
		usb_status = USBD_FAIL;
 80088ca:	2303      	movs	r3, #3
 80088cc:	73fb      	strb	r3, [r7, #15]
		break;
 80088ce:	e002      	b.n	80088d6 <USBD_Get_USB_Status+0x4a>
	default :
		usb_status = USBD_FAIL;
 80088d0:	2303      	movs	r3, #3
 80088d2:	73fb      	strb	r3, [r7, #15]
		break;
 80088d4:	bf00      	nop
	}
	return usb_status;
 80088d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80088d8:	4618      	mov	r0, r3
 80088da:	3714      	adds	r7, #20
 80088dc:	46bd      	mov	sp, r7
 80088de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e2:	4770      	bx	lr

080088e4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b086      	sub	sp, #24
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	60f8      	str	r0, [r7, #12]
 80088ec:	60b9      	str	r1, [r7, #8]
 80088ee:	4613      	mov	r3, r2
 80088f0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d10a      	bne.n	800890e <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 80088f8:	4817      	ldr	r0, [pc, #92]	@ (8008958 <USBD_Init+0x74>)
 80088fa:	f001 fc11 	bl	800a120 <iprintf>
 80088fe:	4817      	ldr	r0, [pc, #92]	@ (800895c <USBD_Init+0x78>)
 8008900:	f001 fc0e 	bl	800a120 <iprintf>
 8008904:	200a      	movs	r0, #10
 8008906:	f001 fc1d 	bl	800a144 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800890a:	2303      	movs	r3, #3
 800890c:	e01f      	b.n	800894e <USBD_Init+0x6a>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	2200      	movs	r2, #0
 8008912:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2200      	movs	r2, #0
 800891a:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2200      	movs	r2, #0
 8008922:	f8c3 22dc 	str.w	r2, [r3, #732]	@ 0x2dc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d003      	beq.n	8008934 <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	68ba      	ldr	r2, [r7, #8]
 8008930:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	2201      	movs	r2, #1
 8008938:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	79fa      	ldrb	r2, [r7, #7]
 8008940:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008942:	68f8      	ldr	r0, [r7, #12]
 8008944:	f7ff fe46 	bl	80085d4 <USBD_LL_Init>
 8008948:	4603      	mov	r3, r0
 800894a:	75fb      	strb	r3, [r7, #23]

  return ret;
 800894c:	7dfb      	ldrb	r3, [r7, #23]
}
 800894e:	4618      	mov	r0, r3
 8008950:	3718      	adds	r7, #24
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}
 8008956:	bf00      	nop
 8008958:	0800aeb0 	.word	0x0800aeb0
 800895c:	0800aeb8 	.word	0x0800aeb8

08008960 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b084      	sub	sp, #16
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
 8008968:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800896a:	2300      	movs	r3, #0
 800896c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d10a      	bne.n	800898a <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 8008974:	481a      	ldr	r0, [pc, #104]	@ (80089e0 <USBD_RegisterClass+0x80>)
 8008976:	f001 fbd3 	bl	800a120 <iprintf>
 800897a:	481a      	ldr	r0, [pc, #104]	@ (80089e4 <USBD_RegisterClass+0x84>)
 800897c:	f001 fbd0 	bl	800a120 <iprintf>
 8008980:	200a      	movs	r0, #10
 8008982:	f001 fbdf 	bl	800a144 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008986:	2303      	movs	r3, #3
 8008988:	e025      	b.n	80089d6 <USBD_RegisterClass+0x76>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	683a      	ldr	r2, [r7, #0]
 800898e:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	32ae      	adds	r2, #174	@ 0xae
 800899c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d00f      	beq.n	80089c6 <USBD_RegisterClass+0x66>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	32ae      	adds	r2, #174	@ 0xae
 80089b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089b6:	f107 020e 	add.w	r2, r7, #14
 80089ba:	4610      	mov	r0, r2
 80089bc:	4798      	blx	r3
 80089be:	4602      	mov	r2, r0
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f8c3 22dc 	str.w	r2, [r3, #732]	@ 0x2dc
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f8d3 32e4 	ldr.w	r3, [r3, #740]	@ 0x2e4
 80089cc:	1c5a      	adds	r2, r3, #1
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f8c3 22e4 	str.w	r2, [r3, #740]	@ 0x2e4

  return USBD_OK;
 80089d4:	2300      	movs	r3, #0
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3710      	adds	r7, #16
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}
 80089de:	bf00      	nop
 80089e0:	0800aeb0 	.word	0x0800aeb0
 80089e4:	0800aed0 	.word	0x0800aed0

080089e8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b082      	sub	sp, #8
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f7ff fe37 	bl	8008664 <USBD_LL_Start>
 80089f6:	4603      	mov	r3, r0
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	3708      	adds	r7, #8
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}

08008a00 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b083      	sub	sp, #12
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008a08:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	370c      	adds	r7, #12
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a14:	4770      	bx	lr

08008a16 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a16:	b580      	push	{r7, lr}
 8008a18:	b084      	sub	sp, #16
 8008a1a:	af00      	add	r7, sp, #0
 8008a1c:	6078      	str	r0, [r7, #4]
 8008a1e:	460b      	mov	r3, r1
 8008a20:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a22:	2300      	movs	r3, #0
 8008a24:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d009      	beq.n	8008a44 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	78fa      	ldrb	r2, [r7, #3]
 8008a3a:	4611      	mov	r1, r2
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	4798      	blx	r3
 8008a40:	4603      	mov	r3, r0
 8008a42:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3710      	adds	r7, #16
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}

08008a4e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a4e:	b580      	push	{r7, lr}
 8008a50:	b084      	sub	sp, #16
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	6078      	str	r0, [r7, #4]
 8008a56:	460b      	mov	r3, r1
 8008a58:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a64:	685b      	ldr	r3, [r3, #4]
 8008a66:	78fa      	ldrb	r2, [r7, #3]
 8008a68:	4611      	mov	r1, r2
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	4798      	blx	r3
 8008a6e:	4603      	mov	r3, r0
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d001      	beq.n	8008a78 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008a74:	2303      	movs	r3, #3
 8008a76:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3710      	adds	r7, #16
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}

08008a82 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008a82:	b580      	push	{r7, lr}
 8008a84:	b084      	sub	sp, #16
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	6078      	str	r0, [r7, #4]
 8008a8a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008a92:	6839      	ldr	r1, [r7, #0]
 8008a94:	4618      	mov	r0, r3
 8008a96:	f001 f846 	bl	8009b26 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2201      	movs	r2, #1
 8008a9e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008aa8:	461a      	mov	r2, r3
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008ab6:	f003 031f 	and.w	r3, r3, #31
 8008aba:	2b02      	cmp	r3, #2
 8008abc:	d01a      	beq.n	8008af4 <USBD_LL_SetupStage+0x72>
 8008abe:	2b02      	cmp	r3, #2
 8008ac0:	d822      	bhi.n	8008b08 <USBD_LL_SetupStage+0x86>
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d002      	beq.n	8008acc <USBD_LL_SetupStage+0x4a>
 8008ac6:	2b01      	cmp	r3, #1
 8008ac8:	d00a      	beq.n	8008ae0 <USBD_LL_SetupStage+0x5e>
 8008aca:	e01d      	b.n	8008b08 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008ad2:	4619      	mov	r1, r3
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f000 fa9d 	bl	8009014 <USBD_StdDevReq>
 8008ada:	4603      	mov	r3, r0
 8008adc:	73fb      	strb	r3, [r7, #15]
      break;
 8008ade:	e020      	b.n	8008b22 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008ae6:	4619      	mov	r1, r3
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f000 fb05 	bl	80090f8 <USBD_StdItfReq>
 8008aee:	4603      	mov	r3, r0
 8008af0:	73fb      	strb	r3, [r7, #15]
      break;
 8008af2:	e016      	b.n	8008b22 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008afa:	4619      	mov	r1, r3
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f000 fb67 	bl	80091d0 <USBD_StdEPReq>
 8008b02:	4603      	mov	r3, r0
 8008b04:	73fb      	strb	r3, [r7, #15]
      break;
 8008b06:	e00c      	b.n	8008b22 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008b0e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008b12:	b2db      	uxtb	r3, r3
 8008b14:	4619      	mov	r1, r3
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f7ff fdf2 	bl	8008700 <USBD_LL_StallEP>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	73fb      	strb	r3, [r7, #15]
      break;
 8008b20:	bf00      	nop
  }

  return ret;
 8008b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3710      	adds	r7, #16
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}

08008b2c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b086      	sub	sp, #24
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	60f8      	str	r0, [r7, #12]
 8008b34:	460b      	mov	r3, r1
 8008b36:	607a      	str	r2, [r7, #4]
 8008b38:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008b3e:	7afb      	ldrb	r3, [r7, #11]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d16e      	bne.n	8008c22 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008b4a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008b52:	2b03      	cmp	r3, #3
 8008b54:	f040 8098 	bne.w	8008c88 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008b58:	693b      	ldr	r3, [r7, #16]
 8008b5a:	689a      	ldr	r2, [r3, #8]
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	68db      	ldr	r3, [r3, #12]
 8008b60:	429a      	cmp	r2, r3
 8008b62:	d913      	bls.n	8008b8c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	689a      	ldr	r2, [r3, #8]
 8008b68:	693b      	ldr	r3, [r7, #16]
 8008b6a:	68db      	ldr	r3, [r3, #12]
 8008b6c:	1ad2      	subs	r2, r2, r3
 8008b6e:	693b      	ldr	r3, [r7, #16]
 8008b70:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008b72:	693b      	ldr	r3, [r7, #16]
 8008b74:	68da      	ldr	r2, [r3, #12]
 8008b76:	693b      	ldr	r3, [r7, #16]
 8008b78:	689b      	ldr	r3, [r3, #8]
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	bf28      	it	cs
 8008b7e:	4613      	movcs	r3, r2
 8008b80:	461a      	mov	r2, r3
 8008b82:	6879      	ldr	r1, [r7, #4]
 8008b84:	68f8      	ldr	r0, [r7, #12]
 8008b86:	f001 f9d1 	bl	8009f2c <USBD_CtlContinueRx>
 8008b8a:	e07d      	b.n	8008c88 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008b92:	f003 031f 	and.w	r3, r3, #31
 8008b96:	2b02      	cmp	r3, #2
 8008b98:	d014      	beq.n	8008bc4 <USBD_LL_DataOutStage+0x98>
 8008b9a:	2b02      	cmp	r3, #2
 8008b9c:	d81d      	bhi.n	8008bda <USBD_LL_DataOutStage+0xae>
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d002      	beq.n	8008ba8 <USBD_LL_DataOutStage+0x7c>
 8008ba2:	2b01      	cmp	r3, #1
 8008ba4:	d003      	beq.n	8008bae <USBD_LL_DataOutStage+0x82>
 8008ba6:	e018      	b.n	8008bda <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	75bb      	strb	r3, [r7, #22]
            break;
 8008bac:	e018      	b.n	8008be0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008bb4:	b2db      	uxtb	r3, r3
 8008bb6:	4619      	mov	r1, r3
 8008bb8:	68f8      	ldr	r0, [r7, #12]
 8008bba:	f000 f99e 	bl	8008efa <USBD_CoreFindIF>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	75bb      	strb	r3, [r7, #22]
            break;
 8008bc2:	e00d      	b.n	8008be0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008bca:	b2db      	uxtb	r3, r3
 8008bcc:	4619      	mov	r1, r3
 8008bce:	68f8      	ldr	r0, [r7, #12]
 8008bd0:	f000 f9a0 	bl	8008f14 <USBD_CoreFindEP>
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	75bb      	strb	r3, [r7, #22]
            break;
 8008bd8:	e002      	b.n	8008be0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	75bb      	strb	r3, [r7, #22]
            break;
 8008bde:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008be0:	7dbb      	ldrb	r3, [r7, #22]
 8008be2:	2b01      	cmp	r3, #1
 8008be4:	d819      	bhi.n	8008c1a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008bec:	b2db      	uxtb	r3, r3
 8008bee:	2b03      	cmp	r3, #3
 8008bf0:	d113      	bne.n	8008c1a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008bf2:	7dba      	ldrb	r2, [r7, #22]
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	32ae      	adds	r2, #174	@ 0xae
 8008bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bfc:	691b      	ldr	r3, [r3, #16]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d00b      	beq.n	8008c1a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008c02:	7dba      	ldrb	r2, [r7, #22]
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008c0a:	7dba      	ldrb	r2, [r7, #22]
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	32ae      	adds	r2, #174	@ 0xae
 8008c10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c14:	691b      	ldr	r3, [r3, #16]
 8008c16:	68f8      	ldr	r0, [r7, #12]
 8008c18:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008c1a:	68f8      	ldr	r0, [r7, #12]
 8008c1c:	f001 f997 	bl	8009f4e <USBD_CtlSendStatus>
 8008c20:	e032      	b.n	8008c88 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008c22:	7afb      	ldrb	r3, [r7, #11]
 8008c24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c28:	b2db      	uxtb	r3, r3
 8008c2a:	4619      	mov	r1, r3
 8008c2c:	68f8      	ldr	r0, [r7, #12]
 8008c2e:	f000 f971 	bl	8008f14 <USBD_CoreFindEP>
 8008c32:	4603      	mov	r3, r0
 8008c34:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008c36:	7dbb      	ldrb	r3, [r7, #22]
 8008c38:	2bff      	cmp	r3, #255	@ 0xff
 8008c3a:	d025      	beq.n	8008c88 <USBD_LL_DataOutStage+0x15c>
 8008c3c:	7dbb      	ldrb	r3, [r7, #22]
 8008c3e:	2b01      	cmp	r3, #1
 8008c40:	d822      	bhi.n	8008c88 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c48:	b2db      	uxtb	r3, r3
 8008c4a:	2b03      	cmp	r3, #3
 8008c4c:	d117      	bne.n	8008c7e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008c4e:	7dba      	ldrb	r2, [r7, #22]
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	32ae      	adds	r2, #174	@ 0xae
 8008c54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c58:	699b      	ldr	r3, [r3, #24]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d00f      	beq.n	8008c7e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008c5e:	7dba      	ldrb	r2, [r7, #22]
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008c66:	7dba      	ldrb	r2, [r7, #22]
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	32ae      	adds	r2, #174	@ 0xae
 8008c6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c70:	699b      	ldr	r3, [r3, #24]
 8008c72:	7afa      	ldrb	r2, [r7, #11]
 8008c74:	4611      	mov	r1, r2
 8008c76:	68f8      	ldr	r0, [r7, #12]
 8008c78:	4798      	blx	r3
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008c7e:	7dfb      	ldrb	r3, [r7, #23]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d001      	beq.n	8008c88 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008c84:	7dfb      	ldrb	r3, [r7, #23]
 8008c86:	e000      	b.n	8008c8a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008c88:	2300      	movs	r3, #0
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3718      	adds	r7, #24
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}

08008c92 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008c92:	b580      	push	{r7, lr}
 8008c94:	b086      	sub	sp, #24
 8008c96:	af00      	add	r7, sp, #0
 8008c98:	60f8      	str	r0, [r7, #12]
 8008c9a:	460b      	mov	r3, r1
 8008c9c:	607a      	str	r2, [r7, #4]
 8008c9e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008ca0:	7afb      	ldrb	r3, [r7, #11]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d16f      	bne.n	8008d86 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	3314      	adds	r3, #20
 8008caa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008cb2:	2b02      	cmp	r3, #2
 8008cb4:	d15a      	bne.n	8008d6c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008cb6:	693b      	ldr	r3, [r7, #16]
 8008cb8:	689a      	ldr	r2, [r3, #8]
 8008cba:	693b      	ldr	r3, [r7, #16]
 8008cbc:	68db      	ldr	r3, [r3, #12]
 8008cbe:	429a      	cmp	r2, r3
 8008cc0:	d914      	bls.n	8008cec <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	689a      	ldr	r2, [r3, #8]
 8008cc6:	693b      	ldr	r3, [r7, #16]
 8008cc8:	68db      	ldr	r3, [r3, #12]
 8008cca:	1ad2      	subs	r2, r2, r3
 8008ccc:	693b      	ldr	r3, [r7, #16]
 8008cce:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	689b      	ldr	r3, [r3, #8]
 8008cd4:	461a      	mov	r2, r3
 8008cd6:	6879      	ldr	r1, [r7, #4]
 8008cd8:	68f8      	ldr	r0, [r7, #12]
 8008cda:	f001 f8f9 	bl	8009ed0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008cde:	2300      	movs	r3, #0
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	2100      	movs	r1, #0
 8008ce4:	68f8      	ldr	r0, [r7, #12]
 8008ce6:	f7ff fd9d 	bl	8008824 <USBD_LL_PrepareReceive>
 8008cea:	e03f      	b.n	8008d6c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	68da      	ldr	r2, [r3, #12]
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	689b      	ldr	r3, [r3, #8]
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	d11c      	bne.n	8008d32 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	685a      	ldr	r2, [r3, #4]
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008d00:	429a      	cmp	r2, r3
 8008d02:	d316      	bcc.n	8008d32 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	685a      	ldr	r2, [r3, #4]
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008d0e:	429a      	cmp	r2, r3
 8008d10:	d20f      	bcs.n	8008d32 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008d12:	2200      	movs	r2, #0
 8008d14:	2100      	movs	r1, #0
 8008d16:	68f8      	ldr	r0, [r7, #12]
 8008d18:	f001 f8da 	bl	8009ed0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008d24:	2300      	movs	r3, #0
 8008d26:	2200      	movs	r2, #0
 8008d28:	2100      	movs	r1, #0
 8008d2a:	68f8      	ldr	r0, [r7, #12]
 8008d2c:	f7ff fd7a 	bl	8008824 <USBD_LL_PrepareReceive>
 8008d30:	e01c      	b.n	8008d6c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d38:	b2db      	uxtb	r3, r3
 8008d3a:	2b03      	cmp	r3, #3
 8008d3c:	d10f      	bne.n	8008d5e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d44:	68db      	ldr	r3, [r3, #12]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d009      	beq.n	8008d5e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d58:	68db      	ldr	r3, [r3, #12]
 8008d5a:	68f8      	ldr	r0, [r7, #12]
 8008d5c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008d5e:	2180      	movs	r1, #128	@ 0x80
 8008d60:	68f8      	ldr	r0, [r7, #12]
 8008d62:	f7ff fccd 	bl	8008700 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008d66:	68f8      	ldr	r0, [r7, #12]
 8008d68:	f001 f904 	bl	8009f74 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d03a      	beq.n	8008dec <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008d76:	68f8      	ldr	r0, [r7, #12]
 8008d78:	f7ff fe42 	bl	8008a00 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008d84:	e032      	b.n	8008dec <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008d86:	7afb      	ldrb	r3, [r7, #11]
 8008d88:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008d8c:	b2db      	uxtb	r3, r3
 8008d8e:	4619      	mov	r1, r3
 8008d90:	68f8      	ldr	r0, [r7, #12]
 8008d92:	f000 f8bf 	bl	8008f14 <USBD_CoreFindEP>
 8008d96:	4603      	mov	r3, r0
 8008d98:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008d9a:	7dfb      	ldrb	r3, [r7, #23]
 8008d9c:	2bff      	cmp	r3, #255	@ 0xff
 8008d9e:	d025      	beq.n	8008dec <USBD_LL_DataInStage+0x15a>
 8008da0:	7dfb      	ldrb	r3, [r7, #23]
 8008da2:	2b01      	cmp	r3, #1
 8008da4:	d822      	bhi.n	8008dec <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008dac:	b2db      	uxtb	r3, r3
 8008dae:	2b03      	cmp	r3, #3
 8008db0:	d11c      	bne.n	8008dec <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008db2:	7dfa      	ldrb	r2, [r7, #23]
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	32ae      	adds	r2, #174	@ 0xae
 8008db8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dbc:	695b      	ldr	r3, [r3, #20]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d014      	beq.n	8008dec <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008dc2:	7dfa      	ldrb	r2, [r7, #23]
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008dca:	7dfa      	ldrb	r2, [r7, #23]
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	32ae      	adds	r2, #174	@ 0xae
 8008dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dd4:	695b      	ldr	r3, [r3, #20]
 8008dd6:	7afa      	ldrb	r2, [r7, #11]
 8008dd8:	4611      	mov	r1, r2
 8008dda:	68f8      	ldr	r0, [r7, #12]
 8008ddc:	4798      	blx	r3
 8008dde:	4603      	mov	r3, r0
 8008de0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008de2:	7dbb      	ldrb	r3, [r7, #22]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d001      	beq.n	8008dec <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008de8:	7dbb      	ldrb	r3, [r7, #22]
 8008dea:	e000      	b.n	8008dee <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008dec:	2300      	movs	r3, #0
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3718      	adds	r7, #24
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}

08008df6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008df6:	b580      	push	{r7, lr}
 8008df8:	b084      	sub	sp, #16
 8008dfa:	af00      	add	r7, sp, #0
 8008dfc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2201      	movs	r2, #1
 8008e06:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2200      	movs	r2, #0
 8008e16:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2200      	movs	r2, #0
 8008e24:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d014      	beq.n	8008e5c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e38:	685b      	ldr	r3, [r3, #4]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d00e      	beq.n	8008e5c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e44:	685b      	ldr	r3, [r3, #4]
 8008e46:	687a      	ldr	r2, [r7, #4]
 8008e48:	6852      	ldr	r2, [r2, #4]
 8008e4a:	b2d2      	uxtb	r2, r2
 8008e4c:	4611      	mov	r1, r2
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	4798      	blx	r3
 8008e52:	4603      	mov	r3, r0
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d001      	beq.n	8008e5c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008e58:	2303      	movs	r3, #3
 8008e5a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008e5c:	2340      	movs	r3, #64	@ 0x40
 8008e5e:	2200      	movs	r2, #0
 8008e60:	2100      	movs	r1, #0
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f7ff fc13 	bl	800868e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2240      	movs	r2, #64	@ 0x40
 8008e74:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008e78:	2340      	movs	r3, #64	@ 0x40
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	2180      	movs	r1, #128	@ 0x80
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f7ff fc05 	bl	800868e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2201      	movs	r2, #1
 8008e88:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2240      	movs	r2, #64	@ 0x40
 8008e8e:	621a      	str	r2, [r3, #32]

  return ret;
 8008e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	3710      	adds	r7, #16
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd80      	pop	{r7, pc}

08008e9a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008e9a:	b480      	push	{r7}
 8008e9c:	b083      	sub	sp, #12
 8008e9e:	af00      	add	r7, sp, #0
 8008ea0:	6078      	str	r0, [r7, #4]
 8008ea2:	460b      	mov	r3, r1
 8008ea4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	78fa      	ldrb	r2, [r7, #3]
 8008eaa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008eac:	2300      	movs	r3, #0
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	370c      	adds	r7, #12
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb8:	4770      	bx	lr

08008eba <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008eba:	b580      	push	{r7, lr}
 8008ebc:	b082      	sub	sp, #8
 8008ebe:	af00      	add	r7, sp, #0
 8008ec0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ec8:	b2db      	uxtb	r3, r3
 8008eca:	2b03      	cmp	r3, #3
 8008ecc:	d110      	bne.n	8008ef0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d00b      	beq.n	8008ef0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ede:	69db      	ldr	r3, [r3, #28]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d005      	beq.n	8008ef0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008eea:	69db      	ldr	r3, [r3, #28]
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008ef0:	2300      	movs	r3, #0
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3708      	adds	r7, #8
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}

08008efa <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008efa:	b480      	push	{r7}
 8008efc:	b083      	sub	sp, #12
 8008efe:	af00      	add	r7, sp, #0
 8008f00:	6078      	str	r0, [r7, #4]
 8008f02:	460b      	mov	r3, r1
 8008f04:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008f06:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	370c      	adds	r7, #12
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f12:	4770      	bx	lr

08008f14 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008f14:	b480      	push	{r7}
 8008f16:	b083      	sub	sp, #12
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
 8008f1c:	460b      	mov	r3, r1
 8008f1e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008f20:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	370c      	adds	r7, #12
 8008f26:	46bd      	mov	sp, r7
 8008f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2c:	4770      	bx	lr

08008f2e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008f2e:	b580      	push	{r7, lr}
 8008f30:	b086      	sub	sp, #24
 8008f32:	af00      	add	r7, sp, #0
 8008f34:	6078      	str	r0, [r7, #4]
 8008f36:	460b      	mov	r3, r1
 8008f38:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008f42:	2300      	movs	r3, #0
 8008f44:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	885b      	ldrh	r3, [r3, #2]
 8008f4a:	b29b      	uxth	r3, r3
 8008f4c:	68fa      	ldr	r2, [r7, #12]
 8008f4e:	7812      	ldrb	r2, [r2, #0]
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d91f      	bls.n	8008f94 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	781b      	ldrb	r3, [r3, #0]
 8008f58:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008f5a:	e013      	b.n	8008f84 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008f5c:	f107 030a 	add.w	r3, r7, #10
 8008f60:	4619      	mov	r1, r3
 8008f62:	6978      	ldr	r0, [r7, #20]
 8008f64:	f000 f81b 	bl	8008f9e <USBD_GetNextDesc>
 8008f68:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008f6a:	697b      	ldr	r3, [r7, #20]
 8008f6c:	785b      	ldrb	r3, [r3, #1]
 8008f6e:	2b05      	cmp	r3, #5
 8008f70:	d108      	bne.n	8008f84 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008f72:	697b      	ldr	r3, [r7, #20]
 8008f74:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008f76:	693b      	ldr	r3, [r7, #16]
 8008f78:	789b      	ldrb	r3, [r3, #2]
 8008f7a:	78fa      	ldrb	r2, [r7, #3]
 8008f7c:	429a      	cmp	r2, r3
 8008f7e:	d008      	beq.n	8008f92 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008f80:	2300      	movs	r3, #0
 8008f82:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	885b      	ldrh	r3, [r3, #2]
 8008f88:	b29a      	uxth	r2, r3
 8008f8a:	897b      	ldrh	r3, [r7, #10]
 8008f8c:	429a      	cmp	r2, r3
 8008f8e:	d8e5      	bhi.n	8008f5c <USBD_GetEpDesc+0x2e>
 8008f90:	e000      	b.n	8008f94 <USBD_GetEpDesc+0x66>
          break;
 8008f92:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008f94:	693b      	ldr	r3, [r7, #16]
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	3718      	adds	r7, #24
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}

08008f9e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008f9e:	b480      	push	{r7}
 8008fa0:	b085      	sub	sp, #20
 8008fa2:	af00      	add	r7, sp, #0
 8008fa4:	6078      	str	r0, [r7, #4]
 8008fa6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	881b      	ldrh	r3, [r3, #0]
 8008fb0:	68fa      	ldr	r2, [r7, #12]
 8008fb2:	7812      	ldrb	r2, [r2, #0]
 8008fb4:	4413      	add	r3, r2
 8008fb6:	b29a      	uxth	r2, r3
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	781b      	ldrb	r3, [r3, #0]
 8008fc0:	461a      	mov	r2, r3
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	4413      	add	r3, r2
 8008fc6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008fc8:	68fb      	ldr	r3, [r7, #12]
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3714      	adds	r7, #20
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd4:	4770      	bx	lr

08008fd6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008fd6:	b480      	push	{r7}
 8008fd8:	b087      	sub	sp, #28
 8008fda:	af00      	add	r7, sp, #0
 8008fdc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008fe2:	697b      	ldr	r3, [r7, #20]
 8008fe4:	781b      	ldrb	r3, [r3, #0]
 8008fe6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	3301      	adds	r3, #1
 8008fec:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	781b      	ldrb	r3, [r3, #0]
 8008ff2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008ff4:	8a3b      	ldrh	r3, [r7, #16]
 8008ff6:	021b      	lsls	r3, r3, #8
 8008ff8:	b21a      	sxth	r2, r3
 8008ffa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008ffe:	4313      	orrs	r3, r2
 8009000:	b21b      	sxth	r3, r3
 8009002:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009004:	89fb      	ldrh	r3, [r7, #14]
}
 8009006:	4618      	mov	r0, r3
 8009008:	371c      	adds	r7, #28
 800900a:	46bd      	mov	sp, r7
 800900c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009010:	4770      	bx	lr
	...

08009014 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b084      	sub	sp, #16
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
 800901c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800901e:	2300      	movs	r3, #0
 8009020:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	781b      	ldrb	r3, [r3, #0]
 8009026:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800902a:	2b40      	cmp	r3, #64	@ 0x40
 800902c:	d005      	beq.n	800903a <USBD_StdDevReq+0x26>
 800902e:	2b40      	cmp	r3, #64	@ 0x40
 8009030:	d857      	bhi.n	80090e2 <USBD_StdDevReq+0xce>
 8009032:	2b00      	cmp	r3, #0
 8009034:	d00f      	beq.n	8009056 <USBD_StdDevReq+0x42>
 8009036:	2b20      	cmp	r3, #32
 8009038:	d153      	bne.n	80090e2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	32ae      	adds	r2, #174	@ 0xae
 8009044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009048:	689b      	ldr	r3, [r3, #8]
 800904a:	6839      	ldr	r1, [r7, #0]
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	4798      	blx	r3
 8009050:	4603      	mov	r3, r0
 8009052:	73fb      	strb	r3, [r7, #15]
      break;
 8009054:	e04a      	b.n	80090ec <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	785b      	ldrb	r3, [r3, #1]
 800905a:	2b09      	cmp	r3, #9
 800905c:	d83b      	bhi.n	80090d6 <USBD_StdDevReq+0xc2>
 800905e:	a201      	add	r2, pc, #4	@ (adr r2, 8009064 <USBD_StdDevReq+0x50>)
 8009060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009064:	080090b9 	.word	0x080090b9
 8009068:	080090cd 	.word	0x080090cd
 800906c:	080090d7 	.word	0x080090d7
 8009070:	080090c3 	.word	0x080090c3
 8009074:	080090d7 	.word	0x080090d7
 8009078:	08009097 	.word	0x08009097
 800907c:	0800908d 	.word	0x0800908d
 8009080:	080090d7 	.word	0x080090d7
 8009084:	080090af 	.word	0x080090af
 8009088:	080090a1 	.word	0x080090a1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800908c:	6839      	ldr	r1, [r7, #0]
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f000 fa3c 	bl	800950c <USBD_GetDescriptor>
          break;
 8009094:	e024      	b.n	80090e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009096:	6839      	ldr	r1, [r7, #0]
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f000 fba1 	bl	80097e0 <USBD_SetAddress>
          break;
 800909e:	e01f      	b.n	80090e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80090a0:	6839      	ldr	r1, [r7, #0]
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f000 fbe0 	bl	8009868 <USBD_SetConfig>
 80090a8:	4603      	mov	r3, r0
 80090aa:	73fb      	strb	r3, [r7, #15]
          break;
 80090ac:	e018      	b.n	80090e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80090ae:	6839      	ldr	r1, [r7, #0]
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f000 fc83 	bl	80099bc <USBD_GetConfig>
          break;
 80090b6:	e013      	b.n	80090e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80090b8:	6839      	ldr	r1, [r7, #0]
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f000 fcb4 	bl	8009a28 <USBD_GetStatus>
          break;
 80090c0:	e00e      	b.n	80090e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80090c2:	6839      	ldr	r1, [r7, #0]
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f000 fce3 	bl	8009a90 <USBD_SetFeature>
          break;
 80090ca:	e009      	b.n	80090e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80090cc:	6839      	ldr	r1, [r7, #0]
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f000 fd07 	bl	8009ae2 <USBD_ClrFeature>
          break;
 80090d4:	e004      	b.n	80090e0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80090d6:	6839      	ldr	r1, [r7, #0]
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f000 fd5e 	bl	8009b9a <USBD_CtlError>
          break;
 80090de:	bf00      	nop
      }
      break;
 80090e0:	e004      	b.n	80090ec <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80090e2:	6839      	ldr	r1, [r7, #0]
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f000 fd58 	bl	8009b9a <USBD_CtlError>
      break;
 80090ea:	bf00      	nop
  }

  return ret;
 80090ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3710      	adds	r7, #16
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}
 80090f6:	bf00      	nop

080090f8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b084      	sub	sp, #16
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
 8009100:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009102:	2300      	movs	r3, #0
 8009104:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	781b      	ldrb	r3, [r3, #0]
 800910a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800910e:	2b40      	cmp	r3, #64	@ 0x40
 8009110:	d005      	beq.n	800911e <USBD_StdItfReq+0x26>
 8009112:	2b40      	cmp	r3, #64	@ 0x40
 8009114:	d852      	bhi.n	80091bc <USBD_StdItfReq+0xc4>
 8009116:	2b00      	cmp	r3, #0
 8009118:	d001      	beq.n	800911e <USBD_StdItfReq+0x26>
 800911a:	2b20      	cmp	r3, #32
 800911c:	d14e      	bne.n	80091bc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009124:	b2db      	uxtb	r3, r3
 8009126:	3b01      	subs	r3, #1
 8009128:	2b02      	cmp	r3, #2
 800912a:	d840      	bhi.n	80091ae <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	889b      	ldrh	r3, [r3, #4]
 8009130:	b2db      	uxtb	r3, r3
 8009132:	2b01      	cmp	r3, #1
 8009134:	d836      	bhi.n	80091a4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	889b      	ldrh	r3, [r3, #4]
 800913a:	b2db      	uxtb	r3, r3
 800913c:	4619      	mov	r1, r3
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f7ff fedb 	bl	8008efa <USBD_CoreFindIF>
 8009144:	4603      	mov	r3, r0
 8009146:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009148:	7bbb      	ldrb	r3, [r7, #14]
 800914a:	2bff      	cmp	r3, #255	@ 0xff
 800914c:	d01d      	beq.n	800918a <USBD_StdItfReq+0x92>
 800914e:	7bbb      	ldrb	r3, [r7, #14]
 8009150:	2b01      	cmp	r3, #1
 8009152:	d81a      	bhi.n	800918a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009154:	7bba      	ldrb	r2, [r7, #14]
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	32ae      	adds	r2, #174	@ 0xae
 800915a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800915e:	689b      	ldr	r3, [r3, #8]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d00f      	beq.n	8009184 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009164:	7bba      	ldrb	r2, [r7, #14]
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800916c:	7bba      	ldrb	r2, [r7, #14]
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	32ae      	adds	r2, #174	@ 0xae
 8009172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009176:	689b      	ldr	r3, [r3, #8]
 8009178:	6839      	ldr	r1, [r7, #0]
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	4798      	blx	r3
 800917e:	4603      	mov	r3, r0
 8009180:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009182:	e004      	b.n	800918e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009184:	2303      	movs	r3, #3
 8009186:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009188:	e001      	b.n	800918e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800918a:	2303      	movs	r3, #3
 800918c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	88db      	ldrh	r3, [r3, #6]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d110      	bne.n	80091b8 <USBD_StdItfReq+0xc0>
 8009196:	7bfb      	ldrb	r3, [r7, #15]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d10d      	bne.n	80091b8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f000 fed6 	bl	8009f4e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80091a2:	e009      	b.n	80091b8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80091a4:	6839      	ldr	r1, [r7, #0]
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f000 fcf7 	bl	8009b9a <USBD_CtlError>
          break;
 80091ac:	e004      	b.n	80091b8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80091ae:	6839      	ldr	r1, [r7, #0]
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f000 fcf2 	bl	8009b9a <USBD_CtlError>
          break;
 80091b6:	e000      	b.n	80091ba <USBD_StdItfReq+0xc2>
          break;
 80091b8:	bf00      	nop
      }
      break;
 80091ba:	e004      	b.n	80091c6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80091bc:	6839      	ldr	r1, [r7, #0]
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f000 fceb 	bl	8009b9a <USBD_CtlError>
      break;
 80091c4:	bf00      	nop
  }

  return ret;
 80091c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	3710      	adds	r7, #16
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}

080091d0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b084      	sub	sp, #16
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
 80091d8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80091da:	2300      	movs	r3, #0
 80091dc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	889b      	ldrh	r3, [r3, #4]
 80091e2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	781b      	ldrb	r3, [r3, #0]
 80091e8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80091ec:	2b40      	cmp	r3, #64	@ 0x40
 80091ee:	d007      	beq.n	8009200 <USBD_StdEPReq+0x30>
 80091f0:	2b40      	cmp	r3, #64	@ 0x40
 80091f2:	f200 817f 	bhi.w	80094f4 <USBD_StdEPReq+0x324>
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d02a      	beq.n	8009250 <USBD_StdEPReq+0x80>
 80091fa:	2b20      	cmp	r3, #32
 80091fc:	f040 817a 	bne.w	80094f4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009200:	7bbb      	ldrb	r3, [r7, #14]
 8009202:	4619      	mov	r1, r3
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f7ff fe85 	bl	8008f14 <USBD_CoreFindEP>
 800920a:	4603      	mov	r3, r0
 800920c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800920e:	7b7b      	ldrb	r3, [r7, #13]
 8009210:	2bff      	cmp	r3, #255	@ 0xff
 8009212:	f000 8174 	beq.w	80094fe <USBD_StdEPReq+0x32e>
 8009216:	7b7b      	ldrb	r3, [r7, #13]
 8009218:	2b01      	cmp	r3, #1
 800921a:	f200 8170 	bhi.w	80094fe <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800921e:	7b7a      	ldrb	r2, [r7, #13]
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009226:	7b7a      	ldrb	r2, [r7, #13]
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	32ae      	adds	r2, #174	@ 0xae
 800922c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009230:	689b      	ldr	r3, [r3, #8]
 8009232:	2b00      	cmp	r3, #0
 8009234:	f000 8163 	beq.w	80094fe <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009238:	7b7a      	ldrb	r2, [r7, #13]
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	32ae      	adds	r2, #174	@ 0xae
 800923e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009242:	689b      	ldr	r3, [r3, #8]
 8009244:	6839      	ldr	r1, [r7, #0]
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	4798      	blx	r3
 800924a:	4603      	mov	r3, r0
 800924c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800924e:	e156      	b.n	80094fe <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	785b      	ldrb	r3, [r3, #1]
 8009254:	2b03      	cmp	r3, #3
 8009256:	d008      	beq.n	800926a <USBD_StdEPReq+0x9a>
 8009258:	2b03      	cmp	r3, #3
 800925a:	f300 8145 	bgt.w	80094e8 <USBD_StdEPReq+0x318>
 800925e:	2b00      	cmp	r3, #0
 8009260:	f000 809b 	beq.w	800939a <USBD_StdEPReq+0x1ca>
 8009264:	2b01      	cmp	r3, #1
 8009266:	d03c      	beq.n	80092e2 <USBD_StdEPReq+0x112>
 8009268:	e13e      	b.n	80094e8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009270:	b2db      	uxtb	r3, r3
 8009272:	2b02      	cmp	r3, #2
 8009274:	d002      	beq.n	800927c <USBD_StdEPReq+0xac>
 8009276:	2b03      	cmp	r3, #3
 8009278:	d016      	beq.n	80092a8 <USBD_StdEPReq+0xd8>
 800927a:	e02c      	b.n	80092d6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800927c:	7bbb      	ldrb	r3, [r7, #14]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d00d      	beq.n	800929e <USBD_StdEPReq+0xce>
 8009282:	7bbb      	ldrb	r3, [r7, #14]
 8009284:	2b80      	cmp	r3, #128	@ 0x80
 8009286:	d00a      	beq.n	800929e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009288:	7bbb      	ldrb	r3, [r7, #14]
 800928a:	4619      	mov	r1, r3
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f7ff fa37 	bl	8008700 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009292:	2180      	movs	r1, #128	@ 0x80
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f7ff fa33 	bl	8008700 <USBD_LL_StallEP>
 800929a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800929c:	e020      	b.n	80092e0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800929e:	6839      	ldr	r1, [r7, #0]
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f000 fc7a 	bl	8009b9a <USBD_CtlError>
              break;
 80092a6:	e01b      	b.n	80092e0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	885b      	ldrh	r3, [r3, #2]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d10e      	bne.n	80092ce <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80092b0:	7bbb      	ldrb	r3, [r7, #14]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d00b      	beq.n	80092ce <USBD_StdEPReq+0xfe>
 80092b6:	7bbb      	ldrb	r3, [r7, #14]
 80092b8:	2b80      	cmp	r3, #128	@ 0x80
 80092ba:	d008      	beq.n	80092ce <USBD_StdEPReq+0xfe>
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	88db      	ldrh	r3, [r3, #6]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d104      	bne.n	80092ce <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80092c4:	7bbb      	ldrb	r3, [r7, #14]
 80092c6:	4619      	mov	r1, r3
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f7ff fa19 	bl	8008700 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f000 fe3d 	bl	8009f4e <USBD_CtlSendStatus>

              break;
 80092d4:	e004      	b.n	80092e0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80092d6:	6839      	ldr	r1, [r7, #0]
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f000 fc5e 	bl	8009b9a <USBD_CtlError>
              break;
 80092de:	bf00      	nop
          }
          break;
 80092e0:	e107      	b.n	80094f2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092e8:	b2db      	uxtb	r3, r3
 80092ea:	2b02      	cmp	r3, #2
 80092ec:	d002      	beq.n	80092f4 <USBD_StdEPReq+0x124>
 80092ee:	2b03      	cmp	r3, #3
 80092f0:	d016      	beq.n	8009320 <USBD_StdEPReq+0x150>
 80092f2:	e04b      	b.n	800938c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80092f4:	7bbb      	ldrb	r3, [r7, #14]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d00d      	beq.n	8009316 <USBD_StdEPReq+0x146>
 80092fa:	7bbb      	ldrb	r3, [r7, #14]
 80092fc:	2b80      	cmp	r3, #128	@ 0x80
 80092fe:	d00a      	beq.n	8009316 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009300:	7bbb      	ldrb	r3, [r7, #14]
 8009302:	4619      	mov	r1, r3
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f7ff f9fb 	bl	8008700 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800930a:	2180      	movs	r1, #128	@ 0x80
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f7ff f9f7 	bl	8008700 <USBD_LL_StallEP>
 8009312:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009314:	e040      	b.n	8009398 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009316:	6839      	ldr	r1, [r7, #0]
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f000 fc3e 	bl	8009b9a <USBD_CtlError>
              break;
 800931e:	e03b      	b.n	8009398 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	885b      	ldrh	r3, [r3, #2]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d136      	bne.n	8009396 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009328:	7bbb      	ldrb	r3, [r7, #14]
 800932a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800932e:	2b00      	cmp	r3, #0
 8009330:	d004      	beq.n	800933c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009332:	7bbb      	ldrb	r3, [r7, #14]
 8009334:	4619      	mov	r1, r3
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f7ff f9fb 	bl	8008732 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f000 fe06 	bl	8009f4e <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009342:	7bbb      	ldrb	r3, [r7, #14]
 8009344:	4619      	mov	r1, r3
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f7ff fde4 	bl	8008f14 <USBD_CoreFindEP>
 800934c:	4603      	mov	r3, r0
 800934e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009350:	7b7b      	ldrb	r3, [r7, #13]
 8009352:	2bff      	cmp	r3, #255	@ 0xff
 8009354:	d01f      	beq.n	8009396 <USBD_StdEPReq+0x1c6>
 8009356:	7b7b      	ldrb	r3, [r7, #13]
 8009358:	2b01      	cmp	r3, #1
 800935a:	d81c      	bhi.n	8009396 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800935c:	7b7a      	ldrb	r2, [r7, #13]
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009364:	7b7a      	ldrb	r2, [r7, #13]
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	32ae      	adds	r2, #174	@ 0xae
 800936a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800936e:	689b      	ldr	r3, [r3, #8]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d010      	beq.n	8009396 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009374:	7b7a      	ldrb	r2, [r7, #13]
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	32ae      	adds	r2, #174	@ 0xae
 800937a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800937e:	689b      	ldr	r3, [r3, #8]
 8009380:	6839      	ldr	r1, [r7, #0]
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	4798      	blx	r3
 8009386:	4603      	mov	r3, r0
 8009388:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800938a:	e004      	b.n	8009396 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800938c:	6839      	ldr	r1, [r7, #0]
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f000 fc03 	bl	8009b9a <USBD_CtlError>
              break;
 8009394:	e000      	b.n	8009398 <USBD_StdEPReq+0x1c8>
              break;
 8009396:	bf00      	nop
          }
          break;
 8009398:	e0ab      	b.n	80094f2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093a0:	b2db      	uxtb	r3, r3
 80093a2:	2b02      	cmp	r3, #2
 80093a4:	d002      	beq.n	80093ac <USBD_StdEPReq+0x1dc>
 80093a6:	2b03      	cmp	r3, #3
 80093a8:	d032      	beq.n	8009410 <USBD_StdEPReq+0x240>
 80093aa:	e097      	b.n	80094dc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80093ac:	7bbb      	ldrb	r3, [r7, #14]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d007      	beq.n	80093c2 <USBD_StdEPReq+0x1f2>
 80093b2:	7bbb      	ldrb	r3, [r7, #14]
 80093b4:	2b80      	cmp	r3, #128	@ 0x80
 80093b6:	d004      	beq.n	80093c2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80093b8:	6839      	ldr	r1, [r7, #0]
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f000 fbed 	bl	8009b9a <USBD_CtlError>
                break;
 80093c0:	e091      	b.n	80094e6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80093c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	da0b      	bge.n	80093e2 <USBD_StdEPReq+0x212>
 80093ca:	7bbb      	ldrb	r3, [r7, #14]
 80093cc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80093d0:	4613      	mov	r3, r2
 80093d2:	009b      	lsls	r3, r3, #2
 80093d4:	4413      	add	r3, r2
 80093d6:	009b      	lsls	r3, r3, #2
 80093d8:	3310      	adds	r3, #16
 80093da:	687a      	ldr	r2, [r7, #4]
 80093dc:	4413      	add	r3, r2
 80093de:	3304      	adds	r3, #4
 80093e0:	e00b      	b.n	80093fa <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80093e2:	7bbb      	ldrb	r3, [r7, #14]
 80093e4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80093e8:	4613      	mov	r3, r2
 80093ea:	009b      	lsls	r3, r3, #2
 80093ec:	4413      	add	r3, r2
 80093ee:	009b      	lsls	r3, r3, #2
 80093f0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80093f4:	687a      	ldr	r2, [r7, #4]
 80093f6:	4413      	add	r3, r2
 80093f8:	3304      	adds	r3, #4
 80093fa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	2200      	movs	r2, #0
 8009400:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	2202      	movs	r2, #2
 8009406:	4619      	mov	r1, r3
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f000 fd46 	bl	8009e9a <USBD_CtlSendData>
              break;
 800940e:	e06a      	b.n	80094e6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009410:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009414:	2b00      	cmp	r3, #0
 8009416:	da11      	bge.n	800943c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009418:	7bbb      	ldrb	r3, [r7, #14]
 800941a:	f003 020f 	and.w	r2, r3, #15
 800941e:	6879      	ldr	r1, [r7, #4]
 8009420:	4613      	mov	r3, r2
 8009422:	009b      	lsls	r3, r3, #2
 8009424:	4413      	add	r3, r2
 8009426:	009b      	lsls	r3, r3, #2
 8009428:	440b      	add	r3, r1
 800942a:	3324      	adds	r3, #36	@ 0x24
 800942c:	881b      	ldrh	r3, [r3, #0]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d117      	bne.n	8009462 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009432:	6839      	ldr	r1, [r7, #0]
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f000 fbb0 	bl	8009b9a <USBD_CtlError>
                  break;
 800943a:	e054      	b.n	80094e6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800943c:	7bbb      	ldrb	r3, [r7, #14]
 800943e:	f003 020f 	and.w	r2, r3, #15
 8009442:	6879      	ldr	r1, [r7, #4]
 8009444:	4613      	mov	r3, r2
 8009446:	009b      	lsls	r3, r3, #2
 8009448:	4413      	add	r3, r2
 800944a:	009b      	lsls	r3, r3, #2
 800944c:	440b      	add	r3, r1
 800944e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009452:	881b      	ldrh	r3, [r3, #0]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d104      	bne.n	8009462 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009458:	6839      	ldr	r1, [r7, #0]
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f000 fb9d 	bl	8009b9a <USBD_CtlError>
                  break;
 8009460:	e041      	b.n	80094e6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009462:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009466:	2b00      	cmp	r3, #0
 8009468:	da0b      	bge.n	8009482 <USBD_StdEPReq+0x2b2>
 800946a:	7bbb      	ldrb	r3, [r7, #14]
 800946c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009470:	4613      	mov	r3, r2
 8009472:	009b      	lsls	r3, r3, #2
 8009474:	4413      	add	r3, r2
 8009476:	009b      	lsls	r3, r3, #2
 8009478:	3310      	adds	r3, #16
 800947a:	687a      	ldr	r2, [r7, #4]
 800947c:	4413      	add	r3, r2
 800947e:	3304      	adds	r3, #4
 8009480:	e00b      	b.n	800949a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009482:	7bbb      	ldrb	r3, [r7, #14]
 8009484:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009488:	4613      	mov	r3, r2
 800948a:	009b      	lsls	r3, r3, #2
 800948c:	4413      	add	r3, r2
 800948e:	009b      	lsls	r3, r3, #2
 8009490:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009494:	687a      	ldr	r2, [r7, #4]
 8009496:	4413      	add	r3, r2
 8009498:	3304      	adds	r3, #4
 800949a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800949c:	7bbb      	ldrb	r3, [r7, #14]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d002      	beq.n	80094a8 <USBD_StdEPReq+0x2d8>
 80094a2:	7bbb      	ldrb	r3, [r7, #14]
 80094a4:	2b80      	cmp	r3, #128	@ 0x80
 80094a6:	d103      	bne.n	80094b0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	2200      	movs	r2, #0
 80094ac:	601a      	str	r2, [r3, #0]
 80094ae:	e00e      	b.n	80094ce <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80094b0:	7bbb      	ldrb	r3, [r7, #14]
 80094b2:	4619      	mov	r1, r3
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f7ff f955 	bl	8008764 <USBD_LL_IsStallEP>
 80094ba:	4603      	mov	r3, r0
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d003      	beq.n	80094c8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	2201      	movs	r2, #1
 80094c4:	601a      	str	r2, [r3, #0]
 80094c6:	e002      	b.n	80094ce <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	2200      	movs	r2, #0
 80094cc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80094ce:	68bb      	ldr	r3, [r7, #8]
 80094d0:	2202      	movs	r2, #2
 80094d2:	4619      	mov	r1, r3
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f000 fce0 	bl	8009e9a <USBD_CtlSendData>
              break;
 80094da:	e004      	b.n	80094e6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80094dc:	6839      	ldr	r1, [r7, #0]
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f000 fb5b 	bl	8009b9a <USBD_CtlError>
              break;
 80094e4:	bf00      	nop
          }
          break;
 80094e6:	e004      	b.n	80094f2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80094e8:	6839      	ldr	r1, [r7, #0]
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f000 fb55 	bl	8009b9a <USBD_CtlError>
          break;
 80094f0:	bf00      	nop
      }
      break;
 80094f2:	e005      	b.n	8009500 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80094f4:	6839      	ldr	r1, [r7, #0]
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f000 fb4f 	bl	8009b9a <USBD_CtlError>
      break;
 80094fc:	e000      	b.n	8009500 <USBD_StdEPReq+0x330>
      break;
 80094fe:	bf00      	nop
  }

  return ret;
 8009500:	7bfb      	ldrb	r3, [r7, #15]
}
 8009502:	4618      	mov	r0, r3
 8009504:	3710      	adds	r7, #16
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}
	...

0800950c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b084      	sub	sp, #16
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
 8009514:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009516:	2300      	movs	r3, #0
 8009518:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800951a:	2300      	movs	r3, #0
 800951c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800951e:	2300      	movs	r3, #0
 8009520:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	885b      	ldrh	r3, [r3, #2]
 8009526:	0a1b      	lsrs	r3, r3, #8
 8009528:	b29b      	uxth	r3, r3
 800952a:	3b01      	subs	r3, #1
 800952c:	2b06      	cmp	r3, #6
 800952e:	f200 8128 	bhi.w	8009782 <USBD_GetDescriptor+0x276>
 8009532:	a201      	add	r2, pc, #4	@ (adr r2, 8009538 <USBD_GetDescriptor+0x2c>)
 8009534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009538:	08009555 	.word	0x08009555
 800953c:	0800956d 	.word	0x0800956d
 8009540:	080095ad 	.word	0x080095ad
 8009544:	08009783 	.word	0x08009783
 8009548:	08009783 	.word	0x08009783
 800954c:	08009723 	.word	0x08009723
 8009550:	0800974f 	.word	0x0800974f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	687a      	ldr	r2, [r7, #4]
 800955e:	7c12      	ldrb	r2, [r2, #16]
 8009560:	f107 0108 	add.w	r1, r7, #8
 8009564:	4610      	mov	r0, r2
 8009566:	4798      	blx	r3
 8009568:	60f8      	str	r0, [r7, #12]
      break;
 800956a:	e112      	b.n	8009792 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	7c1b      	ldrb	r3, [r3, #16]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d10d      	bne.n	8009590 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800957a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800957c:	f107 0208 	add.w	r2, r7, #8
 8009580:	4610      	mov	r0, r2
 8009582:	4798      	blx	r3
 8009584:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	3301      	adds	r3, #1
 800958a:	2202      	movs	r2, #2
 800958c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800958e:	e100      	b.n	8009792 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009598:	f107 0208 	add.w	r2, r7, #8
 800959c:	4610      	mov	r0, r2
 800959e:	4798      	blx	r3
 80095a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	3301      	adds	r3, #1
 80095a6:	2202      	movs	r2, #2
 80095a8:	701a      	strb	r2, [r3, #0]
      break;
 80095aa:	e0f2      	b.n	8009792 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	885b      	ldrh	r3, [r3, #2]
 80095b0:	b2db      	uxtb	r3, r3
 80095b2:	2b05      	cmp	r3, #5
 80095b4:	f200 80ac 	bhi.w	8009710 <USBD_GetDescriptor+0x204>
 80095b8:	a201      	add	r2, pc, #4	@ (adr r2, 80095c0 <USBD_GetDescriptor+0xb4>)
 80095ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095be:	bf00      	nop
 80095c0:	080095d9 	.word	0x080095d9
 80095c4:	0800960d 	.word	0x0800960d
 80095c8:	08009641 	.word	0x08009641
 80095cc:	08009675 	.word	0x08009675
 80095d0:	080096a9 	.word	0x080096a9
 80095d4:	080096dd 	.word	0x080096dd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80095de:	685b      	ldr	r3, [r3, #4]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d00b      	beq.n	80095fc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80095ea:	685b      	ldr	r3, [r3, #4]
 80095ec:	687a      	ldr	r2, [r7, #4]
 80095ee:	7c12      	ldrb	r2, [r2, #16]
 80095f0:	f107 0108 	add.w	r1, r7, #8
 80095f4:	4610      	mov	r0, r2
 80095f6:	4798      	blx	r3
 80095f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80095fa:	e091      	b.n	8009720 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80095fc:	6839      	ldr	r1, [r7, #0]
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f000 facb 	bl	8009b9a <USBD_CtlError>
            err++;
 8009604:	7afb      	ldrb	r3, [r7, #11]
 8009606:	3301      	adds	r3, #1
 8009608:	72fb      	strb	r3, [r7, #11]
          break;
 800960a:	e089      	b.n	8009720 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009612:	689b      	ldr	r3, [r3, #8]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d00b      	beq.n	8009630 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800961e:	689b      	ldr	r3, [r3, #8]
 8009620:	687a      	ldr	r2, [r7, #4]
 8009622:	7c12      	ldrb	r2, [r2, #16]
 8009624:	f107 0108 	add.w	r1, r7, #8
 8009628:	4610      	mov	r0, r2
 800962a:	4798      	blx	r3
 800962c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800962e:	e077      	b.n	8009720 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009630:	6839      	ldr	r1, [r7, #0]
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	f000 fab1 	bl	8009b9a <USBD_CtlError>
            err++;
 8009638:	7afb      	ldrb	r3, [r7, #11]
 800963a:	3301      	adds	r3, #1
 800963c:	72fb      	strb	r3, [r7, #11]
          break;
 800963e:	e06f      	b.n	8009720 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009646:	68db      	ldr	r3, [r3, #12]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d00b      	beq.n	8009664 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009652:	68db      	ldr	r3, [r3, #12]
 8009654:	687a      	ldr	r2, [r7, #4]
 8009656:	7c12      	ldrb	r2, [r2, #16]
 8009658:	f107 0108 	add.w	r1, r7, #8
 800965c:	4610      	mov	r0, r2
 800965e:	4798      	blx	r3
 8009660:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009662:	e05d      	b.n	8009720 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009664:	6839      	ldr	r1, [r7, #0]
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f000 fa97 	bl	8009b9a <USBD_CtlError>
            err++;
 800966c:	7afb      	ldrb	r3, [r7, #11]
 800966e:	3301      	adds	r3, #1
 8009670:	72fb      	strb	r3, [r7, #11]
          break;
 8009672:	e055      	b.n	8009720 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800967a:	691b      	ldr	r3, [r3, #16]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d00b      	beq.n	8009698 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009686:	691b      	ldr	r3, [r3, #16]
 8009688:	687a      	ldr	r2, [r7, #4]
 800968a:	7c12      	ldrb	r2, [r2, #16]
 800968c:	f107 0108 	add.w	r1, r7, #8
 8009690:	4610      	mov	r0, r2
 8009692:	4798      	blx	r3
 8009694:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009696:	e043      	b.n	8009720 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009698:	6839      	ldr	r1, [r7, #0]
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f000 fa7d 	bl	8009b9a <USBD_CtlError>
            err++;
 80096a0:	7afb      	ldrb	r3, [r7, #11]
 80096a2:	3301      	adds	r3, #1
 80096a4:	72fb      	strb	r3, [r7, #11]
          break;
 80096a6:	e03b      	b.n	8009720 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80096ae:	695b      	ldr	r3, [r3, #20]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d00b      	beq.n	80096cc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80096ba:	695b      	ldr	r3, [r3, #20]
 80096bc:	687a      	ldr	r2, [r7, #4]
 80096be:	7c12      	ldrb	r2, [r2, #16]
 80096c0:	f107 0108 	add.w	r1, r7, #8
 80096c4:	4610      	mov	r0, r2
 80096c6:	4798      	blx	r3
 80096c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096ca:	e029      	b.n	8009720 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80096cc:	6839      	ldr	r1, [r7, #0]
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f000 fa63 	bl	8009b9a <USBD_CtlError>
            err++;
 80096d4:	7afb      	ldrb	r3, [r7, #11]
 80096d6:	3301      	adds	r3, #1
 80096d8:	72fb      	strb	r3, [r7, #11]
          break;
 80096da:	e021      	b.n	8009720 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80096e2:	699b      	ldr	r3, [r3, #24]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d00b      	beq.n	8009700 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80096ee:	699b      	ldr	r3, [r3, #24]
 80096f0:	687a      	ldr	r2, [r7, #4]
 80096f2:	7c12      	ldrb	r2, [r2, #16]
 80096f4:	f107 0108 	add.w	r1, r7, #8
 80096f8:	4610      	mov	r0, r2
 80096fa:	4798      	blx	r3
 80096fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096fe:	e00f      	b.n	8009720 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009700:	6839      	ldr	r1, [r7, #0]
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f000 fa49 	bl	8009b9a <USBD_CtlError>
            err++;
 8009708:	7afb      	ldrb	r3, [r7, #11]
 800970a:	3301      	adds	r3, #1
 800970c:	72fb      	strb	r3, [r7, #11]
          break;
 800970e:	e007      	b.n	8009720 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009710:	6839      	ldr	r1, [r7, #0]
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f000 fa41 	bl	8009b9a <USBD_CtlError>
          err++;
 8009718:	7afb      	ldrb	r3, [r7, #11]
 800971a:	3301      	adds	r3, #1
 800971c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800971e:	bf00      	nop
      }
      break;
 8009720:	e037      	b.n	8009792 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	7c1b      	ldrb	r3, [r3, #16]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d109      	bne.n	800973e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009730:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009732:	f107 0208 	add.w	r2, r7, #8
 8009736:	4610      	mov	r0, r2
 8009738:	4798      	blx	r3
 800973a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800973c:	e029      	b.n	8009792 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800973e:	6839      	ldr	r1, [r7, #0]
 8009740:	6878      	ldr	r0, [r7, #4]
 8009742:	f000 fa2a 	bl	8009b9a <USBD_CtlError>
        err++;
 8009746:	7afb      	ldrb	r3, [r7, #11]
 8009748:	3301      	adds	r3, #1
 800974a:	72fb      	strb	r3, [r7, #11]
      break;
 800974c:	e021      	b.n	8009792 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	7c1b      	ldrb	r3, [r3, #16]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d10d      	bne.n	8009772 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800975c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800975e:	f107 0208 	add.w	r2, r7, #8
 8009762:	4610      	mov	r0, r2
 8009764:	4798      	blx	r3
 8009766:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	3301      	adds	r3, #1
 800976c:	2207      	movs	r2, #7
 800976e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009770:	e00f      	b.n	8009792 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009772:	6839      	ldr	r1, [r7, #0]
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f000 fa10 	bl	8009b9a <USBD_CtlError>
        err++;
 800977a:	7afb      	ldrb	r3, [r7, #11]
 800977c:	3301      	adds	r3, #1
 800977e:	72fb      	strb	r3, [r7, #11]
      break;
 8009780:	e007      	b.n	8009792 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009782:	6839      	ldr	r1, [r7, #0]
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f000 fa08 	bl	8009b9a <USBD_CtlError>
      err++;
 800978a:	7afb      	ldrb	r3, [r7, #11]
 800978c:	3301      	adds	r3, #1
 800978e:	72fb      	strb	r3, [r7, #11]
      break;
 8009790:	bf00      	nop
  }

  if (err != 0U)
 8009792:	7afb      	ldrb	r3, [r7, #11]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d11e      	bne.n	80097d6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	88db      	ldrh	r3, [r3, #6]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d016      	beq.n	80097ce <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80097a0:	893b      	ldrh	r3, [r7, #8]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d00e      	beq.n	80097c4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	88da      	ldrh	r2, [r3, #6]
 80097aa:	893b      	ldrh	r3, [r7, #8]
 80097ac:	4293      	cmp	r3, r2
 80097ae:	bf28      	it	cs
 80097b0:	4613      	movcs	r3, r2
 80097b2:	b29b      	uxth	r3, r3
 80097b4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80097b6:	893b      	ldrh	r3, [r7, #8]
 80097b8:	461a      	mov	r2, r3
 80097ba:	68f9      	ldr	r1, [r7, #12]
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f000 fb6c 	bl	8009e9a <USBD_CtlSendData>
 80097c2:	e009      	b.n	80097d8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80097c4:	6839      	ldr	r1, [r7, #0]
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f000 f9e7 	bl	8009b9a <USBD_CtlError>
 80097cc:	e004      	b.n	80097d8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f000 fbbd 	bl	8009f4e <USBD_CtlSendStatus>
 80097d4:	e000      	b.n	80097d8 <USBD_GetDescriptor+0x2cc>
    return;
 80097d6:	bf00      	nop
  }
}
 80097d8:	3710      	adds	r7, #16
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}
 80097de:	bf00      	nop

080097e0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b084      	sub	sp, #16
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
 80097e8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	889b      	ldrh	r3, [r3, #4]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d131      	bne.n	8009856 <USBD_SetAddress+0x76>
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	88db      	ldrh	r3, [r3, #6]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d12d      	bne.n	8009856 <USBD_SetAddress+0x76>
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	885b      	ldrh	r3, [r3, #2]
 80097fe:	2b7f      	cmp	r3, #127	@ 0x7f
 8009800:	d829      	bhi.n	8009856 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	885b      	ldrh	r3, [r3, #2]
 8009806:	b2db      	uxtb	r3, r3
 8009808:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800980c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009814:	b2db      	uxtb	r3, r3
 8009816:	2b03      	cmp	r3, #3
 8009818:	d104      	bne.n	8009824 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800981a:	6839      	ldr	r1, [r7, #0]
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f000 f9bc 	bl	8009b9a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009822:	e01d      	b.n	8009860 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	7bfa      	ldrb	r2, [r7, #15]
 8009828:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800982c:	7bfb      	ldrb	r3, [r7, #15]
 800982e:	4619      	mov	r1, r3
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f7fe ffc3 	bl	80087bc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f000 fb89 	bl	8009f4e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800983c:	7bfb      	ldrb	r3, [r7, #15]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d004      	beq.n	800984c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2202      	movs	r2, #2
 8009846:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800984a:	e009      	b.n	8009860 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2201      	movs	r2, #1
 8009850:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009854:	e004      	b.n	8009860 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009856:	6839      	ldr	r1, [r7, #0]
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f000 f99e 	bl	8009b9a <USBD_CtlError>
  }
}
 800985e:	bf00      	nop
 8009860:	bf00      	nop
 8009862:	3710      	adds	r7, #16
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}

08009868 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b084      	sub	sp, #16
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
 8009870:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009872:	2300      	movs	r3, #0
 8009874:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	885b      	ldrh	r3, [r3, #2]
 800987a:	b2da      	uxtb	r2, r3
 800987c:	4b4e      	ldr	r3, [pc, #312]	@ (80099b8 <USBD_SetConfig+0x150>)
 800987e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009880:	4b4d      	ldr	r3, [pc, #308]	@ (80099b8 <USBD_SetConfig+0x150>)
 8009882:	781b      	ldrb	r3, [r3, #0]
 8009884:	2b01      	cmp	r3, #1
 8009886:	d905      	bls.n	8009894 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009888:	6839      	ldr	r1, [r7, #0]
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f000 f985 	bl	8009b9a <USBD_CtlError>
    return USBD_FAIL;
 8009890:	2303      	movs	r3, #3
 8009892:	e08c      	b.n	80099ae <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800989a:	b2db      	uxtb	r3, r3
 800989c:	2b02      	cmp	r3, #2
 800989e:	d002      	beq.n	80098a6 <USBD_SetConfig+0x3e>
 80098a0:	2b03      	cmp	r3, #3
 80098a2:	d029      	beq.n	80098f8 <USBD_SetConfig+0x90>
 80098a4:	e075      	b.n	8009992 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80098a6:	4b44      	ldr	r3, [pc, #272]	@ (80099b8 <USBD_SetConfig+0x150>)
 80098a8:	781b      	ldrb	r3, [r3, #0]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d020      	beq.n	80098f0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80098ae:	4b42      	ldr	r3, [pc, #264]	@ (80099b8 <USBD_SetConfig+0x150>)
 80098b0:	781b      	ldrb	r3, [r3, #0]
 80098b2:	461a      	mov	r2, r3
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80098b8:	4b3f      	ldr	r3, [pc, #252]	@ (80099b8 <USBD_SetConfig+0x150>)
 80098ba:	781b      	ldrb	r3, [r3, #0]
 80098bc:	4619      	mov	r1, r3
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f7ff f8a9 	bl	8008a16 <USBD_SetClassConfig>
 80098c4:	4603      	mov	r3, r0
 80098c6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80098c8:	7bfb      	ldrb	r3, [r7, #15]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d008      	beq.n	80098e0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80098ce:	6839      	ldr	r1, [r7, #0]
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f000 f962 	bl	8009b9a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2202      	movs	r2, #2
 80098da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80098de:	e065      	b.n	80099ac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f000 fb34 	bl	8009f4e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2203      	movs	r2, #3
 80098ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80098ee:	e05d      	b.n	80099ac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f000 fb2c 	bl	8009f4e <USBD_CtlSendStatus>
      break;
 80098f6:	e059      	b.n	80099ac <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80098f8:	4b2f      	ldr	r3, [pc, #188]	@ (80099b8 <USBD_SetConfig+0x150>)
 80098fa:	781b      	ldrb	r3, [r3, #0]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d112      	bne.n	8009926 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2202      	movs	r2, #2
 8009904:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009908:	4b2b      	ldr	r3, [pc, #172]	@ (80099b8 <USBD_SetConfig+0x150>)
 800990a:	781b      	ldrb	r3, [r3, #0]
 800990c:	461a      	mov	r2, r3
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009912:	4b29      	ldr	r3, [pc, #164]	@ (80099b8 <USBD_SetConfig+0x150>)
 8009914:	781b      	ldrb	r3, [r3, #0]
 8009916:	4619      	mov	r1, r3
 8009918:	6878      	ldr	r0, [r7, #4]
 800991a:	f7ff f898 	bl	8008a4e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f000 fb15 	bl	8009f4e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009924:	e042      	b.n	80099ac <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009926:	4b24      	ldr	r3, [pc, #144]	@ (80099b8 <USBD_SetConfig+0x150>)
 8009928:	781b      	ldrb	r3, [r3, #0]
 800992a:	461a      	mov	r2, r3
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	685b      	ldr	r3, [r3, #4]
 8009930:	429a      	cmp	r2, r3
 8009932:	d02a      	beq.n	800998a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	685b      	ldr	r3, [r3, #4]
 8009938:	b2db      	uxtb	r3, r3
 800993a:	4619      	mov	r1, r3
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f7ff f886 	bl	8008a4e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009942:	4b1d      	ldr	r3, [pc, #116]	@ (80099b8 <USBD_SetConfig+0x150>)
 8009944:	781b      	ldrb	r3, [r3, #0]
 8009946:	461a      	mov	r2, r3
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800994c:	4b1a      	ldr	r3, [pc, #104]	@ (80099b8 <USBD_SetConfig+0x150>)
 800994e:	781b      	ldrb	r3, [r3, #0]
 8009950:	4619      	mov	r1, r3
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f7ff f85f 	bl	8008a16 <USBD_SetClassConfig>
 8009958:	4603      	mov	r3, r0
 800995a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800995c:	7bfb      	ldrb	r3, [r7, #15]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d00f      	beq.n	8009982 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009962:	6839      	ldr	r1, [r7, #0]
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f000 f918 	bl	8009b9a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	685b      	ldr	r3, [r3, #4]
 800996e:	b2db      	uxtb	r3, r3
 8009970:	4619      	mov	r1, r3
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	f7ff f86b 	bl	8008a4e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2202      	movs	r2, #2
 800997c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009980:	e014      	b.n	80099ac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	f000 fae3 	bl	8009f4e <USBD_CtlSendStatus>
      break;
 8009988:	e010      	b.n	80099ac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f000 fadf 	bl	8009f4e <USBD_CtlSendStatus>
      break;
 8009990:	e00c      	b.n	80099ac <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009992:	6839      	ldr	r1, [r7, #0]
 8009994:	6878      	ldr	r0, [r7, #4]
 8009996:	f000 f900 	bl	8009b9a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800999a:	4b07      	ldr	r3, [pc, #28]	@ (80099b8 <USBD_SetConfig+0x150>)
 800999c:	781b      	ldrb	r3, [r3, #0]
 800999e:	4619      	mov	r1, r3
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f7ff f854 	bl	8008a4e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80099a6:	2303      	movs	r3, #3
 80099a8:	73fb      	strb	r3, [r7, #15]
      break;
 80099aa:	bf00      	nop
  }

  return ret;
 80099ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	3710      	adds	r7, #16
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}
 80099b6:	bf00      	nop
 80099b8:	20000868 	.word	0x20000868

080099bc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b082      	sub	sp, #8
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
 80099c4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	88db      	ldrh	r3, [r3, #6]
 80099ca:	2b01      	cmp	r3, #1
 80099cc:	d004      	beq.n	80099d8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80099ce:	6839      	ldr	r1, [r7, #0]
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f000 f8e2 	bl	8009b9a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80099d6:	e023      	b.n	8009a20 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099de:	b2db      	uxtb	r3, r3
 80099e0:	2b02      	cmp	r3, #2
 80099e2:	dc02      	bgt.n	80099ea <USBD_GetConfig+0x2e>
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	dc03      	bgt.n	80099f0 <USBD_GetConfig+0x34>
 80099e8:	e015      	b.n	8009a16 <USBD_GetConfig+0x5a>
 80099ea:	2b03      	cmp	r3, #3
 80099ec:	d00b      	beq.n	8009a06 <USBD_GetConfig+0x4a>
 80099ee:	e012      	b.n	8009a16 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2200      	movs	r2, #0
 80099f4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	3308      	adds	r3, #8
 80099fa:	2201      	movs	r2, #1
 80099fc:	4619      	mov	r1, r3
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f000 fa4b 	bl	8009e9a <USBD_CtlSendData>
        break;
 8009a04:	e00c      	b.n	8009a20 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	3304      	adds	r3, #4
 8009a0a:	2201      	movs	r2, #1
 8009a0c:	4619      	mov	r1, r3
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f000 fa43 	bl	8009e9a <USBD_CtlSendData>
        break;
 8009a14:	e004      	b.n	8009a20 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009a16:	6839      	ldr	r1, [r7, #0]
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f000 f8be 	bl	8009b9a <USBD_CtlError>
        break;
 8009a1e:	bf00      	nop
}
 8009a20:	bf00      	nop
 8009a22:	3708      	adds	r7, #8
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bd80      	pop	{r7, pc}

08009a28 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b082      	sub	sp, #8
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
 8009a30:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a38:	b2db      	uxtb	r3, r3
 8009a3a:	3b01      	subs	r3, #1
 8009a3c:	2b02      	cmp	r3, #2
 8009a3e:	d81e      	bhi.n	8009a7e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	88db      	ldrh	r3, [r3, #6]
 8009a44:	2b02      	cmp	r3, #2
 8009a46:	d004      	beq.n	8009a52 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009a48:	6839      	ldr	r1, [r7, #0]
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f000 f8a5 	bl	8009b9a <USBD_CtlError>
        break;
 8009a50:	e01a      	b.n	8009a88 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2201      	movs	r2, #1
 8009a56:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d005      	beq.n	8009a6e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	68db      	ldr	r3, [r3, #12]
 8009a66:	f043 0202 	orr.w	r2, r3, #2
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	330c      	adds	r3, #12
 8009a72:	2202      	movs	r2, #2
 8009a74:	4619      	mov	r1, r3
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f000 fa0f 	bl	8009e9a <USBD_CtlSendData>
      break;
 8009a7c:	e004      	b.n	8009a88 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009a7e:	6839      	ldr	r1, [r7, #0]
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f000 f88a 	bl	8009b9a <USBD_CtlError>
      break;
 8009a86:	bf00      	nop
  }
}
 8009a88:	bf00      	nop
 8009a8a:	3708      	adds	r7, #8
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd80      	pop	{r7, pc}

08009a90 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b082      	sub	sp, #8
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
 8009a98:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	885b      	ldrh	r3, [r3, #2]
 8009a9e:	2b01      	cmp	r3, #1
 8009aa0:	d107      	bne.n	8009ab2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2201      	movs	r2, #1
 8009aa6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f000 fa4f 	bl	8009f4e <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009ab0:	e013      	b.n	8009ada <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	885b      	ldrh	r3, [r3, #2]
 8009ab6:	2b02      	cmp	r3, #2
 8009ab8:	d10b      	bne.n	8009ad2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	889b      	ldrh	r3, [r3, #4]
 8009abe:	0a1b      	lsrs	r3, r3, #8
 8009ac0:	b29b      	uxth	r3, r3
 8009ac2:	b2da      	uxtb	r2, r3
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f000 fa3f 	bl	8009f4e <USBD_CtlSendStatus>
}
 8009ad0:	e003      	b.n	8009ada <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009ad2:	6839      	ldr	r1, [r7, #0]
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f000 f860 	bl	8009b9a <USBD_CtlError>
}
 8009ada:	bf00      	nop
 8009adc:	3708      	adds	r7, #8
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}

08009ae2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ae2:	b580      	push	{r7, lr}
 8009ae4:	b082      	sub	sp, #8
 8009ae6:	af00      	add	r7, sp, #0
 8009ae8:	6078      	str	r0, [r7, #4]
 8009aea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009af2:	b2db      	uxtb	r3, r3
 8009af4:	3b01      	subs	r3, #1
 8009af6:	2b02      	cmp	r3, #2
 8009af8:	d80b      	bhi.n	8009b12 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	885b      	ldrh	r3, [r3, #2]
 8009afe:	2b01      	cmp	r3, #1
 8009b00:	d10c      	bne.n	8009b1c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2200      	movs	r2, #0
 8009b06:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f000 fa1f 	bl	8009f4e <USBD_CtlSendStatus>
      }
      break;
 8009b10:	e004      	b.n	8009b1c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009b12:	6839      	ldr	r1, [r7, #0]
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	f000 f840 	bl	8009b9a <USBD_CtlError>
      break;
 8009b1a:	e000      	b.n	8009b1e <USBD_ClrFeature+0x3c>
      break;
 8009b1c:	bf00      	nop
  }
}
 8009b1e:	bf00      	nop
 8009b20:	3708      	adds	r7, #8
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}

08009b26 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009b26:	b580      	push	{r7, lr}
 8009b28:	b084      	sub	sp, #16
 8009b2a:	af00      	add	r7, sp, #0
 8009b2c:	6078      	str	r0, [r7, #4]
 8009b2e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	781a      	ldrb	r2, [r3, #0]
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	3301      	adds	r3, #1
 8009b40:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	781a      	ldrb	r2, [r3, #0]
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	3301      	adds	r3, #1
 8009b4e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009b50:	68f8      	ldr	r0, [r7, #12]
 8009b52:	f7ff fa40 	bl	8008fd6 <SWAPBYTE>
 8009b56:	4603      	mov	r3, r0
 8009b58:	461a      	mov	r2, r3
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	3301      	adds	r3, #1
 8009b62:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	3301      	adds	r3, #1
 8009b68:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009b6a:	68f8      	ldr	r0, [r7, #12]
 8009b6c:	f7ff fa33 	bl	8008fd6 <SWAPBYTE>
 8009b70:	4603      	mov	r3, r0
 8009b72:	461a      	mov	r2, r3
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	3301      	adds	r3, #1
 8009b7c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	3301      	adds	r3, #1
 8009b82:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009b84:	68f8      	ldr	r0, [r7, #12]
 8009b86:	f7ff fa26 	bl	8008fd6 <SWAPBYTE>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	461a      	mov	r2, r3
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	80da      	strh	r2, [r3, #6]
}
 8009b92:	bf00      	nop
 8009b94:	3710      	adds	r7, #16
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}

08009b9a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b9a:	b580      	push	{r7, lr}
 8009b9c:	b082      	sub	sp, #8
 8009b9e:	af00      	add	r7, sp, #0
 8009ba0:	6078      	str	r0, [r7, #4]
 8009ba2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009ba4:	2180      	movs	r1, #128	@ 0x80
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f7fe fdaa 	bl	8008700 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009bac:	2100      	movs	r1, #0
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	f7fe fda6 	bl	8008700 <USBD_LL_StallEP>
}
 8009bb4:	bf00      	nop
 8009bb6:	3708      	adds	r7, #8
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}

08009bbc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b086      	sub	sp, #24
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	60f8      	str	r0, [r7, #12]
 8009bc4:	60b9      	str	r1, [r7, #8]
 8009bc6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009bc8:	2300      	movs	r3, #0
 8009bca:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d036      	beq.n	8009c40 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009bd6:	6938      	ldr	r0, [r7, #16]
 8009bd8:	f000 f836 	bl	8009c48 <USBD_GetLen>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	3301      	adds	r3, #1
 8009be0:	b29b      	uxth	r3, r3
 8009be2:	005b      	lsls	r3, r3, #1
 8009be4:	b29a      	uxth	r2, r3
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009bea:	7dfb      	ldrb	r3, [r7, #23]
 8009bec:	68ba      	ldr	r2, [r7, #8]
 8009bee:	4413      	add	r3, r2
 8009bf0:	687a      	ldr	r2, [r7, #4]
 8009bf2:	7812      	ldrb	r2, [r2, #0]
 8009bf4:	701a      	strb	r2, [r3, #0]
  idx++;
 8009bf6:	7dfb      	ldrb	r3, [r7, #23]
 8009bf8:	3301      	adds	r3, #1
 8009bfa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009bfc:	7dfb      	ldrb	r3, [r7, #23]
 8009bfe:	68ba      	ldr	r2, [r7, #8]
 8009c00:	4413      	add	r3, r2
 8009c02:	2203      	movs	r2, #3
 8009c04:	701a      	strb	r2, [r3, #0]
  idx++;
 8009c06:	7dfb      	ldrb	r3, [r7, #23]
 8009c08:	3301      	adds	r3, #1
 8009c0a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009c0c:	e013      	b.n	8009c36 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009c0e:	7dfb      	ldrb	r3, [r7, #23]
 8009c10:	68ba      	ldr	r2, [r7, #8]
 8009c12:	4413      	add	r3, r2
 8009c14:	693a      	ldr	r2, [r7, #16]
 8009c16:	7812      	ldrb	r2, [r2, #0]
 8009c18:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009c1a:	693b      	ldr	r3, [r7, #16]
 8009c1c:	3301      	adds	r3, #1
 8009c1e:	613b      	str	r3, [r7, #16]
    idx++;
 8009c20:	7dfb      	ldrb	r3, [r7, #23]
 8009c22:	3301      	adds	r3, #1
 8009c24:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009c26:	7dfb      	ldrb	r3, [r7, #23]
 8009c28:	68ba      	ldr	r2, [r7, #8]
 8009c2a:	4413      	add	r3, r2
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	701a      	strb	r2, [r3, #0]
    idx++;
 8009c30:	7dfb      	ldrb	r3, [r7, #23]
 8009c32:	3301      	adds	r3, #1
 8009c34:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009c36:	693b      	ldr	r3, [r7, #16]
 8009c38:	781b      	ldrb	r3, [r3, #0]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d1e7      	bne.n	8009c0e <USBD_GetString+0x52>
 8009c3e:	e000      	b.n	8009c42 <USBD_GetString+0x86>
    return;
 8009c40:	bf00      	nop
  }
}
 8009c42:	3718      	adds	r7, #24
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd80      	pop	{r7, pc}

08009c48 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009c48:	b480      	push	{r7}
 8009c4a:	b085      	sub	sp, #20
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009c50:	2300      	movs	r3, #0
 8009c52:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009c58:	e005      	b.n	8009c66 <USBD_GetLen+0x1e>
  {
    len++;
 8009c5a:	7bfb      	ldrb	r3, [r7, #15]
 8009c5c:	3301      	adds	r3, #1
 8009c5e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	3301      	adds	r3, #1
 8009c64:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	781b      	ldrb	r3, [r3, #0]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d1f5      	bne.n	8009c5a <USBD_GetLen+0x12>
  }

  return len;
 8009c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c70:	4618      	mov	r0, r3
 8009c72:	3714      	adds	r7, #20
 8009c74:	46bd      	mov	sp, r7
 8009c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7a:	4770      	bx	lr

08009c7c <USBD_Class_DeviceDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b083      	sub	sp, #12
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	4603      	mov	r3, r0
 8009c84:	6039      	str	r1, [r7, #0]
 8009c86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = sizeof(USBD_DeviceDesc);
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	2212      	movs	r2, #18
 8009c8c:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)USBD_DeviceDesc;
 8009c8e:	4b03      	ldr	r3, [pc, #12]	@ (8009c9c <USBD_Class_DeviceDescriptor+0x20>)
}
 8009c90:	4618      	mov	r0, r3
 8009c92:	370c      	adds	r7, #12
 8009c94:	46bd      	mov	sp, r7
 8009c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9a:	4770      	bx	lr
 8009c9c:	200000d4 	.word	0x200000d4

08009ca0 <USBD_Class_LangIDStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ca0:	b480      	push	{r7}
 8009ca2:	b083      	sub	sp, #12
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	6039      	str	r1, [r7, #0]
 8009caa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = sizeof(USBD_LangIDDesc);
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	2204      	movs	r2, #4
 8009cb0:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)USBD_LangIDDesc;
 8009cb2:	4b03      	ldr	r3, [pc, #12]	@ (8009cc0 <USBD_Class_LangIDStrDescriptor+0x20>)
}
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	370c      	adds	r7, #12
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbe:	4770      	bx	lr
 8009cc0:	200000e8 	.word	0x200000e8

08009cc4 <USBD_Class_ProductStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b082      	sub	sp, #8
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	4603      	mov	r3, r0
 8009ccc:	6039      	str	r1, [r7, #0]
 8009cce:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 8009cd0:	79fb      	ldrb	r3, [r7, #7]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d105      	bne.n	8009ce2 <USBD_Class_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_HS_STRING, USBD_StrDesc, length);
 8009cd6:	683a      	ldr	r2, [r7, #0]
 8009cd8:	4907      	ldr	r1, [pc, #28]	@ (8009cf8 <USBD_Class_ProductStrDescriptor+0x34>)
 8009cda:	4808      	ldr	r0, [pc, #32]	@ (8009cfc <USBD_Class_ProductStrDescriptor+0x38>)
 8009cdc:	f7ff ff6e 	bl	8009bbc <USBD_GetString>
 8009ce0:	e004      	b.n	8009cec <USBD_Class_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);
 8009ce2:	683a      	ldr	r2, [r7, #0]
 8009ce4:	4904      	ldr	r1, [pc, #16]	@ (8009cf8 <USBD_Class_ProductStrDescriptor+0x34>)
 8009ce6:	4806      	ldr	r0, [pc, #24]	@ (8009d00 <USBD_Class_ProductStrDescriptor+0x3c>)
 8009ce8:	f7ff ff68 	bl	8009bbc <USBD_GetString>
  }
  return USBD_StrDesc;
 8009cec:	4b02      	ldr	r3, [pc, #8]	@ (8009cf8 <USBD_Class_ProductStrDescriptor+0x34>)
}
 8009cee:	4618      	mov	r0, r3
 8009cf0:	3708      	adds	r7, #8
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}
 8009cf6:	bf00      	nop
 8009cf8:	2000086c 	.word	0x2000086c
 8009cfc:	0800aee8 	.word	0x0800aee8
 8009d00:	0800af0c 	.word	0x0800af0c

08009d04 <USBD_Class_ManufacturerStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b082      	sub	sp, #8
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	6039      	str	r1, [r7, #0]
 8009d0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009d10:	683a      	ldr	r2, [r7, #0]
 8009d12:	4904      	ldr	r1, [pc, #16]	@ (8009d24 <USBD_Class_ManufacturerStrDescriptor+0x20>)
 8009d14:	4804      	ldr	r0, [pc, #16]	@ (8009d28 <USBD_Class_ManufacturerStrDescriptor+0x24>)
 8009d16:	f7ff ff51 	bl	8009bbc <USBD_GetString>
  return USBD_StrDesc;
 8009d1a:	4b02      	ldr	r3, [pc, #8]	@ (8009d24 <USBD_Class_ManufacturerStrDescriptor+0x20>)
}
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	3708      	adds	r7, #8
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}
 8009d24:	2000086c 	.word	0x2000086c
 8009d28:	0800af30 	.word	0x0800af30

08009d2c <USBD_Class_SerialStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b082      	sub	sp, #8
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	4603      	mov	r3, r0
 8009d34:	6039      	str	r1, [r7, #0]
 8009d36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = USB_SIZ_STRING_SERIAL;
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	221a      	movs	r2, #26
 8009d3c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique ID*/
  Get_SerialNum();
 8009d3e:	f000 f843 	bl	8009dc8 <Get_SerialNum>

  return (uint8_t *)USBD_StringSerial;
 8009d42:	4b02      	ldr	r3, [pc, #8]	@ (8009d4c <USBD_Class_SerialStrDescriptor+0x20>)
}
 8009d44:	4618      	mov	r0, r3
 8009d46:	3708      	adds	r7, #8
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}
 8009d4c:	200000ec 	.word	0x200000ec

08009d50 <USBD_Class_ConfigStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b082      	sub	sp, #8
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	4603      	mov	r3, r0
 8009d58:	6039      	str	r1, [r7, #0]
 8009d5a:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 8009d5c:	79fb      	ldrb	r3, [r7, #7]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d105      	bne.n	8009d6e <USBD_Class_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_HS_STRING, USBD_StrDesc, length);
 8009d62:	683a      	ldr	r2, [r7, #0]
 8009d64:	4907      	ldr	r1, [pc, #28]	@ (8009d84 <USBD_Class_ConfigStrDescriptor+0x34>)
 8009d66:	4808      	ldr	r0, [pc, #32]	@ (8009d88 <USBD_Class_ConfigStrDescriptor+0x38>)
 8009d68:	f7ff ff28 	bl	8009bbc <USBD_GetString>
 8009d6c:	e004      	b.n	8009d78 <USBD_Class_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length);
 8009d6e:	683a      	ldr	r2, [r7, #0]
 8009d70:	4904      	ldr	r1, [pc, #16]	@ (8009d84 <USBD_Class_ConfigStrDescriptor+0x34>)
 8009d72:	4805      	ldr	r0, [pc, #20]	@ (8009d88 <USBD_Class_ConfigStrDescriptor+0x38>)
 8009d74:	f7ff ff22 	bl	8009bbc <USBD_GetString>
  }
  return USBD_StrDesc;
 8009d78:	4b02      	ldr	r3, [pc, #8]	@ (8009d84 <USBD_Class_ConfigStrDescriptor+0x34>)
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	3708      	adds	r7, #8
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}
 8009d82:	bf00      	nop
 8009d84:	2000086c 	.word	0x2000086c
 8009d88:	0800af44 	.word	0x0800af44

08009d8c <USBD_Class_InterfaceStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b082      	sub	sp, #8
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	4603      	mov	r3, r0
 8009d94:	6039      	str	r1, [r7, #0]
 8009d96:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 8009d98:	79fb      	ldrb	r3, [r7, #7]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d105      	bne.n	8009daa <USBD_Class_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_HS_STRING, USBD_StrDesc, length);
 8009d9e:	683a      	ldr	r2, [r7, #0]
 8009da0:	4907      	ldr	r1, [pc, #28]	@ (8009dc0 <USBD_Class_InterfaceStrDescriptor+0x34>)
 8009da2:	4808      	ldr	r0, [pc, #32]	@ (8009dc4 <USBD_Class_InterfaceStrDescriptor+0x38>)
 8009da4:	f7ff ff0a 	bl	8009bbc <USBD_GetString>
 8009da8:	e004      	b.n	8009db4 <USBD_Class_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 8009daa:	683a      	ldr	r2, [r7, #0]
 8009dac:	4904      	ldr	r1, [pc, #16]	@ (8009dc0 <USBD_Class_InterfaceStrDescriptor+0x34>)
 8009dae:	4805      	ldr	r0, [pc, #20]	@ (8009dc4 <USBD_Class_InterfaceStrDescriptor+0x38>)
 8009db0:	f7ff ff04 	bl	8009bbc <USBD_GetString>
  }
  return USBD_StrDesc;
 8009db4:	4b02      	ldr	r3, [pc, #8]	@ (8009dc0 <USBD_Class_InterfaceStrDescriptor+0x34>)
}
 8009db6:	4618      	mov	r0, r3
 8009db8:	3708      	adds	r7, #8
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd80      	pop	{r7, pc}
 8009dbe:	bf00      	nop
 8009dc0:	2000086c 	.word	0x2000086c
 8009dc4:	0800af64 	.word	0x0800af64

08009dc8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b084      	sub	sp, #16
 8009dcc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *)DEVICE_ID1;
 8009dce:	4b0f      	ldr	r3, [pc, #60]	@ (8009e0c <Get_SerialNum+0x44>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *)DEVICE_ID2;
 8009dd4:	4b0e      	ldr	r3, [pc, #56]	@ (8009e10 <Get_SerialNum+0x48>)
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *)DEVICE_ID3;
 8009dda:	4b0e      	ldr	r3, [pc, #56]	@ (8009e14 <Get_SerialNum+0x4c>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009de0:	68fa      	ldr	r2, [r7, #12]
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	4413      	add	r3, r2
 8009de6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0U)
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d009      	beq.n	8009e02 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8U);
 8009dee:	2208      	movs	r2, #8
 8009df0:	4909      	ldr	r1, [pc, #36]	@ (8009e18 <Get_SerialNum+0x50>)
 8009df2:	68f8      	ldr	r0, [r7, #12]
 8009df4:	f000 f814 	bl	8009e20 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4U);
 8009df8:	2204      	movs	r2, #4
 8009dfa:	4908      	ldr	r1, [pc, #32]	@ (8009e1c <Get_SerialNum+0x54>)
 8009dfc:	68b8      	ldr	r0, [r7, #8]
 8009dfe:	f000 f80f 	bl	8009e20 <IntToUnicode>
  }
}
 8009e02:	bf00      	nop
 8009e04:	3710      	adds	r7, #16
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bd80      	pop	{r7, pc}
 8009e0a:	bf00      	nop
 8009e0c:	08fff800 	.word	0x08fff800
 8009e10:	08fff804 	.word	0x08fff804
 8009e14:	08fff808 	.word	0x08fff808
 8009e18:	200000ee 	.word	0x200000ee
 8009e1c:	200000fe 	.word	0x200000fe

08009e20 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t *pbuf, uint8_t len)
{
 8009e20:	b480      	push	{r7}
 8009e22:	b087      	sub	sp, #28
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	60f8      	str	r0, [r7, #12]
 8009e28:	60b9      	str	r1, [r7, #8]
 8009e2a:	4613      	mov	r3, r2
 8009e2c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0U;
 8009e2e:	2300      	movs	r3, #0
 8009e30:	75fb      	strb	r3, [r7, #23]

  for (idx = 0U ; idx < len ; idx ++)
 8009e32:	2300      	movs	r3, #0
 8009e34:	75fb      	strb	r3, [r7, #23]
 8009e36:	e025      	b.n	8009e84 <IntToUnicode+0x64>
  {
    if (((value >> 28)) < 0xAU)
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	0f1b      	lsrs	r3, r3, #28
 8009e3c:	2b09      	cmp	r3, #9
 8009e3e:	d80a      	bhi.n	8009e56 <IntToUnicode+0x36>
    {
      pbuf[ 2U * idx] = (value >> 28) + '0';
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	0f1b      	lsrs	r3, r3, #28
 8009e44:	b2da      	uxtb	r2, r3
 8009e46:	7dfb      	ldrb	r3, [r7, #23]
 8009e48:	005b      	lsls	r3, r3, #1
 8009e4a:	68b9      	ldr	r1, [r7, #8]
 8009e4c:	440b      	add	r3, r1
 8009e4e:	3230      	adds	r2, #48	@ 0x30
 8009e50:	b2d2      	uxtb	r2, r2
 8009e52:	701a      	strb	r2, [r3, #0]
 8009e54:	e009      	b.n	8009e6a <IntToUnicode+0x4a>
    }
    else
    {
      pbuf[2U * idx] = (value >> 28) + 'A' - 10U;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	0f1b      	lsrs	r3, r3, #28
 8009e5a:	b2da      	uxtb	r2, r3
 8009e5c:	7dfb      	ldrb	r3, [r7, #23]
 8009e5e:	005b      	lsls	r3, r3, #1
 8009e60:	68b9      	ldr	r1, [r7, #8]
 8009e62:	440b      	add	r3, r1
 8009e64:	3237      	adds	r2, #55	@ 0x37
 8009e66:	b2d2      	uxtb	r2, r2
 8009e68:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	011b      	lsls	r3, r3, #4
 8009e6e:	60fb      	str	r3, [r7, #12]

    pbuf[2U * idx + 1] = 0U;
 8009e70:	7dfb      	ldrb	r3, [r7, #23]
 8009e72:	005b      	lsls	r3, r3, #1
 8009e74:	3301      	adds	r3, #1
 8009e76:	68ba      	ldr	r2, [r7, #8]
 8009e78:	4413      	add	r3, r2
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	701a      	strb	r2, [r3, #0]
  for (idx = 0U ; idx < len ; idx ++)
 8009e7e:	7dfb      	ldrb	r3, [r7, #23]
 8009e80:	3301      	adds	r3, #1
 8009e82:	75fb      	strb	r3, [r7, #23]
 8009e84:	7dfa      	ldrb	r2, [r7, #23]
 8009e86:	79fb      	ldrb	r3, [r7, #7]
 8009e88:	429a      	cmp	r2, r3
 8009e8a:	d3d5      	bcc.n	8009e38 <IntToUnicode+0x18>
  }
}
 8009e8c:	bf00      	nop
 8009e8e:	bf00      	nop
 8009e90:	371c      	adds	r7, #28
 8009e92:	46bd      	mov	sp, r7
 8009e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e98:	4770      	bx	lr

08009e9a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009e9a:	b580      	push	{r7, lr}
 8009e9c:	b084      	sub	sp, #16
 8009e9e:	af00      	add	r7, sp, #0
 8009ea0:	60f8      	str	r0, [r7, #12]
 8009ea2:	60b9      	str	r1, [r7, #8]
 8009ea4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	2202      	movs	r2, #2
 8009eaa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	687a      	ldr	r2, [r7, #4]
 8009eb2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	687a      	ldr	r2, [r7, #4]
 8009eb8:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	68ba      	ldr	r2, [r7, #8]
 8009ebe:	2100      	movs	r1, #0
 8009ec0:	68f8      	ldr	r0, [r7, #12]
 8009ec2:	f7fe fc94 	bl	80087ee <USBD_LL_Transmit>

  return USBD_OK;
 8009ec6:	2300      	movs	r3, #0
}
 8009ec8:	4618      	mov	r0, r3
 8009eca:	3710      	adds	r7, #16
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bd80      	pop	{r7, pc}

08009ed0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b084      	sub	sp, #16
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	60f8      	str	r0, [r7, #12]
 8009ed8:	60b9      	str	r1, [r7, #8]
 8009eda:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	68ba      	ldr	r2, [r7, #8]
 8009ee0:	2100      	movs	r1, #0
 8009ee2:	68f8      	ldr	r0, [r7, #12]
 8009ee4:	f7fe fc83 	bl	80087ee <USBD_LL_Transmit>

  return USBD_OK;
 8009ee8:	2300      	movs	r3, #0
}
 8009eea:	4618      	mov	r0, r3
 8009eec:	3710      	adds	r7, #16
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	bd80      	pop	{r7, pc}

08009ef2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009ef2:	b580      	push	{r7, lr}
 8009ef4:	b084      	sub	sp, #16
 8009ef6:	af00      	add	r7, sp, #0
 8009ef8:	60f8      	str	r0, [r7, #12]
 8009efa:	60b9      	str	r1, [r7, #8]
 8009efc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	2203      	movs	r2, #3
 8009f02:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	687a      	ldr	r2, [r7, #4]
 8009f0a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	687a      	ldr	r2, [r7, #4]
 8009f12:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	68ba      	ldr	r2, [r7, #8]
 8009f1a:	2100      	movs	r1, #0
 8009f1c:	68f8      	ldr	r0, [r7, #12]
 8009f1e:	f7fe fc81 	bl	8008824 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009f22:	2300      	movs	r3, #0
}
 8009f24:	4618      	mov	r0, r3
 8009f26:	3710      	adds	r7, #16
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	bd80      	pop	{r7, pc}

08009f2c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b084      	sub	sp, #16
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	60f8      	str	r0, [r7, #12]
 8009f34:	60b9      	str	r1, [r7, #8]
 8009f36:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	68ba      	ldr	r2, [r7, #8]
 8009f3c:	2100      	movs	r1, #0
 8009f3e:	68f8      	ldr	r0, [r7, #12]
 8009f40:	f7fe fc70 	bl	8008824 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009f44:	2300      	movs	r3, #0
}
 8009f46:	4618      	mov	r0, r3
 8009f48:	3710      	adds	r7, #16
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	bd80      	pop	{r7, pc}

08009f4e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009f4e:	b580      	push	{r7, lr}
 8009f50:	b082      	sub	sp, #8
 8009f52:	af00      	add	r7, sp, #0
 8009f54:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2204      	movs	r2, #4
 8009f5a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009f5e:	2300      	movs	r3, #0
 8009f60:	2200      	movs	r2, #0
 8009f62:	2100      	movs	r1, #0
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f7fe fc42 	bl	80087ee <USBD_LL_Transmit>

  return USBD_OK;
 8009f6a:	2300      	movs	r3, #0
}
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	3708      	adds	r7, #8
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bd80      	pop	{r7, pc}

08009f74 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b082      	sub	sp, #8
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2205      	movs	r2, #5
 8009f80:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009f84:	2300      	movs	r3, #0
 8009f86:	2200      	movs	r2, #0
 8009f88:	2100      	movs	r1, #0
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f7fe fc4a 	bl	8008824 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009f90:	2300      	movs	r3, #0
}
 8009f92:	4618      	mov	r0, r3
 8009f94:	3708      	adds	r7, #8
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd80      	pop	{r7, pc}
	...

08009f9c <std>:
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	b510      	push	{r4, lr}
 8009fa0:	4604      	mov	r4, r0
 8009fa2:	6083      	str	r3, [r0, #8]
 8009fa4:	8181      	strh	r1, [r0, #12]
 8009fa6:	4619      	mov	r1, r3
 8009fa8:	6643      	str	r3, [r0, #100]	@ 0x64
 8009faa:	81c2      	strh	r2, [r0, #14]
 8009fac:	2208      	movs	r2, #8
 8009fae:	6183      	str	r3, [r0, #24]
 8009fb0:	e9c0 3300 	strd	r3, r3, [r0]
 8009fb4:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009fb8:	305c      	adds	r0, #92	@ 0x5c
 8009fba:	f000 f90e 	bl	800a1da <memset>
 8009fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8009ff4 <std+0x58>)
 8009fc0:	6224      	str	r4, [r4, #32]
 8009fc2:	6263      	str	r3, [r4, #36]	@ 0x24
 8009fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8009ff8 <std+0x5c>)
 8009fc6:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009fc8:	4b0c      	ldr	r3, [pc, #48]	@ (8009ffc <std+0x60>)
 8009fca:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009fcc:	4b0c      	ldr	r3, [pc, #48]	@ (800a000 <std+0x64>)
 8009fce:	6323      	str	r3, [r4, #48]	@ 0x30
 8009fd0:	4b0c      	ldr	r3, [pc, #48]	@ (800a004 <std+0x68>)
 8009fd2:	429c      	cmp	r4, r3
 8009fd4:	d006      	beq.n	8009fe4 <std+0x48>
 8009fd6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009fda:	4294      	cmp	r4, r2
 8009fdc:	d002      	beq.n	8009fe4 <std+0x48>
 8009fde:	33d0      	adds	r3, #208	@ 0xd0
 8009fe0:	429c      	cmp	r4, r3
 8009fe2:	d105      	bne.n	8009ff0 <std+0x54>
 8009fe4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009fe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009fec:	f000 b96e 	b.w	800a2cc <__retarget_lock_init_recursive>
 8009ff0:	bd10      	pop	{r4, pc}
 8009ff2:	bf00      	nop
 8009ff4:	0800a155 	.word	0x0800a155
 8009ff8:	0800a177 	.word	0x0800a177
 8009ffc:	0800a1af 	.word	0x0800a1af
 800a000:	0800a1d3 	.word	0x0800a1d3
 800a004:	2000096c 	.word	0x2000096c

0800a008 <stdio_exit_handler>:
 800a008:	4a02      	ldr	r2, [pc, #8]	@ (800a014 <stdio_exit_handler+0xc>)
 800a00a:	4903      	ldr	r1, [pc, #12]	@ (800a018 <stdio_exit_handler+0x10>)
 800a00c:	4803      	ldr	r0, [pc, #12]	@ (800a01c <stdio_exit_handler+0x14>)
 800a00e:	f000 b869 	b.w	800a0e4 <_fwalk_sglue>
 800a012:	bf00      	nop
 800a014:	20000108 	.word	0x20000108
 800a018:	0800ab75 	.word	0x0800ab75
 800a01c:	20000118 	.word	0x20000118

0800a020 <cleanup_stdio>:
 800a020:	6841      	ldr	r1, [r0, #4]
 800a022:	4b0c      	ldr	r3, [pc, #48]	@ (800a054 <cleanup_stdio+0x34>)
 800a024:	4299      	cmp	r1, r3
 800a026:	b510      	push	{r4, lr}
 800a028:	4604      	mov	r4, r0
 800a02a:	d001      	beq.n	800a030 <cleanup_stdio+0x10>
 800a02c:	f000 fda2 	bl	800ab74 <_fflush_r>
 800a030:	68a1      	ldr	r1, [r4, #8]
 800a032:	4b09      	ldr	r3, [pc, #36]	@ (800a058 <cleanup_stdio+0x38>)
 800a034:	4299      	cmp	r1, r3
 800a036:	d002      	beq.n	800a03e <cleanup_stdio+0x1e>
 800a038:	4620      	mov	r0, r4
 800a03a:	f000 fd9b 	bl	800ab74 <_fflush_r>
 800a03e:	68e1      	ldr	r1, [r4, #12]
 800a040:	4b06      	ldr	r3, [pc, #24]	@ (800a05c <cleanup_stdio+0x3c>)
 800a042:	4299      	cmp	r1, r3
 800a044:	d004      	beq.n	800a050 <cleanup_stdio+0x30>
 800a046:	4620      	mov	r0, r4
 800a048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a04c:	f000 bd92 	b.w	800ab74 <_fflush_r>
 800a050:	bd10      	pop	{r4, pc}
 800a052:	bf00      	nop
 800a054:	2000096c 	.word	0x2000096c
 800a058:	200009d4 	.word	0x200009d4
 800a05c:	20000a3c 	.word	0x20000a3c

0800a060 <global_stdio_init.part.0>:
 800a060:	b510      	push	{r4, lr}
 800a062:	4b0b      	ldr	r3, [pc, #44]	@ (800a090 <global_stdio_init.part.0+0x30>)
 800a064:	2104      	movs	r1, #4
 800a066:	4c0b      	ldr	r4, [pc, #44]	@ (800a094 <global_stdio_init.part.0+0x34>)
 800a068:	4a0b      	ldr	r2, [pc, #44]	@ (800a098 <global_stdio_init.part.0+0x38>)
 800a06a:	4620      	mov	r0, r4
 800a06c:	601a      	str	r2, [r3, #0]
 800a06e:	2200      	movs	r2, #0
 800a070:	f7ff ff94 	bl	8009f9c <std>
 800a074:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a078:	2201      	movs	r2, #1
 800a07a:	2109      	movs	r1, #9
 800a07c:	f7ff ff8e 	bl	8009f9c <std>
 800a080:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a084:	2202      	movs	r2, #2
 800a086:	2112      	movs	r1, #18
 800a088:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a08c:	f7ff bf86 	b.w	8009f9c <std>
 800a090:	20000aa4 	.word	0x20000aa4
 800a094:	2000096c 	.word	0x2000096c
 800a098:	0800a009 	.word	0x0800a009

0800a09c <__sfp_lock_acquire>:
 800a09c:	4801      	ldr	r0, [pc, #4]	@ (800a0a4 <__sfp_lock_acquire+0x8>)
 800a09e:	f000 b916 	b.w	800a2ce <__retarget_lock_acquire_recursive>
 800a0a2:	bf00      	nop
 800a0a4:	20000aad 	.word	0x20000aad

0800a0a8 <__sfp_lock_release>:
 800a0a8:	4801      	ldr	r0, [pc, #4]	@ (800a0b0 <__sfp_lock_release+0x8>)
 800a0aa:	f000 b911 	b.w	800a2d0 <__retarget_lock_release_recursive>
 800a0ae:	bf00      	nop
 800a0b0:	20000aad 	.word	0x20000aad

0800a0b4 <__sinit>:
 800a0b4:	b510      	push	{r4, lr}
 800a0b6:	4604      	mov	r4, r0
 800a0b8:	f7ff fff0 	bl	800a09c <__sfp_lock_acquire>
 800a0bc:	6a23      	ldr	r3, [r4, #32]
 800a0be:	b11b      	cbz	r3, 800a0c8 <__sinit+0x14>
 800a0c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0c4:	f7ff bff0 	b.w	800a0a8 <__sfp_lock_release>
 800a0c8:	4b04      	ldr	r3, [pc, #16]	@ (800a0dc <__sinit+0x28>)
 800a0ca:	6223      	str	r3, [r4, #32]
 800a0cc:	4b04      	ldr	r3, [pc, #16]	@ (800a0e0 <__sinit+0x2c>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d1f5      	bne.n	800a0c0 <__sinit+0xc>
 800a0d4:	f7ff ffc4 	bl	800a060 <global_stdio_init.part.0>
 800a0d8:	e7f2      	b.n	800a0c0 <__sinit+0xc>
 800a0da:	bf00      	nop
 800a0dc:	0800a021 	.word	0x0800a021
 800a0e0:	20000aa4 	.word	0x20000aa4

0800a0e4 <_fwalk_sglue>:
 800a0e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0e8:	4607      	mov	r7, r0
 800a0ea:	4688      	mov	r8, r1
 800a0ec:	4614      	mov	r4, r2
 800a0ee:	2600      	movs	r6, #0
 800a0f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a0f4:	f1b9 0901 	subs.w	r9, r9, #1
 800a0f8:	d505      	bpl.n	800a106 <_fwalk_sglue+0x22>
 800a0fa:	6824      	ldr	r4, [r4, #0]
 800a0fc:	2c00      	cmp	r4, #0
 800a0fe:	d1f7      	bne.n	800a0f0 <_fwalk_sglue+0xc>
 800a100:	4630      	mov	r0, r6
 800a102:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a106:	89ab      	ldrh	r3, [r5, #12]
 800a108:	2b01      	cmp	r3, #1
 800a10a:	d907      	bls.n	800a11c <_fwalk_sglue+0x38>
 800a10c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a110:	3301      	adds	r3, #1
 800a112:	d003      	beq.n	800a11c <_fwalk_sglue+0x38>
 800a114:	4629      	mov	r1, r5
 800a116:	4638      	mov	r0, r7
 800a118:	47c0      	blx	r8
 800a11a:	4306      	orrs	r6, r0
 800a11c:	3568      	adds	r5, #104	@ 0x68
 800a11e:	e7e9      	b.n	800a0f4 <_fwalk_sglue+0x10>

0800a120 <iprintf>:
 800a120:	b40f      	push	{r0, r1, r2, r3}
 800a122:	b507      	push	{r0, r1, r2, lr}
 800a124:	4906      	ldr	r1, [pc, #24]	@ (800a140 <iprintf+0x20>)
 800a126:	ab04      	add	r3, sp, #16
 800a128:	6808      	ldr	r0, [r1, #0]
 800a12a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a12e:	6881      	ldr	r1, [r0, #8]
 800a130:	9301      	str	r3, [sp, #4]
 800a132:	f000 f9f1 	bl	800a518 <_vfiprintf_r>
 800a136:	b003      	add	sp, #12
 800a138:	f85d eb04 	ldr.w	lr, [sp], #4
 800a13c:	b004      	add	sp, #16
 800a13e:	4770      	bx	lr
 800a140:	20000114 	.word	0x20000114

0800a144 <putchar>:
 800a144:	4b02      	ldr	r3, [pc, #8]	@ (800a150 <putchar+0xc>)
 800a146:	4601      	mov	r1, r0
 800a148:	6818      	ldr	r0, [r3, #0]
 800a14a:	6882      	ldr	r2, [r0, #8]
 800a14c:	f000 bd3a 	b.w	800abc4 <_putc_r>
 800a150:	20000114 	.word	0x20000114

0800a154 <__sread>:
 800a154:	b510      	push	{r4, lr}
 800a156:	460c      	mov	r4, r1
 800a158:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a15c:	f000 f868 	bl	800a230 <_read_r>
 800a160:	2800      	cmp	r0, #0
 800a162:	bfab      	itete	ge
 800a164:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a166:	89a3      	ldrhlt	r3, [r4, #12]
 800a168:	181b      	addge	r3, r3, r0
 800a16a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a16e:	bfac      	ite	ge
 800a170:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a172:	81a3      	strhlt	r3, [r4, #12]
 800a174:	bd10      	pop	{r4, pc}

0800a176 <__swrite>:
 800a176:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a17a:	461f      	mov	r7, r3
 800a17c:	898b      	ldrh	r3, [r1, #12]
 800a17e:	4605      	mov	r5, r0
 800a180:	460c      	mov	r4, r1
 800a182:	05db      	lsls	r3, r3, #23
 800a184:	4616      	mov	r6, r2
 800a186:	d505      	bpl.n	800a194 <__swrite+0x1e>
 800a188:	2302      	movs	r3, #2
 800a18a:	2200      	movs	r2, #0
 800a18c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a190:	f000 f83c 	bl	800a20c <_lseek_r>
 800a194:	89a3      	ldrh	r3, [r4, #12]
 800a196:	4632      	mov	r2, r6
 800a198:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a19c:	4628      	mov	r0, r5
 800a19e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a1a2:	81a3      	strh	r3, [r4, #12]
 800a1a4:	463b      	mov	r3, r7
 800a1a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a1aa:	f000 b853 	b.w	800a254 <_write_r>

0800a1ae <__sseek>:
 800a1ae:	b510      	push	{r4, lr}
 800a1b0:	460c      	mov	r4, r1
 800a1b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1b6:	f000 f829 	bl	800a20c <_lseek_r>
 800a1ba:	1c43      	adds	r3, r0, #1
 800a1bc:	89a3      	ldrh	r3, [r4, #12]
 800a1be:	bf15      	itete	ne
 800a1c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a1c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a1c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a1ca:	81a3      	strheq	r3, [r4, #12]
 800a1cc:	bf18      	it	ne
 800a1ce:	81a3      	strhne	r3, [r4, #12]
 800a1d0:	bd10      	pop	{r4, pc}

0800a1d2 <__sclose>:
 800a1d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1d6:	f000 b809 	b.w	800a1ec <_close_r>

0800a1da <memset>:
 800a1da:	4402      	add	r2, r0
 800a1dc:	4603      	mov	r3, r0
 800a1de:	4293      	cmp	r3, r2
 800a1e0:	d100      	bne.n	800a1e4 <memset+0xa>
 800a1e2:	4770      	bx	lr
 800a1e4:	f803 1b01 	strb.w	r1, [r3], #1
 800a1e8:	e7f9      	b.n	800a1de <memset+0x4>
	...

0800a1ec <_close_r>:
 800a1ec:	b538      	push	{r3, r4, r5, lr}
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	4d05      	ldr	r5, [pc, #20]	@ (800a208 <_close_r+0x1c>)
 800a1f2:	4604      	mov	r4, r0
 800a1f4:	4608      	mov	r0, r1
 800a1f6:	602b      	str	r3, [r5, #0]
 800a1f8:	f7f6 fbbf 	bl	800097a <_close>
 800a1fc:	1c43      	adds	r3, r0, #1
 800a1fe:	d102      	bne.n	800a206 <_close_r+0x1a>
 800a200:	682b      	ldr	r3, [r5, #0]
 800a202:	b103      	cbz	r3, 800a206 <_close_r+0x1a>
 800a204:	6023      	str	r3, [r4, #0]
 800a206:	bd38      	pop	{r3, r4, r5, pc}
 800a208:	20000aa8 	.word	0x20000aa8

0800a20c <_lseek_r>:
 800a20c:	b538      	push	{r3, r4, r5, lr}
 800a20e:	4604      	mov	r4, r0
 800a210:	4d06      	ldr	r5, [pc, #24]	@ (800a22c <_lseek_r+0x20>)
 800a212:	4608      	mov	r0, r1
 800a214:	4611      	mov	r1, r2
 800a216:	2200      	movs	r2, #0
 800a218:	602a      	str	r2, [r5, #0]
 800a21a:	461a      	mov	r2, r3
 800a21c:	f7f6 fbd4 	bl	80009c8 <_lseek>
 800a220:	1c43      	adds	r3, r0, #1
 800a222:	d102      	bne.n	800a22a <_lseek_r+0x1e>
 800a224:	682b      	ldr	r3, [r5, #0]
 800a226:	b103      	cbz	r3, 800a22a <_lseek_r+0x1e>
 800a228:	6023      	str	r3, [r4, #0]
 800a22a:	bd38      	pop	{r3, r4, r5, pc}
 800a22c:	20000aa8 	.word	0x20000aa8

0800a230 <_read_r>:
 800a230:	b538      	push	{r3, r4, r5, lr}
 800a232:	4604      	mov	r4, r0
 800a234:	4d06      	ldr	r5, [pc, #24]	@ (800a250 <_read_r+0x20>)
 800a236:	4608      	mov	r0, r1
 800a238:	4611      	mov	r1, r2
 800a23a:	2200      	movs	r2, #0
 800a23c:	602a      	str	r2, [r5, #0]
 800a23e:	461a      	mov	r2, r3
 800a240:	f7f6 fb62 	bl	8000908 <_read>
 800a244:	1c43      	adds	r3, r0, #1
 800a246:	d102      	bne.n	800a24e <_read_r+0x1e>
 800a248:	682b      	ldr	r3, [r5, #0]
 800a24a:	b103      	cbz	r3, 800a24e <_read_r+0x1e>
 800a24c:	6023      	str	r3, [r4, #0]
 800a24e:	bd38      	pop	{r3, r4, r5, pc}
 800a250:	20000aa8 	.word	0x20000aa8

0800a254 <_write_r>:
 800a254:	b538      	push	{r3, r4, r5, lr}
 800a256:	4604      	mov	r4, r0
 800a258:	4d06      	ldr	r5, [pc, #24]	@ (800a274 <_write_r+0x20>)
 800a25a:	4608      	mov	r0, r1
 800a25c:	4611      	mov	r1, r2
 800a25e:	2200      	movs	r2, #0
 800a260:	602a      	str	r2, [r5, #0]
 800a262:	461a      	mov	r2, r3
 800a264:	f7f6 fb6d 	bl	8000942 <_write>
 800a268:	1c43      	adds	r3, r0, #1
 800a26a:	d102      	bne.n	800a272 <_write_r+0x1e>
 800a26c:	682b      	ldr	r3, [r5, #0]
 800a26e:	b103      	cbz	r3, 800a272 <_write_r+0x1e>
 800a270:	6023      	str	r3, [r4, #0]
 800a272:	bd38      	pop	{r3, r4, r5, pc}
 800a274:	20000aa8 	.word	0x20000aa8

0800a278 <__errno>:
 800a278:	4b01      	ldr	r3, [pc, #4]	@ (800a280 <__errno+0x8>)
 800a27a:	6818      	ldr	r0, [r3, #0]
 800a27c:	4770      	bx	lr
 800a27e:	bf00      	nop
 800a280:	20000114 	.word	0x20000114

0800a284 <__libc_init_array>:
 800a284:	b570      	push	{r4, r5, r6, lr}
 800a286:	4d0d      	ldr	r5, [pc, #52]	@ (800a2bc <__libc_init_array+0x38>)
 800a288:	2600      	movs	r6, #0
 800a28a:	4c0d      	ldr	r4, [pc, #52]	@ (800a2c0 <__libc_init_array+0x3c>)
 800a28c:	1b64      	subs	r4, r4, r5
 800a28e:	10a4      	asrs	r4, r4, #2
 800a290:	42a6      	cmp	r6, r4
 800a292:	d109      	bne.n	800a2a8 <__libc_init_array+0x24>
 800a294:	4d0b      	ldr	r5, [pc, #44]	@ (800a2c4 <__libc_init_array+0x40>)
 800a296:	2600      	movs	r6, #0
 800a298:	4c0b      	ldr	r4, [pc, #44]	@ (800a2c8 <__libc_init_array+0x44>)
 800a29a:	f000 fdfd 	bl	800ae98 <_init>
 800a29e:	1b64      	subs	r4, r4, r5
 800a2a0:	10a4      	asrs	r4, r4, #2
 800a2a2:	42a6      	cmp	r6, r4
 800a2a4:	d105      	bne.n	800a2b2 <__libc_init_array+0x2e>
 800a2a6:	bd70      	pop	{r4, r5, r6, pc}
 800a2a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a2ac:	3601      	adds	r6, #1
 800a2ae:	4798      	blx	r3
 800a2b0:	e7ee      	b.n	800a290 <__libc_init_array+0xc>
 800a2b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a2b6:	3601      	adds	r6, #1
 800a2b8:	4798      	blx	r3
 800a2ba:	e7f2      	b.n	800a2a2 <__libc_init_array+0x1e>
 800a2bc:	0800afd8 	.word	0x0800afd8
 800a2c0:	0800afd8 	.word	0x0800afd8
 800a2c4:	0800afd8 	.word	0x0800afd8
 800a2c8:	0800afdc 	.word	0x0800afdc

0800a2cc <__retarget_lock_init_recursive>:
 800a2cc:	4770      	bx	lr

0800a2ce <__retarget_lock_acquire_recursive>:
 800a2ce:	4770      	bx	lr

0800a2d0 <__retarget_lock_release_recursive>:
 800a2d0:	4770      	bx	lr
	...

0800a2d4 <_free_r>:
 800a2d4:	b538      	push	{r3, r4, r5, lr}
 800a2d6:	4605      	mov	r5, r0
 800a2d8:	2900      	cmp	r1, #0
 800a2da:	d041      	beq.n	800a360 <_free_r+0x8c>
 800a2dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2e0:	1f0c      	subs	r4, r1, #4
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	bfb8      	it	lt
 800a2e6:	18e4      	addlt	r4, r4, r3
 800a2e8:	f000 f8e0 	bl	800a4ac <__malloc_lock>
 800a2ec:	4a1d      	ldr	r2, [pc, #116]	@ (800a364 <_free_r+0x90>)
 800a2ee:	6813      	ldr	r3, [r2, #0]
 800a2f0:	b933      	cbnz	r3, 800a300 <_free_r+0x2c>
 800a2f2:	6063      	str	r3, [r4, #4]
 800a2f4:	6014      	str	r4, [r2, #0]
 800a2f6:	4628      	mov	r0, r5
 800a2f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a2fc:	f000 b8dc 	b.w	800a4b8 <__malloc_unlock>
 800a300:	42a3      	cmp	r3, r4
 800a302:	d908      	bls.n	800a316 <_free_r+0x42>
 800a304:	6820      	ldr	r0, [r4, #0]
 800a306:	1821      	adds	r1, r4, r0
 800a308:	428b      	cmp	r3, r1
 800a30a:	bf01      	itttt	eq
 800a30c:	6819      	ldreq	r1, [r3, #0]
 800a30e:	685b      	ldreq	r3, [r3, #4]
 800a310:	1809      	addeq	r1, r1, r0
 800a312:	6021      	streq	r1, [r4, #0]
 800a314:	e7ed      	b.n	800a2f2 <_free_r+0x1e>
 800a316:	461a      	mov	r2, r3
 800a318:	685b      	ldr	r3, [r3, #4]
 800a31a:	b10b      	cbz	r3, 800a320 <_free_r+0x4c>
 800a31c:	42a3      	cmp	r3, r4
 800a31e:	d9fa      	bls.n	800a316 <_free_r+0x42>
 800a320:	6811      	ldr	r1, [r2, #0]
 800a322:	1850      	adds	r0, r2, r1
 800a324:	42a0      	cmp	r0, r4
 800a326:	d10b      	bne.n	800a340 <_free_r+0x6c>
 800a328:	6820      	ldr	r0, [r4, #0]
 800a32a:	4401      	add	r1, r0
 800a32c:	1850      	adds	r0, r2, r1
 800a32e:	6011      	str	r1, [r2, #0]
 800a330:	4283      	cmp	r3, r0
 800a332:	d1e0      	bne.n	800a2f6 <_free_r+0x22>
 800a334:	6818      	ldr	r0, [r3, #0]
 800a336:	685b      	ldr	r3, [r3, #4]
 800a338:	4408      	add	r0, r1
 800a33a:	6053      	str	r3, [r2, #4]
 800a33c:	6010      	str	r0, [r2, #0]
 800a33e:	e7da      	b.n	800a2f6 <_free_r+0x22>
 800a340:	d902      	bls.n	800a348 <_free_r+0x74>
 800a342:	230c      	movs	r3, #12
 800a344:	602b      	str	r3, [r5, #0]
 800a346:	e7d6      	b.n	800a2f6 <_free_r+0x22>
 800a348:	6820      	ldr	r0, [r4, #0]
 800a34a:	1821      	adds	r1, r4, r0
 800a34c:	428b      	cmp	r3, r1
 800a34e:	bf02      	ittt	eq
 800a350:	6819      	ldreq	r1, [r3, #0]
 800a352:	685b      	ldreq	r3, [r3, #4]
 800a354:	1809      	addeq	r1, r1, r0
 800a356:	6063      	str	r3, [r4, #4]
 800a358:	bf08      	it	eq
 800a35a:	6021      	streq	r1, [r4, #0]
 800a35c:	6054      	str	r4, [r2, #4]
 800a35e:	e7ca      	b.n	800a2f6 <_free_r+0x22>
 800a360:	bd38      	pop	{r3, r4, r5, pc}
 800a362:	bf00      	nop
 800a364:	20000ab4 	.word	0x20000ab4

0800a368 <sbrk_aligned>:
 800a368:	b570      	push	{r4, r5, r6, lr}
 800a36a:	4e0f      	ldr	r6, [pc, #60]	@ (800a3a8 <sbrk_aligned+0x40>)
 800a36c:	460c      	mov	r4, r1
 800a36e:	4605      	mov	r5, r0
 800a370:	6831      	ldr	r1, [r6, #0]
 800a372:	b911      	cbnz	r1, 800a37a <sbrk_aligned+0x12>
 800a374:	f000 fcee 	bl	800ad54 <_sbrk_r>
 800a378:	6030      	str	r0, [r6, #0]
 800a37a:	4621      	mov	r1, r4
 800a37c:	4628      	mov	r0, r5
 800a37e:	f000 fce9 	bl	800ad54 <_sbrk_r>
 800a382:	1c43      	adds	r3, r0, #1
 800a384:	d103      	bne.n	800a38e <sbrk_aligned+0x26>
 800a386:	f04f 34ff 	mov.w	r4, #4294967295
 800a38a:	4620      	mov	r0, r4
 800a38c:	bd70      	pop	{r4, r5, r6, pc}
 800a38e:	1cc4      	adds	r4, r0, #3
 800a390:	f024 0403 	bic.w	r4, r4, #3
 800a394:	42a0      	cmp	r0, r4
 800a396:	d0f8      	beq.n	800a38a <sbrk_aligned+0x22>
 800a398:	1a21      	subs	r1, r4, r0
 800a39a:	4628      	mov	r0, r5
 800a39c:	f000 fcda 	bl	800ad54 <_sbrk_r>
 800a3a0:	3001      	adds	r0, #1
 800a3a2:	d1f2      	bne.n	800a38a <sbrk_aligned+0x22>
 800a3a4:	e7ef      	b.n	800a386 <sbrk_aligned+0x1e>
 800a3a6:	bf00      	nop
 800a3a8:	20000ab0 	.word	0x20000ab0

0800a3ac <_malloc_r>:
 800a3ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3b0:	1ccd      	adds	r5, r1, #3
 800a3b2:	4606      	mov	r6, r0
 800a3b4:	f025 0503 	bic.w	r5, r5, #3
 800a3b8:	3508      	adds	r5, #8
 800a3ba:	2d0c      	cmp	r5, #12
 800a3bc:	bf38      	it	cc
 800a3be:	250c      	movcc	r5, #12
 800a3c0:	2d00      	cmp	r5, #0
 800a3c2:	db01      	blt.n	800a3c8 <_malloc_r+0x1c>
 800a3c4:	42a9      	cmp	r1, r5
 800a3c6:	d904      	bls.n	800a3d2 <_malloc_r+0x26>
 800a3c8:	230c      	movs	r3, #12
 800a3ca:	6033      	str	r3, [r6, #0]
 800a3cc:	2000      	movs	r0, #0
 800a3ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a4a8 <_malloc_r+0xfc>
 800a3d6:	f000 f869 	bl	800a4ac <__malloc_lock>
 800a3da:	f8d8 3000 	ldr.w	r3, [r8]
 800a3de:	461c      	mov	r4, r3
 800a3e0:	bb44      	cbnz	r4, 800a434 <_malloc_r+0x88>
 800a3e2:	4629      	mov	r1, r5
 800a3e4:	4630      	mov	r0, r6
 800a3e6:	f7ff ffbf 	bl	800a368 <sbrk_aligned>
 800a3ea:	1c43      	adds	r3, r0, #1
 800a3ec:	4604      	mov	r4, r0
 800a3ee:	d158      	bne.n	800a4a2 <_malloc_r+0xf6>
 800a3f0:	f8d8 4000 	ldr.w	r4, [r8]
 800a3f4:	4627      	mov	r7, r4
 800a3f6:	2f00      	cmp	r7, #0
 800a3f8:	d143      	bne.n	800a482 <_malloc_r+0xd6>
 800a3fa:	2c00      	cmp	r4, #0
 800a3fc:	d04b      	beq.n	800a496 <_malloc_r+0xea>
 800a3fe:	6823      	ldr	r3, [r4, #0]
 800a400:	4639      	mov	r1, r7
 800a402:	4630      	mov	r0, r6
 800a404:	eb04 0903 	add.w	r9, r4, r3
 800a408:	f000 fca4 	bl	800ad54 <_sbrk_r>
 800a40c:	4581      	cmp	r9, r0
 800a40e:	d142      	bne.n	800a496 <_malloc_r+0xea>
 800a410:	6821      	ldr	r1, [r4, #0]
 800a412:	4630      	mov	r0, r6
 800a414:	1a6d      	subs	r5, r5, r1
 800a416:	4629      	mov	r1, r5
 800a418:	f7ff ffa6 	bl	800a368 <sbrk_aligned>
 800a41c:	3001      	adds	r0, #1
 800a41e:	d03a      	beq.n	800a496 <_malloc_r+0xea>
 800a420:	6823      	ldr	r3, [r4, #0]
 800a422:	442b      	add	r3, r5
 800a424:	6023      	str	r3, [r4, #0]
 800a426:	f8d8 3000 	ldr.w	r3, [r8]
 800a42a:	685a      	ldr	r2, [r3, #4]
 800a42c:	bb62      	cbnz	r2, 800a488 <_malloc_r+0xdc>
 800a42e:	f8c8 7000 	str.w	r7, [r8]
 800a432:	e00f      	b.n	800a454 <_malloc_r+0xa8>
 800a434:	6822      	ldr	r2, [r4, #0]
 800a436:	1b52      	subs	r2, r2, r5
 800a438:	d420      	bmi.n	800a47c <_malloc_r+0xd0>
 800a43a:	2a0b      	cmp	r2, #11
 800a43c:	d917      	bls.n	800a46e <_malloc_r+0xc2>
 800a43e:	1961      	adds	r1, r4, r5
 800a440:	42a3      	cmp	r3, r4
 800a442:	6025      	str	r5, [r4, #0]
 800a444:	bf18      	it	ne
 800a446:	6059      	strne	r1, [r3, #4]
 800a448:	6863      	ldr	r3, [r4, #4]
 800a44a:	bf08      	it	eq
 800a44c:	f8c8 1000 	streq.w	r1, [r8]
 800a450:	5162      	str	r2, [r4, r5]
 800a452:	604b      	str	r3, [r1, #4]
 800a454:	4630      	mov	r0, r6
 800a456:	f000 f82f 	bl	800a4b8 <__malloc_unlock>
 800a45a:	f104 000b 	add.w	r0, r4, #11
 800a45e:	1d23      	adds	r3, r4, #4
 800a460:	f020 0007 	bic.w	r0, r0, #7
 800a464:	1ac2      	subs	r2, r0, r3
 800a466:	bf1c      	itt	ne
 800a468:	1a1b      	subne	r3, r3, r0
 800a46a:	50a3      	strne	r3, [r4, r2]
 800a46c:	e7af      	b.n	800a3ce <_malloc_r+0x22>
 800a46e:	6862      	ldr	r2, [r4, #4]
 800a470:	42a3      	cmp	r3, r4
 800a472:	bf0c      	ite	eq
 800a474:	f8c8 2000 	streq.w	r2, [r8]
 800a478:	605a      	strne	r2, [r3, #4]
 800a47a:	e7eb      	b.n	800a454 <_malloc_r+0xa8>
 800a47c:	4623      	mov	r3, r4
 800a47e:	6864      	ldr	r4, [r4, #4]
 800a480:	e7ae      	b.n	800a3e0 <_malloc_r+0x34>
 800a482:	463c      	mov	r4, r7
 800a484:	687f      	ldr	r7, [r7, #4]
 800a486:	e7b6      	b.n	800a3f6 <_malloc_r+0x4a>
 800a488:	461a      	mov	r2, r3
 800a48a:	685b      	ldr	r3, [r3, #4]
 800a48c:	42a3      	cmp	r3, r4
 800a48e:	d1fb      	bne.n	800a488 <_malloc_r+0xdc>
 800a490:	2300      	movs	r3, #0
 800a492:	6053      	str	r3, [r2, #4]
 800a494:	e7de      	b.n	800a454 <_malloc_r+0xa8>
 800a496:	230c      	movs	r3, #12
 800a498:	4630      	mov	r0, r6
 800a49a:	6033      	str	r3, [r6, #0]
 800a49c:	f000 f80c 	bl	800a4b8 <__malloc_unlock>
 800a4a0:	e794      	b.n	800a3cc <_malloc_r+0x20>
 800a4a2:	6005      	str	r5, [r0, #0]
 800a4a4:	e7d6      	b.n	800a454 <_malloc_r+0xa8>
 800a4a6:	bf00      	nop
 800a4a8:	20000ab4 	.word	0x20000ab4

0800a4ac <__malloc_lock>:
 800a4ac:	4801      	ldr	r0, [pc, #4]	@ (800a4b4 <__malloc_lock+0x8>)
 800a4ae:	f7ff bf0e 	b.w	800a2ce <__retarget_lock_acquire_recursive>
 800a4b2:	bf00      	nop
 800a4b4:	20000aac 	.word	0x20000aac

0800a4b8 <__malloc_unlock>:
 800a4b8:	4801      	ldr	r0, [pc, #4]	@ (800a4c0 <__malloc_unlock+0x8>)
 800a4ba:	f7ff bf09 	b.w	800a2d0 <__retarget_lock_release_recursive>
 800a4be:	bf00      	nop
 800a4c0:	20000aac 	.word	0x20000aac

0800a4c4 <__sfputc_r>:
 800a4c4:	6893      	ldr	r3, [r2, #8]
 800a4c6:	3b01      	subs	r3, #1
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	6093      	str	r3, [r2, #8]
 800a4cc:	b410      	push	{r4}
 800a4ce:	da08      	bge.n	800a4e2 <__sfputc_r+0x1e>
 800a4d0:	6994      	ldr	r4, [r2, #24]
 800a4d2:	42a3      	cmp	r3, r4
 800a4d4:	db01      	blt.n	800a4da <__sfputc_r+0x16>
 800a4d6:	290a      	cmp	r1, #10
 800a4d8:	d103      	bne.n	800a4e2 <__sfputc_r+0x1e>
 800a4da:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a4de:	f000 bba5 	b.w	800ac2c <__swbuf_r>
 800a4e2:	6813      	ldr	r3, [r2, #0]
 800a4e4:	1c58      	adds	r0, r3, #1
 800a4e6:	6010      	str	r0, [r2, #0]
 800a4e8:	4608      	mov	r0, r1
 800a4ea:	7019      	strb	r1, [r3, #0]
 800a4ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a4f0:	4770      	bx	lr

0800a4f2 <__sfputs_r>:
 800a4f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4f4:	4606      	mov	r6, r0
 800a4f6:	460f      	mov	r7, r1
 800a4f8:	4614      	mov	r4, r2
 800a4fa:	18d5      	adds	r5, r2, r3
 800a4fc:	42ac      	cmp	r4, r5
 800a4fe:	d101      	bne.n	800a504 <__sfputs_r+0x12>
 800a500:	2000      	movs	r0, #0
 800a502:	e007      	b.n	800a514 <__sfputs_r+0x22>
 800a504:	463a      	mov	r2, r7
 800a506:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a50a:	4630      	mov	r0, r6
 800a50c:	f7ff ffda 	bl	800a4c4 <__sfputc_r>
 800a510:	1c43      	adds	r3, r0, #1
 800a512:	d1f3      	bne.n	800a4fc <__sfputs_r+0xa>
 800a514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a518 <_vfiprintf_r>:
 800a518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a51c:	460d      	mov	r5, r1
 800a51e:	b09d      	sub	sp, #116	@ 0x74
 800a520:	4614      	mov	r4, r2
 800a522:	4698      	mov	r8, r3
 800a524:	4606      	mov	r6, r0
 800a526:	b118      	cbz	r0, 800a530 <_vfiprintf_r+0x18>
 800a528:	6a03      	ldr	r3, [r0, #32]
 800a52a:	b90b      	cbnz	r3, 800a530 <_vfiprintf_r+0x18>
 800a52c:	f7ff fdc2 	bl	800a0b4 <__sinit>
 800a530:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a532:	07d9      	lsls	r1, r3, #31
 800a534:	d405      	bmi.n	800a542 <_vfiprintf_r+0x2a>
 800a536:	89ab      	ldrh	r3, [r5, #12]
 800a538:	059a      	lsls	r2, r3, #22
 800a53a:	d402      	bmi.n	800a542 <_vfiprintf_r+0x2a>
 800a53c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a53e:	f7ff fec6 	bl	800a2ce <__retarget_lock_acquire_recursive>
 800a542:	89ab      	ldrh	r3, [r5, #12]
 800a544:	071b      	lsls	r3, r3, #28
 800a546:	d501      	bpl.n	800a54c <_vfiprintf_r+0x34>
 800a548:	692b      	ldr	r3, [r5, #16]
 800a54a:	b99b      	cbnz	r3, 800a574 <_vfiprintf_r+0x5c>
 800a54c:	4629      	mov	r1, r5
 800a54e:	4630      	mov	r0, r6
 800a550:	f000 fbaa 	bl	800aca8 <__swsetup_r>
 800a554:	b170      	cbz	r0, 800a574 <_vfiprintf_r+0x5c>
 800a556:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a558:	07dc      	lsls	r4, r3, #31
 800a55a:	d504      	bpl.n	800a566 <_vfiprintf_r+0x4e>
 800a55c:	f04f 30ff 	mov.w	r0, #4294967295
 800a560:	b01d      	add	sp, #116	@ 0x74
 800a562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a566:	89ab      	ldrh	r3, [r5, #12]
 800a568:	0598      	lsls	r0, r3, #22
 800a56a:	d4f7      	bmi.n	800a55c <_vfiprintf_r+0x44>
 800a56c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a56e:	f7ff feaf 	bl	800a2d0 <__retarget_lock_release_recursive>
 800a572:	e7f3      	b.n	800a55c <_vfiprintf_r+0x44>
 800a574:	2300      	movs	r3, #0
 800a576:	f8cd 800c 	str.w	r8, [sp, #12]
 800a57a:	f04f 0901 	mov.w	r9, #1
 800a57e:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800a734 <_vfiprintf_r+0x21c>
 800a582:	9309      	str	r3, [sp, #36]	@ 0x24
 800a584:	2320      	movs	r3, #32
 800a586:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a58a:	2330      	movs	r3, #48	@ 0x30
 800a58c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a590:	4623      	mov	r3, r4
 800a592:	469a      	mov	sl, r3
 800a594:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a598:	b10a      	cbz	r2, 800a59e <_vfiprintf_r+0x86>
 800a59a:	2a25      	cmp	r2, #37	@ 0x25
 800a59c:	d1f9      	bne.n	800a592 <_vfiprintf_r+0x7a>
 800a59e:	ebba 0b04 	subs.w	fp, sl, r4
 800a5a2:	d00b      	beq.n	800a5bc <_vfiprintf_r+0xa4>
 800a5a4:	465b      	mov	r3, fp
 800a5a6:	4622      	mov	r2, r4
 800a5a8:	4629      	mov	r1, r5
 800a5aa:	4630      	mov	r0, r6
 800a5ac:	f7ff ffa1 	bl	800a4f2 <__sfputs_r>
 800a5b0:	3001      	adds	r0, #1
 800a5b2:	f000 80a7 	beq.w	800a704 <_vfiprintf_r+0x1ec>
 800a5b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a5b8:	445a      	add	r2, fp
 800a5ba:	9209      	str	r2, [sp, #36]	@ 0x24
 800a5bc:	f89a 3000 	ldrb.w	r3, [sl]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	f000 809f 	beq.w	800a704 <_vfiprintf_r+0x1ec>
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	f04f 32ff 	mov.w	r2, #4294967295
 800a5cc:	f10a 0a01 	add.w	sl, sl, #1
 800a5d0:	9304      	str	r3, [sp, #16]
 800a5d2:	9307      	str	r3, [sp, #28]
 800a5d4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a5d8:	931a      	str	r3, [sp, #104]	@ 0x68
 800a5da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a5de:	4654      	mov	r4, sl
 800a5e0:	2205      	movs	r2, #5
 800a5e2:	4854      	ldr	r0, [pc, #336]	@ (800a734 <_vfiprintf_r+0x21c>)
 800a5e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5e8:	f000 fbc4 	bl	800ad74 <memchr>
 800a5ec:	9a04      	ldr	r2, [sp, #16]
 800a5ee:	b9d8      	cbnz	r0, 800a628 <_vfiprintf_r+0x110>
 800a5f0:	06d1      	lsls	r1, r2, #27
 800a5f2:	bf44      	itt	mi
 800a5f4:	2320      	movmi	r3, #32
 800a5f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a5fa:	0713      	lsls	r3, r2, #28
 800a5fc:	bf44      	itt	mi
 800a5fe:	232b      	movmi	r3, #43	@ 0x2b
 800a600:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a604:	f89a 3000 	ldrb.w	r3, [sl]
 800a608:	2b2a      	cmp	r3, #42	@ 0x2a
 800a60a:	d015      	beq.n	800a638 <_vfiprintf_r+0x120>
 800a60c:	9a07      	ldr	r2, [sp, #28]
 800a60e:	4654      	mov	r4, sl
 800a610:	2000      	movs	r0, #0
 800a612:	f04f 0c0a 	mov.w	ip, #10
 800a616:	4621      	mov	r1, r4
 800a618:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a61c:	3b30      	subs	r3, #48	@ 0x30
 800a61e:	2b09      	cmp	r3, #9
 800a620:	d94b      	bls.n	800a6ba <_vfiprintf_r+0x1a2>
 800a622:	b1b0      	cbz	r0, 800a652 <_vfiprintf_r+0x13a>
 800a624:	9207      	str	r2, [sp, #28]
 800a626:	e014      	b.n	800a652 <_vfiprintf_r+0x13a>
 800a628:	eba0 0308 	sub.w	r3, r0, r8
 800a62c:	46a2      	mov	sl, r4
 800a62e:	fa09 f303 	lsl.w	r3, r9, r3
 800a632:	4313      	orrs	r3, r2
 800a634:	9304      	str	r3, [sp, #16]
 800a636:	e7d2      	b.n	800a5de <_vfiprintf_r+0xc6>
 800a638:	9b03      	ldr	r3, [sp, #12]
 800a63a:	1d19      	adds	r1, r3, #4
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	9103      	str	r1, [sp, #12]
 800a642:	bfbb      	ittet	lt
 800a644:	425b      	neglt	r3, r3
 800a646:	f042 0202 	orrlt.w	r2, r2, #2
 800a64a:	9307      	strge	r3, [sp, #28]
 800a64c:	9307      	strlt	r3, [sp, #28]
 800a64e:	bfb8      	it	lt
 800a650:	9204      	strlt	r2, [sp, #16]
 800a652:	7823      	ldrb	r3, [r4, #0]
 800a654:	2b2e      	cmp	r3, #46	@ 0x2e
 800a656:	d10a      	bne.n	800a66e <_vfiprintf_r+0x156>
 800a658:	7863      	ldrb	r3, [r4, #1]
 800a65a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a65c:	d132      	bne.n	800a6c4 <_vfiprintf_r+0x1ac>
 800a65e:	9b03      	ldr	r3, [sp, #12]
 800a660:	3402      	adds	r4, #2
 800a662:	1d1a      	adds	r2, r3, #4
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a66a:	9203      	str	r2, [sp, #12]
 800a66c:	9305      	str	r3, [sp, #20]
 800a66e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a744 <_vfiprintf_r+0x22c>
 800a672:	2203      	movs	r2, #3
 800a674:	7821      	ldrb	r1, [r4, #0]
 800a676:	4650      	mov	r0, sl
 800a678:	f000 fb7c 	bl	800ad74 <memchr>
 800a67c:	b138      	cbz	r0, 800a68e <_vfiprintf_r+0x176>
 800a67e:	eba0 000a 	sub.w	r0, r0, sl
 800a682:	2240      	movs	r2, #64	@ 0x40
 800a684:	9b04      	ldr	r3, [sp, #16]
 800a686:	3401      	adds	r4, #1
 800a688:	4082      	lsls	r2, r0
 800a68a:	4313      	orrs	r3, r2
 800a68c:	9304      	str	r3, [sp, #16]
 800a68e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a692:	2206      	movs	r2, #6
 800a694:	4828      	ldr	r0, [pc, #160]	@ (800a738 <_vfiprintf_r+0x220>)
 800a696:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a69a:	f000 fb6b 	bl	800ad74 <memchr>
 800a69e:	2800      	cmp	r0, #0
 800a6a0:	d03f      	beq.n	800a722 <_vfiprintf_r+0x20a>
 800a6a2:	4b26      	ldr	r3, [pc, #152]	@ (800a73c <_vfiprintf_r+0x224>)
 800a6a4:	bb1b      	cbnz	r3, 800a6ee <_vfiprintf_r+0x1d6>
 800a6a6:	9b03      	ldr	r3, [sp, #12]
 800a6a8:	3307      	adds	r3, #7
 800a6aa:	f023 0307 	bic.w	r3, r3, #7
 800a6ae:	3308      	adds	r3, #8
 800a6b0:	9303      	str	r3, [sp, #12]
 800a6b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6b4:	443b      	add	r3, r7
 800a6b6:	9309      	str	r3, [sp, #36]	@ 0x24
 800a6b8:	e76a      	b.n	800a590 <_vfiprintf_r+0x78>
 800a6ba:	fb0c 3202 	mla	r2, ip, r2, r3
 800a6be:	460c      	mov	r4, r1
 800a6c0:	2001      	movs	r0, #1
 800a6c2:	e7a8      	b.n	800a616 <_vfiprintf_r+0xfe>
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	3401      	adds	r4, #1
 800a6c8:	f04f 0c0a 	mov.w	ip, #10
 800a6cc:	4619      	mov	r1, r3
 800a6ce:	9305      	str	r3, [sp, #20]
 800a6d0:	4620      	mov	r0, r4
 800a6d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a6d6:	3a30      	subs	r2, #48	@ 0x30
 800a6d8:	2a09      	cmp	r2, #9
 800a6da:	d903      	bls.n	800a6e4 <_vfiprintf_r+0x1cc>
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d0c6      	beq.n	800a66e <_vfiprintf_r+0x156>
 800a6e0:	9105      	str	r1, [sp, #20]
 800a6e2:	e7c4      	b.n	800a66e <_vfiprintf_r+0x156>
 800a6e4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a6e8:	4604      	mov	r4, r0
 800a6ea:	2301      	movs	r3, #1
 800a6ec:	e7f0      	b.n	800a6d0 <_vfiprintf_r+0x1b8>
 800a6ee:	ab03      	add	r3, sp, #12
 800a6f0:	462a      	mov	r2, r5
 800a6f2:	a904      	add	r1, sp, #16
 800a6f4:	4630      	mov	r0, r6
 800a6f6:	9300      	str	r3, [sp, #0]
 800a6f8:	4b11      	ldr	r3, [pc, #68]	@ (800a740 <_vfiprintf_r+0x228>)
 800a6fa:	f3af 8000 	nop.w
 800a6fe:	4607      	mov	r7, r0
 800a700:	1c78      	adds	r0, r7, #1
 800a702:	d1d6      	bne.n	800a6b2 <_vfiprintf_r+0x19a>
 800a704:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a706:	07d9      	lsls	r1, r3, #31
 800a708:	d405      	bmi.n	800a716 <_vfiprintf_r+0x1fe>
 800a70a:	89ab      	ldrh	r3, [r5, #12]
 800a70c:	059a      	lsls	r2, r3, #22
 800a70e:	d402      	bmi.n	800a716 <_vfiprintf_r+0x1fe>
 800a710:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a712:	f7ff fddd 	bl	800a2d0 <__retarget_lock_release_recursive>
 800a716:	89ab      	ldrh	r3, [r5, #12]
 800a718:	065b      	lsls	r3, r3, #25
 800a71a:	f53f af1f 	bmi.w	800a55c <_vfiprintf_r+0x44>
 800a71e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a720:	e71e      	b.n	800a560 <_vfiprintf_r+0x48>
 800a722:	ab03      	add	r3, sp, #12
 800a724:	462a      	mov	r2, r5
 800a726:	a904      	add	r1, sp, #16
 800a728:	4630      	mov	r0, r6
 800a72a:	9300      	str	r3, [sp, #0]
 800a72c:	4b04      	ldr	r3, [pc, #16]	@ (800a740 <_vfiprintf_r+0x228>)
 800a72e:	f000 f87d 	bl	800a82c <_printf_i>
 800a732:	e7e4      	b.n	800a6fe <_vfiprintf_r+0x1e6>
 800a734:	0800afa4 	.word	0x0800afa4
 800a738:	0800afae 	.word	0x0800afae
 800a73c:	00000000 	.word	0x00000000
 800a740:	0800a4f3 	.word	0x0800a4f3
 800a744:	0800afaa 	.word	0x0800afaa

0800a748 <_printf_common>:
 800a748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a74c:	4616      	mov	r6, r2
 800a74e:	4698      	mov	r8, r3
 800a750:	688a      	ldr	r2, [r1, #8]
 800a752:	4607      	mov	r7, r0
 800a754:	690b      	ldr	r3, [r1, #16]
 800a756:	460c      	mov	r4, r1
 800a758:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a75c:	4293      	cmp	r3, r2
 800a75e:	bfb8      	it	lt
 800a760:	4613      	movlt	r3, r2
 800a762:	6033      	str	r3, [r6, #0]
 800a764:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a768:	b10a      	cbz	r2, 800a76e <_printf_common+0x26>
 800a76a:	3301      	adds	r3, #1
 800a76c:	6033      	str	r3, [r6, #0]
 800a76e:	6823      	ldr	r3, [r4, #0]
 800a770:	0699      	lsls	r1, r3, #26
 800a772:	bf42      	ittt	mi
 800a774:	6833      	ldrmi	r3, [r6, #0]
 800a776:	3302      	addmi	r3, #2
 800a778:	6033      	strmi	r3, [r6, #0]
 800a77a:	6825      	ldr	r5, [r4, #0]
 800a77c:	f015 0506 	ands.w	r5, r5, #6
 800a780:	d106      	bne.n	800a790 <_printf_common+0x48>
 800a782:	f104 0a19 	add.w	sl, r4, #25
 800a786:	68e3      	ldr	r3, [r4, #12]
 800a788:	6832      	ldr	r2, [r6, #0]
 800a78a:	1a9b      	subs	r3, r3, r2
 800a78c:	42ab      	cmp	r3, r5
 800a78e:	dc2b      	bgt.n	800a7e8 <_printf_common+0xa0>
 800a790:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a794:	6822      	ldr	r2, [r4, #0]
 800a796:	3b00      	subs	r3, #0
 800a798:	bf18      	it	ne
 800a79a:	2301      	movne	r3, #1
 800a79c:	0692      	lsls	r2, r2, #26
 800a79e:	d430      	bmi.n	800a802 <_printf_common+0xba>
 800a7a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a7a4:	4641      	mov	r1, r8
 800a7a6:	4638      	mov	r0, r7
 800a7a8:	47c8      	blx	r9
 800a7aa:	3001      	adds	r0, #1
 800a7ac:	d023      	beq.n	800a7f6 <_printf_common+0xae>
 800a7ae:	6823      	ldr	r3, [r4, #0]
 800a7b0:	341a      	adds	r4, #26
 800a7b2:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800a7b6:	f003 0306 	and.w	r3, r3, #6
 800a7ba:	2b04      	cmp	r3, #4
 800a7bc:	bf0a      	itet	eq
 800a7be:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800a7c2:	2500      	movne	r5, #0
 800a7c4:	6833      	ldreq	r3, [r6, #0]
 800a7c6:	f04f 0600 	mov.w	r6, #0
 800a7ca:	bf08      	it	eq
 800a7cc:	1aed      	subeq	r5, r5, r3
 800a7ce:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a7d2:	bf08      	it	eq
 800a7d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a7d8:	4293      	cmp	r3, r2
 800a7da:	bfc4      	itt	gt
 800a7dc:	1a9b      	subgt	r3, r3, r2
 800a7de:	18ed      	addgt	r5, r5, r3
 800a7e0:	42b5      	cmp	r5, r6
 800a7e2:	d11a      	bne.n	800a81a <_printf_common+0xd2>
 800a7e4:	2000      	movs	r0, #0
 800a7e6:	e008      	b.n	800a7fa <_printf_common+0xb2>
 800a7e8:	2301      	movs	r3, #1
 800a7ea:	4652      	mov	r2, sl
 800a7ec:	4641      	mov	r1, r8
 800a7ee:	4638      	mov	r0, r7
 800a7f0:	47c8      	blx	r9
 800a7f2:	3001      	adds	r0, #1
 800a7f4:	d103      	bne.n	800a7fe <_printf_common+0xb6>
 800a7f6:	f04f 30ff 	mov.w	r0, #4294967295
 800a7fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7fe:	3501      	adds	r5, #1
 800a800:	e7c1      	b.n	800a786 <_printf_common+0x3e>
 800a802:	18e1      	adds	r1, r4, r3
 800a804:	1c5a      	adds	r2, r3, #1
 800a806:	2030      	movs	r0, #48	@ 0x30
 800a808:	3302      	adds	r3, #2
 800a80a:	4422      	add	r2, r4
 800a80c:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a810:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a814:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a818:	e7c2      	b.n	800a7a0 <_printf_common+0x58>
 800a81a:	2301      	movs	r3, #1
 800a81c:	4622      	mov	r2, r4
 800a81e:	4641      	mov	r1, r8
 800a820:	4638      	mov	r0, r7
 800a822:	47c8      	blx	r9
 800a824:	3001      	adds	r0, #1
 800a826:	d0e6      	beq.n	800a7f6 <_printf_common+0xae>
 800a828:	3601      	adds	r6, #1
 800a82a:	e7d9      	b.n	800a7e0 <_printf_common+0x98>

0800a82c <_printf_i>:
 800a82c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a830:	7e0f      	ldrb	r7, [r1, #24]
 800a832:	4691      	mov	r9, r2
 800a834:	4680      	mov	r8, r0
 800a836:	460c      	mov	r4, r1
 800a838:	2f78      	cmp	r7, #120	@ 0x78
 800a83a:	469a      	mov	sl, r3
 800a83c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a83e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a842:	d807      	bhi.n	800a854 <_printf_i+0x28>
 800a844:	2f62      	cmp	r7, #98	@ 0x62
 800a846:	d80a      	bhi.n	800a85e <_printf_i+0x32>
 800a848:	2f00      	cmp	r7, #0
 800a84a:	f000 80d2 	beq.w	800a9f2 <_printf_i+0x1c6>
 800a84e:	2f58      	cmp	r7, #88	@ 0x58
 800a850:	f000 80b9 	beq.w	800a9c6 <_printf_i+0x19a>
 800a854:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a858:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a85c:	e03a      	b.n	800a8d4 <_printf_i+0xa8>
 800a85e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a862:	2b15      	cmp	r3, #21
 800a864:	d8f6      	bhi.n	800a854 <_printf_i+0x28>
 800a866:	a101      	add	r1, pc, #4	@ (adr r1, 800a86c <_printf_i+0x40>)
 800a868:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a86c:	0800a8c5 	.word	0x0800a8c5
 800a870:	0800a8d9 	.word	0x0800a8d9
 800a874:	0800a855 	.word	0x0800a855
 800a878:	0800a855 	.word	0x0800a855
 800a87c:	0800a855 	.word	0x0800a855
 800a880:	0800a855 	.word	0x0800a855
 800a884:	0800a8d9 	.word	0x0800a8d9
 800a888:	0800a855 	.word	0x0800a855
 800a88c:	0800a855 	.word	0x0800a855
 800a890:	0800a855 	.word	0x0800a855
 800a894:	0800a855 	.word	0x0800a855
 800a898:	0800a9d9 	.word	0x0800a9d9
 800a89c:	0800a903 	.word	0x0800a903
 800a8a0:	0800a993 	.word	0x0800a993
 800a8a4:	0800a855 	.word	0x0800a855
 800a8a8:	0800a855 	.word	0x0800a855
 800a8ac:	0800a9fb 	.word	0x0800a9fb
 800a8b0:	0800a855 	.word	0x0800a855
 800a8b4:	0800a903 	.word	0x0800a903
 800a8b8:	0800a855 	.word	0x0800a855
 800a8bc:	0800a855 	.word	0x0800a855
 800a8c0:	0800a99b 	.word	0x0800a99b
 800a8c4:	6833      	ldr	r3, [r6, #0]
 800a8c6:	1d1a      	adds	r2, r3, #4
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	6032      	str	r2, [r6, #0]
 800a8cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a8d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a8d4:	2301      	movs	r3, #1
 800a8d6:	e09d      	b.n	800aa14 <_printf_i+0x1e8>
 800a8d8:	6833      	ldr	r3, [r6, #0]
 800a8da:	6820      	ldr	r0, [r4, #0]
 800a8dc:	1d19      	adds	r1, r3, #4
 800a8de:	6031      	str	r1, [r6, #0]
 800a8e0:	0606      	lsls	r6, r0, #24
 800a8e2:	d501      	bpl.n	800a8e8 <_printf_i+0xbc>
 800a8e4:	681d      	ldr	r5, [r3, #0]
 800a8e6:	e003      	b.n	800a8f0 <_printf_i+0xc4>
 800a8e8:	0645      	lsls	r5, r0, #25
 800a8ea:	d5fb      	bpl.n	800a8e4 <_printf_i+0xb8>
 800a8ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a8f0:	2d00      	cmp	r5, #0
 800a8f2:	da03      	bge.n	800a8fc <_printf_i+0xd0>
 800a8f4:	232d      	movs	r3, #45	@ 0x2d
 800a8f6:	426d      	negs	r5, r5
 800a8f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a8fc:	4859      	ldr	r0, [pc, #356]	@ (800aa64 <_printf_i+0x238>)
 800a8fe:	230a      	movs	r3, #10
 800a900:	e011      	b.n	800a926 <_printf_i+0xfa>
 800a902:	6821      	ldr	r1, [r4, #0]
 800a904:	6833      	ldr	r3, [r6, #0]
 800a906:	0608      	lsls	r0, r1, #24
 800a908:	f853 5b04 	ldr.w	r5, [r3], #4
 800a90c:	d402      	bmi.n	800a914 <_printf_i+0xe8>
 800a90e:	0649      	lsls	r1, r1, #25
 800a910:	bf48      	it	mi
 800a912:	b2ad      	uxthmi	r5, r5
 800a914:	2f6f      	cmp	r7, #111	@ 0x6f
 800a916:	6033      	str	r3, [r6, #0]
 800a918:	4852      	ldr	r0, [pc, #328]	@ (800aa64 <_printf_i+0x238>)
 800a91a:	bf14      	ite	ne
 800a91c:	230a      	movne	r3, #10
 800a91e:	2308      	moveq	r3, #8
 800a920:	2100      	movs	r1, #0
 800a922:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a926:	6866      	ldr	r6, [r4, #4]
 800a928:	2e00      	cmp	r6, #0
 800a92a:	60a6      	str	r6, [r4, #8]
 800a92c:	bfa2      	ittt	ge
 800a92e:	6821      	ldrge	r1, [r4, #0]
 800a930:	f021 0104 	bicge.w	r1, r1, #4
 800a934:	6021      	strge	r1, [r4, #0]
 800a936:	b90d      	cbnz	r5, 800a93c <_printf_i+0x110>
 800a938:	2e00      	cmp	r6, #0
 800a93a:	d04b      	beq.n	800a9d4 <_printf_i+0x1a8>
 800a93c:	4616      	mov	r6, r2
 800a93e:	fbb5 f1f3 	udiv	r1, r5, r3
 800a942:	fb03 5711 	mls	r7, r3, r1, r5
 800a946:	5dc7      	ldrb	r7, [r0, r7]
 800a948:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a94c:	462f      	mov	r7, r5
 800a94e:	460d      	mov	r5, r1
 800a950:	42bb      	cmp	r3, r7
 800a952:	d9f4      	bls.n	800a93e <_printf_i+0x112>
 800a954:	2b08      	cmp	r3, #8
 800a956:	d10b      	bne.n	800a970 <_printf_i+0x144>
 800a958:	6823      	ldr	r3, [r4, #0]
 800a95a:	07df      	lsls	r7, r3, #31
 800a95c:	d508      	bpl.n	800a970 <_printf_i+0x144>
 800a95e:	6923      	ldr	r3, [r4, #16]
 800a960:	6861      	ldr	r1, [r4, #4]
 800a962:	4299      	cmp	r1, r3
 800a964:	bfde      	ittt	le
 800a966:	2330      	movle	r3, #48	@ 0x30
 800a968:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a96c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a970:	1b92      	subs	r2, r2, r6
 800a972:	6122      	str	r2, [r4, #16]
 800a974:	464b      	mov	r3, r9
 800a976:	aa03      	add	r2, sp, #12
 800a978:	4621      	mov	r1, r4
 800a97a:	4640      	mov	r0, r8
 800a97c:	f8cd a000 	str.w	sl, [sp]
 800a980:	f7ff fee2 	bl	800a748 <_printf_common>
 800a984:	3001      	adds	r0, #1
 800a986:	d14a      	bne.n	800aa1e <_printf_i+0x1f2>
 800a988:	f04f 30ff 	mov.w	r0, #4294967295
 800a98c:	b004      	add	sp, #16
 800a98e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a992:	6823      	ldr	r3, [r4, #0]
 800a994:	f043 0320 	orr.w	r3, r3, #32
 800a998:	6023      	str	r3, [r4, #0]
 800a99a:	2778      	movs	r7, #120	@ 0x78
 800a99c:	4832      	ldr	r0, [pc, #200]	@ (800aa68 <_printf_i+0x23c>)
 800a99e:	6823      	ldr	r3, [r4, #0]
 800a9a0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a9a4:	061f      	lsls	r7, r3, #24
 800a9a6:	6831      	ldr	r1, [r6, #0]
 800a9a8:	f851 5b04 	ldr.w	r5, [r1], #4
 800a9ac:	d402      	bmi.n	800a9b4 <_printf_i+0x188>
 800a9ae:	065f      	lsls	r7, r3, #25
 800a9b0:	bf48      	it	mi
 800a9b2:	b2ad      	uxthmi	r5, r5
 800a9b4:	6031      	str	r1, [r6, #0]
 800a9b6:	07d9      	lsls	r1, r3, #31
 800a9b8:	bf44      	itt	mi
 800a9ba:	f043 0320 	orrmi.w	r3, r3, #32
 800a9be:	6023      	strmi	r3, [r4, #0]
 800a9c0:	b11d      	cbz	r5, 800a9ca <_printf_i+0x19e>
 800a9c2:	2310      	movs	r3, #16
 800a9c4:	e7ac      	b.n	800a920 <_printf_i+0xf4>
 800a9c6:	4827      	ldr	r0, [pc, #156]	@ (800aa64 <_printf_i+0x238>)
 800a9c8:	e7e9      	b.n	800a99e <_printf_i+0x172>
 800a9ca:	6823      	ldr	r3, [r4, #0]
 800a9cc:	f023 0320 	bic.w	r3, r3, #32
 800a9d0:	6023      	str	r3, [r4, #0]
 800a9d2:	e7f6      	b.n	800a9c2 <_printf_i+0x196>
 800a9d4:	4616      	mov	r6, r2
 800a9d6:	e7bd      	b.n	800a954 <_printf_i+0x128>
 800a9d8:	6833      	ldr	r3, [r6, #0]
 800a9da:	6825      	ldr	r5, [r4, #0]
 800a9dc:	1d18      	adds	r0, r3, #4
 800a9de:	6961      	ldr	r1, [r4, #20]
 800a9e0:	6030      	str	r0, [r6, #0]
 800a9e2:	062e      	lsls	r6, r5, #24
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	d501      	bpl.n	800a9ec <_printf_i+0x1c0>
 800a9e8:	6019      	str	r1, [r3, #0]
 800a9ea:	e002      	b.n	800a9f2 <_printf_i+0x1c6>
 800a9ec:	0668      	lsls	r0, r5, #25
 800a9ee:	d5fb      	bpl.n	800a9e8 <_printf_i+0x1bc>
 800a9f0:	8019      	strh	r1, [r3, #0]
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	4616      	mov	r6, r2
 800a9f6:	6123      	str	r3, [r4, #16]
 800a9f8:	e7bc      	b.n	800a974 <_printf_i+0x148>
 800a9fa:	6833      	ldr	r3, [r6, #0]
 800a9fc:	2100      	movs	r1, #0
 800a9fe:	1d1a      	adds	r2, r3, #4
 800aa00:	6032      	str	r2, [r6, #0]
 800aa02:	681e      	ldr	r6, [r3, #0]
 800aa04:	6862      	ldr	r2, [r4, #4]
 800aa06:	4630      	mov	r0, r6
 800aa08:	f000 f9b4 	bl	800ad74 <memchr>
 800aa0c:	b108      	cbz	r0, 800aa12 <_printf_i+0x1e6>
 800aa0e:	1b80      	subs	r0, r0, r6
 800aa10:	6060      	str	r0, [r4, #4]
 800aa12:	6863      	ldr	r3, [r4, #4]
 800aa14:	6123      	str	r3, [r4, #16]
 800aa16:	2300      	movs	r3, #0
 800aa18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aa1c:	e7aa      	b.n	800a974 <_printf_i+0x148>
 800aa1e:	6923      	ldr	r3, [r4, #16]
 800aa20:	4632      	mov	r2, r6
 800aa22:	4649      	mov	r1, r9
 800aa24:	4640      	mov	r0, r8
 800aa26:	47d0      	blx	sl
 800aa28:	3001      	adds	r0, #1
 800aa2a:	d0ad      	beq.n	800a988 <_printf_i+0x15c>
 800aa2c:	6823      	ldr	r3, [r4, #0]
 800aa2e:	079b      	lsls	r3, r3, #30
 800aa30:	d413      	bmi.n	800aa5a <_printf_i+0x22e>
 800aa32:	68e0      	ldr	r0, [r4, #12]
 800aa34:	9b03      	ldr	r3, [sp, #12]
 800aa36:	4298      	cmp	r0, r3
 800aa38:	bfb8      	it	lt
 800aa3a:	4618      	movlt	r0, r3
 800aa3c:	e7a6      	b.n	800a98c <_printf_i+0x160>
 800aa3e:	2301      	movs	r3, #1
 800aa40:	4632      	mov	r2, r6
 800aa42:	4649      	mov	r1, r9
 800aa44:	4640      	mov	r0, r8
 800aa46:	47d0      	blx	sl
 800aa48:	3001      	adds	r0, #1
 800aa4a:	d09d      	beq.n	800a988 <_printf_i+0x15c>
 800aa4c:	3501      	adds	r5, #1
 800aa4e:	68e3      	ldr	r3, [r4, #12]
 800aa50:	9903      	ldr	r1, [sp, #12]
 800aa52:	1a5b      	subs	r3, r3, r1
 800aa54:	42ab      	cmp	r3, r5
 800aa56:	dcf2      	bgt.n	800aa3e <_printf_i+0x212>
 800aa58:	e7eb      	b.n	800aa32 <_printf_i+0x206>
 800aa5a:	2500      	movs	r5, #0
 800aa5c:	f104 0619 	add.w	r6, r4, #25
 800aa60:	e7f5      	b.n	800aa4e <_printf_i+0x222>
 800aa62:	bf00      	nop
 800aa64:	0800afb5 	.word	0x0800afb5
 800aa68:	0800afc6 	.word	0x0800afc6

0800aa6c <__sflush_r>:
 800aa6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aa70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa74:	0716      	lsls	r6, r2, #28
 800aa76:	4605      	mov	r5, r0
 800aa78:	460c      	mov	r4, r1
 800aa7a:	d454      	bmi.n	800ab26 <__sflush_r+0xba>
 800aa7c:	684b      	ldr	r3, [r1, #4]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	dc02      	bgt.n	800aa88 <__sflush_r+0x1c>
 800aa82:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	dd48      	ble.n	800ab1a <__sflush_r+0xae>
 800aa88:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aa8a:	2e00      	cmp	r6, #0
 800aa8c:	d045      	beq.n	800ab1a <__sflush_r+0xae>
 800aa8e:	2300      	movs	r3, #0
 800aa90:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800aa94:	682f      	ldr	r7, [r5, #0]
 800aa96:	6a21      	ldr	r1, [r4, #32]
 800aa98:	602b      	str	r3, [r5, #0]
 800aa9a:	d030      	beq.n	800aafe <__sflush_r+0x92>
 800aa9c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800aa9e:	89a3      	ldrh	r3, [r4, #12]
 800aaa0:	0759      	lsls	r1, r3, #29
 800aaa2:	d505      	bpl.n	800aab0 <__sflush_r+0x44>
 800aaa4:	6863      	ldr	r3, [r4, #4]
 800aaa6:	1ad2      	subs	r2, r2, r3
 800aaa8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800aaaa:	b10b      	cbz	r3, 800aab0 <__sflush_r+0x44>
 800aaac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800aaae:	1ad2      	subs	r2, r2, r3
 800aab0:	2300      	movs	r3, #0
 800aab2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aab4:	6a21      	ldr	r1, [r4, #32]
 800aab6:	4628      	mov	r0, r5
 800aab8:	47b0      	blx	r6
 800aaba:	1c43      	adds	r3, r0, #1
 800aabc:	89a3      	ldrh	r3, [r4, #12]
 800aabe:	d106      	bne.n	800aace <__sflush_r+0x62>
 800aac0:	6829      	ldr	r1, [r5, #0]
 800aac2:	291d      	cmp	r1, #29
 800aac4:	d82b      	bhi.n	800ab1e <__sflush_r+0xb2>
 800aac6:	4a2a      	ldr	r2, [pc, #168]	@ (800ab70 <__sflush_r+0x104>)
 800aac8:	410a      	asrs	r2, r1
 800aaca:	07d6      	lsls	r6, r2, #31
 800aacc:	d427      	bmi.n	800ab1e <__sflush_r+0xb2>
 800aace:	2200      	movs	r2, #0
 800aad0:	04d9      	lsls	r1, r3, #19
 800aad2:	6062      	str	r2, [r4, #4]
 800aad4:	6922      	ldr	r2, [r4, #16]
 800aad6:	6022      	str	r2, [r4, #0]
 800aad8:	d504      	bpl.n	800aae4 <__sflush_r+0x78>
 800aada:	1c42      	adds	r2, r0, #1
 800aadc:	d101      	bne.n	800aae2 <__sflush_r+0x76>
 800aade:	682b      	ldr	r3, [r5, #0]
 800aae0:	b903      	cbnz	r3, 800aae4 <__sflush_r+0x78>
 800aae2:	6560      	str	r0, [r4, #84]	@ 0x54
 800aae4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aae6:	602f      	str	r7, [r5, #0]
 800aae8:	b1b9      	cbz	r1, 800ab1a <__sflush_r+0xae>
 800aaea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aaee:	4299      	cmp	r1, r3
 800aaf0:	d002      	beq.n	800aaf8 <__sflush_r+0x8c>
 800aaf2:	4628      	mov	r0, r5
 800aaf4:	f7ff fbee 	bl	800a2d4 <_free_r>
 800aaf8:	2300      	movs	r3, #0
 800aafa:	6363      	str	r3, [r4, #52]	@ 0x34
 800aafc:	e00d      	b.n	800ab1a <__sflush_r+0xae>
 800aafe:	2301      	movs	r3, #1
 800ab00:	4628      	mov	r0, r5
 800ab02:	47b0      	blx	r6
 800ab04:	4602      	mov	r2, r0
 800ab06:	1c50      	adds	r0, r2, #1
 800ab08:	d1c9      	bne.n	800aa9e <__sflush_r+0x32>
 800ab0a:	682b      	ldr	r3, [r5, #0]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d0c6      	beq.n	800aa9e <__sflush_r+0x32>
 800ab10:	2b1d      	cmp	r3, #29
 800ab12:	d001      	beq.n	800ab18 <__sflush_r+0xac>
 800ab14:	2b16      	cmp	r3, #22
 800ab16:	d11d      	bne.n	800ab54 <__sflush_r+0xe8>
 800ab18:	602f      	str	r7, [r5, #0]
 800ab1a:	2000      	movs	r0, #0
 800ab1c:	e021      	b.n	800ab62 <__sflush_r+0xf6>
 800ab1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab22:	b21b      	sxth	r3, r3
 800ab24:	e01a      	b.n	800ab5c <__sflush_r+0xf0>
 800ab26:	690f      	ldr	r7, [r1, #16]
 800ab28:	2f00      	cmp	r7, #0
 800ab2a:	d0f6      	beq.n	800ab1a <__sflush_r+0xae>
 800ab2c:	0793      	lsls	r3, r2, #30
 800ab2e:	680e      	ldr	r6, [r1, #0]
 800ab30:	600f      	str	r7, [r1, #0]
 800ab32:	bf0c      	ite	eq
 800ab34:	694b      	ldreq	r3, [r1, #20]
 800ab36:	2300      	movne	r3, #0
 800ab38:	eba6 0807 	sub.w	r8, r6, r7
 800ab3c:	608b      	str	r3, [r1, #8]
 800ab3e:	f1b8 0f00 	cmp.w	r8, #0
 800ab42:	ddea      	ble.n	800ab1a <__sflush_r+0xae>
 800ab44:	4643      	mov	r3, r8
 800ab46:	463a      	mov	r2, r7
 800ab48:	6a21      	ldr	r1, [r4, #32]
 800ab4a:	4628      	mov	r0, r5
 800ab4c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ab4e:	47b0      	blx	r6
 800ab50:	2800      	cmp	r0, #0
 800ab52:	dc08      	bgt.n	800ab66 <__sflush_r+0xfa>
 800ab54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ab60:	81a3      	strh	r3, [r4, #12]
 800ab62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab66:	4407      	add	r7, r0
 800ab68:	eba8 0800 	sub.w	r8, r8, r0
 800ab6c:	e7e7      	b.n	800ab3e <__sflush_r+0xd2>
 800ab6e:	bf00      	nop
 800ab70:	dfbffffe 	.word	0xdfbffffe

0800ab74 <_fflush_r>:
 800ab74:	b538      	push	{r3, r4, r5, lr}
 800ab76:	690b      	ldr	r3, [r1, #16]
 800ab78:	4605      	mov	r5, r0
 800ab7a:	460c      	mov	r4, r1
 800ab7c:	b913      	cbnz	r3, 800ab84 <_fflush_r+0x10>
 800ab7e:	2500      	movs	r5, #0
 800ab80:	4628      	mov	r0, r5
 800ab82:	bd38      	pop	{r3, r4, r5, pc}
 800ab84:	b118      	cbz	r0, 800ab8e <_fflush_r+0x1a>
 800ab86:	6a03      	ldr	r3, [r0, #32]
 800ab88:	b90b      	cbnz	r3, 800ab8e <_fflush_r+0x1a>
 800ab8a:	f7ff fa93 	bl	800a0b4 <__sinit>
 800ab8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d0f3      	beq.n	800ab7e <_fflush_r+0xa>
 800ab96:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ab98:	07d0      	lsls	r0, r2, #31
 800ab9a:	d404      	bmi.n	800aba6 <_fflush_r+0x32>
 800ab9c:	0599      	lsls	r1, r3, #22
 800ab9e:	d402      	bmi.n	800aba6 <_fflush_r+0x32>
 800aba0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aba2:	f7ff fb94 	bl	800a2ce <__retarget_lock_acquire_recursive>
 800aba6:	4628      	mov	r0, r5
 800aba8:	4621      	mov	r1, r4
 800abaa:	f7ff ff5f 	bl	800aa6c <__sflush_r>
 800abae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800abb0:	4605      	mov	r5, r0
 800abb2:	07da      	lsls	r2, r3, #31
 800abb4:	d4e4      	bmi.n	800ab80 <_fflush_r+0xc>
 800abb6:	89a3      	ldrh	r3, [r4, #12]
 800abb8:	059b      	lsls	r3, r3, #22
 800abba:	d4e1      	bmi.n	800ab80 <_fflush_r+0xc>
 800abbc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800abbe:	f7ff fb87 	bl	800a2d0 <__retarget_lock_release_recursive>
 800abc2:	e7dd      	b.n	800ab80 <_fflush_r+0xc>

0800abc4 <_putc_r>:
 800abc4:	b570      	push	{r4, r5, r6, lr}
 800abc6:	460d      	mov	r5, r1
 800abc8:	4614      	mov	r4, r2
 800abca:	4606      	mov	r6, r0
 800abcc:	b118      	cbz	r0, 800abd6 <_putc_r+0x12>
 800abce:	6a03      	ldr	r3, [r0, #32]
 800abd0:	b90b      	cbnz	r3, 800abd6 <_putc_r+0x12>
 800abd2:	f7ff fa6f 	bl	800a0b4 <__sinit>
 800abd6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800abd8:	07d8      	lsls	r0, r3, #31
 800abda:	d405      	bmi.n	800abe8 <_putc_r+0x24>
 800abdc:	89a3      	ldrh	r3, [r4, #12]
 800abde:	0599      	lsls	r1, r3, #22
 800abe0:	d402      	bmi.n	800abe8 <_putc_r+0x24>
 800abe2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800abe4:	f7ff fb73 	bl	800a2ce <__retarget_lock_acquire_recursive>
 800abe8:	68a3      	ldr	r3, [r4, #8]
 800abea:	3b01      	subs	r3, #1
 800abec:	2b00      	cmp	r3, #0
 800abee:	60a3      	str	r3, [r4, #8]
 800abf0:	da05      	bge.n	800abfe <_putc_r+0x3a>
 800abf2:	69a2      	ldr	r2, [r4, #24]
 800abf4:	4293      	cmp	r3, r2
 800abf6:	db12      	blt.n	800ac1e <_putc_r+0x5a>
 800abf8:	b2eb      	uxtb	r3, r5
 800abfa:	2b0a      	cmp	r3, #10
 800abfc:	d00f      	beq.n	800ac1e <_putc_r+0x5a>
 800abfe:	6823      	ldr	r3, [r4, #0]
 800ac00:	1c5a      	adds	r2, r3, #1
 800ac02:	6022      	str	r2, [r4, #0]
 800ac04:	701d      	strb	r5, [r3, #0]
 800ac06:	b2ed      	uxtb	r5, r5
 800ac08:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ac0a:	07da      	lsls	r2, r3, #31
 800ac0c:	d405      	bmi.n	800ac1a <_putc_r+0x56>
 800ac0e:	89a3      	ldrh	r3, [r4, #12]
 800ac10:	059b      	lsls	r3, r3, #22
 800ac12:	d402      	bmi.n	800ac1a <_putc_r+0x56>
 800ac14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ac16:	f7ff fb5b 	bl	800a2d0 <__retarget_lock_release_recursive>
 800ac1a:	4628      	mov	r0, r5
 800ac1c:	bd70      	pop	{r4, r5, r6, pc}
 800ac1e:	4629      	mov	r1, r5
 800ac20:	4622      	mov	r2, r4
 800ac22:	4630      	mov	r0, r6
 800ac24:	f000 f802 	bl	800ac2c <__swbuf_r>
 800ac28:	4605      	mov	r5, r0
 800ac2a:	e7ed      	b.n	800ac08 <_putc_r+0x44>

0800ac2c <__swbuf_r>:
 800ac2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac2e:	460e      	mov	r6, r1
 800ac30:	4614      	mov	r4, r2
 800ac32:	4605      	mov	r5, r0
 800ac34:	b118      	cbz	r0, 800ac3e <__swbuf_r+0x12>
 800ac36:	6a03      	ldr	r3, [r0, #32]
 800ac38:	b90b      	cbnz	r3, 800ac3e <__swbuf_r+0x12>
 800ac3a:	f7ff fa3b 	bl	800a0b4 <__sinit>
 800ac3e:	69a3      	ldr	r3, [r4, #24]
 800ac40:	60a3      	str	r3, [r4, #8]
 800ac42:	89a3      	ldrh	r3, [r4, #12]
 800ac44:	071a      	lsls	r2, r3, #28
 800ac46:	d501      	bpl.n	800ac4c <__swbuf_r+0x20>
 800ac48:	6923      	ldr	r3, [r4, #16]
 800ac4a:	b943      	cbnz	r3, 800ac5e <__swbuf_r+0x32>
 800ac4c:	4621      	mov	r1, r4
 800ac4e:	4628      	mov	r0, r5
 800ac50:	f000 f82a 	bl	800aca8 <__swsetup_r>
 800ac54:	b118      	cbz	r0, 800ac5e <__swbuf_r+0x32>
 800ac56:	f04f 37ff 	mov.w	r7, #4294967295
 800ac5a:	4638      	mov	r0, r7
 800ac5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac5e:	6823      	ldr	r3, [r4, #0]
 800ac60:	b2f6      	uxtb	r6, r6
 800ac62:	6922      	ldr	r2, [r4, #16]
 800ac64:	4637      	mov	r7, r6
 800ac66:	1a98      	subs	r0, r3, r2
 800ac68:	6963      	ldr	r3, [r4, #20]
 800ac6a:	4283      	cmp	r3, r0
 800ac6c:	dc05      	bgt.n	800ac7a <__swbuf_r+0x4e>
 800ac6e:	4621      	mov	r1, r4
 800ac70:	4628      	mov	r0, r5
 800ac72:	f7ff ff7f 	bl	800ab74 <_fflush_r>
 800ac76:	2800      	cmp	r0, #0
 800ac78:	d1ed      	bne.n	800ac56 <__swbuf_r+0x2a>
 800ac7a:	68a3      	ldr	r3, [r4, #8]
 800ac7c:	3b01      	subs	r3, #1
 800ac7e:	60a3      	str	r3, [r4, #8]
 800ac80:	6823      	ldr	r3, [r4, #0]
 800ac82:	1c5a      	adds	r2, r3, #1
 800ac84:	6022      	str	r2, [r4, #0]
 800ac86:	701e      	strb	r6, [r3, #0]
 800ac88:	1c43      	adds	r3, r0, #1
 800ac8a:	6962      	ldr	r2, [r4, #20]
 800ac8c:	429a      	cmp	r2, r3
 800ac8e:	d004      	beq.n	800ac9a <__swbuf_r+0x6e>
 800ac90:	89a3      	ldrh	r3, [r4, #12]
 800ac92:	07db      	lsls	r3, r3, #31
 800ac94:	d5e1      	bpl.n	800ac5a <__swbuf_r+0x2e>
 800ac96:	2e0a      	cmp	r6, #10
 800ac98:	d1df      	bne.n	800ac5a <__swbuf_r+0x2e>
 800ac9a:	4621      	mov	r1, r4
 800ac9c:	4628      	mov	r0, r5
 800ac9e:	f7ff ff69 	bl	800ab74 <_fflush_r>
 800aca2:	2800      	cmp	r0, #0
 800aca4:	d0d9      	beq.n	800ac5a <__swbuf_r+0x2e>
 800aca6:	e7d6      	b.n	800ac56 <__swbuf_r+0x2a>

0800aca8 <__swsetup_r>:
 800aca8:	b538      	push	{r3, r4, r5, lr}
 800acaa:	4b29      	ldr	r3, [pc, #164]	@ (800ad50 <__swsetup_r+0xa8>)
 800acac:	4605      	mov	r5, r0
 800acae:	460c      	mov	r4, r1
 800acb0:	6818      	ldr	r0, [r3, #0]
 800acb2:	b118      	cbz	r0, 800acbc <__swsetup_r+0x14>
 800acb4:	6a03      	ldr	r3, [r0, #32]
 800acb6:	b90b      	cbnz	r3, 800acbc <__swsetup_r+0x14>
 800acb8:	f7ff f9fc 	bl	800a0b4 <__sinit>
 800acbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acc0:	0719      	lsls	r1, r3, #28
 800acc2:	d422      	bmi.n	800ad0a <__swsetup_r+0x62>
 800acc4:	06da      	lsls	r2, r3, #27
 800acc6:	d407      	bmi.n	800acd8 <__swsetup_r+0x30>
 800acc8:	2209      	movs	r2, #9
 800acca:	602a      	str	r2, [r5, #0]
 800accc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800acd0:	f04f 30ff 	mov.w	r0, #4294967295
 800acd4:	81a3      	strh	r3, [r4, #12]
 800acd6:	e033      	b.n	800ad40 <__swsetup_r+0x98>
 800acd8:	0758      	lsls	r0, r3, #29
 800acda:	d512      	bpl.n	800ad02 <__swsetup_r+0x5a>
 800acdc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800acde:	b141      	cbz	r1, 800acf2 <__swsetup_r+0x4a>
 800ace0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ace4:	4299      	cmp	r1, r3
 800ace6:	d002      	beq.n	800acee <__swsetup_r+0x46>
 800ace8:	4628      	mov	r0, r5
 800acea:	f7ff faf3 	bl	800a2d4 <_free_r>
 800acee:	2300      	movs	r3, #0
 800acf0:	6363      	str	r3, [r4, #52]	@ 0x34
 800acf2:	89a3      	ldrh	r3, [r4, #12]
 800acf4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800acf8:	81a3      	strh	r3, [r4, #12]
 800acfa:	2300      	movs	r3, #0
 800acfc:	6063      	str	r3, [r4, #4]
 800acfe:	6923      	ldr	r3, [r4, #16]
 800ad00:	6023      	str	r3, [r4, #0]
 800ad02:	89a3      	ldrh	r3, [r4, #12]
 800ad04:	f043 0308 	orr.w	r3, r3, #8
 800ad08:	81a3      	strh	r3, [r4, #12]
 800ad0a:	6923      	ldr	r3, [r4, #16]
 800ad0c:	b94b      	cbnz	r3, 800ad22 <__swsetup_r+0x7a>
 800ad0e:	89a3      	ldrh	r3, [r4, #12]
 800ad10:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ad14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad18:	d003      	beq.n	800ad22 <__swsetup_r+0x7a>
 800ad1a:	4621      	mov	r1, r4
 800ad1c:	4628      	mov	r0, r5
 800ad1e:	f000 f85c 	bl	800adda <__smakebuf_r>
 800ad22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad26:	f013 0201 	ands.w	r2, r3, #1
 800ad2a:	d00a      	beq.n	800ad42 <__swsetup_r+0x9a>
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	60a2      	str	r2, [r4, #8]
 800ad30:	6962      	ldr	r2, [r4, #20]
 800ad32:	4252      	negs	r2, r2
 800ad34:	61a2      	str	r2, [r4, #24]
 800ad36:	6922      	ldr	r2, [r4, #16]
 800ad38:	b942      	cbnz	r2, 800ad4c <__swsetup_r+0xa4>
 800ad3a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ad3e:	d1c5      	bne.n	800accc <__swsetup_r+0x24>
 800ad40:	bd38      	pop	{r3, r4, r5, pc}
 800ad42:	0799      	lsls	r1, r3, #30
 800ad44:	bf58      	it	pl
 800ad46:	6962      	ldrpl	r2, [r4, #20]
 800ad48:	60a2      	str	r2, [r4, #8]
 800ad4a:	e7f4      	b.n	800ad36 <__swsetup_r+0x8e>
 800ad4c:	2000      	movs	r0, #0
 800ad4e:	e7f7      	b.n	800ad40 <__swsetup_r+0x98>
 800ad50:	20000114 	.word	0x20000114

0800ad54 <_sbrk_r>:
 800ad54:	b538      	push	{r3, r4, r5, lr}
 800ad56:	2300      	movs	r3, #0
 800ad58:	4d05      	ldr	r5, [pc, #20]	@ (800ad70 <_sbrk_r+0x1c>)
 800ad5a:	4604      	mov	r4, r0
 800ad5c:	4608      	mov	r0, r1
 800ad5e:	602b      	str	r3, [r5, #0]
 800ad60:	f7f5 fe40 	bl	80009e4 <_sbrk>
 800ad64:	1c43      	adds	r3, r0, #1
 800ad66:	d102      	bne.n	800ad6e <_sbrk_r+0x1a>
 800ad68:	682b      	ldr	r3, [r5, #0]
 800ad6a:	b103      	cbz	r3, 800ad6e <_sbrk_r+0x1a>
 800ad6c:	6023      	str	r3, [r4, #0]
 800ad6e:	bd38      	pop	{r3, r4, r5, pc}
 800ad70:	20000aa8 	.word	0x20000aa8

0800ad74 <memchr>:
 800ad74:	b2c9      	uxtb	r1, r1
 800ad76:	4603      	mov	r3, r0
 800ad78:	4402      	add	r2, r0
 800ad7a:	b510      	push	{r4, lr}
 800ad7c:	4293      	cmp	r3, r2
 800ad7e:	4618      	mov	r0, r3
 800ad80:	d101      	bne.n	800ad86 <memchr+0x12>
 800ad82:	2000      	movs	r0, #0
 800ad84:	e003      	b.n	800ad8e <memchr+0x1a>
 800ad86:	7804      	ldrb	r4, [r0, #0]
 800ad88:	3301      	adds	r3, #1
 800ad8a:	428c      	cmp	r4, r1
 800ad8c:	d1f6      	bne.n	800ad7c <memchr+0x8>
 800ad8e:	bd10      	pop	{r4, pc}

0800ad90 <__swhatbuf_r>:
 800ad90:	b570      	push	{r4, r5, r6, lr}
 800ad92:	460c      	mov	r4, r1
 800ad94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad98:	b096      	sub	sp, #88	@ 0x58
 800ad9a:	4615      	mov	r5, r2
 800ad9c:	2900      	cmp	r1, #0
 800ad9e:	461e      	mov	r6, r3
 800ada0:	da0c      	bge.n	800adbc <__swhatbuf_r+0x2c>
 800ada2:	89a3      	ldrh	r3, [r4, #12]
 800ada4:	2100      	movs	r1, #0
 800ada6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800adaa:	bf14      	ite	ne
 800adac:	2340      	movne	r3, #64	@ 0x40
 800adae:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800adb2:	2000      	movs	r0, #0
 800adb4:	6031      	str	r1, [r6, #0]
 800adb6:	602b      	str	r3, [r5, #0]
 800adb8:	b016      	add	sp, #88	@ 0x58
 800adba:	bd70      	pop	{r4, r5, r6, pc}
 800adbc:	466a      	mov	r2, sp
 800adbe:	f000 f849 	bl	800ae54 <_fstat_r>
 800adc2:	2800      	cmp	r0, #0
 800adc4:	dbed      	blt.n	800ada2 <__swhatbuf_r+0x12>
 800adc6:	9901      	ldr	r1, [sp, #4]
 800adc8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800adcc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800add0:	4259      	negs	r1, r3
 800add2:	4159      	adcs	r1, r3
 800add4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800add8:	e7eb      	b.n	800adb2 <__swhatbuf_r+0x22>

0800adda <__smakebuf_r>:
 800adda:	898b      	ldrh	r3, [r1, #12]
 800addc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800adde:	079d      	lsls	r5, r3, #30
 800ade0:	4606      	mov	r6, r0
 800ade2:	460c      	mov	r4, r1
 800ade4:	d507      	bpl.n	800adf6 <__smakebuf_r+0x1c>
 800ade6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800adea:	6023      	str	r3, [r4, #0]
 800adec:	6123      	str	r3, [r4, #16]
 800adee:	2301      	movs	r3, #1
 800adf0:	6163      	str	r3, [r4, #20]
 800adf2:	b003      	add	sp, #12
 800adf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800adf6:	ab01      	add	r3, sp, #4
 800adf8:	466a      	mov	r2, sp
 800adfa:	f7ff ffc9 	bl	800ad90 <__swhatbuf_r>
 800adfe:	9f00      	ldr	r7, [sp, #0]
 800ae00:	4605      	mov	r5, r0
 800ae02:	4630      	mov	r0, r6
 800ae04:	4639      	mov	r1, r7
 800ae06:	f7ff fad1 	bl	800a3ac <_malloc_r>
 800ae0a:	b948      	cbnz	r0, 800ae20 <__smakebuf_r+0x46>
 800ae0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae10:	059a      	lsls	r2, r3, #22
 800ae12:	d4ee      	bmi.n	800adf2 <__smakebuf_r+0x18>
 800ae14:	f023 0303 	bic.w	r3, r3, #3
 800ae18:	f043 0302 	orr.w	r3, r3, #2
 800ae1c:	81a3      	strh	r3, [r4, #12]
 800ae1e:	e7e2      	b.n	800ade6 <__smakebuf_r+0xc>
 800ae20:	89a3      	ldrh	r3, [r4, #12]
 800ae22:	6020      	str	r0, [r4, #0]
 800ae24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae28:	81a3      	strh	r3, [r4, #12]
 800ae2a:	9b01      	ldr	r3, [sp, #4]
 800ae2c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ae30:	b15b      	cbz	r3, 800ae4a <__smakebuf_r+0x70>
 800ae32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae36:	4630      	mov	r0, r6
 800ae38:	f000 f81e 	bl	800ae78 <_isatty_r>
 800ae3c:	b128      	cbz	r0, 800ae4a <__smakebuf_r+0x70>
 800ae3e:	89a3      	ldrh	r3, [r4, #12]
 800ae40:	f023 0303 	bic.w	r3, r3, #3
 800ae44:	f043 0301 	orr.w	r3, r3, #1
 800ae48:	81a3      	strh	r3, [r4, #12]
 800ae4a:	89a3      	ldrh	r3, [r4, #12]
 800ae4c:	431d      	orrs	r5, r3
 800ae4e:	81a5      	strh	r5, [r4, #12]
 800ae50:	e7cf      	b.n	800adf2 <__smakebuf_r+0x18>
	...

0800ae54 <_fstat_r>:
 800ae54:	b538      	push	{r3, r4, r5, lr}
 800ae56:	2300      	movs	r3, #0
 800ae58:	4d06      	ldr	r5, [pc, #24]	@ (800ae74 <_fstat_r+0x20>)
 800ae5a:	4604      	mov	r4, r0
 800ae5c:	4608      	mov	r0, r1
 800ae5e:	4611      	mov	r1, r2
 800ae60:	602b      	str	r3, [r5, #0]
 800ae62:	f7f5 fd96 	bl	8000992 <_fstat>
 800ae66:	1c43      	adds	r3, r0, #1
 800ae68:	d102      	bne.n	800ae70 <_fstat_r+0x1c>
 800ae6a:	682b      	ldr	r3, [r5, #0]
 800ae6c:	b103      	cbz	r3, 800ae70 <_fstat_r+0x1c>
 800ae6e:	6023      	str	r3, [r4, #0]
 800ae70:	bd38      	pop	{r3, r4, r5, pc}
 800ae72:	bf00      	nop
 800ae74:	20000aa8 	.word	0x20000aa8

0800ae78 <_isatty_r>:
 800ae78:	b538      	push	{r3, r4, r5, lr}
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	4d05      	ldr	r5, [pc, #20]	@ (800ae94 <_isatty_r+0x1c>)
 800ae7e:	4604      	mov	r4, r0
 800ae80:	4608      	mov	r0, r1
 800ae82:	602b      	str	r3, [r5, #0]
 800ae84:	f7f5 fd95 	bl	80009b2 <_isatty>
 800ae88:	1c43      	adds	r3, r0, #1
 800ae8a:	d102      	bne.n	800ae92 <_isatty_r+0x1a>
 800ae8c:	682b      	ldr	r3, [r5, #0]
 800ae8e:	b103      	cbz	r3, 800ae92 <_isatty_r+0x1a>
 800ae90:	6023      	str	r3, [r4, #0]
 800ae92:	bd38      	pop	{r3, r4, r5, pc}
 800ae94:	20000aa8 	.word	0x20000aa8

0800ae98 <_init>:
 800ae98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae9a:	bf00      	nop
 800ae9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae9e:	bc08      	pop	{r3}
 800aea0:	469e      	mov	lr, r3
 800aea2:	4770      	bx	lr

0800aea4 <_fini>:
 800aea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aea6:	bf00      	nop
 800aea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aeaa:	bc08      	pop	{r3}
 800aeac:	469e      	mov	lr, r3
 800aeae:	4770      	bx	lr
