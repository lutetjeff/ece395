
rhipoff-main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000254  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c694  08000254  08000254  00001254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  0800c8e8  0800c8e8  0000d8e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca60  0800ca60  0000e1a0  2**0
                  CONTENTS
  4 .ARM          00000000  0800ca60  0800ca60  0000e1a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ca60  0800ca60  0000e1a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ca60  0800ca60  0000da60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ca64  0800ca64  0000da64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001a0  20000000  0800ca68  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c3c  200001a0  0800cc08  0000e1a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000d04  20000ddc  0800cc08  0000eddc  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000e1a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017b3b  00000000  00000000  0000e1d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003921  00000000  00000000  00025d11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001238  00000000  00000000  00029638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d93  00000000  00000000  0002a870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002dfc0  00000000  00000000  0002b603  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017660  00000000  00000000  000595c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00110844  00000000  00000000  00070c23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00181467  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005404  00000000  00000000  001814ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  001868b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000254 <__do_global_dtors_aux>:
 8000254:	b510      	push	{r4, lr}
 8000256:	4c05      	ldr	r4, [pc, #20]	@ (800026c <__do_global_dtors_aux+0x18>)
 8000258:	7823      	ldrb	r3, [r4, #0]
 800025a:	b933      	cbnz	r3, 800026a <__do_global_dtors_aux+0x16>
 800025c:	4b04      	ldr	r3, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x1c>)
 800025e:	b113      	cbz	r3, 8000266 <__do_global_dtors_aux+0x12>
 8000260:	4804      	ldr	r0, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x20>)
 8000262:	f3af 8000 	nop.w
 8000266:	2301      	movs	r3, #1
 8000268:	7023      	strb	r3, [r4, #0]
 800026a:	bd10      	pop	{r4, pc}
 800026c:	200001a0 	.word	0x200001a0
 8000270:	00000000 	.word	0x00000000
 8000274:	0800c8d0 	.word	0x0800c8d0

08000278 <frame_dummy>:
 8000278:	b508      	push	{r3, lr}
 800027a:	4b03      	ldr	r3, [pc, #12]	@ (8000288 <frame_dummy+0x10>)
 800027c:	b11b      	cbz	r3, 8000286 <frame_dummy+0xe>
 800027e:	4903      	ldr	r1, [pc, #12]	@ (800028c <frame_dummy+0x14>)
 8000280:	4803      	ldr	r0, [pc, #12]	@ (8000290 <frame_dummy+0x18>)
 8000282:	f3af 8000 	nop.w
 8000286:	bd08      	pop	{r3, pc}
 8000288:	00000000 	.word	0x00000000
 800028c:	200001a4 	.word	0x200001a4
 8000290:	0800c8d0 	.word	0x0800c8d0

08000294 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b082      	sub	sp, #8
 8000298:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800029a:	f000 fcc7 	bl	8000c2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800029e:	f000 f8af 	bl	8000400 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002a2:	f000 f99b 	bl	80005dc <MX_GPIO_Init>
  MX_FDCAN1_Init();
 80002a6:	f000 f921 	bl	80004ec <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  /* Initialize the USB Device Library */
  if(USBD_Init(&hUsbDeviceFS, &Class_Desc, 0) != USBD_OK)
 80002aa:	2200      	movs	r2, #0
 80002ac:	4943      	ldr	r1, [pc, #268]	@ (80003bc <main+0x128>)
 80002ae:	4844      	ldr	r0, [pc, #272]	@ (80003c0 <main+0x12c>)
 80002b0:	f009 fcd4 	bl	8009c5c <USBD_Init>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <main+0x2a>
  	Error_Handler();
 80002ba:	f000 fa65 	bl	8000788 <Error_Handler>
  /* Store HID Instance Class ID */
  CHID_InstID = hUsbDeviceFS.classId;
 80002be:	4b40      	ldr	r3, [pc, #256]	@ (80003c0 <main+0x12c>)
 80002c0:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80002c4:	b2da      	uxtb	r2, r3
 80002c6:	4b3f      	ldr	r3, [pc, #252]	@ (80003c4 <main+0x130>)
 80002c8:	701a      	strb	r2, [r3, #0]
  /* Register the CHID Class */
  if(USBD_RegisterClassComposite(&hUsbDeviceFS, USBD_CUSTOM_HID_CLASS, CLASS_TYPE_CHID, &CUSTOM_HID_EpAdd_Inst) != USBD_OK)
 80002ca:	4b3f      	ldr	r3, [pc, #252]	@ (80003c8 <main+0x134>)
 80002cc:	2205      	movs	r2, #5
 80002ce:	493f      	ldr	r1, [pc, #252]	@ (80003cc <main+0x138>)
 80002d0:	483b      	ldr	r0, [pc, #236]	@ (80003c0 <main+0x12c>)
 80002d2:	f009 fd21 	bl	8009d18 <USBD_RegisterClassComposite>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d001      	beq.n	80002e0 <main+0x4c>
  	Error_Handler();
 80002dc:	f000 fa54 	bl	8000788 <Error_Handler>
  /* Register CDC Class First Instance */
  if(USBD_RegisterClassComposite(&hUsbDeviceFS, USBD_CDC_CLASS, CLASS_TYPE_CDC, CDC_EpAdd_Inst) != USBD_OK)
 80002e0:	4b3b      	ldr	r3, [pc, #236]	@ (80003d0 <main+0x13c>)
 80002e2:	2202      	movs	r2, #2
 80002e4:	493b      	ldr	r1, [pc, #236]	@ (80003d4 <main+0x140>)
 80002e6:	4836      	ldr	r0, [pc, #216]	@ (80003c0 <main+0x12c>)
 80002e8:	f009 fd16 	bl	8009d18 <USBD_RegisterClassComposite>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d001      	beq.n	80002f6 <main+0x62>
  	Error_Handler();
 80002f2:	f000 fa49 	bl	8000788 <Error_Handler>
  /* Add CDC Interface Class */
  if (USBD_CMPSIT_SetClassID(&hUsbDeviceFS, CLASS_TYPE_CDC, 0) != 0xFF)
 80002f6:	2200      	movs	r2, #0
 80002f8:	2102      	movs	r1, #2
 80002fa:	4831      	ldr	r0, [pc, #196]	@ (80003c0 <main+0x12c>)
 80002fc:	f008 ff96 	bl	800922c <USBD_CMPSIT_SetClassID>
 8000300:	4603      	mov	r3, r0
 8000302:	2bff      	cmp	r3, #255	@ 0xff
 8000304:	d003      	beq.n	800030e <main+0x7a>
  {
  	USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_CDC_Template_fops);
 8000306:	4934      	ldr	r1, [pc, #208]	@ (80003d8 <main+0x144>)
 8000308:	482d      	ldr	r0, [pc, #180]	@ (80003c0 <main+0x12c>)
 800030a:	f008 f945 	bl	8008598 <USBD_CDC_RegisterInterface>
  }

  USBD_Start(&hUsbDeviceFS);
 800030e:	482c      	ldr	r0, [pc, #176]	@ (80003c0 <main+0x12c>)
 8000310:	f009 fd6a 	bl	8009de8 <USBD_Start>

  FDCAN_Config(); // need to set up the FD CAN peripheral with our parameters.
 8000314:	f000 f9bc 	bl	8000690 <FDCAN_Config>
  while (1)
  {
//  	if(HAL_GPIO_ReadPin(USER_BT_GPIO_Port, USER_BT_Pin) == GPIO_PIN_SET)
//  	{
//  		USBD_HID_SendReport(&hUsbDeviceFS, hid_report_buffer, 4, CHID_InstID);
  		USBD_CDC_TransmitPacket(&hUsbDeviceFS, CDC_InstID);
 8000318:	4b30      	ldr	r3, [pc, #192]	@ (80003dc <main+0x148>)
 800031a:	781b      	ldrb	r3, [r3, #0]
 800031c:	4619      	mov	r1, r3
 800031e:	4828      	ldr	r0, [pc, #160]	@ (80003c0 <main+0x12c>)
 8000320:	f008 f994 	bl	800864c <USBD_CDC_TransmitPacket>
  		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000324:	2201      	movs	r2, #1
 8000326:	2101      	movs	r1, #1
 8000328:	482d      	ldr	r0, [pc, #180]	@ (80003e0 <main+0x14c>)
 800032a:	f001 feef 	bl	800210c <HAL_GPIO_WritePin>
  		if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &Tx_Header, txData) != HAL_OK) // not useful rn
 800032e:	4a2d      	ldr	r2, [pc, #180]	@ (80003e4 <main+0x150>)
 8000330:	492d      	ldr	r1, [pc, #180]	@ (80003e8 <main+0x154>)
 8000332:	482e      	ldr	r0, [pc, #184]	@ (80003ec <main+0x158>)
 8000334:	f001 f8f9 	bl	800152a <HAL_FDCAN_AddMessageToTxFifoQ>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <main+0xae>
  		{
  			Error_Handler();
 800033e:	f000 fa23 	bl	8000788 <Error_Handler>
  		}
  		HAL_Delay(50);
 8000342:	2032      	movs	r0, #50	@ 0x32
 8000344:	f000 fd30 	bl	8000da8 <HAL_Delay>

  	    sprintf(buffer, "%d %d %d %d\r\n", rxData[0], rxData[1], rxData[2], rxData[3]);
 8000348:	4b29      	ldr	r3, [pc, #164]	@ (80003f0 <main+0x15c>)
 800034a:	781b      	ldrb	r3, [r3, #0]
 800034c:	4619      	mov	r1, r3
 800034e:	4b28      	ldr	r3, [pc, #160]	@ (80003f0 <main+0x15c>)
 8000350:	785b      	ldrb	r3, [r3, #1]
 8000352:	4618      	mov	r0, r3
 8000354:	4b26      	ldr	r3, [pc, #152]	@ (80003f0 <main+0x15c>)
 8000356:	789b      	ldrb	r3, [r3, #2]
 8000358:	461a      	mov	r2, r3
 800035a:	4b25      	ldr	r3, [pc, #148]	@ (80003f0 <main+0x15c>)
 800035c:	78db      	ldrb	r3, [r3, #3]
 800035e:	9301      	str	r3, [sp, #4]
 8000360:	9200      	str	r2, [sp, #0]
 8000362:	4603      	mov	r3, r0
 8000364:	460a      	mov	r2, r1
 8000366:	4923      	ldr	r1, [pc, #140]	@ (80003f4 <main+0x160>)
 8000368:	4823      	ldr	r0, [pc, #140]	@ (80003f8 <main+0x164>)
 800036a:	f00b fa3b 	bl	800b7e4 <siprintf>
  	    	buttons[0] = ((rxData[0] > 49) + 2*(rxData[1] > 46) + 4*(rxData[2] > 46) + 8*(rxData[3] > 60));
 800036e:	4b20      	ldr	r3, [pc, #128]	@ (80003f0 <main+0x15c>)
 8000370:	781b      	ldrb	r3, [r3, #0]
 8000372:	2b31      	cmp	r3, #49	@ 0x31
 8000374:	bf8c      	ite	hi
 8000376:	2301      	movhi	r3, #1
 8000378:	2300      	movls	r3, #0
 800037a:	b2db      	uxtb	r3, r3
 800037c:	461a      	mov	r2, r3
 800037e:	4b1c      	ldr	r3, [pc, #112]	@ (80003f0 <main+0x15c>)
 8000380:	785b      	ldrb	r3, [r3, #1]
 8000382:	2b2e      	cmp	r3, #46	@ 0x2e
 8000384:	d901      	bls.n	800038a <main+0xf6>
 8000386:	2302      	movs	r3, #2
 8000388:	e000      	b.n	800038c <main+0xf8>
 800038a:	2300      	movs	r3, #0
 800038c:	4413      	add	r3, r2
 800038e:	b2db      	uxtb	r3, r3
 8000390:	4a17      	ldr	r2, [pc, #92]	@ (80003f0 <main+0x15c>)
 8000392:	7892      	ldrb	r2, [r2, #2]
 8000394:	2a2e      	cmp	r2, #46	@ 0x2e
 8000396:	d901      	bls.n	800039c <main+0x108>
 8000398:	2204      	movs	r2, #4
 800039a:	e000      	b.n	800039e <main+0x10a>
 800039c:	2200      	movs	r2, #0
 800039e:	4413      	add	r3, r2
 80003a0:	b2db      	uxtb	r3, r3
 80003a2:	4a13      	ldr	r2, [pc, #76]	@ (80003f0 <main+0x15c>)
 80003a4:	78d2      	ldrb	r2, [r2, #3]
 80003a6:	2a3c      	cmp	r2, #60	@ 0x3c
 80003a8:	d901      	bls.n	80003ae <main+0x11a>
 80003aa:	2208      	movs	r2, #8
 80003ac:	e000      	b.n	80003b0 <main+0x11c>
 80003ae:	2200      	movs	r2, #0
 80003b0:	4413      	add	r3, r2
 80003b2:	b2da      	uxtb	r2, r3
 80003b4:	4b11      	ldr	r3, [pc, #68]	@ (80003fc <main+0x168>)
 80003b6:	701a      	strb	r2, [r3, #0]
  		USBD_CDC_TransmitPacket(&hUsbDeviceFS, CDC_InstID);
 80003b8:	e7ae      	b.n	8000318 <main+0x84>
 80003ba:	bf00      	nop
 80003bc:	200000f4 	.word	0x200000f4
 80003c0:	20000500 	.word	0x20000500
 80003c4:	20000840 	.word	0x20000840
 80003c8:	20000003 	.word	0x20000003
 80003cc:	200000b0 	.word	0x200000b0
 80003d0:	20000000 	.word	0x20000000
 80003d4:	20000010 	.word	0x20000010
 80003d8:	2000004c 	.word	0x2000004c
 80003dc:	20000841 	.word	0x20000841
 80003e0:	42020000 	.word	0x42020000
 80003e4:	20000898 	.word	0x20000898
 80003e8:	20000874 	.word	0x20000874
 80003ec:	200001bc 	.word	0x200001bc
 80003f0:	2000086c 	.word	0x2000086c
 80003f4:	0800c8e8 	.word	0x0800c8e8
 80003f8:	2000089c 	.word	0x2000089c
 80003fc:	2000099c 	.word	0x2000099c

08000400 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b09c      	sub	sp, #112	@ 0x70
 8000404:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000406:	f107 0320 	add.w	r3, r7, #32
 800040a:	2250      	movs	r2, #80	@ 0x50
 800040c:	2100      	movs	r1, #0
 800040e:	4618      	mov	r0, r3
 8000410:	f00b fa4b 	bl	800b8aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000414:	f107 0308 	add.w	r3, r7, #8
 8000418:	2200      	movs	r2, #0
 800041a:	601a      	str	r2, [r3, #0]
 800041c:	605a      	str	r2, [r3, #4]
 800041e:	609a      	str	r2, [r3, #8]
 8000420:	60da      	str	r2, [r3, #12]
 8000422:	611a      	str	r2, [r3, #16]
 8000424:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000426:	4b2f      	ldr	r3, [pc, #188]	@ (80004e4 <SystemClock_Config+0xe4>)
 8000428:	691b      	ldr	r3, [r3, #16]
 800042a:	4a2e      	ldr	r2, [pc, #184]	@ (80004e4 <SystemClock_Config+0xe4>)
 800042c:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000430:	6113      	str	r3, [r2, #16]
 8000432:	4b2c      	ldr	r3, [pc, #176]	@ (80004e4 <SystemClock_Config+0xe4>)
 8000434:	691b      	ldr	r3, [r3, #16]
 8000436:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800043a:	607b      	str	r3, [r7, #4]
 800043c:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800043e:	bf00      	nop
 8000440:	4b28      	ldr	r3, [pc, #160]	@ (80004e4 <SystemClock_Config+0xe4>)
 8000442:	695b      	ldr	r3, [r3, #20]
 8000444:	f003 0308 	and.w	r3, r3, #8
 8000448:	2b08      	cmp	r3, #8
 800044a:	d1f9      	bne.n	8000440 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_CSI;
 800044c:	2330      	movs	r3, #48	@ 0x30
 800044e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000450:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000454:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8000456:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800045a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 800045c:	2320      	movs	r3, #32
 800045e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000460:	2302      	movs	r3, #2
 8000462:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_CSI;
 8000464:	2302      	movs	r3, #2
 8000466:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000468:	2301      	movs	r3, #1
 800046a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 800046c:	2378      	movs	r3, #120	@ 0x78
 800046e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000470:	2302      	movs	r3, #2
 8000472:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000474:	2302      	movs	r3, #2
 8000476:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000478:	2302      	movs	r3, #2
 800047a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_2;
 800047c:	2308      	movs	r3, #8
 800047e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8000480:	2300      	movs	r3, #0
 8000482:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000484:	2300      	movs	r3, #0
 8000486:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000488:	f107 0320 	add.w	r3, r7, #32
 800048c:	4618      	mov	r0, r3
 800048e:	f003 fb29 	bl	8003ae4 <HAL_RCC_OscConfig>
 8000492:	4603      	mov	r3, r0
 8000494:	2b00      	cmp	r3, #0
 8000496:	d001      	beq.n	800049c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000498:	f000 f976 	bl	8000788 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800049c:	231f      	movs	r3, #31
 800049e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004a0:	2303      	movs	r3, #3
 80004a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004a4:	2300      	movs	r3, #0
 80004a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004a8:	2300      	movs	r3, #0
 80004aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004ac:	2300      	movs	r3, #0
 80004ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80004b0:	2300      	movs	r3, #0
 80004b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80004b4:	f107 0308 	add.w	r3, r7, #8
 80004b8:	2105      	movs	r1, #5
 80004ba:	4618      	mov	r0, r3
 80004bc:	f003 ff4a 	bl	8004354 <HAL_RCC_ClockConfig>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d001      	beq.n	80004ca <SystemClock_Config+0xca>
  {
    Error_Handler();
 80004c6:	f000 f95f 	bl	8000788 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 80004ca:	4b07      	ldr	r3, [pc, #28]	@ (80004e8 <SystemClock_Config+0xe8>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80004d2:	4a05      	ldr	r2, [pc, #20]	@ (80004e8 <SystemClock_Config+0xe8>)
 80004d4:	f043 0320 	orr.w	r3, r3, #32
 80004d8:	6013      	str	r3, [r2, #0]
}
 80004da:	bf00      	nop
 80004dc:	3770      	adds	r7, #112	@ 0x70
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	44020800 	.word	0x44020800
 80004e8:	40022000 	.word	0x40022000

080004ec <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80004f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000570 <MX_FDCAN1_Init+0x84>)
 80004f2:	4a20      	ldr	r2, [pc, #128]	@ (8000574 <MX_FDCAN1_Init+0x88>)
 80004f4:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80004f6:	4b1e      	ldr	r3, [pc, #120]	@ (8000570 <MX_FDCAN1_Init+0x84>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80004fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000570 <MX_FDCAN1_Init+0x84>)
 80004fe:	2200      	movs	r2, #0
 8000500:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000502:	4b1b      	ldr	r3, [pc, #108]	@ (8000570 <MX_FDCAN1_Init+0x84>)
 8000504:	2200      	movs	r2, #0
 8000506:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000508:	4b19      	ldr	r3, [pc, #100]	@ (8000570 <MX_FDCAN1_Init+0x84>)
 800050a:	2200      	movs	r2, #0
 800050c:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800050e:	4b18      	ldr	r3, [pc, #96]	@ (8000570 <MX_FDCAN1_Init+0x84>)
 8000510:	2200      	movs	r2, #0
 8000512:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000514:	4b16      	ldr	r3, [pc, #88]	@ (8000570 <MX_FDCAN1_Init+0x84>)
 8000516:	2200      	movs	r2, #0
 8000518:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 15;
 800051a:	4b15      	ldr	r3, [pc, #84]	@ (8000570 <MX_FDCAN1_Init+0x84>)
 800051c:	220f      	movs	r2, #15
 800051e:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 2;
 8000520:	4b13      	ldr	r3, [pc, #76]	@ (8000570 <MX_FDCAN1_Init+0x84>)
 8000522:	2202      	movs	r2, #2
 8000524:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 8000526:	4b12      	ldr	r3, [pc, #72]	@ (8000570 <MX_FDCAN1_Init+0x84>)
 8000528:	220d      	movs	r2, #13
 800052a:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800052c:	4b10      	ldr	r3, [pc, #64]	@ (8000570 <MX_FDCAN1_Init+0x84>)
 800052e:	2202      	movs	r2, #2
 8000530:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 15;
 8000532:	4b0f      	ldr	r3, [pc, #60]	@ (8000570 <MX_FDCAN1_Init+0x84>)
 8000534:	220f      	movs	r2, #15
 8000536:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 2;
 8000538:	4b0d      	ldr	r3, [pc, #52]	@ (8000570 <MX_FDCAN1_Init+0x84>)
 800053a:	2202      	movs	r2, #2
 800053c:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 13;
 800053e:	4b0c      	ldr	r3, [pc, #48]	@ (8000570 <MX_FDCAN1_Init+0x84>)
 8000540:	220d      	movs	r2, #13
 8000542:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 8000544:	4b0a      	ldr	r3, [pc, #40]	@ (8000570 <MX_FDCAN1_Init+0x84>)
 8000546:	2202      	movs	r2, #2
 8000548:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 800054a:	4b09      	ldr	r3, [pc, #36]	@ (8000570 <MX_FDCAN1_Init+0x84>)
 800054c:	2201      	movs	r2, #1
 800054e:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000550:	4b07      	ldr	r3, [pc, #28]	@ (8000570 <MX_FDCAN1_Init+0x84>)
 8000552:	2200      	movs	r2, #0
 8000554:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000556:	4b06      	ldr	r3, [pc, #24]	@ (8000570 <MX_FDCAN1_Init+0x84>)
 8000558:	2200      	movs	r2, #0
 800055a:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800055c:	4804      	ldr	r0, [pc, #16]	@ (8000570 <MX_FDCAN1_Init+0x84>)
 800055e:	f000 fdd7 	bl	8001110 <HAL_FDCAN_Init>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000568:	f000 f90e 	bl	8000788 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 800056c:	bf00      	nop
 800056e:	bd80      	pop	{r7, pc}
 8000570:	200001bc 	.word	0x200001bc
 8000574:	4000a400 	.word	0x4000a400

08000578 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
void MX_USB_PCD_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 800057c:	4b15      	ldr	r3, [pc, #84]	@ (80005d4 <MX_USB_PCD_Init+0x5c>)
 800057e:	4a16      	ldr	r2, [pc, #88]	@ (80005d8 <MX_USB_PCD_Init+0x60>)
 8000580:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 8000582:	4b14      	ldr	r3, [pc, #80]	@ (80005d4 <MX_USB_PCD_Init+0x5c>)
 8000584:	2208      	movs	r2, #8
 8000586:	711a      	strb	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 8000588:	4b12      	ldr	r3, [pc, #72]	@ (80005d4 <MX_USB_PCD_Init+0x5c>)
 800058a:	2202      	movs	r2, #2
 800058c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800058e:	4b11      	ldr	r3, [pc, #68]	@ (80005d4 <MX_USB_PCD_Init+0x5c>)
 8000590:	2202      	movs	r2, #2
 8000592:	725a      	strb	r2, [r3, #9]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 8000594:	4b0f      	ldr	r3, [pc, #60]	@ (80005d4 <MX_USB_PCD_Init+0x5c>)
 8000596:	2200      	movs	r2, #0
 8000598:	729a      	strb	r2, [r3, #10]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 800059a:	4b0e      	ldr	r3, [pc, #56]	@ (80005d4 <MX_USB_PCD_Init+0x5c>)
 800059c:	2200      	movs	r2, #0
 800059e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 80005a0:	4b0c      	ldr	r3, [pc, #48]	@ (80005d4 <MX_USB_PCD_Init+0x5c>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 80005a6:	4b0b      	ldr	r3, [pc, #44]	@ (80005d4 <MX_USB_PCD_Init+0x5c>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	735a      	strb	r2, [r3, #13]
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 80005ac:	4b09      	ldr	r3, [pc, #36]	@ (80005d4 <MX_USB_PCD_Init+0x5c>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	739a      	strb	r2, [r3, #14]
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 80005b2:	4b08      	ldr	r3, [pc, #32]	@ (80005d4 <MX_USB_PCD_Init+0x5c>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	73da      	strb	r2, [r3, #15]
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 80005b8:	4b06      	ldr	r3, [pc, #24]	@ (80005d4 <MX_USB_PCD_Init+0x5c>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 80005be:	4805      	ldr	r0, [pc, #20]	@ (80005d4 <MX_USB_PCD_Init+0x5c>)
 80005c0:	f001 fe1f 	bl	8002202 <HAL_PCD_Init>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <MX_USB_PCD_Init+0x56>
  {
    Error_Handler();
 80005ca:	f000 f8dd 	bl	8000788 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80005ce:	bf00      	nop
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	20000220 	.word	0x20000220
 80005d8:	40016000 	.word	0x40016000

080005dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b088      	sub	sp, #32
 80005e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e2:	f107 030c 	add.w	r3, r7, #12
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]
 80005f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f2:	4b24      	ldr	r3, [pc, #144]	@ (8000684 <MX_GPIO_Init+0xa8>)
 80005f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80005f8:	4a22      	ldr	r2, [pc, #136]	@ (8000684 <MX_GPIO_Init+0xa8>)
 80005fa:	f043 0301 	orr.w	r3, r3, #1
 80005fe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000602:	4b20      	ldr	r3, [pc, #128]	@ (8000684 <MX_GPIO_Init+0xa8>)
 8000604:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000608:	f003 0301 	and.w	r3, r3, #1
 800060c:	60bb      	str	r3, [r7, #8]
 800060e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000610:	4b1c      	ldr	r3, [pc, #112]	@ (8000684 <MX_GPIO_Init+0xa8>)
 8000612:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000616:	4a1b      	ldr	r2, [pc, #108]	@ (8000684 <MX_GPIO_Init+0xa8>)
 8000618:	f043 0302 	orr.w	r3, r3, #2
 800061c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000620:	4b18      	ldr	r3, [pc, #96]	@ (8000684 <MX_GPIO_Init+0xa8>)
 8000622:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000626:	f003 0302 	and.w	r3, r3, #2
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800062e:	2200      	movs	r2, #0
 8000630:	21ff      	movs	r1, #255	@ 0xff
 8000632:	4815      	ldr	r0, [pc, #84]	@ (8000688 <MX_GPIO_Init+0xac>)
 8000634:	f001 fd6a 	bl	800210c <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8000638:	2200      	movs	r2, #0
 800063a:	210f      	movs	r1, #15
 800063c:	4813      	ldr	r0, [pc, #76]	@ (800068c <MX_GPIO_Init+0xb0>)
 800063e:	f001 fd65 	bl	800210c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000642:	23ff      	movs	r3, #255	@ 0xff
 8000644:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000646:	2301      	movs	r3, #1
 8000648:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064a:	2300      	movs	r3, #0
 800064c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064e:	2300      	movs	r3, #0
 8000650:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000652:	f107 030c 	add.w	r3, r7, #12
 8000656:	4619      	mov	r1, r3
 8000658:	480b      	ldr	r0, [pc, #44]	@ (8000688 <MX_GPIO_Init+0xac>)
 800065a:	f001 fc05 	bl	8001e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800065e:	230f      	movs	r3, #15
 8000660:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000662:	2301      	movs	r3, #1
 8000664:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000666:	2300      	movs	r3, #0
 8000668:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066a:	2300      	movs	r3, #0
 800066c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800066e:	f107 030c 	add.w	r3, r7, #12
 8000672:	4619      	mov	r1, r3
 8000674:	4805      	ldr	r0, [pc, #20]	@ (800068c <MX_GPIO_Init+0xb0>)
 8000676:	f001 fbf7 	bl	8001e68 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800067a:	bf00      	nop
 800067c:	3720      	adds	r7, #32
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	44020c00 	.word	0x44020c00
 8000688:	42020000 	.word	0x42020000
 800068c:	42020400 	.word	0x42020400

08000690 <FDCAN_Config>:

/* USER CODE BEGIN 4 */
static void FDCAN_Config(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b088      	sub	sp, #32
 8000694:	af02      	add	r7, sp, #8
	FDCAN_FilterTypeDef filter;

	filter.IdType = FDCAN_STANDARD_ID;
 8000696:	2300      	movs	r3, #0
 8000698:	603b      	str	r3, [r7, #0]
	filter.FilterIndex = 0;
 800069a:	2300      	movs	r3, #0
 800069c:	607b      	str	r3, [r7, #4]
	filter.FilterType = FDCAN_FILTER_RANGE;
 800069e:	2300      	movs	r3, #0
 80006a0:	60bb      	str	r3, [r7, #8]
	filter.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80006a2:	2301      	movs	r3, #1
 80006a4:	60fb      	str	r3, [r7, #12]
	filter.FilterID1 = 0x0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	613b      	str	r3, [r7, #16]
	filter.FilterID2 = 0x7FF;
 80006aa:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80006ae:	617b      	str	r3, [r7, #20]

	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &filter) != HAL_OK)
 80006b0:	463b      	mov	r3, r7
 80006b2:	4619      	mov	r1, r3
 80006b4:	4823      	ldr	r0, [pc, #140]	@ (8000744 <FDCAN_Config+0xb4>)
 80006b6:	f000 fe85 	bl	80013c4 <HAL_FDCAN_ConfigFilter>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <FDCAN_Config+0x34>
	  {
	    Error_Handler();
 80006c0:	f000 f862 	bl	8000788 <Error_Handler>
	  }

	if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 80006c4:	2300      	movs	r3, #0
 80006c6:	9300      	str	r3, [sp, #0]
 80006c8:	2300      	movs	r3, #0
 80006ca:	2202      	movs	r2, #2
 80006cc:	2102      	movs	r1, #2
 80006ce:	481d      	ldr	r0, [pc, #116]	@ (8000744 <FDCAN_Config+0xb4>)
 80006d0:	f000 fed2 	bl	8001478 <HAL_FDCAN_ConfigGlobalFilter>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <FDCAN_Config+0x4e>
	  {
	    Error_Handler();
 80006da:	f000 f855 	bl	8000788 <Error_Handler>
	  }

	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 80006de:	4819      	ldr	r0, [pc, #100]	@ (8000744 <FDCAN_Config+0xb4>)
 80006e0:	f000 fefb 	bl	80014da <HAL_FDCAN_Start>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <FDCAN_Config+0x5e>
	  {
	    Error_Handler();
 80006ea:	f000 f84d 	bl	8000788 <Error_Handler>
	  }

	  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80006ee:	2200      	movs	r2, #0
 80006f0:	2101      	movs	r1, #1
 80006f2:	4814      	ldr	r0, [pc, #80]	@ (8000744 <FDCAN_Config+0xb4>)
 80006f4:	f001 f866 	bl	80017c4 <HAL_FDCAN_ActivateNotification>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <FDCAN_Config+0x72>
	  {
	    Error_Handler();
 80006fe:	f000 f843 	bl	8000788 <Error_Handler>
	  }

	  Tx_Header.Identifier = 0x23D;
 8000702:	4b11      	ldr	r3, [pc, #68]	@ (8000748 <FDCAN_Config+0xb8>)
 8000704:	f240 223d 	movw	r2, #573	@ 0x23d
 8000708:	601a      	str	r2, [r3, #0]
	  Tx_Header.IdType = FDCAN_STANDARD_ID;
 800070a:	4b0f      	ldr	r3, [pc, #60]	@ (8000748 <FDCAN_Config+0xb8>)
 800070c:	2200      	movs	r2, #0
 800070e:	605a      	str	r2, [r3, #4]
	  Tx_Header.TxFrameType = FDCAN_DATA_FRAME;
 8000710:	4b0d      	ldr	r3, [pc, #52]	@ (8000748 <FDCAN_Config+0xb8>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
	  Tx_Header.DataLength = FDCAN_DLC_BYTES_4;
 8000716:	4b0c      	ldr	r3, [pc, #48]	@ (8000748 <FDCAN_Config+0xb8>)
 8000718:	2204      	movs	r2, #4
 800071a:	60da      	str	r2, [r3, #12]
	  Tx_Header.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800071c:	4b0a      	ldr	r3, [pc, #40]	@ (8000748 <FDCAN_Config+0xb8>)
 800071e:	2200      	movs	r2, #0
 8000720:	611a      	str	r2, [r3, #16]
	  Tx_Header.BitRateSwitch = FDCAN_BRS_OFF;
 8000722:	4b09      	ldr	r3, [pc, #36]	@ (8000748 <FDCAN_Config+0xb8>)
 8000724:	2200      	movs	r2, #0
 8000726:	615a      	str	r2, [r3, #20]
	  Tx_Header.FDFormat = FDCAN_CLASSIC_CAN;
 8000728:	4b07      	ldr	r3, [pc, #28]	@ (8000748 <FDCAN_Config+0xb8>)
 800072a:	2200      	movs	r2, #0
 800072c:	619a      	str	r2, [r3, #24]
	  Tx_Header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800072e:	4b06      	ldr	r3, [pc, #24]	@ (8000748 <FDCAN_Config+0xb8>)
 8000730:	2200      	movs	r2, #0
 8000732:	61da      	str	r2, [r3, #28]
	  Tx_Header.MessageMarker = 0;
 8000734:	4b04      	ldr	r3, [pc, #16]	@ (8000748 <FDCAN_Config+0xb8>)
 8000736:	2200      	movs	r2, #0
 8000738:	621a      	str	r2, [r3, #32]
}
 800073a:	bf00      	nop
 800073c:	3718      	adds	r7, #24
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	200001bc 	.word	0x200001bc
 8000748:	20000874 	.word	0x20000874

0800074c <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	6039      	str	r1, [r7, #0]
	if (RxFifo0ITs == FDCAN_IT_RX_FIFO0_NEW_MESSAGE) // we have a new message!
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	2b01      	cmp	r3, #1
 800075a:	d10a      	bne.n	8000772 <HAL_FDCAN_RxFifo0Callback+0x26>
	{
		if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &Rx_Header, rxData) != HAL_OK)
 800075c:	4b07      	ldr	r3, [pc, #28]	@ (800077c <HAL_FDCAN_RxFifo0Callback+0x30>)
 800075e:	4a08      	ldr	r2, [pc, #32]	@ (8000780 <HAL_FDCAN_RxFifo0Callback+0x34>)
 8000760:	2140      	movs	r1, #64	@ 0x40
 8000762:	4808      	ldr	r0, [pc, #32]	@ (8000784 <HAL_FDCAN_RxFifo0Callback+0x38>)
 8000764:	f000 ff26 	bl	80015b4 <HAL_FDCAN_GetRxMessage>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <HAL_FDCAN_RxFifo0Callback+0x26>
		{
			Error_Handler();
 800076e:	f000 f80b 	bl	8000788 <Error_Handler>
		}
	}
}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	2000086c 	.word	0x2000086c
 8000780:	20000844 	.word	0x20000844
 8000784:	200001bc 	.word	0x200001bc

08000788 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800078c:	b672      	cpsid	i
}
 800078e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000790:	bf00      	nop
 8000792:	e7fd      	b.n	8000790 <Error_Handler+0x8>

08000794 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000798:	bf00      	nop
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
	...

080007a4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b0be      	sub	sp, #248	@ 0xf8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ac:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
 80007ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007bc:	f107 0310 	add.w	r3, r7, #16
 80007c0:	22d0      	movs	r2, #208	@ 0xd0
 80007c2:	2100      	movs	r1, #0
 80007c4:	4618      	mov	r0, r3
 80007c6:	f00b f870 	bl	800b8aa <memset>
  if(hfdcan->Instance==FDCAN1)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4a2b      	ldr	r2, [pc, #172]	@ (800087c <HAL_FDCAN_MspInit+0xd8>)
 80007d0:	4293      	cmp	r3, r2
 80007d2:	d14f      	bne.n	8000874 <HAL_FDCAN_MspInit+0xd0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80007d4:	f04f 0200 	mov.w	r2, #0
 80007d8:	f04f 0304 	mov.w	r3, #4
 80007dc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL1Q;
 80007e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007e4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007e8:	f107 0310 	add.w	r3, r7, #16
 80007ec:	4618      	mov	r0, r3
 80007ee:	f004 f8b1 	bl	8004954 <HAL_RCCEx_PeriphCLKConfig>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 80007f8:	f7ff ffc6 	bl	8000788 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80007fc:	4b20      	ldr	r3, [pc, #128]	@ (8000880 <HAL_FDCAN_MspInit+0xdc>)
 80007fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000802:	4a1f      	ldr	r2, [pc, #124]	@ (8000880 <HAL_FDCAN_MspInit+0xdc>)
 8000804:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000808:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 800080c:	4b1c      	ldr	r3, [pc, #112]	@ (8000880 <HAL_FDCAN_MspInit+0xdc>)
 800080e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000812:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800081a:	4b19      	ldr	r3, [pc, #100]	@ (8000880 <HAL_FDCAN_MspInit+0xdc>)
 800081c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000820:	4a17      	ldr	r2, [pc, #92]	@ (8000880 <HAL_FDCAN_MspInit+0xdc>)
 8000822:	f043 0302 	orr.w	r3, r3, #2
 8000826:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800082a:	4b15      	ldr	r3, [pc, #84]	@ (8000880 <HAL_FDCAN_MspInit+0xdc>)
 800082c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000830:	f003 0302 	and.w	r3, r3, #2
 8000834:	60bb      	str	r3, [r7, #8]
 8000836:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB7     ------> FDCAN1_TX
    PB8     ------> FDCAN1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000838:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800083c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000840:	2302      	movs	r3, #2
 8000842:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084c:	2300      	movs	r3, #0
 800084e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000852:	2309      	movs	r3, #9
 8000854:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000858:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800085c:	4619      	mov	r1, r3
 800085e:	4809      	ldr	r0, [pc, #36]	@ (8000884 <HAL_FDCAN_MspInit+0xe0>)
 8000860:	f001 fb02 	bl	8001e68 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000864:	2200      	movs	r2, #0
 8000866:	2100      	movs	r1, #0
 8000868:	2027      	movs	r0, #39	@ 0x27
 800086a:	f000 fb79 	bl	8000f60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800086e:	2027      	movs	r0, #39	@ 0x27
 8000870:	f000 fb90 	bl	8000f94 <HAL_NVIC_EnableIRQ>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8000874:	bf00      	nop
 8000876:	37f8      	adds	r7, #248	@ 0xf8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	4000a400 	.word	0x4000a400
 8000880:	44020c00 	.word	0x44020c00
 8000884:	42020400 	.word	0x42020400

08000888 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b0b8      	sub	sp, #224	@ 0xe0
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000890:	f107 0310 	add.w	r3, r7, #16
 8000894:	22d0      	movs	r2, #208	@ 0xd0
 8000896:	2100      	movs	r1, #0
 8000898:	4618      	mov	r0, r3
 800089a:	f00b f806 	bl	800b8aa <memset>
  if(hpcd->Instance==USB_DRD_FS)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4a19      	ldr	r2, [pc, #100]	@ (8000908 <HAL_PCD_MspInit+0x80>)
 80008a4:	4293      	cmp	r3, r2
 80008a6:	d12b      	bne.n	8000900 <HAL_PCD_MspInit+0x78>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80008a8:	f04f 0200 	mov.w	r2, #0
 80008ac:	f04f 0310 	mov.w	r3, #16
 80008b0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80008b4:	2330      	movs	r3, #48	@ 0x30
 80008b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008ba:	f107 0310 	add.w	r3, r7, #16
 80008be:	4618      	mov	r0, r3
 80008c0:	f004 f848 	bl	8004954 <HAL_RCCEx_PeriphCLKConfig>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <HAL_PCD_MspInit+0x46>
    {
      Error_Handler();
 80008ca:	f7ff ff5d 	bl	8000788 <Error_Handler>
    }

  /* Enable VDDUSB */
  HAL_PWREx_EnableVddUSB();
 80008ce:	f003 f8f9 	bl	8003ac4 <HAL_PWREx_EnableVddUSB>
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80008d2:	4b0e      	ldr	r3, [pc, #56]	@ (800090c <HAL_PCD_MspInit+0x84>)
 80008d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80008d8:	4a0c      	ldr	r2, [pc, #48]	@ (800090c <HAL_PCD_MspInit+0x84>)
 80008da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80008de:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80008e2:	4b0a      	ldr	r3, [pc, #40]	@ (800090c <HAL_PCD_MspInit+0x84>)
 80008e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80008e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80008ec:	60fb      	str	r3, [r7, #12]
 80008ee:	68fb      	ldr	r3, [r7, #12]
    /* USB_DRD_FS interrupt Init */
    HAL_NVIC_SetPriority(USB_DRD_FS_IRQn, 0, 0);
 80008f0:	2200      	movs	r2, #0
 80008f2:	2100      	movs	r1, #0
 80008f4:	204a      	movs	r0, #74	@ 0x4a
 80008f6:	f000 fb33 	bl	8000f60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_DRD_FS_IRQn);
 80008fa:	204a      	movs	r0, #74	@ 0x4a
 80008fc:	f000 fb4a 	bl	8000f94 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_DRD_FS_MspInit 1 */

  }

}
 8000900:	bf00      	nop
 8000902:	37e0      	adds	r7, #224	@ 0xe0
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	40016000 	.word	0x40016000
 800090c:	44020c00 	.word	0x44020c00

08000910 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000914:	bf00      	nop
 8000916:	e7fd      	b.n	8000914 <NMI_Handler+0x4>

08000918 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800091c:	bf00      	nop
 800091e:	e7fd      	b.n	800091c <HardFault_Handler+0x4>

08000920 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000924:	bf00      	nop
 8000926:	e7fd      	b.n	8000924 <MemManage_Handler+0x4>

08000928 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800092c:	bf00      	nop
 800092e:	e7fd      	b.n	800092c <BusFault_Handler+0x4>

08000930 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000934:	bf00      	nop
 8000936:	e7fd      	b.n	8000934 <UsageFault_Handler+0x4>

08000938 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr

08000946 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000946:	b480      	push	{r7}
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800094a:	bf00      	nop
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr

08000954 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000958:	bf00      	nop
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr

08000962 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000962:	b580      	push	{r7, lr}
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000966:	f000 f9ff 	bl	8000d68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
	...

08000970 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000974:	4802      	ldr	r0, [pc, #8]	@ (8000980 <FDCAN1_IT0_IRQHandler+0x10>)
 8000976:	f001 f80b 	bl	8001990 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	200001bc 	.word	0x200001bc

08000984 <USB_DRD_FS_IRQHandler>:

/**
  * @brief This function handles USB FS global interrupt.
  */
void USB_DRD_FS_IRQHandler(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DRD_FS_IRQn 0 */

  /* USER CODE END USB_DRD_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_DRD_FS);
 8000988:	4802      	ldr	r0, [pc, #8]	@ (8000994 <USB_DRD_FS_IRQHandler+0x10>)
 800098a:	f001 fd2d 	bl	80023e8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_DRD_FS_IRQn 1 */

  /* USER CODE END USB_DRD_FS_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	20000220 	.word	0x20000220

08000998 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b086      	sub	sp, #24
 800099c:	af00      	add	r7, sp, #0
 800099e:	60f8      	str	r0, [r7, #12]
 80009a0:	60b9      	str	r1, [r7, #8]
 80009a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009a4:	2300      	movs	r3, #0
 80009a6:	617b      	str	r3, [r7, #20]
 80009a8:	e00a      	b.n	80009c0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009aa:	f3af 8000 	nop.w
 80009ae:	4601      	mov	r1, r0
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	1c5a      	adds	r2, r3, #1
 80009b4:	60ba      	str	r2, [r7, #8]
 80009b6:	b2ca      	uxtb	r2, r1
 80009b8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	3301      	adds	r3, #1
 80009be:	617b      	str	r3, [r7, #20]
 80009c0:	697a      	ldr	r2, [r7, #20]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	429a      	cmp	r2, r3
 80009c6:	dbf0      	blt.n	80009aa <_read+0x12>
  }

  return len;
 80009c8:	687b      	ldr	r3, [r7, #4]
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3718      	adds	r7, #24
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}

080009d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009d2:	b580      	push	{r7, lr}
 80009d4:	b086      	sub	sp, #24
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	60f8      	str	r0, [r7, #12]
 80009da:	60b9      	str	r1, [r7, #8]
 80009dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009de:	2300      	movs	r3, #0
 80009e0:	617b      	str	r3, [r7, #20]
 80009e2:	e009      	b.n	80009f8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	1c5a      	adds	r2, r3, #1
 80009e8:	60ba      	str	r2, [r7, #8]
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	4618      	mov	r0, r3
 80009ee:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009f2:	697b      	ldr	r3, [r7, #20]
 80009f4:	3301      	adds	r3, #1
 80009f6:	617b      	str	r3, [r7, #20]
 80009f8:	697a      	ldr	r2, [r7, #20]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	429a      	cmp	r2, r3
 80009fe:	dbf1      	blt.n	80009e4 <_write+0x12>
  }
  return len;
 8000a00:	687b      	ldr	r3, [r7, #4]
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3718      	adds	r7, #24
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <_close>:

int _close(int file)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	b083      	sub	sp, #12
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	370c      	adds	r7, #12
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr

08000a22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a22:	b480      	push	{r7}
 8000a24:	b083      	sub	sp, #12
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	6078      	str	r0, [r7, #4]
 8000a2a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a32:	605a      	str	r2, [r3, #4]
  return 0;
 8000a34:	2300      	movs	r3, #0
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr

08000a42 <_isatty>:

int _isatty(int file)
{
 8000a42:	b480      	push	{r7}
 8000a44:	b083      	sub	sp, #12
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a4a:	2301      	movs	r3, #1
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	370c      	adds	r7, #12
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr

08000a58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b085      	sub	sp, #20
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	60f8      	str	r0, [r7, #12]
 8000a60:	60b9      	str	r1, [r7, #8]
 8000a62:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a64:	2300      	movs	r3, #0
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3714      	adds	r7, #20
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
	...

08000a74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b086      	sub	sp, #24
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a7c:	4a14      	ldr	r2, [pc, #80]	@ (8000ad0 <_sbrk+0x5c>)
 8000a7e:	4b15      	ldr	r3, [pc, #84]	@ (8000ad4 <_sbrk+0x60>)
 8000a80:	1ad3      	subs	r3, r2, r3
 8000a82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a88:	4b13      	ldr	r3, [pc, #76]	@ (8000ad8 <_sbrk+0x64>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d102      	bne.n	8000a96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a90:	4b11      	ldr	r3, [pc, #68]	@ (8000ad8 <_sbrk+0x64>)
 8000a92:	4a12      	ldr	r2, [pc, #72]	@ (8000adc <_sbrk+0x68>)
 8000a94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a96:	4b10      	ldr	r3, [pc, #64]	@ (8000ad8 <_sbrk+0x64>)
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4413      	add	r3, r2
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d207      	bcs.n	8000ab4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000aa4:	f00a ff50 	bl	800b948 <__errno>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	220c      	movs	r2, #12
 8000aac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aae:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab2:	e009      	b.n	8000ac8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ab4:	4b08      	ldr	r3, [pc, #32]	@ (8000ad8 <_sbrk+0x64>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aba:	4b07      	ldr	r3, [pc, #28]	@ (8000ad8 <_sbrk+0x64>)
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	4a05      	ldr	r2, [pc, #20]	@ (8000ad8 <_sbrk+0x64>)
 8000ac4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ac6:	68fb      	ldr	r3, [r7, #12]
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3718      	adds	r7, #24
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	20044000 	.word	0x20044000
 8000ad4:	00000700 	.word	0x00000700
 8000ad8:	200009a0 	.word	0x200009a0
 8000adc:	20000de0 	.word	0x20000de0

08000ae0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ae6:	4b35      	ldr	r3, [pc, #212]	@ (8000bbc <SystemInit+0xdc>)
 8000ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000aec:	4a33      	ldr	r2, [pc, #204]	@ (8000bbc <SystemInit+0xdc>)
 8000aee:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000af2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8000af6:	4b32      	ldr	r3, [pc, #200]	@ (8000bc0 <SystemInit+0xe0>)
 8000af8:	2201      	movs	r2, #1
 8000afa:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000afc:	4b30      	ldr	r3, [pc, #192]	@ (8000bc0 <SystemInit+0xe0>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000b02:	4b2f      	ldr	r3, [pc, #188]	@ (8000bc0 <SystemInit+0xe0>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8000b08:	4b2d      	ldr	r3, [pc, #180]	@ (8000bc0 <SystemInit+0xe0>)
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	492c      	ldr	r1, [pc, #176]	@ (8000bc0 <SystemInit+0xe0>)
 8000b0e:	4b2d      	ldr	r3, [pc, #180]	@ (8000bc4 <SystemInit+0xe4>)
 8000b10:	4013      	ands	r3, r2
 8000b12:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8000b14:	4b2a      	ldr	r3, [pc, #168]	@ (8000bc0 <SystemInit+0xe0>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8000b1a:	4b29      	ldr	r3, [pc, #164]	@ (8000bc0 <SystemInit+0xe0>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8000b20:	4b27      	ldr	r3, [pc, #156]	@ (8000bc0 <SystemInit+0xe0>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8000b26:	4b26      	ldr	r3, [pc, #152]	@ (8000bc0 <SystemInit+0xe0>)
 8000b28:	4a27      	ldr	r2, [pc, #156]	@ (8000bc8 <SystemInit+0xe8>)
 8000b2a:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8000b2c:	4b24      	ldr	r3, [pc, #144]	@ (8000bc0 <SystemInit+0xe0>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8000b32:	4b23      	ldr	r3, [pc, #140]	@ (8000bc0 <SystemInit+0xe0>)
 8000b34:	4a24      	ldr	r2, [pc, #144]	@ (8000bc8 <SystemInit+0xe8>)
 8000b36:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8000b38:	4b21      	ldr	r3, [pc, #132]	@ (8000bc0 <SystemInit+0xe0>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8000b3e:	4b20      	ldr	r3, [pc, #128]	@ (8000bc0 <SystemInit+0xe0>)
 8000b40:	4a21      	ldr	r2, [pc, #132]	@ (8000bc8 <SystemInit+0xe8>)
 8000b42:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8000b44:	4b1e      	ldr	r3, [pc, #120]	@ (8000bc0 <SystemInit+0xe0>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000b4a:	4b1d      	ldr	r3, [pc, #116]	@ (8000bc0 <SystemInit+0xe0>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4a1c      	ldr	r2, [pc, #112]	@ (8000bc0 <SystemInit+0xe0>)
 8000b50:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b54:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000b56:	4b1a      	ldr	r3, [pc, #104]	@ (8000bc0 <SystemInit+0xe0>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b5c:	4b17      	ldr	r3, [pc, #92]	@ (8000bbc <SystemInit+0xdc>)
 8000b5e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000b62:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8000b64:	4b19      	ldr	r3, [pc, #100]	@ (8000bcc <SystemInit+0xec>)
 8000b66:	699b      	ldr	r3, [r3, #24]
 8000b68:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8000b6c:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8000b74:	d003      	beq.n	8000b7e <SystemInit+0x9e>
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8000b7c:	d117      	bne.n	8000bae <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8000b7e:	4b13      	ldr	r3, [pc, #76]	@ (8000bcc <SystemInit+0xec>)
 8000b80:	69db      	ldr	r3, [r3, #28]
 8000b82:	f003 0301 	and.w	r3, r3, #1
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d005      	beq.n	8000b96 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8000b8a:	4b10      	ldr	r3, [pc, #64]	@ (8000bcc <SystemInit+0xec>)
 8000b8c:	4a10      	ldr	r2, [pc, #64]	@ (8000bd0 <SystemInit+0xf0>)
 8000b8e:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8000b90:	4b0e      	ldr	r3, [pc, #56]	@ (8000bcc <SystemInit+0xec>)
 8000b92:	4a10      	ldr	r2, [pc, #64]	@ (8000bd4 <SystemInit+0xf4>)
 8000b94:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8000b96:	4b0d      	ldr	r3, [pc, #52]	@ (8000bcc <SystemInit+0xec>)
 8000b98:	69db      	ldr	r3, [r3, #28]
 8000b9a:	4a0c      	ldr	r2, [pc, #48]	@ (8000bcc <SystemInit+0xec>)
 8000b9c:	f043 0302 	orr.w	r3, r3, #2
 8000ba0:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8000ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8000bcc <SystemInit+0xec>)
 8000ba4:	69db      	ldr	r3, [r3, #28]
 8000ba6:	4a09      	ldr	r2, [pc, #36]	@ (8000bcc <SystemInit+0xec>)
 8000ba8:	f043 0301 	orr.w	r3, r3, #1
 8000bac:	61d3      	str	r3, [r2, #28]
  }
}
 8000bae:	bf00      	nop
 8000bb0:	370c      	adds	r7, #12
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	e000ed00 	.word	0xe000ed00
 8000bc0:	44020c00 	.word	0x44020c00
 8000bc4:	eae2eae3 	.word	0xeae2eae3
 8000bc8:	01010280 	.word	0x01010280
 8000bcc:	40022000 	.word	0x40022000
 8000bd0:	08192a3b 	.word	0x08192a3b
 8000bd4:	4c5d6e7f 	.word	0x4c5d6e7f

08000bd8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bd8:	480d      	ldr	r0, [pc, #52]	@ (8000c10 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bda:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bdc:	f7ff ff80 	bl	8000ae0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000be0:	480c      	ldr	r0, [pc, #48]	@ (8000c14 <LoopForever+0x6>)
  ldr r1, =_edata
 8000be2:	490d      	ldr	r1, [pc, #52]	@ (8000c18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000be4:	4a0d      	ldr	r2, [pc, #52]	@ (8000c1c <LoopForever+0xe>)
  movs r3, #0
 8000be6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000be8:	e002      	b.n	8000bf0 <LoopCopyDataInit>

08000bea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bee:	3304      	adds	r3, #4

08000bf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bf4:	d3f9      	bcc.n	8000bea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bf6:	4a0a      	ldr	r2, [pc, #40]	@ (8000c20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bf8:	4c0a      	ldr	r4, [pc, #40]	@ (8000c24 <LoopForever+0x16>)
  movs r3, #0
 8000bfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bfc:	e001      	b.n	8000c02 <LoopFillZerobss>

08000bfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c00:	3204      	adds	r2, #4

08000c02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c04:	d3fb      	bcc.n	8000bfe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c06:	f00a fea5 	bl	800b954 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c0a:	f7ff fb43 	bl	8000294 <main>

08000c0e <LoopForever>:

LoopForever:
    b LoopForever
 8000c0e:	e7fe      	b.n	8000c0e <LoopForever>
  ldr   r0, =_estack
 8000c10:	20044000 	.word	0x20044000
  ldr r0, =_sdata
 8000c14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c18:	200001a0 	.word	0x200001a0
  ldr r2, =_sidata
 8000c1c:	0800ca68 	.word	0x0800ca68
  ldr r2, =_sbss
 8000c20:	200001a0 	.word	0x200001a0
  ldr r4, =_ebss
 8000c24:	20000ddc 	.word	0x20000ddc

08000c28 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c28:	e7fe      	b.n	8000c28 <ADC1_IRQHandler>
	...

08000c2c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c30:	2003      	movs	r0, #3
 8000c32:	f000 f98a 	bl	8000f4a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000c36:	f003 fd45 	bl	80046c4 <HAL_RCC_GetSysClockFreq>
 8000c3a:	4602      	mov	r2, r0
 8000c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c70 <HAL_Init+0x44>)
 8000c3e:	6a1b      	ldr	r3, [r3, #32]
 8000c40:	f003 030f 	and.w	r3, r3, #15
 8000c44:	490b      	ldr	r1, [pc, #44]	@ (8000c74 <HAL_Init+0x48>)
 8000c46:	5ccb      	ldrb	r3, [r1, r3]
 8000c48:	fa22 f303 	lsr.w	r3, r2, r3
 8000c4c:	4a0a      	ldr	r2, [pc, #40]	@ (8000c78 <HAL_Init+0x4c>)
 8000c4e:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000c50:	2004      	movs	r0, #4
 8000c52:	f000 f9cf 	bl	8000ff4 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c56:	200f      	movs	r0, #15
 8000c58:	f000 f810 	bl	8000c7c <HAL_InitTick>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	e002      	b.n	8000c6c <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000c66:	f7ff fd95 	bl	8000794 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c6a:	2300      	movs	r3, #0
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	44020c00 	.word	0x44020c00
 8000c74:	0800ca0c 	.word	0x0800ca0c
 8000c78:	20000004 	.word	0x20000004

08000c7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8000c84:	2300      	movs	r3, #0
 8000c86:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000c88:	4b33      	ldr	r3, [pc, #204]	@ (8000d58 <HAL_InitTick+0xdc>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d101      	bne.n	8000c94 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8000c90:	2301      	movs	r3, #1
 8000c92:	e05c      	b.n	8000d4e <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8000c94:	4b31      	ldr	r3, [pc, #196]	@ (8000d5c <HAL_InitTick+0xe0>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f003 0304 	and.w	r3, r3, #4
 8000c9c:	2b04      	cmp	r3, #4
 8000c9e:	d10c      	bne.n	8000cba <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8000ca0:	4b2f      	ldr	r3, [pc, #188]	@ (8000d60 <HAL_InitTick+0xe4>)
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	4b2c      	ldr	r3, [pc, #176]	@ (8000d58 <HAL_InitTick+0xdc>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	4619      	mov	r1, r3
 8000caa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	e037      	b.n	8000d2a <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8000cba:	f000 f9f3 	bl	80010a4 <HAL_SYSTICK_GetCLKSourceConfig>
 8000cbe:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	2b02      	cmp	r3, #2
 8000cc4:	d023      	beq.n	8000d0e <HAL_InitTick+0x92>
 8000cc6:	68bb      	ldr	r3, [r7, #8]
 8000cc8:	2b02      	cmp	r3, #2
 8000cca:	d82d      	bhi.n	8000d28 <HAL_InitTick+0xac>
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d003      	beq.n	8000cda <HAL_InitTick+0x5e>
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d00d      	beq.n	8000cf4 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8000cd8:	e026      	b.n	8000d28 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8000cda:	4b21      	ldr	r3, [pc, #132]	@ (8000d60 <HAL_InitTick+0xe4>)
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	4b1e      	ldr	r3, [pc, #120]	@ (8000d58 <HAL_InitTick+0xdc>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8000ce8:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cf0:	60fb      	str	r3, [r7, #12]
        break;
 8000cf2:	e01a      	b.n	8000d2a <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000cf4:	4b18      	ldr	r3, [pc, #96]	@ (8000d58 <HAL_InitTick+0xdc>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cfe:	fbb3 f3f2 	udiv	r3, r3, r2
 8000d02:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d0a:	60fb      	str	r3, [r7, #12]
        break;
 8000d0c:	e00d      	b.n	8000d2a <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000d0e:	4b12      	ldr	r3, [pc, #72]	@ (8000d58 <HAL_InitTick+0xdc>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	461a      	mov	r2, r3
 8000d14:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d18:	fbb3 f3f2 	udiv	r3, r3, r2
 8000d1c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d24:	60fb      	str	r3, [r7, #12]
        break;
 8000d26:	e000      	b.n	8000d2a <HAL_InitTick+0xae>
        break;
 8000d28:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8000d2a:	68f8      	ldr	r0, [r7, #12]
 8000d2c:	f000 f940 	bl	8000fb0 <HAL_SYSTICK_Config>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8000d36:	2301      	movs	r3, #1
 8000d38:	e009      	b.n	8000d4e <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	6879      	ldr	r1, [r7, #4]
 8000d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8000d42:	f000 f90d 	bl	8000f60 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8000d46:	4a07      	ldr	r2, [pc, #28]	@ (8000d64 <HAL_InitTick+0xe8>)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000d4c:	2300      	movs	r3, #0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3710      	adds	r7, #16
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	2000000c 	.word	0x2000000c
 8000d5c:	e000e010 	.word	0xe000e010
 8000d60:	20000004 	.word	0x20000004
 8000d64:	20000008 	.word	0x20000008

08000d68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d6c:	4b06      	ldr	r3, [pc, #24]	@ (8000d88 <HAL_IncTick+0x20>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	461a      	mov	r2, r3
 8000d72:	4b06      	ldr	r3, [pc, #24]	@ (8000d8c <HAL_IncTick+0x24>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4413      	add	r3, r2
 8000d78:	4a04      	ldr	r2, [pc, #16]	@ (8000d8c <HAL_IncTick+0x24>)
 8000d7a:	6013      	str	r3, [r2, #0]
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	2000000c 	.word	0x2000000c
 8000d8c:	200009a4 	.word	0x200009a4

08000d90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  return uwTick;
 8000d94:	4b03      	ldr	r3, [pc, #12]	@ (8000da4 <HAL_GetTick+0x14>)
 8000d96:	681b      	ldr	r3, [r3, #0]
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	200009a4 	.word	0x200009a4

08000da8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000db0:	f7ff ffee 	bl	8000d90 <HAL_GetTick>
 8000db4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dc0:	d005      	beq.n	8000dce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dc2:	4b0a      	ldr	r3, [pc, #40]	@ (8000dec <HAL_Delay+0x44>)
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	4413      	add	r3, r2
 8000dcc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dce:	bf00      	nop
 8000dd0:	f7ff ffde 	bl	8000d90 <HAL_GetTick>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	68fa      	ldr	r2, [r7, #12]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d8f7      	bhi.n	8000dd0 <HAL_Delay+0x28>
  {
  }
}
 8000de0:	bf00      	nop
 8000de2:	bf00      	nop
 8000de4:	3710      	adds	r7, #16
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	2000000c 	.word	0x2000000c

08000df0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f003 0307 	and.w	r3, r3, #7
 8000dfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e00:	4b0c      	ldr	r3, [pc, #48]	@ (8000e34 <__NVIC_SetPriorityGrouping+0x44>)
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e06:	68ba      	ldr	r2, [r7, #8]
 8000e08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e22:	4a04      	ldr	r2, [pc, #16]	@ (8000e34 <__NVIC_SetPriorityGrouping+0x44>)
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	60d3      	str	r3, [r2, #12]
}
 8000e28:	bf00      	nop
 8000e2a:	3714      	adds	r7, #20
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e3c:	4b04      	ldr	r3, [pc, #16]	@ (8000e50 <__NVIC_GetPriorityGrouping+0x18>)
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	0a1b      	lsrs	r3, r3, #8
 8000e42:	f003 0307 	and.w	r3, r3, #7
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000e5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	db0b      	blt.n	8000e7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e66:	88fb      	ldrh	r3, [r7, #6]
 8000e68:	f003 021f 	and.w	r2, r3, #31
 8000e6c:	4907      	ldr	r1, [pc, #28]	@ (8000e8c <__NVIC_EnableIRQ+0x38>)
 8000e6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e72:	095b      	lsrs	r3, r3, #5
 8000e74:	2001      	movs	r0, #1
 8000e76:	fa00 f202 	lsl.w	r2, r0, r2
 8000e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e7e:	bf00      	nop
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	e000e100 	.word	0xe000e100

08000e90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	6039      	str	r1, [r7, #0]
 8000e9a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000e9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	db0a      	blt.n	8000eba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	b2da      	uxtb	r2, r3
 8000ea8:	490c      	ldr	r1, [pc, #48]	@ (8000edc <__NVIC_SetPriority+0x4c>)
 8000eaa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000eae:	0112      	lsls	r2, r2, #4
 8000eb0:	b2d2      	uxtb	r2, r2
 8000eb2:	440b      	add	r3, r1
 8000eb4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eb8:	e00a      	b.n	8000ed0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	b2da      	uxtb	r2, r3
 8000ebe:	4908      	ldr	r1, [pc, #32]	@ (8000ee0 <__NVIC_SetPriority+0x50>)
 8000ec0:	88fb      	ldrh	r3, [r7, #6]
 8000ec2:	f003 030f 	and.w	r3, r3, #15
 8000ec6:	3b04      	subs	r3, #4
 8000ec8:	0112      	lsls	r2, r2, #4
 8000eca:	b2d2      	uxtb	r2, r2
 8000ecc:	440b      	add	r3, r1
 8000ece:	761a      	strb	r2, [r3, #24]
}
 8000ed0:	bf00      	nop
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	e000e100 	.word	0xe000e100
 8000ee0:	e000ed00 	.word	0xe000ed00

08000ee4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b089      	sub	sp, #36	@ 0x24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	f003 0307 	and.w	r3, r3, #7
 8000ef6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	f1c3 0307 	rsb	r3, r3, #7
 8000efe:	2b04      	cmp	r3, #4
 8000f00:	bf28      	it	cs
 8000f02:	2304      	movcs	r3, #4
 8000f04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	3304      	adds	r3, #4
 8000f0a:	2b06      	cmp	r3, #6
 8000f0c:	d902      	bls.n	8000f14 <NVIC_EncodePriority+0x30>
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	3b03      	subs	r3, #3
 8000f12:	e000      	b.n	8000f16 <NVIC_EncodePriority+0x32>
 8000f14:	2300      	movs	r3, #0
 8000f16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f18:	f04f 32ff 	mov.w	r2, #4294967295
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	43da      	mvns	r2, r3
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	401a      	ands	r2, r3
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	fa01 f303 	lsl.w	r3, r1, r3
 8000f36:	43d9      	mvns	r1, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f3c:	4313      	orrs	r3, r2
         );
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3724      	adds	r7, #36	@ 0x24
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b082      	sub	sp, #8
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f7ff ff4c 	bl	8000df0 <__NVIC_SetPriorityGrouping>
}
 8000f58:	bf00      	nop
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	607a      	str	r2, [r7, #4]
 8000f6c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f6e:	f7ff ff63 	bl	8000e38 <__NVIC_GetPriorityGrouping>
 8000f72:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f74:	687a      	ldr	r2, [r7, #4]
 8000f76:	68b9      	ldr	r1, [r7, #8]
 8000f78:	6978      	ldr	r0, [r7, #20]
 8000f7a:	f7ff ffb3 	bl	8000ee4 <NVIC_EncodePriority>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f84:	4611      	mov	r1, r2
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff ff82 	bl	8000e90 <__NVIC_SetPriority>
}
 8000f8c:	bf00      	nop
 8000f8e:	3718      	adds	r7, #24
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff ff56 	bl	8000e54 <__NVIC_EnableIRQ>
}
 8000fa8:	bf00      	nop
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	3b01      	subs	r3, #1
 8000fbc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fc0:	d301      	bcc.n	8000fc6 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e00d      	b.n	8000fe2 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8000fc6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ff0 <HAL_SYSTICK_Config+0x40>)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8000fce:	4b08      	ldr	r3, [pc, #32]	@ (8000ff0 <HAL_SYSTICK_Config+0x40>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8000fd4:	4b06      	ldr	r3, [pc, #24]	@ (8000ff0 <HAL_SYSTICK_Config+0x40>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a05      	ldr	r2, [pc, #20]	@ (8000ff0 <HAL_SYSTICK_Config+0x40>)
 8000fda:	f043 0303 	orr.w	r3, r3, #3
 8000fde:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	e000e010 	.word	0xe000e010

08000ff4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2b04      	cmp	r3, #4
 8001000:	d844      	bhi.n	800108c <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001002:	a201      	add	r2, pc, #4	@ (adr r2, 8001008 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001008:	0800102b 	.word	0x0800102b
 800100c:	08001049 	.word	0x08001049
 8001010:	0800106b 	.word	0x0800106b
 8001014:	0800108d 	.word	0x0800108d
 8001018:	0800101d 	.word	0x0800101d
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800101c:	4b1f      	ldr	r3, [pc, #124]	@ (800109c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a1e      	ldr	r2, [pc, #120]	@ (800109c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001022:	f043 0304 	orr.w	r3, r3, #4
 8001026:	6013      	str	r3, [r2, #0]
      break;
 8001028:	e031      	b.n	800108e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800102a:	4b1c      	ldr	r3, [pc, #112]	@ (800109c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a1b      	ldr	r2, [pc, #108]	@ (800109c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001030:	f023 0304 	bic.w	r3, r3, #4
 8001034:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8001036:	4b1a      	ldr	r3, [pc, #104]	@ (80010a0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001038:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800103c:	4a18      	ldr	r2, [pc, #96]	@ (80010a0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800103e:	f023 030c 	bic.w	r3, r3, #12
 8001042:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001046:	e022      	b.n	800108e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001048:	4b14      	ldr	r3, [pc, #80]	@ (800109c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a13      	ldr	r2, [pc, #76]	@ (800109c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800104e:	f023 0304 	bic.w	r3, r3, #4
 8001052:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8001054:	4b12      	ldr	r3, [pc, #72]	@ (80010a0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001056:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800105a:	f023 030c 	bic.w	r3, r3, #12
 800105e:	4a10      	ldr	r2, [pc, #64]	@ (80010a0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001060:	f043 0304 	orr.w	r3, r3, #4
 8001064:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001068:	e011      	b.n	800108e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800106a:	4b0c      	ldr	r3, [pc, #48]	@ (800109c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a0b      	ldr	r2, [pc, #44]	@ (800109c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001070:	f023 0304 	bic.w	r3, r3, #4
 8001074:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8001076:	4b0a      	ldr	r3, [pc, #40]	@ (80010a0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001078:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800107c:	f023 030c 	bic.w	r3, r3, #12
 8001080:	4a07      	ldr	r2, [pc, #28]	@ (80010a0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001082:	f043 0308 	orr.w	r3, r3, #8
 8001086:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800108a:	e000      	b.n	800108e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 800108c:	bf00      	nop
  }
}
 800108e:	bf00      	nop
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	e000e010 	.word	0xe000e010
 80010a0:	44020c00 	.word	0x44020c00

080010a4 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80010aa:	4b17      	ldr	r3, [pc, #92]	@ (8001108 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f003 0304 	and.w	r3, r3, #4
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d002      	beq.n	80010bc <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 80010b6:	2304      	movs	r3, #4
 80010b8:	607b      	str	r3, [r7, #4]
 80010ba:	e01e      	b.n	80010fa <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 80010bc:	4b13      	ldr	r3, [pc, #76]	@ (800110c <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 80010be:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80010c2:	f003 030c 	and.w	r3, r3, #12
 80010c6:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	2b08      	cmp	r3, #8
 80010cc:	d00f      	beq.n	80010ee <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	2b08      	cmp	r3, #8
 80010d2:	d80f      	bhi.n	80010f4 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d003      	beq.n	80010e2 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	2b04      	cmp	r3, #4
 80010de:	d003      	beq.n	80010e8 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80010e0:	e008      	b.n	80010f4 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80010e2:	2300      	movs	r3, #0
 80010e4:	607b      	str	r3, [r7, #4]
        break;
 80010e6:	e008      	b.n	80010fa <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80010e8:	2301      	movs	r3, #1
 80010ea:	607b      	str	r3, [r7, #4]
        break;
 80010ec:	e005      	b.n	80010fa <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80010ee:	2302      	movs	r3, #2
 80010f0:	607b      	str	r3, [r7, #4]
        break;
 80010f2:	e002      	b.n	80010fa <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80010f4:	2300      	movs	r3, #0
 80010f6:	607b      	str	r3, [r7, #4]
        break;
 80010f8:	bf00      	nop
    }
  }
  return systick_source;
 80010fa:	687b      	ldr	r3, [r7, #4]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	e000e010 	.word	0xe000e010
 800110c:	44020c00 	.word	0x44020c00

08001110 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d101      	bne.n	8001122 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e147      	b.n	80013b2 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001128:	b2db      	uxtb	r3, r3
 800112a:	2b00      	cmp	r3, #0
 800112c:	d106      	bne.n	800113c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2200      	movs	r2, #0
 8001132:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f7ff fb34 	bl	80007a4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	699a      	ldr	r2, [r3, #24]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f022 0210 	bic.w	r2, r2, #16
 800114a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800114c:	f7ff fe20 	bl	8000d90 <HAL_GetTick>
 8001150:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001152:	e012      	b.n	800117a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001154:	f7ff fe1c 	bl	8000d90 <HAL_GetTick>
 8001158:	4602      	mov	r2, r0
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b0a      	cmp	r3, #10
 8001160:	d90b      	bls.n	800117a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001166:	f043 0201 	orr.w	r2, r3, #1
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2203      	movs	r2, #3
 8001172:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e11b      	b.n	80013b2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	f003 0308 	and.w	r3, r3, #8
 8001184:	2b08      	cmp	r3, #8
 8001186:	d0e5      	beq.n	8001154 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	699a      	ldr	r2, [r3, #24]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f042 0201 	orr.w	r2, r2, #1
 8001196:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001198:	f7ff fdfa 	bl	8000d90 <HAL_GetTick>
 800119c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800119e:	e012      	b.n	80011c6 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80011a0:	f7ff fdf6 	bl	8000d90 <HAL_GetTick>
 80011a4:	4602      	mov	r2, r0
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	2b0a      	cmp	r3, #10
 80011ac:	d90b      	bls.n	80011c6 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011b2:	f043 0201 	orr.w	r2, r3, #1
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2203      	movs	r2, #3
 80011be:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e0f5      	b.n	80013b2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	f003 0301 	and.w	r3, r3, #1
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d0e5      	beq.n	80011a0 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	699a      	ldr	r2, [r3, #24]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f042 0202 	orr.w	r2, r2, #2
 80011e2:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a74      	ldr	r2, [pc, #464]	@ (80013bc <HAL_FDCAN_Init+0x2ac>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d103      	bne.n	80011f6 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80011ee:	4a74      	ldr	r2, [pc, #464]	@ (80013c0 <HAL_FDCAN_Init+0x2b0>)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	7c1b      	ldrb	r3, [r3, #16]
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d108      	bne.n	8001210 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	699a      	ldr	r2, [r3, #24]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800120c:	619a      	str	r2, [r3, #24]
 800120e:	e007      	b.n	8001220 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	699a      	ldr	r2, [r3, #24]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800121e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	7c5b      	ldrb	r3, [r3, #17]
 8001224:	2b01      	cmp	r3, #1
 8001226:	d108      	bne.n	800123a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	699a      	ldr	r2, [r3, #24]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001236:	619a      	str	r2, [r3, #24]
 8001238:	e007      	b.n	800124a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	699a      	ldr	r2, [r3, #24]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001248:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	7c9b      	ldrb	r3, [r3, #18]
 800124e:	2b01      	cmp	r3, #1
 8001250:	d108      	bne.n	8001264 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	699a      	ldr	r2, [r3, #24]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001260:	619a      	str	r2, [r3, #24]
 8001262:	e007      	b.n	8001274 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	699a      	ldr	r2, [r3, #24]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001272:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	699b      	ldr	r3, [r3, #24]
 800127a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	689a      	ldr	r2, [r3, #8]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	430a      	orrs	r2, r1
 8001288:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	699a      	ldr	r2, [r3, #24]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8001298:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	691a      	ldr	r2, [r3, #16]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f022 0210 	bic.w	r2, r2, #16
 80012a8:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	68db      	ldr	r3, [r3, #12]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d108      	bne.n	80012c4 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	699a      	ldr	r2, [r3, #24]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f042 0204 	orr.w	r2, r2, #4
 80012c0:	619a      	str	r2, [r3, #24]
 80012c2:	e02c      	b.n	800131e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d028      	beq.n	800131e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d01c      	beq.n	800130e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	699a      	ldr	r2, [r3, #24]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80012e2:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	691a      	ldr	r2, [r3, #16]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f042 0210 	orr.w	r2, r2, #16
 80012f2:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	2b03      	cmp	r3, #3
 80012fa:	d110      	bne.n	800131e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	699a      	ldr	r2, [r3, #24]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f042 0220 	orr.w	r2, r2, #32
 800130a:	619a      	str	r2, [r3, #24]
 800130c:	e007      	b.n	800131e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	699a      	ldr	r2, [r3, #24]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f042 0220 	orr.w	r2, r2, #32
 800131c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	699b      	ldr	r3, [r3, #24]
 8001322:	3b01      	subs	r3, #1
 8001324:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	69db      	ldr	r3, [r3, #28]
 800132a:	3b01      	subs	r3, #1
 800132c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800132e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6a1b      	ldr	r3, [r3, #32]
 8001334:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001336:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	695b      	ldr	r3, [r3, #20]
 800133e:	3b01      	subs	r3, #1
 8001340:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001346:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001348:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001352:	d115      	bne.n	8001380 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001358:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800135e:	3b01      	subs	r3, #1
 8001360:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001362:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001368:	3b01      	subs	r3, #1
 800136a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800136c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001374:	3b01      	subs	r3, #1
 8001376:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800137c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800137e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	430a      	orrs	r2, r1
 8001392:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f000 fc88 	bl	8001cac <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2200      	movs	r2, #0
 80013a0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2200      	movs	r2, #0
 80013a6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2201      	movs	r2, #1
 80013ac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	4000a400 	.word	0x4000a400
 80013c0:	4000a500 	.word	0x4000a500

080013c4 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b087      	sub	sp, #28
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80013d4:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80013d6:	7dfb      	ldrb	r3, [r7, #23]
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d002      	beq.n	80013e2 <HAL_FDCAN_ConfigFilter+0x1e>
 80013dc:	7dfb      	ldrb	r3, [r7, #23]
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d13d      	bne.n	800145e <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d119      	bne.n	800141e <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80013f6:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	691b      	ldr	r3, [r3, #16]
 80013fc:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 80013fe:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001404:	4313      	orrs	r3, r2
 8001406:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	4413      	add	r3, r2
 8001414:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	e01d      	b.n	800145a <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	075a      	lsls	r2, r3, #29
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	691b      	ldr	r3, [r3, #16]
 8001428:	4313      	orrs	r3, r2
 800142a:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	079a      	lsls	r2, r3, #30
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	695b      	ldr	r3, [r3, #20]
 8001436:	4313      	orrs	r3, r2
 8001438:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	00db      	lsls	r3, r3, #3
 8001444:	4413      	add	r3, r2
 8001446:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	3304      	adds	r3, #4
 8001452:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	68fa      	ldr	r2, [r7, #12]
 8001458:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800145a:	2300      	movs	r3, #0
 800145c:	e006      	b.n	800146c <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001462:	f043 0202 	orr.w	r2, r3, #2
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
  }
}
 800146c:	4618      	mov	r0, r3
 800146e:	371c      	adds	r7, #28
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	607a      	str	r2, [r7, #4]
 8001484:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800148c:	b2db      	uxtb	r3, r3
 800148e:	2b01      	cmp	r3, #1
 8001490:	d116      	bne.n	80014c0 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800149a:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	011a      	lsls	r2, r3, #4
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	431a      	orrs	r2, r3
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	431a      	orrs	r2, r3
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	431a      	orrs	r2, r3
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	430a      	orrs	r2, r1
 80014b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 80014bc:	2300      	movs	r3, #0
 80014be:	e006      	b.n	80014ce <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014c4:	f043 0204 	orr.w	r2, r3, #4
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
  }
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3714      	adds	r7, #20
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr

080014da <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80014da:	b480      	push	{r7}
 80014dc:	b083      	sub	sp, #12
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d110      	bne.n	8001510 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2202      	movs	r2, #2
 80014f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	699a      	ldr	r2, [r3, #24]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f022 0201 	bic.w	r2, r2, #1
 8001504:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2200      	movs	r2, #0
 800150a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 800150c:	2300      	movs	r3, #0
 800150e:	e006      	b.n	800151e <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001514:	f043 0204 	orr.w	r2, r3, #4
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
  }
}
 800151e:	4618      	mov	r0, r3
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr

0800152a <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b086      	sub	sp, #24
 800152e:	af00      	add	r7, sp, #0
 8001530:	60f8      	str	r0, [r7, #12]
 8001532:	60b9      	str	r1, [r7, #8]
 8001534:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800153c:	b2db      	uxtb	r3, r3
 800153e:	2b02      	cmp	r3, #2
 8001540:	d12c      	bne.n	800159c <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800154a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d007      	beq.n	8001562 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001556:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e023      	b.n	80015aa <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800156a:	0c1b      	lsrs	r3, r3, #16
 800156c:	f003 0303 	and.w	r3, r3, #3
 8001570:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	687a      	ldr	r2, [r7, #4]
 8001576:	68b9      	ldr	r1, [r7, #8]
 8001578:	68f8      	ldr	r0, [r7, #12]
 800157a:	f000 fbf9 	bl	8001d70 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2101      	movs	r1, #1
 8001584:	697a      	ldr	r2, [r7, #20]
 8001586:	fa01 f202 	lsl.w	r2, r1, r2
 800158a:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800158e:	2201      	movs	r2, #1
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	409a      	lsls	r2, r3
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8001598:	2300      	movs	r3, #0
 800159a:	e006      	b.n	80015aa <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015a0:	f043 0208 	orr.w	r2, r3, #8
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
  }
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3718      	adds	r7, #24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
	...

080015b4 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b08b      	sub	sp, #44	@ 0x2c
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	607a      	str	r2, [r7, #4]
 80015c0:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80015c2:	2300      	movs	r3, #0
 80015c4:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80015cc:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80015ce:	7efb      	ldrb	r3, [r7, #27]
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	f040 80e8 	bne.w	80017a6 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	2b40      	cmp	r3, #64	@ 0x40
 80015da:	d137      	bne.n	800164c <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015e4:	f003 030f 	and.w	r3, r3, #15
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d107      	bne.n	80015fc <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015f0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e0db      	b.n	80017b4 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001604:	0e1b      	lsrs	r3, r3, #24
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	2b01      	cmp	r3, #1
 800160c:	d10a      	bne.n	8001624 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001616:	0a5b      	lsrs	r3, r3, #9
 8001618:	f003 0301 	and.w	r3, r3, #1
 800161c:	2b01      	cmp	r3, #1
 800161e:	d101      	bne.n	8001624 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001620:	2301      	movs	r3, #1
 8001622:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800162c:	0a1b      	lsrs	r3, r3, #8
 800162e:	f003 0303 	and.w	r3, r3, #3
 8001632:	69fa      	ldr	r2, [r7, #28]
 8001634:	4413      	add	r3, r2
 8001636:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 800163c:	69fa      	ldr	r2, [r7, #28]
 800163e:	4613      	mov	r3, r2
 8001640:	00db      	lsls	r3, r3, #3
 8001642:	4413      	add	r3, r2
 8001644:	00db      	lsls	r3, r3, #3
 8001646:	440b      	add	r3, r1
 8001648:	627b      	str	r3, [r7, #36]	@ 0x24
 800164a:	e036      	b.n	80016ba <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001654:	f003 030f 	and.w	r3, r3, #15
 8001658:	2b00      	cmp	r3, #0
 800165a:	d107      	bne.n	800166c <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001660:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e0a3      	b.n	80017b4 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001674:	0e1b      	lsrs	r3, r3, #24
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	2b01      	cmp	r3, #1
 800167c:	d10a      	bne.n	8001694 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001686:	0a1b      	lsrs	r3, r3, #8
 8001688:	f003 0301 	and.w	r3, r3, #1
 800168c:	2b01      	cmp	r3, #1
 800168e:	d101      	bne.n	8001694 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001690:	2301      	movs	r3, #1
 8001692:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800169c:	0a1b      	lsrs	r3, r3, #8
 800169e:	f003 0303 	and.w	r3, r3, #3
 80016a2:	69fa      	ldr	r2, [r7, #28]
 80016a4:	4413      	add	r3, r2
 80016a6:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80016ac:	69fa      	ldr	r2, [r7, #28]
 80016ae:	4613      	mov	r3, r2
 80016b0:	00db      	lsls	r3, r3, #3
 80016b2:	4413      	add	r3, r2
 80016b4:	00db      	lsls	r3, r3, #3
 80016b6:	440b      	add	r3, r1
 80016b8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80016ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d107      	bne.n	80016de <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80016ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	0c9b      	lsrs	r3, r3, #18
 80016d4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	e005      	b.n	80016ea <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80016de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80016ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80016f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001704:	3304      	adds	r3, #4
 8001706:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	b29a      	uxth	r2, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8001712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	0c1b      	lsrs	r3, r3, #16
 8001718:	f003 020f 	and.w	r2, r3, #15
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800172c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8001738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	0e1b      	lsrs	r3, r3, #24
 800173e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8001746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	0fda      	lsrs	r2, r3, #31
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001752:	3304      	adds	r3, #4
 8001754:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001758:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800175a:	2300      	movs	r3, #0
 800175c:	623b      	str	r3, [r7, #32]
 800175e:	e00a      	b.n	8001776 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001760:	697a      	ldr	r2, [r7, #20]
 8001762:	6a3b      	ldr	r3, [r7, #32]
 8001764:	441a      	add	r2, r3
 8001766:	6839      	ldr	r1, [r7, #0]
 8001768:	6a3b      	ldr	r3, [r7, #32]
 800176a:	440b      	add	r3, r1
 800176c:	7812      	ldrb	r2, [r2, #0]
 800176e:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001770:	6a3b      	ldr	r3, [r7, #32]
 8001772:	3301      	adds	r3, #1
 8001774:	623b      	str	r3, [r7, #32]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	68db      	ldr	r3, [r3, #12]
 800177a:	4a11      	ldr	r2, [pc, #68]	@ (80017c0 <HAL_FDCAN_GetRxMessage+0x20c>)
 800177c:	5cd3      	ldrb	r3, [r2, r3]
 800177e:	461a      	mov	r2, r3
 8001780:	6a3b      	ldr	r3, [r7, #32]
 8001782:	4293      	cmp	r3, r2
 8001784:	d3ec      	bcc.n	8001760 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	2b40      	cmp	r3, #64	@ 0x40
 800178a:	d105      	bne.n	8001798 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	69fa      	ldr	r2, [r7, #28]
 8001792:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8001796:	e004      	b.n	80017a2 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	69fa      	ldr	r2, [r7, #28]
 800179e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 80017a2:	2300      	movs	r3, #0
 80017a4:	e006      	b.n	80017b4 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017aa:	f043 0208 	orr.w	r2, r3, #8
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
  }
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	372c      	adds	r7, #44	@ 0x2c
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	0800ca1c 	.word	0x0800ca1c

080017c4 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b087      	sub	sp, #28
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80017d6:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80017d8:	7dfb      	ldrb	r3, [r7, #23]
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d003      	beq.n	80017e6 <HAL_FDCAN_ActivateNotification+0x22>
 80017de:	7dfb      	ldrb	r3, [r7, #23]
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	f040 80c8 	bne.w	8001976 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ec:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	f003 0307 	and.w	r3, r3, #7
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d004      	beq.n	8001802 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d03b      	beq.n	800187a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001808:	2b00      	cmp	r3, #0
 800180a:	d004      	beq.n	8001816 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d031      	beq.n	800187a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 800181c:	2b00      	cmp	r3, #0
 800181e:	d004      	beq.n	800182a <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	f003 0304 	and.w	r3, r3, #4
 8001826:	2b00      	cmp	r3, #0
 8001828:	d027      	beq.n	800187a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001830:	2b00      	cmp	r3, #0
 8001832:	d004      	beq.n	800183e <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	f003 0308 	and.w	r3, r3, #8
 800183a:	2b00      	cmp	r3, #0
 800183c:	d01d      	beq.n	800187a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001844:	2b00      	cmp	r3, #0
 8001846:	d004      	beq.n	8001852 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	f003 0310 	and.w	r3, r3, #16
 800184e:	2b00      	cmp	r3, #0
 8001850:	d013      	beq.n	800187a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001858:	2b00      	cmp	r3, #0
 800185a:	d004      	beq.n	8001866 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	f003 0320 	and.w	r3, r3, #32
 8001862:	2b00      	cmp	r3, #0
 8001864:	d009      	beq.n	800187a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800186c:	2b00      	cmp	r3, #0
 800186e:	d00c      	beq.n	800188a <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001876:	2b00      	cmp	r3, #0
 8001878:	d107      	bne.n	800188a <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f042 0201 	orr.w	r2, r2, #1
 8001888:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	f003 0307 	and.w	r3, r3, #7
 8001890:	2b00      	cmp	r3, #0
 8001892:	d004      	beq.n	800189e <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	2b00      	cmp	r3, #0
 800189c:	d13b      	bne.n	8001916 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d004      	beq.n	80018b2 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	f003 0302 	and.w	r3, r3, #2
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d131      	bne.n	8001916 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d004      	beq.n	80018c6 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	f003 0304 	and.w	r3, r3, #4
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d127      	bne.n	8001916 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d004      	beq.n	80018da <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	f003 0308 	and.w	r3, r3, #8
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d11d      	bne.n	8001916 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d004      	beq.n	80018ee <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	f003 0310 	and.w	r3, r3, #16
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d113      	bne.n	8001916 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d004      	beq.n	8001902 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	f003 0320 	and.w	r3, r3, #32
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d109      	bne.n	8001916 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001908:	2b00      	cmp	r3, #0
 800190a:	d00c      	beq.n	8001926 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001912:	2b00      	cmp	r3, #0
 8001914:	d007      	beq.n	8001926 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f042 0202 	orr.w	r2, r2, #2
 8001924:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800192c:	2b00      	cmp	r3, #0
 800192e:	d009      	beq.n	8001944 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	430a      	orrs	r2, r1
 8001940:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800194a:	2b00      	cmp	r3, #0
 800194c:	d009      	beq.n	8001962 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	430a      	orrs	r2, r1
 800195e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	68ba      	ldr	r2, [r7, #8]
 800196e:	430a      	orrs	r2, r1
 8001970:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8001972:	2300      	movs	r3, #0
 8001974:	e006      	b.n	8001984 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800197a:	f043 0202 	orr.w	r2, r3, #2
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
  }
}
 8001984:	4618      	mov	r0, r3
 8001986:	371c      	adds	r7, #28
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b08c      	sub	sp, #48	@ 0x30
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800199e:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 80019a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80019ac:	4013      	ands	r3, r2
 80019ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80019b6:	f003 0307 	and.w	r3, r3, #7
 80019ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80019c4:	4013      	ands	r3, r2
 80019c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80019ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80019d2:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019dc:	4013      	ands	r3, r2
 80019de:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80019e6:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 80019ea:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019f2:	6a3a      	ldr	r2, [r7, #32]
 80019f4:	4013      	ands	r3, r2
 80019f6:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80019fe:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001a02:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a0a:	69fa      	ldr	r2, [r7, #28]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a16:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a1e:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d00b      	beq.n	8001a42 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d006      	beq.n	8001a42 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2240      	movs	r2, #64	@ 0x40
 8001a3a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f000 f916 	bl	8001c6e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d019      	beq.n	8001a80 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d014      	beq.n	8001a80 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001a5e:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a76:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001a78:	6939      	ldr	r1, [r7, #16]
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f000 f8d8 	bl	8001c30 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001a80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d007      	beq.n	8001a96 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a8c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001a8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f000 f8a2 	bl	8001bda <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001a96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d007      	beq.n	8001aac <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001aa2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001aa4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f7fe fe50 	bl	800074c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d007      	beq.n	8001ac2 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ab8:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001aba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f000 f897 	bl	8001bf0 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d00c      	beq.n	8001ae6 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d007      	beq.n	8001ae6 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ade:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f000 f890 	bl	8001c06 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d018      	beq.n	8001b22 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d013      	beq.n	8001b22 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001b02:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001b0c:	68fa      	ldr	r2, [r7, #12]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	2280      	movs	r2, #128	@ 0x80
 8001b18:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001b1a:	68f9      	ldr	r1, [r7, #12]
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f000 f87c 	bl	8001c1a <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d00c      	beq.n	8001b46 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d007      	beq.n	8001b46 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b3e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f000 f880 	bl	8001c46 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d00c      	beq.n	8001b6a <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d007      	beq.n	8001b6a <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001b62:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f000 f878 	bl	8001c5a <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d00f      	beq.n	8001b94 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d00a      	beq.n	8001b94 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b86:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b8c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d007      	beq.n	8001baa <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	69fa      	ldr	r2, [r7, #28]
 8001ba0:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001ba2:	69f9      	ldr	r1, [r7, #28]
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f000 f876 	bl	8001c96 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001baa:	6a3b      	ldr	r3, [r7, #32]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d009      	beq.n	8001bc4 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	6a3a      	ldr	r2, [r7, #32]
 8001bb6:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001bbc:	6a3b      	ldr	r3, [r7, #32]
 8001bbe:	431a      	orrs	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d002      	beq.n	8001bd2 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f000 f858 	bl	8001c82 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001bd2:	bf00      	nop
 8001bd4:	3730      	adds	r7, #48	@ 0x30
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	b083      	sub	sp, #12
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
 8001be2:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001c06:	b480      	push	{r7}
 8001c08:	b083      	sub	sp, #12
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001c0e:	bf00      	nop
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr

08001c1a <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
 8001c22:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001c3a:	bf00      	nop
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr

08001c46 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001c46:	b480      	push	{r7}
 8001c48:	b083      	sub	sp, #12
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001c4e:	bf00      	nop
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr

08001c5a <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	b083      	sub	sp, #12
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001c62:	bf00      	nop
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr

08001c6e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b083      	sub	sp, #12
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001c76:	bf00      	nop
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr

08001c82 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001c82:	b480      	push	{r7}
 8001c84:	b083      	sub	sp, #12
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001c8a:	bf00      	nop
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr

08001c96 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001c96:	b480      	push	{r7}
 8001c98:	b083      	sub	sp, #12
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
 8001c9e:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001ca0:	bf00      	nop
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001cb4:	4b2c      	ldr	r3, [pc, #176]	@ (8001d68 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 8001cb6:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a2b      	ldr	r2, [pc, #172]	@ (8001d6c <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d103      	bne.n	8001cca <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001cc8:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	68ba      	ldr	r2, [r7, #8]
 8001cce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001cd8:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ce0:	041a      	lsls	r2, r3, #16
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001cfe:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d06:	061a      	lsls	r2, r3, #24
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	430a      	orrs	r2, r1
 8001d0e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	60fb      	str	r3, [r7, #12]
 8001d3e:	e005      	b.n	8001d4c <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2200      	movs	r2, #0
 8001d44:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	3304      	adds	r3, #4
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001d52:	68fa      	ldr	r2, [r7, #12]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d3f3      	bcc.n	8001d40 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 8001d58:	bf00      	nop
 8001d5a:	bf00      	nop
 8001d5c:	3714      	adds	r7, #20
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	4000ac00 	.word	0x4000ac00
 8001d6c:	4000a800 	.word	0x4000a800

08001d70 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b089      	sub	sp, #36	@ 0x24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	60b9      	str	r1, [r7, #8]
 8001d7a:	607a      	str	r2, [r7, #4]
 8001d7c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d10a      	bne.n	8001d9c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8001d8e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001d96:	4313      	orrs	r3, r2
 8001d98:	61fb      	str	r3, [r7, #28]
 8001d9a:	e00a      	b.n	8001db2 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8001da4:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8001daa:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001dac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001db0:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	6a1b      	ldr	r3, [r3, #32]
 8001db6:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001dbc:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8001dc2:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8001dc8:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001dd8:	683a      	ldr	r2, [r7, #0]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	00db      	lsls	r3, r3, #3
 8001dde:	4413      	add	r3, r2
 8001de0:	00db      	lsls	r3, r3, #3
 8001de2:	440b      	add	r3, r1
 8001de4:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	69fa      	ldr	r2, [r7, #28]
 8001dea:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	3304      	adds	r3, #4
 8001df0:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	3304      	adds	r3, #4
 8001dfc:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8001dfe:	2300      	movs	r3, #0
 8001e00:	617b      	str	r3, [r7, #20]
 8001e02:	e020      	b.n	8001e46 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	3303      	adds	r3, #3
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	3302      	adds	r3, #2
 8001e14:	6879      	ldr	r1, [r7, #4]
 8001e16:	440b      	add	r3, r1
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001e1c:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	3301      	adds	r3, #1
 8001e22:	6879      	ldr	r1, [r7, #4]
 8001e24:	440b      	add	r3, r1
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001e2a:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8001e2c:	6879      	ldr	r1, [r7, #4]
 8001e2e:	697a      	ldr	r2, [r7, #20]
 8001e30:	440a      	add	r2, r1
 8001e32:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001e34:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	3304      	adds	r3, #4
 8001e3e:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	3304      	adds	r3, #4
 8001e44:	617b      	str	r3, [r7, #20]
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	4a06      	ldr	r2, [pc, #24]	@ (8001e64 <FDCAN_CopyMessageToRAM+0xf4>)
 8001e4c:	5cd3      	ldrb	r3, [r2, r3]
 8001e4e:	461a      	mov	r2, r3
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d3d6      	bcc.n	8001e04 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8001e56:	bf00      	nop
 8001e58:	bf00      	nop
 8001e5a:	3724      	adds	r7, #36	@ 0x24
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr
 8001e64:	0800ca1c 	.word	0x0800ca1c

08001e68 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b087      	sub	sp, #28
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001e72:	2300      	movs	r3, #0
 8001e74:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001e76:	e136      	b.n	80020e6 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	2101      	movs	r1, #1
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	fa01 f303 	lsl.w	r3, r1, r3
 8001e84:	4013      	ands	r3, r2
 8001e86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	f000 8128 	beq.w	80020e0 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d003      	beq.n	8001ea0 <HAL_GPIO_Init+0x38>
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	2b12      	cmp	r3, #18
 8001e9e:	d125      	bne.n	8001eec <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	08da      	lsrs	r2, r3, #3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	3208      	adds	r2, #8
 8001ea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eac:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	f003 0307 	and.w	r3, r3, #7
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	220f      	movs	r2, #15
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	697a      	ldr	r2, [r7, #20]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	f003 020f 	and.w	r2, r3, #15
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	f003 0307 	and.w	r3, r3, #7
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	697a      	ldr	r2, [r7, #20]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	08da      	lsrs	r2, r3, #3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	3208      	adds	r2, #8
 8001ee6:	6979      	ldr	r1, [r7, #20]
 8001ee8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	2203      	movs	r2, #3
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	43db      	mvns	r3, r3
 8001efe:	697a      	ldr	r2, [r7, #20]
 8001f00:	4013      	ands	r3, r2
 8001f02:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f003 0203 	and.w	r2, r3, #3
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	697a      	ldr	r2, [r7, #20]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	697a      	ldr	r2, [r7, #20]
 8001f1e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d00b      	beq.n	8001f40 <HAL_GPIO_Init+0xd8>
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d007      	beq.n	8001f40 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f34:	2b11      	cmp	r3, #17
 8001f36:	d003      	beq.n	8001f40 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	2b12      	cmp	r3, #18
 8001f3e:	d130      	bne.n	8001fa2 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	2203      	movs	r2, #3
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	43db      	mvns	r3, r3
 8001f52:	697a      	ldr	r2, [r7, #20]
 8001f54:	4013      	ands	r3, r2
 8001f56:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	68da      	ldr	r2, [r3, #12]
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	697a      	ldr	r2, [r7, #20]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	697a      	ldr	r2, [r7, #20]
 8001f6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f76:	2201      	movs	r2, #1
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	697a      	ldr	r2, [r7, #20]
 8001f82:	4013      	ands	r3, r2
 8001f84:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	091b      	lsrs	r3, r3, #4
 8001f8c:	f003 0201 	and.w	r2, r3, #1
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	fa02 f303 	lsl.w	r3, r2, r3
 8001f96:	697a      	ldr	r2, [r7, #20]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	697a      	ldr	r2, [r7, #20]
 8001fa0:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	2b03      	cmp	r3, #3
 8001fa8:	d017      	beq.n	8001fda <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	2203      	movs	r2, #3
 8001fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fba:	43db      	mvns	r3, r3
 8001fbc:	697a      	ldr	r2, [r7, #20]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	689a      	ldr	r2, [r3, #8]
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	fa02 f303 	lsl.w	r3, r2, r3
 8001fce:	697a      	ldr	r2, [r7, #20]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	697a      	ldr	r2, [r7, #20]
 8001fd8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d07c      	beq.n	80020e0 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001fe6:	4a47      	ldr	r2, [pc, #284]	@ (8002104 <HAL_GPIO_Init+0x29c>)
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	089b      	lsrs	r3, r3, #2
 8001fec:	3318      	adds	r3, #24
 8001fee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ff2:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	f003 0303 	and.w	r3, r3, #3
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	220f      	movs	r2, #15
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	43db      	mvns	r3, r3
 8002004:	697a      	ldr	r2, [r7, #20]
 8002006:	4013      	ands	r3, r2
 8002008:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	0a9a      	lsrs	r2, r3, #10
 800200e:	4b3e      	ldr	r3, [pc, #248]	@ (8002108 <HAL_GPIO_Init+0x2a0>)
 8002010:	4013      	ands	r3, r2
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	f002 0203 	and.w	r2, r2, #3
 8002018:	00d2      	lsls	r2, r2, #3
 800201a:	4093      	lsls	r3, r2
 800201c:	697a      	ldr	r2, [r7, #20]
 800201e:	4313      	orrs	r3, r2
 8002020:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002022:	4938      	ldr	r1, [pc, #224]	@ (8002104 <HAL_GPIO_Init+0x29c>)
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	089b      	lsrs	r3, r3, #2
 8002028:	3318      	adds	r3, #24
 800202a:	697a      	ldr	r2, [r7, #20]
 800202c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002030:	4b34      	ldr	r3, [pc, #208]	@ (8002104 <HAL_GPIO_Init+0x29c>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	43db      	mvns	r3, r3
 800203a:	697a      	ldr	r2, [r7, #20]
 800203c:	4013      	ands	r3, r2
 800203e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d003      	beq.n	8002054 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 800204c:	697a      	ldr	r2, [r7, #20]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	4313      	orrs	r3, r2
 8002052:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8002054:	4a2b      	ldr	r2, [pc, #172]	@ (8002104 <HAL_GPIO_Init+0x29c>)
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800205a:	4b2a      	ldr	r3, [pc, #168]	@ (8002104 <HAL_GPIO_Init+0x29c>)
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	43db      	mvns	r3, r3
 8002064:	697a      	ldr	r2, [r7, #20]
 8002066:	4013      	ands	r3, r2
 8002068:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d003      	beq.n	800207e <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8002076:	697a      	ldr	r2, [r7, #20]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	4313      	orrs	r3, r2
 800207c:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800207e:	4a21      	ldr	r2, [pc, #132]	@ (8002104 <HAL_GPIO_Init+0x29c>)
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002084:	4b1f      	ldr	r3, [pc, #124]	@ (8002104 <HAL_GPIO_Init+0x29c>)
 8002086:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800208a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	43db      	mvns	r3, r3
 8002090:	697a      	ldr	r2, [r7, #20]
 8002092:	4013      	ands	r3, r2
 8002094:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d003      	beq.n	80020aa <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 80020a2:	697a      	ldr	r2, [r7, #20]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80020aa:	4a16      	ldr	r2, [pc, #88]	@ (8002104 <HAL_GPIO_Init+0x29c>)
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80020b2:	4b14      	ldr	r3, [pc, #80]	@ (8002104 <HAL_GPIO_Init+0x29c>)
 80020b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80020b8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	43db      	mvns	r3, r3
 80020be:	697a      	ldr	r2, [r7, #20]
 80020c0:	4013      	ands	r3, r2
 80020c2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d003      	beq.n	80020d8 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 80020d0:	697a      	ldr	r2, [r7, #20]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80020d8:	4a0a      	ldr	r2, [pc, #40]	@ (8002104 <HAL_GPIO_Init+0x29c>)
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	3301      	adds	r3, #1
 80020e4:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	fa22 f303 	lsr.w	r3, r2, r3
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f47f aec1 	bne.w	8001e78 <HAL_GPIO_Init+0x10>
  }
}
 80020f6:	bf00      	nop
 80020f8:	bf00      	nop
 80020fa:	371c      	adds	r7, #28
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr
 8002104:	44022000 	.word	0x44022000
 8002108:	002f7f7f 	.word	0x002f7f7f

0800210c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	460b      	mov	r3, r1
 8002116:	807b      	strh	r3, [r7, #2]
 8002118:	4613      	mov	r3, r2
 800211a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800211c:	787b      	ldrb	r3, [r7, #1]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d003      	beq.n	800212a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002122:	887a      	ldrh	r2, [r7, #2]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002128:	e002      	b.n	8002130 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800212a:	887a      	ldrh	r2, [r7, #2]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <PCD_GET_EP_RX_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_RX_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 800213c:	b480      	push	{r7}
 800213e:	b085      	sub	sp, #20
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	460b      	mov	r3, r1
 8002146:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8002148:	230a      	movs	r3, #10
 800214a:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 800214c:	e002      	b.n	8002154 <PCD_GET_EP_RX_CNT+0x18>
  {
    count--;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	3b01      	subs	r3, #1
 8002152:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d1f9      	bne.n	800214e <PCD_GET_EP_RX_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_RX_CNT((Instance), (bEpNum));
 800215a:	887b      	ldrh	r3, [r7, #2]
 800215c:	00db      	lsls	r3, r3, #3
 800215e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002162:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	0c1b      	lsrs	r3, r3, #16
 800216a:	b29b      	uxth	r3, r3
 800216c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002170:	b29b      	uxth	r3, r3
}
 8002172:	4618      	mov	r0, r3
 8002174:	3714      	adds	r7, #20
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <PCD_GET_EP_DBUF0_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF0_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 800217e:	b480      	push	{r7}
 8002180:	b085      	sub	sp, #20
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
 8002186:	460b      	mov	r3, r1
 8002188:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 800218a:	230a      	movs	r3, #10
 800218c:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 800218e:	e002      	b.n	8002196 <PCD_GET_EP_DBUF0_CNT+0x18>
  {
    count--;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	3b01      	subs	r3, #1
 8002194:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d1f9      	bne.n	8002190 <PCD_GET_EP_DBUF0_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF0_CNT((Instance), (bEpNum));
 800219c:	887b      	ldrh	r3, [r7, #2]
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80021a4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	0c1b      	lsrs	r3, r3, #16
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021b2:	b29b      	uxth	r3, r3
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3714      	adds	r7, #20
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <PCD_GET_EP_DBUF1_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF1_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	460b      	mov	r3, r1
 80021ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 80021cc:	230a      	movs	r3, #10
 80021ce:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 80021d0:	e002      	b.n	80021d8 <PCD_GET_EP_DBUF1_CNT+0x18>
  {
    count--;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	3b01      	subs	r3, #1
 80021d6:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d1f9      	bne.n	80021d2 <PCD_GET_EP_DBUF1_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF1_CNT((Instance), (bEpNum));
 80021de:	887b      	ldrh	r3, [r7, #2]
 80021e0:	00db      	lsls	r3, r3, #3
 80021e2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80021e6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	0c1b      	lsrs	r3, r3, #16
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021f4:	b29b      	uxth	r3, r3
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3714      	adds	r7, #20
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr

08002202 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b086      	sub	sp, #24
 8002206:	af02      	add	r7, sp, #8
 8002208:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d101      	bne.n	8002214 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e0c3      	b.n	800239c <HAL_PCD_Init+0x19a>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f893 3295 	ldrb.w	r3, [r3, #661]	@ 0x295
 800221a:	b2db      	uxtb	r3, r3
 800221c:	2b00      	cmp	r3, #0
 800221e:	d106      	bne.n	800222e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f7fe fb2d 	bl	8000888 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2203      	movs	r2, #3
 8002232:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4618      	mov	r0, r3
 800223c:	f003 fe8e 	bl	8005f5c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002240:	2300      	movs	r3, #0
 8002242:	73fb      	strb	r3, [r7, #15]
 8002244:	e03f      	b.n	80022c6 <HAL_PCD_Init+0xc4>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002246:	7bfa      	ldrb	r2, [r7, #15]
 8002248:	6879      	ldr	r1, [r7, #4]
 800224a:	4613      	mov	r3, r2
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	4413      	add	r3, r2
 8002250:	00db      	lsls	r3, r3, #3
 8002252:	440b      	add	r3, r1
 8002254:	3315      	adds	r3, #21
 8002256:	2201      	movs	r2, #1
 8002258:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800225a:	7bfa      	ldrb	r2, [r7, #15]
 800225c:	6879      	ldr	r1, [r7, #4]
 800225e:	4613      	mov	r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	4413      	add	r3, r2
 8002264:	00db      	lsls	r3, r3, #3
 8002266:	440b      	add	r3, r1
 8002268:	3314      	adds	r3, #20
 800226a:	7bfa      	ldrb	r2, [r7, #15]
 800226c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800226e:	7bfa      	ldrb	r2, [r7, #15]
 8002270:	6879      	ldr	r1, [r7, #4]
 8002272:	4613      	mov	r3, r2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	4413      	add	r3, r2
 8002278:	00db      	lsls	r3, r3, #3
 800227a:	440b      	add	r3, r1
 800227c:	3317      	adds	r3, #23
 800227e:	2200      	movs	r2, #0
 8002280:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002282:	7bfa      	ldrb	r2, [r7, #15]
 8002284:	6879      	ldr	r1, [r7, #4]
 8002286:	4613      	mov	r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	4413      	add	r3, r2
 800228c:	00db      	lsls	r3, r3, #3
 800228e:	440b      	add	r3, r1
 8002290:	3324      	adds	r3, #36	@ 0x24
 8002292:	2200      	movs	r2, #0
 8002294:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002296:	7bfa      	ldrb	r2, [r7, #15]
 8002298:	6879      	ldr	r1, [r7, #4]
 800229a:	4613      	mov	r3, r2
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	4413      	add	r3, r2
 80022a0:	00db      	lsls	r3, r3, #3
 80022a2:	440b      	add	r3, r1
 80022a4:	3328      	adds	r3, #40	@ 0x28
 80022a6:	2200      	movs	r2, #0
 80022a8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80022aa:	7bfb      	ldrb	r3, [r7, #15]
 80022ac:	6879      	ldr	r1, [r7, #4]
 80022ae:	1c5a      	adds	r2, r3, #1
 80022b0:	4613      	mov	r3, r2
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	4413      	add	r3, r2
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	440b      	add	r3, r1
 80022ba:	3304      	adds	r3, #4
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022c0:	7bfb      	ldrb	r3, [r7, #15]
 80022c2:	3301      	adds	r3, #1
 80022c4:	73fb      	strb	r3, [r7, #15]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	791b      	ldrb	r3, [r3, #4]
 80022ca:	7bfa      	ldrb	r2, [r7, #15]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d3ba      	bcc.n	8002246 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022d0:	2300      	movs	r3, #0
 80022d2:	73fb      	strb	r3, [r7, #15]
 80022d4:	e044      	b.n	8002360 <HAL_PCD_Init+0x15e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80022d6:	7bfa      	ldrb	r2, [r7, #15]
 80022d8:	6879      	ldr	r1, [r7, #4]
 80022da:	4613      	mov	r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	4413      	add	r3, r2
 80022e0:	00db      	lsls	r3, r3, #3
 80022e2:	440b      	add	r3, r1
 80022e4:	f203 1355 	addw	r3, r3, #341	@ 0x155
 80022e8:	2200      	movs	r2, #0
 80022ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80022ec:	7bfa      	ldrb	r2, [r7, #15]
 80022ee:	6879      	ldr	r1, [r7, #4]
 80022f0:	4613      	mov	r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	4413      	add	r3, r2
 80022f6:	00db      	lsls	r3, r3, #3
 80022f8:	440b      	add	r3, r1
 80022fa:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80022fe:	7bfa      	ldrb	r2, [r7, #15]
 8002300:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002302:	7bfa      	ldrb	r2, [r7, #15]
 8002304:	6879      	ldr	r1, [r7, #4]
 8002306:	4613      	mov	r3, r2
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	4413      	add	r3, r2
 800230c:	00db      	lsls	r3, r3, #3
 800230e:	440b      	add	r3, r1
 8002310:	f203 1357 	addw	r3, r3, #343	@ 0x157
 8002314:	2200      	movs	r2, #0
 8002316:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002318:	7bfa      	ldrb	r2, [r7, #15]
 800231a:	6879      	ldr	r1, [r7, #4]
 800231c:	4613      	mov	r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	4413      	add	r3, r2
 8002322:	00db      	lsls	r3, r3, #3
 8002324:	440b      	add	r3, r1
 8002326:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800232a:	2200      	movs	r2, #0
 800232c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800232e:	7bfa      	ldrb	r2, [r7, #15]
 8002330:	6879      	ldr	r1, [r7, #4]
 8002332:	4613      	mov	r3, r2
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	4413      	add	r3, r2
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	440b      	add	r3, r1
 800233c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002344:	7bfa      	ldrb	r2, [r7, #15]
 8002346:	6879      	ldr	r1, [r7, #4]
 8002348:	4613      	mov	r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	4413      	add	r3, r2
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	440b      	add	r3, r1
 8002352:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8002356:	2200      	movs	r2, #0
 8002358:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800235a:	7bfb      	ldrb	r3, [r7, #15]
 800235c:	3301      	adds	r3, #1
 800235e:	73fb      	strb	r3, [r7, #15]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	791b      	ldrb	r3, [r3, #4]
 8002364:	7bfa      	ldrb	r2, [r7, #15]
 8002366:	429a      	cmp	r2, r3
 8002368:	d3b5      	bcc.n	80022d6 <HAL_PCD_Init+0xd4>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6818      	ldr	r0, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	7c1a      	ldrb	r2, [r3, #16]
 8002372:	f88d 2000 	strb.w	r2, [sp]
 8002376:	3304      	adds	r3, #4
 8002378:	cb0e      	ldmia	r3, {r1, r2, r3}
 800237a:	f003 fe27 	bl	8005fcc <USB_DevInit>

  hpcd->USB_Address = 0U;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	7b1b      	ldrb	r3, [r3, #12]
 8002390:	2b01      	cmp	r3, #1
 8002392:	d102      	bne.n	800239a <HAL_PCD_Init+0x198>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f001 fb66 	bl	8003a66 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800239a:	2300      	movs	r3, #0
}
 800239c:	4618      	mov	r0, r3
 800239e:	3710      	adds	r7, #16
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d101      	bne.n	80023ba <HAL_PCD_Start+0x16>
 80023b6:	2302      	movs	r3, #2
 80023b8:	e012      	b.n	80023e0 <HAL_PCD_Start+0x3c>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2201      	movs	r2, #1
 80023be:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  __HAL_PCD_ENABLE(hpcd);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f003 fdb4 	bl	8005f34 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f005 fc60 	bl	8007c96 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 80023de:	2300      	movs	r3, #0
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3708      	adds	r7, #8
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f005 fc5f 	bl	8007cb8 <USB_ReadInterrupts>
 80023fa:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d003      	beq.n	800240e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f000 faf2 	bl	80029f0 <PCD_EP_ISR_Handler>

    return;
 800240c:	e0de      	b.n	80025cc <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002414:	2b00      	cmp	r3, #0
 8002416:	d010      	beq.n	800243a <HAL_PCD_IRQHandler+0x52>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	f64f 33ff 	movw	r3, #64511	@ 0xfbff
 8002426:	400b      	ands	r3, r1
 8002428:	6453      	str	r3, [r2, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f007 fa5e 	bl	80098ec <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002430:	2100      	movs	r1, #0
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 f8e1 	bl	80025fa <HAL_PCD_SetAddress>

    return;
 8002438:	e0c8      	b.n	80025cc <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d009      	beq.n	8002458 <HAL_PCD_IRQHandler+0x70>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	f64b 73ff 	movw	r3, #49151	@ 0xbfff
 8002452:	400b      	ands	r3, r1
 8002454:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8002456:	e0b9      	b.n	80025cc <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d009      	beq.n	8002476 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	f64d 73ff 	movw	r3, #57343	@ 0xdfff
 8002470:	400b      	ands	r3, r1
 8002472:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8002474:	e0aa      	b.n	80025cc <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d029      	beq.n	80024d4 <HAL_PCD_IRQHandler+0xec>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPRDY);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f022 0204 	bic.w	r2, r2, #4
 800248e:	641a      	str	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPEN);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f022 0208 	bic.w	r2, r2, #8
 800249e:	641a      	str	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d107      	bne.n	80024ba <HAL_PCD_IRQHandler+0xd2>
    {
      hpcd->LPM_State = LPM_L0;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80024b2:	2100      	movs	r1, #0
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f001 faf8 	bl	8003aaa <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f000 f893 	bl	80025e6 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 80024ce:	400b      	ands	r3, r1
 80024d0:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 80024d2:	e07b      	b.n	80025cc <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d01c      	beq.n	8002518 <HAL_PCD_IRQHandler+0x130>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f042 0208 	orr.w	r2, r2, #8
 80024ec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	f24f 73ff 	movw	r3, #63487	@ 0xf7ff
 80024fc:	400b      	ands	r3, r1
 80024fe:	6453      	str	r3, [r2, #68]	@ 0x44

    hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f042 0204 	orr.w	r2, r2, #4
 800250e:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f000 f85e 	bl	80025d2 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002516:	e059      	b.n	80025cc <HAL_PCD_IRQHandler+0x1e4>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800251e:	2b00      	cmp	r3, #0
 8002520:	d033      	beq.n	800258a <HAL_PCD_IRQHandler+0x1a2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	f64f 737f 	movw	r3, #65407	@ 0xff7f
 8002530:	400b      	ands	r3, r1
 8002532:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 800253a:	2b00      	cmp	r3, #0
 800253c:	d121      	bne.n	8002582 <HAL_PCD_IRQHandler+0x19a>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f042 0204 	orr.w	r2, r2, #4
 800254c:	641a      	str	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f042 0208 	orr.w	r2, r2, #8
 800255c:	641a      	str	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2201      	movs	r2, #1
 8002562:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800256c:	089b      	lsrs	r3, r3, #2
 800256e:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002578:	2101      	movs	r1, #1
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f001 fa95 	bl	8003aaa <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8002580:	e024      	b.n	80025cc <HAL_PCD_IRQHandler+0x1e4>
      HAL_PCD_SuspendCallback(hpcd);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f000 f825 	bl	80025d2 <HAL_PCD_SuspendCallback>
    return;
 8002588:	e020      	b.n	80025cc <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002590:	2b00      	cmp	r3, #0
 8002592:	d00c      	beq.n	80025ae <HAL_PCD_IRQHandler+0x1c6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	f64f 53ff 	movw	r3, #65023	@ 0xfdff
 80025a2:	400b      	ands	r3, r1
 80025a4:	6453      	str	r3, [r2, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f007 f992 	bl	80098d0 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80025ac:	e00e      	b.n	80025cc <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d009      	beq.n	80025cc <HAL_PCD_IRQHandler+0x1e4>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 80025c6:	400b      	ands	r3, r1
 80025c8:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 80025ca:	bf00      	nop
  }
}
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 80025d2:	b480      	push	{r7}
 80025d4:	b083      	sub	sp, #12
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 80025da:	bf00      	nop
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr

080025e6 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 80025e6:	b480      	push	{r7}
 80025e8:	b083      	sub	sp, #12
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 80025ee:	bf00      	nop
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr

080025fa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80025fa:	b580      	push	{r7, lr}
 80025fc:	b082      	sub	sp, #8
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
 8002602:	460b      	mov	r3, r1
 8002604:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 800260c:	2b01      	cmp	r3, #1
 800260e:	d101      	bne.n	8002614 <HAL_PCD_SetAddress+0x1a>
 8002610:	2302      	movs	r3, #2
 8002612:	e012      	b.n	800263a <HAL_PCD_SetAddress+0x40>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  hpcd->USB_Address = address;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	78fa      	ldrb	r2, [r7, #3]
 8002620:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	78fa      	ldrb	r2, [r7, #3]
 8002628:	4611      	mov	r1, r2
 800262a:	4618      	mov	r0, r3
 800262c:	f005 fb20 	bl	8007c70 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}

08002642 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002642:	b580      	push	{r7, lr}
 8002644:	b084      	sub	sp, #16
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
 800264a:	4608      	mov	r0, r1
 800264c:	4611      	mov	r1, r2
 800264e:	461a      	mov	r2, r3
 8002650:	4603      	mov	r3, r0
 8002652:	70fb      	strb	r3, [r7, #3]
 8002654:	460b      	mov	r3, r1
 8002656:	803b      	strh	r3, [r7, #0]
 8002658:	4613      	mov	r3, r2
 800265a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800265c:	2300      	movs	r3, #0
 800265e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002660:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002664:	2b00      	cmp	r3, #0
 8002666:	da0f      	bge.n	8002688 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002668:	78fb      	ldrb	r3, [r7, #3]
 800266a:	f003 0207 	and.w	r2, r3, #7
 800266e:	4613      	mov	r3, r2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	4413      	add	r3, r2
 8002674:	00db      	lsls	r3, r3, #3
 8002676:	3310      	adds	r3, #16
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	4413      	add	r3, r2
 800267c:	3304      	adds	r3, #4
 800267e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2201      	movs	r2, #1
 8002684:	705a      	strb	r2, [r3, #1]
 8002686:	e00f      	b.n	80026a8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002688:	78fb      	ldrb	r3, [r7, #3]
 800268a:	f003 0207 	and.w	r2, r3, #7
 800268e:	4613      	mov	r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	4413      	add	r3, r2
 8002694:	00db      	lsls	r3, r3, #3
 8002696:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	4413      	add	r3, r2
 800269e:	3304      	adds	r3, #4
 80026a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2200      	movs	r2, #0
 80026a6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80026a8:	78fb      	ldrb	r3, [r7, #3]
 80026aa:	f003 0307 	and.w	r3, r3, #7
 80026ae:	b2da      	uxtb	r2, r3
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80026b4:	883b      	ldrh	r3, [r7, #0]
 80026b6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	78ba      	ldrb	r2, [r7, #2]
 80026c2:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80026c4:	78bb      	ldrb	r3, [r7, #2]
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d102      	bne.n	80026d0 <HAL_PCD_EP_Open+0x8e>
  {
    ep->data_pid_start = 0U;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2200      	movs	r2, #0
 80026ce:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d101      	bne.n	80026de <HAL_PCD_EP_Open+0x9c>
 80026da:	2302      	movs	r3, #2
 80026dc:	e00e      	b.n	80026fc <HAL_PCD_EP_Open+0xba>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2201      	movs	r2, #1
 80026e2:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68f9      	ldr	r1, [r7, #12]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f003 fc91 	bl	8006014 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return ret;
 80026fa:	7afb      	ldrb	r3, [r7, #11]
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3710      	adds	r7, #16
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	460b      	mov	r3, r1
 800270e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002710:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002714:	2b00      	cmp	r3, #0
 8002716:	da0f      	bge.n	8002738 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002718:	78fb      	ldrb	r3, [r7, #3]
 800271a:	f003 0207 	and.w	r2, r3, #7
 800271e:	4613      	mov	r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	4413      	add	r3, r2
 8002724:	00db      	lsls	r3, r3, #3
 8002726:	3310      	adds	r3, #16
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	4413      	add	r3, r2
 800272c:	3304      	adds	r3, #4
 800272e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2201      	movs	r2, #1
 8002734:	705a      	strb	r2, [r3, #1]
 8002736:	e00f      	b.n	8002758 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002738:	78fb      	ldrb	r3, [r7, #3]
 800273a:	f003 0207 	and.w	r2, r3, #7
 800273e:	4613      	mov	r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	4413      	add	r3, r2
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	4413      	add	r3, r2
 800274e:	3304      	adds	r3, #4
 8002750:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2200      	movs	r2, #0
 8002756:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002758:	78fb      	ldrb	r3, [r7, #3]
 800275a:	f003 0307 	and.w	r3, r3, #7
 800275e:	b2da      	uxtb	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 800276a:	2b01      	cmp	r3, #1
 800276c:	d101      	bne.n	8002772 <HAL_PCD_EP_Close+0x6e>
 800276e:	2302      	movs	r3, #2
 8002770:	e00e      	b.n	8002790 <HAL_PCD_EP_Close+0x8c>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2201      	movs	r2, #1
 8002776:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68f9      	ldr	r1, [r7, #12]
 8002780:	4618      	mov	r0, r3
 8002782:	f003 ffa7 	bl	80066d4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  return HAL_OK;
 800278e:	2300      	movs	r3, #0
}
 8002790:	4618      	mov	r0, r3
 8002792:	3710      	adds	r7, #16
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b086      	sub	sp, #24
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	607a      	str	r2, [r7, #4]
 80027a2:	603b      	str	r3, [r7, #0]
 80027a4:	460b      	mov	r3, r1
 80027a6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027a8:	7afb      	ldrb	r3, [r7, #11]
 80027aa:	f003 0207 	and.w	r2, r3, #7
 80027ae:	4613      	mov	r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	4413      	add	r3, r2
 80027b4:	00db      	lsls	r3, r3, #3
 80027b6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80027ba:	68fa      	ldr	r2, [r7, #12]
 80027bc:	4413      	add	r3, r2
 80027be:	3304      	adds	r3, #4
 80027c0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	683a      	ldr	r2, [r7, #0]
 80027cc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	2200      	movs	r2, #0
 80027d2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	2200      	movs	r2, #0
 80027d8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027da:	7afb      	ldrb	r3, [r7, #11]
 80027dc:	f003 0307 	and.w	r3, r3, #7
 80027e0:	b2da      	uxtb	r2, r3
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	6979      	ldr	r1, [r7, #20]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f004 f8fb 	bl	80069e8 <USB_EPStartXfer>

  return HAL_OK;
 80027f2:	2300      	movs	r3, #0
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3718      	adds	r7, #24
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	460b      	mov	r3, r1
 8002806:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002808:	78fb      	ldrb	r3, [r7, #3]
 800280a:	f003 0207 	and.w	r2, r3, #7
 800280e:	6879      	ldr	r1, [r7, #4]
 8002810:	4613      	mov	r3, r2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	4413      	add	r3, r2
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	440b      	add	r3, r1
 800281a:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 800281e:	681b      	ldr	r3, [r3, #0]
}
 8002820:	4618      	mov	r0, r3
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b086      	sub	sp, #24
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	607a      	str	r2, [r7, #4]
 8002836:	603b      	str	r3, [r7, #0]
 8002838:	460b      	mov	r3, r1
 800283a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800283c:	7afb      	ldrb	r3, [r7, #11]
 800283e:	f003 0207 	and.w	r2, r3, #7
 8002842:	4613      	mov	r3, r2
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	4413      	add	r3, r2
 8002848:	00db      	lsls	r3, r3, #3
 800284a:	3310      	adds	r3, #16
 800284c:	68fa      	ldr	r2, [r7, #12]
 800284e:	4413      	add	r3, r2
 8002850:	3304      	adds	r3, #4
 8002852:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	683a      	ldr	r2, [r7, #0]
 800285e:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	683a      	ldr	r2, [r7, #0]
 800286c:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	2200      	movs	r2, #0
 8002872:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	2201      	movs	r2, #1
 8002878:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800287a:	7afb      	ldrb	r3, [r7, #11]
 800287c:	f003 0307 	and.w	r3, r3, #7
 8002880:	b2da      	uxtb	r2, r3
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	6979      	ldr	r1, [r7, #20]
 800288c:	4618      	mov	r0, r3
 800288e:	f004 f8ab 	bl	80069e8 <USB_EPStartXfer>

  return HAL_OK;
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	3718      	adds	r7, #24
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	460b      	mov	r3, r1
 80028a6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80028a8:	78fb      	ldrb	r3, [r7, #3]
 80028aa:	f003 0307 	and.w	r3, r3, #7
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	7912      	ldrb	r2, [r2, #4]
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d901      	bls.n	80028ba <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e040      	b.n	800293c <HAL_PCD_EP_SetStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80028ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	da0f      	bge.n	80028e2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028c2:	78fb      	ldrb	r3, [r7, #3]
 80028c4:	f003 0207 	and.w	r2, r3, #7
 80028c8:	4613      	mov	r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	4413      	add	r3, r2
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	3310      	adds	r3, #16
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	4413      	add	r3, r2
 80028d6:	3304      	adds	r3, #4
 80028d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2201      	movs	r2, #1
 80028de:	705a      	strb	r2, [r3, #1]
 80028e0:	e00d      	b.n	80028fe <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80028e2:	78fa      	ldrb	r2, [r7, #3]
 80028e4:	4613      	mov	r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	4413      	add	r3, r2
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	4413      	add	r3, r2
 80028f4:	3304      	adds	r3, #4
 80028f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2200      	movs	r2, #0
 80028fc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2201      	movs	r2, #1
 8002902:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002904:	78fb      	ldrb	r3, [r7, #3]
 8002906:	f003 0307 	and.w	r3, r3, #7
 800290a:	b2da      	uxtb	r2, r3
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8002916:	2b01      	cmp	r3, #1
 8002918:	d101      	bne.n	800291e <HAL_PCD_EP_SetStall+0x82>
 800291a:	2302      	movs	r3, #2
 800291c:	e00e      	b.n	800293c <HAL_PCD_EP_SetStall+0xa0>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68f9      	ldr	r1, [r7, #12]
 800292c:	4618      	mov	r0, r3
 800292e:	f005 f8c5 	bl	8007abc <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 800293a:	2300      	movs	r3, #0
}
 800293c:	4618      	mov	r0, r3
 800293e:	3710      	adds	r7, #16
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	460b      	mov	r3, r1
 800294e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002950:	78fb      	ldrb	r3, [r7, #3]
 8002952:	f003 030f 	and.w	r3, r3, #15
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	7912      	ldrb	r2, [r2, #4]
 800295a:	4293      	cmp	r3, r2
 800295c:	d901      	bls.n	8002962 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e042      	b.n	80029e8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002962:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002966:	2b00      	cmp	r3, #0
 8002968:	da0f      	bge.n	800298a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800296a:	78fb      	ldrb	r3, [r7, #3]
 800296c:	f003 0207 	and.w	r2, r3, #7
 8002970:	4613      	mov	r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	4413      	add	r3, r2
 8002976:	00db      	lsls	r3, r3, #3
 8002978:	3310      	adds	r3, #16
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	4413      	add	r3, r2
 800297e:	3304      	adds	r3, #4
 8002980:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2201      	movs	r2, #1
 8002986:	705a      	strb	r2, [r3, #1]
 8002988:	e00f      	b.n	80029aa <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800298a:	78fb      	ldrb	r3, [r7, #3]
 800298c:	f003 0207 	and.w	r2, r3, #7
 8002990:	4613      	mov	r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	4413      	add	r3, r2
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	4413      	add	r3, r2
 80029a0:	3304      	adds	r3, #4
 80029a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2200      	movs	r2, #0
 80029a8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2200      	movs	r2, #0
 80029ae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029b0:	78fb      	ldrb	r3, [r7, #3]
 80029b2:	f003 0307 	and.w	r3, r3, #7
 80029b6:	b2da      	uxtb	r2, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d101      	bne.n	80029ca <HAL_PCD_EP_ClrStall+0x86>
 80029c6:	2302      	movs	r3, #2
 80029c8:	e00e      	b.n	80029e8 <HAL_PCD_EP_ClrStall+0xa4>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68f9      	ldr	r1, [r7, #12]
 80029d8:	4618      	mov	r0, r3
 80029da:	f005 f8b5 	bl	8007b48 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 80029e6:	2300      	movs	r3, #0
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3710      	adds	r7, #16
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b08e      	sub	sp, #56	@ 0x38
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80029f8:	e326      	b.n	8003048 <PCD_EP_ISR_Handler+0x658>
  {
    wIstr = (uint16_t)hpcd->Instance->ISTR;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a00:	847b      	strh	r3, [r7, #34]	@ 0x22

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_IDN);
 8002a02:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	f003 030f 	and.w	r3, r3, #15
 8002a0a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

    if (epindex == 0U)
 8002a0e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	f040 8124 	bne.w	8002c60 <PCD_EP_ISR_Handler+0x270>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002a18:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002a1a:	f003 0310 	and.w	r3, r3, #16
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d13e      	bne.n	8002aa0 <PCD_EP_ISR_Handler+0xb0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	4b89      	ldr	r3, [pc, #548]	@ (8002c50 <PCD_EP_ISR_Handler+0x260>)
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	60bb      	str	r3, [r7, #8]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	68ba      	ldr	r2, [r7, #8]
 8002a34:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a38:	601a      	str	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	3314      	adds	r3, #20
 8002a3e:	637b      	str	r3, [r7, #52]	@ 0x34

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002a40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	00db      	lsls	r3, r3, #3
 8002a46:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002a4a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	0c1b      	lsrs	r3, r3, #16
 8002a52:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002a56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a58:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002a5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a5c:	695a      	ldr	r2, [r3, #20]
 8002a5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a60:	69db      	ldr	r3, [r3, #28]
 8002a62:	441a      	add	r2, r3
 8002a64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a66:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002a68:	2100      	movs	r1, #0
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f006 ff16 	bl	800989c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	7c5b      	ldrb	r3, [r3, #17]
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	f000 82e6 	beq.w	8003048 <PCD_EP_ISR_Handler+0x658>
 8002a7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f040 82e1 	bne.w	8003048 <PCD_EP_ISR_Handler+0x658>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	7c5b      	ldrb	r3, [r3, #17]
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002a90:	b2da      	uxtb	r2, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	64da      	str	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	745a      	strb	r2, [r3, #17]
 8002a9e:	e2d3      	b.n	8003048 <PCD_EP_ISR_Handler+0x658>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8002aa6:	637b      	str	r3, [r7, #52]	@ 0x34
        wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	867b      	strh	r3, [r7, #50]	@ 0x32

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002ab0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002ab2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d027      	beq.n	8002b0a <PCD_EP_ISR_Handler+0x11a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	4610      	mov	r0, r2
 8002ac6:	f7ff fb39 	bl	800213c <PCD_GET_EP_RX_CNT>
 8002aca:	4603      	mov	r3, r0
 8002acc:	461a      	mov	r2, r3
 8002ace:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ad0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6818      	ldr	r0, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f503 7127 	add.w	r1, r3, #668	@ 0x29c
 8002adc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ade:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002ae0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ae2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	f005 f956 	bl	8007d96 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	4b58      	ldr	r3, [pc, #352]	@ (8002c54 <PCD_EP_ISR_Handler+0x264>)
 8002af2:	4013      	ands	r3, r2
 8002af4:	60fb      	str	r3, [r7, #12]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002b00:	601a      	str	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f006 fe9d 	bl	8009842 <HAL_PCD_SetupStageCallback>
 8002b08:	e29e      	b.n	8003048 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_VTRX) != 0U)
 8002b0a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	f280 829a 	bge.w	8003048 <PCD_EP_ISR_Handler+0x658>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	4b4e      	ldr	r3, [pc, #312]	@ (8002c54 <PCD_EP_ISR_Handler+0x264>)
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b26:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002b2a:	601a      	str	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	4619      	mov	r1, r3
 8002b36:	4610      	mov	r0, r2
 8002b38:	f7ff fb00 	bl	800213c <PCD_GET_EP_RX_CNT>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	461a      	mov	r2, r3
 8002b40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b42:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002b44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b46:	69db      	ldr	r3, [r3, #28]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d019      	beq.n	8002b80 <PCD_EP_ISR_Handler+0x190>
 8002b4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b4e:	695b      	ldr	r3, [r3, #20]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d015      	beq.n	8002b80 <PCD_EP_ISR_Handler+0x190>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6818      	ldr	r0, [r3, #0]
 8002b58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b5a:	6959      	ldr	r1, [r3, #20]
 8002b5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b5e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002b60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b62:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	f005 f916 	bl	8007d96 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002b6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b6c:	695a      	ldr	r2, [r3, #20]
 8002b6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b70:	69db      	ldr	r3, [r3, #28]
 8002b72:	441a      	add	r2, r3
 8002b74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b76:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002b78:	2100      	movs	r1, #0
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f006 fe73 	bl	8009866 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	867b      	strh	r3, [r7, #50]	@ 0x32

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002b88:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002b8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f040 825a 	bne.w	8003048 <PCD_EP_ISR_Handler+0x658>
 8002b94:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002b96:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002b9a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002b9e:	f000 8253 	beq.w	8003048 <PCD_EP_ISR_Handler+0x658>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002ba2:	4b2d      	ldr	r3, [pc, #180]	@ (8002c58 <PCD_EP_ISR_Handler+0x268>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	4a2c      	ldr	r2, [pc, #176]	@ (8002c58 <PCD_EP_ISR_Handler+0x268>)
 8002ba8:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8002bac:	6053      	str	r3, [r2, #4]
 8002bae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d106      	bne.n	8002bc4 <PCD_EP_ISR_Handler+0x1d4>
 8002bb6:	4b28      	ldr	r3, [pc, #160]	@ (8002c58 <PCD_EP_ISR_Handler+0x268>)
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	4a27      	ldr	r2, [pc, #156]	@ (8002c58 <PCD_EP_ISR_Handler+0x268>)
 8002bbc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002bc0:	6053      	str	r3, [r2, #4]
 8002bc2:	e02e      	b.n	8002c22 <PCD_EP_ISR_Handler+0x232>
 8002bc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bc6:	691b      	ldr	r3, [r3, #16]
 8002bc8:	2b3e      	cmp	r3, #62	@ 0x3e
 8002bca:	d814      	bhi.n	8002bf6 <PCD_EP_ISR_Handler+0x206>
 8002bcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bce:	691b      	ldr	r3, [r3, #16]
 8002bd0:	085b      	lsrs	r3, r3, #1
 8002bd2:	617b      	str	r3, [r7, #20]
 8002bd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	f003 0301 	and.w	r3, r3, #1
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d002      	beq.n	8002be6 <PCD_EP_ISR_Handler+0x1f6>
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	3301      	adds	r3, #1
 8002be4:	617b      	str	r3, [r7, #20]
 8002be6:	4b1c      	ldr	r3, [pc, #112]	@ (8002c58 <PCD_EP_ISR_Handler+0x268>)
 8002be8:	685a      	ldr	r2, [r3, #4]
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	069b      	lsls	r3, r3, #26
 8002bee:	491a      	ldr	r1, [pc, #104]	@ (8002c58 <PCD_EP_ISR_Handler+0x268>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	604b      	str	r3, [r1, #4]
 8002bf4:	e015      	b.n	8002c22 <PCD_EP_ISR_Handler+0x232>
 8002bf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	095b      	lsrs	r3, r3, #5
 8002bfc:	617b      	str	r3, [r7, #20]
 8002bfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	f003 031f 	and.w	r3, r3, #31
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d102      	bne.n	8002c10 <PCD_EP_ISR_Handler+0x220>
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	617b      	str	r3, [r7, #20]
 8002c10:	4b11      	ldr	r3, [pc, #68]	@ (8002c58 <PCD_EP_ISR_Handler+0x268>)
 8002c12:	685a      	ldr	r2, [r3, #4]
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	069b      	lsls	r3, r3, #26
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	4a0f      	ldr	r2, [pc, #60]	@ (8002c58 <PCD_EP_ISR_Handler+0x268>)
 8002c1c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002c20:	6053      	str	r3, [r2, #4]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	4b0c      	ldr	r3, [pc, #48]	@ (8002c5c <PCD_EP_ISR_Handler+0x26c>)
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	613b      	str	r3, [r7, #16]
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002c34:	613b      	str	r3, [r7, #16]
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002c3c:	613b      	str	r3, [r7, #16]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c4c:	6013      	str	r3, [r2, #0]
 8002c4e:	e1fb      	b.n	8003048 <PCD_EP_ISR_Handler+0x658>
 8002c50:	07ff8f0f 	.word	0x07ff8f0f
 8002c54:	07ff0f8f 	.word	0x07ff0f8f
 8002c58:	40016400 	.word	0x40016400
 8002c5c:	07ffbf8f 	.word	0x07ffbf8f
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	461a      	mov	r2, r3
 8002c66:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	4413      	add	r3, r2
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	867b      	strh	r3, [r7, #50]	@ 0x32

      if ((wEPVal & USB_EP_VTRX) != 0U)
 8002c72:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	f280 80bd 	bge.w	8002df6 <PCD_EP_ISR_Handler+0x406>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	461a      	mov	r2, r3
 8002c82:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	4413      	add	r3, r2
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	4b9e      	ldr	r3, [pc, #632]	@ (8002f08 <PCD_EP_ISR_Handler+0x518>)
 8002c8e:	4013      	ands	r3, r2
 8002c90:	61fb      	str	r3, [r7, #28]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	461a      	mov	r2, r3
 8002c98:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	4413      	add	r3, r2
 8002ca0:	69fa      	ldr	r2, [r7, #28]
 8002ca2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002ca6:	601a      	str	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002ca8:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8002cac:	4613      	mov	r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	4413      	add	r3, r2
 8002cb2:	00db      	lsls	r3, r3, #3
 8002cb4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	4413      	add	r3, r2
 8002cbc:	3304      	adds	r3, #4
 8002cbe:	637b      	str	r3, [r7, #52]	@ 0x34

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002cc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cc2:	7b1b      	ldrb	r3, [r3, #12]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d116      	bne.n	8002cf6 <PCD_EP_ISR_Handler+0x306>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	4610      	mov	r0, r2
 8002cd4:	f7ff fa32 	bl	800213c <PCD_GET_EP_RX_CNT>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	84bb      	strh	r3, [r7, #36]	@ 0x24

          if (count != 0U)
 8002cdc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d067      	beq.n	8002db2 <PCD_EP_ISR_Handler+0x3c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6818      	ldr	r0, [r3, #0]
 8002ce6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ce8:	6959      	ldr	r1, [r3, #20]
 8002cea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cec:	88da      	ldrh	r2, [r3, #6]
 8002cee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002cf0:	f005 f851 	bl	8007d96 <USB_ReadPMA>
 8002cf4:	e05d      	b.n	8002db2 <PCD_EP_ISR_Handler+0x3c2>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002cf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cf8:	78db      	ldrb	r3, [r3, #3]
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d108      	bne.n	8002d10 <PCD_EP_ISR_Handler+0x320>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002cfe:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002d00:	461a      	mov	r2, r3
 8002d02:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f000 f9ad 	bl	8003064 <HAL_PCD_EP_DB_Receive>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8002d0e:	e050      	b.n	8002db2 <PCD_EP_ISR_Handler+0x3c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	461a      	mov	r2, r3
 8002d16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	4413      	add	r3, r2
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	4b7a      	ldr	r3, [pc, #488]	@ (8002f0c <PCD_EP_ISR_Handler+0x51c>)
 8002d22:	4013      	ands	r3, r2
 8002d24:	61bb      	str	r3, [r7, #24]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	441a      	add	r2, r3
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d3a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002d3e:	6013      	str	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	461a      	mov	r2, r3
 8002d46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	4413      	add	r3, r2
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d016      	beq.n	8002d86 <PCD_EP_ISR_Handler+0x396>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	4619      	mov	r1, r3
 8002d62:	4610      	mov	r0, r2
 8002d64:	f7ff fa0b 	bl	800217e <PCD_GET_EP_DBUF0_CNT>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	84bb      	strh	r3, [r7, #36]	@ 0x24

              if (count != 0U)
 8002d6c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d01f      	beq.n	8002db2 <PCD_EP_ISR_Handler+0x3c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6818      	ldr	r0, [r3, #0]
 8002d76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d78:	6959      	ldr	r1, [r3, #20]
 8002d7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d7c:	891a      	ldrh	r2, [r3, #8]
 8002d7e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002d80:	f005 f809 	bl	8007d96 <USB_ReadPMA>
 8002d84:	e015      	b.n	8002db2 <PCD_EP_ISR_Handler+0x3c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	4619      	mov	r1, r3
 8002d90:	4610      	mov	r0, r2
 8002d92:	f7ff fa15 	bl	80021c0 <PCD_GET_EP_DBUF1_CNT>
 8002d96:	4603      	mov	r3, r0
 8002d98:	84bb      	strh	r3, [r7, #36]	@ 0x24

              if (count != 0U)
 8002d9a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d008      	beq.n	8002db2 <PCD_EP_ISR_Handler+0x3c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6818      	ldr	r0, [r3, #0]
 8002da4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002da6:	6959      	ldr	r1, [r3, #20]
 8002da8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002daa:	895a      	ldrh	r2, [r3, #10]
 8002dac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002dae:	f004 fff2 	bl	8007d96 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002db2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002db4:	69da      	ldr	r2, [r3, #28]
 8002db6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002db8:	441a      	add	r2, r3
 8002dba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dbc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002dbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dc0:	695a      	ldr	r2, [r3, #20]
 8002dc2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002dc4:	441a      	add	r2, r3
 8002dc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dc8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002dca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dcc:	699b      	ldr	r3, [r3, #24]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d004      	beq.n	8002ddc <PCD_EP_ISR_Handler+0x3ec>
 8002dd2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002dd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dd6:	691b      	ldr	r3, [r3, #16]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d206      	bcs.n	8002dea <PCD_EP_ISR_Handler+0x3fa>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002ddc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	4619      	mov	r1, r3
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f006 fd3f 	bl	8009866 <HAL_PCD_DataOutStageCallback>
 8002de8:	e005      	b.n	8002df6 <PCD_EP_ISR_Handler+0x406>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002df0:	4618      	mov	r0, r3
 8002df2:	f003 fdf9 	bl	80069e8 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_VTTX) != 0U)
 8002df6:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002df8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	f000 8123 	beq.w	8003048 <PCD_EP_ISR_Handler+0x658>
      {
        ep = &hpcd->IN_ep[epindex];
 8002e02:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8002e06:	4613      	mov	r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	4413      	add	r3, r2
 8002e0c:	00db      	lsls	r3, r3, #3
 8002e0e:	3310      	adds	r3, #16
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	4413      	add	r3, r2
 8002e14:	3304      	adds	r3, #4
 8002e16:	637b      	str	r3, [r7, #52]	@ 0x34

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	4413      	add	r3, r2
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	4b39      	ldr	r3, [pc, #228]	@ (8002f10 <PCD_EP_ISR_Handler+0x520>)
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	461a      	mov	r2, r3
 8002e34:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	4413      	add	r3, r2
 8002e3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e3e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e42:	601a      	str	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002e44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e46:	78db      	ldrb	r3, [r3, #3]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	f040 80b8 	bne.w	8002fbe <PCD_EP_ISR_Handler+0x5ce>
        {
          ep->xfer_len = 0U;
 8002e4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e50:	2200      	movs	r2, #0
 8002e52:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002e54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e56:	7b1b      	ldrb	r3, [r3, #12]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f000 80a9 	beq.w	8002fb0 <PCD_EP_ISR_Handler+0x5c0>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002e5e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002e60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d055      	beq.n	8002f14 <PCD_EP_ISR_Handler+0x524>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e6a:	785b      	ldrb	r3, [r3, #1]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d124      	bne.n	8002eba <PCD_EP_ISR_Handler+0x4ca>
 8002e70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	00db      	lsls	r3, r3, #3
 8002e76:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002e7a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	00db      	lsls	r3, r3, #3
 8002e86:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002e8a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002e8e:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8002e92:	601a      	str	r2, [r3, #0]
 8002e94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	00db      	lsls	r3, r3, #3
 8002e9a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002e9e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	00db      	lsls	r3, r3, #3
 8002eaa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002eae:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002eb2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002eb6:	601a      	str	r2, [r3, #0]
 8002eb8:	e07a      	b.n	8002fb0 <PCD_EP_ISR_Handler+0x5c0>
 8002eba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ebc:	785b      	ldrb	r3, [r3, #1]
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d176      	bne.n	8002fb0 <PCD_EP_ISR_Handler+0x5c0>
 8002ec2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	00db      	lsls	r3, r3, #3
 8002ec8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002ecc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	00db      	lsls	r3, r3, #3
 8002ed8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002edc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002ee0:	b292      	uxth	r2, r2
 8002ee2:	601a      	str	r2, [r3, #0]
 8002ee4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	00db      	lsls	r3, r3, #3
 8002eea:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8002eee:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8002ef2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	00db      	lsls	r3, r3, #3
 8002ef8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002efc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002f00:	6812      	ldr	r2, [r2, #0]
 8002f02:	601a      	str	r2, [r3, #0]
 8002f04:	e054      	b.n	8002fb0 <PCD_EP_ISR_Handler+0x5c0>
 8002f06:	bf00      	nop
 8002f08:	07ff0f8f 	.word	0x07ff0f8f
 8002f0c:	07ff8f8f 	.word	0x07ff8f8f
 8002f10:	07ff8f0f 	.word	0x07ff8f0f
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f16:	785b      	ldrb	r3, [r3, #1]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d124      	bne.n	8002f66 <PCD_EP_ISR_Handler+0x576>
 8002f1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	00db      	lsls	r3, r3, #3
 8002f22:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002f26:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002f2a:	685a      	ldr	r2, [r3, #4]
 8002f2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	00db      	lsls	r3, r3, #3
 8002f32:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002f36:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002f3a:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8002f3e:	605a      	str	r2, [r3, #4]
 8002f40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	00db      	lsls	r3, r3, #3
 8002f46:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002f4a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002f4e:	685a      	ldr	r2, [r3, #4]
 8002f50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	00db      	lsls	r3, r3, #3
 8002f56:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002f5a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002f5e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002f62:	605a      	str	r2, [r3, #4]
 8002f64:	e024      	b.n	8002fb0 <PCD_EP_ISR_Handler+0x5c0>
 8002f66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f68:	785b      	ldrb	r3, [r3, #1]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d120      	bne.n	8002fb0 <PCD_EP_ISR_Handler+0x5c0>
 8002f6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	00db      	lsls	r3, r3, #3
 8002f74:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002f78:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002f7c:	685a      	ldr	r2, [r3, #4]
 8002f7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002f88:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002f8c:	b292      	uxth	r2, r2
 8002f8e:	605a      	str	r2, [r3, #4]
 8002f90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	00db      	lsls	r3, r3, #3
 8002f96:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8002f9a:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8002f9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	00db      	lsls	r3, r3, #3
 8002fa4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002fa8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002fac:	6852      	ldr	r2, [r2, #4]
 8002fae:	605a      	str	r2, [r3, #4]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002fb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f006 fc70 	bl	800989c <HAL_PCD_DataInStageCallback>
 8002fbc:	e044      	b.n	8003048 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002fbe:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002fc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d139      	bne.n	800303c <PCD_EP_ISR_Handler+0x64c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002fc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	00db      	lsls	r3, r3, #3
 8002fce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002fd2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	0c1b      	lsrs	r3, r3, #16
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fe0:	84fb      	strh	r3, [r7, #38]	@ 0x26

            if (ep->xfer_len > TxPctSize)
 8002fe2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fe4:	699a      	ldr	r2, [r3, #24]
 8002fe6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d906      	bls.n	8002ffa <PCD_EP_ISR_Handler+0x60a>
            {
              ep->xfer_len -= TxPctSize;
 8002fec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fee:	699a      	ldr	r2, [r3, #24]
 8002ff0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002ff2:	1ad2      	subs	r2, r2, r3
 8002ff4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ff6:	619a      	str	r2, [r3, #24]
 8002ff8:	e002      	b.n	8003000 <PCD_EP_ISR_Handler+0x610>
            }
            else
            {
              ep->xfer_len = 0U;
 8002ffa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003000:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003002:	699b      	ldr	r3, [r3, #24]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d106      	bne.n	8003016 <PCD_EP_ISR_Handler+0x626>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003008:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	4619      	mov	r1, r3
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f006 fc44 	bl	800989c <HAL_PCD_DataInStageCallback>
 8003014:	e018      	b.n	8003048 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003016:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003018:	695a      	ldr	r2, [r3, #20]
 800301a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800301c:	441a      	add	r2, r3
 800301e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003020:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003022:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003024:	69da      	ldr	r2, [r3, #28]
 8003026:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003028:	441a      	add	r2, r3
 800302a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800302c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003034:	4618      	mov	r0, r3
 8003036:	f003 fcd7 	bl	80069e8 <USB_EPStartXfer>
 800303a:	e005      	b.n	8003048 <PCD_EP_ISR_Handler+0x658>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800303c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800303e:	461a      	mov	r2, r3
 8003040:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 f8e8 	bl	8003218 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800304e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003052:	2b00      	cmp	r3, #0
 8003054:	f47f acd1 	bne.w	80029fa <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3738      	adds	r7, #56	@ 0x38
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop

08003064 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b08a      	sub	sp, #40	@ 0x28
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	4613      	mov	r3, r2
 8003070:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003072:	88fb      	ldrh	r3, [r7, #6]
 8003074:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d062      	beq.n	8003142 <HAL_PCD_EP_DB_Receive+0xde>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	4619      	mov	r1, r3
 8003086:	4610      	mov	r0, r2
 8003088:	f7ff f879 	bl	800217e <PCD_GET_EP_DBUF0_CNT>
 800308c:	4603      	mov	r3, r0
 800308e:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	699a      	ldr	r2, [r3, #24]
 8003094:	8bfb      	ldrh	r3, [r7, #30]
 8003096:	429a      	cmp	r2, r3
 8003098:	d306      	bcc.n	80030a8 <HAL_PCD_EP_DB_Receive+0x44>
    {
      ep->xfer_len -= count;
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	699a      	ldr	r2, [r3, #24]
 800309e:	8bfb      	ldrh	r3, [r7, #30]
 80030a0:	1ad2      	subs	r2, r2, r3
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	619a      	str	r2, [r3, #24]
 80030a6:	e002      	b.n	80030ae <HAL_PCD_EP_DB_Receive+0x4a>
    }
    else
    {
      ep->xfer_len = 0U;
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	2200      	movs	r2, #0
 80030ac:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	699b      	ldr	r3, [r3, #24]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d11b      	bne.n	80030ee <HAL_PCD_EP_DB_Receive+0x8a>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	461a      	mov	r2, r3
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	4413      	add	r3, r2
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	4b52      	ldr	r3, [pc, #328]	@ (8003210 <HAL_PCD_EP_DB_Receive+0x1ac>)
 80030c8:	4013      	ands	r3, r2
 80030ca:	61bb      	str	r3, [r7, #24]
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80030d2:	61bb      	str	r3, [r7, #24]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	461a      	mov	r2, r3
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	441a      	add	r2, r3
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80030e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030ec:	6013      	str	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80030ee:	88fb      	ldrh	r3, [r7, #6]
 80030f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d017      	beq.n	8003128 <HAL_PCD_EP_DB_Receive+0xc4>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	461a      	mov	r2, r3
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	4413      	add	r3, r2
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	4b42      	ldr	r3, [pc, #264]	@ (8003214 <HAL_PCD_EP_DB_Receive+0x1b0>)
 800310a:	4013      	ands	r3, r2
 800310c:	617b      	str	r3, [r7, #20]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	461a      	mov	r2, r3
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	441a      	add	r2, r3
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003122:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003126:	6013      	str	r3, [r2, #0]
    }

    if (count != 0U)
 8003128:	8bfb      	ldrh	r3, [r7, #30]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d06b      	beq.n	8003206 <HAL_PCD_EP_DB_Receive+0x1a2>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6818      	ldr	r0, [r3, #0]
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	6959      	ldr	r1, [r3, #20]
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	891a      	ldrh	r2, [r3, #8]
 800313a:	8bfb      	ldrh	r3, [r7, #30]
 800313c:	f004 fe2b 	bl	8007d96 <USB_ReadPMA>
 8003140:	e061      	b.n	8003206 <HAL_PCD_EP_DB_Receive+0x1a2>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	4619      	mov	r1, r3
 800314c:	4610      	mov	r0, r2
 800314e:	f7ff f837 	bl	80021c0 <PCD_GET_EP_DBUF1_CNT>
 8003152:	4603      	mov	r3, r0
 8003154:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	699a      	ldr	r2, [r3, #24]
 800315a:	8bfb      	ldrh	r3, [r7, #30]
 800315c:	429a      	cmp	r2, r3
 800315e:	d306      	bcc.n	800316e <HAL_PCD_EP_DB_Receive+0x10a>
    {
      ep->xfer_len -= count;
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	699a      	ldr	r2, [r3, #24]
 8003164:	8bfb      	ldrh	r3, [r7, #30]
 8003166:	1ad2      	subs	r2, r2, r3
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	619a      	str	r2, [r3, #24]
 800316c:	e002      	b.n	8003174 <HAL_PCD_EP_DB_Receive+0x110>
    }
    else
    {
      ep->xfer_len = 0U;
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	2200      	movs	r2, #0
 8003172:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d11b      	bne.n	80031b4 <HAL_PCD_EP_DB_Receive+0x150>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	461a      	mov	r2, r3
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	4413      	add	r3, r2
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	4b20      	ldr	r3, [pc, #128]	@ (8003210 <HAL_PCD_EP_DB_Receive+0x1ac>)
 800318e:	4013      	ands	r3, r2
 8003190:	627b      	str	r3, [r7, #36]	@ 0x24
 8003192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003194:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003198:	627b      	str	r3, [r7, #36]	@ 0x24
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	461a      	mov	r2, r3
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	441a      	add	r2, r3
 80031a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80031ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031b2:	6013      	str	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80031b4:	88fb      	ldrh	r3, [r7, #6]
 80031b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d117      	bne.n	80031ee <HAL_PCD_EP_DB_Receive+0x18a>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	461a      	mov	r2, r3
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	4413      	add	r3, r2
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	4b11      	ldr	r3, [pc, #68]	@ (8003214 <HAL_PCD_EP_DB_Receive+0x1b0>)
 80031d0:	4013      	ands	r3, r2
 80031d2:	623b      	str	r3, [r7, #32]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	461a      	mov	r2, r3
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	441a      	add	r2, r3
 80031e2:	6a3b      	ldr	r3, [r7, #32]
 80031e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80031e8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80031ec:	6013      	str	r3, [r2, #0]
    }

    if (count != 0U)
 80031ee:	8bfb      	ldrh	r3, [r7, #30]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d008      	beq.n	8003206 <HAL_PCD_EP_DB_Receive+0x1a2>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6818      	ldr	r0, [r3, #0]
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	6959      	ldr	r1, [r3, #20]
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	895a      	ldrh	r2, [r3, #10]
 8003200:	8bfb      	ldrh	r3, [r7, #30]
 8003202:	f004 fdc8 	bl	8007d96 <USB_ReadPMA>
    }
  }

  return count;
 8003206:	8bfb      	ldrh	r3, [r7, #30]
}
 8003208:	4618      	mov	r0, r3
 800320a:	3728      	adds	r7, #40	@ 0x28
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	07ffbf8f 	.word	0x07ffbf8f
 8003214:	07ff8f8f 	.word	0x07ff8f8f

08003218 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b08e      	sub	sp, #56	@ 0x38
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	4613      	mov	r3, r2
 8003224:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003226:	88fb      	ldrh	r3, [r7, #6]
 8003228:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800322c:	2b00      	cmp	r3, #0
 800322e:	f000 81d5 	beq.w	80035dc <HAL_PCD_EP_DB_Transmit+0x3c4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	4619      	mov	r1, r3
 800323c:	4610      	mov	r0, r2
 800323e:	f7fe ff9e 	bl	800217e <PCD_GET_EP_DBUF0_CNT>
 8003242:	4603      	mov	r3, r0
 8003244:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len > TxPctSize)
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	699a      	ldr	r2, [r3, #24]
 800324a:	8bfb      	ldrh	r3, [r7, #30]
 800324c:	429a      	cmp	r2, r3
 800324e:	d906      	bls.n	800325e <HAL_PCD_EP_DB_Transmit+0x46>
    {
      ep->xfer_len -= TxPctSize;
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	699a      	ldr	r2, [r3, #24]
 8003254:	8bfb      	ldrh	r3, [r7, #30]
 8003256:	1ad2      	subs	r2, r2, r3
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	619a      	str	r2, [r3, #24]
 800325c:	e002      	b.n	8003264 <HAL_PCD_EP_DB_Transmit+0x4c>
    }
    else
    {
      ep->xfer_len = 0U;
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	2200      	movs	r2, #0
 8003262:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	2b00      	cmp	r3, #0
 800326a:	f040 80c1 	bne.w	80033f0 <HAL_PCD_EP_DB_Transmit+0x1d8>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	785b      	ldrb	r3, [r3, #1]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d124      	bne.n	80032c0 <HAL_PCD_EP_DB_Transmit+0xa8>
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	00db      	lsls	r3, r3, #3
 800327c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003280:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	00db      	lsls	r3, r3, #3
 800328c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003290:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003294:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8003298:	601a      	str	r2, [r3, #0]
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	00db      	lsls	r3, r3, #3
 80032a0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80032a4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	00db      	lsls	r3, r3, #3
 80032b0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80032b4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80032b8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80032bc:	601a      	str	r2, [r3, #0]
 80032be:	e024      	b.n	800330a <HAL_PCD_EP_DB_Transmit+0xf2>
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	785b      	ldrb	r3, [r3, #1]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d120      	bne.n	800330a <HAL_PCD_EP_DB_Transmit+0xf2>
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	00db      	lsls	r3, r3, #3
 80032ce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80032d2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	00db      	lsls	r3, r3, #3
 80032de:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80032e2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80032e6:	b292      	uxth	r2, r2
 80032e8:	601a      	str	r2, [r3, #0]
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	00db      	lsls	r3, r3, #3
 80032f0:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 80032f4:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	00db      	lsls	r3, r3, #3
 80032fe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003302:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003306:	6812      	ldr	r2, [r2, #0]
 8003308:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	785b      	ldrb	r3, [r3, #1]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d124      	bne.n	800335c <HAL_PCD_EP_DB_Transmit+0x144>
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	00db      	lsls	r3, r3, #3
 8003318:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800331c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003320:	685a      	ldr	r2, [r3, #4]
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	00db      	lsls	r3, r3, #3
 8003328:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800332c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003330:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8003334:	605a      	str	r2, [r3, #4]
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	00db      	lsls	r3, r3, #3
 800333c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003340:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003344:	685a      	ldr	r2, [r3, #4]
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	00db      	lsls	r3, r3, #3
 800334c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003350:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003354:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003358:	605a      	str	r2, [r3, #4]
 800335a:	e024      	b.n	80033a6 <HAL_PCD_EP_DB_Transmit+0x18e>
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	785b      	ldrb	r3, [r3, #1]
 8003360:	2b01      	cmp	r3, #1
 8003362:	d120      	bne.n	80033a6 <HAL_PCD_EP_DB_Transmit+0x18e>
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	00db      	lsls	r3, r3, #3
 800336a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800336e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003372:	685a      	ldr	r2, [r3, #4]
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	00db      	lsls	r3, r3, #3
 800337a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800337e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003382:	b292      	uxth	r2, r2
 8003384:	605a      	str	r2, [r3, #4]
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	00db      	lsls	r3, r3, #3
 800338c:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8003390:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	00db      	lsls	r3, r3, #3
 800339a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800339e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80033a2:	6852      	ldr	r2, [r2, #4]
 80033a4:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	4619      	mov	r1, r3
 80033ac:	68f8      	ldr	r0, [r7, #12]
 80033ae:	f006 fa75 	bl	800989c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80033b2:	88fb      	ldrh	r3, [r7, #6]
 80033b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f000 82e5 	beq.w	8003988 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	461a      	mov	r2, r3
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	4413      	add	r3, r2
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	4b8e      	ldr	r3, [pc, #568]	@ (8003608 <HAL_PCD_EP_DB_Transmit+0x3f0>)
 80033d0:	4013      	ands	r3, r2
 80033d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	461a      	mov	r2, r3
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	441a      	add	r2, r3
 80033e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033e4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80033e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80033ec:	6013      	str	r3, [r2, #0]
 80033ee:	e2cb      	b.n	8003988 <HAL_PCD_EP_DB_Transmit+0x770>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80033f0:	88fb      	ldrh	r3, [r7, #6]
 80033f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d017      	beq.n	800342a <HAL_PCD_EP_DB_Transmit+0x212>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	461a      	mov	r2, r3
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	4413      	add	r3, r2
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	4b7f      	ldr	r3, [pc, #508]	@ (8003608 <HAL_PCD_EP_DB_Transmit+0x3f0>)
 800340c:	4013      	ands	r3, r2
 800340e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	461a      	mov	r2, r3
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	441a      	add	r2, r3
 800341e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003420:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003424:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003428:	6013      	str	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003430:	2b01      	cmp	r3, #1
 8003432:	f040 82a9 	bne.w	8003988 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        ep->xfer_buff += TxPctSize;
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	695a      	ldr	r2, [r3, #20]
 800343a:	8bfb      	ldrh	r3, [r7, #30]
 800343c:	441a      	add	r2, r3
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	69da      	ldr	r2, [r3, #28]
 8003446:	8bfb      	ldrh	r3, [r7, #30]
 8003448:	441a      	add	r2, r3
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	6a1a      	ldr	r2, [r3, #32]
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	429a      	cmp	r2, r3
 8003458:	d309      	bcc.n	800346e <HAL_PCD_EP_DB_Transmit+0x256>
        {
          len = ep->maxpacket;
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	6a1a      	ldr	r2, [r3, #32]
 8003464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003466:	1ad2      	subs	r2, r2, r3
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	621a      	str	r2, [r3, #32]
 800346c:	e014      	b.n	8003498 <HAL_PCD_EP_DB_Transmit+0x280>
        }
        else if (ep->xfer_len_db == 0U)
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	6a1b      	ldr	r3, [r3, #32]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d106      	bne.n	8003484 <HAL_PCD_EP_DB_Transmit+0x26c>
        {
          len = TxPctSize;
 8003476:	8bfb      	ldrh	r3, [r7, #30]
 8003478:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003482:	e009      	b.n	8003498 <HAL_PCD_EP_DB_Transmit+0x280>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	6a1b      	ldr	r3, [r3, #32]
 8003490:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	2200      	movs	r2, #0
 8003496:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	785b      	ldrb	r3, [r3, #1]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d16a      	bne.n	8003576 <HAL_PCD_EP_DB_Transmit+0x35e>
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	00db      	lsls	r3, r3, #3
 80034a6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80034aa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	00db      	lsls	r3, r3, #3
 80034b6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80034ba:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80034be:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80034c2:	601a      	str	r2, [r3, #0]
 80034c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d112      	bne.n	80034f0 <HAL_PCD_EP_DB_Transmit+0x2d8>
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	00db      	lsls	r3, r3, #3
 80034d0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80034d4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	00db      	lsls	r3, r3, #3
 80034e0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80034e4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80034e8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80034ec:	601a      	str	r2, [r3, #0]
 80034ee:	e06a      	b.n	80035c6 <HAL_PCD_EP_DB_Transmit+0x3ae>
 80034f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f2:	2b3e      	cmp	r3, #62	@ 0x3e
 80034f4:	d81e      	bhi.n	8003534 <HAL_PCD_EP_DB_Transmit+0x31c>
 80034f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f8:	085b      	lsrs	r3, r3, #1
 80034fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80034fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	2b00      	cmp	r3, #0
 8003504:	d002      	beq.n	800350c <HAL_PCD_EP_DB_Transmit+0x2f4>
 8003506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003508:	3301      	adds	r3, #1
 800350a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	00db      	lsls	r3, r3, #3
 8003512:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003516:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800351a:	6819      	ldr	r1, [r3, #0]
 800351c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800351e:	069a      	lsls	r2, r3, #26
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	00db      	lsls	r3, r3, #3
 8003526:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800352a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800352e:	430a      	orrs	r2, r1
 8003530:	601a      	str	r2, [r3, #0]
 8003532:	e048      	b.n	80035c6 <HAL_PCD_EP_DB_Transmit+0x3ae>
 8003534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003536:	095b      	lsrs	r3, r3, #5
 8003538:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800353a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800353c:	f003 031f 	and.w	r3, r3, #31
 8003540:	2b00      	cmp	r3, #0
 8003542:	d102      	bne.n	800354a <HAL_PCD_EP_DB_Transmit+0x332>
 8003544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003546:	3b01      	subs	r3, #1
 8003548:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	00db      	lsls	r3, r3, #3
 8003550:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003554:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800355c:	069b      	lsls	r3, r3, #26
 800355e:	431a      	orrs	r2, r3
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	00db      	lsls	r3, r3, #3
 8003566:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800356a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800356e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003572:	601a      	str	r2, [r3, #0]
 8003574:	e027      	b.n	80035c6 <HAL_PCD_EP_DB_Transmit+0x3ae>
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	785b      	ldrb	r3, [r3, #1]
 800357a:	2b01      	cmp	r3, #1
 800357c:	d123      	bne.n	80035c6 <HAL_PCD_EP_DB_Transmit+0x3ae>
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	00db      	lsls	r3, r3, #3
 8003584:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003588:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	00db      	lsls	r3, r3, #3
 8003594:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003598:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800359c:	b292      	uxth	r2, r2
 800359e:	601a      	str	r2, [r3, #0]
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	00db      	lsls	r3, r3, #3
 80035a6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80035aa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80035ae:	6819      	ldr	r1, [r3, #0]
 80035b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b2:	041a      	lsls	r2, r3, #16
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	00db      	lsls	r3, r3, #3
 80035ba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80035be:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80035c2:	430a      	orrs	r2, r1
 80035c4:	601a      	str	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6818      	ldr	r0, [r3, #0]
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	6959      	ldr	r1, [r3, #20]
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	891a      	ldrh	r2, [r3, #8]
 80035d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	f004 fb7d 	bl	8007cd4 <USB_WritePMA>
 80035da:	e1d5      	b.n	8003988 <HAL_PCD_EP_DB_Transmit+0x770>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	4619      	mov	r1, r3
 80035e6:	4610      	mov	r0, r2
 80035e8:	f7fe fdea 	bl	80021c0 <PCD_GET_EP_DBUF1_CNT>
 80035ec:	4603      	mov	r3, r0
 80035ee:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= TxPctSize)
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	699a      	ldr	r2, [r3, #24]
 80035f4:	8bfb      	ldrh	r3, [r7, #30]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d308      	bcc.n	800360c <HAL_PCD_EP_DB_Transmit+0x3f4>
    {
      ep->xfer_len -= TxPctSize;
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	699a      	ldr	r2, [r3, #24]
 80035fe:	8bfb      	ldrh	r3, [r7, #30]
 8003600:	1ad2      	subs	r2, r2, r3
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	619a      	str	r2, [r3, #24]
 8003606:	e004      	b.n	8003612 <HAL_PCD_EP_DB_Transmit+0x3fa>
 8003608:	07ff8f8f 	.word	0x07ff8f8f
    }
    else
    {
      ep->xfer_len = 0U;
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	2200      	movs	r2, #0
 8003610:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	2b00      	cmp	r3, #0
 8003618:	f040 80c1 	bne.w	800379e <HAL_PCD_EP_DB_Transmit+0x586>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	785b      	ldrb	r3, [r3, #1]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d124      	bne.n	800366e <HAL_PCD_EP_DB_Transmit+0x456>
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	00db      	lsls	r3, r3, #3
 800362a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800362e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	00db      	lsls	r3, r3, #3
 800363a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800363e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003642:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8003646:	601a      	str	r2, [r3, #0]
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	00db      	lsls	r3, r3, #3
 800364e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003652:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	00db      	lsls	r3, r3, #3
 800365e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003662:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003666:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800366a:	601a      	str	r2, [r3, #0]
 800366c:	e024      	b.n	80036b8 <HAL_PCD_EP_DB_Transmit+0x4a0>
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	785b      	ldrb	r3, [r3, #1]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d120      	bne.n	80036b8 <HAL_PCD_EP_DB_Transmit+0x4a0>
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003680:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003690:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003694:	b292      	uxth	r2, r2
 8003696:	601a      	str	r2, [r3, #0]
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	00db      	lsls	r3, r3, #3
 800369e:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 80036a2:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	00db      	lsls	r3, r3, #3
 80036ac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80036b0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80036b4:	6812      	ldr	r2, [r2, #0]
 80036b6:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	785b      	ldrb	r3, [r3, #1]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d124      	bne.n	800370a <HAL_PCD_EP_DB_Transmit+0x4f2>
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	00db      	lsls	r3, r3, #3
 80036c6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80036ca:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80036ce:	685a      	ldr	r2, [r3, #4]
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	00db      	lsls	r3, r3, #3
 80036d6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80036da:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80036de:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80036e2:	605a      	str	r2, [r3, #4]
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	00db      	lsls	r3, r3, #3
 80036ea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80036ee:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80036f2:	685a      	ldr	r2, [r3, #4]
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	00db      	lsls	r3, r3, #3
 80036fa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80036fe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003702:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003706:	605a      	str	r2, [r3, #4]
 8003708:	e024      	b.n	8003754 <HAL_PCD_EP_DB_Transmit+0x53c>
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	785b      	ldrb	r3, [r3, #1]
 800370e:	2b01      	cmp	r3, #1
 8003710:	d120      	bne.n	8003754 <HAL_PCD_EP_DB_Transmit+0x53c>
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	00db      	lsls	r3, r3, #3
 8003718:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800371c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003720:	685a      	ldr	r2, [r3, #4]
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	00db      	lsls	r3, r3, #3
 8003728:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800372c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003730:	b292      	uxth	r2, r2
 8003732:	605a      	str	r2, [r3, #4]
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	00db      	lsls	r3, r3, #3
 800373a:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 800373e:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	00db      	lsls	r3, r3, #3
 8003748:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800374c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003750:	6852      	ldr	r2, [r2, #4]
 8003752:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	4619      	mov	r1, r3
 800375a:	68f8      	ldr	r0, [r7, #12]
 800375c:	f006 f89e 	bl	800989c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003760:	88fb      	ldrh	r3, [r7, #6]
 8003762:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003766:	2b00      	cmp	r3, #0
 8003768:	f040 810e 	bne.w	8003988 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	461a      	mov	r2, r3
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	4413      	add	r3, r2
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	4b95      	ldr	r3, [pc, #596]	@ (80039d4 <HAL_PCD_EP_DB_Transmit+0x7bc>)
 800377e:	4013      	ands	r3, r2
 8003780:	623b      	str	r3, [r7, #32]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	461a      	mov	r2, r3
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	441a      	add	r2, r3
 8003790:	6a3b      	ldr	r3, [r7, #32]
 8003792:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003796:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800379a:	6013      	str	r3, [r2, #0]
 800379c:	e0f4      	b.n	8003988 <HAL_PCD_EP_DB_Transmit+0x770>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800379e:	88fb      	ldrh	r3, [r7, #6]
 80037a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d117      	bne.n	80037d8 <HAL_PCD_EP_DB_Transmit+0x5c0>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	461a      	mov	r2, r3
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	4413      	add	r3, r2
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	4b86      	ldr	r3, [pc, #536]	@ (80039d4 <HAL_PCD_EP_DB_Transmit+0x7bc>)
 80037ba:	4013      	ands	r3, r2
 80037bc:	617b      	str	r3, [r7, #20]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	461a      	mov	r2, r3
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	441a      	add	r2, r3
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80037d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80037d6:	6013      	str	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80037de:	2b01      	cmp	r3, #1
 80037e0:	f040 80d2 	bne.w	8003988 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        ep->xfer_buff += TxPctSize;
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	695a      	ldr	r2, [r3, #20]
 80037e8:	8bfb      	ldrh	r3, [r7, #30]
 80037ea:	441a      	add	r2, r3
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	69da      	ldr	r2, [r3, #28]
 80037f4:	8bfb      	ldrh	r3, [r7, #30]
 80037f6:	441a      	add	r2, r3
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	6a1a      	ldr	r2, [r3, #32]
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	429a      	cmp	r2, r3
 8003806:	d309      	bcc.n	800381c <HAL_PCD_EP_DB_Transmit+0x604>
        {
          len = ep->maxpacket;
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	6a1a      	ldr	r2, [r3, #32]
 8003812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003814:	1ad2      	subs	r2, r2, r3
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	621a      	str	r2, [r3, #32]
 800381a:	e014      	b.n	8003846 <HAL_PCD_EP_DB_Transmit+0x62e>
        }
        else if (ep->xfer_len_db == 0U)
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	6a1b      	ldr	r3, [r3, #32]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d106      	bne.n	8003832 <HAL_PCD_EP_DB_Transmit+0x61a>
        {
          len = TxPctSize;
 8003824:	8bfb      	ldrh	r3, [r7, #30]
 8003826:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003830:	e009      	b.n	8003846 <HAL_PCD_EP_DB_Transmit+0x62e>
        }
        else
        {
          len = ep->xfer_len_db;
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	6a1b      	ldr	r3, [r3, #32]
 8003836:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	2200      	movs	r2, #0
 800383c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	785b      	ldrb	r3, [r3, #1]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d16a      	bne.n	8003924 <HAL_PCD_EP_DB_Transmit+0x70c>
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	00db      	lsls	r3, r3, #3
 8003854:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003858:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800385c:	685a      	ldr	r2, [r3, #4]
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	00db      	lsls	r3, r3, #3
 8003864:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003868:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800386c:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8003870:	605a      	str	r2, [r3, #4]
 8003872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003874:	2b00      	cmp	r3, #0
 8003876:	d112      	bne.n	800389e <HAL_PCD_EP_DB_Transmit+0x686>
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	00db      	lsls	r3, r3, #3
 800387e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003882:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003886:	685a      	ldr	r2, [r3, #4]
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	00db      	lsls	r3, r3, #3
 800388e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003892:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003896:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800389a:	605a      	str	r2, [r3, #4]
 800389c:	e06a      	b.n	8003974 <HAL_PCD_EP_DB_Transmit+0x75c>
 800389e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a0:	2b3e      	cmp	r3, #62	@ 0x3e
 80038a2:	d81e      	bhi.n	80038e2 <HAL_PCD_EP_DB_Transmit+0x6ca>
 80038a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a6:	085b      	lsrs	r3, r3, #1
 80038a8:	61bb      	str	r3, [r7, #24]
 80038aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ac:	f003 0301 	and.w	r3, r3, #1
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d002      	beq.n	80038ba <HAL_PCD_EP_DB_Transmit+0x6a2>
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	3301      	adds	r3, #1
 80038b8:	61bb      	str	r3, [r7, #24]
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	00db      	lsls	r3, r3, #3
 80038c0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80038c4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80038c8:	6859      	ldr	r1, [r3, #4]
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	069a      	lsls	r2, r3, #26
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	00db      	lsls	r3, r3, #3
 80038d4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80038d8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80038dc:	430a      	orrs	r2, r1
 80038de:	605a      	str	r2, [r3, #4]
 80038e0:	e048      	b.n	8003974 <HAL_PCD_EP_DB_Transmit+0x75c>
 80038e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e4:	095b      	lsrs	r3, r3, #5
 80038e6:	61bb      	str	r3, [r7, #24]
 80038e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ea:	f003 031f 	and.w	r3, r3, #31
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d102      	bne.n	80038f8 <HAL_PCD_EP_DB_Transmit+0x6e0>
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	3b01      	subs	r3, #1
 80038f6:	61bb      	str	r3, [r7, #24]
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	00db      	lsls	r3, r3, #3
 80038fe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003902:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003906:	685a      	ldr	r2, [r3, #4]
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	069b      	lsls	r3, r3, #26
 800390c:	431a      	orrs	r2, r3
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	00db      	lsls	r3, r3, #3
 8003914:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003918:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800391c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003920:	605a      	str	r2, [r3, #4]
 8003922:	e027      	b.n	8003974 <HAL_PCD_EP_DB_Transmit+0x75c>
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	785b      	ldrb	r3, [r3, #1]
 8003928:	2b01      	cmp	r3, #1
 800392a:	d123      	bne.n	8003974 <HAL_PCD_EP_DB_Transmit+0x75c>
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	00db      	lsls	r3, r3, #3
 8003932:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003936:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800393a:	685a      	ldr	r2, [r3, #4]
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	00db      	lsls	r3, r3, #3
 8003942:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003946:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800394a:	b292      	uxth	r2, r2
 800394c:	605a      	str	r2, [r3, #4]
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	00db      	lsls	r3, r3, #3
 8003954:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003958:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800395c:	6859      	ldr	r1, [r3, #4]
 800395e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003960:	041a      	lsls	r2, r3, #16
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	00db      	lsls	r3, r3, #3
 8003968:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800396c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003970:	430a      	orrs	r2, r1
 8003972:	605a      	str	r2, [r3, #4]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6818      	ldr	r0, [r3, #0]
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	6959      	ldr	r1, [r3, #20]
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	895a      	ldrh	r2, [r3, #10]
 8003980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003982:	b29b      	uxth	r3, r3
 8003984:	f004 f9a6 	bl	8007cd4 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	461a      	mov	r2, r3
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	4413      	add	r3, r2
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	4b0f      	ldr	r3, [pc, #60]	@ (80039d8 <HAL_PCD_EP_DB_Transmit+0x7c0>)
 800399a:	4013      	ands	r3, r2
 800399c:	633b      	str	r3, [r7, #48]	@ 0x30
 800399e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039a0:	f083 0310 	eor.w	r3, r3, #16
 80039a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80039a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039a8:	f083 0320 	eor.w	r3, r3, #32
 80039ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	461a      	mov	r2, r3
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	441a      	add	r2, r3
 80039bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80039c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039c6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3738      	adds	r7, #56	@ 0x38
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	07ff8f8f 	.word	0x07ff8f8f
 80039d8:	07ff8fbf 	.word	0x07ff8fbf

080039dc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80039dc:	b480      	push	{r7}
 80039de:	b087      	sub	sp, #28
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	607b      	str	r3, [r7, #4]
 80039e6:	460b      	mov	r3, r1
 80039e8:	817b      	strh	r3, [r7, #10]
 80039ea:	4613      	mov	r3, r2
 80039ec:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80039ee:	897b      	ldrh	r3, [r7, #10]
 80039f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00c      	beq.n	8003a14 <HAL_PCDEx_PMAConfig+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039fa:	897b      	ldrh	r3, [r7, #10]
 80039fc:	f003 0207 	and.w	r2, r3, #7
 8003a00:	4613      	mov	r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	4413      	add	r3, r2
 8003a06:	00db      	lsls	r3, r3, #3
 8003a08:	3310      	adds	r3, #16
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	4413      	add	r3, r2
 8003a0e:	3304      	adds	r3, #4
 8003a10:	617b      	str	r3, [r7, #20]
 8003a12:	e00a      	b.n	8003a2a <HAL_PCDEx_PMAConfig+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003a14:	897a      	ldrh	r2, [r7, #10]
 8003a16:	4613      	mov	r3, r2
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	4413      	add	r3, r2
 8003a1c:	00db      	lsls	r3, r3, #3
 8003a1e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003a22:	68fa      	ldr	r2, [r7, #12]
 8003a24:	4413      	add	r3, r2
 8003a26:	3304      	adds	r3, #4
 8003a28:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003a2a:	893b      	ldrh	r3, [r7, #8]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d107      	bne.n	8003a40 <HAL_PCDEx_PMAConfig+0x64>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	2200      	movs	r2, #0
 8003a34:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	b29a      	uxth	r2, r3
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	80da      	strh	r2, [r3, #6]
 8003a3e:	e00b      	b.n	8003a58 <HAL_PCDEx_PMAConfig+0x7c>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	2201      	movs	r2, #1
 8003a44:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	b29a      	uxth	r2, r3
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	0c1b      	lsrs	r3, r3, #16
 8003a52:	b29a      	uxth	r2, r3
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	371c      	adds	r7, #28
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr

08003a66 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003a66:	b480      	push	{r7}
 8003a68:	b085      	sub	sp, #20
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
  hpcd->LPM_State = LPM_L0;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a88:	f043 0201 	orr.w	r2, r3, #1
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	655a      	str	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a94:	f043 0202 	orr.w	r2, r3, #2
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	655a      	str	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3714      	adds	r7, #20
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr

08003aaa <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003aaa:	b480      	push	{r7}
 8003aac:	b083      	sub	sp, #12
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003ab6:	bf00      	nop
 8003ab8:	370c      	adds	r7, #12
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
	...

08003ac4 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->USBSCR, PWR_USBSCR_USB33SV);
 8003ac8:	4b05      	ldr	r3, [pc, #20]	@ (8003ae0 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003aca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003acc:	4a04      	ldr	r2, [pc, #16]	@ (8003ae0 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003ace:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003ad2:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003ad4:	bf00      	nop
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	44020800 	.word	0x44020800

08003ae4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b088      	sub	sp, #32
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d102      	bne.n	8003af8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	f000 bc28 	b.w	8004348 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003af8:	4b94      	ldr	r3, [pc, #592]	@ (8003d4c <HAL_RCC_OscConfig+0x268>)
 8003afa:	69db      	ldr	r3, [r3, #28]
 8003afc:	f003 0318 	and.w	r3, r3, #24
 8003b00:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8003b02:	4b92      	ldr	r3, [pc, #584]	@ (8003d4c <HAL_RCC_OscConfig+0x268>)
 8003b04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b06:	f003 0303 	and.w	r3, r3, #3
 8003b0a:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0310 	and.w	r3, r3, #16
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d05b      	beq.n	8003bd0 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	2b08      	cmp	r3, #8
 8003b1c:	d005      	beq.n	8003b2a <HAL_RCC_OscConfig+0x46>
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	2b18      	cmp	r3, #24
 8003b22:	d114      	bne.n	8003b4e <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d111      	bne.n	8003b4e <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	69db      	ldr	r3, [r3, #28]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d102      	bne.n	8003b38 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	f000 bc08 	b.w	8004348 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8003b38:	4b84      	ldr	r3, [pc, #528]	@ (8003d4c <HAL_RCC_OscConfig+0x268>)
 8003b3a:	699b      	ldr	r3, [r3, #24]
 8003b3c:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6a1b      	ldr	r3, [r3, #32]
 8003b44:	041b      	lsls	r3, r3, #16
 8003b46:	4981      	ldr	r1, [pc, #516]	@ (8003d4c <HAL_RCC_OscConfig+0x268>)
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8003b4c:	e040      	b.n	8003bd0 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	69db      	ldr	r3, [r3, #28]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d023      	beq.n	8003b9e <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003b56:	4b7d      	ldr	r3, [pc, #500]	@ (8003d4c <HAL_RCC_OscConfig+0x268>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a7c      	ldr	r2, [pc, #496]	@ (8003d4c <HAL_RCC_OscConfig+0x268>)
 8003b5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b62:	f7fd f915 	bl	8000d90 <HAL_GetTick>
 8003b66:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003b68:	e008      	b.n	8003b7c <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8003b6a:	f7fd f911 	bl	8000d90 <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d901      	bls.n	8003b7c <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e3e5      	b.n	8004348 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003b7c:	4b73      	ldr	r3, [pc, #460]	@ (8003d4c <HAL_RCC_OscConfig+0x268>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d0f0      	beq.n	8003b6a <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8003b88:	4b70      	ldr	r3, [pc, #448]	@ (8003d4c <HAL_RCC_OscConfig+0x268>)
 8003b8a:	699b      	ldr	r3, [r3, #24]
 8003b8c:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a1b      	ldr	r3, [r3, #32]
 8003b94:	041b      	lsls	r3, r3, #16
 8003b96:	496d      	ldr	r1, [pc, #436]	@ (8003d4c <HAL_RCC_OscConfig+0x268>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	618b      	str	r3, [r1, #24]
 8003b9c:	e018      	b.n	8003bd0 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003b9e:	4b6b      	ldr	r3, [pc, #428]	@ (8003d4c <HAL_RCC_OscConfig+0x268>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a6a      	ldr	r2, [pc, #424]	@ (8003d4c <HAL_RCC_OscConfig+0x268>)
 8003ba4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ba8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003baa:	f7fd f8f1 	bl	8000d90 <HAL_GetTick>
 8003bae:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003bb0:	e008      	b.n	8003bc4 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8003bb2:	f7fd f8ed 	bl	8000d90 <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d901      	bls.n	8003bc4 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e3c1      	b.n	8004348 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003bc4:	4b61      	ldr	r3, [pc, #388]	@ (8003d4c <HAL_RCC_OscConfig+0x268>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1f0      	bne.n	8003bb2 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0301 	and.w	r3, r3, #1
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	f000 80a0 	beq.w	8003d1e <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	2b10      	cmp	r3, #16
 8003be2:	d005      	beq.n	8003bf0 <HAL_RCC_OscConfig+0x10c>
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	2b18      	cmp	r3, #24
 8003be8:	d109      	bne.n	8003bfe <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	2b03      	cmp	r3, #3
 8003bee:	d106      	bne.n	8003bfe <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f040 8092 	bne.w	8003d1e <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e3a4      	b.n	8004348 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c06:	d106      	bne.n	8003c16 <HAL_RCC_OscConfig+0x132>
 8003c08:	4b50      	ldr	r3, [pc, #320]	@ (8003d4c <HAL_RCC_OscConfig+0x268>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a4f      	ldr	r2, [pc, #316]	@ (8003d4c <HAL_RCC_OscConfig+0x268>)
 8003c0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c12:	6013      	str	r3, [r2, #0]
 8003c14:	e058      	b.n	8003cc8 <HAL_RCC_OscConfig+0x1e4>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d112      	bne.n	8003c44 <HAL_RCC_OscConfig+0x160>
 8003c1e:	4b4b      	ldr	r3, [pc, #300]	@ (8003d4c <HAL_RCC_OscConfig+0x268>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a4a      	ldr	r2, [pc, #296]	@ (8003d4c <HAL_RCC_OscConfig+0x268>)
 8003c24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c28:	6013      	str	r3, [r2, #0]
 8003c2a:	4b48      	ldr	r3, [pc, #288]	@ (8003d4c <HAL_RCC_OscConfig+0x268>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a47      	ldr	r2, [pc, #284]	@ (8003d4c <HAL_RCC_OscConfig+0x268>)
 8003c30:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003c34:	6013      	str	r3, [r2, #0]
 8003c36:	4b45      	ldr	r3, [pc, #276]	@ (8003d4c <HAL_RCC_OscConfig+0x268>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a44      	ldr	r2, [pc, #272]	@ (8003d4c <HAL_RCC_OscConfig+0x268>)
 8003c3c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c40:	6013      	str	r3, [r2, #0]
 8003c42:	e041      	b.n	8003cc8 <HAL_RCC_OscConfig+0x1e4>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c4c:	d112      	bne.n	8003c74 <HAL_RCC_OscConfig+0x190>
 8003c4e:	4b3f      	ldr	r3, [pc, #252]	@ (8003d4c <HAL_RCC_OscConfig+0x268>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a3e      	ldr	r2, [pc, #248]	@ (8003d4c <HAL_RCC_OscConfig+0x268>)
 8003c54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c58:	6013      	str	r3, [r2, #0]
 8003c5a:	4b3c      	ldr	r3, [pc, #240]	@ (8003d4c <HAL_RCC_OscConfig+0x268>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a3b      	ldr	r2, [pc, #236]	@ (8003d4c <HAL_RCC_OscConfig+0x268>)
 8003c60:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003c64:	6013      	str	r3, [r2, #0]
 8003c66:	4b39      	ldr	r3, [pc, #228]	@ (8003d4c <HAL_RCC_OscConfig+0x268>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a38      	ldr	r2, [pc, #224]	@ (8003d4c <HAL_RCC_OscConfig+0x268>)
 8003c6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c70:	6013      	str	r3, [r2, #0]
 8003c72:	e029      	b.n	8003cc8 <HAL_RCC_OscConfig+0x1e4>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8003c7c:	d112      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x1c0>
 8003c7e:	4b33      	ldr	r3, [pc, #204]	@ (8003d4c <HAL_RCC_OscConfig+0x268>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a32      	ldr	r2, [pc, #200]	@ (8003d4c <HAL_RCC_OscConfig+0x268>)
 8003c84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c88:	6013      	str	r3, [r2, #0]
 8003c8a:	4b30      	ldr	r3, [pc, #192]	@ (8003d4c <HAL_RCC_OscConfig+0x268>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a2f      	ldr	r2, [pc, #188]	@ (8003d4c <HAL_RCC_OscConfig+0x268>)
 8003c90:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c94:	6013      	str	r3, [r2, #0]
 8003c96:	4b2d      	ldr	r3, [pc, #180]	@ (8003d4c <HAL_RCC_OscConfig+0x268>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a2c      	ldr	r2, [pc, #176]	@ (8003d4c <HAL_RCC_OscConfig+0x268>)
 8003c9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ca0:	6013      	str	r3, [r2, #0]
 8003ca2:	e011      	b.n	8003cc8 <HAL_RCC_OscConfig+0x1e4>
 8003ca4:	4b29      	ldr	r3, [pc, #164]	@ (8003d4c <HAL_RCC_OscConfig+0x268>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a28      	ldr	r2, [pc, #160]	@ (8003d4c <HAL_RCC_OscConfig+0x268>)
 8003caa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cae:	6013      	str	r3, [r2, #0]
 8003cb0:	4b26      	ldr	r3, [pc, #152]	@ (8003d4c <HAL_RCC_OscConfig+0x268>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a25      	ldr	r2, [pc, #148]	@ (8003d4c <HAL_RCC_OscConfig+0x268>)
 8003cb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003cba:	6013      	str	r3, [r2, #0]
 8003cbc:	4b23      	ldr	r3, [pc, #140]	@ (8003d4c <HAL_RCC_OscConfig+0x268>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a22      	ldr	r2, [pc, #136]	@ (8003d4c <HAL_RCC_OscConfig+0x268>)
 8003cc2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003cc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d013      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd0:	f7fd f85e 	bl	8000d90 <HAL_GetTick>
 8003cd4:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cd6:	e008      	b.n	8003cea <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003cd8:	f7fd f85a 	bl	8000d90 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b64      	cmp	r3, #100	@ 0x64
 8003ce4:	d901      	bls.n	8003cea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e32e      	b.n	8004348 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cea:	4b18      	ldr	r3, [pc, #96]	@ (8003d4c <HAL_RCC_OscConfig+0x268>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d0f0      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x1f4>
 8003cf6:	e012      	b.n	8003d1e <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf8:	f7fd f84a 	bl	8000d90 <HAL_GetTick>
 8003cfc:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003cfe:	e008      	b.n	8003d12 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003d00:	f7fd f846 	bl	8000d90 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b64      	cmp	r3, #100	@ 0x64
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e31a      	b.n	8004348 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d12:	4b0e      	ldr	r3, [pc, #56]	@ (8003d4c <HAL_RCC_OscConfig+0x268>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1f0      	bne.n	8003d00 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0302 	and.w	r3, r3, #2
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	f000 809a 	beq.w	8003e60 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d005      	beq.n	8003d3e <HAL_RCC_OscConfig+0x25a>
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	2b18      	cmp	r3, #24
 8003d36:	d149      	bne.n	8003dcc <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d146      	bne.n	8003dcc <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d104      	bne.n	8003d50 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e2fe      	b.n	8004348 <HAL_RCC_OscConfig+0x864>
 8003d4a:	bf00      	nop
 8003d4c:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d11c      	bne.n	8003d90 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8003d56:	4b9a      	ldr	r3, [pc, #616]	@ (8003fc0 <HAL_RCC_OscConfig+0x4dc>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0218 	and.w	r2, r3, #24
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d014      	beq.n	8003d90 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8003d66:	4b96      	ldr	r3, [pc, #600]	@ (8003fc0 <HAL_RCC_OscConfig+0x4dc>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f023 0218 	bic.w	r2, r3, #24
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	4993      	ldr	r1, [pc, #588]	@ (8003fc0 <HAL_RCC_OscConfig+0x4dc>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8003d78:	f000 fdd0 	bl	800491c <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003d7c:	4b91      	ldr	r3, [pc, #580]	@ (8003fc4 <HAL_RCC_OscConfig+0x4e0>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7fc ff7b 	bl	8000c7c <HAL_InitTick>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d001      	beq.n	8003d90 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e2db      	b.n	8004348 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d90:	f7fc fffe 	bl	8000d90 <HAL_GetTick>
 8003d94:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d96:	e008      	b.n	8003daa <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003d98:	f7fc fffa 	bl	8000d90 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e2ce      	b.n	8004348 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003daa:	4b85      	ldr	r3, [pc, #532]	@ (8003fc0 <HAL_RCC_OscConfig+0x4dc>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d0f0      	beq.n	8003d98 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8003db6:	4b82      	ldr	r3, [pc, #520]	@ (8003fc0 <HAL_RCC_OscConfig+0x4dc>)
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	041b      	lsls	r3, r3, #16
 8003dc4:	497e      	ldr	r1, [pc, #504]	@ (8003fc0 <HAL_RCC_OscConfig+0x4dc>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8003dca:	e049      	b.n	8003e60 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d02c      	beq.n	8003e2e <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8003dd4:	4b7a      	ldr	r3, [pc, #488]	@ (8003fc0 <HAL_RCC_OscConfig+0x4dc>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f023 0218 	bic.w	r2, r3, #24
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	4977      	ldr	r1, [pc, #476]	@ (8003fc0 <HAL_RCC_OscConfig+0x4dc>)
 8003de2:	4313      	orrs	r3, r2
 8003de4:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8003de6:	4b76      	ldr	r3, [pc, #472]	@ (8003fc0 <HAL_RCC_OscConfig+0x4dc>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a75      	ldr	r2, [pc, #468]	@ (8003fc0 <HAL_RCC_OscConfig+0x4dc>)
 8003dec:	f043 0301 	orr.w	r3, r3, #1
 8003df0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df2:	f7fc ffcd 	bl	8000d90 <HAL_GetTick>
 8003df6:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003df8:	e008      	b.n	8003e0c <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003dfa:	f7fc ffc9 	bl	8000d90 <HAL_GetTick>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d901      	bls.n	8003e0c <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e29d      	b.n	8004348 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e0c:	4b6c      	ldr	r3, [pc, #432]	@ (8003fc0 <HAL_RCC_OscConfig+0x4dc>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0302 	and.w	r3, r3, #2
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d0f0      	beq.n	8003dfa <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8003e18:	4b69      	ldr	r3, [pc, #420]	@ (8003fc0 <HAL_RCC_OscConfig+0x4dc>)
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	695b      	ldr	r3, [r3, #20]
 8003e24:	041b      	lsls	r3, r3, #16
 8003e26:	4966      	ldr	r1, [pc, #408]	@ (8003fc0 <HAL_RCC_OscConfig+0x4dc>)
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	610b      	str	r3, [r1, #16]
 8003e2c:	e018      	b.n	8003e60 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e2e:	4b64      	ldr	r3, [pc, #400]	@ (8003fc0 <HAL_RCC_OscConfig+0x4dc>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a63      	ldr	r2, [pc, #396]	@ (8003fc0 <HAL_RCC_OscConfig+0x4dc>)
 8003e34:	f023 0301 	bic.w	r3, r3, #1
 8003e38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e3a:	f7fc ffa9 	bl	8000d90 <HAL_GetTick>
 8003e3e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e40:	e008      	b.n	8003e54 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003e42:	f7fc ffa5 	bl	8000d90 <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d901      	bls.n	8003e54 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e279      	b.n	8004348 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e54:	4b5a      	ldr	r3, [pc, #360]	@ (8003fc0 <HAL_RCC_OscConfig+0x4dc>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0302 	and.w	r3, r3, #2
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d1f0      	bne.n	8003e42 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0308 	and.w	r3, r3, #8
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d03c      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	699b      	ldr	r3, [r3, #24]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d01c      	beq.n	8003eae <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e74:	4b52      	ldr	r3, [pc, #328]	@ (8003fc0 <HAL_RCC_OscConfig+0x4dc>)
 8003e76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e7a:	4a51      	ldr	r2, [pc, #324]	@ (8003fc0 <HAL_RCC_OscConfig+0x4dc>)
 8003e7c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003e80:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e84:	f7fc ff84 	bl	8000d90 <HAL_GetTick>
 8003e88:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003e8a:	e008      	b.n	8003e9e <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003e8c:	f7fc ff80 	bl	8000d90 <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d901      	bls.n	8003e9e <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e254      	b.n	8004348 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003e9e:	4b48      	ldr	r3, [pc, #288]	@ (8003fc0 <HAL_RCC_OscConfig+0x4dc>)
 8003ea0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ea4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d0ef      	beq.n	8003e8c <HAL_RCC_OscConfig+0x3a8>
 8003eac:	e01b      	b.n	8003ee6 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003eae:	4b44      	ldr	r3, [pc, #272]	@ (8003fc0 <HAL_RCC_OscConfig+0x4dc>)
 8003eb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003eb4:	4a42      	ldr	r2, [pc, #264]	@ (8003fc0 <HAL_RCC_OscConfig+0x4dc>)
 8003eb6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003eba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ebe:	f7fc ff67 	bl	8000d90 <HAL_GetTick>
 8003ec2:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003ec4:	e008      	b.n	8003ed8 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003ec6:	f7fc ff63 	bl	8000d90 <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d901      	bls.n	8003ed8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	e237      	b.n	8004348 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003ed8:	4b39      	ldr	r3, [pc, #228]	@ (8003fc0 <HAL_RCC_OscConfig+0x4dc>)
 8003eda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ede:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1ef      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0304 	and.w	r3, r3, #4
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	f000 80d2 	beq.w	8004098 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003ef4:	4b34      	ldr	r3, [pc, #208]	@ (8003fc8 <HAL_RCC_OscConfig+0x4e4>)
 8003ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef8:	f003 0301 	and.w	r3, r3, #1
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d118      	bne.n	8003f32 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8003f00:	4b31      	ldr	r3, [pc, #196]	@ (8003fc8 <HAL_RCC_OscConfig+0x4e4>)
 8003f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f04:	4a30      	ldr	r2, [pc, #192]	@ (8003fc8 <HAL_RCC_OscConfig+0x4e4>)
 8003f06:	f043 0301 	orr.w	r3, r3, #1
 8003f0a:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f0c:	f7fc ff40 	bl	8000d90 <HAL_GetTick>
 8003f10:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003f12:	e008      	b.n	8003f26 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f14:	f7fc ff3c 	bl	8000d90 <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e210      	b.n	8004348 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003f26:	4b28      	ldr	r3, [pc, #160]	@ (8003fc8 <HAL_RCC_OscConfig+0x4e4>)
 8003f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d0f0      	beq.n	8003f14 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d108      	bne.n	8003f4c <HAL_RCC_OscConfig+0x468>
 8003f3a:	4b21      	ldr	r3, [pc, #132]	@ (8003fc0 <HAL_RCC_OscConfig+0x4dc>)
 8003f3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f40:	4a1f      	ldr	r2, [pc, #124]	@ (8003fc0 <HAL_RCC_OscConfig+0x4dc>)
 8003f42:	f043 0301 	orr.w	r3, r3, #1
 8003f46:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003f4a:	e074      	b.n	8004036 <HAL_RCC_OscConfig+0x552>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d118      	bne.n	8003f86 <HAL_RCC_OscConfig+0x4a2>
 8003f54:	4b1a      	ldr	r3, [pc, #104]	@ (8003fc0 <HAL_RCC_OscConfig+0x4dc>)
 8003f56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f5a:	4a19      	ldr	r2, [pc, #100]	@ (8003fc0 <HAL_RCC_OscConfig+0x4dc>)
 8003f5c:	f023 0301 	bic.w	r3, r3, #1
 8003f60:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003f64:	4b16      	ldr	r3, [pc, #88]	@ (8003fc0 <HAL_RCC_OscConfig+0x4dc>)
 8003f66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f6a:	4a15      	ldr	r2, [pc, #84]	@ (8003fc0 <HAL_RCC_OscConfig+0x4dc>)
 8003f6c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f70:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003f74:	4b12      	ldr	r3, [pc, #72]	@ (8003fc0 <HAL_RCC_OscConfig+0x4dc>)
 8003f76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f7a:	4a11      	ldr	r2, [pc, #68]	@ (8003fc0 <HAL_RCC_OscConfig+0x4dc>)
 8003f7c:	f023 0304 	bic.w	r3, r3, #4
 8003f80:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003f84:	e057      	b.n	8004036 <HAL_RCC_OscConfig+0x552>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	2b05      	cmp	r3, #5
 8003f8c:	d11e      	bne.n	8003fcc <HAL_RCC_OscConfig+0x4e8>
 8003f8e:	4b0c      	ldr	r3, [pc, #48]	@ (8003fc0 <HAL_RCC_OscConfig+0x4dc>)
 8003f90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f94:	4a0a      	ldr	r2, [pc, #40]	@ (8003fc0 <HAL_RCC_OscConfig+0x4dc>)
 8003f96:	f043 0304 	orr.w	r3, r3, #4
 8003f9a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003f9e:	4b08      	ldr	r3, [pc, #32]	@ (8003fc0 <HAL_RCC_OscConfig+0x4dc>)
 8003fa0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003fa4:	4a06      	ldr	r2, [pc, #24]	@ (8003fc0 <HAL_RCC_OscConfig+0x4dc>)
 8003fa6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003faa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003fae:	4b04      	ldr	r3, [pc, #16]	@ (8003fc0 <HAL_RCC_OscConfig+0x4dc>)
 8003fb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003fb4:	4a02      	ldr	r2, [pc, #8]	@ (8003fc0 <HAL_RCC_OscConfig+0x4dc>)
 8003fb6:	f043 0301 	orr.w	r3, r3, #1
 8003fba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003fbe:	e03a      	b.n	8004036 <HAL_RCC_OscConfig+0x552>
 8003fc0:	44020c00 	.word	0x44020c00
 8003fc4:	20000008 	.word	0x20000008
 8003fc8:	44020800 	.word	0x44020800
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	2b85      	cmp	r3, #133	@ 0x85
 8003fd2:	d118      	bne.n	8004006 <HAL_RCC_OscConfig+0x522>
 8003fd4:	4ba2      	ldr	r3, [pc, #648]	@ (8004260 <HAL_RCC_OscConfig+0x77c>)
 8003fd6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003fda:	4aa1      	ldr	r2, [pc, #644]	@ (8004260 <HAL_RCC_OscConfig+0x77c>)
 8003fdc:	f043 0304 	orr.w	r3, r3, #4
 8003fe0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003fe4:	4b9e      	ldr	r3, [pc, #632]	@ (8004260 <HAL_RCC_OscConfig+0x77c>)
 8003fe6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003fea:	4a9d      	ldr	r2, [pc, #628]	@ (8004260 <HAL_RCC_OscConfig+0x77c>)
 8003fec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ff0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003ff4:	4b9a      	ldr	r3, [pc, #616]	@ (8004260 <HAL_RCC_OscConfig+0x77c>)
 8003ff6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ffa:	4a99      	ldr	r2, [pc, #612]	@ (8004260 <HAL_RCC_OscConfig+0x77c>)
 8003ffc:	f043 0301 	orr.w	r3, r3, #1
 8004000:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004004:	e017      	b.n	8004036 <HAL_RCC_OscConfig+0x552>
 8004006:	4b96      	ldr	r3, [pc, #600]	@ (8004260 <HAL_RCC_OscConfig+0x77c>)
 8004008:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800400c:	4a94      	ldr	r2, [pc, #592]	@ (8004260 <HAL_RCC_OscConfig+0x77c>)
 800400e:	f023 0301 	bic.w	r3, r3, #1
 8004012:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004016:	4b92      	ldr	r3, [pc, #584]	@ (8004260 <HAL_RCC_OscConfig+0x77c>)
 8004018:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800401c:	4a90      	ldr	r2, [pc, #576]	@ (8004260 <HAL_RCC_OscConfig+0x77c>)
 800401e:	f023 0304 	bic.w	r3, r3, #4
 8004022:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004026:	4b8e      	ldr	r3, [pc, #568]	@ (8004260 <HAL_RCC_OscConfig+0x77c>)
 8004028:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800402c:	4a8c      	ldr	r2, [pc, #560]	@ (8004260 <HAL_RCC_OscConfig+0x77c>)
 800402e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004032:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d016      	beq.n	800406c <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800403e:	f7fc fea7 	bl	8000d90 <HAL_GetTick>
 8004042:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004044:	e00a      	b.n	800405c <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004046:	f7fc fea3 	bl	8000d90 <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004054:	4293      	cmp	r3, r2
 8004056:	d901      	bls.n	800405c <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e175      	b.n	8004348 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800405c:	4b80      	ldr	r3, [pc, #512]	@ (8004260 <HAL_RCC_OscConfig+0x77c>)
 800405e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004062:	f003 0302 	and.w	r3, r3, #2
 8004066:	2b00      	cmp	r3, #0
 8004068:	d0ed      	beq.n	8004046 <HAL_RCC_OscConfig+0x562>
 800406a:	e015      	b.n	8004098 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800406c:	f7fc fe90 	bl	8000d90 <HAL_GetTick>
 8004070:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004072:	e00a      	b.n	800408a <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004074:	f7fc fe8c 	bl	8000d90 <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004082:	4293      	cmp	r3, r2
 8004084:	d901      	bls.n	800408a <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e15e      	b.n	8004348 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800408a:	4b75      	ldr	r3, [pc, #468]	@ (8004260 <HAL_RCC_OscConfig+0x77c>)
 800408c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004090:	f003 0302 	and.w	r3, r3, #2
 8004094:	2b00      	cmp	r3, #0
 8004096:	d1ed      	bne.n	8004074 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0320 	and.w	r3, r3, #32
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d036      	beq.n	8004112 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d019      	beq.n	80040e0 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80040ac:	4b6c      	ldr	r3, [pc, #432]	@ (8004260 <HAL_RCC_OscConfig+0x77c>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a6b      	ldr	r2, [pc, #428]	@ (8004260 <HAL_RCC_OscConfig+0x77c>)
 80040b2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80040b6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040b8:	f7fc fe6a 	bl	8000d90 <HAL_GetTick>
 80040bc:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80040be:	e008      	b.n	80040d2 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80040c0:	f7fc fe66 	bl	8000d90 <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d901      	bls.n	80040d2 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e13a      	b.n	8004348 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80040d2:	4b63      	ldr	r3, [pc, #396]	@ (8004260 <HAL_RCC_OscConfig+0x77c>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d0f0      	beq.n	80040c0 <HAL_RCC_OscConfig+0x5dc>
 80040de:	e018      	b.n	8004112 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80040e0:	4b5f      	ldr	r3, [pc, #380]	@ (8004260 <HAL_RCC_OscConfig+0x77c>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a5e      	ldr	r2, [pc, #376]	@ (8004260 <HAL_RCC_OscConfig+0x77c>)
 80040e6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80040ea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ec:	f7fc fe50 	bl	8000d90 <HAL_GetTick>
 80040f0:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80040f2:	e008      	b.n	8004106 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80040f4:	f7fc fe4c 	bl	8000d90 <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d901      	bls.n	8004106 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e120      	b.n	8004348 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004106:	4b56      	ldr	r3, [pc, #344]	@ (8004260 <HAL_RCC_OscConfig+0x77c>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d1f0      	bne.n	80040f4 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004116:	2b00      	cmp	r3, #0
 8004118:	f000 8115 	beq.w	8004346 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	2b18      	cmp	r3, #24
 8004120:	f000 80af 	beq.w	8004282 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004128:	2b02      	cmp	r3, #2
 800412a:	f040 8086 	bne.w	800423a <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800412e:	4b4c      	ldr	r3, [pc, #304]	@ (8004260 <HAL_RCC_OscConfig+0x77c>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a4b      	ldr	r2, [pc, #300]	@ (8004260 <HAL_RCC_OscConfig+0x77c>)
 8004134:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004138:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800413a:	f7fc fe29 	bl	8000d90 <HAL_GetTick>
 800413e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004140:	e008      	b.n	8004154 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8004142:	f7fc fe25 	bl	8000d90 <HAL_GetTick>
 8004146:	4602      	mov	r2, r0
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	2b02      	cmp	r3, #2
 800414e:	d901      	bls.n	8004154 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	e0f9      	b.n	8004348 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004154:	4b42      	ldr	r3, [pc, #264]	@ (8004260 <HAL_RCC_OscConfig+0x77c>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d1f0      	bne.n	8004142 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8004160:	4b3f      	ldr	r3, [pc, #252]	@ (8004260 <HAL_RCC_OscConfig+0x77c>)
 8004162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004164:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004168:	f023 0303 	bic.w	r3, r3, #3
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004174:	0212      	lsls	r2, r2, #8
 8004176:	430a      	orrs	r2, r1
 8004178:	4939      	ldr	r1, [pc, #228]	@ (8004260 <HAL_RCC_OscConfig+0x77c>)
 800417a:	4313      	orrs	r3, r2
 800417c:	628b      	str	r3, [r1, #40]	@ 0x28
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004182:	3b01      	subs	r3, #1
 8004184:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800418c:	3b01      	subs	r3, #1
 800418e:	025b      	lsls	r3, r3, #9
 8004190:	b29b      	uxth	r3, r3
 8004192:	431a      	orrs	r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004198:	3b01      	subs	r3, #1
 800419a:	041b      	lsls	r3, r3, #16
 800419c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80041a0:	431a      	orrs	r2, r3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a6:	3b01      	subs	r3, #1
 80041a8:	061b      	lsls	r3, r3, #24
 80041aa:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80041ae:	492c      	ldr	r1, [pc, #176]	@ (8004260 <HAL_RCC_OscConfig+0x77c>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80041b4:	4b2a      	ldr	r3, [pc, #168]	@ (8004260 <HAL_RCC_OscConfig+0x77c>)
 80041b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041b8:	4a29      	ldr	r2, [pc, #164]	@ (8004260 <HAL_RCC_OscConfig+0x77c>)
 80041ba:	f023 0310 	bic.w	r3, r3, #16
 80041be:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041c4:	4a26      	ldr	r2, [pc, #152]	@ (8004260 <HAL_RCC_OscConfig+0x77c>)
 80041c6:	00db      	lsls	r3, r3, #3
 80041c8:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80041ca:	4b25      	ldr	r3, [pc, #148]	@ (8004260 <HAL_RCC_OscConfig+0x77c>)
 80041cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ce:	4a24      	ldr	r2, [pc, #144]	@ (8004260 <HAL_RCC_OscConfig+0x77c>)
 80041d0:	f043 0310 	orr.w	r3, r3, #16
 80041d4:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 80041d6:	4b22      	ldr	r3, [pc, #136]	@ (8004260 <HAL_RCC_OscConfig+0x77c>)
 80041d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041da:	f023 020c 	bic.w	r2, r3, #12
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041e2:	491f      	ldr	r1, [pc, #124]	@ (8004260 <HAL_RCC_OscConfig+0x77c>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 80041e8:	4b1d      	ldr	r3, [pc, #116]	@ (8004260 <HAL_RCC_OscConfig+0x77c>)
 80041ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ec:	f023 0220 	bic.w	r2, r3, #32
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041f4:	491a      	ldr	r1, [pc, #104]	@ (8004260 <HAL_RCC_OscConfig+0x77c>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 80041fa:	4b19      	ldr	r3, [pc, #100]	@ (8004260 <HAL_RCC_OscConfig+0x77c>)
 80041fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041fe:	4a18      	ldr	r2, [pc, #96]	@ (8004260 <HAL_RCC_OscConfig+0x77c>)
 8004200:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004204:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8004206:	4b16      	ldr	r3, [pc, #88]	@ (8004260 <HAL_RCC_OscConfig+0x77c>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a15      	ldr	r2, [pc, #84]	@ (8004260 <HAL_RCC_OscConfig+0x77c>)
 800420c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004210:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004212:	f7fc fdbd 	bl	8000d90 <HAL_GetTick>
 8004216:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004218:	e008      	b.n	800422c <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800421a:	f7fc fdb9 	bl	8000d90 <HAL_GetTick>
 800421e:	4602      	mov	r2, r0
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	2b02      	cmp	r3, #2
 8004226:	d901      	bls.n	800422c <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	e08d      	b.n	8004348 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800422c:	4b0c      	ldr	r3, [pc, #48]	@ (8004260 <HAL_RCC_OscConfig+0x77c>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d0f0      	beq.n	800421a <HAL_RCC_OscConfig+0x736>
 8004238:	e085      	b.n	8004346 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800423a:	4b09      	ldr	r3, [pc, #36]	@ (8004260 <HAL_RCC_OscConfig+0x77c>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a08      	ldr	r2, [pc, #32]	@ (8004260 <HAL_RCC_OscConfig+0x77c>)
 8004240:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004244:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004246:	f7fc fda3 	bl	8000d90 <HAL_GetTick>
 800424a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800424c:	e00a      	b.n	8004264 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800424e:	f7fc fd9f 	bl	8000d90 <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	2b02      	cmp	r3, #2
 800425a:	d903      	bls.n	8004264 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e073      	b.n	8004348 <HAL_RCC_OscConfig+0x864>
 8004260:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004264:	4b3a      	ldr	r3, [pc, #232]	@ (8004350 <HAL_RCC_OscConfig+0x86c>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d1ee      	bne.n	800424e <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8004270:	4b37      	ldr	r3, [pc, #220]	@ (8004350 <HAL_RCC_OscConfig+0x86c>)
 8004272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004274:	4a36      	ldr	r2, [pc, #216]	@ (8004350 <HAL_RCC_OscConfig+0x86c>)
 8004276:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800427a:	f023 0303 	bic.w	r3, r3, #3
 800427e:	6293      	str	r3, [r2, #40]	@ 0x28
 8004280:	e061      	b.n	8004346 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8004282:	4b33      	ldr	r3, [pc, #204]	@ (8004350 <HAL_RCC_OscConfig+0x86c>)
 8004284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004286:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004288:	4b31      	ldr	r3, [pc, #196]	@ (8004350 <HAL_RCC_OscConfig+0x86c>)
 800428a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800428c:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004292:	2b01      	cmp	r3, #1
 8004294:	d031      	beq.n	80042fa <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	f003 0203 	and.w	r2, r3, #3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d12a      	bne.n	80042fa <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	0a1b      	lsrs	r3, r3, #8
 80042a8:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d122      	bne.n	80042fa <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042be:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d11a      	bne.n	80042fa <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	0a5b      	lsrs	r3, r3, #9
 80042c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042d0:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d111      	bne.n	80042fa <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	0c1b      	lsrs	r3, r3, #16
 80042da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042e2:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d108      	bne.n	80042fa <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	0e1b      	lsrs	r3, r3, #24
 80042ec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042f4:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d001      	beq.n	80042fe <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e024      	b.n	8004348 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80042fe:	4b14      	ldr	r3, [pc, #80]	@ (8004350 <HAL_RCC_OscConfig+0x86c>)
 8004300:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004302:	08db      	lsrs	r3, r3, #3
 8004304:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800430c:	429a      	cmp	r2, r3
 800430e:	d01a      	beq.n	8004346 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8004310:	4b0f      	ldr	r3, [pc, #60]	@ (8004350 <HAL_RCC_OscConfig+0x86c>)
 8004312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004314:	4a0e      	ldr	r2, [pc, #56]	@ (8004350 <HAL_RCC_OscConfig+0x86c>)
 8004316:	f023 0310 	bic.w	r3, r3, #16
 800431a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800431c:	f7fc fd38 	bl	8000d90 <HAL_GetTick>
 8004320:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8004322:	bf00      	nop
 8004324:	f7fc fd34 	bl	8000d90 <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	4293      	cmp	r3, r2
 800432e:	d0f9      	beq.n	8004324 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004334:	4a06      	ldr	r2, [pc, #24]	@ (8004350 <HAL_RCC_OscConfig+0x86c>)
 8004336:	00db      	lsls	r3, r3, #3
 8004338:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800433a:	4b05      	ldr	r3, [pc, #20]	@ (8004350 <HAL_RCC_OscConfig+0x86c>)
 800433c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800433e:	4a04      	ldr	r2, [pc, #16]	@ (8004350 <HAL_RCC_OscConfig+0x86c>)
 8004340:	f043 0310 	orr.w	r3, r3, #16
 8004344:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8004346:	2300      	movs	r3, #0
}
 8004348:	4618      	mov	r0, r3
 800434a:	3720      	adds	r7, #32
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}
 8004350:	44020c00 	.word	0x44020c00

08004354 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d101      	bne.n	8004368 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e19e      	b.n	80046a6 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004368:	4b83      	ldr	r3, [pc, #524]	@ (8004578 <HAL_RCC_ClockConfig+0x224>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 030f 	and.w	r3, r3, #15
 8004370:	683a      	ldr	r2, [r7, #0]
 8004372:	429a      	cmp	r2, r3
 8004374:	d910      	bls.n	8004398 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004376:	4b80      	ldr	r3, [pc, #512]	@ (8004578 <HAL_RCC_ClockConfig+0x224>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f023 020f 	bic.w	r2, r3, #15
 800437e:	497e      	ldr	r1, [pc, #504]	@ (8004578 <HAL_RCC_ClockConfig+0x224>)
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	4313      	orrs	r3, r2
 8004384:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004386:	4b7c      	ldr	r3, [pc, #496]	@ (8004578 <HAL_RCC_ClockConfig+0x224>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 030f 	and.w	r3, r3, #15
 800438e:	683a      	ldr	r2, [r7, #0]
 8004390:	429a      	cmp	r2, r3
 8004392:	d001      	beq.n	8004398 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e186      	b.n	80046a6 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0310 	and.w	r3, r3, #16
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d012      	beq.n	80043ca <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	695a      	ldr	r2, [r3, #20]
 80043a8:	4b74      	ldr	r3, [pc, #464]	@ (800457c <HAL_RCC_ClockConfig+0x228>)
 80043aa:	6a1b      	ldr	r3, [r3, #32]
 80043ac:	0a1b      	lsrs	r3, r3, #8
 80043ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d909      	bls.n	80043ca <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80043b6:	4b71      	ldr	r3, [pc, #452]	@ (800457c <HAL_RCC_ClockConfig+0x228>)
 80043b8:	6a1b      	ldr	r3, [r3, #32]
 80043ba:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	695b      	ldr	r3, [r3, #20]
 80043c2:	021b      	lsls	r3, r3, #8
 80043c4:	496d      	ldr	r1, [pc, #436]	@ (800457c <HAL_RCC_ClockConfig+0x228>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0308 	and.w	r3, r3, #8
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d012      	beq.n	80043fc <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	691a      	ldr	r2, [r3, #16]
 80043da:	4b68      	ldr	r3, [pc, #416]	@ (800457c <HAL_RCC_ClockConfig+0x228>)
 80043dc:	6a1b      	ldr	r3, [r3, #32]
 80043de:	091b      	lsrs	r3, r3, #4
 80043e0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d909      	bls.n	80043fc <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80043e8:	4b64      	ldr	r3, [pc, #400]	@ (800457c <HAL_RCC_ClockConfig+0x228>)
 80043ea:	6a1b      	ldr	r3, [r3, #32]
 80043ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	691b      	ldr	r3, [r3, #16]
 80043f4:	011b      	lsls	r3, r3, #4
 80043f6:	4961      	ldr	r1, [pc, #388]	@ (800457c <HAL_RCC_ClockConfig+0x228>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0304 	and.w	r3, r3, #4
 8004404:	2b00      	cmp	r3, #0
 8004406:	d010      	beq.n	800442a <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	68da      	ldr	r2, [r3, #12]
 800440c:	4b5b      	ldr	r3, [pc, #364]	@ (800457c <HAL_RCC_ClockConfig+0x228>)
 800440e:	6a1b      	ldr	r3, [r3, #32]
 8004410:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004414:	429a      	cmp	r2, r3
 8004416:	d908      	bls.n	800442a <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8004418:	4b58      	ldr	r3, [pc, #352]	@ (800457c <HAL_RCC_ClockConfig+0x228>)
 800441a:	6a1b      	ldr	r3, [r3, #32]
 800441c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	4955      	ldr	r1, [pc, #340]	@ (800457c <HAL_RCC_ClockConfig+0x228>)
 8004426:	4313      	orrs	r3, r2
 8004428:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0302 	and.w	r3, r3, #2
 8004432:	2b00      	cmp	r3, #0
 8004434:	d010      	beq.n	8004458 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	689a      	ldr	r2, [r3, #8]
 800443a:	4b50      	ldr	r3, [pc, #320]	@ (800457c <HAL_RCC_ClockConfig+0x228>)
 800443c:	6a1b      	ldr	r3, [r3, #32]
 800443e:	f003 030f 	and.w	r3, r3, #15
 8004442:	429a      	cmp	r2, r3
 8004444:	d908      	bls.n	8004458 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8004446:	4b4d      	ldr	r3, [pc, #308]	@ (800457c <HAL_RCC_ClockConfig+0x228>)
 8004448:	6a1b      	ldr	r3, [r3, #32]
 800444a:	f023 020f 	bic.w	r2, r3, #15
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	494a      	ldr	r1, [pc, #296]	@ (800457c <HAL_RCC_ClockConfig+0x228>)
 8004454:	4313      	orrs	r3, r2
 8004456:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0301 	and.w	r3, r3, #1
 8004460:	2b00      	cmp	r3, #0
 8004462:	f000 8093 	beq.w	800458c <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	2b03      	cmp	r3, #3
 800446c:	d107      	bne.n	800447e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800446e:	4b43      	ldr	r3, [pc, #268]	@ (800457c <HAL_RCC_ClockConfig+0x228>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d121      	bne.n	80044be <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e113      	b.n	80046a6 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	2b02      	cmp	r3, #2
 8004484:	d107      	bne.n	8004496 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004486:	4b3d      	ldr	r3, [pc, #244]	@ (800457c <HAL_RCC_ClockConfig+0x228>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d115      	bne.n	80044be <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e107      	b.n	80046a6 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	2b01      	cmp	r3, #1
 800449c:	d107      	bne.n	80044ae <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800449e:	4b37      	ldr	r3, [pc, #220]	@ (800457c <HAL_RCC_ClockConfig+0x228>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d109      	bne.n	80044be <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e0fb      	b.n	80046a6 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044ae:	4b33      	ldr	r3, [pc, #204]	@ (800457c <HAL_RCC_ClockConfig+0x228>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0302 	and.w	r3, r3, #2
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d101      	bne.n	80044be <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e0f3      	b.n	80046a6 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 80044be:	4b2f      	ldr	r3, [pc, #188]	@ (800457c <HAL_RCC_ClockConfig+0x228>)
 80044c0:	69db      	ldr	r3, [r3, #28]
 80044c2:	f023 0203 	bic.w	r2, r3, #3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	492c      	ldr	r1, [pc, #176]	@ (800457c <HAL_RCC_ClockConfig+0x228>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044d0:	f7fc fc5e 	bl	8000d90 <HAL_GetTick>
 80044d4:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	2b03      	cmp	r3, #3
 80044dc:	d112      	bne.n	8004504 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044de:	e00a      	b.n	80044f6 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80044e0:	f7fc fc56 	bl	8000d90 <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d901      	bls.n	80044f6 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e0d7      	b.n	80046a6 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044f6:	4b21      	ldr	r3, [pc, #132]	@ (800457c <HAL_RCC_ClockConfig+0x228>)
 80044f8:	69db      	ldr	r3, [r3, #28]
 80044fa:	f003 0318 	and.w	r3, r3, #24
 80044fe:	2b18      	cmp	r3, #24
 8004500:	d1ee      	bne.n	80044e0 <HAL_RCC_ClockConfig+0x18c>
 8004502:	e043      	b.n	800458c <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	2b02      	cmp	r3, #2
 800450a:	d112      	bne.n	8004532 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800450c:	e00a      	b.n	8004524 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800450e:	f7fc fc3f 	bl	8000d90 <HAL_GetTick>
 8004512:	4602      	mov	r2, r0
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	f241 3288 	movw	r2, #5000	@ 0x1388
 800451c:	4293      	cmp	r3, r2
 800451e:	d901      	bls.n	8004524 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	e0c0      	b.n	80046a6 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004524:	4b15      	ldr	r3, [pc, #84]	@ (800457c <HAL_RCC_ClockConfig+0x228>)
 8004526:	69db      	ldr	r3, [r3, #28]
 8004528:	f003 0318 	and.w	r3, r3, #24
 800452c:	2b10      	cmp	r3, #16
 800452e:	d1ee      	bne.n	800450e <HAL_RCC_ClockConfig+0x1ba>
 8004530:	e02c      	b.n	800458c <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	2b01      	cmp	r3, #1
 8004538:	d122      	bne.n	8004580 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800453a:	e00a      	b.n	8004552 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800453c:	f7fc fc28 	bl	8000d90 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	f241 3288 	movw	r2, #5000	@ 0x1388
 800454a:	4293      	cmp	r3, r2
 800454c:	d901      	bls.n	8004552 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e0a9      	b.n	80046a6 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8004552:	4b0a      	ldr	r3, [pc, #40]	@ (800457c <HAL_RCC_ClockConfig+0x228>)
 8004554:	69db      	ldr	r3, [r3, #28]
 8004556:	f003 0318 	and.w	r3, r3, #24
 800455a:	2b08      	cmp	r3, #8
 800455c:	d1ee      	bne.n	800453c <HAL_RCC_ClockConfig+0x1e8>
 800455e:	e015      	b.n	800458c <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004560:	f7fc fc16 	bl	8000d90 <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800456e:	4293      	cmp	r3, r2
 8004570:	d906      	bls.n	8004580 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e097      	b.n	80046a6 <HAL_RCC_ClockConfig+0x352>
 8004576:	bf00      	nop
 8004578:	40022000 	.word	0x40022000
 800457c:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004580:	4b4b      	ldr	r3, [pc, #300]	@ (80046b0 <HAL_RCC_ClockConfig+0x35c>)
 8004582:	69db      	ldr	r3, [r3, #28]
 8004584:	f003 0318 	and.w	r3, r3, #24
 8004588:	2b00      	cmp	r3, #0
 800458a:	d1e9      	bne.n	8004560 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0302 	and.w	r3, r3, #2
 8004594:	2b00      	cmp	r3, #0
 8004596:	d010      	beq.n	80045ba <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	689a      	ldr	r2, [r3, #8]
 800459c:	4b44      	ldr	r3, [pc, #272]	@ (80046b0 <HAL_RCC_ClockConfig+0x35c>)
 800459e:	6a1b      	ldr	r3, [r3, #32]
 80045a0:	f003 030f 	and.w	r3, r3, #15
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d208      	bcs.n	80045ba <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80045a8:	4b41      	ldr	r3, [pc, #260]	@ (80046b0 <HAL_RCC_ClockConfig+0x35c>)
 80045aa:	6a1b      	ldr	r3, [r3, #32]
 80045ac:	f023 020f 	bic.w	r2, r3, #15
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	493e      	ldr	r1, [pc, #248]	@ (80046b0 <HAL_RCC_ClockConfig+0x35c>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045ba:	4b3e      	ldr	r3, [pc, #248]	@ (80046b4 <HAL_RCC_ClockConfig+0x360>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 030f 	and.w	r3, r3, #15
 80045c2:	683a      	ldr	r2, [r7, #0]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d210      	bcs.n	80045ea <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045c8:	4b3a      	ldr	r3, [pc, #232]	@ (80046b4 <HAL_RCC_ClockConfig+0x360>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f023 020f 	bic.w	r2, r3, #15
 80045d0:	4938      	ldr	r1, [pc, #224]	@ (80046b4 <HAL_RCC_ClockConfig+0x360>)
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045d8:	4b36      	ldr	r3, [pc, #216]	@ (80046b4 <HAL_RCC_ClockConfig+0x360>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 030f 	and.w	r3, r3, #15
 80045e0:	683a      	ldr	r2, [r7, #0]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d001      	beq.n	80045ea <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e05d      	b.n	80046a6 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0304 	and.w	r3, r3, #4
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d010      	beq.n	8004618 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	68da      	ldr	r2, [r3, #12]
 80045fa:	4b2d      	ldr	r3, [pc, #180]	@ (80046b0 <HAL_RCC_ClockConfig+0x35c>)
 80045fc:	6a1b      	ldr	r3, [r3, #32]
 80045fe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004602:	429a      	cmp	r2, r3
 8004604:	d208      	bcs.n	8004618 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8004606:	4b2a      	ldr	r3, [pc, #168]	@ (80046b0 <HAL_RCC_ClockConfig+0x35c>)
 8004608:	6a1b      	ldr	r3, [r3, #32]
 800460a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	4927      	ldr	r1, [pc, #156]	@ (80046b0 <HAL_RCC_ClockConfig+0x35c>)
 8004614:	4313      	orrs	r3, r2
 8004616:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0308 	and.w	r3, r3, #8
 8004620:	2b00      	cmp	r3, #0
 8004622:	d012      	beq.n	800464a <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	691a      	ldr	r2, [r3, #16]
 8004628:	4b21      	ldr	r3, [pc, #132]	@ (80046b0 <HAL_RCC_ClockConfig+0x35c>)
 800462a:	6a1b      	ldr	r3, [r3, #32]
 800462c:	091b      	lsrs	r3, r3, #4
 800462e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004632:	429a      	cmp	r2, r3
 8004634:	d209      	bcs.n	800464a <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8004636:	4b1e      	ldr	r3, [pc, #120]	@ (80046b0 <HAL_RCC_ClockConfig+0x35c>)
 8004638:	6a1b      	ldr	r3, [r3, #32]
 800463a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	011b      	lsls	r3, r3, #4
 8004644:	491a      	ldr	r1, [pc, #104]	@ (80046b0 <HAL_RCC_ClockConfig+0x35c>)
 8004646:	4313      	orrs	r3, r2
 8004648:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0310 	and.w	r3, r3, #16
 8004652:	2b00      	cmp	r3, #0
 8004654:	d012      	beq.n	800467c <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	695a      	ldr	r2, [r3, #20]
 800465a:	4b15      	ldr	r3, [pc, #84]	@ (80046b0 <HAL_RCC_ClockConfig+0x35c>)
 800465c:	6a1b      	ldr	r3, [r3, #32]
 800465e:	0a1b      	lsrs	r3, r3, #8
 8004660:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004664:	429a      	cmp	r2, r3
 8004666:	d209      	bcs.n	800467c <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8004668:	4b11      	ldr	r3, [pc, #68]	@ (80046b0 <HAL_RCC_ClockConfig+0x35c>)
 800466a:	6a1b      	ldr	r3, [r3, #32]
 800466c:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	695b      	ldr	r3, [r3, #20]
 8004674:	021b      	lsls	r3, r3, #8
 8004676:	490e      	ldr	r1, [pc, #56]	@ (80046b0 <HAL_RCC_ClockConfig+0x35c>)
 8004678:	4313      	orrs	r3, r2
 800467a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800467c:	f000 f822 	bl	80046c4 <HAL_RCC_GetSysClockFreq>
 8004680:	4602      	mov	r2, r0
 8004682:	4b0b      	ldr	r3, [pc, #44]	@ (80046b0 <HAL_RCC_ClockConfig+0x35c>)
 8004684:	6a1b      	ldr	r3, [r3, #32]
 8004686:	f003 030f 	and.w	r3, r3, #15
 800468a:	490b      	ldr	r1, [pc, #44]	@ (80046b8 <HAL_RCC_ClockConfig+0x364>)
 800468c:	5ccb      	ldrb	r3, [r1, r3]
 800468e:	fa22 f303 	lsr.w	r3, r2, r3
 8004692:	4a0a      	ldr	r2, [pc, #40]	@ (80046bc <HAL_RCC_ClockConfig+0x368>)
 8004694:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004696:	4b0a      	ldr	r3, [pc, #40]	@ (80046c0 <HAL_RCC_ClockConfig+0x36c>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4618      	mov	r0, r3
 800469c:	f7fc faee 	bl	8000c7c <HAL_InitTick>
 80046a0:	4603      	mov	r3, r0
 80046a2:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 80046a4:	7afb      	ldrb	r3, [r7, #11]
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3710      	adds	r7, #16
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	44020c00 	.word	0x44020c00
 80046b4:	40022000 	.word	0x40022000
 80046b8:	0800ca0c 	.word	0x0800ca0c
 80046bc:	20000004 	.word	0x20000004
 80046c0:	20000008 	.word	0x20000008

080046c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b089      	sub	sp, #36	@ 0x24
 80046c8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 80046ca:	4b8c      	ldr	r3, [pc, #560]	@ (80048fc <HAL_RCC_GetSysClockFreq+0x238>)
 80046cc:	69db      	ldr	r3, [r3, #28]
 80046ce:	f003 0318 	and.w	r3, r3, #24
 80046d2:	2b08      	cmp	r3, #8
 80046d4:	d102      	bne.n	80046dc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80046d6:	4b8a      	ldr	r3, [pc, #552]	@ (8004900 <HAL_RCC_GetSysClockFreq+0x23c>)
 80046d8:	61fb      	str	r3, [r7, #28]
 80046da:	e107      	b.n	80048ec <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80046dc:	4b87      	ldr	r3, [pc, #540]	@ (80048fc <HAL_RCC_GetSysClockFreq+0x238>)
 80046de:	69db      	ldr	r3, [r3, #28]
 80046e0:	f003 0318 	and.w	r3, r3, #24
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d112      	bne.n	800470e <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80046e8:	4b84      	ldr	r3, [pc, #528]	@ (80048fc <HAL_RCC_GetSysClockFreq+0x238>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0320 	and.w	r3, r3, #32
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d009      	beq.n	8004708 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80046f4:	4b81      	ldr	r3, [pc, #516]	@ (80048fc <HAL_RCC_GetSysClockFreq+0x238>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	08db      	lsrs	r3, r3, #3
 80046fa:	f003 0303 	and.w	r3, r3, #3
 80046fe:	4a81      	ldr	r2, [pc, #516]	@ (8004904 <HAL_RCC_GetSysClockFreq+0x240>)
 8004700:	fa22 f303 	lsr.w	r3, r2, r3
 8004704:	61fb      	str	r3, [r7, #28]
 8004706:	e0f1      	b.n	80048ec <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8004708:	4b7e      	ldr	r3, [pc, #504]	@ (8004904 <HAL_RCC_GetSysClockFreq+0x240>)
 800470a:	61fb      	str	r3, [r7, #28]
 800470c:	e0ee      	b.n	80048ec <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800470e:	4b7b      	ldr	r3, [pc, #492]	@ (80048fc <HAL_RCC_GetSysClockFreq+0x238>)
 8004710:	69db      	ldr	r3, [r3, #28]
 8004712:	f003 0318 	and.w	r3, r3, #24
 8004716:	2b10      	cmp	r3, #16
 8004718:	d102      	bne.n	8004720 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800471a:	4b7b      	ldr	r3, [pc, #492]	@ (8004908 <HAL_RCC_GetSysClockFreq+0x244>)
 800471c:	61fb      	str	r3, [r7, #28]
 800471e:	e0e5      	b.n	80048ec <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004720:	4b76      	ldr	r3, [pc, #472]	@ (80048fc <HAL_RCC_GetSysClockFreq+0x238>)
 8004722:	69db      	ldr	r3, [r3, #28]
 8004724:	f003 0318 	and.w	r3, r3, #24
 8004728:	2b18      	cmp	r3, #24
 800472a:	f040 80dd 	bne.w	80048e8 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800472e:	4b73      	ldr	r3, [pc, #460]	@ (80048fc <HAL_RCC_GetSysClockFreq+0x238>)
 8004730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004732:	f003 0303 	and.w	r3, r3, #3
 8004736:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8004738:	4b70      	ldr	r3, [pc, #448]	@ (80048fc <HAL_RCC_GetSysClockFreq+0x238>)
 800473a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800473c:	0a1b      	lsrs	r3, r3, #8
 800473e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004742:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004744:	4b6d      	ldr	r3, [pc, #436]	@ (80048fc <HAL_RCC_GetSysClockFreq+0x238>)
 8004746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004748:	091b      	lsrs	r3, r3, #4
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8004750:	4b6a      	ldr	r3, [pc, #424]	@ (80048fc <HAL_RCC_GetSysClockFreq+0x238>)
 8004752:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8004754:	08db      	lsrs	r3, r3, #3
 8004756:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800475a:	68fa      	ldr	r2, [r7, #12]
 800475c:	fb02 f303 	mul.w	r3, r2, r3
 8004760:	ee07 3a90 	vmov	s15, r3
 8004764:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004768:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	2b00      	cmp	r3, #0
 8004770:	f000 80b7 	beq.w	80048e2 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	2b01      	cmp	r3, #1
 8004778:	d003      	beq.n	8004782 <HAL_RCC_GetSysClockFreq+0xbe>
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	2b03      	cmp	r3, #3
 800477e:	d056      	beq.n	800482e <HAL_RCC_GetSysClockFreq+0x16a>
 8004780:	e077      	b.n	8004872 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8004782:	4b5e      	ldr	r3, [pc, #376]	@ (80048fc <HAL_RCC_GetSysClockFreq+0x238>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0320 	and.w	r3, r3, #32
 800478a:	2b00      	cmp	r3, #0
 800478c:	d02d      	beq.n	80047ea <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800478e:	4b5b      	ldr	r3, [pc, #364]	@ (80048fc <HAL_RCC_GetSysClockFreq+0x238>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	08db      	lsrs	r3, r3, #3
 8004794:	f003 0303 	and.w	r3, r3, #3
 8004798:	4a5a      	ldr	r2, [pc, #360]	@ (8004904 <HAL_RCC_GetSysClockFreq+0x240>)
 800479a:	fa22 f303 	lsr.w	r3, r2, r3
 800479e:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	ee07 3a90 	vmov	s15, r3
 80047a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	ee07 3a90 	vmov	s15, r3
 80047b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047b8:	4b50      	ldr	r3, [pc, #320]	@ (80048fc <HAL_RCC_GetSysClockFreq+0x238>)
 80047ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047c0:	ee07 3a90 	vmov	s15, r3
 80047c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80047c8:	ed97 6a02 	vldr	s12, [r7, #8]
 80047cc:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 800490c <HAL_RCC_GetSysClockFreq+0x248>
 80047d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80047d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80047d8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80047e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047e4:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 80047e8:	e065      	b.n	80048b6 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	ee07 3a90 	vmov	s15, r3
 80047f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047f4:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8004910 <HAL_RCC_GetSysClockFreq+0x24c>
 80047f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047fc:	4b3f      	ldr	r3, [pc, #252]	@ (80048fc <HAL_RCC_GetSysClockFreq+0x238>)
 80047fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004800:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004804:	ee07 3a90 	vmov	s15, r3
 8004808:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 800480c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004810:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800490c <HAL_RCC_GetSysClockFreq+0x248>
 8004814:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004818:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 800481c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004820:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004824:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004828:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 800482c:	e043      	b.n	80048b6 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	ee07 3a90 	vmov	s15, r3
 8004834:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004838:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8004914 <HAL_RCC_GetSysClockFreq+0x250>
 800483c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004840:	4b2e      	ldr	r3, [pc, #184]	@ (80048fc <HAL_RCC_GetSysClockFreq+0x238>)
 8004842:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004844:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004848:	ee07 3a90 	vmov	s15, r3
 800484c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004850:	ed97 6a02 	vldr	s12, [r7, #8]
 8004854:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 800490c <HAL_RCC_GetSysClockFreq+0x248>
 8004858:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800485c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004860:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004864:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004868:	ee67 7a27 	vmul.f32	s15, s14, s15
 800486c:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8004870:	e021      	b.n	80048b6 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	ee07 3a90 	vmov	s15, r3
 8004878:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800487c:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004918 <HAL_RCC_GetSysClockFreq+0x254>
 8004880:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004884:	4b1d      	ldr	r3, [pc, #116]	@ (80048fc <HAL_RCC_GetSysClockFreq+0x238>)
 8004886:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004888:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800488c:	ee07 3a90 	vmov	s15, r3
 8004890:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004894:	ed97 6a02 	vldr	s12, [r7, #8]
 8004898:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 800490c <HAL_RCC_GetSysClockFreq+0x248>
 800489c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80048a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80048a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80048ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048b0:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80048b4:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 80048b6:	4b11      	ldr	r3, [pc, #68]	@ (80048fc <HAL_RCC_GetSysClockFreq+0x238>)
 80048b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048ba:	0a5b      	lsrs	r3, r3, #9
 80048bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80048c0:	3301      	adds	r3, #1
 80048c2:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	ee07 3a90 	vmov	s15, r3
 80048ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80048ce:	edd7 6a06 	vldr	s13, [r7, #24]
 80048d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048da:	ee17 3a90 	vmov	r3, s15
 80048de:	61fb      	str	r3, [r7, #28]
 80048e0:	e004      	b.n	80048ec <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 80048e2:	2300      	movs	r3, #0
 80048e4:	61fb      	str	r3, [r7, #28]
 80048e6:	e001      	b.n	80048ec <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 80048e8:	4b06      	ldr	r3, [pc, #24]	@ (8004904 <HAL_RCC_GetSysClockFreq+0x240>)
 80048ea:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 80048ec:	69fb      	ldr	r3, [r7, #28]
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3724      	adds	r7, #36	@ 0x24
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	44020c00 	.word	0x44020c00
 8004900:	003d0900 	.word	0x003d0900
 8004904:	03d09000 	.word	0x03d09000
 8004908:	017d7840 	.word	0x017d7840
 800490c:	46000000 	.word	0x46000000
 8004910:	4c742400 	.word	0x4c742400
 8004914:	4bbebc20 	.word	0x4bbebc20
 8004918:	4a742400 	.word	0x4a742400

0800491c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004920:	f7ff fed0 	bl	80046c4 <HAL_RCC_GetSysClockFreq>
 8004924:	4602      	mov	r2, r0
 8004926:	4b08      	ldr	r3, [pc, #32]	@ (8004948 <HAL_RCC_GetHCLKFreq+0x2c>)
 8004928:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800492a:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800492e:	4907      	ldr	r1, [pc, #28]	@ (800494c <HAL_RCC_GetHCLKFreq+0x30>)
 8004930:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8004932:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004936:	fa22 f303 	lsr.w	r3, r2, r3
 800493a:	4a05      	ldr	r2, [pc, #20]	@ (8004950 <HAL_RCC_GetHCLKFreq+0x34>)
 800493c:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 800493e:	4b04      	ldr	r3, [pc, #16]	@ (8004950 <HAL_RCC_GetHCLKFreq+0x34>)
 8004940:	681b      	ldr	r3, [r3, #0]
}
 8004942:	4618      	mov	r0, r3
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	44020c00 	.word	0x44020c00
 800494c:	0800ca0c 	.word	0x0800ca0c
 8004950:	20000004 	.word	0x20000004

08004954 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8004954:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004958:	b0ba      	sub	sp, #232	@ 0xe8
 800495a:	af00      	add	r7, sp, #0
 800495c:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004960:	2300      	movs	r3, #0
 8004962:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004966:	2300      	movs	r3, #0
 8004968:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800496c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004974:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8004978:	2500      	movs	r5, #0
 800497a:	ea54 0305 	orrs.w	r3, r4, r5
 800497e:	d00b      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8004980:	4bcd      	ldr	r3, [pc, #820]	@ (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004982:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004986:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 800498a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800498e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004990:	4ac9      	ldr	r2, [pc, #804]	@ (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004992:	430b      	orrs	r3, r1
 8004994:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004998:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800499c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049a0:	f002 0801 	and.w	r8, r2, #1
 80049a4:	f04f 0900 	mov.w	r9, #0
 80049a8:	ea58 0309 	orrs.w	r3, r8, r9
 80049ac:	d042      	beq.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 80049ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80049b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049b4:	2b05      	cmp	r3, #5
 80049b6:	d823      	bhi.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0xac>
 80049b8:	a201      	add	r2, pc, #4	@ (adr r2, 80049c0 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 80049ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049be:	bf00      	nop
 80049c0:	08004a09 	.word	0x08004a09
 80049c4:	080049d9 	.word	0x080049d9
 80049c8:	080049ed 	.word	0x080049ed
 80049cc:	08004a09 	.word	0x08004a09
 80049d0:	08004a09 	.word	0x08004a09
 80049d4:	08004a09 	.word	0x08004a09
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80049d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80049dc:	3308      	adds	r3, #8
 80049de:	4618      	mov	r0, r3
 80049e0:	f001 f978 	bl	8005cd4 <RCCEx_PLL2_Config>
 80049e4:	4603      	mov	r3, r0
 80049e6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 80049ea:	e00e      	b.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80049ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80049f0:	3330      	adds	r3, #48	@ 0x30
 80049f2:	4618      	mov	r0, r3
 80049f4:	f001 fa06 	bl	8005e04 <RCCEx_PLL3_Config>
 80049f8:	4603      	mov	r3, r0
 80049fa:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 80049fe:	e004      	b.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004a06:	e000      	b.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8004a08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a0a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d10c      	bne.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8004a12:	4ba9      	ldr	r3, [pc, #676]	@ (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004a14:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004a18:	f023 0107 	bic.w	r1, r3, #7
 8004a1c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a22:	4aa5      	ldr	r2, [pc, #660]	@ (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004a24:	430b      	orrs	r3, r1
 8004a26:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004a2a:	e003      	b.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a2c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004a30:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a34:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a3c:	f002 0a02 	and.w	sl, r2, #2
 8004a40:	f04f 0b00 	mov.w	fp, #0
 8004a44:	ea5a 030b 	orrs.w	r3, sl, fp
 8004a48:	f000 8088 	beq.w	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8004a4c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a52:	2b28      	cmp	r3, #40	@ 0x28
 8004a54:	d868      	bhi.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8004a56:	a201      	add	r2, pc, #4	@ (adr r2, 8004a5c <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8004a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a5c:	08004b31 	.word	0x08004b31
 8004a60:	08004b29 	.word	0x08004b29
 8004a64:	08004b29 	.word	0x08004b29
 8004a68:	08004b29 	.word	0x08004b29
 8004a6c:	08004b29 	.word	0x08004b29
 8004a70:	08004b29 	.word	0x08004b29
 8004a74:	08004b29 	.word	0x08004b29
 8004a78:	08004b29 	.word	0x08004b29
 8004a7c:	08004b01 	.word	0x08004b01
 8004a80:	08004b29 	.word	0x08004b29
 8004a84:	08004b29 	.word	0x08004b29
 8004a88:	08004b29 	.word	0x08004b29
 8004a8c:	08004b29 	.word	0x08004b29
 8004a90:	08004b29 	.word	0x08004b29
 8004a94:	08004b29 	.word	0x08004b29
 8004a98:	08004b29 	.word	0x08004b29
 8004a9c:	08004b15 	.word	0x08004b15
 8004aa0:	08004b29 	.word	0x08004b29
 8004aa4:	08004b29 	.word	0x08004b29
 8004aa8:	08004b29 	.word	0x08004b29
 8004aac:	08004b29 	.word	0x08004b29
 8004ab0:	08004b29 	.word	0x08004b29
 8004ab4:	08004b29 	.word	0x08004b29
 8004ab8:	08004b29 	.word	0x08004b29
 8004abc:	08004b31 	.word	0x08004b31
 8004ac0:	08004b29 	.word	0x08004b29
 8004ac4:	08004b29 	.word	0x08004b29
 8004ac8:	08004b29 	.word	0x08004b29
 8004acc:	08004b29 	.word	0x08004b29
 8004ad0:	08004b29 	.word	0x08004b29
 8004ad4:	08004b29 	.word	0x08004b29
 8004ad8:	08004b29 	.word	0x08004b29
 8004adc:	08004b31 	.word	0x08004b31
 8004ae0:	08004b29 	.word	0x08004b29
 8004ae4:	08004b29 	.word	0x08004b29
 8004ae8:	08004b29 	.word	0x08004b29
 8004aec:	08004b29 	.word	0x08004b29
 8004af0:	08004b29 	.word	0x08004b29
 8004af4:	08004b29 	.word	0x08004b29
 8004af8:	08004b29 	.word	0x08004b29
 8004afc:	08004b31 	.word	0x08004b31
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004b00:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b04:	3308      	adds	r3, #8
 8004b06:	4618      	mov	r0, r3
 8004b08:	f001 f8e4 	bl	8005cd4 <RCCEx_PLL2_Config>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 8004b12:	e00e      	b.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004b14:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b18:	3330      	adds	r3, #48	@ 0x30
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f001 f972 	bl	8005e04 <RCCEx_PLL3_Config>
 8004b20:	4603      	mov	r3, r0
 8004b22:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 8004b26:	e004      	b.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004b2e:	e000      	b.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8004b30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b32:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d10c      	bne.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8004b3a:	4b5f      	ldr	r3, [pc, #380]	@ (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004b3c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004b40:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004b44:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b4a:	4a5b      	ldr	r2, [pc, #364]	@ (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004b4c:	430b      	orrs	r3, r1
 8004b4e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004b52:	e003      	b.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b54:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004b58:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b5c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b64:	f002 0304 	and.w	r3, r2, #4
 8004b68:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004b72:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004b76:	460b      	mov	r3, r1
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	d04e      	beq.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8004b7c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b82:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004b86:	d02c      	beq.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8004b88:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004b8c:	d825      	bhi.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004b8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b92:	d028      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004b94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b98:	d81f      	bhi.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004b9a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004b9c:	d025      	beq.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x296>
 8004b9e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004ba0:	d81b      	bhi.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004ba2:	2b80      	cmp	r3, #128	@ 0x80
 8004ba4:	d00f      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x272>
 8004ba6:	2b80      	cmp	r3, #128	@ 0x80
 8004ba8:	d817      	bhi.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d01f      	beq.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8004bae:	2b40      	cmp	r3, #64	@ 0x40
 8004bb0:	d113      	bne.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004bb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004bb6:	3308      	adds	r3, #8
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f001 f88b 	bl	8005cd4 <RCCEx_PLL2_Config>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 8004bc4:	e014      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004bc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004bca:	3330      	adds	r3, #48	@ 0x30
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f001 f919 	bl	8005e04 <RCCEx_PLL3_Config>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 8004bd8:	e00a      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004be0:	e006      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004be2:	bf00      	nop
 8004be4:	e004      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004be6:	bf00      	nop
 8004be8:	e002      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004bea:	bf00      	nop
 8004bec:	e000      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004bee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bf0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d10c      	bne.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8004bf8:	4b2f      	ldr	r3, [pc, #188]	@ (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004bfa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004bfe:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004c02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c08:	4a2b      	ldr	r2, [pc, #172]	@ (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004c0a:	430b      	orrs	r3, r1
 8004c0c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004c10:	e003      	b.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c12:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004c16:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c22:	f002 0308 	and.w	r3, r2, #8
 8004c26:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004c30:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004c34:	460b      	mov	r3, r1
 8004c36:	4313      	orrs	r3, r2
 8004c38:	d056      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8004c3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c3e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004c40:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004c44:	d031      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x356>
 8004c46:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004c4a:	d82a      	bhi.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004c4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c50:	d02d      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004c52:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c56:	d824      	bhi.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004c58:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004c5c:	d029      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8004c5e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004c62:	d81e      	bhi.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004c64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c68:	d011      	beq.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8004c6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c6e:	d818      	bhi.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d023      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004c74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c78:	d113      	bne.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004c7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c7e:	3308      	adds	r3, #8
 8004c80:	4618      	mov	r0, r3
 8004c82:	f001 f827 	bl	8005cd4 <RCCEx_PLL2_Config>
 8004c86:	4603      	mov	r3, r0
 8004c88:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 8004c8c:	e017      	b.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004c8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c92:	3330      	adds	r3, #48	@ 0x30
 8004c94:	4618      	mov	r0, r3
 8004c96:	f001 f8b5 	bl	8005e04 <RCCEx_PLL3_Config>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 8004ca0:	e00d      	b.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004ca8:	e009      	b.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8004caa:	bf00      	nop
 8004cac:	e007      	b.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8004cae:	bf00      	nop
 8004cb0:	e005      	b.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8004cb2:	bf00      	nop
 8004cb4:	e003      	b.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8004cb6:	bf00      	nop
 8004cb8:	44020c00 	.word	0x44020c00
        break;
 8004cbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cbe:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d10c      	bne.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8004cc6:	4bb9      	ldr	r3, [pc, #740]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004cc8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004ccc:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8004cd0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004cd4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004cd6:	4ab5      	ldr	r2, [pc, #724]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004cd8:	430b      	orrs	r3, r1
 8004cda:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004cde:	e003      	b.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ce0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004ce4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004ce8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf0:	f002 0310 	and.w	r3, r2, #16
 8004cf4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004cfe:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004d02:	460b      	mov	r3, r1
 8004d04:	4313      	orrs	r3, r2
 8004d06:	d053      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8004d08:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d0e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004d12:	d031      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8004d14:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004d18:	d82a      	bhi.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004d1a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d1e:	d02d      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x428>
 8004d20:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d24:	d824      	bhi.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004d26:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004d2a:	d029      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8004d2c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004d30:	d81e      	bhi.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004d32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d36:	d011      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8004d38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d3c:	d818      	bhi.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d020      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8004d42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d46:	d113      	bne.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004d48:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d4c:	3308      	adds	r3, #8
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f000 ffc0 	bl	8005cd4 <RCCEx_PLL2_Config>
 8004d54:	4603      	mov	r3, r0
 8004d56:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 8004d5a:	e014      	b.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004d5c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d60:	3330      	adds	r3, #48	@ 0x30
 8004d62:	4618      	mov	r0, r3
 8004d64:	f001 f84e 	bl	8005e04 <RCCEx_PLL3_Config>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 8004d6e:	e00a      	b.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004d76:	e006      	b.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004d78:	bf00      	nop
 8004d7a:	e004      	b.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004d7c:	bf00      	nop
 8004d7e:	e002      	b.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004d80:	bf00      	nop
 8004d82:	e000      	b.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004d84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d86:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d10c      	bne.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8004d8e:	4b87      	ldr	r3, [pc, #540]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004d90:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004d94:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004d98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d9e:	4a83      	ldr	r2, [pc, #524]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004da0:	430b      	orrs	r3, r1
 8004da2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004da6:	e003      	b.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004da8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004dac:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004db0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db8:	f002 0320 	and.w	r3, r2, #32
 8004dbc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004dc6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004dca:	460b      	mov	r3, r1
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	d053      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8004dd0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004dd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dd6:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8004dda:	d031      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8004ddc:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8004de0:	d82a      	bhi.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004de2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004de6:	d02d      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004de8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004dec:	d824      	bhi.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004dee:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8004df2:	d029      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8004df4:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8004df8:	d81e      	bhi.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004dfa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dfe:	d011      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8004e00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e04:	d818      	bhi.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d020      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8004e0a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e0e:	d113      	bne.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004e10:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e14:	3308      	adds	r3, #8
 8004e16:	4618      	mov	r0, r3
 8004e18:	f000 ff5c 	bl	8005cd4 <RCCEx_PLL2_Config>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 8004e22:	e014      	b.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004e24:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e28:	3330      	adds	r3, #48	@ 0x30
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f000 ffea 	bl	8005e04 <RCCEx_PLL3_Config>
 8004e30:	4603      	mov	r3, r0
 8004e32:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 8004e36:	e00a      	b.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004e3e:	e006      	b.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004e40:	bf00      	nop
 8004e42:	e004      	b.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004e44:	bf00      	nop
 8004e46:	e002      	b.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004e48:	bf00      	nop
 8004e4a:	e000      	b.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004e4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e4e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d10c      	bne.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8004e56:	4b55      	ldr	r3, [pc, #340]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004e58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004e5c:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8004e60:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e66:	4a51      	ldr	r2, [pc, #324]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004e68:	430b      	orrs	r3, r1
 8004e6a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004e6e:	e003      	b.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e70:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004e74:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e78:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e80:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004e84:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004e88:	2300      	movs	r3, #0
 8004e8a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004e8e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004e92:	460b      	mov	r3, r1
 8004e94:	4313      	orrs	r3, r2
 8004e96:	d053      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8004e98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e9e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004ea2:	d031      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8004ea4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004ea8:	d82a      	bhi.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004eaa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004eae:	d02d      	beq.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8004eb0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004eb4:	d824      	bhi.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004eb6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004eba:	d029      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004ebc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004ec0:	d81e      	bhi.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004ec2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004ec6:	d011      	beq.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x598>
 8004ec8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004ecc:	d818      	bhi.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d020      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004ed2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004ed6:	d113      	bne.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004ed8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004edc:	3308      	adds	r3, #8
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f000 fef8 	bl	8005cd4 <RCCEx_PLL2_Config>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8004eea:	e014      	b.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004eec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ef0:	3330      	adds	r3, #48	@ 0x30
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f000 ff86 	bl	8005e04 <RCCEx_PLL3_Config>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8004efe:	e00a      	b.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004f06:	e006      	b.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004f08:	bf00      	nop
 8004f0a:	e004      	b.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004f0c:	bf00      	nop
 8004f0e:	e002      	b.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004f10:	bf00      	nop
 8004f12:	e000      	b.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004f14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f16:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d10c      	bne.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8004f1e:	4b23      	ldr	r3, [pc, #140]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004f20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f24:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004f28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f2e:	4a1f      	ldr	r2, [pc, #124]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004f30:	430b      	orrs	r3, r1
 8004f32:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004f36:	e003      	b.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f38:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004f3c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f40:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f48:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004f4c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004f50:	2300      	movs	r3, #0
 8004f52:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004f56:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004f5a:	460b      	mov	r3, r1
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	d03d      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x688>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8004f60:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f64:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004f66:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004f6a:	d01b      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8004f6c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004f70:	d814      	bhi.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x648>
 8004f72:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f76:	d017      	beq.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x654>
 8004f78:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f7c:	d80e      	bhi.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x648>
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d016      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8004f82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f86:	d109      	bne.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x648>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004f88:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f8c:	3330      	adds	r3, #48	@ 0x30
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f000 ff38 	bl	8005e04 <RCCEx_PLL3_Config>
 8004f94:	4603      	mov	r3, r0
 8004f96:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8004f9a:	e00a      	b.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x65e>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004fa2:	e006      	b.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 8004fa4:	bf00      	nop
 8004fa6:	e004      	b.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 8004fa8:	bf00      	nop
 8004faa:	e002      	b.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x65e>
 8004fac:	44020c00 	.word	0x44020c00
        break;
 8004fb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fb2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d10c      	bne.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x680>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004fba:	4b99      	ldr	r3, [pc, #612]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004fbc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004fc0:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004fc4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004fc8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004fca:	4a95      	ldr	r2, [pc, #596]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004fcc:	430b      	orrs	r3, r1
 8004fce:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004fd2:	e003      	b.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x688>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fd4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004fd8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004fdc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004fe8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004fec:	2300      	movs	r3, #0
 8004fee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004ff2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004ff6:	460b      	mov	r3, r1
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	d03b      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x720>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8004ffc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005000:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005002:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005006:	d01b      	beq.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
 8005008:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800500c:	d814      	bhi.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 800500e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005012:	d017      	beq.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 8005014:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005018:	d80e      	bhi.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 800501a:	2b00      	cmp	r3, #0
 800501c:	d014      	beq.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 800501e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005022:	d109      	bne.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005024:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005028:	3330      	adds	r3, #48	@ 0x30
 800502a:	4618      	mov	r0, r3
 800502c:	f000 feea 	bl	8005e04 <RCCEx_PLL3_Config>
 8005030:	4603      	mov	r3, r0
 8005032:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8005036:	e008      	b.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x6f6>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800503e:	e004      	b.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8005040:	bf00      	nop
 8005042:	e002      	b.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8005044:	bf00      	nop
 8005046:	e000      	b.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8005048:	bf00      	nop
    }

    if (ret == HAL_OK)
 800504a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800504e:	2b00      	cmp	r3, #0
 8005050:	d10c      	bne.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x718>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8005052:	4b73      	ldr	r3, [pc, #460]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005054:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005058:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800505c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005060:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005062:	4a6f      	ldr	r2, [pc, #444]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005064:	430b      	orrs	r3, r1
 8005066:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800506a:	e003      	b.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x720>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800506c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005070:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005074:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800507c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005080:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005084:	2300      	movs	r3, #0
 8005086:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800508a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800508e:	460b      	mov	r3, r1
 8005090:	4313      	orrs	r3, r2
 8005092:	d03d      	beq.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8005094:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005098:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800509c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80050a0:	d01b      	beq.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x786>
 80050a2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80050a6:	d814      	bhi.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 80050a8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80050ac:	d017      	beq.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x78a>
 80050ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80050b2:	d80e      	bhi.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d014      	beq.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x78e>
 80050b8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80050bc:	d109      	bne.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x77e>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80050be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050c2:	3330      	adds	r3, #48	@ 0x30
 80050c4:	4618      	mov	r0, r3
 80050c6:	f000 fe9d 	bl	8005e04 <RCCEx_PLL3_Config>
 80050ca:	4603      	mov	r3, r0
 80050cc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* I2C3 clock source config set later after clock selection check */
        break;
 80050d0:	e008      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x790>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80050d8:	e004      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 80050da:	bf00      	nop
 80050dc:	e002      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 80050de:	bf00      	nop
 80050e0:	e000      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 80050e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050e4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d10d      	bne.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80050ec:	4b4c      	ldr	r3, [pc, #304]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80050ee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80050f2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80050f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050fe:	4a48      	ldr	r2, [pc, #288]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005100:	430b      	orrs	r3, r1
 8005102:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005106:	e003      	b.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005108:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800510c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8005110:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005118:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800511c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005120:	2300      	movs	r3, #0
 8005122:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005126:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800512a:	460b      	mov	r3, r1
 800512c:	4313      	orrs	r3, r2
 800512e:	d035      	beq.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x848>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8005130:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005134:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005138:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800513c:	d015      	beq.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x816>
 800513e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005142:	d80e      	bhi.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x80e>
 8005144:	2b00      	cmp	r3, #0
 8005146:	d012      	beq.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8005148:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800514c:	d109      	bne.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800514e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005152:	3330      	adds	r3, #48	@ 0x30
 8005154:	4618      	mov	r0, r3
 8005156:	f000 fe55 	bl	8005e04 <RCCEx_PLL3_Config>
 800515a:	4603      	mov	r3, r0
 800515c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8005160:	e006      	b.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005168:	e002      	b.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 800516a:	bf00      	nop
 800516c:	e000      	b.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 800516e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005170:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005174:	2b00      	cmp	r3, #0
 8005176:	d10d      	bne.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8005178:	4b29      	ldr	r3, [pc, #164]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800517a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800517e:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8005182:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005186:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800518a:	4a25      	ldr	r2, [pc, #148]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800518c:	430b      	orrs	r3, r1
 800518e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005192:	e003      	b.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x848>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005194:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005198:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 800519c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80051a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a4:	2100      	movs	r1, #0
 80051a6:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 80051aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80051ae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80051b2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80051b6:	460b      	mov	r3, r1
 80051b8:	4313      	orrs	r3, r2
 80051ba:	d037      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 80051bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80051c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80051c8:	d015      	beq.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 80051ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80051ce:	d80e      	bhi.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x89a>
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d012      	beq.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 80051d4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80051d8:	d109      	bne.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x89a>
        break;

#if defined(RCC_I3C2CLKSOURCE_PLL3R)
      case RCC_I3C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80051da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80051de:	3330      	adds	r3, #48	@ 0x30
 80051e0:	4618      	mov	r0, r3
 80051e2:	f000 fe0f 	bl	8005e04 <RCCEx_PLL3_Config>
 80051e6:	4603      	mov	r3, r0
 80051e8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 80051ec:	e006      	b.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x8a8>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80051f4:	e002      	b.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 80051f6:	bf00      	nop
 80051f8:	e000      	b.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 80051fa:	bf00      	nop
    }
    if (ret == HAL_OK)
 80051fc:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005200:	2b00      	cmp	r3, #0
 8005202:	d10f      	bne.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x8d0>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 8005204:	4b06      	ldr	r3, [pc, #24]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005206:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800520a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800520e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005212:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005216:	4a02      	ldr	r2, [pc, #8]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005218:	430b      	orrs	r3, r1
 800521a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800521e:	e005      	b.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 8005220:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005224:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005228:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800522c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005234:	2100      	movs	r1, #0
 8005236:	67b9      	str	r1, [r7, #120]	@ 0x78
 8005238:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800523c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800523e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005242:	460b      	mov	r3, r1
 8005244:	4313      	orrs	r3, r2
 8005246:	d00e      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x912>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8005248:	4bb8      	ldr	r3, [pc, #736]	@ (800552c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800524a:	69db      	ldr	r3, [r3, #28]
 800524c:	4ab7      	ldr	r2, [pc, #732]	@ (800552c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800524e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005252:	61d3      	str	r3, [r2, #28]
 8005254:	4bb5      	ldr	r3, [pc, #724]	@ (800552c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005256:	69d9      	ldr	r1, [r3, #28]
 8005258:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800525c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8005260:	4ab2      	ldr	r2, [pc, #712]	@ (800552c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005262:	430b      	orrs	r3, r1
 8005264:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005266:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800526a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800526e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005272:	673b      	str	r3, [r7, #112]	@ 0x70
 8005274:	2300      	movs	r3, #0
 8005276:	677b      	str	r3, [r7, #116]	@ 0x74
 8005278:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800527c:	460b      	mov	r3, r1
 800527e:	4313      	orrs	r3, r2
 8005280:	d055      	beq.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x9da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8005282:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005286:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800528a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800528e:	d031      	beq.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 8005290:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8005294:	d82a      	bhi.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x998>
 8005296:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800529a:	d02d      	beq.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x9a4>
 800529c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052a0:	d824      	bhi.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x998>
 80052a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80052a6:	d029      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x9a8>
 80052a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80052ac:	d81e      	bhi.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x998>
 80052ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052b2:	d011      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80052b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052b8:	d818      	bhi.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x998>
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d020      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
 80052be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052c2:	d113      	bne.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x998>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80052c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80052c8:	3308      	adds	r3, #8
 80052ca:	4618      	mov	r0, r3
 80052cc:	f000 fd02 	bl	8005cd4 <RCCEx_PLL2_Config>
 80052d0:	4603      	mov	r3, r0
 80052d2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80052d6:	e014      	b.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x9ae>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80052d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80052dc:	3330      	adds	r3, #48	@ 0x30
 80052de:	4618      	mov	r0, r3
 80052e0:	f000 fd90 	bl	8005e04 <RCCEx_PLL3_Config>
 80052e4:	4603      	mov	r3, r0
 80052e6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80052ea:	e00a      	b.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80052f2:	e006      	b.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 80052f4:	bf00      	nop
 80052f6:	e004      	b.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 80052f8:	bf00      	nop
 80052fa:	e002      	b.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 80052fc:	bf00      	nop
 80052fe:	e000      	b.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8005300:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005302:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005306:	2b00      	cmp	r3, #0
 8005308:	d10d      	bne.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800530a:	4b88      	ldr	r3, [pc, #544]	@ (800552c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800530c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005310:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8005314:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005318:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800531c:	4a83      	ldr	r2, [pc, #524]	@ (800552c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800531e:	430b      	orrs	r3, r1
 8005320:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005324:	e003      	b.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x9da>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005326:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800532a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800532e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005336:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800533a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800533c:	2300      	movs	r3, #0
 800533e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005340:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005344:	460b      	mov	r3, r1
 8005346:	4313      	orrs	r3, r2
 8005348:	d055      	beq.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 800534a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800534e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005352:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005356:	d031      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0xa68>
 8005358:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800535c:	d82a      	bhi.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 800535e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005362:	d02d      	beq.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
 8005364:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005368:	d824      	bhi.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 800536a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800536e:	d029      	beq.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005370:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005374:	d81e      	bhi.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8005376:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800537a:	d011      	beq.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 800537c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005380:	d818      	bhi.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8005382:	2b00      	cmp	r3, #0
 8005384:	d020      	beq.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005386:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800538a:	d113      	bne.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800538c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005390:	3308      	adds	r3, #8
 8005392:	4618      	mov	r0, r3
 8005394:	f000 fc9e 	bl	8005cd4 <RCCEx_PLL2_Config>
 8005398:	4603      	mov	r3, r0
 800539a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800539e:	e014      	b.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0xa76>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80053a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053a4:	3330      	adds	r3, #48	@ 0x30
 80053a6:	4618      	mov	r0, r3
 80053a8:	f000 fd2c 	bl	8005e04 <RCCEx_PLL3_Config>
 80053ac:	4603      	mov	r3, r0
 80053ae:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80053b2:	e00a      	b.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0xa76>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80053ba:	e006      	b.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 80053bc:	bf00      	nop
 80053be:	e004      	b.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 80053c0:	bf00      	nop
 80053c2:	e002      	b.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 80053c4:	bf00      	nop
 80053c6:	e000      	b.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 80053c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053ca:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d10d      	bne.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0xa9a>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80053d2:	4b56      	ldr	r3, [pc, #344]	@ (800552c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80053d4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80053d8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80053dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053e4:	4a51      	ldr	r2, [pc, #324]	@ (800552c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80053e6:	430b      	orrs	r3, r1
 80053e8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80053ec:	e003      	b.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053ee:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80053f2:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80053f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053fe:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005402:	663b      	str	r3, [r7, #96]	@ 0x60
 8005404:	2300      	movs	r3, #0
 8005406:	667b      	str	r3, [r7, #100]	@ 0x64
 8005408:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800540c:	460b      	mov	r3, r1
 800540e:	4313      	orrs	r3, r2
 8005410:	d032      	beq.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0xb24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8005412:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005416:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800541a:	2b05      	cmp	r3, #5
 800541c:	d80f      	bhi.n	800543e <HAL_RCCEx_PeriphCLKConfig+0xaea>
 800541e:	2b03      	cmp	r3, #3
 8005420:	d211      	bcs.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 8005422:	2b01      	cmp	r3, #1
 8005424:	d911      	bls.n	800544a <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 8005426:	2b02      	cmp	r3, #2
 8005428:	d109      	bne.n	800543e <HAL_RCCEx_PeriphCLKConfig+0xaea>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800542a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800542e:	3308      	adds	r3, #8
 8005430:	4618      	mov	r0, r3
 8005432:	f000 fc4f 	bl	8005cd4 <RCCEx_PLL2_Config>
 8005436:	4603      	mov	r3, r0
 8005438:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800543c:	e006      	b.n	800544c <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005444:	e002      	b.n	800544c <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 8005446:	bf00      	nop
 8005448:	e000      	b.n	800544c <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 800544a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800544c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005450:	2b00      	cmp	r3, #0
 8005452:	d10d      	bne.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8005454:	4b35      	ldr	r3, [pc, #212]	@ (800552c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005456:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800545a:	f023 0107 	bic.w	r1, r3, #7
 800545e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005462:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005466:	4a31      	ldr	r2, [pc, #196]	@ (800552c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005468:	430b      	orrs	r3, r1
 800546a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800546e:	e003      	b.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0xb24>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005470:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005474:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8005478:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800547c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005480:	2100      	movs	r1, #0
 8005482:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005484:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005488:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800548a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800548e:	460b      	mov	r3, r1
 8005490:	4313      	orrs	r3, r2
 8005492:	d024      	beq.n	80054de <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8005494:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005498:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800549c:	2b00      	cmp	r3, #0
 800549e:	d005      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0xb58>
 80054a0:	2b08      	cmp	r3, #8
 80054a2:	d005      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80054aa:	e002      	b.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 80054ac:	bf00      	nop
 80054ae:	e000      	b.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 80054b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054b2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d10d      	bne.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0xb82>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 80054ba:	4b1c      	ldr	r3, [pc, #112]	@ (800552c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80054bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80054c0:	f023 0108 	bic.w	r1, r3, #8
 80054c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80054c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80054cc:	4a17      	ldr	r2, [pc, #92]	@ (800552c <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80054ce:	430b      	orrs	r3, r1
 80054d0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80054d4:	e003      	b.n	80054de <HAL_RCCEx_PeriphCLKConfig+0xb8a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054d6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80054da:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80054de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80054e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e6:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80054ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80054ec:	2300      	movs	r3, #0
 80054ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80054f0:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80054f4:	460b      	mov	r3, r1
 80054f6:	4313      	orrs	r3, r2
 80054f8:	f000 80b9 	beq.w	800566e <HAL_RCCEx_PeriphCLKConfig+0xd1a>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80054fc:	4b0c      	ldr	r3, [pc, #48]	@ (8005530 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 80054fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005500:	4a0b      	ldr	r2, [pc, #44]	@ (8005530 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 8005502:	f043 0301 	orr.w	r3, r3, #1
 8005506:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005508:	f7fb fc42 	bl	8000d90 <HAL_GetTick>
 800550c:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005510:	e010      	b.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005512:	f7fb fc3d 	bl	8000d90 <HAL_GetTick>
 8005516:	4602      	mov	r2, r0
 8005518:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	2b02      	cmp	r3, #2
 8005520:	d908      	bls.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
      {
        ret = HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005528:	e00a      	b.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0xbec>
 800552a:	bf00      	nop
 800552c:	44020c00 	.word	0x44020c00
 8005530:	44020800 	.word	0x44020800
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005534:	4bba      	ldr	r3, [pc, #744]	@ (8005820 <HAL_RCCEx_PeriphCLKConfig+0xecc>)
 8005536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005538:	f003 0301 	and.w	r3, r3, #1
 800553c:	2b00      	cmp	r3, #0
 800553e:	d0e8      	beq.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0xbbe>
      }
    }

    if (ret == HAL_OK)
 8005540:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005544:	2b00      	cmp	r3, #0
 8005546:	f040 808e 	bne.w	8005666 <HAL_RCCEx_PeriphCLKConfig+0xd12>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800554a:	4bb6      	ldr	r3, [pc, #728]	@ (8005824 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800554c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005550:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005554:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8005558:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800555c:	2b00      	cmp	r3, #0
 800555e:	d023      	beq.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8005560:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005564:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8005568:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800556c:	4293      	cmp	r3, r2
 800556e:	d01b      	beq.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0xc54>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005570:	4bac      	ldr	r3, [pc, #688]	@ (8005824 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005572:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005576:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800557a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800557e:	4ba9      	ldr	r3, [pc, #676]	@ (8005824 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005580:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005584:	4aa7      	ldr	r2, [pc, #668]	@ (8005824 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005586:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800558a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800558e:	4ba5      	ldr	r3, [pc, #660]	@ (8005824 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005590:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005594:	4aa3      	ldr	r2, [pc, #652]	@ (8005824 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005596:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800559a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800559e:	4aa1      	ldr	r2, [pc, #644]	@ (8005824 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80055a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055a4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80055a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055ac:	f003 0301 	and.w	r3, r3, #1
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d019      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055b4:	f7fb fbec 	bl	8000d90 <HAL_GetTick>
 80055b8:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055bc:	e00d      	b.n	80055da <HAL_RCCEx_PeriphCLKConfig+0xc86>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055be:	f7fb fbe7 	bl	8000d90 <HAL_GetTick>
 80055c2:	4602      	mov	r2, r0
 80055c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80055c8:	1ad2      	subs	r2, r2, r3
 80055ca:	f241 3388 	movw	r3, #5000	@ 0x1388
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d903      	bls.n	80055da <HAL_RCCEx_PeriphCLKConfig+0xc86>
          {
            ret = HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 80055d8:	e006      	b.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0xc94>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055da:	4b92      	ldr	r3, [pc, #584]	@ (8005824 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80055dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80055e0:	f003 0302 	and.w	r3, r3, #2
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d0ea      	beq.n	80055be <HAL_RCCEx_PeriphCLKConfig+0xc6a>
          }
        }
      }

      if (ret == HAL_OK)
 80055e8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d135      	bne.n	800565c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80055f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80055f4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80055f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005600:	d110      	bne.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0xcd0>
 8005602:	4b88      	ldr	r3, [pc, #544]	@ (8005824 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005604:	69db      	ldr	r3, [r3, #28]
 8005606:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800560a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800560e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005612:	091b      	lsrs	r3, r3, #4
 8005614:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005618:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800561c:	4a81      	ldr	r2, [pc, #516]	@ (8005824 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800561e:	430b      	orrs	r3, r1
 8005620:	61d3      	str	r3, [r2, #28]
 8005622:	e005      	b.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8005624:	4b7f      	ldr	r3, [pc, #508]	@ (8005824 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005626:	69db      	ldr	r3, [r3, #28]
 8005628:	4a7e      	ldr	r2, [pc, #504]	@ (8005824 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800562a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800562e:	61d3      	str	r3, [r2, #28]
 8005630:	4b7c      	ldr	r3, [pc, #496]	@ (8005824 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005632:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005636:	4a7b      	ldr	r2, [pc, #492]	@ (8005824 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005638:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800563c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005640:	4b78      	ldr	r3, [pc, #480]	@ (8005824 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005642:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8005646:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800564a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800564e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005652:	4a74      	ldr	r2, [pc, #464]	@ (8005824 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005654:	430b      	orrs	r3, r1
 8005656:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800565a:	e008      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800565c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005660:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 8005664:	e003      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005666:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800566a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800566e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005676:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800567a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800567c:	2300      	movs	r3, #0
 800567e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005680:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005684:	460b      	mov	r3, r1
 8005686:	4313      	orrs	r3, r2
 8005688:	d035      	beq.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0xda2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800568a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800568e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005692:	2b30      	cmp	r3, #48	@ 0x30
 8005694:	d014      	beq.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
 8005696:	2b30      	cmp	r3, #48	@ 0x30
 8005698:	d80e      	bhi.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0xd64>
 800569a:	2b20      	cmp	r3, #32
 800569c:	d012      	beq.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0xd70>
 800569e:	2b20      	cmp	r3, #32
 80056a0:	d80a      	bhi.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0xd64>
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d010      	beq.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
 80056a6:	2b10      	cmp	r3, #16
 80056a8:	d106      	bne.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0xd64>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056aa:	4b5e      	ldr	r3, [pc, #376]	@ (8005824 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80056ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056ae:	4a5d      	ldr	r2, [pc, #372]	@ (8005824 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80056b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056b4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 80056b6:	e008      	b.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0xd76>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80056be:	e004      	b.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 80056c0:	bf00      	nop
 80056c2:	e002      	b.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 80056c4:	bf00      	nop
 80056c6:	e000      	b.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 80056c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056ca:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d10d      	bne.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0xd9a>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80056d2:	4b54      	ldr	r3, [pc, #336]	@ (8005824 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80056d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80056d8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80056dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80056e4:	4a4f      	ldr	r2, [pc, #316]	@ (8005824 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80056e6:	430b      	orrs	r3, r1
 80056e8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80056ec:	e003      	b.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0xda2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056ee:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80056f2:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80056f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056fe:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005702:	643b      	str	r3, [r7, #64]	@ 0x40
 8005704:	2300      	movs	r3, #0
 8005706:	647b      	str	r3, [r7, #68]	@ 0x44
 8005708:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800570c:	460b      	mov	r3, r1
 800570e:	4313      	orrs	r3, r2
 8005710:	d033      	beq.n	800577a <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8005712:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005716:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800571a:	2b00      	cmp	r3, #0
 800571c:	d002      	beq.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
 800571e:	2b40      	cmp	r3, #64	@ 0x40
 8005720:	d007      	beq.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005722:	e010      	b.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005724:	4b3f      	ldr	r3, [pc, #252]	@ (8005824 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005728:	4a3e      	ldr	r2, [pc, #248]	@ (8005824 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800572a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800572e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8005730:	e00d      	b.n	800574e <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005732:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005736:	3308      	adds	r3, #8
 8005738:	4618      	mov	r0, r3
 800573a:	f000 facb 	bl	8005cd4 <RCCEx_PLL2_Config>
 800573e:	4603      	mov	r3, r0
 8005740:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8005744:	e003      	b.n	800574e <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      default:
        ret = HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800574c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800574e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005752:	2b00      	cmp	r3, #0
 8005754:	d10d      	bne.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8005756:	4b33      	ldr	r3, [pc, #204]	@ (8005824 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005758:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800575c:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8005760:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005764:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005768:	4a2e      	ldr	r2, [pc, #184]	@ (8005824 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800576a:	430b      	orrs	r3, r1
 800576c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005770:	e003      	b.n	800577a <HAL_RCCEx_PeriphCLKConfig+0xe26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005772:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005776:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800577a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800577e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005782:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8005786:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005788:	2300      	movs	r3, #0
 800578a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800578c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005790:	460b      	mov	r3, r1
 8005792:	4313      	orrs	r3, r2
 8005794:	d04c      	beq.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0xedc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8005796:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800579a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800579e:	2b04      	cmp	r3, #4
 80057a0:	d827      	bhi.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 80057a2:	a201      	add	r2, pc, #4	@ (adr r2, 80057a8 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
 80057a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057a8:	080057bd 	.word	0x080057bd
 80057ac:	080057cb 	.word	0x080057cb
 80057b0:	080057df 	.word	0x080057df
 80057b4:	080057fb 	.word	0x080057fb
 80057b8:	080057fb 	.word	0x080057fb
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057bc:	4b19      	ldr	r3, [pc, #100]	@ (8005824 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80057be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057c0:	4a18      	ldr	r2, [pc, #96]	@ (8005824 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80057c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057c6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80057c8:	e018      	b.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0xea8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80057ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80057ce:	3308      	adds	r3, #8
 80057d0:	4618      	mov	r0, r3
 80057d2:	f000 fa7f 	bl	8005cd4 <RCCEx_PLL2_Config>
 80057d6:	4603      	mov	r3, r0
 80057d8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80057dc:	e00e      	b.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0xea8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80057de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80057e2:	3330      	adds	r3, #48	@ 0x30
 80057e4:	4618      	mov	r0, r3
 80057e6:	f000 fb0d 	bl	8005e04 <RCCEx_PLL3_Config>
 80057ea:	4603      	mov	r3, r0
 80057ec:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80057f0:	e004      	b.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0xea8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80057f8:	e000      	b.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0xea8>
        break;
 80057fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057fc:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005800:	2b00      	cmp	r3, #0
 8005802:	d111      	bne.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0xed4>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005804:	4b07      	ldr	r3, [pc, #28]	@ (8005824 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005806:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800580a:	f023 0107 	bic.w	r1, r3, #7
 800580e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005812:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005816:	4a03      	ldr	r2, [pc, #12]	@ (8005824 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005818:	430b      	orrs	r3, r1
 800581a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800581e:	e007      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0xedc>
 8005820:	44020800 	.word	0x44020800
 8005824:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005828:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800582c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8005830:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005838:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800583c:	633b      	str	r3, [r7, #48]	@ 0x30
 800583e:	2300      	movs	r3, #0
 8005840:	637b      	str	r3, [r7, #52]	@ 0x34
 8005842:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005846:	460b      	mov	r3, r1
 8005848:	4313      	orrs	r3, r2
 800584a:	f000 8081 	beq.w	8005950 <HAL_RCCEx_PeriphCLKConfig+0xffc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 800584e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005852:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005856:	2b20      	cmp	r3, #32
 8005858:	d85f      	bhi.n	800591a <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 800585a:	a201      	add	r2, pc, #4	@ (adr r2, 8005860 <HAL_RCCEx_PeriphCLKConfig+0xf0c>)
 800585c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005860:	080058e5 	.word	0x080058e5
 8005864:	0800591b 	.word	0x0800591b
 8005868:	0800591b 	.word	0x0800591b
 800586c:	0800591b 	.word	0x0800591b
 8005870:	0800591b 	.word	0x0800591b
 8005874:	0800591b 	.word	0x0800591b
 8005878:	0800591b 	.word	0x0800591b
 800587c:	0800591b 	.word	0x0800591b
 8005880:	080058f3 	.word	0x080058f3
 8005884:	0800591b 	.word	0x0800591b
 8005888:	0800591b 	.word	0x0800591b
 800588c:	0800591b 	.word	0x0800591b
 8005890:	0800591b 	.word	0x0800591b
 8005894:	0800591b 	.word	0x0800591b
 8005898:	0800591b 	.word	0x0800591b
 800589c:	0800591b 	.word	0x0800591b
 80058a0:	08005907 	.word	0x08005907
 80058a4:	0800591b 	.word	0x0800591b
 80058a8:	0800591b 	.word	0x0800591b
 80058ac:	0800591b 	.word	0x0800591b
 80058b0:	0800591b 	.word	0x0800591b
 80058b4:	0800591b 	.word	0x0800591b
 80058b8:	0800591b 	.word	0x0800591b
 80058bc:	0800591b 	.word	0x0800591b
 80058c0:	08005923 	.word	0x08005923
 80058c4:	0800591b 	.word	0x0800591b
 80058c8:	0800591b 	.word	0x0800591b
 80058cc:	0800591b 	.word	0x0800591b
 80058d0:	0800591b 	.word	0x0800591b
 80058d4:	0800591b 	.word	0x0800591b
 80058d8:	0800591b 	.word	0x0800591b
 80058dc:	0800591b 	.word	0x0800591b
 80058e0:	08005923 	.word	0x08005923
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058e4:	4bb9      	ldr	r3, [pc, #740]	@ (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80058e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058e8:	4ab8      	ldr	r2, [pc, #736]	@ (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80058ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058ee:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80058f0:	e018      	b.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0xfd0>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80058f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058f6:	3308      	adds	r3, #8
 80058f8:	4618      	mov	r0, r3
 80058fa:	f000 f9eb 	bl	8005cd4 <RCCEx_PLL2_Config>
 80058fe:	4603      	mov	r3, r0
 8005900:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005904:	e00e      	b.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0xfd0>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005906:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800590a:	3330      	adds	r3, #48	@ 0x30
 800590c:	4618      	mov	r0, r3
 800590e:	f000 fa79 	bl	8005e04 <RCCEx_PLL3_Config>
 8005912:	4603      	mov	r3, r0
 8005914:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005918:	e004      	b.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005920:	e000      	b.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        break;
 8005922:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005924:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005928:	2b00      	cmp	r3, #0
 800592a:	d10d      	bne.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0xff4>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800592c:	4ba7      	ldr	r3, [pc, #668]	@ (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800592e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005932:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005936:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800593a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800593e:	4aa3      	ldr	r2, [pc, #652]	@ (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005940:	430b      	orrs	r3, r1
 8005942:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005946:	e003      	b.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0xffc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005948:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800594c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8005950:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005958:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800595c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800595e:	2300      	movs	r3, #0
 8005960:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005962:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005966:	460b      	mov	r3, r1
 8005968:	4313      	orrs	r3, r2
 800596a:	d04e      	beq.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x10b6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 800596c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005970:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005974:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005978:	d02e      	beq.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800597a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800597e:	d827      	bhi.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8005980:	2bc0      	cmp	r3, #192	@ 0xc0
 8005982:	d02b      	beq.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x1088>
 8005984:	2bc0      	cmp	r3, #192	@ 0xc0
 8005986:	d823      	bhi.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8005988:	2b80      	cmp	r3, #128	@ 0x80
 800598a:	d017      	beq.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x1068>
 800598c:	2b80      	cmp	r3, #128	@ 0x80
 800598e:	d81f      	bhi.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8005990:	2b00      	cmp	r3, #0
 8005992:	d002      	beq.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x1046>
 8005994:	2b40      	cmp	r3, #64	@ 0x40
 8005996:	d007      	beq.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x1054>
 8005998:	e01a      	b.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800599a:	4b8c      	ldr	r3, [pc, #560]	@ (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800599c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800599e:	4a8b      	ldr	r2, [pc, #556]	@ (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80059a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059a4:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80059a6:	e01a      	b.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x108a>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80059a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80059ac:	3308      	adds	r3, #8
 80059ae:	4618      	mov	r0, r3
 80059b0:	f000 f990 	bl	8005cd4 <RCCEx_PLL2_Config>
 80059b4:	4603      	mov	r3, r0
 80059b6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80059ba:	e010      	b.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x108a>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80059bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80059c0:	3330      	adds	r3, #48	@ 0x30
 80059c2:	4618      	mov	r0, r3
 80059c4:	f000 fa1e 	bl	8005e04 <RCCEx_PLL3_Config>
 80059c8:	4603      	mov	r3, r0
 80059ca:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80059ce:	e006      	b.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x108a>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80059d6:	e002      	b.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 80059d8:	bf00      	nop
 80059da:	e000      	b.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 80059dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059de:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d10d      	bne.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80059e6:	4b79      	ldr	r3, [pc, #484]	@ (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80059e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80059ec:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 80059f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80059f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80059f8:	4974      	ldr	r1, [pc, #464]	@ (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80059fa:	4313      	orrs	r3, r2
 80059fc:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005a00:	e003      	b.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x10b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a02:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005a06:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8005a0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a12:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005a16:	623b      	str	r3, [r7, #32]
 8005a18:	2300      	movs	r3, #0
 8005a1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a1c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005a20:	460b      	mov	r3, r1
 8005a22:	4313      	orrs	r3, r2
 8005a24:	d055      	beq.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x117e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8005a26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a2a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005a2e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005a32:	d031      	beq.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x1144>
 8005a34:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005a38:	d82a      	bhi.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8005a3a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a3e:	d02d      	beq.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x1148>
 8005a40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a44:	d824      	bhi.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8005a46:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005a4a:	d029      	beq.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x114c>
 8005a4c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005a50:	d81e      	bhi.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8005a52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a56:	d011      	beq.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x1128>
 8005a58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a5c:	d818      	bhi.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d020      	beq.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x1150>
 8005a62:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a66:	d113      	bne.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x113c>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005a68:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a6c:	3308      	adds	r3, #8
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f000 f930 	bl	8005cd4 <RCCEx_PLL2_Config>
 8005a74:	4603      	mov	r3, r0
 8005a76:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8005a7a:	e014      	b.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x1152>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005a7c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a80:	3330      	adds	r3, #48	@ 0x30
 8005a82:	4618      	mov	r0, r3
 8005a84:	f000 f9be 	bl	8005e04 <RCCEx_PLL3_Config>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8005a8e:	e00a      	b.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005a96:	e006      	b.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8005a98:	bf00      	nop
 8005a9a:	e004      	b.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8005a9c:	bf00      	nop
 8005a9e:	e002      	b.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8005aa0:	bf00      	nop
 8005aa2:	e000      	b.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8005aa4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005aa6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d10d      	bne.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x1176>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8005aae:	4b47      	ldr	r3, [pc, #284]	@ (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005ab0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005ab4:	f423 6260 	bic.w	r2, r3, #3584	@ 0xe00
 8005ab8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005abc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005ac0:	4942      	ldr	r1, [pc, #264]	@ (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005ac8:	e003      	b.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x117e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aca:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005ace:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005ad2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ada:	2100      	movs	r1, #0
 8005adc:	61b9      	str	r1, [r7, #24]
 8005ade:	f003 0302 	and.w	r3, r3, #2
 8005ae2:	61fb      	str	r3, [r7, #28]
 8005ae4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005ae8:	460b      	mov	r3, r1
 8005aea:	4313      	orrs	r3, r2
 8005aec:	d03c      	beq.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8005aee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005af2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005af6:	2b03      	cmp	r3, #3
 8005af8:	d81b      	bhi.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x11de>
 8005afa:	a201      	add	r2, pc, #4	@ (adr r2, 8005b00 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
 8005afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b00:	08005b3b 	.word	0x08005b3b
 8005b04:	08005b11 	.word	0x08005b11
 8005b08:	08005b1f 	.word	0x08005b1f
 8005b0c:	08005b3b 	.word	0x08005b3b
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b10:	4b2e      	ldr	r3, [pc, #184]	@ (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b14:	4a2d      	ldr	r2, [pc, #180]	@ (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005b16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b1a:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005b1c:	e00e      	b.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x11e8>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005b1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b22:	3308      	adds	r3, #8
 8005b24:	4618      	mov	r0, r3
 8005b26:	f000 f8d5 	bl	8005cd4 <RCCEx_PLL2_Config>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8005b30:	e004      	b.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x11e8>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005b38:	e000      	b.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x11e8>
        break;
 8005b3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b3c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d10d      	bne.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x120c>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8005b44:	4b21      	ldr	r3, [pc, #132]	@ (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005b46:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005b4a:	f023 0203 	bic.w	r2, r3, #3
 8005b4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b52:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005b56:	491d      	ldr	r1, [pc, #116]	@ (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8005b5e:	e003      	b.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x1214>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b60:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005b64:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005b68:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b70:	2100      	movs	r1, #0
 8005b72:	6139      	str	r1, [r7, #16]
 8005b74:	f003 0304 	and.w	r3, r3, #4
 8005b78:	617b      	str	r3, [r7, #20]
 8005b7a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005b7e:	460b      	mov	r3, r1
 8005b80:	4313      	orrs	r3, r2
 8005b82:	d03c      	beq.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x12aa>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8005b84:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b90:	d00e      	beq.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8005b92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b96:	d815      	bhi.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x1270>
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d019      	beq.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x127c>
 8005b9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ba0:	d110      	bne.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x1270>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ba6:	4a09      	ldr	r2, [pc, #36]	@ (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005ba8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bac:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005bae:	e010      	b.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x127e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005bb0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005bb4:	3308      	adds	r3, #8
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f000 f88c 	bl	8005cd4 <RCCEx_PLL2_Config>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005bc2:	e006      	b.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x127e>

      default:
        ret = HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005bca:	e002      	b.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x127e>
 8005bcc:	44020c00 	.word	0x44020c00
        break;
 8005bd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bd2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d10d      	bne.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x12a2>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8005bda:	4b3d      	ldr	r3, [pc, #244]	@ (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005bdc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005be0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005be4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005be8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005bec:	4938      	ldr	r1, [pc, #224]	@ (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8005bf4:	e003      	b.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x12aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bf6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005bfa:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005bfe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c06:	2100      	movs	r1, #0
 8005c08:	60b9      	str	r1, [r7, #8]
 8005c0a:	f003 0310 	and.w	r3, r3, #16
 8005c0e:	60fb      	str	r3, [r7, #12]
 8005c10:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005c14:	460b      	mov	r3, r1
 8005c16:	4313      	orrs	r3, r2
 8005c18:	d038      	beq.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x1338>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8005c1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c1e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005c22:	2b30      	cmp	r3, #48	@ 0x30
 8005c24:	d01b      	beq.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x130a>
 8005c26:	2b30      	cmp	r3, #48	@ 0x30
 8005c28:	d815      	bhi.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x1302>
 8005c2a:	2b10      	cmp	r3, #16
 8005c2c:	d002      	beq.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
 8005c2e:	2b20      	cmp	r3, #32
 8005c30:	d007      	beq.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x12ee>
 8005c32:	e010      	b.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x1302>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c34:	4b26      	ldr	r3, [pc, #152]	@ (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c38:	4a25      	ldr	r2, [pc, #148]	@ (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005c3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c3e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8005c40:	e00e      	b.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x130c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005c42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c46:	3330      	adds	r3, #48	@ 0x30
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f000 f8db 	bl	8005e04 <RCCEx_PLL3_Config>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8005c54:	e004      	b.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x130c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005c5c:	e000      	b.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x130c>
        break;
 8005c5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c60:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d10d      	bne.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x1330>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8005c68:	4b19      	ldr	r3, [pc, #100]	@ (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005c6a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005c6e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005c72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c76:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005c7a:	4915      	ldr	r1, [pc, #84]	@ (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8005c82:	e003      	b.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x1338>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c84:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005c88:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005c8c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c94:	2100      	movs	r1, #0
 8005c96:	6039      	str	r1, [r7, #0]
 8005c98:	f003 0308 	and.w	r3, r3, #8
 8005c9c:	607b      	str	r3, [r7, #4]
 8005c9e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005ca2:	460b      	mov	r3, r1
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	d00c      	beq.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x136e>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8005ca8:	4b09      	ldr	r3, [pc, #36]	@ (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005caa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005cae:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005cb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005cb6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005cba:	4905      	ldr	r1, [pc, #20]	@ (8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 8005cc2:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	37e8      	adds	r7, #232	@ 0xe8
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005cd0:	44020c00 	.word	0x44020c00

08005cd4 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b084      	sub	sp, #16
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8005cdc:	4b48      	ldr	r3, [pc, #288]	@ (8005e00 <RCCEx_PLL2_Config+0x12c>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a47      	ldr	r2, [pc, #284]	@ (8005e00 <RCCEx_PLL2_Config+0x12c>)
 8005ce2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005ce6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005ce8:	f7fb f852 	bl	8000d90 <HAL_GetTick>
 8005cec:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005cee:	e008      	b.n	8005d02 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005cf0:	f7fb f84e 	bl	8000d90 <HAL_GetTick>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	1ad3      	subs	r3, r2, r3
 8005cfa:	2b02      	cmp	r3, #2
 8005cfc:	d901      	bls.n	8005d02 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005cfe:	2303      	movs	r3, #3
 8005d00:	e07a      	b.n	8005df8 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005d02:	4b3f      	ldr	r3, [pc, #252]	@ (8005e00 <RCCEx_PLL2_Config+0x12c>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d1f0      	bne.n	8005cf0 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8005d0e:	4b3c      	ldr	r3, [pc, #240]	@ (8005e00 <RCCEx_PLL2_Config+0x12c>)
 8005d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d12:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005d16:	f023 0303 	bic.w	r3, r3, #3
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	6811      	ldr	r1, [r2, #0]
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	6852      	ldr	r2, [r2, #4]
 8005d22:	0212      	lsls	r2, r2, #8
 8005d24:	430a      	orrs	r2, r1
 8005d26:	4936      	ldr	r1, [pc, #216]	@ (8005e00 <RCCEx_PLL2_Config+0x12c>)
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	3b01      	subs	r3, #1
 8005d32:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	3b01      	subs	r3, #1
 8005d3c:	025b      	lsls	r3, r3, #9
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	431a      	orrs	r2, r3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	691b      	ldr	r3, [r3, #16]
 8005d46:	3b01      	subs	r3, #1
 8005d48:	041b      	lsls	r3, r3, #16
 8005d4a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005d4e:	431a      	orrs	r2, r3
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	695b      	ldr	r3, [r3, #20]
 8005d54:	3b01      	subs	r3, #1
 8005d56:	061b      	lsls	r3, r3, #24
 8005d58:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005d5c:	4928      	ldr	r1, [pc, #160]	@ (8005e00 <RCCEx_PLL2_Config+0x12c>)
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8005d62:	4b27      	ldr	r3, [pc, #156]	@ (8005e00 <RCCEx_PLL2_Config+0x12c>)
 8005d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d66:	f023 020c 	bic.w	r2, r3, #12
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	699b      	ldr	r3, [r3, #24]
 8005d6e:	4924      	ldr	r1, [pc, #144]	@ (8005e00 <RCCEx_PLL2_Config+0x12c>)
 8005d70:	4313      	orrs	r3, r2
 8005d72:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8005d74:	4b22      	ldr	r3, [pc, #136]	@ (8005e00 <RCCEx_PLL2_Config+0x12c>)
 8005d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d78:	f023 0220 	bic.w	r2, r3, #32
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	69db      	ldr	r3, [r3, #28]
 8005d80:	491f      	ldr	r1, [pc, #124]	@ (8005e00 <RCCEx_PLL2_Config+0x12c>)
 8005d82:	4313      	orrs	r3, r2
 8005d84:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8005d86:	4b1e      	ldr	r3, [pc, #120]	@ (8005e00 <RCCEx_PLL2_Config+0x12c>)
 8005d88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d8e:	491c      	ldr	r1, [pc, #112]	@ (8005e00 <RCCEx_PLL2_Config+0x12c>)
 8005d90:	4313      	orrs	r3, r2
 8005d92:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8005d94:	4b1a      	ldr	r3, [pc, #104]	@ (8005e00 <RCCEx_PLL2_Config+0x12c>)
 8005d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d98:	4a19      	ldr	r2, [pc, #100]	@ (8005e00 <RCCEx_PLL2_Config+0x12c>)
 8005d9a:	f023 0310 	bic.w	r3, r3, #16
 8005d9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8005da0:	4b17      	ldr	r3, [pc, #92]	@ (8005e00 <RCCEx_PLL2_Config+0x12c>)
 8005da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005da4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005da8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	6a12      	ldr	r2, [r2, #32]
 8005db0:	00d2      	lsls	r2, r2, #3
 8005db2:	4913      	ldr	r1, [pc, #76]	@ (8005e00 <RCCEx_PLL2_Config+0x12c>)
 8005db4:	4313      	orrs	r3, r2
 8005db6:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8005db8:	4b11      	ldr	r3, [pc, #68]	@ (8005e00 <RCCEx_PLL2_Config+0x12c>)
 8005dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dbc:	4a10      	ldr	r2, [pc, #64]	@ (8005e00 <RCCEx_PLL2_Config+0x12c>)
 8005dbe:	f043 0310 	orr.w	r3, r3, #16
 8005dc2:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8005dc4:	4b0e      	ldr	r3, [pc, #56]	@ (8005e00 <RCCEx_PLL2_Config+0x12c>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a0d      	ldr	r2, [pc, #52]	@ (8005e00 <RCCEx_PLL2_Config+0x12c>)
 8005dca:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005dce:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005dd0:	f7fa ffde 	bl	8000d90 <HAL_GetTick>
 8005dd4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005dd6:	e008      	b.n	8005dea <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005dd8:	f7fa ffda 	bl	8000d90 <HAL_GetTick>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	1ad3      	subs	r3, r2, r3
 8005de2:	2b02      	cmp	r3, #2
 8005de4:	d901      	bls.n	8005dea <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8005de6:	2303      	movs	r3, #3
 8005de8:	e006      	b.n	8005df8 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005dea:	4b05      	ldr	r3, [pc, #20]	@ (8005e00 <RCCEx_PLL2_Config+0x12c>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d0f0      	beq.n	8005dd8 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8005df6:	2300      	movs	r3, #0

}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3710      	adds	r7, #16
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}
 8005e00:	44020c00 	.word	0x44020c00

08005e04 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b084      	sub	sp, #16
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8005e0c:	4b48      	ldr	r3, [pc, #288]	@ (8005f30 <RCCEx_PLL3_Config+0x12c>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a47      	ldr	r2, [pc, #284]	@ (8005f30 <RCCEx_PLL3_Config+0x12c>)
 8005e12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e16:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005e18:	f7fa ffba 	bl	8000d90 <HAL_GetTick>
 8005e1c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005e1e:	e008      	b.n	8005e32 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005e20:	f7fa ffb6 	bl	8000d90 <HAL_GetTick>
 8005e24:	4602      	mov	r2, r0
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	1ad3      	subs	r3, r2, r3
 8005e2a:	2b02      	cmp	r3, #2
 8005e2c:	d901      	bls.n	8005e32 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005e2e:	2303      	movs	r3, #3
 8005e30:	e07a      	b.n	8005f28 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005e32:	4b3f      	ldr	r3, [pc, #252]	@ (8005f30 <RCCEx_PLL3_Config+0x12c>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d1f0      	bne.n	8005e20 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8005e3e:	4b3c      	ldr	r3, [pc, #240]	@ (8005f30 <RCCEx_PLL3_Config+0x12c>)
 8005e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e42:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005e46:	f023 0303 	bic.w	r3, r3, #3
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	6811      	ldr	r1, [r2, #0]
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	6852      	ldr	r2, [r2, #4]
 8005e52:	0212      	lsls	r2, r2, #8
 8005e54:	430a      	orrs	r2, r1
 8005e56:	4936      	ldr	r1, [pc, #216]	@ (8005f30 <RCCEx_PLL3_Config+0x12c>)
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	630b      	str	r3, [r1, #48]	@ 0x30
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	3b01      	subs	r3, #1
 8005e62:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	3b01      	subs	r3, #1
 8005e6c:	025b      	lsls	r3, r3, #9
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	431a      	orrs	r2, r3
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	3b01      	subs	r3, #1
 8005e78:	041b      	lsls	r3, r3, #16
 8005e7a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005e7e:	431a      	orrs	r2, r3
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	695b      	ldr	r3, [r3, #20]
 8005e84:	3b01      	subs	r3, #1
 8005e86:	061b      	lsls	r3, r3, #24
 8005e88:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005e8c:	4928      	ldr	r1, [pc, #160]	@ (8005f30 <RCCEx_PLL3_Config+0x12c>)
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005e92:	4b27      	ldr	r3, [pc, #156]	@ (8005f30 <RCCEx_PLL3_Config+0x12c>)
 8005e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e96:	f023 020c 	bic.w	r2, r3, #12
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	699b      	ldr	r3, [r3, #24]
 8005e9e:	4924      	ldr	r1, [pc, #144]	@ (8005f30 <RCCEx_PLL3_Config+0x12c>)
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8005ea4:	4b22      	ldr	r3, [pc, #136]	@ (8005f30 <RCCEx_PLL3_Config+0x12c>)
 8005ea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ea8:	f023 0220 	bic.w	r2, r3, #32
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	69db      	ldr	r3, [r3, #28]
 8005eb0:	491f      	ldr	r1, [pc, #124]	@ (8005f30 <RCCEx_PLL3_Config+0x12c>)
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8005eb6:	4b1e      	ldr	r3, [pc, #120]	@ (8005f30 <RCCEx_PLL3_Config+0x12c>)
 8005eb8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ebe:	491c      	ldr	r1, [pc, #112]	@ (8005f30 <RCCEx_PLL3_Config+0x12c>)
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8005ec4:	4b1a      	ldr	r3, [pc, #104]	@ (8005f30 <RCCEx_PLL3_Config+0x12c>)
 8005ec6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ec8:	4a19      	ldr	r2, [pc, #100]	@ (8005f30 <RCCEx_PLL3_Config+0x12c>)
 8005eca:	f023 0310 	bic.w	r3, r3, #16
 8005ece:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8005ed0:	4b17      	ldr	r3, [pc, #92]	@ (8005f30 <RCCEx_PLL3_Config+0x12c>)
 8005ed2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ed4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005ed8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	6a12      	ldr	r2, [r2, #32]
 8005ee0:	00d2      	lsls	r2, r2, #3
 8005ee2:	4913      	ldr	r1, [pc, #76]	@ (8005f30 <RCCEx_PLL3_Config+0x12c>)
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8005ee8:	4b11      	ldr	r3, [pc, #68]	@ (8005f30 <RCCEx_PLL3_Config+0x12c>)
 8005eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eec:	4a10      	ldr	r2, [pc, #64]	@ (8005f30 <RCCEx_PLL3_Config+0x12c>)
 8005eee:	f043 0310 	orr.w	r3, r3, #16
 8005ef2:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8005ef4:	4b0e      	ldr	r3, [pc, #56]	@ (8005f30 <RCCEx_PLL3_Config+0x12c>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a0d      	ldr	r2, [pc, #52]	@ (8005f30 <RCCEx_PLL3_Config+0x12c>)
 8005efa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005efe:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005f00:	f7fa ff46 	bl	8000d90 <HAL_GetTick>
 8005f04:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005f06:	e008      	b.n	8005f1a <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005f08:	f7fa ff42 	bl	8000d90 <HAL_GetTick>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	1ad3      	subs	r3, r2, r3
 8005f12:	2b02      	cmp	r3, #2
 8005f14:	d901      	bls.n	8005f1a <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 8005f16:	2303      	movs	r3, #3
 8005f18:	e006      	b.n	8005f28 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005f1a:	4b05      	ldr	r3, [pc, #20]	@ (8005f30 <RCCEx_PLL3_Config+0x12c>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d0f0      	beq.n	8005f08 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 8005f26:	2300      	movs	r3, #0
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3710      	adds	r7, #16
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}
 8005f30:	44020c00 	.word	0x44020c00

08005f34 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_DRD_TypeDef *USBx)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b085      	sub	sp, #20
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005f42:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8005f46:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = winterruptmask;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	68fa      	ldr	r2, [r7, #12]
 8005f4c:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005f4e:	2300      	movs	r3, #0
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3714      	adds	r7, #20
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b085      	sub	sp, #20
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005f64:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8005f68:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	43db      	mvns	r3, r3
 8005f72:	401a      	ands	r2, r3
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005f78:	2300      	movs	r3, #0
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3714      	adds	r7, #20
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr

08005f86 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 8005f86:	b480      	push	{r7}
 8005f88:	b083      	sub	sp, #12
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	6078      	str	r0, [r7, #4]
 8005f8e:	460b      	mov	r3, r1
 8005f90:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 8005f92:	78fb      	ldrb	r3, [r7, #3]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d106      	bne.n	8005fa6 <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f9c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	641a      	str	r2, [r3, #64]	@ 0x40
 8005fa4:	e00b      	b.n	8005fbe <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 8005fa6:	78fb      	ldrb	r3, [r7, #3]
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d106      	bne.n	8005fba <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fb0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	641a      	str	r2, [r3, #64]	@ 0x40
 8005fb8:	e001      	b.n	8005fbe <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e000      	b.n	8005fc0 <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 8005fbe:	2300      	movs	r3, #0
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	370c      	adds	r7, #12
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 8005fcc:	b084      	sub	sp, #16
 8005fce:	b580      	push	{r7, lr}
 8005fd0:	b084      	sub	sp, #16
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	6078      	str	r0, [r7, #4]
 8005fd6:	f107 001c 	add.w	r0, r7, #28
 8005fda:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fe8:	f023 0201 	bic.w	r2, r3, #1
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 8005ff0:	2100      	movs	r1, #0
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f7ff ffc7 	bl	8005f86 <USB_SetCurrentMode>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 8006002:	7bfb      	ldrb	r3, [r7, #15]
}
 8006004:	4618      	mov	r0, r3
 8006006:	3710      	adds	r7, #16
 8006008:	46bd      	mov	sp, r7
 800600a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800600e:	b004      	add	sp, #16
 8006010:	4770      	bx	lr
	...

08006014 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8006014:	b480      	push	{r7}
 8006016:	b09f      	sub	sp, #124	@ 0x7c
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800601e:	2300      	movs	r3, #0
 8006020:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  uint32_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	4413      	add	r3, r2
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	4ba0      	ldr	r3, [pc, #640]	@ (80062b4 <USB_ActivateEndpoint+0x2a0>)
 8006032:	4013      	ands	r3, r2
 8006034:	673b      	str	r3, [r7, #112]	@ 0x70

  /* initialize Endpoint */
  switch (ep->type)
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	78db      	ldrb	r3, [r3, #3]
 800603a:	2b03      	cmp	r3, #3
 800603c:	d819      	bhi.n	8006072 <USB_ActivateEndpoint+0x5e>
 800603e:	a201      	add	r2, pc, #4	@ (adr r2, 8006044 <USB_ActivateEndpoint+0x30>)
 8006040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006044:	08006055 	.word	0x08006055
 8006048:	08006069 	.word	0x08006069
 800604c:	0800607b 	.word	0x0800607b
 8006050:	0800605f 	.word	0x0800605f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006054:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006056:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800605a:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800605c:	e00e      	b.n	800607c <USB_ActivateEndpoint+0x68>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800605e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006060:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8006064:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 8006066:	e009      	b.n	800607c <USB_ActivateEndpoint+0x68>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006068:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800606a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800606e:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 8006070:	e004      	b.n	800607c <USB_ActivateEndpoint+0x68>

    default:
      ret = HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      break;
 8006078:	e000      	b.n	800607c <USB_ActivateEndpoint+0x68>
      break;
 800607a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_VTRX | USB_EP_VTTX));
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	441a      	add	r2, r3
 8006086:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006088:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800608c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006090:	6013      	str	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	4413      	add	r3, r2
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	4b86      	ldr	r3, [pc, #536]	@ (80062b8 <USB_ActivateEndpoint+0x2a4>)
 80060a0:	4013      	ands	r3, r2
 80060a2:	683a      	ldr	r2, [r7, #0]
 80060a4:	7812      	ldrb	r2, [r2, #0]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80060aa:	687a      	ldr	r2, [r7, #4]
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	441a      	add	r2, r3
 80060b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80060b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060be:	6013      	str	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	7b1b      	ldrb	r3, [r3, #12]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	f040 8177 	bne.w	80063b8 <USB_ActivateEndpoint+0x3a4>
  {
    if (ep->is_in != 0U)
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	785b      	ldrb	r3, [r3, #1]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d079      	beq.n	80061c6 <USB_ActivateEndpoint+0x1b2>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	00db      	lsls	r3, r3, #3
 80060d8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80060dc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	00db      	lsls	r3, r3, #3
 80060e8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80060ec:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80060f0:	0c12      	lsrs	r2, r2, #16
 80060f2:	0412      	lsls	r2, r2, #16
 80060f4:	601a      	str	r2, [r3, #0]
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	00db      	lsls	r3, r3, #3
 80060fc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006100:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006104:	6819      	ldr	r1, [r3, #0]
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	88db      	ldrh	r3, [r3, #6]
 800610a:	089b      	lsrs	r3, r3, #2
 800610c:	b29b      	uxth	r3, r3
 800610e:	009a      	lsls	r2, r3, #2
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	00db      	lsls	r3, r3, #3
 8006116:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800611a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800611e:	430a      	orrs	r2, r1
 8006120:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	009b      	lsls	r3, r3, #2
 800612a:	4413      	add	r3, r2
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	61bb      	str	r3, [r7, #24]
 8006130:	69bb      	ldr	r3, [r7, #24]
 8006132:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006136:	2b00      	cmp	r3, #0
 8006138:	d013      	beq.n	8006162 <USB_ActivateEndpoint+0x14e>
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	4413      	add	r3, r2
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	4b5c      	ldr	r3, [pc, #368]	@ (80062b8 <USB_ActivateEndpoint+0x2a4>)
 8006148:	4013      	ands	r3, r2
 800614a:	617b      	str	r3, [r7, #20]
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	441a      	add	r2, r3
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800615c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006160:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	78db      	ldrb	r3, [r3, #3]
 8006166:	2b01      	cmp	r3, #1
 8006168:	d018      	beq.n	800619c <USB_ActivateEndpoint+0x188>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	4413      	add	r3, r2
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	4b51      	ldr	r3, [pc, #324]	@ (80062bc <USB_ActivateEndpoint+0x2a8>)
 8006178:	4013      	ands	r3, r2
 800617a:	60fb      	str	r3, [r7, #12]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f083 0320 	eor.w	r3, r3, #32
 8006182:	60fb      	str	r3, [r7, #12]
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	441a      	add	r2, r3
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006194:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006198:	6013      	str	r3, [r2, #0]
 800619a:	e28c      	b.n	80066b6 <USB_ActivateEndpoint+0x6a2>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800619c:	687a      	ldr	r2, [r7, #4]
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	781b      	ldrb	r3, [r3, #0]
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	4413      	add	r3, r2
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	4b44      	ldr	r3, [pc, #272]	@ (80062bc <USB_ActivateEndpoint+0x2a8>)
 80061aa:	4013      	ands	r3, r2
 80061ac:	613b      	str	r3, [r7, #16]
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	441a      	add	r2, r3
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061c2:	6013      	str	r3, [r2, #0]
 80061c4:	e277      	b.n	80066b6 <USB_ActivateEndpoint+0x6a2>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	781b      	ldrb	r3, [r3, #0]
 80061ca:	00db      	lsls	r3, r3, #3
 80061cc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80061d0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80061d4:	685a      	ldr	r2, [r3, #4]
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	00db      	lsls	r3, r3, #3
 80061dc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80061e0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80061e4:	0c12      	lsrs	r2, r2, #16
 80061e6:	0412      	lsls	r2, r2, #16
 80061e8:	605a      	str	r2, [r3, #4]
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	00db      	lsls	r3, r3, #3
 80061f0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80061f4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80061f8:	6859      	ldr	r1, [r3, #4]
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	88db      	ldrh	r3, [r3, #6]
 80061fe:	089b      	lsrs	r3, r3, #2
 8006200:	b29b      	uxth	r3, r3
 8006202:	009a      	lsls	r2, r3, #2
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	00db      	lsls	r3, r3, #3
 800620a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800620e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006212:	430a      	orrs	r2, r1
 8006214:	605a      	str	r2, [r3, #4]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	781b      	ldrb	r3, [r3, #0]
 800621a:	00db      	lsls	r3, r3, #3
 800621c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006220:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006224:	685a      	ldr	r2, [r3, #4]
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	00db      	lsls	r3, r3, #3
 800622c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006230:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006234:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8006238:	605a      	str	r2, [r3, #4]
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	691b      	ldr	r3, [r3, #16]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d112      	bne.n	8006268 <USB_ActivateEndpoint+0x254>
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	00db      	lsls	r3, r3, #3
 8006248:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800624c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006250:	685a      	ldr	r2, [r3, #4]
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	00db      	lsls	r3, r3, #3
 8006258:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800625c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006260:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006264:	605a      	str	r2, [r3, #4]
 8006266:	e04d      	b.n	8006304 <USB_ActivateEndpoint+0x2f0>
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	691b      	ldr	r3, [r3, #16]
 800626c:	2b3e      	cmp	r3, #62	@ 0x3e
 800626e:	d827      	bhi.n	80062c0 <USB_ActivateEndpoint+0x2ac>
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	691b      	ldr	r3, [r3, #16]
 8006274:	085b      	lsrs	r3, r3, #1
 8006276:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	691b      	ldr	r3, [r3, #16]
 800627c:	f003 0301 	and.w	r3, r3, #1
 8006280:	2b00      	cmp	r3, #0
 8006282:	d002      	beq.n	800628a <USB_ActivateEndpoint+0x276>
 8006284:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006286:	3301      	adds	r3, #1
 8006288:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	781b      	ldrb	r3, [r3, #0]
 800628e:	00db      	lsls	r3, r3, #3
 8006290:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006294:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006298:	6859      	ldr	r1, [r3, #4]
 800629a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800629c:	069a      	lsls	r2, r3, #26
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	781b      	ldrb	r3, [r3, #0]
 80062a2:	00db      	lsls	r3, r3, #3
 80062a4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80062a8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80062ac:	430a      	orrs	r2, r1
 80062ae:	605a      	str	r2, [r3, #4]
 80062b0:	e028      	b.n	8006304 <USB_ActivateEndpoint+0x2f0>
 80062b2:	bf00      	nop
 80062b4:	07ff898f 	.word	0x07ff898f
 80062b8:	07ff8f8f 	.word	0x07ff8f8f
 80062bc:	07ff8fbf 	.word	0x07ff8fbf
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	691b      	ldr	r3, [r3, #16]
 80062c4:	095b      	lsrs	r3, r3, #5
 80062c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	691b      	ldr	r3, [r3, #16]
 80062cc:	f003 031f 	and.w	r3, r3, #31
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d102      	bne.n	80062da <USB_ActivateEndpoint+0x2c6>
 80062d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80062d6:	3b01      	subs	r3, #1
 80062d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	00db      	lsls	r3, r3, #3
 80062e0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80062e4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80062e8:	685a      	ldr	r2, [r3, #4]
 80062ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80062ec:	069b      	lsls	r3, r3, #26
 80062ee:	431a      	orrs	r2, r3
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	00db      	lsls	r3, r3, #3
 80062f6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80062fa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80062fe:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006302:	605a      	str	r2, [r3, #4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	781b      	ldrb	r3, [r3, #0]
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	4413      	add	r3, r2
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006314:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006318:	2b00      	cmp	r3, #0
 800631a:	d013      	beq.n	8006344 <USB_ActivateEndpoint+0x330>
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	009b      	lsls	r3, r3, #2
 8006324:	4413      	add	r3, r2
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	4b9c      	ldr	r3, [pc, #624]	@ (800659c <USB_ActivateEndpoint+0x588>)
 800632a:	4013      	ands	r3, r2
 800632c:	627b      	str	r3, [r7, #36]	@ 0x24
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	009b      	lsls	r3, r3, #2
 8006336:	441a      	add	r2, r3
 8006338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800633a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800633e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006342:	6013      	str	r3, [r2, #0]

      if (ep->num == 0U)
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d11c      	bne.n	8006386 <USB_ActivateEndpoint+0x372>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	4413      	add	r3, r2
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	4b91      	ldr	r3, [pc, #580]	@ (80065a0 <USB_ActivateEndpoint+0x58c>)
 800635a:	4013      	ands	r3, r2
 800635c:	61fb      	str	r3, [r7, #28]
 800635e:	69fb      	ldr	r3, [r7, #28]
 8006360:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006364:	61fb      	str	r3, [r7, #28]
 8006366:	69fb      	ldr	r3, [r7, #28]
 8006368:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800636c:	61fb      	str	r3, [r7, #28]
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	009b      	lsls	r3, r3, #2
 8006376:	441a      	add	r2, r3
 8006378:	69fb      	ldr	r3, [r7, #28]
 800637a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800637e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006382:	6013      	str	r3, [r2, #0]
 8006384:	e197      	b.n	80066b6 <USB_ActivateEndpoint+0x6a2>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	4413      	add	r3, r2
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	4b83      	ldr	r3, [pc, #524]	@ (80065a0 <USB_ActivateEndpoint+0x58c>)
 8006394:	4013      	ands	r3, r2
 8006396:	623b      	str	r3, [r7, #32]
 8006398:	6a3b      	ldr	r3, [r7, #32]
 800639a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800639e:	623b      	str	r3, [r7, #32]
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	441a      	add	r2, r3
 80063aa:	6a3b      	ldr	r3, [r7, #32]
 80063ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063b4:	6013      	str	r3, [r2, #0]
 80063b6:	e17e      	b.n	80066b6 <USB_ActivateEndpoint+0x6a2>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	78db      	ldrb	r3, [r3, #3]
 80063bc:	2b02      	cmp	r3, #2
 80063be:	d114      	bne.n	80063ea <USB_ActivateEndpoint+0x3d6>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	781b      	ldrb	r3, [r3, #0]
 80063c6:	009b      	lsls	r3, r3, #2
 80063c8:	4413      	add	r3, r2
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	4b73      	ldr	r3, [pc, #460]	@ (800659c <USB_ActivateEndpoint+0x588>)
 80063ce:	4013      	ands	r3, r2
 80063d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80063d2:	687a      	ldr	r2, [r7, #4]
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	441a      	add	r2, r3
 80063dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80063de:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80063e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063e6:	6013      	str	r3, [r2, #0]
 80063e8:	e013      	b.n	8006412 <USB_ActivateEndpoint+0x3fe>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80063ea:	687a      	ldr	r2, [r7, #4]
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	4413      	add	r3, r2
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	4b6b      	ldr	r3, [pc, #428]	@ (80065a4 <USB_ActivateEndpoint+0x590>)
 80063f8:	4013      	ands	r3, r2
 80063fa:	667b      	str	r3, [r7, #100]	@ 0x64
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	009b      	lsls	r3, r3, #2
 8006404:	441a      	add	r2, r3
 8006406:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006408:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800640c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006410:	6013      	str	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	00db      	lsls	r3, r3, #3
 8006418:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800641c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	781b      	ldrb	r3, [r3, #0]
 8006426:	00db      	lsls	r3, r3, #3
 8006428:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800642c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006430:	0c12      	lsrs	r2, r2, #16
 8006432:	0412      	lsls	r2, r2, #16
 8006434:	601a      	str	r2, [r3, #0]
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	781b      	ldrb	r3, [r3, #0]
 800643a:	00db      	lsls	r3, r3, #3
 800643c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006440:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006444:	6819      	ldr	r1, [r3, #0]
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	891b      	ldrh	r3, [r3, #8]
 800644a:	089b      	lsrs	r3, r3, #2
 800644c:	b29b      	uxth	r3, r3
 800644e:	009a      	lsls	r2, r3, #2
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	00db      	lsls	r3, r3, #3
 8006456:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800645a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800645e:	430a      	orrs	r2, r1
 8006460:	601a      	str	r2, [r3, #0]
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	00db      	lsls	r3, r3, #3
 8006468:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800646c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006470:	685a      	ldr	r2, [r3, #4]
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	781b      	ldrb	r3, [r3, #0]
 8006476:	00db      	lsls	r3, r3, #3
 8006478:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800647c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006480:	0c12      	lsrs	r2, r2, #16
 8006482:	0412      	lsls	r2, r2, #16
 8006484:	605a      	str	r2, [r3, #4]
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	781b      	ldrb	r3, [r3, #0]
 800648a:	00db      	lsls	r3, r3, #3
 800648c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006490:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006494:	6859      	ldr	r1, [r3, #4]
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	895b      	ldrh	r3, [r3, #10]
 800649a:	089b      	lsrs	r3, r3, #2
 800649c:	b29b      	uxth	r3, r3
 800649e:	009a      	lsls	r2, r3, #2
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	781b      	ldrb	r3, [r3, #0]
 80064a4:	00db      	lsls	r3, r3, #3
 80064a6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80064aa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80064ae:	430a      	orrs	r2, r1
 80064b0:	605a      	str	r2, [r3, #4]

    if (ep->is_in == 0U)
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	785b      	ldrb	r3, [r3, #1]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d178      	bne.n	80065ac <USB_ActivateEndpoint+0x598>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	009b      	lsls	r3, r3, #2
 80064c2:	4413      	add	r3, r2
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	643b      	str	r3, [r7, #64]	@ 0x40
 80064c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80064ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d013      	beq.n	80064fa <USB_ActivateEndpoint+0x4e6>
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	4413      	add	r3, r2
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	4b2f      	ldr	r3, [pc, #188]	@ (800659c <USB_ActivateEndpoint+0x588>)
 80064e0:	4013      	ands	r3, r2
 80064e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	441a      	add	r2, r3
 80064ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064f0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80064f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064f8:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	009b      	lsls	r3, r3, #2
 8006502:	4413      	add	r3, r2
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800650a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800650e:	2b00      	cmp	r3, #0
 8006510:	d013      	beq.n	800653a <USB_ActivateEndpoint+0x526>
 8006512:	687a      	ldr	r2, [r7, #4]
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	781b      	ldrb	r3, [r3, #0]
 8006518:	009b      	lsls	r3, r3, #2
 800651a:	4413      	add	r3, r2
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	4b1f      	ldr	r3, [pc, #124]	@ (800659c <USB_ActivateEndpoint+0x588>)
 8006520:	4013      	ands	r3, r2
 8006522:	637b      	str	r3, [r7, #52]	@ 0x34
 8006524:	687a      	ldr	r2, [r7, #4]
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	781b      	ldrb	r3, [r3, #0]
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	441a      	add	r2, r3
 800652e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006530:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006534:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006538:	6013      	str	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	781b      	ldrb	r3, [r3, #0]
 8006540:	009b      	lsls	r3, r3, #2
 8006542:	4413      	add	r3, r2
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	4b16      	ldr	r3, [pc, #88]	@ (80065a0 <USB_ActivateEndpoint+0x58c>)
 8006548:	4013      	ands	r3, r2
 800654a:	633b      	str	r3, [r7, #48]	@ 0x30
 800654c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800654e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006552:	633b      	str	r3, [r7, #48]	@ 0x30
 8006554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006556:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800655a:	633b      	str	r3, [r7, #48]	@ 0x30
 800655c:	687a      	ldr	r2, [r7, #4]
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	781b      	ldrb	r3, [r3, #0]
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	441a      	add	r2, r3
 8006566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006568:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800656c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006570:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	4413      	add	r3, r2
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	4b0a      	ldr	r3, [pc, #40]	@ (80065a8 <USB_ActivateEndpoint+0x594>)
 8006580:	4013      	ands	r3, r2
 8006582:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	441a      	add	r2, r3
 800658e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006590:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006594:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006598:	6013      	str	r3, [r2, #0]
 800659a:	e08c      	b.n	80066b6 <USB_ActivateEndpoint+0x6a2>
 800659c:	07ff8f8f 	.word	0x07ff8f8f
 80065a0:	07ffbf8f 	.word	0x07ffbf8f
 80065a4:	07ff8e8f 	.word	0x07ff8e8f
 80065a8:	07ff8fbf 	.word	0x07ff8fbf
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80065ac:	687a      	ldr	r2, [r7, #4]
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	781b      	ldrb	r3, [r3, #0]
 80065b2:	009b      	lsls	r3, r3, #2
 80065b4:	4413      	add	r3, r2
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80065ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80065bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d013      	beq.n	80065ec <USB_ActivateEndpoint+0x5d8>
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	4413      	add	r3, r2
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	4b3d      	ldr	r3, [pc, #244]	@ (80066c8 <USB_ActivateEndpoint+0x6b4>)
 80065d2:	4013      	ands	r3, r2
 80065d4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	009b      	lsls	r3, r3, #2
 80065de:	441a      	add	r2, r3
 80065e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80065e2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80065e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065ea:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	4413      	add	r3, r2
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	657b      	str	r3, [r7, #84]	@ 0x54
 80065fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80065fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006600:	2b00      	cmp	r3, #0
 8006602:	d013      	beq.n	800662c <USB_ActivateEndpoint+0x618>
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	781b      	ldrb	r3, [r3, #0]
 800660a:	009b      	lsls	r3, r3, #2
 800660c:	4413      	add	r3, r2
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	4b2d      	ldr	r3, [pc, #180]	@ (80066c8 <USB_ActivateEndpoint+0x6b4>)
 8006612:	4013      	ands	r3, r2
 8006614:	653b      	str	r3, [r7, #80]	@ 0x50
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	009b      	lsls	r3, r3, #2
 800661e:	441a      	add	r2, r3
 8006620:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006622:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006626:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800662a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	78db      	ldrb	r3, [r3, #3]
 8006630:	2b01      	cmp	r3, #1
 8006632:	d018      	beq.n	8006666 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	4413      	add	r3, r2
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	4b22      	ldr	r3, [pc, #136]	@ (80066cc <USB_ActivateEndpoint+0x6b8>)
 8006642:	4013      	ands	r3, r2
 8006644:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006646:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006648:	f083 0320 	eor.w	r3, r3, #32
 800664c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	441a      	add	r2, r3
 8006658:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800665a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800665e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006662:	6013      	str	r3, [r2, #0]
 8006664:	e013      	b.n	800668e <USB_ActivateEndpoint+0x67a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	4413      	add	r3, r2
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	4b16      	ldr	r3, [pc, #88]	@ (80066cc <USB_ActivateEndpoint+0x6b8>)
 8006674:	4013      	ands	r3, r2
 8006676:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	441a      	add	r2, r3
 8006682:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006684:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006688:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800668c:	6013      	str	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800668e:	687a      	ldr	r2, [r7, #4]
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	781b      	ldrb	r3, [r3, #0]
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	4413      	add	r3, r2
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	4b0d      	ldr	r3, [pc, #52]	@ (80066d0 <USB_ActivateEndpoint+0x6bc>)
 800669c:	4013      	ands	r3, r2
 800669e:	647b      	str	r3, [r7, #68]	@ 0x44
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	781b      	ldrb	r3, [r3, #0]
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	441a      	add	r2, r3
 80066aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066b4:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80066b6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	377c      	adds	r7, #124	@ 0x7c
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr
 80066c6:	bf00      	nop
 80066c8:	07ff8f8f 	.word	0x07ff8f8f
 80066cc:	07ff8fbf 	.word	0x07ff8fbf
 80066d0:	07ffbf8f 	.word	0x07ffbf8f

080066d4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b097      	sub	sp, #92	@ 0x5c
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	7b1b      	ldrb	r3, [r3, #12]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d16d      	bne.n	80067c2 <USB_DeactivateEndpoint+0xee>
  {
    if (ep->is_in != 0U)
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	785b      	ldrb	r3, [r3, #1]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d034      	beq.n	8006758 <USB_DeactivateEndpoint+0x84>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	009b      	lsls	r3, r3, #2
 80066f6:	4413      	add	r3, r2
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	613b      	str	r3, [r7, #16]
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006702:	2b00      	cmp	r3, #0
 8006704:	d013      	beq.n	800672e <USB_DeactivateEndpoint+0x5a>
 8006706:	687a      	ldr	r2, [r7, #4]
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	009b      	lsls	r3, r3, #2
 800670e:	4413      	add	r3, r2
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	4b6d      	ldr	r3, [pc, #436]	@ (80068c8 <USB_DeactivateEndpoint+0x1f4>)
 8006714:	4013      	ands	r3, r2
 8006716:	60fb      	str	r3, [r7, #12]
 8006718:	687a      	ldr	r2, [r7, #4]
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	441a      	add	r2, r3
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006728:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800672c:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	009b      	lsls	r3, r3, #2
 8006736:	4413      	add	r3, r2
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	4b64      	ldr	r3, [pc, #400]	@ (80068cc <USB_DeactivateEndpoint+0x1f8>)
 800673c:	4013      	ands	r3, r2
 800673e:	60bb      	str	r3, [r7, #8]
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	009b      	lsls	r3, r3, #2
 8006748:	441a      	add	r2, r3
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006750:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006754:	6013      	str	r3, [r2, #0]
 8006756:	e139      	b.n	80069cc <USB_DeactivateEndpoint+0x2f8>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	781b      	ldrb	r3, [r3, #0]
 800675e:	009b      	lsls	r3, r3, #2
 8006760:	4413      	add	r3, r2
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	61fb      	str	r3, [r7, #28]
 8006766:	69fb      	ldr	r3, [r7, #28]
 8006768:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800676c:	2b00      	cmp	r3, #0
 800676e:	d013      	beq.n	8006798 <USB_DeactivateEndpoint+0xc4>
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	781b      	ldrb	r3, [r3, #0]
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	4413      	add	r3, r2
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	4b52      	ldr	r3, [pc, #328]	@ (80068c8 <USB_DeactivateEndpoint+0x1f4>)
 800677e:	4013      	ands	r3, r2
 8006780:	61bb      	str	r3, [r7, #24]
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	009b      	lsls	r3, r3, #2
 800678a:	441a      	add	r2, r3
 800678c:	69bb      	ldr	r3, [r7, #24]
 800678e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006792:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006796:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	781b      	ldrb	r3, [r3, #0]
 800679e:	009b      	lsls	r3, r3, #2
 80067a0:	4413      	add	r3, r2
 80067a2:	681a      	ldr	r2, [r3, #0]
 80067a4:	4b4a      	ldr	r3, [pc, #296]	@ (80068d0 <USB_DeactivateEndpoint+0x1fc>)
 80067a6:	4013      	ands	r3, r2
 80067a8:	617b      	str	r3, [r7, #20]
 80067aa:	687a      	ldr	r2, [r7, #4]
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	441a      	add	r2, r3
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067be:	6013      	str	r3, [r2, #0]
 80067c0:	e104      	b.n	80069cc <USB_DeactivateEndpoint+0x2f8>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	785b      	ldrb	r3, [r3, #1]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	f040 8084 	bne.w	80068d4 <USB_DeactivateEndpoint+0x200>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80067cc:	687a      	ldr	r2, [r7, #4]
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	009b      	lsls	r3, r3, #2
 80067d4:	4413      	add	r3, r2
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80067da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d013      	beq.n	800680c <USB_DeactivateEndpoint+0x138>
 80067e4:	687a      	ldr	r2, [r7, #4]
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	781b      	ldrb	r3, [r3, #0]
 80067ea:	009b      	lsls	r3, r3, #2
 80067ec:	4413      	add	r3, r2
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	4b35      	ldr	r3, [pc, #212]	@ (80068c8 <USB_DeactivateEndpoint+0x1f4>)
 80067f2:	4013      	ands	r3, r2
 80067f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	781b      	ldrb	r3, [r3, #0]
 80067fc:	009b      	lsls	r3, r3, #2
 80067fe:	441a      	add	r2, r3
 8006800:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006802:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006806:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800680a:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	4413      	add	r3, r2
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	633b      	str	r3, [r7, #48]	@ 0x30
 800681a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800681c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006820:	2b00      	cmp	r3, #0
 8006822:	d013      	beq.n	800684c <USB_DeactivateEndpoint+0x178>
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	4413      	add	r3, r2
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	4b25      	ldr	r3, [pc, #148]	@ (80068c8 <USB_DeactivateEndpoint+0x1f4>)
 8006832:	4013      	ands	r3, r2
 8006834:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006836:	687a      	ldr	r2, [r7, #4]
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	781b      	ldrb	r3, [r3, #0]
 800683c:	009b      	lsls	r3, r3, #2
 800683e:	441a      	add	r2, r3
 8006840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006842:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006846:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800684a:	6013      	str	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	009b      	lsls	r3, r3, #2
 8006854:	4413      	add	r3, r2
 8006856:	681a      	ldr	r2, [r3, #0]
 8006858:	4b1b      	ldr	r3, [pc, #108]	@ (80068c8 <USB_DeactivateEndpoint+0x1f4>)
 800685a:	4013      	ands	r3, r2
 800685c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800685e:	687a      	ldr	r2, [r7, #4]
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	441a      	add	r2, r3
 8006868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800686a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800686e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006872:	6013      	str	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	009b      	lsls	r3, r3, #2
 800687c:	4413      	add	r3, r2
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	4b13      	ldr	r3, [pc, #76]	@ (80068d0 <USB_DeactivateEndpoint+0x1fc>)
 8006882:	4013      	ands	r3, r2
 8006884:	627b      	str	r3, [r7, #36]	@ 0x24
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	009b      	lsls	r3, r3, #2
 800688e:	441a      	add	r2, r3
 8006890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006892:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006896:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800689a:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800689c:	687a      	ldr	r2, [r7, #4]
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	4413      	add	r3, r2
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	4b08      	ldr	r3, [pc, #32]	@ (80068cc <USB_DeactivateEndpoint+0x1f8>)
 80068aa:	4013      	ands	r3, r2
 80068ac:	623b      	str	r3, [r7, #32]
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	009b      	lsls	r3, r3, #2
 80068b6:	441a      	add	r2, r3
 80068b8:	6a3b      	ldr	r3, [r7, #32]
 80068ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068c2:	6013      	str	r3, [r2, #0]
 80068c4:	e082      	b.n	80069cc <USB_DeactivateEndpoint+0x2f8>
 80068c6:	bf00      	nop
 80068c8:	07ff8f8f 	.word	0x07ff8f8f
 80068cc:	07ff8fbf 	.word	0x07ff8fbf
 80068d0:	07ffbf8f 	.word	0x07ffbf8f
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	4413      	add	r3, r2
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	657b      	str	r3, [r7, #84]	@ 0x54
 80068e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80068e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d013      	beq.n	8006914 <USB_DeactivateEndpoint+0x240>
 80068ec:	687a      	ldr	r2, [r7, #4]
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	4413      	add	r3, r2
 80068f6:	681a      	ldr	r2, [r3, #0]
 80068f8:	4b38      	ldr	r3, [pc, #224]	@ (80069dc <USB_DeactivateEndpoint+0x308>)
 80068fa:	4013      	ands	r3, r2
 80068fc:	653b      	str	r3, [r7, #80]	@ 0x50
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	009b      	lsls	r3, r3, #2
 8006906:	441a      	add	r2, r3
 8006908:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800690a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800690e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006912:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	4413      	add	r3, r2
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006922:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006924:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006928:	2b00      	cmp	r3, #0
 800692a:	d013      	beq.n	8006954 <USB_DeactivateEndpoint+0x280>
 800692c:	687a      	ldr	r2, [r7, #4]
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	009b      	lsls	r3, r3, #2
 8006934:	4413      	add	r3, r2
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	4b28      	ldr	r3, [pc, #160]	@ (80069dc <USB_DeactivateEndpoint+0x308>)
 800693a:	4013      	ands	r3, r2
 800693c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	441a      	add	r2, r3
 8006948:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800694a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800694e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006952:	6013      	str	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	781b      	ldrb	r3, [r3, #0]
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	4413      	add	r3, r2
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	4b1e      	ldr	r3, [pc, #120]	@ (80069dc <USB_DeactivateEndpoint+0x308>)
 8006962:	4013      	ands	r3, r2
 8006964:	647b      	str	r3, [r7, #68]	@ 0x44
 8006966:	687a      	ldr	r2, [r7, #4]
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	441a      	add	r2, r3
 8006970:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006972:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006976:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800697a:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	009b      	lsls	r3, r3, #2
 8006984:	4413      	add	r3, r2
 8006986:	681a      	ldr	r2, [r3, #0]
 8006988:	4b15      	ldr	r3, [pc, #84]	@ (80069e0 <USB_DeactivateEndpoint+0x30c>)
 800698a:	4013      	ands	r3, r2
 800698c:	643b      	str	r3, [r7, #64]	@ 0x40
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	009b      	lsls	r3, r3, #2
 8006996:	441a      	add	r2, r3
 8006998:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800699a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800699e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069a2:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	4413      	add	r3, r2
 80069ae:	681a      	ldr	r2, [r3, #0]
 80069b0:	4b0c      	ldr	r3, [pc, #48]	@ (80069e4 <USB_DeactivateEndpoint+0x310>)
 80069b2:	4013      	ands	r3, r2
 80069b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	441a      	add	r2, r3
 80069c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069ca:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80069cc:	2300      	movs	r3, #0
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	375c      	adds	r7, #92	@ 0x5c
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr
 80069da:	bf00      	nop
 80069dc:	07ff8f8f 	.word	0x07ff8f8f
 80069e0:	07ff8fbf 	.word	0x07ff8fbf
 80069e4:	07ffbf8f 	.word	0x07ffbf8f

080069e8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b096      	sub	sp, #88	@ 0x58
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	785b      	ldrb	r3, [r3, #1]
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	f040 84ed 	bne.w	80073d6 <USB_EPStartXfer+0x9ee>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	699a      	ldr	r2, [r3, #24]
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	691b      	ldr	r3, [r3, #16]
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d903      	bls.n	8006a10 <USB_EPStartXfer+0x28>
    {
      len = ep->maxpacket;
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	691b      	ldr	r3, [r3, #16]
 8006a0c:	657b      	str	r3, [r7, #84]	@ 0x54
 8006a0e:	e002      	b.n	8006a16 <USB_EPStartXfer+0x2e>
    }
    else
    {
      len = ep->xfer_len;
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	699b      	ldr	r3, [r3, #24]
 8006a14:	657b      	str	r3, [r7, #84]	@ 0x54
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	7b1b      	ldrb	r3, [r3, #12]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d12e      	bne.n	8006a7c <USB_EPStartXfer+0x94>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	6959      	ldr	r1, [r3, #20]
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	88da      	ldrh	r2, [r3, #6]
 8006a26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f001 f952 	bl	8007cd4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	00db      	lsls	r3, r3, #3
 8006a36:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006a3a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	00db      	lsls	r3, r3, #3
 8006a46:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006a4a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006a4e:	b292      	uxth	r2, r2
 8006a50:	601a      	str	r2, [r3, #0]
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	00db      	lsls	r3, r3, #3
 8006a58:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006a5c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006a60:	6819      	ldr	r1, [r3, #0]
 8006a62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a64:	041a      	lsls	r2, r3, #16
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	781b      	ldrb	r3, [r3, #0]
 8006a6a:	00db      	lsls	r3, r3, #3
 8006a6c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006a70:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006a74:	430a      	orrs	r2, r1
 8006a76:	601a      	str	r2, [r3, #0]
 8006a78:	f000 bc90 	b.w	800739c <USB_EPStartXfer+0x9b4>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	78db      	ldrb	r3, [r3, #3]
 8006a80:	2b02      	cmp	r3, #2
 8006a82:	f040 8332 	bne.w	80070ea <USB_EPStartXfer+0x702>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	6a1a      	ldr	r2, [r3, #32]
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	691b      	ldr	r3, [r3, #16]
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	f240 82e4 	bls.w	800705c <USB_EPStartXfer+0x674>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	781b      	ldrb	r3, [r3, #0]
 8006a9a:	009b      	lsls	r3, r3, #2
 8006a9c:	4413      	add	r3, r2
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	4ba4      	ldr	r3, [pc, #656]	@ (8006d34 <USB_EPStartXfer+0x34c>)
 8006aa2:	4013      	ands	r3, r2
 8006aa4:	613b      	str	r3, [r7, #16]
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	441a      	add	r2, r3
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006ab6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006aba:	6013      	str	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	6a1a      	ldr	r2, [r3, #32]
 8006ac0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ac2:	1ad2      	subs	r2, r2, r3
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006ac8:	687a      	ldr	r2, [r7, #4]
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	781b      	ldrb	r3, [r3, #0]
 8006ace:	009b      	lsls	r3, r3, #2
 8006ad0:	4413      	add	r3, r2
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	f000 8161 	beq.w	8006da0 <USB_EPStartXfer+0x3b8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	785b      	ldrb	r3, [r3, #1]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d16a      	bne.n	8006bbc <USB_EPStartXfer+0x1d4>
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	781b      	ldrb	r3, [r3, #0]
 8006aea:	00db      	lsls	r3, r3, #3
 8006aec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006af0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006af4:	685a      	ldr	r2, [r3, #4]
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	00db      	lsls	r3, r3, #3
 8006afc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006b00:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006b04:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8006b08:	605a      	str	r2, [r3, #4]
 8006b0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d112      	bne.n	8006b36 <USB_EPStartXfer+0x14e>
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	00db      	lsls	r3, r3, #3
 8006b16:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006b1a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006b1e:	685a      	ldr	r2, [r3, #4]
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	781b      	ldrb	r3, [r3, #0]
 8006b24:	00db      	lsls	r3, r3, #3
 8006b26:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006b2a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006b2e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006b32:	605a      	str	r2, [r3, #4]
 8006b34:	e06a      	b.n	8006c0c <USB_EPStartXfer+0x224>
 8006b36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b38:	2b3e      	cmp	r3, #62	@ 0x3e
 8006b3a:	d81e      	bhi.n	8006b7a <USB_EPStartXfer+0x192>
 8006b3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b3e:	085b      	lsrs	r3, r3, #1
 8006b40:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b44:	f003 0301 	and.w	r3, r3, #1
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d002      	beq.n	8006b52 <USB_EPStartXfer+0x16a>
 8006b4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b4e:	3301      	adds	r3, #1
 8006b50:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	00db      	lsls	r3, r3, #3
 8006b58:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006b5c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006b60:	6859      	ldr	r1, [r3, #4]
 8006b62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b64:	069a      	lsls	r2, r3, #26
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	781b      	ldrb	r3, [r3, #0]
 8006b6a:	00db      	lsls	r3, r3, #3
 8006b6c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006b70:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006b74:	430a      	orrs	r2, r1
 8006b76:	605a      	str	r2, [r3, #4]
 8006b78:	e048      	b.n	8006c0c <USB_EPStartXfer+0x224>
 8006b7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b7c:	095b      	lsrs	r3, r3, #5
 8006b7e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b82:	f003 031f 	and.w	r3, r3, #31
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d102      	bne.n	8006b90 <USB_EPStartXfer+0x1a8>
 8006b8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b8c:	3b01      	subs	r3, #1
 8006b8e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	781b      	ldrb	r3, [r3, #0]
 8006b94:	00db      	lsls	r3, r3, #3
 8006b96:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006b9a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006b9e:	685a      	ldr	r2, [r3, #4]
 8006ba0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ba2:	069b      	lsls	r3, r3, #26
 8006ba4:	431a      	orrs	r2, r3
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	781b      	ldrb	r3, [r3, #0]
 8006baa:	00db      	lsls	r3, r3, #3
 8006bac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006bb0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006bb4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006bb8:	605a      	str	r2, [r3, #4]
 8006bba:	e027      	b.n	8006c0c <USB_EPStartXfer+0x224>
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	785b      	ldrb	r3, [r3, #1]
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d123      	bne.n	8006c0c <USB_EPStartXfer+0x224>
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	00db      	lsls	r3, r3, #3
 8006bca:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006bce:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006bd2:	685a      	ldr	r2, [r3, #4]
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	781b      	ldrb	r3, [r3, #0]
 8006bd8:	00db      	lsls	r3, r3, #3
 8006bda:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006bde:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006be2:	b292      	uxth	r2, r2
 8006be4:	605a      	str	r2, [r3, #4]
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	00db      	lsls	r3, r3, #3
 8006bec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006bf0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006bf4:	6859      	ldr	r1, [r3, #4]
 8006bf6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006bf8:	041a      	lsls	r2, r3, #16
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	781b      	ldrb	r3, [r3, #0]
 8006bfe:	00db      	lsls	r3, r3, #3
 8006c00:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006c04:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006c08:	430a      	orrs	r2, r1
 8006c0a:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	895b      	ldrh	r3, [r3, #10]
 8006c10:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	6959      	ldr	r1, [r3, #20]
 8006c16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	8b7a      	ldrh	r2, [r7, #26]
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f001 f859 	bl	8007cd4 <USB_WritePMA>
            ep->xfer_buff += len;
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	695a      	ldr	r2, [r3, #20]
 8006c26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c28:	441a      	add	r2, r3
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	6a1a      	ldr	r2, [r3, #32]
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	691b      	ldr	r3, [r3, #16]
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d906      	bls.n	8006c48 <USB_EPStartXfer+0x260>
            {
              ep->xfer_len_db -= len;
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	6a1a      	ldr	r2, [r3, #32]
 8006c3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c40:	1ad2      	subs	r2, r2, r3
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	621a      	str	r2, [r3, #32]
 8006c46:	e005      	b.n	8006c54 <USB_EPStartXfer+0x26c>
            }
            else
            {
              len = ep->xfer_len_db;
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	6a1b      	ldr	r3, [r3, #32]
 8006c4c:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	2200      	movs	r2, #0
 8006c52:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	785b      	ldrb	r3, [r3, #1]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d16d      	bne.n	8006d38 <USB_EPStartXfer+0x350>
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	00db      	lsls	r3, r3, #3
 8006c62:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006c66:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	781b      	ldrb	r3, [r3, #0]
 8006c70:	00db      	lsls	r3, r3, #3
 8006c72:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006c76:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006c7a:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8006c7e:	601a      	str	r2, [r3, #0]
 8006c80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d112      	bne.n	8006cac <USB_EPStartXfer+0x2c4>
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	00db      	lsls	r3, r3, #3
 8006c8c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006c90:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	781b      	ldrb	r3, [r3, #0]
 8006c9a:	00db      	lsls	r3, r3, #3
 8006c9c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006ca0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006ca4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006ca8:	601a      	str	r2, [r3, #0]
 8006caa:	e06d      	b.n	8006d88 <USB_EPStartXfer+0x3a0>
 8006cac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006cae:	2b3e      	cmp	r3, #62	@ 0x3e
 8006cb0:	d81e      	bhi.n	8006cf0 <USB_EPStartXfer+0x308>
 8006cb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006cb4:	085b      	lsrs	r3, r3, #1
 8006cb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006cb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006cba:	f003 0301 	and.w	r3, r3, #1
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d002      	beq.n	8006cc8 <USB_EPStartXfer+0x2e0>
 8006cc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006cc4:	3301      	adds	r3, #1
 8006cc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	00db      	lsls	r3, r3, #3
 8006cce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006cd2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006cd6:	6819      	ldr	r1, [r3, #0]
 8006cd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006cda:	069a      	lsls	r2, r3, #26
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	00db      	lsls	r3, r3, #3
 8006ce2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006ce6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006cea:	430a      	orrs	r2, r1
 8006cec:	601a      	str	r2, [r3, #0]
 8006cee:	e04b      	b.n	8006d88 <USB_EPStartXfer+0x3a0>
 8006cf0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006cf2:	095b      	lsrs	r3, r3, #5
 8006cf4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006cf6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006cf8:	f003 031f 	and.w	r3, r3, #31
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d102      	bne.n	8006d06 <USB_EPStartXfer+0x31e>
 8006d00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d02:	3b01      	subs	r3, #1
 8006d04:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	781b      	ldrb	r3, [r3, #0]
 8006d0a:	00db      	lsls	r3, r3, #3
 8006d0c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006d10:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006d14:	681a      	ldr	r2, [r3, #0]
 8006d16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d18:	069b      	lsls	r3, r3, #26
 8006d1a:	431a      	orrs	r2, r3
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	781b      	ldrb	r3, [r3, #0]
 8006d20:	00db      	lsls	r3, r3, #3
 8006d22:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006d26:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006d2a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006d2e:	601a      	str	r2, [r3, #0]
 8006d30:	e02a      	b.n	8006d88 <USB_EPStartXfer+0x3a0>
 8006d32:	bf00      	nop
 8006d34:	07ff8f8f 	.word	0x07ff8f8f
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	785b      	ldrb	r3, [r3, #1]
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	d123      	bne.n	8006d88 <USB_EPStartXfer+0x3a0>
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	00db      	lsls	r3, r3, #3
 8006d46:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006d4a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	00db      	lsls	r3, r3, #3
 8006d56:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006d5a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006d5e:	b292      	uxth	r2, r2
 8006d60:	601a      	str	r2, [r3, #0]
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	00db      	lsls	r3, r3, #3
 8006d68:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006d6c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006d70:	6819      	ldr	r1, [r3, #0]
 8006d72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d74:	041a      	lsls	r2, r3, #16
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	781b      	ldrb	r3, [r3, #0]
 8006d7a:	00db      	lsls	r3, r3, #3
 8006d7c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006d80:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006d84:	430a      	orrs	r2, r1
 8006d86:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	891b      	ldrh	r3, [r3, #8]
 8006d8c:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	6959      	ldr	r1, [r3, #20]
 8006d92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	8b7a      	ldrh	r2, [r7, #26]
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f000 ff9b 	bl	8007cd4 <USB_WritePMA>
 8006d9e:	e2fd      	b.n	800739c <USB_EPStartXfer+0x9b4>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	785b      	ldrb	r3, [r3, #1]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d16a      	bne.n	8006e7e <USB_EPStartXfer+0x496>
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	00db      	lsls	r3, r3, #3
 8006dae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006db2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006db6:	681a      	ldr	r2, [r3, #0]
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	00db      	lsls	r3, r3, #3
 8006dbe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006dc2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006dc6:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8006dca:	601a      	str	r2, [r3, #0]
 8006dcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d112      	bne.n	8006df8 <USB_EPStartXfer+0x410>
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	00db      	lsls	r3, r3, #3
 8006dd8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006ddc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	00db      	lsls	r3, r3, #3
 8006de8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006dec:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006df0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006df4:	601a      	str	r2, [r3, #0]
 8006df6:	e06a      	b.n	8006ece <USB_EPStartXfer+0x4e6>
 8006df8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006dfa:	2b3e      	cmp	r3, #62	@ 0x3e
 8006dfc:	d81e      	bhi.n	8006e3c <USB_EPStartXfer+0x454>
 8006dfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e00:	085b      	lsrs	r3, r3, #1
 8006e02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e06:	f003 0301 	and.w	r3, r3, #1
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d002      	beq.n	8006e14 <USB_EPStartXfer+0x42c>
 8006e0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e10:	3301      	adds	r3, #1
 8006e12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	781b      	ldrb	r3, [r3, #0]
 8006e18:	00db      	lsls	r3, r3, #3
 8006e1a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006e1e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006e22:	6819      	ldr	r1, [r3, #0]
 8006e24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e26:	069a      	lsls	r2, r3, #26
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	781b      	ldrb	r3, [r3, #0]
 8006e2c:	00db      	lsls	r3, r3, #3
 8006e2e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006e32:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006e36:	430a      	orrs	r2, r1
 8006e38:	601a      	str	r2, [r3, #0]
 8006e3a:	e048      	b.n	8006ece <USB_EPStartXfer+0x4e6>
 8006e3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e3e:	095b      	lsrs	r3, r3, #5
 8006e40:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e44:	f003 031f 	and.w	r3, r3, #31
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d102      	bne.n	8006e52 <USB_EPStartXfer+0x46a>
 8006e4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e4e:	3b01      	subs	r3, #1
 8006e50:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	781b      	ldrb	r3, [r3, #0]
 8006e56:	00db      	lsls	r3, r3, #3
 8006e58:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006e5c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e64:	069b      	lsls	r3, r3, #26
 8006e66:	431a      	orrs	r2, r3
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	00db      	lsls	r3, r3, #3
 8006e6e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006e72:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006e76:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006e7a:	601a      	str	r2, [r3, #0]
 8006e7c:	e027      	b.n	8006ece <USB_EPStartXfer+0x4e6>
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	785b      	ldrb	r3, [r3, #1]
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d123      	bne.n	8006ece <USB_EPStartXfer+0x4e6>
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	00db      	lsls	r3, r3, #3
 8006e8c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006e90:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	781b      	ldrb	r3, [r3, #0]
 8006e9a:	00db      	lsls	r3, r3, #3
 8006e9c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006ea0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006ea4:	b292      	uxth	r2, r2
 8006ea6:	601a      	str	r2, [r3, #0]
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	00db      	lsls	r3, r3, #3
 8006eae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006eb2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006eb6:	6819      	ldr	r1, [r3, #0]
 8006eb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006eba:	041a      	lsls	r2, r3, #16
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	781b      	ldrb	r3, [r3, #0]
 8006ec0:	00db      	lsls	r3, r3, #3
 8006ec2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006ec6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006eca:	430a      	orrs	r2, r1
 8006ecc:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	891b      	ldrh	r3, [r3, #8]
 8006ed2:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	6959      	ldr	r1, [r3, #20]
 8006ed8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	8b7a      	ldrh	r2, [r7, #26]
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f000 fef8 	bl	8007cd4 <USB_WritePMA>
            ep->xfer_buff += len;
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	695a      	ldr	r2, [r3, #20]
 8006ee8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006eea:	441a      	add	r2, r3
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	6a1a      	ldr	r2, [r3, #32]
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	691b      	ldr	r3, [r3, #16]
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	d906      	bls.n	8006f0a <USB_EPStartXfer+0x522>
            {
              ep->xfer_len_db -= len;
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	6a1a      	ldr	r2, [r3, #32]
 8006f00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f02:	1ad2      	subs	r2, r2, r3
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	621a      	str	r2, [r3, #32]
 8006f08:	e005      	b.n	8006f16 <USB_EPStartXfer+0x52e>
            }
            else
            {
              len = ep->xfer_len_db;
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	6a1b      	ldr	r3, [r3, #32]
 8006f0e:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	2200      	movs	r2, #0
 8006f14:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	785b      	ldrb	r3, [r3, #1]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d16a      	bne.n	8006ff4 <USB_EPStartXfer+0x60c>
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	00db      	lsls	r3, r3, #3
 8006f24:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006f28:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006f2c:	685a      	ldr	r2, [r3, #4]
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	781b      	ldrb	r3, [r3, #0]
 8006f32:	00db      	lsls	r3, r3, #3
 8006f34:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006f38:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006f3c:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8006f40:	605a      	str	r2, [r3, #4]
 8006f42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d112      	bne.n	8006f6e <USB_EPStartXfer+0x586>
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	00db      	lsls	r3, r3, #3
 8006f4e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006f52:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006f56:	685a      	ldr	r2, [r3, #4]
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	781b      	ldrb	r3, [r3, #0]
 8006f5c:	00db      	lsls	r3, r3, #3
 8006f5e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006f62:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006f66:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006f6a:	605a      	str	r2, [r3, #4]
 8006f6c:	e06a      	b.n	8007044 <USB_EPStartXfer+0x65c>
 8006f6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f70:	2b3e      	cmp	r3, #62	@ 0x3e
 8006f72:	d81e      	bhi.n	8006fb2 <USB_EPStartXfer+0x5ca>
 8006f74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f76:	085b      	lsrs	r3, r3, #1
 8006f78:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f7c:	f003 0301 	and.w	r3, r3, #1
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d002      	beq.n	8006f8a <USB_EPStartXfer+0x5a2>
 8006f84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f86:	3301      	adds	r3, #1
 8006f88:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	00db      	lsls	r3, r3, #3
 8006f90:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006f94:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006f98:	6859      	ldr	r1, [r3, #4]
 8006f9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f9c:	069a      	lsls	r2, r3, #26
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	00db      	lsls	r3, r3, #3
 8006fa4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006fa8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006fac:	430a      	orrs	r2, r1
 8006fae:	605a      	str	r2, [r3, #4]
 8006fb0:	e048      	b.n	8007044 <USB_EPStartXfer+0x65c>
 8006fb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006fb4:	095b      	lsrs	r3, r3, #5
 8006fb6:	647b      	str	r3, [r7, #68]	@ 0x44
 8006fb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006fba:	f003 031f 	and.w	r3, r3, #31
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d102      	bne.n	8006fc8 <USB_EPStartXfer+0x5e0>
 8006fc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006fc4:	3b01      	subs	r3, #1
 8006fc6:	647b      	str	r3, [r7, #68]	@ 0x44
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	00db      	lsls	r3, r3, #3
 8006fce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006fd2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006fd6:	685a      	ldr	r2, [r3, #4]
 8006fd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006fda:	069b      	lsls	r3, r3, #26
 8006fdc:	431a      	orrs	r2, r3
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	781b      	ldrb	r3, [r3, #0]
 8006fe2:	00db      	lsls	r3, r3, #3
 8006fe4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006fe8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006fec:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006ff0:	605a      	str	r2, [r3, #4]
 8006ff2:	e027      	b.n	8007044 <USB_EPStartXfer+0x65c>
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	785b      	ldrb	r3, [r3, #1]
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d123      	bne.n	8007044 <USB_EPStartXfer+0x65c>
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	781b      	ldrb	r3, [r3, #0]
 8007000:	00db      	lsls	r3, r3, #3
 8007002:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007006:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800700a:	685a      	ldr	r2, [r3, #4]
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	00db      	lsls	r3, r3, #3
 8007012:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007016:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800701a:	b292      	uxth	r2, r2
 800701c:	605a      	str	r2, [r3, #4]
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	781b      	ldrb	r3, [r3, #0]
 8007022:	00db      	lsls	r3, r3, #3
 8007024:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007028:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800702c:	6859      	ldr	r1, [r3, #4]
 800702e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007030:	041a      	lsls	r2, r3, #16
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	00db      	lsls	r3, r3, #3
 8007038:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800703c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007040:	430a      	orrs	r2, r1
 8007042:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	895b      	ldrh	r3, [r3, #10]
 8007048:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	6959      	ldr	r1, [r3, #20]
 800704e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007050:	b29b      	uxth	r3, r3
 8007052:	8b7a      	ldrh	r2, [r7, #26]
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f000 fe3d 	bl	8007cd4 <USB_WritePMA>
 800705a:	e19f      	b.n	800739c <USB_EPStartXfer+0x9b4>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	6a1b      	ldr	r3, [r3, #32]
 8007060:	657b      	str	r3, [r7, #84]	@ 0x54

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007062:	687a      	ldr	r2, [r7, #4]
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	781b      	ldrb	r3, [r3, #0]
 8007068:	009b      	lsls	r3, r3, #2
 800706a:	4413      	add	r3, r2
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	4ba0      	ldr	r3, [pc, #640]	@ (80072f0 <USB_EPStartXfer+0x908>)
 8007070:	4013      	ands	r3, r2
 8007072:	617b      	str	r3, [r7, #20]
 8007074:	687a      	ldr	r2, [r7, #4]
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	009b      	lsls	r3, r3, #2
 800707c:	441a      	add	r2, r3
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007084:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007088:	6013      	str	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	781b      	ldrb	r3, [r3, #0]
 800708e:	00db      	lsls	r3, r3, #3
 8007090:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007094:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	00db      	lsls	r3, r3, #3
 80070a0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80070a4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80070a8:	b292      	uxth	r2, r2
 80070aa:	601a      	str	r2, [r3, #0]
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	00db      	lsls	r3, r3, #3
 80070b2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80070b6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80070ba:	6819      	ldr	r1, [r3, #0]
 80070bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070be:	041a      	lsls	r2, r3, #16
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	781b      	ldrb	r3, [r3, #0]
 80070c4:	00db      	lsls	r3, r3, #3
 80070c6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80070ca:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80070ce:	430a      	orrs	r2, r1
 80070d0:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	891b      	ldrh	r3, [r3, #8]
 80070d6:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	6959      	ldr	r1, [r3, #20]
 80070dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070de:	b29b      	uxth	r3, r3
 80070e0:	8b7a      	ldrh	r2, [r7, #26]
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f000 fdf6 	bl	8007cd4 <USB_WritePMA>
 80070e8:	e158      	b.n	800739c <USB_EPStartXfer+0x9b4>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	6a1a      	ldr	r2, [r3, #32]
 80070ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070f0:	1ad2      	subs	r2, r2, r3
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80070f6:	687a      	ldr	r2, [r7, #4]
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	009b      	lsls	r3, r3, #2
 80070fe:	4413      	add	r3, r2
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007106:	2b00      	cmp	r3, #0
 8007108:	f000 80a3 	beq.w	8007252 <USB_EPStartXfer+0x86a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	785b      	ldrb	r3, [r3, #1]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d16a      	bne.n	80071ea <USB_EPStartXfer+0x802>
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	781b      	ldrb	r3, [r3, #0]
 8007118:	00db      	lsls	r3, r3, #3
 800711a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800711e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007122:	685a      	ldr	r2, [r3, #4]
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	781b      	ldrb	r3, [r3, #0]
 8007128:	00db      	lsls	r3, r3, #3
 800712a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800712e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007132:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8007136:	605a      	str	r2, [r3, #4]
 8007138:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800713a:	2b00      	cmp	r3, #0
 800713c:	d112      	bne.n	8007164 <USB_EPStartXfer+0x77c>
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	781b      	ldrb	r3, [r3, #0]
 8007142:	00db      	lsls	r3, r3, #3
 8007144:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007148:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800714c:	685a      	ldr	r2, [r3, #4]
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	781b      	ldrb	r3, [r3, #0]
 8007152:	00db      	lsls	r3, r3, #3
 8007154:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007158:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800715c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8007160:	605a      	str	r2, [r3, #4]
 8007162:	e06a      	b.n	800723a <USB_EPStartXfer+0x852>
 8007164:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007166:	2b3e      	cmp	r3, #62	@ 0x3e
 8007168:	d81e      	bhi.n	80071a8 <USB_EPStartXfer+0x7c0>
 800716a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800716c:	085b      	lsrs	r3, r3, #1
 800716e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007170:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007172:	f003 0301 	and.w	r3, r3, #1
 8007176:	2b00      	cmp	r3, #0
 8007178:	d002      	beq.n	8007180 <USB_EPStartXfer+0x798>
 800717a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800717c:	3301      	adds	r3, #1
 800717e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	00db      	lsls	r3, r3, #3
 8007186:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800718a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800718e:	6859      	ldr	r1, [r3, #4]
 8007190:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007192:	069a      	lsls	r2, r3, #26
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	781b      	ldrb	r3, [r3, #0]
 8007198:	00db      	lsls	r3, r3, #3
 800719a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800719e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80071a2:	430a      	orrs	r2, r1
 80071a4:	605a      	str	r2, [r3, #4]
 80071a6:	e048      	b.n	800723a <USB_EPStartXfer+0x852>
 80071a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80071aa:	095b      	lsrs	r3, r3, #5
 80071ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80071ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80071b0:	f003 031f 	and.w	r3, r3, #31
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d102      	bne.n	80071be <USB_EPStartXfer+0x7d6>
 80071b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071ba:	3b01      	subs	r3, #1
 80071bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	781b      	ldrb	r3, [r3, #0]
 80071c2:	00db      	lsls	r3, r3, #3
 80071c4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80071c8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80071cc:	685a      	ldr	r2, [r3, #4]
 80071ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071d0:	069b      	lsls	r3, r3, #26
 80071d2:	431a      	orrs	r2, r3
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	781b      	ldrb	r3, [r3, #0]
 80071d8:	00db      	lsls	r3, r3, #3
 80071da:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80071de:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80071e2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80071e6:	605a      	str	r2, [r3, #4]
 80071e8:	e027      	b.n	800723a <USB_EPStartXfer+0x852>
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	785b      	ldrb	r3, [r3, #1]
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d123      	bne.n	800723a <USB_EPStartXfer+0x852>
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	781b      	ldrb	r3, [r3, #0]
 80071f6:	00db      	lsls	r3, r3, #3
 80071f8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80071fc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007200:	685a      	ldr	r2, [r3, #4]
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	00db      	lsls	r3, r3, #3
 8007208:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800720c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007210:	b292      	uxth	r2, r2
 8007212:	605a      	str	r2, [r3, #4]
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	781b      	ldrb	r3, [r3, #0]
 8007218:	00db      	lsls	r3, r3, #3
 800721a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800721e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007222:	6859      	ldr	r1, [r3, #4]
 8007224:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007226:	041a      	lsls	r2, r3, #16
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	00db      	lsls	r3, r3, #3
 800722e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007232:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007236:	430a      	orrs	r2, r1
 8007238:	605a      	str	r2, [r3, #4]
          pmabuffer = ep->pmaaddr1;
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	895b      	ldrh	r3, [r3, #10]
 800723e:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	6959      	ldr	r1, [r3, #20]
 8007244:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007246:	b29b      	uxth	r3, r3
 8007248:	8b7a      	ldrh	r2, [r7, #26]
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 fd42 	bl	8007cd4 <USB_WritePMA>
 8007250:	e0a4      	b.n	800739c <USB_EPStartXfer+0x9b4>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	785b      	ldrb	r3, [r3, #1]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d16d      	bne.n	8007336 <USB_EPStartXfer+0x94e>
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	00db      	lsls	r3, r3, #3
 8007260:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007264:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007268:	681a      	ldr	r2, [r3, #0]
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	781b      	ldrb	r3, [r3, #0]
 800726e:	00db      	lsls	r3, r3, #3
 8007270:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007274:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007278:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800727c:	601a      	str	r2, [r3, #0]
 800727e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007280:	2b00      	cmp	r3, #0
 8007282:	d112      	bne.n	80072aa <USB_EPStartXfer+0x8c2>
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	781b      	ldrb	r3, [r3, #0]
 8007288:	00db      	lsls	r3, r3, #3
 800728a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800728e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007292:	681a      	ldr	r2, [r3, #0]
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	781b      	ldrb	r3, [r3, #0]
 8007298:	00db      	lsls	r3, r3, #3
 800729a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800729e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80072a2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80072a6:	601a      	str	r2, [r3, #0]
 80072a8:	e06d      	b.n	8007386 <USB_EPStartXfer+0x99e>
 80072aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072ac:	2b3e      	cmp	r3, #62	@ 0x3e
 80072ae:	d821      	bhi.n	80072f4 <USB_EPStartXfer+0x90c>
 80072b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072b2:	085b      	lsrs	r3, r3, #1
 80072b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80072b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072b8:	f003 0301 	and.w	r3, r3, #1
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d002      	beq.n	80072c6 <USB_EPStartXfer+0x8de>
 80072c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072c2:	3301      	adds	r3, #1
 80072c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	781b      	ldrb	r3, [r3, #0]
 80072ca:	00db      	lsls	r3, r3, #3
 80072cc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80072d0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80072d4:	6819      	ldr	r1, [r3, #0]
 80072d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072d8:	069a      	lsls	r2, r3, #26
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	781b      	ldrb	r3, [r3, #0]
 80072de:	00db      	lsls	r3, r3, #3
 80072e0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80072e4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80072e8:	430a      	orrs	r2, r1
 80072ea:	601a      	str	r2, [r3, #0]
 80072ec:	e04b      	b.n	8007386 <USB_EPStartXfer+0x99e>
 80072ee:	bf00      	nop
 80072f0:	07ff8e8f 	.word	0x07ff8e8f
 80072f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072f6:	095b      	lsrs	r3, r3, #5
 80072f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80072fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072fc:	f003 031f 	and.w	r3, r3, #31
 8007300:	2b00      	cmp	r3, #0
 8007302:	d102      	bne.n	800730a <USB_EPStartXfer+0x922>
 8007304:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007306:	3b01      	subs	r3, #1
 8007308:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	00db      	lsls	r3, r3, #3
 8007310:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007314:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007318:	681a      	ldr	r2, [r3, #0]
 800731a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800731c:	069b      	lsls	r3, r3, #26
 800731e:	431a      	orrs	r2, r3
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	781b      	ldrb	r3, [r3, #0]
 8007324:	00db      	lsls	r3, r3, #3
 8007326:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800732a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800732e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8007332:	601a      	str	r2, [r3, #0]
 8007334:	e027      	b.n	8007386 <USB_EPStartXfer+0x99e>
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	785b      	ldrb	r3, [r3, #1]
 800733a:	2b01      	cmp	r3, #1
 800733c:	d123      	bne.n	8007386 <USB_EPStartXfer+0x99e>
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	781b      	ldrb	r3, [r3, #0]
 8007342:	00db      	lsls	r3, r3, #3
 8007344:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007348:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800734c:	681a      	ldr	r2, [r3, #0]
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	00db      	lsls	r3, r3, #3
 8007354:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007358:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800735c:	b292      	uxth	r2, r2
 800735e:	601a      	str	r2, [r3, #0]
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	00db      	lsls	r3, r3, #3
 8007366:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800736a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800736e:	6819      	ldr	r1, [r3, #0]
 8007370:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007372:	041a      	lsls	r2, r3, #16
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	00db      	lsls	r3, r3, #3
 800737a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800737e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007382:	430a      	orrs	r2, r1
 8007384:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	891b      	ldrh	r3, [r3, #8]
 800738a:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	6959      	ldr	r1, [r3, #20]
 8007390:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007392:	b29b      	uxth	r3, r3
 8007394:	8b7a      	ldrh	r2, [r7, #26]
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f000 fc9c 	bl	8007cd4 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	781b      	ldrb	r3, [r3, #0]
 80073a2:	009b      	lsls	r3, r3, #2
 80073a4:	4413      	add	r3, r2
 80073a6:	681a      	ldr	r2, [r3, #0]
 80073a8:	4b8b      	ldr	r3, [pc, #556]	@ (80075d8 <USB_EPStartXfer+0xbf0>)
 80073aa:	4013      	ands	r3, r2
 80073ac:	60fb      	str	r3, [r7, #12]
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	f083 0310 	eor.w	r3, r3, #16
 80073b4:	60fb      	str	r3, [r7, #12]
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	f083 0320 	eor.w	r3, r3, #32
 80073bc:	60fb      	str	r3, [r7, #12]
 80073be:	687a      	ldr	r2, [r7, #4]
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	781b      	ldrb	r3, [r3, #0]
 80073c4:	009b      	lsls	r3, r3, #2
 80073c6:	441a      	add	r2, r3
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80073ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073d2:	6013      	str	r3, [r2, #0]
 80073d4:	e36b      	b.n	8007aae <USB_EPStartXfer+0x10c6>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	7b1b      	ldrb	r3, [r3, #12]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	f040 8081 	bne.w	80074e2 <USB_EPStartXfer+0xafa>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	699a      	ldr	r2, [r3, #24]
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	691b      	ldr	r3, [r3, #16]
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d909      	bls.n	8007400 <USB_EPStartXfer+0xa18>
      {
        len = ep->maxpacket;
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	691b      	ldr	r3, [r3, #16]
 80073f0:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len -= len;
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	699a      	ldr	r2, [r3, #24]
 80073f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80073f8:	1ad2      	subs	r2, r2, r3
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	619a      	str	r2, [r3, #24]
 80073fe:	e005      	b.n	800740c <USB_EPStartXfer+0xa24>
      }
      else
      {
        len = ep->xfer_len;
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	699b      	ldr	r3, [r3, #24]
 8007404:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len = 0U;
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	2200      	movs	r2, #0
 800740a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	00db      	lsls	r3, r3, #3
 8007412:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007416:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800741a:	685a      	ldr	r2, [r3, #4]
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	781b      	ldrb	r3, [r3, #0]
 8007420:	00db      	lsls	r3, r3, #3
 8007422:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007426:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800742a:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800742e:	605a      	str	r2, [r3, #4]
 8007430:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007432:	2b00      	cmp	r3, #0
 8007434:	d112      	bne.n	800745c <USB_EPStartXfer+0xa74>
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	781b      	ldrb	r3, [r3, #0]
 800743a:	00db      	lsls	r3, r3, #3
 800743c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007440:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007444:	685a      	ldr	r2, [r3, #4]
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	781b      	ldrb	r3, [r3, #0]
 800744a:	00db      	lsls	r3, r3, #3
 800744c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007450:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007454:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8007458:	605a      	str	r2, [r3, #4]
 800745a:	e30c      	b.n	8007a76 <USB_EPStartXfer+0x108e>
 800745c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800745e:	2b3e      	cmp	r3, #62	@ 0x3e
 8007460:	d81e      	bhi.n	80074a0 <USB_EPStartXfer+0xab8>
 8007462:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007464:	085b      	lsrs	r3, r3, #1
 8007466:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007468:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800746a:	f003 0301 	and.w	r3, r3, #1
 800746e:	2b00      	cmp	r3, #0
 8007470:	d002      	beq.n	8007478 <USB_EPStartXfer+0xa90>
 8007472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007474:	3301      	adds	r3, #1
 8007476:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	781b      	ldrb	r3, [r3, #0]
 800747c:	00db      	lsls	r3, r3, #3
 800747e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007482:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007486:	6859      	ldr	r1, [r3, #4]
 8007488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800748a:	069a      	lsls	r2, r3, #26
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	781b      	ldrb	r3, [r3, #0]
 8007490:	00db      	lsls	r3, r3, #3
 8007492:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007496:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800749a:	430a      	orrs	r2, r1
 800749c:	605a      	str	r2, [r3, #4]
 800749e:	e2ea      	b.n	8007a76 <USB_EPStartXfer+0x108e>
 80074a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074a2:	095b      	lsrs	r3, r3, #5
 80074a4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80074a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074a8:	f003 031f 	and.w	r3, r3, #31
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d102      	bne.n	80074b6 <USB_EPStartXfer+0xace>
 80074b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074b2:	3b01      	subs	r3, #1
 80074b4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	00db      	lsls	r3, r3, #3
 80074bc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80074c0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80074c4:	685a      	ldr	r2, [r3, #4]
 80074c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074c8:	069b      	lsls	r3, r3, #26
 80074ca:	431a      	orrs	r2, r3
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	781b      	ldrb	r3, [r3, #0]
 80074d0:	00db      	lsls	r3, r3, #3
 80074d2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80074d6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80074da:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80074de:	605a      	str	r2, [r3, #4]
 80074e0:	e2c9      	b.n	8007a76 <USB_EPStartXfer+0x108e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	78db      	ldrb	r3, [r3, #3]
 80074e6:	2b02      	cmp	r3, #2
 80074e8:	f040 8176 	bne.w	80077d8 <USB_EPStartXfer+0xdf0>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	785b      	ldrb	r3, [r3, #1]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d173      	bne.n	80075dc <USB_EPStartXfer+0xbf4>
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	781b      	ldrb	r3, [r3, #0]
 80074f8:	00db      	lsls	r3, r3, #3
 80074fa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80074fe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007502:	681a      	ldr	r2, [r3, #0]
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	00db      	lsls	r3, r3, #3
 800750a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800750e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007512:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8007516:	601a      	str	r2, [r3, #0]
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	691b      	ldr	r3, [r3, #16]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d112      	bne.n	8007546 <USB_EPStartXfer+0xb5e>
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	781b      	ldrb	r3, [r3, #0]
 8007524:	00db      	lsls	r3, r3, #3
 8007526:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800752a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800752e:	681a      	ldr	r2, [r3, #0]
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	781b      	ldrb	r3, [r3, #0]
 8007534:	00db      	lsls	r3, r3, #3
 8007536:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800753a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800753e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8007542:	601a      	str	r2, [r3, #0]
 8007544:	e073      	b.n	800762e <USB_EPStartXfer+0xc46>
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	691b      	ldr	r3, [r3, #16]
 800754a:	2b3e      	cmp	r3, #62	@ 0x3e
 800754c:	d820      	bhi.n	8007590 <USB_EPStartXfer+0xba8>
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	691b      	ldr	r3, [r3, #16]
 8007552:	085b      	lsrs	r3, r3, #1
 8007554:	637b      	str	r3, [r7, #52]	@ 0x34
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	691b      	ldr	r3, [r3, #16]
 800755a:	f003 0301 	and.w	r3, r3, #1
 800755e:	2b00      	cmp	r3, #0
 8007560:	d002      	beq.n	8007568 <USB_EPStartXfer+0xb80>
 8007562:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007564:	3301      	adds	r3, #1
 8007566:	637b      	str	r3, [r7, #52]	@ 0x34
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	00db      	lsls	r3, r3, #3
 800756e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007572:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007576:	6819      	ldr	r1, [r3, #0]
 8007578:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800757a:	069a      	lsls	r2, r3, #26
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	781b      	ldrb	r3, [r3, #0]
 8007580:	00db      	lsls	r3, r3, #3
 8007582:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007586:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800758a:	430a      	orrs	r2, r1
 800758c:	601a      	str	r2, [r3, #0]
 800758e:	e04e      	b.n	800762e <USB_EPStartXfer+0xc46>
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	691b      	ldr	r3, [r3, #16]
 8007594:	095b      	lsrs	r3, r3, #5
 8007596:	637b      	str	r3, [r7, #52]	@ 0x34
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	691b      	ldr	r3, [r3, #16]
 800759c:	f003 031f 	and.w	r3, r3, #31
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d102      	bne.n	80075aa <USB_EPStartXfer+0xbc2>
 80075a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075a6:	3b01      	subs	r3, #1
 80075a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	781b      	ldrb	r3, [r3, #0]
 80075ae:	00db      	lsls	r3, r3, #3
 80075b0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80075b4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80075b8:	681a      	ldr	r2, [r3, #0]
 80075ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075bc:	069b      	lsls	r3, r3, #26
 80075be:	431a      	orrs	r2, r3
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	00db      	lsls	r3, r3, #3
 80075c6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80075ca:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80075ce:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80075d2:	601a      	str	r2, [r3, #0]
 80075d4:	e02b      	b.n	800762e <USB_EPStartXfer+0xc46>
 80075d6:	bf00      	nop
 80075d8:	07ff8fbf 	.word	0x07ff8fbf
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	785b      	ldrb	r3, [r3, #1]
 80075e0:	2b01      	cmp	r3, #1
 80075e2:	d124      	bne.n	800762e <USB_EPStartXfer+0xc46>
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	781b      	ldrb	r3, [r3, #0]
 80075e8:	00db      	lsls	r3, r3, #3
 80075ea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80075ee:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80075f2:	681a      	ldr	r2, [r3, #0]
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	00db      	lsls	r3, r3, #3
 80075fa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80075fe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007602:	b292      	uxth	r2, r2
 8007604:	601a      	str	r2, [r3, #0]
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	781b      	ldrb	r3, [r3, #0]
 800760a:	00db      	lsls	r3, r3, #3
 800760c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007610:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007614:	6819      	ldr	r1, [r3, #0]
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	691b      	ldr	r3, [r3, #16]
 800761a:	041a      	lsls	r2, r3, #16
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	781b      	ldrb	r3, [r3, #0]
 8007620:	00db      	lsls	r3, r3, #3
 8007622:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007626:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800762a:	430a      	orrs	r2, r1
 800762c:	601a      	str	r2, [r3, #0]
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	785b      	ldrb	r3, [r3, #1]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d170      	bne.n	8007718 <USB_EPStartXfer+0xd30>
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	781b      	ldrb	r3, [r3, #0]
 800763a:	00db      	lsls	r3, r3, #3
 800763c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007640:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007644:	685a      	ldr	r2, [r3, #4]
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	781b      	ldrb	r3, [r3, #0]
 800764a:	00db      	lsls	r3, r3, #3
 800764c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007650:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007654:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8007658:	605a      	str	r2, [r3, #4]
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	691b      	ldr	r3, [r3, #16]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d112      	bne.n	8007688 <USB_EPStartXfer+0xca0>
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	781b      	ldrb	r3, [r3, #0]
 8007666:	00db      	lsls	r3, r3, #3
 8007668:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800766c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007670:	685a      	ldr	r2, [r3, #4]
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	781b      	ldrb	r3, [r3, #0]
 8007676:	00db      	lsls	r3, r3, #3
 8007678:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800767c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007680:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8007684:	605a      	str	r2, [r3, #4]
 8007686:	e070      	b.n	800776a <USB_EPStartXfer+0xd82>
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	691b      	ldr	r3, [r3, #16]
 800768c:	2b3e      	cmp	r3, #62	@ 0x3e
 800768e:	d820      	bhi.n	80076d2 <USB_EPStartXfer+0xcea>
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	691b      	ldr	r3, [r3, #16]
 8007694:	085b      	lsrs	r3, r3, #1
 8007696:	633b      	str	r3, [r7, #48]	@ 0x30
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	691b      	ldr	r3, [r3, #16]
 800769c:	f003 0301 	and.w	r3, r3, #1
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d002      	beq.n	80076aa <USB_EPStartXfer+0xcc2>
 80076a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076a6:	3301      	adds	r3, #1
 80076a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	781b      	ldrb	r3, [r3, #0]
 80076ae:	00db      	lsls	r3, r3, #3
 80076b0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80076b4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80076b8:	6859      	ldr	r1, [r3, #4]
 80076ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076bc:	069a      	lsls	r2, r3, #26
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	00db      	lsls	r3, r3, #3
 80076c4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80076c8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80076cc:	430a      	orrs	r2, r1
 80076ce:	605a      	str	r2, [r3, #4]
 80076d0:	e04b      	b.n	800776a <USB_EPStartXfer+0xd82>
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	691b      	ldr	r3, [r3, #16]
 80076d6:	095b      	lsrs	r3, r3, #5
 80076d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	691b      	ldr	r3, [r3, #16]
 80076de:	f003 031f 	and.w	r3, r3, #31
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d102      	bne.n	80076ec <USB_EPStartXfer+0xd04>
 80076e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076e8:	3b01      	subs	r3, #1
 80076ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	00db      	lsls	r3, r3, #3
 80076f2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80076f6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80076fa:	685a      	ldr	r2, [r3, #4]
 80076fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076fe:	069b      	lsls	r3, r3, #26
 8007700:	431a      	orrs	r2, r3
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	00db      	lsls	r3, r3, #3
 8007708:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800770c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007710:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8007714:	605a      	str	r2, [r3, #4]
 8007716:	e028      	b.n	800776a <USB_EPStartXfer+0xd82>
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	785b      	ldrb	r3, [r3, #1]
 800771c:	2b01      	cmp	r3, #1
 800771e:	d124      	bne.n	800776a <USB_EPStartXfer+0xd82>
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	781b      	ldrb	r3, [r3, #0]
 8007724:	00db      	lsls	r3, r3, #3
 8007726:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800772a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800772e:	685a      	ldr	r2, [r3, #4]
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	00db      	lsls	r3, r3, #3
 8007736:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800773a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800773e:	b292      	uxth	r2, r2
 8007740:	605a      	str	r2, [r3, #4]
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	00db      	lsls	r3, r3, #3
 8007748:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800774c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007750:	6859      	ldr	r1, [r3, #4]
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	691b      	ldr	r3, [r3, #16]
 8007756:	041a      	lsls	r2, r3, #16
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	781b      	ldrb	r3, [r3, #0]
 800775c:	00db      	lsls	r3, r3, #3
 800775e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007762:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007766:	430a      	orrs	r2, r1
 8007768:	605a      	str	r2, [r3, #4]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	69db      	ldr	r3, [r3, #28]
 800776e:	2b00      	cmp	r3, #0
 8007770:	f000 8181 	beq.w	8007a76 <USB_EPStartXfer+0x108e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(USBx, ep->num);
 8007774:	687a      	ldr	r2, [r7, #4]
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	781b      	ldrb	r3, [r3, #0]
 800777a:	009b      	lsls	r3, r3, #2
 800777c:	4413      	add	r3, r2
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	84fb      	strh	r3, [r7, #38]	@ 0x26

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007782:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007784:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007788:	2b00      	cmp	r3, #0
 800778a:	d004      	beq.n	8007796 <USB_EPStartXfer+0xdae>
 800778c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800778e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007792:	2b00      	cmp	r3, #0
 8007794:	d10b      	bne.n	80077ae <USB_EPStartXfer+0xdc6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007796:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007798:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800779c:	2b00      	cmp	r3, #0
 800779e:	f040 816a 	bne.w	8007a76 <USB_EPStartXfer+0x108e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80077a2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80077a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	f040 8164 	bne.w	8007a76 <USB_EPStartXfer+0x108e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80077ae:	687a      	ldr	r2, [r7, #4]
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	781b      	ldrb	r3, [r3, #0]
 80077b4:	009b      	lsls	r3, r3, #2
 80077b6:	4413      	add	r3, r2
 80077b8:	681a      	ldr	r2, [r3, #0]
 80077ba:	4b98      	ldr	r3, [pc, #608]	@ (8007a1c <USB_EPStartXfer+0x1034>)
 80077bc:	4013      	ands	r3, r2
 80077be:	623b      	str	r3, [r7, #32]
 80077c0:	687a      	ldr	r2, [r7, #4]
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	009b      	lsls	r3, r3, #2
 80077c8:	441a      	add	r2, r3
 80077ca:	6a3b      	ldr	r3, [r7, #32]
 80077cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80077d0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80077d4:	6013      	str	r3, [r2, #0]
 80077d6:	e14e      	b.n	8007a76 <USB_EPStartXfer+0x108e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	78db      	ldrb	r3, [r3, #3]
 80077dc:	2b01      	cmp	r3, #1
 80077de:	f040 8148 	bne.w	8007a72 <USB_EPStartXfer+0x108a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	699a      	ldr	r2, [r3, #24]
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	691b      	ldr	r3, [r3, #16]
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d909      	bls.n	8007802 <USB_EPStartXfer+0xe1a>
        {
          len = ep->maxpacket;
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	691b      	ldr	r3, [r3, #16]
 80077f2:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len -= len;
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	699a      	ldr	r2, [r3, #24]
 80077f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077fa:	1ad2      	subs	r2, r2, r3
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	619a      	str	r2, [r3, #24]
 8007800:	e005      	b.n	800780e <USB_EPStartXfer+0xe26>
        }
        else
        {
          len = ep->xfer_len;
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	699b      	ldr	r3, [r3, #24]
 8007806:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len = 0U;
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	2200      	movs	r2, #0
 800780c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	785b      	ldrb	r3, [r3, #1]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d16a      	bne.n	80078ec <USB_EPStartXfer+0xf04>
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	781b      	ldrb	r3, [r3, #0]
 800781a:	00db      	lsls	r3, r3, #3
 800781c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007820:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007824:	681a      	ldr	r2, [r3, #0]
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	781b      	ldrb	r3, [r3, #0]
 800782a:	00db      	lsls	r3, r3, #3
 800782c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007830:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007834:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8007838:	601a      	str	r2, [r3, #0]
 800783a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800783c:	2b00      	cmp	r3, #0
 800783e:	d112      	bne.n	8007866 <USB_EPStartXfer+0xe7e>
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	00db      	lsls	r3, r3, #3
 8007846:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800784a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800784e:	681a      	ldr	r2, [r3, #0]
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	781b      	ldrb	r3, [r3, #0]
 8007854:	00db      	lsls	r3, r3, #3
 8007856:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800785a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800785e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8007862:	601a      	str	r2, [r3, #0]
 8007864:	e06a      	b.n	800793c <USB_EPStartXfer+0xf54>
 8007866:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007868:	2b3e      	cmp	r3, #62	@ 0x3e
 800786a:	d81e      	bhi.n	80078aa <USB_EPStartXfer+0xec2>
 800786c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800786e:	085b      	lsrs	r3, r3, #1
 8007870:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007872:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007874:	f003 0301 	and.w	r3, r3, #1
 8007878:	2b00      	cmp	r3, #0
 800787a:	d002      	beq.n	8007882 <USB_EPStartXfer+0xe9a>
 800787c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800787e:	3301      	adds	r3, #1
 8007880:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	781b      	ldrb	r3, [r3, #0]
 8007886:	00db      	lsls	r3, r3, #3
 8007888:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800788c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007890:	6819      	ldr	r1, [r3, #0]
 8007892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007894:	069a      	lsls	r2, r3, #26
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	00db      	lsls	r3, r3, #3
 800789c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80078a0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80078a4:	430a      	orrs	r2, r1
 80078a6:	601a      	str	r2, [r3, #0]
 80078a8:	e048      	b.n	800793c <USB_EPStartXfer+0xf54>
 80078aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078ac:	095b      	lsrs	r3, r3, #5
 80078ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80078b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078b2:	f003 031f 	and.w	r3, r3, #31
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d102      	bne.n	80078c0 <USB_EPStartXfer+0xed8>
 80078ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078bc:	3b01      	subs	r3, #1
 80078be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	781b      	ldrb	r3, [r3, #0]
 80078c4:	00db      	lsls	r3, r3, #3
 80078c6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80078ca:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80078ce:	681a      	ldr	r2, [r3, #0]
 80078d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078d2:	069b      	lsls	r3, r3, #26
 80078d4:	431a      	orrs	r2, r3
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	781b      	ldrb	r3, [r3, #0]
 80078da:	00db      	lsls	r3, r3, #3
 80078dc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80078e0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80078e4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80078e8:	601a      	str	r2, [r3, #0]
 80078ea:	e027      	b.n	800793c <USB_EPStartXfer+0xf54>
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	785b      	ldrb	r3, [r3, #1]
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d123      	bne.n	800793c <USB_EPStartXfer+0xf54>
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	00db      	lsls	r3, r3, #3
 80078fa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80078fe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007902:	681a      	ldr	r2, [r3, #0]
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	00db      	lsls	r3, r3, #3
 800790a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800790e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007912:	b292      	uxth	r2, r2
 8007914:	601a      	str	r2, [r3, #0]
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	781b      	ldrb	r3, [r3, #0]
 800791a:	00db      	lsls	r3, r3, #3
 800791c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007920:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007924:	6819      	ldr	r1, [r3, #0]
 8007926:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007928:	041a      	lsls	r2, r3, #16
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	781b      	ldrb	r3, [r3, #0]
 800792e:	00db      	lsls	r3, r3, #3
 8007930:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007934:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007938:	430a      	orrs	r2, r1
 800793a:	601a      	str	r2, [r3, #0]
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	785b      	ldrb	r3, [r3, #1]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d16d      	bne.n	8007a20 <USB_EPStartXfer+0x1038>
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	781b      	ldrb	r3, [r3, #0]
 8007948:	00db      	lsls	r3, r3, #3
 800794a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800794e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007952:	685a      	ldr	r2, [r3, #4]
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	781b      	ldrb	r3, [r3, #0]
 8007958:	00db      	lsls	r3, r3, #3
 800795a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800795e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007962:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8007966:	605a      	str	r2, [r3, #4]
 8007968:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800796a:	2b00      	cmp	r3, #0
 800796c:	d112      	bne.n	8007994 <USB_EPStartXfer+0xfac>
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	781b      	ldrb	r3, [r3, #0]
 8007972:	00db      	lsls	r3, r3, #3
 8007974:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007978:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800797c:	685a      	ldr	r2, [r3, #4]
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	781b      	ldrb	r3, [r3, #0]
 8007982:	00db      	lsls	r3, r3, #3
 8007984:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007988:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800798c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8007990:	605a      	str	r2, [r3, #4]
 8007992:	e070      	b.n	8007a76 <USB_EPStartXfer+0x108e>
 8007994:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007996:	2b3e      	cmp	r3, #62	@ 0x3e
 8007998:	d81e      	bhi.n	80079d8 <USB_EPStartXfer+0xff0>
 800799a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800799c:	085b      	lsrs	r3, r3, #1
 800799e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80079a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80079a2:	f003 0301 	and.w	r3, r3, #1
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d002      	beq.n	80079b0 <USB_EPStartXfer+0xfc8>
 80079aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079ac:	3301      	adds	r3, #1
 80079ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	781b      	ldrb	r3, [r3, #0]
 80079b4:	00db      	lsls	r3, r3, #3
 80079b6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80079ba:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80079be:	6859      	ldr	r1, [r3, #4]
 80079c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079c2:	069a      	lsls	r2, r3, #26
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	781b      	ldrb	r3, [r3, #0]
 80079c8:	00db      	lsls	r3, r3, #3
 80079ca:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80079ce:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80079d2:	430a      	orrs	r2, r1
 80079d4:	605a      	str	r2, [r3, #4]
 80079d6:	e04e      	b.n	8007a76 <USB_EPStartXfer+0x108e>
 80079d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80079da:	095b      	lsrs	r3, r3, #5
 80079dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80079de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80079e0:	f003 031f 	and.w	r3, r3, #31
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d102      	bne.n	80079ee <USB_EPStartXfer+0x1006>
 80079e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079ea:	3b01      	subs	r3, #1
 80079ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	781b      	ldrb	r3, [r3, #0]
 80079f2:	00db      	lsls	r3, r3, #3
 80079f4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80079f8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80079fc:	685a      	ldr	r2, [r3, #4]
 80079fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a00:	069b      	lsls	r3, r3, #26
 8007a02:	431a      	orrs	r2, r3
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	00db      	lsls	r3, r3, #3
 8007a0a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007a0e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007a12:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8007a16:	605a      	str	r2, [r3, #4]
 8007a18:	e02d      	b.n	8007a76 <USB_EPStartXfer+0x108e>
 8007a1a:	bf00      	nop
 8007a1c:	07ff8f8f 	.word	0x07ff8f8f
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	785b      	ldrb	r3, [r3, #1]
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d126      	bne.n	8007a76 <USB_EPStartXfer+0x108e>
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	781b      	ldrb	r3, [r3, #0]
 8007a2c:	00db      	lsls	r3, r3, #3
 8007a2e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007a32:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007a36:	685a      	ldr	r2, [r3, #4]
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	781b      	ldrb	r3, [r3, #0]
 8007a3c:	00db      	lsls	r3, r3, #3
 8007a3e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007a42:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007a46:	b292      	uxth	r2, r2
 8007a48:	605a      	str	r2, [r3, #4]
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	781b      	ldrb	r3, [r3, #0]
 8007a4e:	00db      	lsls	r3, r3, #3
 8007a50:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007a54:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007a58:	6859      	ldr	r1, [r3, #4]
 8007a5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a5c:	041a      	lsls	r2, r3, #16
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	781b      	ldrb	r3, [r3, #0]
 8007a62:	00db      	lsls	r3, r3, #3
 8007a64:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007a68:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007a6c:	430a      	orrs	r2, r1
 8007a6e:	605a      	str	r2, [r3, #4]
 8007a70:	e001      	b.n	8007a76 <USB_EPStartXfer+0x108e>
      }
      else
      {
        return HAL_ERROR;
 8007a72:	2301      	movs	r3, #1
 8007a74:	e01c      	b.n	8007ab0 <USB_EPStartXfer+0x10c8>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007a76:	687a      	ldr	r2, [r7, #4]
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	781b      	ldrb	r3, [r3, #0]
 8007a7c:	009b      	lsls	r3, r3, #2
 8007a7e:	4413      	add	r3, r2
 8007a80:	681a      	ldr	r2, [r3, #0]
 8007a82:	4b0d      	ldr	r3, [pc, #52]	@ (8007ab8 <USB_EPStartXfer+0x10d0>)
 8007a84:	4013      	ands	r3, r2
 8007a86:	61fb      	str	r3, [r7, #28]
 8007a88:	69fb      	ldr	r3, [r7, #28]
 8007a8a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007a8e:	61fb      	str	r3, [r7, #28]
 8007a90:	69fb      	ldr	r3, [r7, #28]
 8007a92:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007a96:	61fb      	str	r3, [r7, #28]
 8007a98:	687a      	ldr	r2, [r7, #4]
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	781b      	ldrb	r3, [r3, #0]
 8007a9e:	009b      	lsls	r3, r3, #2
 8007aa0:	441a      	add	r2, r3
 8007aa2:	69fb      	ldr	r3, [r7, #28]
 8007aa4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007aa8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007aac:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007aae:	2300      	movs	r3, #0
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3758      	adds	r7, #88	@ 0x58
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}
 8007ab8:	07ffbf8f 	.word	0x07ffbf8f

08007abc <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b085      	sub	sp, #20
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	785b      	ldrb	r3, [r3, #1]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d018      	beq.n	8007b00 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	781b      	ldrb	r3, [r3, #0]
 8007ad4:	009b      	lsls	r3, r3, #2
 8007ad6:	4413      	add	r3, r2
 8007ad8:	681a      	ldr	r2, [r3, #0]
 8007ada:	4b19      	ldr	r3, [pc, #100]	@ (8007b40 <USB_EPSetStall+0x84>)
 8007adc:	4013      	ands	r3, r2
 8007ade:	60bb      	str	r3, [r7, #8]
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	f083 0310 	eor.w	r3, r3, #16
 8007ae6:	60bb      	str	r3, [r7, #8]
 8007ae8:	687a      	ldr	r2, [r7, #4]
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	781b      	ldrb	r3, [r3, #0]
 8007aee:	009b      	lsls	r3, r3, #2
 8007af0:	441a      	add	r2, r3
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007af8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007afc:	6013      	str	r3, [r2, #0]
 8007afe:	e017      	b.n	8007b30 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007b00:	687a      	ldr	r2, [r7, #4]
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	781b      	ldrb	r3, [r3, #0]
 8007b06:	009b      	lsls	r3, r3, #2
 8007b08:	4413      	add	r3, r2
 8007b0a:	681a      	ldr	r2, [r3, #0]
 8007b0c:	4b0d      	ldr	r3, [pc, #52]	@ (8007b44 <USB_EPSetStall+0x88>)
 8007b0e:	4013      	ands	r3, r2
 8007b10:	60fb      	str	r3, [r7, #12]
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007b18:	60fb      	str	r3, [r7, #12]
 8007b1a:	687a      	ldr	r2, [r7, #4]
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	781b      	ldrb	r3, [r3, #0]
 8007b20:	009b      	lsls	r3, r3, #2
 8007b22:	441a      	add	r2, r3
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b2e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007b30:	2300      	movs	r3, #0
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3714      	adds	r7, #20
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr
 8007b3e:	bf00      	nop
 8007b40:	07ff8fbf 	.word	0x07ff8fbf
 8007b44:	07ffbf8f 	.word	0x07ffbf8f

08007b48 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b089      	sub	sp, #36	@ 0x24
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	7b1b      	ldrb	r3, [r3, #12]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d17c      	bne.n	8007c54 <USB_EPClearStall+0x10c>
  {
    if (ep->is_in != 0U)
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	785b      	ldrb	r3, [r3, #1]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d03c      	beq.n	8007bdc <USB_EPClearStall+0x94>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	781b      	ldrb	r3, [r3, #0]
 8007b68:	009b      	lsls	r3, r3, #2
 8007b6a:	4413      	add	r3, r2
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	613b      	str	r3, [r7, #16]
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d013      	beq.n	8007ba2 <USB_EPClearStall+0x5a>
 8007b7a:	687a      	ldr	r2, [r7, #4]
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	781b      	ldrb	r3, [r3, #0]
 8007b80:	009b      	lsls	r3, r3, #2
 8007b82:	4413      	add	r3, r2
 8007b84:	681a      	ldr	r2, [r3, #0]
 8007b86:	4b37      	ldr	r3, [pc, #220]	@ (8007c64 <USB_EPClearStall+0x11c>)
 8007b88:	4013      	ands	r3, r2
 8007b8a:	60fb      	str	r3, [r7, #12]
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	009b      	lsls	r3, r3, #2
 8007b94:	441a      	add	r2, r3
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b9c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007ba0:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	78db      	ldrb	r3, [r3, #3]
 8007ba6:	2b01      	cmp	r3, #1
 8007ba8:	d054      	beq.n	8007c54 <USB_EPClearStall+0x10c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007baa:	687a      	ldr	r2, [r7, #4]
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	781b      	ldrb	r3, [r3, #0]
 8007bb0:	009b      	lsls	r3, r3, #2
 8007bb2:	4413      	add	r3, r2
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	4b2c      	ldr	r3, [pc, #176]	@ (8007c68 <USB_EPClearStall+0x120>)
 8007bb8:	4013      	ands	r3, r2
 8007bba:	60bb      	str	r3, [r7, #8]
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	f083 0320 	eor.w	r3, r3, #32
 8007bc2:	60bb      	str	r3, [r7, #8]
 8007bc4:	687a      	ldr	r2, [r7, #4]
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	781b      	ldrb	r3, [r3, #0]
 8007bca:	009b      	lsls	r3, r3, #2
 8007bcc:	441a      	add	r2, r3
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007bd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007bd8:	6013      	str	r3, [r2, #0]
 8007bda:	e03b      	b.n	8007c54 <USB_EPClearStall+0x10c>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007bdc:	687a      	ldr	r2, [r7, #4]
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	009b      	lsls	r3, r3, #2
 8007be4:	4413      	add	r3, r2
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	61fb      	str	r3, [r7, #28]
 8007bea:	69fb      	ldr	r3, [r7, #28]
 8007bec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d013      	beq.n	8007c1c <USB_EPClearStall+0xd4>
 8007bf4:	687a      	ldr	r2, [r7, #4]
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	781b      	ldrb	r3, [r3, #0]
 8007bfa:	009b      	lsls	r3, r3, #2
 8007bfc:	4413      	add	r3, r2
 8007bfe:	681a      	ldr	r2, [r3, #0]
 8007c00:	4b18      	ldr	r3, [pc, #96]	@ (8007c64 <USB_EPClearStall+0x11c>)
 8007c02:	4013      	ands	r3, r2
 8007c04:	61bb      	str	r3, [r7, #24]
 8007c06:	687a      	ldr	r2, [r7, #4]
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	781b      	ldrb	r3, [r3, #0]
 8007c0c:	009b      	lsls	r3, r3, #2
 8007c0e:	441a      	add	r2, r3
 8007c10:	69bb      	ldr	r3, [r7, #24]
 8007c12:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007c16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c1a:	6013      	str	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007c1c:	687a      	ldr	r2, [r7, #4]
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	781b      	ldrb	r3, [r3, #0]
 8007c22:	009b      	lsls	r3, r3, #2
 8007c24:	4413      	add	r3, r2
 8007c26:	681a      	ldr	r2, [r3, #0]
 8007c28:	4b10      	ldr	r3, [pc, #64]	@ (8007c6c <USB_EPClearStall+0x124>)
 8007c2a:	4013      	ands	r3, r2
 8007c2c:	617b      	str	r3, [r7, #20]
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007c34:	617b      	str	r3, [r7, #20]
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007c3c:	617b      	str	r3, [r7, #20]
 8007c3e:	687a      	ldr	r2, [r7, #4]
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	009b      	lsls	r3, r3, #2
 8007c46:	441a      	add	r2, r3
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c52:	6013      	str	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007c54:	2300      	movs	r3, #0
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3724      	adds	r7, #36	@ 0x24
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c60:	4770      	bx	lr
 8007c62:	bf00      	nop
 8007c64:	07ff8f8f 	.word	0x07ff8f8f
 8007c68:	07ff8fbf 	.word	0x07ff8fbf
 8007c6c:	07ffbf8f 	.word	0x07ffbf8f

08007c70 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_DRD_TypeDef *USBx, uint8_t address)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b083      	sub	sp, #12
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	460b      	mov	r3, r1
 8007c7a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007c7c:	78fb      	ldrb	r3, [r7, #3]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d102      	bne.n	8007c88 <USB_SetDevAddress+0x18>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2280      	movs	r2, #128	@ 0x80
 8007c86:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8007c88:	2300      	movs	r3, #0
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	370c      	adds	r7, #12
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c94:	4770      	bx	lr

08007c96 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_DRD_TypeDef *USBx)
{
 8007c96:	b480      	push	{r7}
 8007c98:	b083      	sub	sp, #12
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ca2:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8007caa:	2300      	movs	r3, #0
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	370c      	adds	r7, #12
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr

08007cb8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_DRD_TypeDef const *USBx)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b085      	sub	sp, #20
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cc4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3714      	adds	r7, #20
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd2:	4770      	bx	lr

08007cd4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b08b      	sub	sp, #44	@ 0x2c
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	60f8      	str	r0, [r7, #12]
 8007cdc:	60b9      	str	r1, [r7, #8]
 8007cde:	4611      	mov	r1, r2
 8007ce0:	461a      	mov	r2, r3
 8007ce2:	460b      	mov	r3, r1
 8007ce4:	80fb      	strh	r3, [r7, #6]
 8007ce6:	4613      	mov	r3, r2
 8007ce8:	80bb      	strh	r3, [r7, #4]
  UNUSED(USBx);
  uint32_t WrVal;
  uint32_t count;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 8007cea:	88bb      	ldrh	r3, [r7, #4]
 8007cec:	3303      	adds	r3, #3
 8007cee:	089b      	lsrs	r3, r3, #2
 8007cf0:	61bb      	str	r3, [r7, #24]
  /* Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 8007cf2:	88bb      	ldrh	r3, [r7, #4]
 8007cf4:	f003 0303 	and.w	r3, r3, #3
 8007cf8:	82fb      	strh	r3, [r7, #22]
  uint8_t *pBuf = pbUsrBuf;
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	613b      	str	r3, [r7, #16]

  /* Check if there is a remaining byte */
  if (remaining_bytes != 0U)
 8007cfe:	8afb      	ldrh	r3, [r7, #22]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d002      	beq.n	8007d0a <USB_WritePMA+0x36>
  {
    NbWords--;
 8007d04:	69bb      	ldr	r3, [r7, #24]
 8007d06:	3b01      	subs	r3, #1
 8007d08:	61bb      	str	r3, [r7, #24]
  }

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 8007d0a:	88fb      	ldrh	r3, [r7, #6]
 8007d0c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007d10:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007d14:	61fb      	str	r3, [r7, #28]

  /* Write the Calculated Word into the PMA related Buffer */
  for (count = NbWords; count != 0U; count--)
 8007d16:	69bb      	ldr	r3, [r7, #24]
 8007d18:	623b      	str	r3, [r7, #32]
 8007d1a:	e015      	b.n	8007d48 <USB_WritePMA+0x74>
  {
    *pdwVal = __UNALIGNED_UINT32_READ(pBuf);
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	681a      	ldr	r2, [r3, #0]
 8007d20:	69fb      	ldr	r3, [r7, #28]
 8007d22:	601a      	str	r2, [r3, #0]
    pdwVal++;
 8007d24:	69fb      	ldr	r3, [r7, #28]
 8007d26:	3304      	adds	r3, #4
 8007d28:	61fb      	str	r3, [r7, #28]
    /* Increment pBuf 4 Time as Word Increment */
    pBuf++;
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	3301      	adds	r3, #1
 8007d2e:	613b      	str	r3, [r7, #16]
    pBuf++;
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	3301      	adds	r3, #1
 8007d34:	613b      	str	r3, [r7, #16]
    pBuf++;
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	3301      	adds	r3, #1
 8007d3a:	613b      	str	r3, [r7, #16]
    pBuf++;
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	3301      	adds	r3, #1
 8007d40:	613b      	str	r3, [r7, #16]
  for (count = NbWords; count != 0U; count--)
 8007d42:	6a3b      	ldr	r3, [r7, #32]
 8007d44:	3b01      	subs	r3, #1
 8007d46:	623b      	str	r3, [r7, #32]
 8007d48:	6a3b      	ldr	r3, [r7, #32]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d1e6      	bne.n	8007d1c <USB_WritePMA+0x48>
  }

  /* When Number of data is not word aligned, write the remaining Byte */
  if (remaining_bytes != 0U)
 8007d4e:	8afb      	ldrh	r3, [r7, #22]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d01a      	beq.n	8007d8a <USB_WritePMA+0xb6>
  {
    WrVal = 0U;
 8007d54:	2300      	movs	r3, #0
 8007d56:	627b      	str	r3, [r7, #36]	@ 0x24

    do
    {
      WrVal |= (uint32_t)(*(uint8_t *)pBuf) << (8U * count);
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	781b      	ldrb	r3, [r3, #0]
 8007d5c:	461a      	mov	r2, r3
 8007d5e:	6a3b      	ldr	r3, [r7, #32]
 8007d60:	00db      	lsls	r3, r3, #3
 8007d62:	fa02 f303 	lsl.w	r3, r2, r3
 8007d66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	627b      	str	r3, [r7, #36]	@ 0x24
      count++;
 8007d6c:	6a3b      	ldr	r3, [r7, #32]
 8007d6e:	3301      	adds	r3, #1
 8007d70:	623b      	str	r3, [r7, #32]
      pBuf++;
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	3301      	adds	r3, #1
 8007d76:	613b      	str	r3, [r7, #16]
      remaining_bytes--;
 8007d78:	8afb      	ldrh	r3, [r7, #22]
 8007d7a:	3b01      	subs	r3, #1
 8007d7c:	82fb      	strh	r3, [r7, #22]
    } while (remaining_bytes != 0U);
 8007d7e:	8afb      	ldrh	r3, [r7, #22]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d1e9      	bne.n	8007d58 <USB_WritePMA+0x84>

    *pdwVal = WrVal;
 8007d84:	69fb      	ldr	r3, [r7, #28]
 8007d86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d88:	601a      	str	r2, [r3, #0]
  }
}
 8007d8a:	bf00      	nop
 8007d8c:	372c      	adds	r7, #44	@ 0x2c
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d94:	4770      	bx	lr

08007d96 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007d96:	b480      	push	{r7}
 8007d98:	b08b      	sub	sp, #44	@ 0x2c
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	60f8      	str	r0, [r7, #12]
 8007d9e:	60b9      	str	r1, [r7, #8]
 8007da0:	4611      	mov	r1, r2
 8007da2:	461a      	mov	r2, r3
 8007da4:	460b      	mov	r3, r1
 8007da6:	80fb      	strh	r3, [r7, #6]
 8007da8:	4613      	mov	r3, r2
 8007daa:	80bb      	strh	r3, [r7, #4]
  UNUSED(USBx);
  uint32_t count;
  uint32_t RdVal;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 8007dac:	88bb      	ldrh	r3, [r7, #4]
 8007dae:	3303      	adds	r3, #3
 8007db0:	089b      	lsrs	r3, r3, #2
 8007db2:	61fb      	str	r3, [r7, #28]
  /*Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 8007db4:	88bb      	ldrh	r3, [r7, #4]
 8007db6:	f003 0303 	and.w	r3, r3, #3
 8007dba:	837b      	strh	r3, [r7, #26]
  uint8_t *pBuf = pbUsrBuf;
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	617b      	str	r3, [r7, #20]

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 8007dc0:	88fb      	ldrh	r3, [r7, #6]
 8007dc2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007dc6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007dca:	623b      	str	r3, [r7, #32]

  /* if nbre of byte is not word aligned decrement the nbre of word*/
  if (remaining_bytes != 0U)
 8007dcc:	8b7b      	ldrh	r3, [r7, #26]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d002      	beq.n	8007dd8 <USB_ReadPMA+0x42>
  {
    NbWords--;
 8007dd2:	69fb      	ldr	r3, [r7, #28]
 8007dd4:	3b01      	subs	r3, #1
 8007dd6:	61fb      	str	r3, [r7, #28]
  }

  /*Read the Calculated Word From the PMA related Buffer*/
  for (count = NbWords; count != 0U; count--)
 8007dd8:	69fb      	ldr	r3, [r7, #28]
 8007dda:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ddc:	e015      	b.n	8007e0a <USB_ReadPMA+0x74>
  {
    __UNALIGNED_UINT32_WRITE(pBuf, *pdwVal);
 8007dde:	6a3b      	ldr	r3, [r7, #32]
 8007de0:	681a      	ldr	r2, [r3, #0]
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	601a      	str	r2, [r3, #0]

    pdwVal++;
 8007de6:	6a3b      	ldr	r3, [r7, #32]
 8007de8:	3304      	adds	r3, #4
 8007dea:	623b      	str	r3, [r7, #32]
    pBuf++;
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	3301      	adds	r3, #1
 8007df0:	617b      	str	r3, [r7, #20]
    pBuf++;
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	3301      	adds	r3, #1
 8007df6:	617b      	str	r3, [r7, #20]
    pBuf++;
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	3301      	adds	r3, #1
 8007dfc:	617b      	str	r3, [r7, #20]
    pBuf++;
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	3301      	adds	r3, #1
 8007e02:	617b      	str	r3, [r7, #20]
  for (count = NbWords; count != 0U; count--)
 8007e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e06:	3b01      	subs	r3, #1
 8007e08:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d1e6      	bne.n	8007dde <USB_ReadPMA+0x48>
  }

  /*When Number of data is not word aligned, read the remaining byte*/
  if (remaining_bytes != 0U)
 8007e10:	8b7b      	ldrh	r3, [r7, #26]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d017      	beq.n	8007e46 <USB_ReadPMA+0xb0>
  {
    RdVal = *(__IO uint32_t *)pdwVal;
 8007e16:	6a3b      	ldr	r3, [r7, #32]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	613b      	str	r3, [r7, #16]

    do
    {
      *(uint8_t *)pBuf = (uint8_t)(RdVal >> (8U * (uint8_t)(count)));
 8007e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e1e:	b2db      	uxtb	r3, r3
 8007e20:	00db      	lsls	r3, r3, #3
 8007e22:	693a      	ldr	r2, [r7, #16]
 8007e24:	fa22 f303 	lsr.w	r3, r2, r3
 8007e28:	b2da      	uxtb	r2, r3
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	701a      	strb	r2, [r3, #0]
      count++;
 8007e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e30:	3301      	adds	r3, #1
 8007e32:	627b      	str	r3, [r7, #36]	@ 0x24
      pBuf++;
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	3301      	adds	r3, #1
 8007e38:	617b      	str	r3, [r7, #20]
      remaining_bytes--;
 8007e3a:	8b7b      	ldrh	r3, [r7, #26]
 8007e3c:	3b01      	subs	r3, #1
 8007e3e:	837b      	strh	r3, [r7, #26]
    } while (remaining_bytes != 0U);
 8007e40:	8b7b      	ldrh	r3, [r7, #26]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d1ea      	bne.n	8007e1c <USB_ReadPMA+0x86>
  }
}
 8007e46:	bf00      	nop
 8007e48:	372c      	adds	r7, #44	@ 0x2c
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e50:	4770      	bx	lr
	...

08007e54 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b084      	sub	sp, #16
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	460b      	mov	r3, r1
 8007e5e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007e60:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007e64:	f001 feb6 	bl	8009bd4 <USBD_static_malloc>
 8007e68:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d10a      	bne.n	8007e86 <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007e76:	687a      	ldr	r2, [r7, #4]
 8007e78:	33b0      	adds	r3, #176	@ 0xb0
 8007e7a:	009b      	lsls	r3, r3, #2
 8007e7c:	4413      	add	r3, r2
 8007e7e:	2200      	movs	r2, #0
 8007e80:	605a      	str	r2, [r3, #4]
    return (uint8_t)USBD_EMEM;
 8007e82:	2302      	movs	r3, #2
 8007e84:	e0fd      	b.n	8008082 <USBD_CDC_Init+0x22e>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007e86:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8007e8a:	2100      	movs	r1, #0
 8007e8c:	68f8      	ldr	r0, [r7, #12]
 8007e8e:	f003 fd0c 	bl	800b8aa <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007e98:	687a      	ldr	r2, [r7, #4]
 8007e9a:	33b0      	adds	r3, #176	@ 0xb0
 8007e9c:	009b      	lsls	r3, r3, #2
 8007e9e:	4413      	add	r3, r2
 8007ea0:	68fa      	ldr	r2, [r7, #12]
 8007ea2:	605a      	str	r2, [r3, #4]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007eaa:	687a      	ldr	r2, [r7, #4]
 8007eac:	33b0      	adds	r3, #176	@ 0xb0
 8007eae:	009b      	lsls	r3, r3, #2
 8007eb0:	4413      	add	r3, r2
 8007eb2:	685a      	ldr	r2, [r3, #4]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007ec0:	b2db      	uxtb	r3, r3
 8007ec2:	2202      	movs	r2, #2
 8007ec4:	2180      	movs	r1, #128	@ 0x80
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f002 fb30 	bl	800a52c <USBD_CoreGetEPAdd>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	461a      	mov	r2, r3
 8007ed0:	4b6e      	ldr	r3, [pc, #440]	@ (800808c <USBD_CDC_Init+0x238>)
 8007ed2:	701a      	strb	r2, [r3, #0]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007eda:	b2db      	uxtb	r3, r3
 8007edc:	2202      	movs	r2, #2
 8007ede:	2100      	movs	r1, #0
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f002 fb23 	bl	800a52c <USBD_CoreGetEPAdd>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	461a      	mov	r2, r3
 8007eea:	4b69      	ldr	r3, [pc, #420]	@ (8008090 <USBD_CDC_Init+0x23c>)
 8007eec:	701a      	strb	r2, [r3, #0]
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007ef4:	b2db      	uxtb	r3, r3
 8007ef6:	2203      	movs	r2, #3
 8007ef8:	2180      	movs	r1, #128	@ 0x80
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f002 fb16 	bl	800a52c <USBD_CoreGetEPAdd>
 8007f00:	4603      	mov	r3, r0
 8007f02:	461a      	mov	r2, r3
 8007f04:	4b63      	ldr	r3, [pc, #396]	@ (8008094 <USBD_CDC_Init+0x240>)
 8007f06:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	7c1b      	ldrb	r3, [r3, #16]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d138      	bne.n	8007f82 <USBD_CDC_Init+0x12e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007f10:	4b5e      	ldr	r3, [pc, #376]	@ (800808c <USBD_CDC_Init+0x238>)
 8007f12:	7819      	ldrb	r1, [r3, #0]
 8007f14:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007f18:	2202      	movs	r2, #2
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f001 fd61 	bl	80099e2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007f20:	4b5a      	ldr	r3, [pc, #360]	@ (800808c <USBD_CDC_Init+0x238>)
 8007f22:	781b      	ldrb	r3, [r3, #0]
 8007f24:	f003 020f 	and.w	r2, r3, #15
 8007f28:	6879      	ldr	r1, [r7, #4]
 8007f2a:	4613      	mov	r3, r2
 8007f2c:	009b      	lsls	r3, r3, #2
 8007f2e:	4413      	add	r3, r2
 8007f30:	009b      	lsls	r3, r3, #2
 8007f32:	440b      	add	r3, r1
 8007f34:	3324      	adds	r3, #36	@ 0x24
 8007f36:	2201      	movs	r2, #1
 8007f38:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007f3a:	4b55      	ldr	r3, [pc, #340]	@ (8008090 <USBD_CDC_Init+0x23c>)
 8007f3c:	7819      	ldrb	r1, [r3, #0]
 8007f3e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007f42:	2202      	movs	r2, #2
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f001 fd4c 	bl	80099e2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007f4a:	4b51      	ldr	r3, [pc, #324]	@ (8008090 <USBD_CDC_Init+0x23c>)
 8007f4c:	781b      	ldrb	r3, [r3, #0]
 8007f4e:	f003 020f 	and.w	r2, r3, #15
 8007f52:	6879      	ldr	r1, [r7, #4]
 8007f54:	4613      	mov	r3, r2
 8007f56:	009b      	lsls	r3, r3, #2
 8007f58:	4413      	add	r3, r2
 8007f5a:	009b      	lsls	r3, r3, #2
 8007f5c:	440b      	add	r3, r1
 8007f5e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007f62:	2201      	movs	r2, #1
 8007f64:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007f66:	4b4b      	ldr	r3, [pc, #300]	@ (8008094 <USBD_CDC_Init+0x240>)
 8007f68:	781b      	ldrb	r3, [r3, #0]
 8007f6a:	f003 020f 	and.w	r2, r3, #15
 8007f6e:	6879      	ldr	r1, [r7, #4]
 8007f70:	4613      	mov	r3, r2
 8007f72:	009b      	lsls	r3, r3, #2
 8007f74:	4413      	add	r3, r2
 8007f76:	009b      	lsls	r3, r3, #2
 8007f78:	440b      	add	r3, r1
 8007f7a:	3326      	adds	r3, #38	@ 0x26
 8007f7c:	2210      	movs	r2, #16
 8007f7e:	801a      	strh	r2, [r3, #0]
 8007f80:	e035      	b.n	8007fee <USBD_CDC_Init+0x19a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007f82:	4b42      	ldr	r3, [pc, #264]	@ (800808c <USBD_CDC_Init+0x238>)
 8007f84:	7819      	ldrb	r1, [r3, #0]
 8007f86:	2340      	movs	r3, #64	@ 0x40
 8007f88:	2202      	movs	r2, #2
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f001 fd29 	bl	80099e2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007f90:	4b3e      	ldr	r3, [pc, #248]	@ (800808c <USBD_CDC_Init+0x238>)
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	f003 020f 	and.w	r2, r3, #15
 8007f98:	6879      	ldr	r1, [r7, #4]
 8007f9a:	4613      	mov	r3, r2
 8007f9c:	009b      	lsls	r3, r3, #2
 8007f9e:	4413      	add	r3, r2
 8007fa0:	009b      	lsls	r3, r3, #2
 8007fa2:	440b      	add	r3, r1
 8007fa4:	3324      	adds	r3, #36	@ 0x24
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007faa:	4b39      	ldr	r3, [pc, #228]	@ (8008090 <USBD_CDC_Init+0x23c>)
 8007fac:	7819      	ldrb	r1, [r3, #0]
 8007fae:	2340      	movs	r3, #64	@ 0x40
 8007fb0:	2202      	movs	r2, #2
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f001 fd15 	bl	80099e2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007fb8:	4b35      	ldr	r3, [pc, #212]	@ (8008090 <USBD_CDC_Init+0x23c>)
 8007fba:	781b      	ldrb	r3, [r3, #0]
 8007fbc:	f003 020f 	and.w	r2, r3, #15
 8007fc0:	6879      	ldr	r1, [r7, #4]
 8007fc2:	4613      	mov	r3, r2
 8007fc4:	009b      	lsls	r3, r3, #2
 8007fc6:	4413      	add	r3, r2
 8007fc8:	009b      	lsls	r3, r3, #2
 8007fca:	440b      	add	r3, r1
 8007fcc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007fd0:	2201      	movs	r2, #1
 8007fd2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007fd4:	4b2f      	ldr	r3, [pc, #188]	@ (8008094 <USBD_CDC_Init+0x240>)
 8007fd6:	781b      	ldrb	r3, [r3, #0]
 8007fd8:	f003 020f 	and.w	r2, r3, #15
 8007fdc:	6879      	ldr	r1, [r7, #4]
 8007fde:	4613      	mov	r3, r2
 8007fe0:	009b      	lsls	r3, r3, #2
 8007fe2:	4413      	add	r3, r2
 8007fe4:	009b      	lsls	r3, r3, #2
 8007fe6:	440b      	add	r3, r1
 8007fe8:	3326      	adds	r3, #38	@ 0x26
 8007fea:	2210      	movs	r2, #16
 8007fec:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007fee:	4b29      	ldr	r3, [pc, #164]	@ (8008094 <USBD_CDC_Init+0x240>)
 8007ff0:	7819      	ldrb	r1, [r3, #0]
 8007ff2:	2308      	movs	r3, #8
 8007ff4:	2203      	movs	r2, #3
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f001 fcf3 	bl	80099e2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007ffc:	4b25      	ldr	r3, [pc, #148]	@ (8008094 <USBD_CDC_Init+0x240>)
 8007ffe:	781b      	ldrb	r3, [r3, #0]
 8008000:	f003 020f 	and.w	r2, r3, #15
 8008004:	6879      	ldr	r1, [r7, #4]
 8008006:	4613      	mov	r3, r2
 8008008:	009b      	lsls	r3, r3, #2
 800800a:	4413      	add	r3, r2
 800800c:	009b      	lsls	r3, r3, #2
 800800e:	440b      	add	r3, r1
 8008010:	3324      	adds	r3, #36	@ 0x24
 8008012:	2201      	movs	r2, #1
 8008014:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	2200      	movs	r2, #0
 800801a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008024:	687a      	ldr	r2, [r7, #4]
 8008026:	33b2      	adds	r3, #178	@ 0xb2
 8008028:	009b      	lsls	r3, r3, #2
 800802a:	4413      	add	r3, r2
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2200      	movs	r2, #0
 8008036:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	2200      	movs	r2, #0
 800803e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8008048:	2b00      	cmp	r3, #0
 800804a:	d101      	bne.n	8008050 <USBD_CDC_Init+0x1fc>
  {
    return (uint8_t)USBD_EMEM;
 800804c:	2302      	movs	r3, #2
 800804e:	e018      	b.n	8008082 <USBD_CDC_Init+0x22e>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	7c1b      	ldrb	r3, [r3, #16]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d10a      	bne.n	800806e <USBD_CDC_Init+0x21a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008058:	4b0d      	ldr	r3, [pc, #52]	@ (8008090 <USBD_CDC_Init+0x23c>)
 800805a:	7819      	ldrb	r1, [r3, #0]
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008062:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f001 fd86 	bl	8009b78 <USBD_LL_PrepareReceive>
 800806c:	e008      	b.n	8008080 <USBD_CDC_Init+0x22c>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800806e:	4b08      	ldr	r3, [pc, #32]	@ (8008090 <USBD_CDC_Init+0x23c>)
 8008070:	7819      	ldrb	r1, [r3, #0]
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008078:	2340      	movs	r3, #64	@ 0x40
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f001 fd7c 	bl	8009b78 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008080:	2300      	movs	r3, #0
}
 8008082:	4618      	mov	r0, r3
 8008084:	3710      	adds	r7, #16
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}
 800808a:	bf00      	nop
 800808c:	20000048 	.word	0x20000048
 8008090:	20000049 	.word	0x20000049
 8008094:	2000004a 	.word	0x2000004a

08008098 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b082      	sub	sp, #8
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	460b      	mov	r3, r1
 80080a2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);


#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this CDC class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80080aa:	b2db      	uxtb	r3, r3
 80080ac:	2202      	movs	r2, #2
 80080ae:	2180      	movs	r1, #128	@ 0x80
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f002 fa3b 	bl	800a52c <USBD_CoreGetEPAdd>
 80080b6:	4603      	mov	r3, r0
 80080b8:	461a      	mov	r2, r3
 80080ba:	4b4a      	ldr	r3, [pc, #296]	@ (80081e4 <USBD_CDC_DeInit+0x14c>)
 80080bc:	701a      	strb	r2, [r3, #0]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	2202      	movs	r2, #2
 80080c8:	2100      	movs	r1, #0
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f002 fa2e 	bl	800a52c <USBD_CoreGetEPAdd>
 80080d0:	4603      	mov	r3, r0
 80080d2:	461a      	mov	r2, r3
 80080d4:	4b44      	ldr	r3, [pc, #272]	@ (80081e8 <USBD_CDC_DeInit+0x150>)
 80080d6:	701a      	strb	r2, [r3, #0]
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80080de:	b2db      	uxtb	r3, r3
 80080e0:	2203      	movs	r2, #3
 80080e2:	2180      	movs	r1, #128	@ 0x80
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f002 fa21 	bl	800a52c <USBD_CoreGetEPAdd>
 80080ea:	4603      	mov	r3, r0
 80080ec:	461a      	mov	r2, r3
 80080ee:	4b3f      	ldr	r3, [pc, #252]	@ (80081ec <USBD_CDC_DeInit+0x154>)
 80080f0:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80080f2:	4b3c      	ldr	r3, [pc, #240]	@ (80081e4 <USBD_CDC_DeInit+0x14c>)
 80080f4:	781b      	ldrb	r3, [r3, #0]
 80080f6:	4619      	mov	r1, r3
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f001 fc92 	bl	8009a22 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80080fe:	4b39      	ldr	r3, [pc, #228]	@ (80081e4 <USBD_CDC_DeInit+0x14c>)
 8008100:	781b      	ldrb	r3, [r3, #0]
 8008102:	f003 020f 	and.w	r2, r3, #15
 8008106:	6879      	ldr	r1, [r7, #4]
 8008108:	4613      	mov	r3, r2
 800810a:	009b      	lsls	r3, r3, #2
 800810c:	4413      	add	r3, r2
 800810e:	009b      	lsls	r3, r3, #2
 8008110:	440b      	add	r3, r1
 8008112:	3324      	adds	r3, #36	@ 0x24
 8008114:	2200      	movs	r2, #0
 8008116:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008118:	4b33      	ldr	r3, [pc, #204]	@ (80081e8 <USBD_CDC_DeInit+0x150>)
 800811a:	781b      	ldrb	r3, [r3, #0]
 800811c:	4619      	mov	r1, r3
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f001 fc7f 	bl	8009a22 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008124:	4b30      	ldr	r3, [pc, #192]	@ (80081e8 <USBD_CDC_DeInit+0x150>)
 8008126:	781b      	ldrb	r3, [r3, #0]
 8008128:	f003 020f 	and.w	r2, r3, #15
 800812c:	6879      	ldr	r1, [r7, #4]
 800812e:	4613      	mov	r3, r2
 8008130:	009b      	lsls	r3, r3, #2
 8008132:	4413      	add	r3, r2
 8008134:	009b      	lsls	r3, r3, #2
 8008136:	440b      	add	r3, r1
 8008138:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800813c:	2200      	movs	r2, #0
 800813e:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008140:	4b2a      	ldr	r3, [pc, #168]	@ (80081ec <USBD_CDC_DeInit+0x154>)
 8008142:	781b      	ldrb	r3, [r3, #0]
 8008144:	4619      	mov	r1, r3
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f001 fc6b 	bl	8009a22 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800814c:	4b27      	ldr	r3, [pc, #156]	@ (80081ec <USBD_CDC_DeInit+0x154>)
 800814e:	781b      	ldrb	r3, [r3, #0]
 8008150:	f003 020f 	and.w	r2, r3, #15
 8008154:	6879      	ldr	r1, [r7, #4]
 8008156:	4613      	mov	r3, r2
 8008158:	009b      	lsls	r3, r3, #2
 800815a:	4413      	add	r3, r2
 800815c:	009b      	lsls	r3, r3, #2
 800815e:	440b      	add	r3, r1
 8008160:	3324      	adds	r3, #36	@ 0x24
 8008162:	2200      	movs	r2, #0
 8008164:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008166:	4b21      	ldr	r3, [pc, #132]	@ (80081ec <USBD_CDC_DeInit+0x154>)
 8008168:	781b      	ldrb	r3, [r3, #0]
 800816a:	f003 020f 	and.w	r2, r3, #15
 800816e:	6879      	ldr	r1, [r7, #4]
 8008170:	4613      	mov	r3, r2
 8008172:	009b      	lsls	r3, r3, #2
 8008174:	4413      	add	r3, r2
 8008176:	009b      	lsls	r3, r3, #2
 8008178:	440b      	add	r3, r1
 800817a:	3326      	adds	r3, #38	@ 0x26
 800817c:	2200      	movs	r2, #0
 800817e:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008186:	687a      	ldr	r2, [r7, #4]
 8008188:	33b0      	adds	r3, #176	@ 0xb0
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	4413      	add	r3, r2
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d021      	beq.n	80081d8 <USBD_CDC_DeInit+0x140>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800819a:	687a      	ldr	r2, [r7, #4]
 800819c:	33b2      	adds	r3, #178	@ 0xb2
 800819e:	009b      	lsls	r3, r3, #2
 80081a0:	4413      	add	r3, r2
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	685b      	ldr	r3, [r3, #4]
 80081a6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80081ae:	687a      	ldr	r2, [r7, #4]
 80081b0:	33b0      	adds	r3, #176	@ 0xb0
 80081b2:	009b      	lsls	r3, r3, #2
 80081b4:	4413      	add	r3, r2
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	4618      	mov	r0, r3
 80081ba:	f001 fd19 	bl	8009bf0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80081c4:	687a      	ldr	r2, [r7, #4]
 80081c6:	33b0      	adds	r3, #176	@ 0xb0
 80081c8:	009b      	lsls	r3, r3, #2
 80081ca:	4413      	add	r3, r2
 80081cc:	2200      	movs	r2, #0
 80081ce:	605a      	str	r2, [r3, #4]
    pdev->pClassData = NULL;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2200      	movs	r2, #0
 80081d4:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  }

  return (uint8_t)USBD_OK;
 80081d8:	2300      	movs	r3, #0
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3708      	adds	r7, #8
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}
 80081e2:	bf00      	nop
 80081e4:	20000048 	.word	0x20000048
 80081e8:	20000049 	.word	0x20000049
 80081ec:	2000004a 	.word	0x2000004a

080081f0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b086      	sub	sp, #24
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
 80081f8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008200:	687a      	ldr	r2, [r7, #4]
 8008202:	33b0      	adds	r3, #176	@ 0xb0
 8008204:	009b      	lsls	r3, r3, #2
 8008206:	4413      	add	r3, r2
 8008208:	685b      	ldr	r3, [r3, #4]
 800820a:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800820c:	2300      	movs	r3, #0
 800820e:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008210:	2300      	movs	r3, #0
 8008212:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008214:	2300      	movs	r3, #0
 8008216:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d101      	bne.n	8008222 <USBD_CDC_Setup+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800821e:	2303      	movs	r3, #3
 8008220:	e0c0      	b.n	80083a4 <USBD_CDC_Setup+0x1b4>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	781b      	ldrb	r3, [r3, #0]
 8008226:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800822a:	2b00      	cmp	r3, #0
 800822c:	d050      	beq.n	80082d0 <USBD_CDC_Setup+0xe0>
 800822e:	2b20      	cmp	r3, #32
 8008230:	f040 80b0 	bne.w	8008394 <USBD_CDC_Setup+0x1a4>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	88db      	ldrh	r3, [r3, #6]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d03a      	beq.n	80082b2 <USBD_CDC_Setup+0xc2>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	781b      	ldrb	r3, [r3, #0]
 8008240:	b25b      	sxtb	r3, r3
 8008242:	2b00      	cmp	r3, #0
 8008244:	da1b      	bge.n	800827e <USBD_CDC_Setup+0x8e>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800824c:	687a      	ldr	r2, [r7, #4]
 800824e:	33b2      	adds	r3, #178	@ 0xb2
 8008250:	009b      	lsls	r3, r3, #2
 8008252:	4413      	add	r3, r2
 8008254:	685b      	ldr	r3, [r3, #4]
 8008256:	689b      	ldr	r3, [r3, #8]
 8008258:	683a      	ldr	r2, [r7, #0]
 800825a:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800825c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800825e:	683a      	ldr	r2, [r7, #0]
 8008260:	88d2      	ldrh	r2, [r2, #6]
 8008262:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	88db      	ldrh	r3, [r3, #6]
 8008268:	2b07      	cmp	r3, #7
 800826a:	bf28      	it	cs
 800826c:	2307      	movcs	r3, #7
 800826e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	89fa      	ldrh	r2, [r7, #14]
 8008274:	4619      	mov	r1, r3
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f003 f957 	bl	800b52a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800827c:	e091      	b.n	80083a2 <USBD_CDC_Setup+0x1b2>
          hcdc->CmdOpCode = req->bRequest;
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	785a      	ldrb	r2, [r3, #1]
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	88db      	ldrh	r3, [r3, #6]
 800828c:	2b3f      	cmp	r3, #63	@ 0x3f
 800828e:	d803      	bhi.n	8008298 <USBD_CDC_Setup+0xa8>
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	88db      	ldrh	r3, [r3, #6]
 8008294:	b2da      	uxtb	r2, r3
 8008296:	e000      	b.n	800829a <USBD_CDC_Setup+0xaa>
 8008298:	2240      	movs	r2, #64	@ 0x40
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80082a0:	6939      	ldr	r1, [r7, #16]
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80082a8:	461a      	mov	r2, r3
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f003 f969 	bl	800b582 <USBD_CtlPrepareRx>
      break;
 80082b0:	e077      	b.n	80083a2 <USBD_CDC_Setup+0x1b2>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80082b8:	687a      	ldr	r2, [r7, #4]
 80082ba:	33b2      	adds	r3, #178	@ 0xb2
 80082bc:	009b      	lsls	r3, r3, #2
 80082be:	4413      	add	r3, r2
 80082c0:	685b      	ldr	r3, [r3, #4]
 80082c2:	689b      	ldr	r3, [r3, #8]
 80082c4:	683a      	ldr	r2, [r7, #0]
 80082c6:	7850      	ldrb	r0, [r2, #1]
 80082c8:	2200      	movs	r2, #0
 80082ca:	6839      	ldr	r1, [r7, #0]
 80082cc:	4798      	blx	r3
      break;
 80082ce:	e068      	b.n	80083a2 <USBD_CDC_Setup+0x1b2>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	785b      	ldrb	r3, [r3, #1]
 80082d4:	2b0b      	cmp	r3, #11
 80082d6:	d852      	bhi.n	800837e <USBD_CDC_Setup+0x18e>
 80082d8:	a201      	add	r2, pc, #4	@ (adr r2, 80082e0 <USBD_CDC_Setup+0xf0>)
 80082da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082de:	bf00      	nop
 80082e0:	08008311 	.word	0x08008311
 80082e4:	0800838d 	.word	0x0800838d
 80082e8:	0800837f 	.word	0x0800837f
 80082ec:	0800837f 	.word	0x0800837f
 80082f0:	0800837f 	.word	0x0800837f
 80082f4:	0800837f 	.word	0x0800837f
 80082f8:	0800837f 	.word	0x0800837f
 80082fc:	0800837f 	.word	0x0800837f
 8008300:	0800837f 	.word	0x0800837f
 8008304:	0800837f 	.word	0x0800837f
 8008308:	0800833b 	.word	0x0800833b
 800830c:	08008365 	.word	0x08008365
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008316:	b2db      	uxtb	r3, r3
 8008318:	2b03      	cmp	r3, #3
 800831a:	d107      	bne.n	800832c <USBD_CDC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800831c:	f107 030a 	add.w	r3, r7, #10
 8008320:	2202      	movs	r2, #2
 8008322:	4619      	mov	r1, r3
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f003 f900 	bl	800b52a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800832a:	e032      	b.n	8008392 <USBD_CDC_Setup+0x1a2>
            USBD_CtlError(pdev, req);
 800832c:	6839      	ldr	r1, [r7, #0]
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f002 ff7b 	bl	800b22a <USBD_CtlError>
            ret = USBD_FAIL;
 8008334:	2303      	movs	r3, #3
 8008336:	75fb      	strb	r3, [r7, #23]
          break;
 8008338:	e02b      	b.n	8008392 <USBD_CDC_Setup+0x1a2>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008340:	b2db      	uxtb	r3, r3
 8008342:	2b03      	cmp	r3, #3
 8008344:	d107      	bne.n	8008356 <USBD_CDC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008346:	f107 030d 	add.w	r3, r7, #13
 800834a:	2201      	movs	r2, #1
 800834c:	4619      	mov	r1, r3
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f003 f8eb 	bl	800b52a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008354:	e01d      	b.n	8008392 <USBD_CDC_Setup+0x1a2>
            USBD_CtlError(pdev, req);
 8008356:	6839      	ldr	r1, [r7, #0]
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f002 ff66 	bl	800b22a <USBD_CtlError>
            ret = USBD_FAIL;
 800835e:	2303      	movs	r3, #3
 8008360:	75fb      	strb	r3, [r7, #23]
          break;
 8008362:	e016      	b.n	8008392 <USBD_CDC_Setup+0x1a2>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800836a:	b2db      	uxtb	r3, r3
 800836c:	2b03      	cmp	r3, #3
 800836e:	d00f      	beq.n	8008390 <USBD_CDC_Setup+0x1a0>
          {
            USBD_CtlError(pdev, req);
 8008370:	6839      	ldr	r1, [r7, #0]
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f002 ff59 	bl	800b22a <USBD_CtlError>
            ret = USBD_FAIL;
 8008378:	2303      	movs	r3, #3
 800837a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800837c:	e008      	b.n	8008390 <USBD_CDC_Setup+0x1a0>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800837e:	6839      	ldr	r1, [r7, #0]
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f002 ff52 	bl	800b22a <USBD_CtlError>
          ret = USBD_FAIL;
 8008386:	2303      	movs	r3, #3
 8008388:	75fb      	strb	r3, [r7, #23]
          break;
 800838a:	e002      	b.n	8008392 <USBD_CDC_Setup+0x1a2>
          break;
 800838c:	bf00      	nop
 800838e:	e008      	b.n	80083a2 <USBD_CDC_Setup+0x1b2>
          break;
 8008390:	bf00      	nop
      }
      break;
 8008392:	e006      	b.n	80083a2 <USBD_CDC_Setup+0x1b2>

    default:
      USBD_CtlError(pdev, req);
 8008394:	6839      	ldr	r1, [r7, #0]
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f002 ff47 	bl	800b22a <USBD_CtlError>
      ret = USBD_FAIL;
 800839c:	2303      	movs	r3, #3
 800839e:	75fb      	strb	r3, [r7, #23]
      break;
 80083a0:	bf00      	nop
  }

  return (uint8_t)ret;
 80083a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3718      	adds	r7, #24
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}

080083ac <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b084      	sub	sp, #16
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	460b      	mov	r3, r1
 80083b6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80083be:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80083c6:	687a      	ldr	r2, [r7, #4]
 80083c8:	33b0      	adds	r3, #176	@ 0xb0
 80083ca:	009b      	lsls	r3, r3, #2
 80083cc:	4413      	add	r3, r2
 80083ce:	685b      	ldr	r3, [r3, #4]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d101      	bne.n	80083d8 <USBD_CDC_DataIn+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 80083d4:	2303      	movs	r3, #3
 80083d6:	e066      	b.n	80084a6 <USBD_CDC_DataIn+0xfa>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80083de:	687a      	ldr	r2, [r7, #4]
 80083e0:	33b0      	adds	r3, #176	@ 0xb0
 80083e2:	009b      	lsls	r3, r3, #2
 80083e4:	4413      	add	r3, r2
 80083e6:	685b      	ldr	r3, [r3, #4]
 80083e8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80083ea:	78fb      	ldrb	r3, [r7, #3]
 80083ec:	f003 020f 	and.w	r2, r3, #15
 80083f0:	6879      	ldr	r1, [r7, #4]
 80083f2:	4613      	mov	r3, r2
 80083f4:	009b      	lsls	r3, r3, #2
 80083f6:	4413      	add	r3, r2
 80083f8:	009b      	lsls	r3, r3, #2
 80083fa:	440b      	add	r3, r1
 80083fc:	3318      	adds	r3, #24
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d02f      	beq.n	8008464 <USBD_CDC_DataIn+0xb8>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008404:	78fb      	ldrb	r3, [r7, #3]
 8008406:	f003 020f 	and.w	r2, r3, #15
 800840a:	6879      	ldr	r1, [r7, #4]
 800840c:	4613      	mov	r3, r2
 800840e:	009b      	lsls	r3, r3, #2
 8008410:	4413      	add	r3, r2
 8008412:	009b      	lsls	r3, r3, #2
 8008414:	440b      	add	r3, r1
 8008416:	3318      	adds	r3, #24
 8008418:	681a      	ldr	r2, [r3, #0]
 800841a:	78fb      	ldrb	r3, [r7, #3]
 800841c:	f003 010f 	and.w	r1, r3, #15
 8008420:	68f8      	ldr	r0, [r7, #12]
 8008422:	460b      	mov	r3, r1
 8008424:	009b      	lsls	r3, r3, #2
 8008426:	440b      	add	r3, r1
 8008428:	00db      	lsls	r3, r3, #3
 800842a:	4403      	add	r3, r0
 800842c:	3324      	adds	r3, #36	@ 0x24
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	fbb2 f1f3 	udiv	r1, r2, r3
 8008434:	fb01 f303 	mul.w	r3, r1, r3
 8008438:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800843a:	2b00      	cmp	r3, #0
 800843c:	d112      	bne.n	8008464 <USBD_CDC_DataIn+0xb8>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800843e:	78fb      	ldrb	r3, [r7, #3]
 8008440:	f003 020f 	and.w	r2, r3, #15
 8008444:	6879      	ldr	r1, [r7, #4]
 8008446:	4613      	mov	r3, r2
 8008448:	009b      	lsls	r3, r3, #2
 800844a:	4413      	add	r3, r2
 800844c:	009b      	lsls	r3, r3, #2
 800844e:	440b      	add	r3, r1
 8008450:	3318      	adds	r3, #24
 8008452:	2200      	movs	r2, #0
 8008454:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008456:	78f9      	ldrb	r1, [r7, #3]
 8008458:	2300      	movs	r3, #0
 800845a:	2200      	movs	r2, #0
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f001 fb70 	bl	8009b42 <USBD_LL_Transmit>
 8008462:	e01f      	b.n	80084a4 <USBD_CDC_DataIn+0xf8>
  }
  else
  {
    hcdc->TxState = 0U;
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	2200      	movs	r2, #0
 8008468:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008472:	687a      	ldr	r2, [r7, #4]
 8008474:	33b2      	adds	r3, #178	@ 0xb2
 8008476:	009b      	lsls	r3, r3, #2
 8008478:	4413      	add	r3, r2
 800847a:	685b      	ldr	r3, [r3, #4]
 800847c:	691b      	ldr	r3, [r3, #16]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d010      	beq.n	80084a4 <USBD_CDC_DataIn+0xf8>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008488:	687a      	ldr	r2, [r7, #4]
 800848a:	33b2      	adds	r3, #178	@ 0xb2
 800848c:	009b      	lsls	r3, r3, #2
 800848e:	4413      	add	r3, r2
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	691b      	ldr	r3, [r3, #16]
 8008494:	68ba      	ldr	r2, [r7, #8]
 8008496:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800849a:	68ba      	ldr	r2, [r7, #8]
 800849c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80084a0:	78fa      	ldrb	r2, [r7, #3]
 80084a2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80084a4:	2300      	movs	r3, #0
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3710      	adds	r7, #16
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}

080084ae <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80084ae:	b580      	push	{r7, lr}
 80084b0:	b084      	sub	sp, #16
 80084b2:	af00      	add	r7, sp, #0
 80084b4:	6078      	str	r0, [r7, #4]
 80084b6:	460b      	mov	r3, r1
 80084b8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80084c0:	687a      	ldr	r2, [r7, #4]
 80084c2:	33b0      	adds	r3, #176	@ 0xb0
 80084c4:	009b      	lsls	r3, r3, #2
 80084c6:	4413      	add	r3, r2
 80084c8:	685b      	ldr	r3, [r3, #4]
 80084ca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80084d2:	687a      	ldr	r2, [r7, #4]
 80084d4:	33b0      	adds	r3, #176	@ 0xb0
 80084d6:	009b      	lsls	r3, r3, #2
 80084d8:	4413      	add	r3, r2
 80084da:	685b      	ldr	r3, [r3, #4]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d101      	bne.n	80084e4 <USBD_CDC_DataOut+0x36>
  {
    return (uint8_t)USBD_FAIL;
 80084e0:	2303      	movs	r3, #3
 80084e2:	e01a      	b.n	800851a <USBD_CDC_DataOut+0x6c>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80084e4:	78fb      	ldrb	r3, [r7, #3]
 80084e6:	4619      	mov	r1, r3
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f001 fb60 	bl	8009bae <USBD_LL_GetRxDataSize>
 80084ee:	4602      	mov	r2, r0
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80084fc:	687a      	ldr	r2, [r7, #4]
 80084fe:	33b2      	adds	r3, #178	@ 0xb2
 8008500:	009b      	lsls	r3, r3, #2
 8008502:	4413      	add	r3, r2
 8008504:	685b      	ldr	r3, [r3, #4]
 8008506:	68db      	ldr	r3, [r3, #12]
 8008508:	68fa      	ldr	r2, [r7, #12]
 800850a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800850e:	68fa      	ldr	r2, [r7, #12]
 8008510:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008514:	4611      	mov	r1, r2
 8008516:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008518:	2300      	movs	r3, #0
}
 800851a:	4618      	mov	r0, r3
 800851c:	3710      	adds	r7, #16
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}

08008522 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008522:	b580      	push	{r7, lr}
 8008524:	b084      	sub	sp, #16
 8008526:	af00      	add	r7, sp, #0
 8008528:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008530:	687a      	ldr	r2, [r7, #4]
 8008532:	33b0      	adds	r3, #176	@ 0xb0
 8008534:	009b      	lsls	r3, r3, #2
 8008536:	4413      	add	r3, r2
 8008538:	685b      	ldr	r3, [r3, #4]
 800853a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d101      	bne.n	8008546 <USBD_CDC_EP0_RxReady+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008542:	2303      	movs	r3, #3
 8008544:	e024      	b.n	8008590 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800854c:	687a      	ldr	r2, [r7, #4]
 800854e:	33b2      	adds	r3, #178	@ 0xb2
 8008550:	009b      	lsls	r3, r3, #2
 8008552:	4413      	add	r3, r2
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d019      	beq.n	800858e <USBD_CDC_EP0_RxReady+0x6c>
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008560:	2bff      	cmp	r3, #255	@ 0xff
 8008562:	d014      	beq.n	800858e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800856a:	687a      	ldr	r2, [r7, #4]
 800856c:	33b2      	adds	r3, #178	@ 0xb2
 800856e:	009b      	lsls	r3, r3, #2
 8008570:	4413      	add	r3, r2
 8008572:	685b      	ldr	r3, [r3, #4]
 8008574:	689b      	ldr	r3, [r3, #8]
 8008576:	68fa      	ldr	r2, [r7, #12]
 8008578:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800857c:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800857e:	68fa      	ldr	r2, [r7, #12]
 8008580:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008584:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	22ff      	movs	r2, #255	@ 0xff
 800858a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800858e:	2300      	movs	r3, #0
}
 8008590:	4618      	mov	r0, r3
 8008592:	3710      	adds	r7, #16
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}

08008598 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008598:	b480      	push	{r7}
 800859a:	b083      	sub	sp, #12
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d101      	bne.n	80085ac <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80085a8:	2303      	movs	r3, #3
 80085aa:	e009      	b.n	80085c0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80085b2:	687a      	ldr	r2, [r7, #4]
 80085b4:	33b2      	adds	r3, #178	@ 0xb2
 80085b6:	009b      	lsls	r3, r3, #2
 80085b8:	4413      	add	r3, r2
 80085ba:	683a      	ldr	r2, [r7, #0]
 80085bc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80085be:	2300      	movs	r3, #0
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	370c      	adds	r7, #12
 80085c4:	46bd      	mov	sp, r7
 80085c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ca:	4770      	bx	lr

080085cc <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
#ifdef USE_USBD_COMPOSITE
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length, uint8_t ClassId)
{
 80085cc:	b480      	push	{r7}
 80085ce:	b087      	sub	sp, #28
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	60f8      	str	r0, [r7, #12]
 80085d4:	60b9      	str	r1, [r7, #8]
 80085d6:	607a      	str	r2, [r7, #4]
 80085d8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
 80085da:	78fb      	ldrb	r3, [r7, #3]
 80085dc:	68fa      	ldr	r2, [r7, #12]
 80085de:	33b0      	adds	r3, #176	@ 0xb0
 80085e0:	009b      	lsls	r3, r3, #2
 80085e2:	4413      	add	r3, r2
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	617b      	str	r3, [r7, #20]
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d101      	bne.n	80085f2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80085ee:	2303      	movs	r3, #3
 80085f0:	e008      	b.n	8008604 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	68ba      	ldr	r2, [r7, #8]
 80085f6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	687a      	ldr	r2, [r7, #4]
 80085fe:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8008602:	2300      	movs	r3, #0
}
 8008604:	4618      	mov	r0, r3
 8008606:	371c      	adds	r7, #28
 8008608:	46bd      	mov	sp, r7
 800860a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860e:	4770      	bx	lr

08008610 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008610:	b480      	push	{r7}
 8008612:	b085      	sub	sp, #20
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
 8008618:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008620:	687a      	ldr	r2, [r7, #4]
 8008622:	33b0      	adds	r3, #176	@ 0xb0
 8008624:	009b      	lsls	r3, r3, #2
 8008626:	4413      	add	r3, r2
 8008628:	685b      	ldr	r3, [r3, #4]
 800862a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d101      	bne.n	8008636 <USBD_CDC_SetRxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008632:	2303      	movs	r3, #3
 8008634:	e004      	b.n	8008640 <USBD_CDC_SetRxBuffer+0x30>
  }

  hcdc->RxBuffer = pbuff;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	683a      	ldr	r2, [r7, #0]
 800863a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800863e:	2300      	movs	r3, #0
}
 8008640:	4618      	mov	r0, r3
 8008642:	3714      	adds	r7, #20
 8008644:	46bd      	mov	sp, r7
 8008646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864a:	4770      	bx	lr

0800864c <USBD_CDC_TransmitPacket>:
  * @param  ClassId: The Class ID
  * @retval status
  */
#ifdef USE_USBD_COMPOSITE
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b084      	sub	sp, #16
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
 8008654:	460b      	mov	r3, r1
 8008656:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
 8008658:	78fb      	ldrb	r3, [r7, #3]
 800865a:	687a      	ldr	r2, [r7, #4]
 800865c:	33b0      	adds	r3, #176	@ 0xb0
 800865e:	009b      	lsls	r3, r3, #2
 8008660:	4413      	add	r3, r2
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	60bb      	str	r3, [r7, #8]
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8008666:	2301      	movs	r3, #1
 8008668:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
 800866a:	78fb      	ldrb	r3, [r7, #3]
 800866c:	2202      	movs	r2, #2
 800866e:	2180      	movs	r1, #128	@ 0x80
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f001 ff5b 	bl	800a52c <USBD_CoreGetEPAdd>
 8008676:	4603      	mov	r3, r0
 8008678:	461a      	mov	r2, r3
 800867a:	4b18      	ldr	r3, [pc, #96]	@ (80086dc <USBD_CDC_TransmitPacket+0x90>)
 800867c:	701a      	strb	r2, [r3, #0]
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d101      	bne.n	8008688 <USBD_CDC_TransmitPacket+0x3c>
  {
    return (uint8_t)USBD_FAIL;
 8008684:	2303      	movs	r3, #3
 8008686:	e025      	b.n	80086d4 <USBD_CDC_TransmitPacket+0x88>
  }

  if (hcdc->TxState == 0U)
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800868e:	2b00      	cmp	r3, #0
 8008690:	d11f      	bne.n	80086d2 <USBD_CDC_TransmitPacket+0x86>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	2201      	movs	r2, #1
 8008696:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800869a:	4b10      	ldr	r3, [pc, #64]	@ (80086dc <USBD_CDC_TransmitPacket+0x90>)
 800869c:	781b      	ldrb	r3, [r3, #0]
 800869e:	f003 020f 	and.w	r2, r3, #15
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	4613      	mov	r3, r2
 80086ac:	009b      	lsls	r3, r3, #2
 80086ae:	4413      	add	r3, r2
 80086b0:	009b      	lsls	r3, r3, #2
 80086b2:	4403      	add	r3, r0
 80086b4:	3318      	adds	r3, #24
 80086b6:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80086b8:	4b08      	ldr	r3, [pc, #32]	@ (80086dc <USBD_CDC_TransmitPacket+0x90>)
 80086ba:	7819      	ldrb	r1, [r3, #0]
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f001 fa3a 	bl	8009b42 <USBD_LL_Transmit>

    ret = USBD_OK;
 80086ce:	2300      	movs	r3, #0
 80086d0:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80086d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	3710      	adds	r7, #16
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}
 80086dc:	20000048 	.word	0x20000048

080086e0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b084      	sub	sp, #16
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80086ee:	687a      	ldr	r2, [r7, #4]
 80086f0:	33b0      	adds	r3, #176	@ 0xb0
 80086f2:	009b      	lsls	r3, r3, #2
 80086f4:	4413      	add	r3, r2
 80086f6:	685b      	ldr	r3, [r3, #4]
 80086f8:	60fb      	str	r3, [r7, #12]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008700:	b2db      	uxtb	r3, r3
 8008702:	2202      	movs	r2, #2
 8008704:	2100      	movs	r1, #0
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f001 ff10 	bl	800a52c <USBD_CoreGetEPAdd>
 800870c:	4603      	mov	r3, r0
 800870e:	461a      	mov	r2, r3
 8008710:	4b15      	ldr	r3, [pc, #84]	@ (8008768 <USBD_CDC_ReceivePacket+0x88>)
 8008712:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800871a:	687a      	ldr	r2, [r7, #4]
 800871c:	33b0      	adds	r3, #176	@ 0xb0
 800871e:	009b      	lsls	r3, r3, #2
 8008720:	4413      	add	r3, r2
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d101      	bne.n	800872c <USBD_CDC_ReceivePacket+0x4c>
  {
    return (uint8_t)USBD_FAIL;
 8008728:	2303      	movs	r3, #3
 800872a:	e018      	b.n	800875e <USBD_CDC_ReceivePacket+0x7e>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	7c1b      	ldrb	r3, [r3, #16]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d10a      	bne.n	800874a <USBD_CDC_ReceivePacket+0x6a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008734:	4b0c      	ldr	r3, [pc, #48]	@ (8008768 <USBD_CDC_ReceivePacket+0x88>)
 8008736:	7819      	ldrb	r1, [r3, #0]
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800873e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f001 fa18 	bl	8009b78 <USBD_LL_PrepareReceive>
 8008748:	e008      	b.n	800875c <USBD_CDC_ReceivePacket+0x7c>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800874a:	4b07      	ldr	r3, [pc, #28]	@ (8008768 <USBD_CDC_ReceivePacket+0x88>)
 800874c:	7819      	ldrb	r1, [r3, #0]
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008754:	2340      	movs	r3, #64	@ 0x40
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f001 fa0e 	bl	8009b78 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800875c:	2300      	movs	r3, #0
}
 800875e:	4618      	mov	r0, r3
 8008760:	3710      	adds	r7, #16
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}
 8008766:	bf00      	nop
 8008768:	20000049 	.word	0x20000049

0800876c <TEMPLATE_Init>:
  *         Initializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Init(void)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	af00      	add	r7, sp, #0
	hUsbDeviceFS.classId = CDC_InstID;
 8008770:	4b0a      	ldr	r3, [pc, #40]	@ (800879c <TEMPLATE_Init+0x30>)
 8008772:	781b      	ldrb	r3, [r3, #0]
 8008774:	461a      	mov	r2, r3
 8008776:	4b0a      	ldr	r3, [pc, #40]	@ (80087a0 <TEMPLATE_Init+0x34>)
 8008778:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, buffer, sizeof(buffer), CDC_InstID);
 800877c:	4b07      	ldr	r3, [pc, #28]	@ (800879c <TEMPLATE_Init+0x30>)
 800877e:	781b      	ldrb	r3, [r3, #0]
 8008780:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008784:	4907      	ldr	r1, [pc, #28]	@ (80087a4 <TEMPLATE_Init+0x38>)
 8008786:	4806      	ldr	r0, [pc, #24]	@ (80087a0 <TEMPLATE_Init+0x34>)
 8008788:	f7ff ff20 	bl	80085cc <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBuffer);
 800878c:	4906      	ldr	r1, [pc, #24]	@ (80087a8 <TEMPLATE_Init+0x3c>)
 800878e:	4804      	ldr	r0, [pc, #16]	@ (80087a0 <TEMPLATE_Init+0x34>)
 8008790:	f7ff ff3e 	bl	8008610 <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 8008794:	2300      	movs	r3, #0
}
 8008796:	4618      	mov	r0, r3
 8008798:	bd80      	pop	{r7, pc}
 800879a:	bf00      	nop
 800879c:	20000841 	.word	0x20000841
 80087a0:	20000500 	.word	0x20000500
 80087a4:	2000089c 	.word	0x2000089c
 80087a8:	200009a8 	.word	0x200009a8

080087ac <TEMPLATE_DeInit>:
  *         DeInitializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_DeInit(void)
{
 80087ac:	b480      	push	{r7}
 80087ae:	af00      	add	r7, sp, #0
  /*
     Add your deinitialization code here
  */
  return (0);
 80087b0:	2300      	movs	r3, #0
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	46bd      	mov	sp, r7
 80087b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ba:	4770      	bx	lr

080087bc <TEMPLATE_Control>:
  * @param  Buf: Buffer containing command data (request parameters)
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Control(uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 80087bc:	b480      	push	{r7}
 80087be:	b083      	sub	sp, #12
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	4603      	mov	r3, r0
 80087c4:	6039      	str	r1, [r7, #0]
 80087c6:	71fb      	strb	r3, [r7, #7]
 80087c8:	4613      	mov	r3, r2
 80087ca:	80bb      	strh	r3, [r7, #4]
  UNUSED(length);

  switch (cmd)
 80087cc:	79fb      	ldrb	r3, [r7, #7]
 80087ce:	2b23      	cmp	r3, #35	@ 0x23
 80087d0:	f200 8098 	bhi.w	8008904 <TEMPLATE_Control+0x148>
 80087d4:	a201      	add	r2, pc, #4	@ (adr r2, 80087dc <TEMPLATE_Control+0x20>)
 80087d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087da:	bf00      	nop
 80087dc:	08008905 	.word	0x08008905
 80087e0:	08008905 	.word	0x08008905
 80087e4:	08008905 	.word	0x08008905
 80087e8:	08008905 	.word	0x08008905
 80087ec:	08008905 	.word	0x08008905
 80087f0:	08008905 	.word	0x08008905
 80087f4:	08008905 	.word	0x08008905
 80087f8:	08008905 	.word	0x08008905
 80087fc:	08008905 	.word	0x08008905
 8008800:	08008905 	.word	0x08008905
 8008804:	08008905 	.word	0x08008905
 8008808:	08008905 	.word	0x08008905
 800880c:	08008905 	.word	0x08008905
 8008810:	08008905 	.word	0x08008905
 8008814:	08008905 	.word	0x08008905
 8008818:	08008905 	.word	0x08008905
 800881c:	08008905 	.word	0x08008905
 8008820:	08008905 	.word	0x08008905
 8008824:	08008905 	.word	0x08008905
 8008828:	08008905 	.word	0x08008905
 800882c:	08008905 	.word	0x08008905
 8008830:	08008905 	.word	0x08008905
 8008834:	08008905 	.word	0x08008905
 8008838:	08008905 	.word	0x08008905
 800883c:	08008905 	.word	0x08008905
 8008840:	08008905 	.word	0x08008905
 8008844:	08008905 	.word	0x08008905
 8008848:	08008905 	.word	0x08008905
 800884c:	08008905 	.word	0x08008905
 8008850:	08008905 	.word	0x08008905
 8008854:	08008905 	.word	0x08008905
 8008858:	08008905 	.word	0x08008905
 800885c:	0800886d 	.word	0x0800886d
 8008860:	080088b1 	.word	0x080088b1
 8008864:	08008905 	.word	0x08008905
 8008868:	08008905 	.word	0x08008905
    case CDC_CLEAR_COMM_FEATURE:
      /* Add your code here */
      break;

    case CDC_SET_LINE_CODING:
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	781b      	ldrb	r3, [r3, #0]
 8008870:	461a      	mov	r2, r3
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	3301      	adds	r3, #1
 8008876:	781b      	ldrb	r3, [r3, #0]
 8008878:	021b      	lsls	r3, r3, #8
 800887a:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	3302      	adds	r3, #2
 8008880:	781b      	ldrb	r3, [r3, #0]
 8008882:	041b      	lsls	r3, r3, #16
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 8008884:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	3303      	adds	r3, #3
 800888a:	781b      	ldrb	r3, [r3, #0]
 800888c:	061b      	lsls	r3, r3, #24
 800888e:	4313      	orrs	r3, r2
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 8008890:	461a      	mov	r2, r3
 8008892:	4b20      	ldr	r3, [pc, #128]	@ (8008914 <TEMPLATE_Control+0x158>)
 8008894:	601a      	str	r2, [r3, #0]
      linecoding.format     = pbuf[4];
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	791a      	ldrb	r2, [r3, #4]
 800889a:	4b1e      	ldr	r3, [pc, #120]	@ (8008914 <TEMPLATE_Control+0x158>)
 800889c:	711a      	strb	r2, [r3, #4]
      linecoding.paritytype = pbuf[5];
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	795a      	ldrb	r2, [r3, #5]
 80088a2:	4b1c      	ldr	r3, [pc, #112]	@ (8008914 <TEMPLATE_Control+0x158>)
 80088a4:	715a      	strb	r2, [r3, #5]
      linecoding.datatype   = pbuf[6];
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	799a      	ldrb	r2, [r3, #6]
 80088aa:	4b1a      	ldr	r3, [pc, #104]	@ (8008914 <TEMPLATE_Control+0x158>)
 80088ac:	719a      	strb	r2, [r3, #6]

      /* Add your code here */
      break;
 80088ae:	e02a      	b.n	8008906 <TEMPLATE_Control+0x14a>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(linecoding.bitrate);
 80088b0:	4b18      	ldr	r3, [pc, #96]	@ (8008914 <TEMPLATE_Control+0x158>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	b2da      	uxtb	r2, r3
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(linecoding.bitrate >> 8);
 80088ba:	4b16      	ldr	r3, [pc, #88]	@ (8008914 <TEMPLATE_Control+0x158>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	0a1a      	lsrs	r2, r3, #8
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	3301      	adds	r3, #1
 80088c4:	b2d2      	uxtb	r2, r2
 80088c6:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(linecoding.bitrate >> 16);
 80088c8:	4b12      	ldr	r3, [pc, #72]	@ (8008914 <TEMPLATE_Control+0x158>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	0c1a      	lsrs	r2, r3, #16
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	3302      	adds	r3, #2
 80088d2:	b2d2      	uxtb	r2, r2
 80088d4:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(linecoding.bitrate >> 24);
 80088d6:	4b0f      	ldr	r3, [pc, #60]	@ (8008914 <TEMPLATE_Control+0x158>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	0e1a      	lsrs	r2, r3, #24
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	3303      	adds	r3, #3
 80088e0:	b2d2      	uxtb	r2, r2
 80088e2:	701a      	strb	r2, [r3, #0]
      pbuf[4] = linecoding.format;
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	3304      	adds	r3, #4
 80088e8:	4a0a      	ldr	r2, [pc, #40]	@ (8008914 <TEMPLATE_Control+0x158>)
 80088ea:	7912      	ldrb	r2, [r2, #4]
 80088ec:	701a      	strb	r2, [r3, #0]
      pbuf[5] = linecoding.paritytype;
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	3305      	adds	r3, #5
 80088f2:	4a08      	ldr	r2, [pc, #32]	@ (8008914 <TEMPLATE_Control+0x158>)
 80088f4:	7952      	ldrb	r2, [r2, #5]
 80088f6:	701a      	strb	r2, [r3, #0]
      pbuf[6] = linecoding.datatype;
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	3306      	adds	r3, #6
 80088fc:	4a05      	ldr	r2, [pc, #20]	@ (8008914 <TEMPLATE_Control+0x158>)
 80088fe:	7992      	ldrb	r2, [r2, #6]
 8008900:	701a      	strb	r2, [r3, #0]

      /* Add your code here */
      break;
 8008902:	e000      	b.n	8008906 <TEMPLATE_Control+0x14a>
    case CDC_SEND_BREAK:
      /* Add your code here */
      break;

    default:
      break;
 8008904:	bf00      	nop
  }

  return (0);
 8008906:	2300      	movs	r3, #0
}
 8008908:	4618      	mov	r0, r3
 800890a:	370c      	adds	r7, #12
 800890c:	46bd      	mov	sp, r7
 800890e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008912:	4770      	bx	lr
 8008914:	20000060 	.word	0x20000060

08008918 <TEMPLATE_Receive>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Receive(uint8_t *Buf, uint32_t *Len)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b082      	sub	sp, #8
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	6039      	str	r1, [r7, #0]
	/* Add your RX code here */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008922:	6879      	ldr	r1, [r7, #4]
 8008924:	4805      	ldr	r0, [pc, #20]	@ (800893c <TEMPLATE_Receive+0x24>)
 8008926:	f7ff fe73 	bl	8008610 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800892a:	4804      	ldr	r0, [pc, #16]	@ (800893c <TEMPLATE_Receive+0x24>)
 800892c:	f7ff fed8 	bl	80086e0 <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 8008930:	2300      	movs	r3, #0
}
 8008932:	4618      	mov	r0, r3
 8008934:	3708      	adds	r7, #8
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}
 800893a:	bf00      	nop
 800893c:	20000500 	.word	0x20000500

08008940 <TEMPLATE_TransmitCplt>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_TransmitCplt(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008940:	b480      	push	{r7}
 8008942:	b085      	sub	sp, #20
 8008944:	af00      	add	r7, sp, #0
 8008946:	60f8      	str	r0, [r7, #12]
 8008948:	60b9      	str	r1, [r7, #8]
 800894a:	4613      	mov	r3, r2
 800894c:	71fb      	strb	r3, [r7, #7]
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);

  return (0);
 800894e:	2300      	movs	r3, #0
}
 8008950:	4618      	mov	r0, r3
 8008952:	3714      	adds	r7, #20
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr

0800895c <USBD_CMPSIT_AddClass>:
  */
uint8_t  USBD_CMPSIT_AddClass(USBD_HandleTypeDef *pdev,
                              USBD_ClassTypeDef *pclass,
                              USBD_CompositeClassTypeDef class,
                              uint8_t cfgidx)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b084      	sub	sp, #16
 8008960:	af00      	add	r7, sp, #0
 8008962:	60f8      	str	r0, [r7, #12]
 8008964:	60b9      	str	r1, [r7, #8]
 8008966:	4611      	mov	r1, r2
 8008968:	461a      	mov	r2, r3
 800896a:	460b      	mov	r3, r1
 800896c:	71fb      	strb	r3, [r7, #7]
 800896e:	4613      	mov	r3, r2
 8008970:	71bb      	strb	r3, [r7, #6]
  if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) && (pdev->tclasslist[pdev->classId].Active == 0U))
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008978:	2b01      	cmp	r3, #1
 800897a:	d842      	bhi.n	8008a02 <USBD_CMPSIT_AddClass+0xa6>
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008982:	68fa      	ldr	r2, [r7, #12]
 8008984:	212c      	movs	r1, #44	@ 0x2c
 8008986:	fb01 f303 	mul.w	r3, r1, r3
 800898a:	4413      	add	r3, r2
 800898c:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d135      	bne.n	8008a02 <USBD_CMPSIT_AddClass+0xa6>
  {
    /* Store the class parameters in the global tab */
    pdev->pClass[pdev->classId] = pclass;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	32ae      	adds	r2, #174	@ 0xae
 80089a0:	68b9      	ldr	r1, [r7, #8]
 80089a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->tclasslist[pdev->classId].ClassId = pdev->classId;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80089ac:	68fa      	ldr	r2, [r7, #12]
 80089ae:	f8d2 22e0 	ldr.w	r2, [r2, #736]	@ 0x2e0
 80089b2:	68f9      	ldr	r1, [r7, #12]
 80089b4:	202c      	movs	r0, #44	@ 0x2c
 80089b6:	fb00 f303 	mul.w	r3, r0, r3
 80089ba:	440b      	add	r3, r1
 80089bc:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 80089c0:	601a      	str	r2, [r3, #0]
    pdev->tclasslist[pdev->classId].Active = 1U;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80089c8:	68fa      	ldr	r2, [r7, #12]
 80089ca:	212c      	movs	r1, #44	@ 0x2c
 80089cc:	fb01 f303 	mul.w	r3, r1, r3
 80089d0:	4413      	add	r3, r2
 80089d2:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 80089d6:	2201      	movs	r2, #1
 80089d8:	601a      	str	r2, [r3, #0]
    pdev->tclasslist[pdev->classId].ClassType = class;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80089e0:	68fa      	ldr	r2, [r7, #12]
 80089e2:	212c      	movs	r1, #44	@ 0x2c
 80089e4:	fb01 f303 	mul.w	r3, r1, r3
 80089e8:	4413      	add	r3, r2
 80089ea:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 80089ee:	79fa      	ldrb	r2, [r7, #7]
 80089f0:	701a      	strb	r2, [r3, #0]

    /* Call configuration descriptor builder and endpoint configuration builder */
    if (USBD_CMPSIT_AddToConfDesc(pdev) != (uint8_t)USBD_OK)
 80089f2:	68f8      	ldr	r0, [r7, #12]
 80089f4:	f000 f80a 	bl	8008a0c <USBD_CMPSIT_AddToConfDesc>
 80089f8:	4603      	mov	r3, r0
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d001      	beq.n	8008a02 <USBD_CMPSIT_AddClass+0xa6>
    {
      return (uint8_t)USBD_FAIL;
 80089fe:	2303      	movs	r3, #3
 8008a00:	e000      	b.n	8008a04 <USBD_CMPSIT_AddClass+0xa8>
    }
  }

  UNUSED(cfgidx);

  return (uint8_t)USBD_OK;
 8008a02:	2300      	movs	r3, #0
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3710      	adds	r7, #16
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}

08008a0c <USBD_CMPSIT_AddToConfDesc>:
  *         Add a new class to the configuration descriptor
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CMPSIT_AddToConfDesc(USBD_HandleTypeDef *pdev)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b084      	sub	sp, #16
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
  uint8_t idxIf = 0U;
 8008a14:	2300      	movs	r3, #0
 8008a16:	73fb      	strb	r3, [r7, #15]
  uint8_t iEp = 0U;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	73bb      	strb	r3, [r7, #14]

  /* For the first class instance, start building the config descriptor common part */
  if (pdev->classId == 0U)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d105      	bne.n	8008a32 <USBD_CMPSIT_AddToConfDesc+0x26>
  {
    /* Add configuration and IAD descriptors */
    USBD_CMPSIT_AddConfDesc((uint32_t)pCmpstFSConfDesc, &CurrFSConfDescSz);
 8008a26:	4b5a      	ldr	r3, [pc, #360]	@ (8008b90 <USBD_CMPSIT_AddToConfDesc+0x184>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	495a      	ldr	r1, [pc, #360]	@ (8008b94 <USBD_CMPSIT_AddToConfDesc+0x188>)
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f000 f91a 	bl	8008c66 <USBD_CMPSIT_AddConfDesc>
#ifdef USE_USB_HS
    USBD_CMPSIT_AddConfDesc((uint32_t)pCmpstHSConfDesc, &CurrHSConfDescSz);
#endif /* USE_USB_HS */
  }

  switch (pdev->tclasslist[pdev->classId].ClassType)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008a38:	687a      	ldr	r2, [r7, #4]
 8008a3a:	212c      	movs	r1, #44	@ 0x2c
 8008a3c:	fb01 f303 	mul.w	r3, r1, r3
 8008a40:	4413      	add	r3, r2
 8008a42:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 8008a46:	781b      	ldrb	r3, [r3, #0]
 8008a48:	2b02      	cmp	r3, #2
 8008a4a:	f040 809a 	bne.w	8008b82 <USBD_CMPSIT_AddToConfDesc+0x176>
#endif /* USBD_CMPSIT_ACTIVATE_MSC */

#if USBD_CMPSIT_ACTIVATE_CDC == 1
    case CLASS_TYPE_CDC:
      /* Setup default Max packet size for FS device */
      pdev->tclasslist[pdev->classId].CurrPcktSze = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008a54:	687a      	ldr	r2, [r7, #4]
 8008a56:	212c      	movs	r1, #44	@ 0x2c
 8008a58:	fb01 f303 	mul.w	r3, r1, r3
 8008a5c:	4413      	add	r3, r2
 8008a5e:	f503 7344 	add.w	r3, r3, #784	@ 0x310
 8008a62:	2240      	movs	r2, #64	@ 0x40
 8008a64:	601a      	str	r2, [r3, #0]

      /* Find the first available interface slot and Assign number of interfaces */
      idxIf = USBD_CMPSIT_FindFreeIFNbr(pdev);
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f000 f8ce 	bl	8008c08 <USBD_CMPSIT_FindFreeIFNbr>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	73fb      	strb	r3, [r7, #15]
      pdev->tclasslist[pdev->classId].NumIf = 2U;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008a76:	687a      	ldr	r2, [r7, #4]
 8008a78:	212c      	movs	r1, #44	@ 0x2c
 8008a7a:	fb01 f303 	mul.w	r3, r1, r3
 8008a7e:	4413      	add	r3, r2
 8008a80:	f503 7342 	add.w	r3, r3, #776	@ 0x308
 8008a84:	2202      	movs	r2, #2
 8008a86:	601a      	str	r2, [r3, #0]
      pdev->tclasslist[pdev->classId].Ifs[0] = idxIf;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008a8e:	687a      	ldr	r2, [r7, #4]
 8008a90:	212c      	movs	r1, #44	@ 0x2c
 8008a92:	fb01 f303 	mul.w	r3, r1, r3
 8008a96:	4413      	add	r3, r2
 8008a98:	f503 7343 	add.w	r3, r3, #780	@ 0x30c
 8008a9c:	7bfa      	ldrb	r2, [r7, #15]
 8008a9e:	701a      	strb	r2, [r3, #0]
      pdev->tclasslist[pdev->classId].Ifs[1] = (uint8_t)(idxIf + 1U);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008aa6:	7bfa      	ldrb	r2, [r7, #15]
 8008aa8:	3201      	adds	r2, #1
 8008aaa:	b2d0      	uxtb	r0, r2
 8008aac:	687a      	ldr	r2, [r7, #4]
 8008aae:	212c      	movs	r1, #44	@ 0x2c
 8008ab0:	fb01 f303 	mul.w	r3, r1, r3
 8008ab4:	4413      	add	r3, r2
 8008ab6:	f203 330d 	addw	r3, r3, #781	@ 0x30d
 8008aba:	4602      	mov	r2, r0
 8008abc:	701a      	strb	r2, [r3, #0]

      /* Assign endpoint numbers */
      pdev->tclasslist[pdev->classId].NumEps = 3U;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008ac4:	687a      	ldr	r2, [r7, #4]
 8008ac6:	212c      	movs	r1, #44	@ 0x2c
 8008ac8:	fb01 f303 	mul.w	r3, r1, r3
 8008acc:	4413      	add	r3, r2
 8008ace:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 8008ad2:	2203      	movs	r2, #3
 8008ad4:	601a      	str	r2, [r3, #0]

      /* Set IN endpoint slot */
      iEp = pdev->tclasslist[pdev->classId].EpAdd[0];
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008adc:	687a      	ldr	r2, [r7, #4]
 8008ade:	212c      	movs	r1, #44	@ 0x2c
 8008ae0:	fb01 f303 	mul.w	r3, r1, r3
 8008ae4:	4413      	add	r3, r2
 8008ae6:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	781b      	ldrb	r3, [r3, #0]
 8008aee:	73bb      	strb	r3, [r7, #14]
      USBD_CMPSIT_AssignEp(pdev, iEp, USBD_EP_TYPE_BULK, pdev->tclasslist[pdev->classId].CurrPcktSze);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008af6:	687a      	ldr	r2, [r7, #4]
 8008af8:	212c      	movs	r1, #44	@ 0x2c
 8008afa:	fb01 f303 	mul.w	r3, r1, r3
 8008afe:	4413      	add	r3, r2
 8008b00:	f503 7344 	add.w	r3, r3, #784	@ 0x310
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	7bb9      	ldrb	r1, [r7, #14]
 8008b08:	2202      	movs	r2, #2
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f000 f8d8 	bl	8008cc0 <USBD_CMPSIT_AssignEp>

      /* Set OUT endpoint slot */
      iEp = pdev->tclasslist[pdev->classId].EpAdd[1];
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008b16:	687a      	ldr	r2, [r7, #4]
 8008b18:	212c      	movs	r1, #44	@ 0x2c
 8008b1a:	fb01 f303 	mul.w	r3, r1, r3
 8008b1e:	4413      	add	r3, r2
 8008b20:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	785b      	ldrb	r3, [r3, #1]
 8008b28:	73bb      	strb	r3, [r7, #14]
      USBD_CMPSIT_AssignEp(pdev, iEp, USBD_EP_TYPE_BULK, pdev->tclasslist[pdev->classId].CurrPcktSze);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008b30:	687a      	ldr	r2, [r7, #4]
 8008b32:	212c      	movs	r1, #44	@ 0x2c
 8008b34:	fb01 f303 	mul.w	r3, r1, r3
 8008b38:	4413      	add	r3, r2
 8008b3a:	f503 7344 	add.w	r3, r3, #784	@ 0x310
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	7bb9      	ldrb	r1, [r7, #14]
 8008b42:	2202      	movs	r2, #2
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f000 f8bb 	bl	8008cc0 <USBD_CMPSIT_AssignEp>

      /* Set the second IN endpoint slot */
      iEp = pdev->tclasslist[pdev->classId].EpAdd[2];
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008b50:	687a      	ldr	r2, [r7, #4]
 8008b52:	212c      	movs	r1, #44	@ 0x2c
 8008b54:	fb01 f303 	mul.w	r3, r1, r3
 8008b58:	4413      	add	r3, r2
 8008b5a:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	789b      	ldrb	r3, [r3, #2]
 8008b62:	73bb      	strb	r3, [r7, #14]
      USBD_CMPSIT_AssignEp(pdev, iEp, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008b64:	7bb9      	ldrb	r1, [r7, #14]
 8008b66:	2308      	movs	r3, #8
 8008b68:	2203      	movs	r2, #3
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f000 f8a8 	bl	8008cc0 <USBD_CMPSIT_AssignEp>

      /* Configure and Append the Descriptor */
      USBD_CMPSIT_CDCDesc(pdev, (uint32_t)pCmpstFSConfDesc, &CurrFSConfDescSz, (uint8_t)USBD_SPEED_FULL);
 8008b70:	4b07      	ldr	r3, [pc, #28]	@ (8008b90 <USBD_CMPSIT_AddToConfDesc+0x184>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4619      	mov	r1, r3
 8008b76:	2301      	movs	r3, #1
 8008b78:	4a06      	ldr	r2, [pc, #24]	@ (8008b94 <USBD_CMPSIT_AddToConfDesc+0x188>)
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f000 f916 	bl	8008dac <USBD_CMPSIT_CDCDesc>

#ifdef USE_USB_HS
      USBD_CMPSIT_CDCDesc(pdev, (uint32_t)pCmpstHSConfDesc, &CurrHSConfDescSz, (uint8_t)USBD_SPEED_HIGH);
#endif /* USE_USB_HS */

      break;
 8008b80:	e000      	b.n	8008b84 <USBD_CMPSIT_AddToConfDesc+0x178>
    default:
      UNUSED(idxIf);
      UNUSED(iEp);
      UNUSED(USBD_CMPSIT_FindFreeIFNbr);
      UNUSED(USBD_CMPSIT_AssignEp);
      break;
 8008b82:	bf00      	nop
  }

  return (uint8_t)USBD_OK;
 8008b84:	2300      	movs	r3, #0
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	3710      	adds	r7, #16
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}
 8008b8e:	bf00      	nop
 8008b90:	200000a0 	.word	0x200000a0
 8008b94:	20000b14 	.word	0x20000b14

08008b98 <USBD_CMPSIT_GetFSCfgDesc>:
  *         return configuration descriptor for both FS and HS modes
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t  *USBD_CMPSIT_GetFSCfgDesc(uint16_t *length)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b083      	sub	sp, #12
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)CurrFSConfDescSz;
 8008ba0:	4b05      	ldr	r3, [pc, #20]	@ (8008bb8 <USBD_CMPSIT_GetFSCfgDesc+0x20>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	b29a      	uxth	r2, r3
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	801a      	strh	r2, [r3, #0]

  return USBD_CMPSIT_FSCfgDesc;
 8008baa:	4b04      	ldr	r3, [pc, #16]	@ (8008bbc <USBD_CMPSIT_GetFSCfgDesc+0x24>)
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	370c      	adds	r7, #12
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb6:	4770      	bx	lr
 8008bb8:	20000b14 	.word	0x20000b14
 8008bbc:	200009e8 	.word	0x200009e8

08008bc0 <USBD_CMPSIT_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t  *USBD_CMPSIT_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b083      	sub	sp, #12
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)CurrFSConfDescSz;
 8008bc8:	4b05      	ldr	r3, [pc, #20]	@ (8008be0 <USBD_CMPSIT_GetOtherSpeedCfgDesc+0x20>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	b29a      	uxth	r2, r3
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	801a      	strh	r2, [r3, #0]

  return USBD_CMPSIT_FSCfgDesc;
 8008bd2:	4b04      	ldr	r3, [pc, #16]	@ (8008be4 <USBD_CMPSIT_GetOtherSpeedCfgDesc+0x24>)
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	370c      	adds	r7, #12
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bde:	4770      	bx	lr
 8008be0:	20000b14 	.word	0x20000b14
 8008be4:	200009e8 	.word	0x200009e8

08008be8 <USBD_CMPSIT_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t  *USBD_CMPSIT_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008be8:	b480      	push	{r7}
 8008bea:	b083      	sub	sp, #12
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)(sizeof(USBD_CMPSIT_DeviceQualifierDesc));
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	220a      	movs	r2, #10
 8008bf4:	801a      	strh	r2, [r3, #0]
  return USBD_CMPSIT_DeviceQualifierDesc;
 8008bf6:	4b03      	ldr	r3, [pc, #12]	@ (8008c04 <USBD_CMPSIT_GetDeviceQualifierDescriptor+0x1c>)
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	370c      	adds	r7, #12
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c02:	4770      	bx	lr
 8008c04:	200000a4 	.word	0x200000a4

08008c08 <USBD_CMPSIT_FindFreeIFNbr>:
  *         Find the first interface available slot
  * @param  pdev: device instance
  * @retval The interface number to be used
  */
static uint8_t USBD_CMPSIT_FindFreeIFNbr(USBD_HandleTypeDef *pdev)
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b087      	sub	sp, #28
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
  uint32_t idx = 0U;
 8008c10:	2300      	movs	r3, #0
 8008c12:	617b      	str	r3, [r7, #20]

  /* Unroll all already activated classes */
  for (uint32_t i = 0U; i < pdev->NumClasses; i++)
 8008c14:	2300      	movs	r3, #0
 8008c16:	613b      	str	r3, [r7, #16]
 8008c18:	e017      	b.n	8008c4a <USBD_CMPSIT_FindFreeIFNbr+0x42>
  {
    /* Unroll each class interfaces */
    for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	60fb      	str	r3, [r7, #12]
 8008c1e:	e005      	b.n	8008c2c <USBD_CMPSIT_FindFreeIFNbr+0x24>
    {
      /* Increment the interface counter index */
      idx++;
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	3301      	adds	r3, #1
 8008c24:	617b      	str	r3, [r7, #20]
    for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	3301      	adds	r3, #1
 8008c2a:	60fb      	str	r3, [r7, #12]
 8008c2c:	687a      	ldr	r2, [r7, #4]
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	212c      	movs	r1, #44	@ 0x2c
 8008c32:	fb01 f303 	mul.w	r3, r1, r3
 8008c36:	4413      	add	r3, r2
 8008c38:	f503 7342 	add.w	r3, r3, #776	@ 0x308
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	68fa      	ldr	r2, [r7, #12]
 8008c40:	429a      	cmp	r2, r3
 8008c42:	d3ed      	bcc.n	8008c20 <USBD_CMPSIT_FindFreeIFNbr+0x18>
  for (uint32_t i = 0U; i < pdev->NumClasses; i++)
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	3301      	adds	r3, #1
 8008c48:	613b      	str	r3, [r7, #16]
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f8d3 32e4 	ldr.w	r3, [r3, #740]	@ 0x2e4
 8008c50:	693a      	ldr	r2, [r7, #16]
 8008c52:	429a      	cmp	r2, r3
 8008c54:	d3e1      	bcc.n	8008c1a <USBD_CMPSIT_FindFreeIFNbr+0x12>
    }
  }

  /* Return the first available interface slot */
  return (uint8_t)idx;
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	b2db      	uxtb	r3, r3
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	371c      	adds	r7, #28
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c64:	4770      	bx	lr

08008c66 <USBD_CMPSIT_AddConfDesc>:
  *         Add a new class to the configuration descriptor
  * @param  pdev: device instance
  * @retval none
  */
static void  USBD_CMPSIT_AddConfDesc(uint32_t Conf, __IO uint32_t *pSze)
{
 8008c66:	b480      	push	{r7}
 8008c68:	b085      	sub	sp, #20
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	6078      	str	r0, [r7, #4]
 8008c6e:	6039      	str	r1, [r7, #0]
  /* Intermediate variable to comply with MISRA-C Rule 11.3 */
  USBD_ConfigDescTypeDef *ptr = (USBD_ConfigDescTypeDef *)Conf;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	60fb      	str	r3, [r7, #12]

  ptr->bLength = (uint8_t)sizeof(USBD_ConfigDescTypeDef);
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	2209      	movs	r2, #9
 8008c78:	701a      	strb	r2, [r3, #0]
  ptr->bDescriptorType = USB_DESC_TYPE_CONFIGURATION;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	2202      	movs	r2, #2
 8008c7e:	705a      	strb	r2, [r3, #1]
  ptr->wTotalLength = 0U;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	2200      	movs	r2, #0
 8008c84:	709a      	strb	r2, [r3, #2]
 8008c86:	2200      	movs	r2, #0
 8008c88:	70da      	strb	r2, [r3, #3]
  ptr->bNumInterfaces = 0U;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	711a      	strb	r2, [r3, #4]
  ptr->bConfigurationValue = 1U;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	2201      	movs	r2, #1
 8008c94:	715a      	strb	r2, [r3, #5]
  ptr->iConfiguration = USBD_CONFIG_STR_DESC_IDX;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	2204      	movs	r2, #4
 8008c9a:	719a      	strb	r2, [r3, #6]

#if (USBD_SELF_POWERED == 1U)
  ptr->bmAttributes = 0xC0U;   /* bmAttributes: Self Powered according to user configuration */
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	22c0      	movs	r2, #192	@ 0xc0
 8008ca0:	71da      	strb	r2, [r3, #7]
#else
  ptr->bmAttributes = 0x80U;   /* bmAttributes: Bus Powered according to user configuration */
#endif /* USBD_SELF_POWERED */

  ptr->bMaxPower = USBD_MAX_POWER;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	2232      	movs	r2, #50	@ 0x32
 8008ca6:	721a      	strb	r2, [r3, #8]

  *pSze += sizeof(USBD_ConfigDescTypeDef);
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f103 0209 	add.w	r2, r3, #9
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	601a      	str	r2, [r3, #0]
}
 8008cb4:	bf00      	nop
 8008cb6:	3714      	adds	r7, #20
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbe:	4770      	bx	lr

08008cc0 <USBD_CMPSIT_AssignEp>:
  * @param  Type: Endpoint type
  * @param  Sze: Endpoint max packet size
  * @retval none
  */
static void  USBD_CMPSIT_AssignEp(USBD_HandleTypeDef *pdev, uint8_t Add, uint8_t Type, uint32_t Sze)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b087      	sub	sp, #28
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	60f8      	str	r0, [r7, #12]
 8008cc8:	607b      	str	r3, [r7, #4]
 8008cca:	460b      	mov	r3, r1
 8008ccc:	72fb      	strb	r3, [r7, #11]
 8008cce:	4613      	mov	r3, r2
 8008cd0:	72bb      	strb	r3, [r7, #10]
  uint32_t idx = 0U;
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	617b      	str	r3, [r7, #20]

  /* Find the first available endpoint slot */
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 8008cd6:	e002      	b.n	8008cde <USBD_CMPSIT_AssignEp+0x1e>
          ((pdev->tclasslist[pdev->classId].Eps[idx].is_used) != 0U)))
  {
    /* Increment the index */
    idx++;
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	3301      	adds	r3, #1
 8008cdc:	617b      	str	r3, [r7, #20]
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008ce4:	68fa      	ldr	r2, [r7, #12]
 8008ce6:	212c      	movs	r1, #44	@ 0x2c
 8008ce8:	fb01 f303 	mul.w	r3, r1, r3
 8008cec:	4413      	add	r3, r2
 8008cee:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	697a      	ldr	r2, [r7, #20]
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	d210      	bcs.n	8008d1c <USBD_CMPSIT_AssignEp+0x5c>
          ((pdev->tclasslist[pdev->classId].Eps[idx].is_used) != 0U)))
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 8008d00:	68f9      	ldr	r1, [r7, #12]
 8008d02:	4613      	mov	r3, r2
 8008d04:	009b      	lsls	r3, r3, #2
 8008d06:	4413      	add	r3, r2
 8008d08:	005b      	lsls	r3, r3, #1
 8008d0a:	4413      	add	r3, r2
 8008d0c:	697a      	ldr	r2, [r7, #20]
 8008d0e:	4413      	add	r3, r2
 8008d10:	33be      	adds	r3, #190	@ 0xbe
 8008d12:	009b      	lsls	r3, r3, #2
 8008d14:	440b      	add	r3, r1
 8008d16:	78db      	ldrb	r3, [r3, #3]
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d1dd      	bne.n	8008cd8 <USBD_CMPSIT_AssignEp+0x18>
  }

  /* Configure the endpoint */
  pdev->tclasslist[pdev->classId].Eps[idx].add = Add;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 8008d22:	68f9      	ldr	r1, [r7, #12]
 8008d24:	4613      	mov	r3, r2
 8008d26:	009b      	lsls	r3, r3, #2
 8008d28:	4413      	add	r3, r2
 8008d2a:	005b      	lsls	r3, r3, #1
 8008d2c:	4413      	add	r3, r2
 8008d2e:	697a      	ldr	r2, [r7, #20]
 8008d30:	4413      	add	r3, r2
 8008d32:	33be      	adds	r3, #190	@ 0xbe
 8008d34:	7afa      	ldrb	r2, [r7, #11]
 8008d36:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
  pdev->tclasslist[pdev->classId].Eps[idx].type = Type;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 8008d40:	68f9      	ldr	r1, [r7, #12]
 8008d42:	4613      	mov	r3, r2
 8008d44:	009b      	lsls	r3, r3, #2
 8008d46:	4413      	add	r3, r2
 8008d48:	005b      	lsls	r3, r3, #1
 8008d4a:	4413      	add	r3, r2
 8008d4c:	697a      	ldr	r2, [r7, #20]
 8008d4e:	4413      	add	r3, r2
 8008d50:	33be      	adds	r3, #190	@ 0xbe
 8008d52:	009b      	lsls	r3, r3, #2
 8008d54:	440b      	add	r3, r1
 8008d56:	7aba      	ldrb	r2, [r7, #10]
 8008d58:	705a      	strb	r2, [r3, #1]
  pdev->tclasslist[pdev->classId].Eps[idx].size = (uint8_t)Sze;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	b2d8      	uxtb	r0, r3
 8008d64:	68f9      	ldr	r1, [r7, #12]
 8008d66:	4613      	mov	r3, r2
 8008d68:	009b      	lsls	r3, r3, #2
 8008d6a:	4413      	add	r3, r2
 8008d6c:	005b      	lsls	r3, r3, #1
 8008d6e:	4413      	add	r3, r2
 8008d70:	697a      	ldr	r2, [r7, #20]
 8008d72:	4413      	add	r3, r2
 8008d74:	33be      	adds	r3, #190	@ 0xbe
 8008d76:	009b      	lsls	r3, r3, #2
 8008d78:	440b      	add	r3, r1
 8008d7a:	4602      	mov	r2, r0
 8008d7c:	709a      	strb	r2, [r3, #2]
  pdev->tclasslist[pdev->classId].Eps[idx].is_used = 1U;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 8008d84:	68f9      	ldr	r1, [r7, #12]
 8008d86:	4613      	mov	r3, r2
 8008d88:	009b      	lsls	r3, r3, #2
 8008d8a:	4413      	add	r3, r2
 8008d8c:	005b      	lsls	r3, r3, #1
 8008d8e:	4413      	add	r3, r2
 8008d90:	697a      	ldr	r2, [r7, #20]
 8008d92:	4413      	add	r3, r2
 8008d94:	33be      	adds	r3, #190	@ 0xbe
 8008d96:	009b      	lsls	r3, r3, #2
 8008d98:	440b      	add	r3, r1
 8008d9a:	2201      	movs	r2, #1
 8008d9c:	70da      	strb	r2, [r3, #3]
}
 8008d9e:	bf00      	nop
 8008da0:	371c      	adds	r7, #28
 8008da2:	46bd      	mov	sp, r7
 8008da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da8:	4770      	bx	lr
	...

08008dac <USBD_CMPSIT_CDCDesc>:
  * @param  pConf: Configuration descriptor pointer
  * @param  Sze: pointer to the current configuration descriptor size
  * @retval None
  */
static void  USBD_CMPSIT_CDCDesc(USBD_HandleTypeDef *pdev, uint32_t pConf, __IO uint32_t *Sze, uint8_t speed)
{
 8008dac:	b480      	push	{r7}
 8008dae:	b085      	sub	sp, #20
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	60f8      	str	r0, [r7, #12]
 8008db4:	60b9      	str	r1, [r7, #8]
 8008db6:	607a      	str	r2, [r7, #4]
 8008db8:	70fb      	strb	r3, [r7, #3]
#if USBD_COMPOSITE_USE_IAD == 1
  static USBD_IadDescTypeDef              *pIadDesc;
#endif /* USBD_COMPOSITE_USE_IAD == 1 */

#if USBD_COMPOSITE_USE_IAD == 1
  pIadDesc                          = ((USBD_IadDescTypeDef *)(pConf + *Sze));
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681a      	ldr	r2, [r3, #0]
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	4413      	add	r3, r2
 8008dc2:	461a      	mov	r2, r3
 8008dc4:	4b9c      	ldr	r3, [pc, #624]	@ (8009038 <USBD_CMPSIT_CDCDesc+0x28c>)
 8008dc6:	601a      	str	r2, [r3, #0]
  pIadDesc->bLength                 = (uint8_t)sizeof(USBD_IadDescTypeDef);
 8008dc8:	4b9b      	ldr	r3, [pc, #620]	@ (8009038 <USBD_CMPSIT_CDCDesc+0x28c>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	2208      	movs	r2, #8
 8008dce:	701a      	strb	r2, [r3, #0]
  pIadDesc->bDescriptorType         = USB_DESC_TYPE_IAD; /* IAD descriptor */
 8008dd0:	4b99      	ldr	r3, [pc, #612]	@ (8009038 <USBD_CMPSIT_CDCDesc+0x28c>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	220b      	movs	r2, #11
 8008dd6:	705a      	strb	r2, [r3, #1]
  pIadDesc->bFirstInterface         = pdev->tclasslist[pdev->classId].Ifs[0];
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 8008dde:	4b96      	ldr	r3, [pc, #600]	@ (8009038 <USBD_CMPSIT_CDCDesc+0x28c>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	68f9      	ldr	r1, [r7, #12]
 8008de4:	202c      	movs	r0, #44	@ 0x2c
 8008de6:	fb00 f202 	mul.w	r2, r0, r2
 8008dea:	440a      	add	r2, r1
 8008dec:	f502 7243 	add.w	r2, r2, #780	@ 0x30c
 8008df0:	7812      	ldrb	r2, [r2, #0]
 8008df2:	709a      	strb	r2, [r3, #2]
  pIadDesc->bInterfaceCount         = 2U;    /* 2 interfaces */
 8008df4:	4b90      	ldr	r3, [pc, #576]	@ (8009038 <USBD_CMPSIT_CDCDesc+0x28c>)
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	2202      	movs	r2, #2
 8008dfa:	70da      	strb	r2, [r3, #3]
  pIadDesc->bFunctionClass          = 0x02U;
 8008dfc:	4b8e      	ldr	r3, [pc, #568]	@ (8009038 <USBD_CMPSIT_CDCDesc+0x28c>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	2202      	movs	r2, #2
 8008e02:	711a      	strb	r2, [r3, #4]
  pIadDesc->bFunctionSubClass       = 0x02U;
 8008e04:	4b8c      	ldr	r3, [pc, #560]	@ (8009038 <USBD_CMPSIT_CDCDesc+0x28c>)
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	2202      	movs	r2, #2
 8008e0a:	715a      	strb	r2, [r3, #5]
  pIadDesc->bFunctionProtocol       = 0x01U;
 8008e0c:	4b8a      	ldr	r3, [pc, #552]	@ (8009038 <USBD_CMPSIT_CDCDesc+0x28c>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	2201      	movs	r2, #1
 8008e12:	719a      	strb	r2, [r3, #6]
  pIadDesc->iFunction               = 0U; /* String Index */
 8008e14:	4b88      	ldr	r3, [pc, #544]	@ (8009038 <USBD_CMPSIT_CDCDesc+0x28c>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	71da      	strb	r2, [r3, #7]
  *Sze                              += (uint32_t)sizeof(USBD_IadDescTypeDef);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f103 0208 	add.w	r2, r3, #8
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	601a      	str	r2, [r3, #0]
#endif /* USBD_COMPOSITE_USE_IAD == 1 */

  /* Control Interface Descriptor */
  __USBD_CMPSIT_SET_IF(pdev->tclasslist[pdev->classId].Ifs[0], 0U, 1U, 0x02, 0x02U, 0x01U, 0U);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681a      	ldr	r2, [r3, #0]
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	4413      	add	r3, r2
 8008e30:	461a      	mov	r2, r3
 8008e32:	4b82      	ldr	r3, [pc, #520]	@ (800903c <USBD_CMPSIT_CDCDesc+0x290>)
 8008e34:	601a      	str	r2, [r3, #0]
 8008e36:	4b81      	ldr	r3, [pc, #516]	@ (800903c <USBD_CMPSIT_CDCDesc+0x290>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	2209      	movs	r2, #9
 8008e3c:	701a      	strb	r2, [r3, #0]
 8008e3e:	4b7f      	ldr	r3, [pc, #508]	@ (800903c <USBD_CMPSIT_CDCDesc+0x290>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	2204      	movs	r2, #4
 8008e44:	705a      	strb	r2, [r3, #1]
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 8008e4c:	4b7b      	ldr	r3, [pc, #492]	@ (800903c <USBD_CMPSIT_CDCDesc+0x290>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	68f9      	ldr	r1, [r7, #12]
 8008e52:	202c      	movs	r0, #44	@ 0x2c
 8008e54:	fb00 f202 	mul.w	r2, r0, r2
 8008e58:	440a      	add	r2, r1
 8008e5a:	f502 7243 	add.w	r2, r2, #780	@ 0x30c
 8008e5e:	7812      	ldrb	r2, [r2, #0]
 8008e60:	709a      	strb	r2, [r3, #2]
 8008e62:	4b76      	ldr	r3, [pc, #472]	@ (800903c <USBD_CMPSIT_CDCDesc+0x290>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	2200      	movs	r2, #0
 8008e68:	70da      	strb	r2, [r3, #3]
 8008e6a:	4b74      	ldr	r3, [pc, #464]	@ (800903c <USBD_CMPSIT_CDCDesc+0x290>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	2201      	movs	r2, #1
 8008e70:	711a      	strb	r2, [r3, #4]
 8008e72:	4b72      	ldr	r3, [pc, #456]	@ (800903c <USBD_CMPSIT_CDCDesc+0x290>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	2202      	movs	r2, #2
 8008e78:	715a      	strb	r2, [r3, #5]
 8008e7a:	4b70      	ldr	r3, [pc, #448]	@ (800903c <USBD_CMPSIT_CDCDesc+0x290>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	2202      	movs	r2, #2
 8008e80:	719a      	strb	r2, [r3, #6]
 8008e82:	4b6e      	ldr	r3, [pc, #440]	@ (800903c <USBD_CMPSIT_CDCDesc+0x290>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	2201      	movs	r2, #1
 8008e88:	71da      	strb	r2, [r3, #7]
 8008e8a:	4b6c      	ldr	r3, [pc, #432]	@ (800903c <USBD_CMPSIT_CDCDesc+0x290>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	721a      	strb	r2, [r3, #8]
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f103 0209 	add.w	r2, r3, #9
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	601a      	str	r2, [r3, #0]

  /* Control interface headers */
  pHeadDesc = ((USBD_CDCHeaderFuncDescTypeDef *)((uint32_t)pConf + *Sze));
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681a      	ldr	r2, [r3, #0]
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	4413      	add	r3, r2
 8008ea6:	461a      	mov	r2, r3
 8008ea8:	4b65      	ldr	r3, [pc, #404]	@ (8009040 <USBD_CMPSIT_CDCDesc+0x294>)
 8008eaa:	601a      	str	r2, [r3, #0]
  /* Header Functional Descriptor*/
  pHeadDesc->bLength = 0x05U;
 8008eac:	4b64      	ldr	r3, [pc, #400]	@ (8009040 <USBD_CMPSIT_CDCDesc+0x294>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	2205      	movs	r2, #5
 8008eb2:	701a      	strb	r2, [r3, #0]
  pHeadDesc->bDescriptorType = 0x24U;
 8008eb4:	4b62      	ldr	r3, [pc, #392]	@ (8009040 <USBD_CMPSIT_CDCDesc+0x294>)
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	2224      	movs	r2, #36	@ 0x24
 8008eba:	705a      	strb	r2, [r3, #1]
  pHeadDesc->bDescriptorSubtype = 0x00U;
 8008ebc:	4b60      	ldr	r3, [pc, #384]	@ (8009040 <USBD_CMPSIT_CDCDesc+0x294>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	709a      	strb	r2, [r3, #2]
  pHeadDesc->bcdCDC = 0x0110U;
 8008ec4:	4b5e      	ldr	r3, [pc, #376]	@ (8009040 <USBD_CMPSIT_CDCDesc+0x294>)
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	f042 0210 	orr.w	r2, r2, #16
 8008ece:	70da      	strb	r2, [r3, #3]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	f042 0201 	orr.w	r2, r2, #1
 8008ed6:	711a      	strb	r2, [r3, #4]
  *Sze += (uint32_t)sizeof(USBD_CDCHeaderFuncDescTypeDef);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	1d5a      	adds	r2, r3, #5
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	601a      	str	r2, [r3, #0]

  /* Call Management Functional Descriptor */
  pCallMgmDesc = ((USBD_CDCCallMgmFuncDescTypeDef *)((uint32_t)pConf + *Sze));
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681a      	ldr	r2, [r3, #0]
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	4413      	add	r3, r2
 8008eea:	461a      	mov	r2, r3
 8008eec:	4b55      	ldr	r3, [pc, #340]	@ (8009044 <USBD_CMPSIT_CDCDesc+0x298>)
 8008eee:	601a      	str	r2, [r3, #0]
  pCallMgmDesc->bLength = 0x05U;
 8008ef0:	4b54      	ldr	r3, [pc, #336]	@ (8009044 <USBD_CMPSIT_CDCDesc+0x298>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	2205      	movs	r2, #5
 8008ef6:	701a      	strb	r2, [r3, #0]
  pCallMgmDesc->bDescriptorType = 0x24U;
 8008ef8:	4b52      	ldr	r3, [pc, #328]	@ (8009044 <USBD_CMPSIT_CDCDesc+0x298>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	2224      	movs	r2, #36	@ 0x24
 8008efe:	705a      	strb	r2, [r3, #1]
  pCallMgmDesc->bDescriptorSubtype = 0x01U;
 8008f00:	4b50      	ldr	r3, [pc, #320]	@ (8009044 <USBD_CMPSIT_CDCDesc+0x298>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	2201      	movs	r2, #1
 8008f06:	709a      	strb	r2, [r3, #2]
  pCallMgmDesc->bmCapabilities = 0x00U;
 8008f08:	4b4e      	ldr	r3, [pc, #312]	@ (8009044 <USBD_CMPSIT_CDCDesc+0x298>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	70da      	strb	r2, [r3, #3]
  pCallMgmDesc->bDataInterface = pdev->tclasslist[pdev->classId].Ifs[1];
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 8008f16:	4b4b      	ldr	r3, [pc, #300]	@ (8009044 <USBD_CMPSIT_CDCDesc+0x298>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	68f9      	ldr	r1, [r7, #12]
 8008f1c:	202c      	movs	r0, #44	@ 0x2c
 8008f1e:	fb00 f202 	mul.w	r2, r0, r2
 8008f22:	440a      	add	r2, r1
 8008f24:	f202 320d 	addw	r2, r2, #781	@ 0x30d
 8008f28:	7812      	ldrb	r2, [r2, #0]
 8008f2a:	711a      	strb	r2, [r3, #4]
  *Sze += (uint32_t)sizeof(USBD_CDCCallMgmFuncDescTypeDef);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	1d5a      	adds	r2, r3, #5
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	601a      	str	r2, [r3, #0]

  /* ACM Functional Descriptor*/
  pACMDesc = ((USBD_CDCACMFuncDescTypeDef *)((uint32_t)pConf + *Sze));
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681a      	ldr	r2, [r3, #0]
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	4413      	add	r3, r2
 8008f3e:	461a      	mov	r2, r3
 8008f40:	4b41      	ldr	r3, [pc, #260]	@ (8009048 <USBD_CMPSIT_CDCDesc+0x29c>)
 8008f42:	601a      	str	r2, [r3, #0]
  pACMDesc->bLength = 0x04U;
 8008f44:	4b40      	ldr	r3, [pc, #256]	@ (8009048 <USBD_CMPSIT_CDCDesc+0x29c>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	2204      	movs	r2, #4
 8008f4a:	701a      	strb	r2, [r3, #0]
  pACMDesc->bDescriptorType = 0x24U;
 8008f4c:	4b3e      	ldr	r3, [pc, #248]	@ (8009048 <USBD_CMPSIT_CDCDesc+0x29c>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	2224      	movs	r2, #36	@ 0x24
 8008f52:	705a      	strb	r2, [r3, #1]
  pACMDesc->bDescriptorSubtype = 0x02U;
 8008f54:	4b3c      	ldr	r3, [pc, #240]	@ (8009048 <USBD_CMPSIT_CDCDesc+0x29c>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	2202      	movs	r2, #2
 8008f5a:	709a      	strb	r2, [r3, #2]
  pACMDesc->bmCapabilities = 0x02U;
 8008f5c:	4b3a      	ldr	r3, [pc, #232]	@ (8009048 <USBD_CMPSIT_CDCDesc+0x29c>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	2202      	movs	r2, #2
 8008f62:	70da      	strb	r2, [r3, #3]
  *Sze += (uint32_t)sizeof(USBD_CDCACMFuncDescTypeDef);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	1d1a      	adds	r2, r3, #4
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	601a      	str	r2, [r3, #0]

  /* Union Functional Descriptor*/
  pUnionDesc = ((USBD_CDCUnionFuncDescTypeDef *)((uint32_t)pConf + *Sze));
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681a      	ldr	r2, [r3, #0]
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	4413      	add	r3, r2
 8008f76:	461a      	mov	r2, r3
 8008f78:	4b34      	ldr	r3, [pc, #208]	@ (800904c <USBD_CMPSIT_CDCDesc+0x2a0>)
 8008f7a:	601a      	str	r2, [r3, #0]
  pUnionDesc->bLength = 0x05U;
 8008f7c:	4b33      	ldr	r3, [pc, #204]	@ (800904c <USBD_CMPSIT_CDCDesc+0x2a0>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	2205      	movs	r2, #5
 8008f82:	701a      	strb	r2, [r3, #0]
  pUnionDesc->bDescriptorType = 0x24U;
 8008f84:	4b31      	ldr	r3, [pc, #196]	@ (800904c <USBD_CMPSIT_CDCDesc+0x2a0>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	2224      	movs	r2, #36	@ 0x24
 8008f8a:	705a      	strb	r2, [r3, #1]
  pUnionDesc->bDescriptorSubtype = 0x06U;
 8008f8c:	4b2f      	ldr	r3, [pc, #188]	@ (800904c <USBD_CMPSIT_CDCDesc+0x2a0>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	2206      	movs	r2, #6
 8008f92:	709a      	strb	r2, [r3, #2]
  pUnionDesc->bMasterInterface = pdev->tclasslist[pdev->classId].Ifs[0];
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 8008f9a:	4b2c      	ldr	r3, [pc, #176]	@ (800904c <USBD_CMPSIT_CDCDesc+0x2a0>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	68f9      	ldr	r1, [r7, #12]
 8008fa0:	202c      	movs	r0, #44	@ 0x2c
 8008fa2:	fb00 f202 	mul.w	r2, r0, r2
 8008fa6:	440a      	add	r2, r1
 8008fa8:	f502 7243 	add.w	r2, r2, #780	@ 0x30c
 8008fac:	7812      	ldrb	r2, [r2, #0]
 8008fae:	70da      	strb	r2, [r3, #3]
  pUnionDesc->bSlaveInterface = pdev->tclasslist[pdev->classId].Ifs[1];
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 8008fb6:	4b25      	ldr	r3, [pc, #148]	@ (800904c <USBD_CMPSIT_CDCDesc+0x2a0>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	68f9      	ldr	r1, [r7, #12]
 8008fbc:	202c      	movs	r0, #44	@ 0x2c
 8008fbe:	fb00 f202 	mul.w	r2, r0, r2
 8008fc2:	440a      	add	r2, r1
 8008fc4:	f202 320d 	addw	r2, r2, #781	@ 0x30d
 8008fc8:	7812      	ldrb	r2, [r2, #0]
 8008fca:	711a      	strb	r2, [r3, #4]
  *Sze += (uint32_t)sizeof(USBD_CDCUnionFuncDescTypeDef);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	1d5a      	adds	r2, r3, #5
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	601a      	str	r2, [r3, #0]

  /* Append Endpoint descriptor to Configuration descriptor */
  __USBD_CMPSIT_SET_EP(pdev->tclasslist[pdev->classId].Eps[2].add, \
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681a      	ldr	r2, [r3, #0]
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	4413      	add	r3, r2
 8008fde:	461a      	mov	r2, r3
 8008fe0:	4b1b      	ldr	r3, [pc, #108]	@ (8009050 <USBD_CMPSIT_CDCDesc+0x2a4>)
 8008fe2:	601a      	str	r2, [r3, #0]
 8008fe4:	4b1a      	ldr	r3, [pc, #104]	@ (8009050 <USBD_CMPSIT_CDCDesc+0x2a4>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	2207      	movs	r2, #7
 8008fea:	701a      	strb	r2, [r3, #0]
 8008fec:	4b18      	ldr	r3, [pc, #96]	@ (8009050 <USBD_CMPSIT_CDCDesc+0x2a4>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	2205      	movs	r2, #5
 8008ff2:	705a      	strb	r2, [r3, #1]
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 8008ffa:	4b15      	ldr	r3, [pc, #84]	@ (8009050 <USBD_CMPSIT_CDCDesc+0x2a4>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	68f9      	ldr	r1, [r7, #12]
 8009000:	202c      	movs	r0, #44	@ 0x2c
 8009002:	fb00 f202 	mul.w	r2, r0, r2
 8009006:	440a      	add	r2, r1
 8009008:	f502 7240 	add.w	r2, r2, #768	@ 0x300
 800900c:	7812      	ldrb	r2, [r2, #0]
 800900e:	709a      	strb	r2, [r3, #2]
 8009010:	4b0f      	ldr	r3, [pc, #60]	@ (8009050 <USBD_CMPSIT_CDCDesc+0x2a4>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	2203      	movs	r2, #3
 8009016:	70da      	strb	r2, [r3, #3]
 8009018:	4b0d      	ldr	r3, [pc, #52]	@ (8009050 <USBD_CMPSIT_CDCDesc+0x2a4>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	2200      	movs	r2, #0
 800901e:	f042 0208 	orr.w	r2, r2, #8
 8009022:	711a      	strb	r2, [r3, #4]
 8009024:	2200      	movs	r2, #0
 8009026:	715a      	strb	r2, [r3, #5]
 8009028:	78fb      	ldrb	r3, [r7, #3]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d112      	bne.n	8009054 <USBD_CMPSIT_CDCDesc+0x2a8>
 800902e:	4b08      	ldr	r3, [pc, #32]	@ (8009050 <USBD_CMPSIT_CDCDesc+0x2a4>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	2210      	movs	r2, #16
 8009034:	719a      	strb	r2, [r3, #6]
 8009036:	e011      	b.n	800905c <USBD_CMPSIT_CDCDesc+0x2b0>
 8009038:	20000b18 	.word	0x20000b18
 800903c:	20000b1c 	.word	0x20000b1c
 8009040:	20000b20 	.word	0x20000b20
 8009044:	20000b24 	.word	0x20000b24
 8009048:	20000b28 	.word	0x20000b28
 800904c:	20000b2c 	.word	0x20000b2c
 8009050:	20000b30 	.word	0x20000b30
 8009054:	4b73      	ldr	r3, [pc, #460]	@ (8009224 <USBD_CMPSIT_CDCDesc+0x478>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	2210      	movs	r2, #16
 800905a:	719a      	strb	r2, [r3, #6]
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	1dda      	adds	r2, r3, #7
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	601a      	str	r2, [r3, #0]
                       USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE, CDC_HS_BINTERVAL, CDC_FS_BINTERVAL);

  /* Data Interface Descriptor */
  __USBD_CMPSIT_SET_IF(pdev->tclasslist[pdev->classId].Ifs[1], 0U, 2U, 0x0A, 0U, 0U, 0U);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681a      	ldr	r2, [r3, #0]
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	4413      	add	r3, r2
 800906e:	461a      	mov	r2, r3
 8009070:	4b6d      	ldr	r3, [pc, #436]	@ (8009228 <USBD_CMPSIT_CDCDesc+0x47c>)
 8009072:	601a      	str	r2, [r3, #0]
 8009074:	4b6c      	ldr	r3, [pc, #432]	@ (8009228 <USBD_CMPSIT_CDCDesc+0x47c>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	2209      	movs	r2, #9
 800907a:	701a      	strb	r2, [r3, #0]
 800907c:	4b6a      	ldr	r3, [pc, #424]	@ (8009228 <USBD_CMPSIT_CDCDesc+0x47c>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	2204      	movs	r2, #4
 8009082:	705a      	strb	r2, [r3, #1]
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 800908a:	4b67      	ldr	r3, [pc, #412]	@ (8009228 <USBD_CMPSIT_CDCDesc+0x47c>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	68f9      	ldr	r1, [r7, #12]
 8009090:	202c      	movs	r0, #44	@ 0x2c
 8009092:	fb00 f202 	mul.w	r2, r0, r2
 8009096:	440a      	add	r2, r1
 8009098:	f202 320d 	addw	r2, r2, #781	@ 0x30d
 800909c:	7812      	ldrb	r2, [r2, #0]
 800909e:	709a      	strb	r2, [r3, #2]
 80090a0:	4b61      	ldr	r3, [pc, #388]	@ (8009228 <USBD_CMPSIT_CDCDesc+0x47c>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	2200      	movs	r2, #0
 80090a6:	70da      	strb	r2, [r3, #3]
 80090a8:	4b5f      	ldr	r3, [pc, #380]	@ (8009228 <USBD_CMPSIT_CDCDesc+0x47c>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	2202      	movs	r2, #2
 80090ae:	711a      	strb	r2, [r3, #4]
 80090b0:	4b5d      	ldr	r3, [pc, #372]	@ (8009228 <USBD_CMPSIT_CDCDesc+0x47c>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	220a      	movs	r2, #10
 80090b6:	715a      	strb	r2, [r3, #5]
 80090b8:	4b5b      	ldr	r3, [pc, #364]	@ (8009228 <USBD_CMPSIT_CDCDesc+0x47c>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	2200      	movs	r2, #0
 80090be:	719a      	strb	r2, [r3, #6]
 80090c0:	4b59      	ldr	r3, [pc, #356]	@ (8009228 <USBD_CMPSIT_CDCDesc+0x47c>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	2200      	movs	r2, #0
 80090c6:	71da      	strb	r2, [r3, #7]
 80090c8:	4b57      	ldr	r3, [pc, #348]	@ (8009228 <USBD_CMPSIT_CDCDesc+0x47c>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	2200      	movs	r2, #0
 80090ce:	721a      	strb	r2, [r3, #8]
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f103 0209 	add.w	r2, r3, #9
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	601a      	str	r2, [r3, #0]

  if (speed == (uint8_t)USBD_SPEED_HIGH)
 80090dc:	78fb      	ldrb	r3, [r7, #3]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d10c      	bne.n	80090fc <USBD_CMPSIT_CDCDesc+0x350>
  {
    pdev->tclasslist[pdev->classId].CurrPcktSze = CDC_DATA_HS_MAX_PACKET_SIZE;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80090e8:	68fa      	ldr	r2, [r7, #12]
 80090ea:	212c      	movs	r1, #44	@ 0x2c
 80090ec:	fb01 f303 	mul.w	r3, r1, r3
 80090f0:	4413      	add	r3, r2
 80090f2:	f503 7344 	add.w	r3, r3, #784	@ 0x310
 80090f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80090fa:	601a      	str	r2, [r3, #0]
  }

  /* Append Endpoint descriptor to Configuration descriptor */
  __USBD_CMPSIT_SET_EP((pdev->tclasslist[pdev->classId].Eps[0].add), \
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681a      	ldr	r2, [r3, #0]
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	4413      	add	r3, r2
 8009104:	461a      	mov	r2, r3
 8009106:	4b47      	ldr	r3, [pc, #284]	@ (8009224 <USBD_CMPSIT_CDCDesc+0x478>)
 8009108:	601a      	str	r2, [r3, #0]
 800910a:	4b46      	ldr	r3, [pc, #280]	@ (8009224 <USBD_CMPSIT_CDCDesc+0x478>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	2207      	movs	r2, #7
 8009110:	701a      	strb	r2, [r3, #0]
 8009112:	4b44      	ldr	r3, [pc, #272]	@ (8009224 <USBD_CMPSIT_CDCDesc+0x478>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	2205      	movs	r2, #5
 8009118:	705a      	strb	r2, [r3, #1]
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 8009120:	4b40      	ldr	r3, [pc, #256]	@ (8009224 <USBD_CMPSIT_CDCDesc+0x478>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	68f9      	ldr	r1, [r7, #12]
 8009126:	202c      	movs	r0, #44	@ 0x2c
 8009128:	fb00 f202 	mul.w	r2, r0, r2
 800912c:	440a      	add	r2, r1
 800912e:	f502 723e 	add.w	r2, r2, #760	@ 0x2f8
 8009132:	7812      	ldrb	r2, [r2, #0]
 8009134:	709a      	strb	r2, [r3, #2]
 8009136:	4b3b      	ldr	r3, [pc, #236]	@ (8009224 <USBD_CMPSIT_CDCDesc+0x478>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	2202      	movs	r2, #2
 800913c:	70da      	strb	r2, [r3, #3]
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8009144:	68fa      	ldr	r2, [r7, #12]
 8009146:	212c      	movs	r1, #44	@ 0x2c
 8009148:	fb01 f303 	mul.w	r3, r1, r3
 800914c:	4413      	add	r3, r2
 800914e:	f503 7344 	add.w	r3, r3, #784	@ 0x310
 8009152:	681a      	ldr	r2, [r3, #0]
 8009154:	4b33      	ldr	r3, [pc, #204]	@ (8009224 <USBD_CMPSIT_CDCDesc+0x478>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	b292      	uxth	r2, r2
 800915a:	809a      	strh	r2, [r3, #4]
 800915c:	78fb      	ldrb	r3, [r7, #3]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d104      	bne.n	800916c <USBD_CMPSIT_CDCDesc+0x3c0>
 8009162:	4b30      	ldr	r3, [pc, #192]	@ (8009224 <USBD_CMPSIT_CDCDesc+0x478>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	2200      	movs	r2, #0
 8009168:	719a      	strb	r2, [r3, #6]
 800916a:	e003      	b.n	8009174 <USBD_CMPSIT_CDCDesc+0x3c8>
 800916c:	4b2d      	ldr	r3, [pc, #180]	@ (8009224 <USBD_CMPSIT_CDCDesc+0x478>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	2200      	movs	r2, #0
 8009172:	719a      	strb	r2, [r3, #6]
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	1dda      	adds	r2, r3, #7
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	601a      	str	r2, [r3, #0]
                       (USBD_EP_TYPE_BULK), (pdev->tclasslist[pdev->classId].CurrPcktSze), (0U), (0U));

  /* Append Endpoint descriptor to Configuration descriptor */
  __USBD_CMPSIT_SET_EP((pdev->tclasslist[pdev->classId].Eps[1].add), \
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681a      	ldr	r2, [r3, #0]
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	4413      	add	r3, r2
 8009186:	461a      	mov	r2, r3
 8009188:	4b26      	ldr	r3, [pc, #152]	@ (8009224 <USBD_CMPSIT_CDCDesc+0x478>)
 800918a:	601a      	str	r2, [r3, #0]
 800918c:	4b25      	ldr	r3, [pc, #148]	@ (8009224 <USBD_CMPSIT_CDCDesc+0x478>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	2207      	movs	r2, #7
 8009192:	701a      	strb	r2, [r3, #0]
 8009194:	4b23      	ldr	r3, [pc, #140]	@ (8009224 <USBD_CMPSIT_CDCDesc+0x478>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	2205      	movs	r2, #5
 800919a:	705a      	strb	r2, [r3, #1]
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 80091a2:	4b20      	ldr	r3, [pc, #128]	@ (8009224 <USBD_CMPSIT_CDCDesc+0x478>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	68f9      	ldr	r1, [r7, #12]
 80091a8:	202c      	movs	r0, #44	@ 0x2c
 80091aa:	fb00 f202 	mul.w	r2, r0, r2
 80091ae:	440a      	add	r2, r1
 80091b0:	f502 723f 	add.w	r2, r2, #764	@ 0x2fc
 80091b4:	7812      	ldrb	r2, [r2, #0]
 80091b6:	709a      	strb	r2, [r3, #2]
 80091b8:	4b1a      	ldr	r3, [pc, #104]	@ (8009224 <USBD_CMPSIT_CDCDesc+0x478>)
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	2202      	movs	r2, #2
 80091be:	70da      	strb	r2, [r3, #3]
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80091c6:	68fa      	ldr	r2, [r7, #12]
 80091c8:	212c      	movs	r1, #44	@ 0x2c
 80091ca:	fb01 f303 	mul.w	r3, r1, r3
 80091ce:	4413      	add	r3, r2
 80091d0:	f503 7344 	add.w	r3, r3, #784	@ 0x310
 80091d4:	681a      	ldr	r2, [r3, #0]
 80091d6:	4b13      	ldr	r3, [pc, #76]	@ (8009224 <USBD_CMPSIT_CDCDesc+0x478>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	b292      	uxth	r2, r2
 80091dc:	809a      	strh	r2, [r3, #4]
 80091de:	78fb      	ldrb	r3, [r7, #3]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d104      	bne.n	80091ee <USBD_CMPSIT_CDCDesc+0x442>
 80091e4:	4b0f      	ldr	r3, [pc, #60]	@ (8009224 <USBD_CMPSIT_CDCDesc+0x478>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	2200      	movs	r2, #0
 80091ea:	719a      	strb	r2, [r3, #6]
 80091ec:	e003      	b.n	80091f6 <USBD_CMPSIT_CDCDesc+0x44a>
 80091ee:	4b0d      	ldr	r3, [pc, #52]	@ (8009224 <USBD_CMPSIT_CDCDesc+0x478>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	2200      	movs	r2, #0
 80091f4:	719a      	strb	r2, [r3, #6]
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	1dda      	adds	r2, r3, #7
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	601a      	str	r2, [r3, #0]
                       (USBD_EP_TYPE_BULK), (pdev->tclasslist[pdev->classId].CurrPcktSze), (0U), (0U));

  /* Update Config Descriptor and IAD descriptor */
  ((USBD_ConfigDescTypeDef *)pConf)->bNumInterfaces += 2U;
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	791a      	ldrb	r2, [r3, #4]
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	3202      	adds	r2, #2
 8009208:	b2d2      	uxtb	r2, r2
 800920a:	711a      	strb	r2, [r3, #4]
  ((USBD_ConfigDescTypeDef *)pConf)->wTotalLength = (uint16_t)(*Sze);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681a      	ldr	r2, [r3, #0]
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	b292      	uxth	r2, r2
 8009214:	805a      	strh	r2, [r3, #2]
}
 8009216:	bf00      	nop
 8009218:	3714      	adds	r7, #20
 800921a:	46bd      	mov	sp, r7
 800921c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009220:	4770      	bx	lr
 8009222:	bf00      	nop
 8009224:	20000b30 	.word	0x20000b30
 8009228:	20000b1c 	.word	0x20000b1c

0800922c <USBD_CMPSIT_SetClassID>:
  * @param  Class: Class type, can be CLASS_TYPE_NONE if requested to find class from setup request
  * @param  Instance: Instance number of the class (0 if first/unique instance, >0 otherwise)
  * @retval The Class ID, The pdev->classId is set with the value of the selected class ID.
  */
uint32_t  USBD_CMPSIT_SetClassID(USBD_HandleTypeDef *pdev, USBD_CompositeClassTypeDef Class, uint32_t Instance)
{
 800922c:	b480      	push	{r7}
 800922e:	b087      	sub	sp, #28
 8009230:	af00      	add	r7, sp, #0
 8009232:	60f8      	str	r0, [r7, #12]
 8009234:	460b      	mov	r3, r1
 8009236:	607a      	str	r2, [r7, #4]
 8009238:	72fb      	strb	r3, [r7, #11]
  uint32_t idx;
  uint32_t inst = 0U;
 800923a:	2300      	movs	r3, #0
 800923c:	613b      	str	r3, [r7, #16]

  /* Unroll all already activated classes */
  for (idx = 0U; idx < pdev->NumClasses; idx++)
 800923e:	2300      	movs	r3, #0
 8009240:	617b      	str	r3, [r7, #20]
 8009242:	e026      	b.n	8009292 <USBD_CMPSIT_SetClassID+0x66>
  {
    /* Check if the class correspond to the requested type and if it is active */
    if (((USBD_CompositeClassTypeDef)(pdev->tclasslist[idx].ClassType) == Class) &&
 8009244:	68fa      	ldr	r2, [r7, #12]
 8009246:	697b      	ldr	r3, [r7, #20]
 8009248:	212c      	movs	r1, #44	@ 0x2c
 800924a:	fb01 f303 	mul.w	r3, r1, r3
 800924e:	4413      	add	r3, r2
 8009250:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 8009254:	781b      	ldrb	r3, [r3, #0]
 8009256:	7afa      	ldrb	r2, [r7, #11]
 8009258:	429a      	cmp	r2, r3
 800925a:	d117      	bne.n	800928c <USBD_CMPSIT_SetClassID+0x60>
        ((pdev->tclasslist[idx].Active) == 1U))
 800925c:	68fa      	ldr	r2, [r7, #12]
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	212c      	movs	r1, #44	@ 0x2c
 8009262:	fb01 f303 	mul.w	r3, r1, r3
 8009266:	4413      	add	r3, r2
 8009268:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 800926c:	681b      	ldr	r3, [r3, #0]
    if (((USBD_CompositeClassTypeDef)(pdev->tclasslist[idx].ClassType) == Class) &&
 800926e:	2b01      	cmp	r3, #1
 8009270:	d10c      	bne.n	800928c <USBD_CMPSIT_SetClassID+0x60>
    {
      if (inst == Instance)
 8009272:	693a      	ldr	r2, [r7, #16]
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	429a      	cmp	r2, r3
 8009278:	d105      	bne.n	8009286 <USBD_CMPSIT_SetClassID+0x5a>
      {
        /* Set the new class ID */
        pdev->classId = idx;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	697a      	ldr	r2, [r7, #20]
 800927e:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0

        /* Return the class ID value */
        return (idx);
 8009282:	697b      	ldr	r3, [r7, #20]
 8009284:	e00c      	b.n	80092a0 <USBD_CMPSIT_SetClassID+0x74>
      }
      else
      {
        /* Increment instance index and look for next instance */
        inst++;
 8009286:	693b      	ldr	r3, [r7, #16]
 8009288:	3301      	adds	r3, #1
 800928a:	613b      	str	r3, [r7, #16]
  for (idx = 0U; idx < pdev->NumClasses; idx++)
 800928c:	697b      	ldr	r3, [r7, #20]
 800928e:	3301      	adds	r3, #1
 8009290:	617b      	str	r3, [r7, #20]
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	f8d3 32e4 	ldr.w	r3, [r3, #740]	@ 0x2e4
 8009298:	697a      	ldr	r2, [r7, #20]
 800929a:	429a      	cmp	r2, r3
 800929c:	d3d2      	bcc.n	8009244 <USBD_CMPSIT_SetClassID+0x18>
      }
    }
  }

  /* No class found, return 0xFF */
  return 0xFFU;
 800929e:	23ff      	movs	r3, #255	@ 0xff
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	371c      	adds	r7, #28
 80092a4:	46bd      	mov	sp, r7
 80092a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092aa:	4770      	bx	lr

080092ac <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b084      	sub	sp, #16
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	460b      	mov	r3, r1
 80092b6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 80092b8:	2054      	movs	r0, #84	@ 0x54
 80092ba:	f000 fc8b 	bl	8009bd4 <USBD_static_malloc>
 80092be:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d10a      	bne.n	80092dc <USBD_CUSTOM_HID_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80092cc:	687a      	ldr	r2, [r7, #4]
 80092ce:	33b0      	adds	r3, #176	@ 0xb0
 80092d0:	009b      	lsls	r3, r3, #2
 80092d2:	4413      	add	r3, r2
 80092d4:	2200      	movs	r2, #0
 80092d6:	605a      	str	r2, [r3, #4]
    return (uint8_t)USBD_EMEM;
 80092d8:	2302      	movs	r3, #2
 80092da:	e0a7      	b.n	800942c <USBD_CUSTOM_HID_Init+0x180>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80092e2:	687a      	ldr	r2, [r7, #4]
 80092e4:	33b0      	adds	r3, #176	@ 0xb0
 80092e6:	009b      	lsls	r3, r3, #2
 80092e8:	4413      	add	r3, r2
 80092ea:	68fa      	ldr	r2, [r7, #12]
 80092ec:	605a      	str	r2, [r3, #4]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80092f4:	687a      	ldr	r2, [r7, #4]
 80092f6:	33b0      	adds	r3, #176	@ 0xb0
 80092f8:	009b      	lsls	r3, r3, #2
 80092fa:	4413      	add	r3, r2
 80092fc:	685a      	ldr	r2, [r3, #4]
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800930a:	b2db      	uxtb	r3, r3
 800930c:	2203      	movs	r2, #3
 800930e:	2180      	movs	r1, #128	@ 0x80
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f001 f90b 	bl	800a52c <USBD_CoreGetEPAdd>
 8009316:	4603      	mov	r3, r0
 8009318:	461a      	mov	r2, r3
 800931a:	4b46      	ldr	r3, [pc, #280]	@ (8009434 <USBD_CUSTOM_HID_Init+0x188>)
 800931c:	701a      	strb	r2, [r3, #0]
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8009324:	b2db      	uxtb	r3, r3
 8009326:	2203      	movs	r2, #3
 8009328:	2100      	movs	r1, #0
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f001 f8fe 	bl	800a52c <USBD_CoreGetEPAdd>
 8009330:	4603      	mov	r3, r0
 8009332:	461a      	mov	r2, r3
 8009334:	4b40      	ldr	r3, [pc, #256]	@ (8009438 <USBD_CUSTOM_HID_Init+0x18c>)
 8009336:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	7c1b      	ldrb	r3, [r3, #16]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d11b      	bne.n	8009378 <USBD_CUSTOM_HID_Init+0xcc>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8009340:	4b3c      	ldr	r3, [pc, #240]	@ (8009434 <USBD_CUSTOM_HID_Init+0x188>)
 8009342:	781b      	ldrb	r3, [r3, #0]
 8009344:	f003 020f 	and.w	r2, r3, #15
 8009348:	6879      	ldr	r1, [r7, #4]
 800934a:	4613      	mov	r3, r2
 800934c:	009b      	lsls	r3, r3, #2
 800934e:	4413      	add	r3, r2
 8009350:	009b      	lsls	r3, r3, #2
 8009352:	440b      	add	r3, r1
 8009354:	3326      	adds	r3, #38	@ 0x26
 8009356:	2205      	movs	r2, #5
 8009358:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800935a:	4b37      	ldr	r3, [pc, #220]	@ (8009438 <USBD_CUSTOM_HID_Init+0x18c>)
 800935c:	781b      	ldrb	r3, [r3, #0]
 800935e:	f003 020f 	and.w	r2, r3, #15
 8009362:	6879      	ldr	r1, [r7, #4]
 8009364:	4613      	mov	r3, r2
 8009366:	009b      	lsls	r3, r3, #2
 8009368:	4413      	add	r3, r2
 800936a:	009b      	lsls	r3, r3, #2
 800936c:	440b      	add	r3, r1
 800936e:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8009372:	2205      	movs	r2, #5
 8009374:	801a      	strh	r2, [r3, #0]
 8009376:	e01a      	b.n	80093ae <USBD_CUSTOM_HID_Init+0x102>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8009378:	4b2e      	ldr	r3, [pc, #184]	@ (8009434 <USBD_CUSTOM_HID_Init+0x188>)
 800937a:	781b      	ldrb	r3, [r3, #0]
 800937c:	f003 020f 	and.w	r2, r3, #15
 8009380:	6879      	ldr	r1, [r7, #4]
 8009382:	4613      	mov	r3, r2
 8009384:	009b      	lsls	r3, r3, #2
 8009386:	4413      	add	r3, r2
 8009388:	009b      	lsls	r3, r3, #2
 800938a:	440b      	add	r3, r1
 800938c:	3326      	adds	r3, #38	@ 0x26
 800938e:	2205      	movs	r2, #5
 8009390:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8009392:	4b29      	ldr	r3, [pc, #164]	@ (8009438 <USBD_CUSTOM_HID_Init+0x18c>)
 8009394:	781b      	ldrb	r3, [r3, #0]
 8009396:	f003 020f 	and.w	r2, r3, #15
 800939a:	6879      	ldr	r1, [r7, #4]
 800939c:	4613      	mov	r3, r2
 800939e:	009b      	lsls	r3, r3, #2
 80093a0:	4413      	add	r3, r2
 80093a2:	009b      	lsls	r3, r3, #2
 80093a4:	440b      	add	r3, r1
 80093a6:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 80093aa:	2205      	movs	r2, #5
 80093ac:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 80093ae:	4b21      	ldr	r3, [pc, #132]	@ (8009434 <USBD_CUSTOM_HID_Init+0x188>)
 80093b0:	7819      	ldrb	r1, [r3, #0]
 80093b2:	2340      	movs	r3, #64	@ 0x40
 80093b4:	2203      	movs	r2, #3
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f000 fb13 	bl	80099e2 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 80093bc:	4b1d      	ldr	r3, [pc, #116]	@ (8009434 <USBD_CUSTOM_HID_Init+0x188>)
 80093be:	781b      	ldrb	r3, [r3, #0]
 80093c0:	f003 020f 	and.w	r2, r3, #15
 80093c4:	6879      	ldr	r1, [r7, #4]
 80093c6:	4613      	mov	r3, r2
 80093c8:	009b      	lsls	r3, r3, #2
 80093ca:	4413      	add	r3, r2
 80093cc:	009b      	lsls	r3, r3, #2
 80093ce:	440b      	add	r3, r1
 80093d0:	3324      	adds	r3, #36	@ 0x24
 80093d2:	2201      	movs	r2, #1
 80093d4:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 80093d6:	4b18      	ldr	r3, [pc, #96]	@ (8009438 <USBD_CUSTOM_HID_Init+0x18c>)
 80093d8:	7819      	ldrb	r1, [r3, #0]
 80093da:	2340      	movs	r3, #64	@ 0x40
 80093dc:	2203      	movs	r2, #3
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f000 faff 	bl	80099e2 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 80093e4:	4b14      	ldr	r3, [pc, #80]	@ (8009438 <USBD_CUSTOM_HID_Init+0x18c>)
 80093e6:	781b      	ldrb	r3, [r3, #0]
 80093e8:	f003 020f 	and.w	r2, r3, #15
 80093ec:	6879      	ldr	r1, [r7, #4]
 80093ee:	4613      	mov	r3, r2
 80093f0:	009b      	lsls	r3, r3, #2
 80093f2:	4413      	add	r3, r2
 80093f4:	009b      	lsls	r3, r3, #2
 80093f6:	440b      	add	r3, r1
 80093f8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80093fc:	2201      	movs	r2, #1
 80093fe:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	2200      	movs	r2, #0
 8009404:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800940e:	687a      	ldr	r2, [r7, #4]
 8009410:	33b2      	adds	r3, #178	@ 0xb2
 8009412:	009b      	lsls	r3, r3, #2
 8009414:	4413      	add	r3, r2
 8009416:	685b      	ldr	r3, [r3, #4]
 8009418:	685b      	ldr	r3, [r3, #4]
 800941a:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 800941c:	4b06      	ldr	r3, [pc, #24]	@ (8009438 <USBD_CUSTOM_HID_Init+0x18c>)
 800941e:	7819      	ldrb	r1, [r3, #0]
 8009420:	68fa      	ldr	r2, [r7, #12]
 8009422:	2340      	movs	r3, #64	@ 0x40
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f000 fba7 	bl	8009b78 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
 800942a:	2300      	movs	r3, #0
}
 800942c:	4618      	mov	r0, r3
 800942e:	3710      	adds	r7, #16
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}
 8009434:	200000f1 	.word	0x200000f1
 8009438:	200000f2 	.word	0x200000f2

0800943c <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b082      	sub	sp, #8
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
 8009444:	460b      	mov	r3, r1
 8009446:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800944e:	b2db      	uxtb	r3, r3
 8009450:	2203      	movs	r2, #3
 8009452:	2180      	movs	r1, #128	@ 0x80
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f001 f869 	bl	800a52c <USBD_CoreGetEPAdd>
 800945a:	4603      	mov	r3, r0
 800945c:	461a      	mov	r2, r3
 800945e:	4b41      	ldr	r3, [pc, #260]	@ (8009564 <USBD_CUSTOM_HID_DeInit+0x128>)
 8009460:	701a      	strb	r2, [r3, #0]
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8009468:	b2db      	uxtb	r3, r3
 800946a:	2203      	movs	r2, #3
 800946c:	2100      	movs	r1, #0
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f001 f85c 	bl	800a52c <USBD_CoreGetEPAdd>
 8009474:	4603      	mov	r3, r0
 8009476:	461a      	mov	r2, r3
 8009478:	4b3b      	ldr	r3, [pc, #236]	@ (8009568 <USBD_CUSTOM_HID_DeInit+0x12c>)
 800947a:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 800947c:	4b39      	ldr	r3, [pc, #228]	@ (8009564 <USBD_CUSTOM_HID_DeInit+0x128>)
 800947e:	781b      	ldrb	r3, [r3, #0]
 8009480:	4619      	mov	r1, r3
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f000 facd 	bl	8009a22 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 8009488:	4b36      	ldr	r3, [pc, #216]	@ (8009564 <USBD_CUSTOM_HID_DeInit+0x128>)
 800948a:	781b      	ldrb	r3, [r3, #0]
 800948c:	f003 020f 	and.w	r2, r3, #15
 8009490:	6879      	ldr	r1, [r7, #4]
 8009492:	4613      	mov	r3, r2
 8009494:	009b      	lsls	r3, r3, #2
 8009496:	4413      	add	r3, r2
 8009498:	009b      	lsls	r3, r3, #2
 800949a:	440b      	add	r3, r1
 800949c:	3324      	adds	r3, #36	@ 0x24
 800949e:	2200      	movs	r2, #0
 80094a0:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 80094a2:	4b30      	ldr	r3, [pc, #192]	@ (8009564 <USBD_CUSTOM_HID_DeInit+0x128>)
 80094a4:	781b      	ldrb	r3, [r3, #0]
 80094a6:	f003 020f 	and.w	r2, r3, #15
 80094aa:	6879      	ldr	r1, [r7, #4]
 80094ac:	4613      	mov	r3, r2
 80094ae:	009b      	lsls	r3, r3, #2
 80094b0:	4413      	add	r3, r2
 80094b2:	009b      	lsls	r3, r3, #2
 80094b4:	440b      	add	r3, r1
 80094b6:	3326      	adds	r3, #38	@ 0x26
 80094b8:	2200      	movs	r2, #0
 80094ba:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 80094bc:	4b2a      	ldr	r3, [pc, #168]	@ (8009568 <USBD_CUSTOM_HID_DeInit+0x12c>)
 80094be:	781b      	ldrb	r3, [r3, #0]
 80094c0:	4619      	mov	r1, r3
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f000 faad 	bl	8009a22 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 80094c8:	4b27      	ldr	r3, [pc, #156]	@ (8009568 <USBD_CUSTOM_HID_DeInit+0x12c>)
 80094ca:	781b      	ldrb	r3, [r3, #0]
 80094cc:	f003 020f 	and.w	r2, r3, #15
 80094d0:	6879      	ldr	r1, [r7, #4]
 80094d2:	4613      	mov	r3, r2
 80094d4:	009b      	lsls	r3, r3, #2
 80094d6:	4413      	add	r3, r2
 80094d8:	009b      	lsls	r3, r3, #2
 80094da:	440b      	add	r3, r1
 80094dc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80094e0:	2200      	movs	r2, #0
 80094e2:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 80094e4:	4b20      	ldr	r3, [pc, #128]	@ (8009568 <USBD_CUSTOM_HID_DeInit+0x12c>)
 80094e6:	781b      	ldrb	r3, [r3, #0]
 80094e8:	f003 020f 	and.w	r2, r3, #15
 80094ec:	6879      	ldr	r1, [r7, #4]
 80094ee:	4613      	mov	r3, r2
 80094f0:	009b      	lsls	r3, r3, #2
 80094f2:	4413      	add	r3, r2
 80094f4:	009b      	lsls	r3, r3, #2
 80094f6:	440b      	add	r3, r1
 80094f8:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 80094fc:	2200      	movs	r2, #0
 80094fe:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8009506:	687a      	ldr	r2, [r7, #4]
 8009508:	33b0      	adds	r3, #176	@ 0xb0
 800950a:	009b      	lsls	r3, r3, #2
 800950c:	4413      	add	r3, r2
 800950e:	685b      	ldr	r3, [r3, #4]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d021      	beq.n	8009558 <USBD_CUSTOM_HID_DeInit+0x11c>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800951a:	687a      	ldr	r2, [r7, #4]
 800951c:	33b2      	adds	r3, #178	@ 0xb2
 800951e:	009b      	lsls	r3, r3, #2
 8009520:	4413      	add	r3, r2
 8009522:	685b      	ldr	r3, [r3, #4]
 8009524:	689b      	ldr	r3, [r3, #8]
 8009526:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800952e:	687a      	ldr	r2, [r7, #4]
 8009530:	33b0      	adds	r3, #176	@ 0xb0
 8009532:	009b      	lsls	r3, r3, #2
 8009534:	4413      	add	r3, r2
 8009536:	685b      	ldr	r3, [r3, #4]
 8009538:	4618      	mov	r0, r3
 800953a:	f000 fb59 	bl	8009bf0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8009544:	687a      	ldr	r2, [r7, #4]
 8009546:	33b0      	adds	r3, #176	@ 0xb0
 8009548:	009b      	lsls	r3, r3, #2
 800954a:	4413      	add	r3, r2
 800954c:	2200      	movs	r2, #0
 800954e:	605a      	str	r2, [r3, #4]
    pdev->pClassData = NULL;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2200      	movs	r2, #0
 8009554:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  }

  return (uint8_t)USBD_OK;
 8009558:	2300      	movs	r3, #0
}
 800955a:	4618      	mov	r0, r3
 800955c:	3708      	adds	r7, #8
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}
 8009562:	bf00      	nop
 8009564:	200000f1 	.word	0x200000f1
 8009568:	200000f2 	.word	0x200000f2

0800956c <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b088      	sub	sp, #32
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
 8009574:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800957c:	687a      	ldr	r2, [r7, #4]
 800957e:	33b0      	adds	r3, #176	@ 0xb0
 8009580:	009b      	lsls	r3, r3, #2
 8009582:	4413      	add	r3, r2
 8009584:	685b      	ldr	r3, [r3, #4]
 8009586:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8009588:	2300      	movs	r3, #0
 800958a:	83fb      	strh	r3, [r7, #30]
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
  uint16_t ReportLength = 0U;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */
  uint8_t  *pbuf = NULL;
 800958c:	2300      	movs	r3, #0
 800958e:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8009590:	2300      	movs	r3, #0
 8009592:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8009594:	2300      	movs	r3, #0
 8009596:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 8009598:	693b      	ldr	r3, [r7, #16]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d101      	bne.n	80095a2 <USBD_CUSTOM_HID_Setup+0x36>
  {
    return (uint8_t)USBD_FAIL;
 800959e:	2303      	movs	r3, #3
 80095a0:	e0f7      	b.n	8009792 <USBD_CUSTOM_HID_Setup+0x226>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	781b      	ldrb	r3, [r3, #0]
 80095a6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d055      	beq.n	800965a <USBD_CUSTOM_HID_Setup+0xee>
 80095ae:	2b20      	cmp	r3, #32
 80095b0:	f040 80e7 	bne.w	8009782 <USBD_CUSTOM_HID_Setup+0x216>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	785b      	ldrb	r3, [r3, #1]
 80095b8:	3b02      	subs	r3, #2
 80095ba:	2b09      	cmp	r3, #9
 80095bc:	d845      	bhi.n	800964a <USBD_CUSTOM_HID_Setup+0xde>
 80095be:	a201      	add	r2, pc, #4	@ (adr r2, 80095c4 <USBD_CUSTOM_HID_Setup+0x58>)
 80095c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095c4:	0800961d 	.word	0x0800961d
 80095c8:	080095fb 	.word	0x080095fb
 80095cc:	0800964b 	.word	0x0800964b
 80095d0:	0800964b 	.word	0x0800964b
 80095d4:	0800964b 	.word	0x0800964b
 80095d8:	0800964b 	.word	0x0800964b
 80095dc:	0800964b 	.word	0x0800964b
 80095e0:	0800962d 	.word	0x0800962d
 80095e4:	0800960b 	.word	0x0800960b
 80095e8:	080095ed 	.word	0x080095ed
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	885b      	ldrh	r3, [r3, #2]
 80095f0:	b2db      	uxtb	r3, r3
 80095f2:	461a      	mov	r2, r3
 80095f4:	693b      	ldr	r3, [r7, #16]
 80095f6:	641a      	str	r2, [r3, #64]	@ 0x40
          break;
 80095f8:	e02e      	b.n	8009658 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80095fa:	693b      	ldr	r3, [r7, #16]
 80095fc:	3340      	adds	r3, #64	@ 0x40
 80095fe:	2201      	movs	r2, #1
 8009600:	4619      	mov	r1, r3
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f001 ff91 	bl	800b52a <USBD_CtlSendData>
          break;
 8009608:	e026      	b.n	8009658 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	885b      	ldrh	r3, [r3, #2]
 800960e:	0a1b      	lsrs	r3, r3, #8
 8009610:	b29b      	uxth	r3, r3
 8009612:	b2db      	uxtb	r3, r3
 8009614:	461a      	mov	r2, r3
 8009616:	693b      	ldr	r3, [r7, #16]
 8009618:	645a      	str	r2, [r3, #68]	@ 0x44
          break;
 800961a:	e01d      	b.n	8009658 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800961c:	693b      	ldr	r3, [r7, #16]
 800961e:	3344      	adds	r3, #68	@ 0x44
 8009620:	2201      	movs	r2, #1
 8009622:	4619      	mov	r1, r3
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f001 ff80 	bl	800b52a <USBD_CtlSendData>
          break;
 800962a:	e015      	b.n	8009658 <USBD_CUSTOM_HID_Setup+0xec>
            ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->CtrlReqComplete(req->bRequest,
                                                                                            req->wLength);
          }
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED
          hhid->IsReportAvailable = 1U;
 800962c:	693b      	ldr	r3, [r7, #16]
 800962e:	2201      	movs	r2, #1
 8009630:	64da      	str	r2, [r3, #76]	@ 0x4c
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8009632:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	88db      	ldrh	r3, [r3, #6]
 8009638:	2b40      	cmp	r3, #64	@ 0x40
 800963a:	bf28      	it	cs
 800963c:	2340      	movcs	r3, #64	@ 0x40
 800963e:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8009640:	461a      	mov	r2, r3
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f001 ff9d 	bl	800b582 <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
 8009648:	e006      	b.n	8009658 <USBD_CUSTOM_HID_Setup+0xec>
          }
          break;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */

        default:
          USBD_CtlError(pdev, req);
 800964a:	6839      	ldr	r1, [r7, #0]
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f001 fdec 	bl	800b22a <USBD_CtlError>
          ret = USBD_FAIL;
 8009652:	2303      	movs	r3, #3
 8009654:	75fb      	strb	r3, [r7, #23]
          break;
 8009656:	bf00      	nop
      }
      break;
 8009658:	e09a      	b.n	8009790 <USBD_CUSTOM_HID_Setup+0x224>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	785b      	ldrb	r3, [r3, #1]
 800965e:	2b0b      	cmp	r3, #11
 8009660:	f200 8086 	bhi.w	8009770 <USBD_CUSTOM_HID_Setup+0x204>
 8009664:	a201      	add	r2, pc, #4	@ (adr r2, 800966c <USBD_CUSTOM_HID_Setup+0x100>)
 8009666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800966a:	bf00      	nop
 800966c:	0800969d 	.word	0x0800969d
 8009670:	0800977f 	.word	0x0800977f
 8009674:	08009771 	.word	0x08009771
 8009678:	08009771 	.word	0x08009771
 800967c:	08009771 	.word	0x08009771
 8009680:	08009771 	.word	0x08009771
 8009684:	080096c7 	.word	0x080096c7
 8009688:	08009771 	.word	0x08009771
 800968c:	08009771 	.word	0x08009771
 8009690:	08009771 	.word	0x08009771
 8009694:	0800971f 	.word	0x0800971f
 8009698:	08009749 	.word	0x08009749
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096a2:	b2db      	uxtb	r3, r3
 80096a4:	2b03      	cmp	r3, #3
 80096a6:	d107      	bne.n	80096b8 <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80096a8:	f107 030e 	add.w	r3, r7, #14
 80096ac:	2202      	movs	r2, #2
 80096ae:	4619      	mov	r1, r3
 80096b0:	6878      	ldr	r0, [r7, #4]
 80096b2:	f001 ff3a 	bl	800b52a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80096b6:	e063      	b.n	8009780 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 80096b8:	6839      	ldr	r1, [r7, #0]
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f001 fdb5 	bl	800b22a <USBD_CtlError>
            ret = USBD_FAIL;
 80096c0:	2303      	movs	r3, #3
 80096c2:	75fb      	strb	r3, [r7, #23]
          break;
 80096c4:	e05c      	b.n	8009780 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	885b      	ldrh	r3, [r3, #2]
 80096ca:	0a1b      	lsrs	r3, r3, #8
 80096cc:	b29b      	uxth	r3, r3
 80096ce:	2b22      	cmp	r3, #34	@ 0x22
 80096d0:	d110      	bne.n	80096f4 <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	88db      	ldrh	r3, [r3, #6]
 80096d6:	2b21      	cmp	r3, #33	@ 0x21
 80096d8:	bf28      	it	cs
 80096da:	2321      	movcs	r3, #33	@ 0x21
 80096dc:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80096e4:	687a      	ldr	r2, [r7, #4]
 80096e6:	33b2      	adds	r3, #178	@ 0xb2
 80096e8:	009b      	lsls	r3, r3, #2
 80096ea:	4413      	add	r3, r2
 80096ec:	685b      	ldr	r3, [r3, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	61bb      	str	r3, [r7, #24]
 80096f2:	e00d      	b.n	8009710 <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	885b      	ldrh	r3, [r3, #2]
 80096f8:	0a1b      	lsrs	r3, r3, #8
 80096fa:	b29b      	uxth	r3, r3
 80096fc:	2b21      	cmp	r3, #33	@ 0x21
 80096fe:	d107      	bne.n	8009710 <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8009700:	4b26      	ldr	r3, [pc, #152]	@ (800979c <USBD_CUSTOM_HID_Setup+0x230>)
 8009702:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	88db      	ldrh	r3, [r3, #6]
 8009708:	2b09      	cmp	r3, #9
 800970a:	bf28      	it	cs
 800970c:	2309      	movcs	r3, #9
 800970e:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 8009710:	8bfb      	ldrh	r3, [r7, #30]
 8009712:	461a      	mov	r2, r3
 8009714:	69b9      	ldr	r1, [r7, #24]
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f001 ff07 	bl	800b52a <USBD_CtlSendData>
          break;
 800971c:	e030      	b.n	8009780 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009724:	b2db      	uxtb	r3, r3
 8009726:	2b03      	cmp	r3, #3
 8009728:	d107      	bne.n	800973a <USBD_CUSTOM_HID_Setup+0x1ce>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800972a:	693b      	ldr	r3, [r7, #16]
 800972c:	3348      	adds	r3, #72	@ 0x48
 800972e:	2201      	movs	r2, #1
 8009730:	4619      	mov	r1, r3
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f001 fef9 	bl	800b52a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009738:	e022      	b.n	8009780 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 800973a:	6839      	ldr	r1, [r7, #0]
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	f001 fd74 	bl	800b22a <USBD_CtlError>
            ret = USBD_FAIL;
 8009742:	2303      	movs	r3, #3
 8009744:	75fb      	strb	r3, [r7, #23]
          break;
 8009746:	e01b      	b.n	8009780 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800974e:	b2db      	uxtb	r3, r3
 8009750:	2b03      	cmp	r3, #3
 8009752:	d106      	bne.n	8009762 <USBD_CUSTOM_HID_Setup+0x1f6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	885b      	ldrh	r3, [r3, #2]
 8009758:	b2db      	uxtb	r3, r3
 800975a:	461a      	mov	r2, r3
 800975c:	693b      	ldr	r3, [r7, #16]
 800975e:	649a      	str	r2, [r3, #72]	@ 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009760:	e00e      	b.n	8009780 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8009762:	6839      	ldr	r1, [r7, #0]
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f001 fd60 	bl	800b22a <USBD_CtlError>
            ret = USBD_FAIL;
 800976a:	2303      	movs	r3, #3
 800976c:	75fb      	strb	r3, [r7, #23]
          break;
 800976e:	e007      	b.n	8009780 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009770:	6839      	ldr	r1, [r7, #0]
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f001 fd59 	bl	800b22a <USBD_CtlError>
          ret = USBD_FAIL;
 8009778:	2303      	movs	r3, #3
 800977a:	75fb      	strb	r3, [r7, #23]
          break;
 800977c:	e000      	b.n	8009780 <USBD_CUSTOM_HID_Setup+0x214>
          break;
 800977e:	bf00      	nop
      }
      break;
 8009780:	e006      	b.n	8009790 <USBD_CUSTOM_HID_Setup+0x224>

    default:
      USBD_CtlError(pdev, req);
 8009782:	6839      	ldr	r1, [r7, #0]
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f001 fd50 	bl	800b22a <USBD_CtlError>
      ret = USBD_FAIL;
 800978a:	2303      	movs	r3, #3
 800978c:	75fb      	strb	r3, [r7, #23]
      break;
 800978e:	bf00      	nop
  }
  return (uint8_t)ret;
 8009790:	7dfb      	ldrb	r3, [r7, #23]
}
 8009792:	4618      	mov	r0, r3
 8009794:	3720      	adds	r7, #32
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}
 800979a:	bf00      	nop
 800979c:	200000e8 	.word	0x200000e8

080097a0 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80097a0:	b480      	push	{r7}
 80097a2:	b083      	sub	sp, #12
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
 80097a8:	460b      	mov	r3, r1
 80097aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80097b2:	687a      	ldr	r2, [r7, #4]
 80097b4:	33b0      	adds	r3, #176	@ 0xb0
 80097b6:	009b      	lsls	r3, r3, #2
 80097b8:	4413      	add	r3, r2
 80097ba:	685b      	ldr	r3, [r3, #4]
 80097bc:	2200      	movs	r2, #0
 80097be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return (uint8_t)USBD_OK;
 80097c2:	2300      	movs	r3, #0
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	370c      	adds	r7, #12
 80097c8:	46bd      	mov	sp, r7
 80097ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ce:	4770      	bx	lr

080097d0 <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b084      	sub	sp, #16
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
 80097d8:	460b      	mov	r3, r1
 80097da:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80097e2:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f503 7333 	add.w	r3, r3, #716	@ 0x2cc
 80097ea:	68db      	ldr	r3, [r3, #12]
 80097ec:	68fa      	ldr	r2, [r7, #12]
 80097ee:	b2d2      	uxtb	r2, r2
 80097f0:	4610      	mov	r0, r2
 80097f2:	4798      	blx	r3

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 80097f4:	68fa      	ldr	r2, [r7, #12]
 80097f6:	2340      	movs	r3, #64	@ 0x40
 80097f8:	2101      	movs	r1, #1
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f000 f9bc 	bl	8009b78 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 8009800:	2300      	movs	r3, #0
}
 8009802:	4618      	mov	r0, r3
 8009804:	3710      	adds	r7, #16
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}

0800980a <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800980a:	b580      	push	{r7, lr}
 800980c:	b084      	sub	sp, #16
 800980e:	af00      	add	r7, sp, #0
 8009810:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009818:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800981e:	2b01      	cmp	r3, #1
 8009820:	d10a      	bne.n	8009838 <USBD_CUSTOM_HID_EP0_RxReady+0x2e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f503 7333 	add.w	r3, r3, #716	@ 0x2cc
 8009828:	68db      	ldr	r3, [r3, #12]
 800982a:	68fa      	ldr	r2, [r7, #12]
 800982c:	b2d2      	uxtb	r2, r2
 800982e:	4610      	mov	r0, r2
 8009830:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	2200      	movs	r2, #0
 8009836:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return USBD_OK;
 8009838:	2300      	movs	r3, #0
}
 800983a:	4618      	mov	r0, r3
 800983c:	3710      	adds	r7, #16
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}

08009842 <HAL_PCD_SetupStageCallback>:
extern PCD_HandleTypeDef hpcd_USB_DRD_FS;
/* Private function prototypes -----------------------------------------------*/
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status);
/* Private functions ---------------------------------------------------------*/
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8009842:	b580      	push	{r7, lr}
 8009844:	b082      	sub	sp, #8
 8009846:	af00      	add	r7, sp, #0
 8009848:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f8d3 22dc 	ldr.w	r2, [r3, #732]	@ 0x2dc
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 8009856:	4619      	mov	r1, r3
 8009858:	4610      	mov	r0, r2
 800985a:	f000 fb56 	bl	8009f0a <USBD_LL_SetupStage>
}
 800985e:	bf00      	nop
 8009860:	3708      	adds	r7, #8
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}

08009866 <HAL_PCD_DataOutStageCallback>:
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8009866:	b580      	push	{r7, lr}
 8009868:	b082      	sub	sp, #8
 800986a:	af00      	add	r7, sp, #0
 800986c:	6078      	str	r0, [r7, #4]
 800986e:	460b      	mov	r3, r1
 8009870:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f8d3 02dc 	ldr.w	r0, [r3, #732]	@ 0x2dc
 8009878:	78fa      	ldrb	r2, [r7, #3]
 800987a:	6879      	ldr	r1, [r7, #4]
 800987c:	4613      	mov	r3, r2
 800987e:	009b      	lsls	r3, r3, #2
 8009880:	4413      	add	r3, r2
 8009882:	00db      	lsls	r3, r3, #3
 8009884:	440b      	add	r3, r1
 8009886:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800988a:	681a      	ldr	r2, [r3, #0]
 800988c:	78fb      	ldrb	r3, [r7, #3]
 800988e:	4619      	mov	r1, r3
 8009890:	f000 fb90 	bl	8009fb4 <USBD_LL_DataOutStage>
}
 8009894:	bf00      	nop
 8009896:	3708      	adds	r7, #8
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}

0800989c <HAL_PCD_DataInStageCallback>:
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b082      	sub	sp, #8
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
 80098a4:	460b      	mov	r3, r1
 80098a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f8d3 02dc 	ldr.w	r0, [r3, #732]	@ 0x2dc
 80098ae:	78fa      	ldrb	r2, [r7, #3]
 80098b0:	6879      	ldr	r1, [r7, #4]
 80098b2:	4613      	mov	r3, r2
 80098b4:	009b      	lsls	r3, r3, #2
 80098b6:	4413      	add	r3, r2
 80098b8:	00db      	lsls	r3, r3, #3
 80098ba:	440b      	add	r3, r1
 80098bc:	3328      	adds	r3, #40	@ 0x28
 80098be:	681a      	ldr	r2, [r3, #0]
 80098c0:	78fb      	ldrb	r3, [r7, #3]
 80098c2:	4619      	mov	r1, r3
 80098c4:	f000 fc29 	bl	800a11a <USBD_LL_DataInStage>
}
 80098c8:	bf00      	nop
 80098ca:	3708      	adds	r7, #8
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}

080098d0 <HAL_PCD_SOFCallback>:
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b082      	sub	sp, #8
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 80098de:	4618      	mov	r0, r3
 80098e0:	f000 fd4d 	bl	800a37e <USBD_LL_SOF>
}
 80098e4:	bf00      	nop
 80098e6:	3708      	adds	r7, #8
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}

080098ec <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b084      	sub	sp, #16
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80098f4:	2301      	movs	r3, #1
 80098f6:	73fb      	strb	r3, [r7, #15]
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	79db      	ldrb	r3, [r3, #7]
 80098fc:	2b02      	cmp	r3, #2
 80098fe:	d001      	beq.n	8009904 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009900:	f7f6 ff42 	bl	8000788 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800990a:	7bfa      	ldrb	r2, [r7, #15]
 800990c:	4611      	mov	r1, r2
 800990e:	4618      	mov	r0, r3
 8009910:	f000 fd25 	bl	800a35e <USBD_LL_SetSpeed>
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800991a:	4618      	mov	r0, r3
 800991c:	f000 fcaf 	bl	800a27e <USBD_LL_Reset>
}
 8009920:	bf00      	nop
 8009922:	3710      	adds	r7, #16
 8009924:	46bd      	mov	sp, r7
 8009926:	bd80      	pop	{r7, pc}

08009928 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b082      	sub	sp, #8
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
	/* Link the driver to the stack */
	pdev->pData  = &hpcd_USB_DRD_FS;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	4a20      	ldr	r2, [pc, #128]	@ (80099b4 <USBD_LL_Init+0x8c>)
 8009934:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
	hpcd_USB_DRD_FS.pData = pdev;
 8009938:	4a1e      	ldr	r2, [pc, #120]	@ (80099b4 <USBD_LL_Init+0x8c>)
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	f8c2 32dc 	str.w	r3, [r2, #732]	@ 0x2dc
	/* Initialize LL Driver */
	MX_USB_PCD_Init();
 8009940:	f7f6 fe1a 	bl	8000578 <MX_USB_PCD_Init>
	/* Control Endpoints */
	HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x20);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800994a:	2320      	movs	r3, #32
 800994c:	2200      	movs	r2, #0
 800994e:	2100      	movs	r1, #0
 8009950:	f7fa f844 	bl	80039dc <HAL_PCDEx_PMAConfig>
	HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x60);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800995a:	2360      	movs	r3, #96	@ 0x60
 800995c:	2200      	movs	r2, #0
 800995e:	2180      	movs	r1, #128	@ 0x80
 8009960:	f7fa f83c 	bl	80039dc <HAL_PCDEx_PMAConfig>
	/* HID Endpoints */
	HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , HID_EPIN_ADDR , PCD_SNG_BUF, 0xA0);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800996a:	23a0      	movs	r3, #160	@ 0xa0
 800996c:	2200      	movs	r2, #0
 800996e:	2181      	movs	r1, #129	@ 0x81
 8009970:	f7fa f834 	bl	80039dc <HAL_PCDEx_PMAConfig>
	/* CDC Endpoints */
	HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_OUT_EP , PCD_SNG_BUF, 0xE0);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800997a:	23e0      	movs	r3, #224	@ 0xe0
 800997c:	2200      	movs	r2, #0
 800997e:	2101      	movs	r1, #1
 8009980:	f7fa f82c 	bl	80039dc <HAL_PCDEx_PMAConfig>
	HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_IN_EP , PCD_SNG_BUF, 0x120);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800998a:	f44f 7390 	mov.w	r3, #288	@ 0x120
 800998e:	2200      	movs	r2, #0
 8009990:	2182      	movs	r1, #130	@ 0x82
 8009992:	f7fa f823 	bl	80039dc <HAL_PCDEx_PMAConfig>
	HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_CMD_EP , PCD_SNG_BUF, 0x140);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800999c:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80099a0:	2200      	movs	r2, #0
 80099a2:	2183      	movs	r1, #131	@ 0x83
 80099a4:	f7fa f81a 	bl	80039dc <HAL_PCDEx_PMAConfig>
	return USBD_OK;
 80099a8:	2300      	movs	r3, #0
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	3708      	adds	r7, #8
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}
 80099b2:	bf00      	nop
 80099b4:	20000220 	.word	0x20000220

080099b8 <USBD_LL_Start>:
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_DeInit(pdev->pData);
	return USBD_Get_USB_Status(hal_status);
}
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b084      	sub	sp, #16
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_Start(pdev->pData);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80099c6:	4618      	mov	r0, r3
 80099c8:	f7f8 fcec 	bl	80023a4 <HAL_PCD_Start>
 80099cc:	4603      	mov	r3, r0
 80099ce:	73fb      	strb	r3, [r7, #15]
	return  USBD_Get_USB_Status(hal_status);
 80099d0:	7bfb      	ldrb	r3, [r7, #15]
 80099d2:	4618      	mov	r0, r3
 80099d4:	f000 f916 	bl	8009c04 <USBD_Get_USB_Status>
 80099d8:	4603      	mov	r3, r0
}
 80099da:	4618      	mov	r0, r3
 80099dc:	3710      	adds	r7, #16
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}

080099e2 <USBD_LL_OpenEP>:
	hal_status = HAL_PCD_Stop(pdev->pData);
	return USBD_Get_USB_Status(hal_status);
}
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
		uint8_t ep_type, uint16_t ep_mps)
{
 80099e2:	b580      	push	{r7, lr}
 80099e4:	b084      	sub	sp, #16
 80099e6:	af00      	add	r7, sp, #0
 80099e8:	6078      	str	r0, [r7, #4]
 80099ea:	4608      	mov	r0, r1
 80099ec:	4611      	mov	r1, r2
 80099ee:	461a      	mov	r2, r3
 80099f0:	4603      	mov	r3, r0
 80099f2:	70fb      	strb	r3, [r7, #3]
 80099f4:	460b      	mov	r3, r1
 80099f6:	70bb      	strb	r3, [r7, #2]
 80099f8:	4613      	mov	r3, r2
 80099fa:	803b      	strh	r3, [r7, #0]
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8009a02:	78bb      	ldrb	r3, [r7, #2]
 8009a04:	883a      	ldrh	r2, [r7, #0]
 8009a06:	78f9      	ldrb	r1, [r7, #3]
 8009a08:	f7f8 fe1b 	bl	8002642 <HAL_PCD_EP_Open>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	73fb      	strb	r3, [r7, #15]
	return USBD_Get_USB_Status(hal_status);
 8009a10:	7bfb      	ldrb	r3, [r7, #15]
 8009a12:	4618      	mov	r0, r3
 8009a14:	f000 f8f6 	bl	8009c04 <USBD_Get_USB_Status>
 8009a18:	4603      	mov	r3, r0
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	3710      	adds	r7, #16
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}

08009a22 <USBD_LL_CloseEP>:
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a22:	b580      	push	{r7, lr}
 8009a24:	b084      	sub	sp, #16
 8009a26:	af00      	add	r7, sp, #0
 8009a28:	6078      	str	r0, [r7, #4]
 8009a2a:	460b      	mov	r3, r1
 8009a2c:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009a34:	78fa      	ldrb	r2, [r7, #3]
 8009a36:	4611      	mov	r1, r2
 8009a38:	4618      	mov	r0, r3
 8009a3a:	f7f8 fe63 	bl	8002704 <HAL_PCD_EP_Close>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	73fb      	strb	r3, [r7, #15]
	return USBD_Get_USB_Status(hal_status);
 8009a42:	7bfb      	ldrb	r3, [r7, #15]
 8009a44:	4618      	mov	r0, r3
 8009a46:	f000 f8dd 	bl	8009c04 <USBD_Get_USB_Status>
 8009a4a:	4603      	mov	r3, r0
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	3710      	adds	r7, #16
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bd80      	pop	{r7, pc}

08009a54 <USBD_LL_StallEP>:
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
	return USBD_Get_USB_Status(hal_status);
}
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b084      	sub	sp, #16
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
 8009a5c:	460b      	mov	r3, r1
 8009a5e:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009a66:	78fa      	ldrb	r2, [r7, #3]
 8009a68:	4611      	mov	r1, r2
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f7f8 ff16 	bl	800289c <HAL_PCD_EP_SetStall>
 8009a70:	4603      	mov	r3, r0
 8009a72:	73fb      	strb	r3, [r7, #15]
	return USBD_Get_USB_Status(hal_status);
 8009a74:	7bfb      	ldrb	r3, [r7, #15]
 8009a76:	4618      	mov	r0, r3
 8009a78:	f000 f8c4 	bl	8009c04 <USBD_Get_USB_Status>
 8009a7c:	4603      	mov	r3, r0
}
 8009a7e:	4618      	mov	r0, r3
 8009a80:	3710      	adds	r7, #16
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bd80      	pop	{r7, pc}

08009a86 <USBD_LL_ClearStallEP>:
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev,
		uint8_t ep_addr)
{
 8009a86:	b580      	push	{r7, lr}
 8009a88:	b084      	sub	sp, #16
 8009a8a:	af00      	add	r7, sp, #0
 8009a8c:	6078      	str	r0, [r7, #4]
 8009a8e:	460b      	mov	r3, r1
 8009a90:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009a98:	78fa      	ldrb	r2, [r7, #3]
 8009a9a:	4611      	mov	r1, r2
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	f7f8 ff51 	bl	8002944 <HAL_PCD_EP_ClrStall>
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	73fb      	strb	r3, [r7, #15]
	return USBD_Get_USB_Status(hal_status);
 8009aa6:	7bfb      	ldrb	r3, [r7, #15]
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	f000 f8ab 	bl	8009c04 <USBD_Get_USB_Status>
 8009aae:	4603      	mov	r3, r0
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	3710      	adds	r7, #16
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bd80      	pop	{r7, pc}

08009ab8 <USBD_LL_IsStallEP>:
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b085      	sub	sp, #20
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
 8009ac0:	460b      	mov	r3, r1
 8009ac2:	70fb      	strb	r3, [r7, #3]
	PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009aca:	60fb      	str	r3, [r7, #12]
	if((ep_addr & 0x80) == 0x80)
 8009acc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	da0b      	bge.n	8009aec <USBD_LL_IsStallEP+0x34>
	{
		return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009ad4:	78fb      	ldrb	r3, [r7, #3]
 8009ad6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009ada:	68f9      	ldr	r1, [r7, #12]
 8009adc:	4613      	mov	r3, r2
 8009ade:	009b      	lsls	r3, r3, #2
 8009ae0:	4413      	add	r3, r2
 8009ae2:	00db      	lsls	r3, r3, #3
 8009ae4:	440b      	add	r3, r1
 8009ae6:	3316      	adds	r3, #22
 8009ae8:	781b      	ldrb	r3, [r3, #0]
 8009aea:	e00b      	b.n	8009b04 <USBD_LL_IsStallEP+0x4c>
	}
	else
	{
		return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009aec:	78fb      	ldrb	r3, [r7, #3]
 8009aee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009af2:	68f9      	ldr	r1, [r7, #12]
 8009af4:	4613      	mov	r3, r2
 8009af6:	009b      	lsls	r3, r3, #2
 8009af8:	4413      	add	r3, r2
 8009afa:	00db      	lsls	r3, r3, #3
 8009afc:	440b      	add	r3, r1
 8009afe:	f503 73ab 	add.w	r3, r3, #342	@ 0x156
 8009b02:	781b      	ldrb	r3, [r3, #0]
	}
}
 8009b04:	4618      	mov	r0, r3
 8009b06:	3714      	adds	r7, #20
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0e:	4770      	bx	lr

08009b10 <USBD_LL_SetUSBAddress>:
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev,
		uint8_t dev_addr)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b084      	sub	sp, #16
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
 8009b18:	460b      	mov	r3, r1
 8009b1a:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009b22:	78fa      	ldrb	r2, [r7, #3]
 8009b24:	4611      	mov	r1, r2
 8009b26:	4618      	mov	r0, r3
 8009b28:	f7f8 fd67 	bl	80025fa <HAL_PCD_SetAddress>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	73fb      	strb	r3, [r7, #15]
	return USBD_Get_USB_Status(hal_status);
 8009b30:	7bfb      	ldrb	r3, [r7, #15]
 8009b32:	4618      	mov	r0, r3
 8009b34:	f000 f866 	bl	8009c04 <USBD_Get_USB_Status>
 8009b38:	4603      	mov	r3, r0
}
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	3710      	adds	r7, #16
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}

08009b42 <USBD_LL_Transmit>:
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
		uint8_t *pbuf, uint32_t size)
{
 8009b42:	b580      	push	{r7, lr}
 8009b44:	b086      	sub	sp, #24
 8009b46:	af00      	add	r7, sp, #0
 8009b48:	60f8      	str	r0, [r7, #12]
 8009b4a:	607a      	str	r2, [r7, #4]
 8009b4c:	603b      	str	r3, [r7, #0]
 8009b4e:	460b      	mov	r3, r1
 8009b50:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8009b58:	7af9      	ldrb	r1, [r7, #11]
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	687a      	ldr	r2, [r7, #4]
 8009b5e:	f7f8 fe65 	bl	800282c <HAL_PCD_EP_Transmit>
 8009b62:	4603      	mov	r3, r0
 8009b64:	75fb      	strb	r3, [r7, #23]
	return USBD_Get_USB_Status(hal_status);
 8009b66:	7dfb      	ldrb	r3, [r7, #23]
 8009b68:	4618      	mov	r0, r3
 8009b6a:	f000 f84b 	bl	8009c04 <USBD_Get_USB_Status>
 8009b6e:	4603      	mov	r3, r0
}
 8009b70:	4618      	mov	r0, r3
 8009b72:	3718      	adds	r7, #24
 8009b74:	46bd      	mov	sp, r7
 8009b76:	bd80      	pop	{r7, pc}

08009b78 <USBD_LL_PrepareReceive>:
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev,
		uint8_t ep_addr, uint8_t *pbuf,
		uint32_t size)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b086      	sub	sp, #24
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	60f8      	str	r0, [r7, #12]
 8009b80:	607a      	str	r2, [r7, #4]
 8009b82:	603b      	str	r3, [r7, #0]
 8009b84:	460b      	mov	r3, r1
 8009b86:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8009b8e:	7af9      	ldrb	r1, [r7, #11]
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	687a      	ldr	r2, [r7, #4]
 8009b94:	f7f8 fe00 	bl	8002798 <HAL_PCD_EP_Receive>
 8009b98:	4603      	mov	r3, r0
 8009b9a:	75fb      	strb	r3, [r7, #23]
	return USBD_Get_USB_Status(hal_status);
 8009b9c:	7dfb      	ldrb	r3, [r7, #23]
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f000 f830 	bl	8009c04 <USBD_Get_USB_Status>
 8009ba4:	4603      	mov	r3, r0
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	3718      	adds	r7, #24
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}

08009bae <USBD_LL_GetRxDataSize>:
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009bae:	b580      	push	{r7, lr}
 8009bb0:	b082      	sub	sp, #8
 8009bb2:	af00      	add	r7, sp, #0
 8009bb4:	6078      	str	r0, [r7, #4]
 8009bb6:	460b      	mov	r3, r1
 8009bb8:	70fb      	strb	r3, [r7, #3]
	return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009bc0:	78fa      	ldrb	r2, [r7, #3]
 8009bc2:	4611      	mov	r1, r2
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	f7f8 fe19 	bl	80027fc <HAL_PCD_EP_GetRxCount>
 8009bca:	4603      	mov	r3, r0
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	3708      	adds	r7, #8
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}

08009bd4 <USBD_static_malloc>:
void *USBD_static_malloc(uint32_t size)
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b083      	sub	sp, #12
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
	UNUSED(size);
	static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef) / 4) + 1]; /* On 32-bit boundary */
	return mem;
 8009bdc:	4b03      	ldr	r3, [pc, #12]	@ (8009bec <USBD_static_malloc+0x18>)
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	370c      	adds	r7, #12
 8009be2:	46bd      	mov	sp, r7
 8009be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be8:	4770      	bx	lr
 8009bea:	bf00      	nop
 8009bec:	20000b34 	.word	0x20000b34

08009bf0 <USBD_static_free>:
void USBD_static_free(void *p)
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b083      	sub	sp, #12
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
	UNUSED(p);
}
 8009bf8:	bf00      	nop
 8009bfa:	370c      	adds	r7, #12
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c02:	4770      	bx	lr

08009c04 <USBD_Get_USB_Status>:
{
     HAL_Delay(Delay);
}

USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009c04:	b480      	push	{r7}
 8009c06:	b085      	sub	sp, #20
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	71fb      	strb	r3, [r7, #7]
	USBD_StatusTypeDef usb_status = USBD_OK;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	73fb      	strb	r3, [r7, #15]
	switch (hal_status)
 8009c12:	79fb      	ldrb	r3, [r7, #7]
 8009c14:	2b03      	cmp	r3, #3
 8009c16:	d817      	bhi.n	8009c48 <USBD_Get_USB_Status+0x44>
 8009c18:	a201      	add	r2, pc, #4	@ (adr r2, 8009c20 <USBD_Get_USB_Status+0x1c>)
 8009c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c1e:	bf00      	nop
 8009c20:	08009c31 	.word	0x08009c31
 8009c24:	08009c37 	.word	0x08009c37
 8009c28:	08009c3d 	.word	0x08009c3d
 8009c2c:	08009c43 	.word	0x08009c43
	{
	case HAL_OK :
		usb_status = USBD_OK;
 8009c30:	2300      	movs	r3, #0
 8009c32:	73fb      	strb	r3, [r7, #15]
		break;
 8009c34:	e00b      	b.n	8009c4e <USBD_Get_USB_Status+0x4a>
	case HAL_ERROR :
		usb_status = USBD_FAIL;
 8009c36:	2303      	movs	r3, #3
 8009c38:	73fb      	strb	r3, [r7, #15]
		break;
 8009c3a:	e008      	b.n	8009c4e <USBD_Get_USB_Status+0x4a>
	case HAL_BUSY :
		usb_status = USBD_BUSY;
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	73fb      	strb	r3, [r7, #15]
		break;
 8009c40:	e005      	b.n	8009c4e <USBD_Get_USB_Status+0x4a>
	case HAL_TIMEOUT :
		usb_status = USBD_FAIL;
 8009c42:	2303      	movs	r3, #3
 8009c44:	73fb      	strb	r3, [r7, #15]
		break;
 8009c46:	e002      	b.n	8009c4e <USBD_Get_USB_Status+0x4a>
	default :
		usb_status = USBD_FAIL;
 8009c48:	2303      	movs	r3, #3
 8009c4a:	73fb      	strb	r3, [r7, #15]
		break;
 8009c4c:	bf00      	nop
	}
	return usb_status;
 8009c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	3714      	adds	r7, #20
 8009c54:	46bd      	mov	sp, r7
 8009c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5a:	4770      	bx	lr

08009c5c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b086      	sub	sp, #24
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	60f8      	str	r0, [r7, #12]
 8009c64:	60b9      	str	r1, [r7, #8]
 8009c66:	4613      	mov	r3, r2
 8009c68:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d10a      	bne.n	8009c86 <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 8009c70:	4827      	ldr	r0, [pc, #156]	@ (8009d10 <USBD_Init+0xb4>)
 8009c72:	f001 fd9d 	bl	800b7b0 <iprintf>
 8009c76:	4827      	ldr	r0, [pc, #156]	@ (8009d14 <USBD_Init+0xb8>)
 8009c78:	f001 fd9a 	bl	800b7b0 <iprintf>
 8009c7c:	200a      	movs	r0, #10
 8009c7e:	f001 fda9 	bl	800b7d4 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009c82:	2303      	movs	r3, #3
 8009c84:	e03f      	b.n	8009d06 <USBD_Init+0xaa>
  }

#ifdef USE_USBD_COMPOSITE
  /* Parse the table of classes in use */
  for (uint32_t i = 0; i < USBD_MAX_SUPPORTED_CLASS; i++)
 8009c86:	2300      	movs	r3, #0
 8009c88:	617b      	str	r3, [r7, #20]
 8009c8a:	e021      	b.n	8009cd0 <USBD_Init+0x74>
  {
    /* Unlink previous class*/
    pdev->pClass[i] = NULL;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	697a      	ldr	r2, [r7, #20]
 8009c90:	32ae      	adds	r2, #174	@ 0xae
 8009c92:	2100      	movs	r1, #0
 8009c94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pUserData[i] = NULL;
 8009c98:	68fa      	ldr	r2, [r7, #12]
 8009c9a:	697b      	ldr	r3, [r7, #20]
 8009c9c:	33b2      	adds	r3, #178	@ 0xb2
 8009c9e:	009b      	lsls	r3, r3, #2
 8009ca0:	4413      	add	r3, r2
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	605a      	str	r2, [r3, #4]

    /* Set class as inactive */
    pdev->tclasslist[i].Active = 0;
 8009ca6:	68fa      	ldr	r2, [r7, #12]
 8009ca8:	697b      	ldr	r3, [r7, #20]
 8009caa:	212c      	movs	r1, #44	@ 0x2c
 8009cac:	fb01 f303 	mul.w	r3, r1, r3
 8009cb0:	4413      	add	r3, r2
 8009cb2:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	601a      	str	r2, [r3, #0]
    pdev->NumClasses = 0;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	f8c3 22e4 	str.w	r2, [r3, #740]	@ 0x2e4
    pdev->classId = 0;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
  for (uint32_t i = 0; i < USBD_MAX_SUPPORTED_CLASS; i++)
 8009cca:	697b      	ldr	r3, [r7, #20]
 8009ccc:	3301      	adds	r3, #1
 8009cce:	617b      	str	r3, [r7, #20]
 8009cd0:	697b      	ldr	r3, [r7, #20]
 8009cd2:	2b01      	cmp	r3, #1
 8009cd4:	d9da      	bls.n	8009c8c <USBD_Init+0x30>
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
  pdev->pUserData[0] = NULL;
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	2200      	movs	r2, #0
 8009cda:	f8c3 22dc 	str.w	r2, [r3, #732]	@ 0x2dc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d003      	beq.n	8009cec <USBD_Init+0x90>
  {
    pdev->pDesc = pdesc;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	68ba      	ldr	r2, [r7, #8]
 8009ce8:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	2201      	movs	r2, #1
 8009cf0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	79fa      	ldrb	r2, [r7, #7]
 8009cf8:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009cfa:	68f8      	ldr	r0, [r7, #12]
 8009cfc:	f7ff fe14 	bl	8009928 <USBD_LL_Init>
 8009d00:	4603      	mov	r3, r0
 8009d02:	74fb      	strb	r3, [r7, #19]

  return ret;
 8009d04:	7cfb      	ldrb	r3, [r7, #19]
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	3718      	adds	r7, #24
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}
 8009d0e:	bf00      	nop
 8009d10:	0800c8f8 	.word	0x0800c8f8
 8009d14:	0800c900 	.word	0x0800c900

08009d18 <USBD_RegisterClassComposite>:
  * @param  EpAddr: Endpoint Address handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClassComposite(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass,
                                                USBD_CompositeClassTypeDef classtype, uint8_t *EpAddr)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b086      	sub	sp, #24
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	60f8      	str	r0, [r7, #12]
 8009d20:	60b9      	str	r1, [r7, #8]
 8009d22:	603b      	str	r3, [r7, #0]
 8009d24:	4613      	mov	r3, r2
 8009d26:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009d28:	2300      	movs	r3, #0
 8009d2a:	75fb      	strb	r3, [r7, #23]
  uint16_t len = 0U;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	82bb      	strh	r3, [r7, #20]

  if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) && (pdev->NumClasses < USBD_MAX_SUPPORTED_CLASS))
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8009d36:	2b01      	cmp	r3, #1
 8009d38:	d83d      	bhi.n	8009db6 <USBD_RegisterClassComposite+0x9e>
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	f8d3 32e4 	ldr.w	r3, [r3, #740]	@ 0x2e4
 8009d40:	2b01      	cmp	r3, #1
 8009d42:	d838      	bhi.n	8009db6 <USBD_RegisterClassComposite+0x9e>
  {
    if ((uint32_t)pclass != 0U)
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d02a      	beq.n	8009da0 <USBD_RegisterClassComposite+0x88>
    {
      /* Link the class to the USB Device handle */
      pdev->pClass[pdev->classId] = pclass;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	32ae      	adds	r2, #174	@ 0xae
 8009d54:	68b9      	ldr	r1, [r7, #8]
 8009d56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      ret = USBD_OK;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	75fb      	strb	r3, [r7, #23]

      pdev->tclasslist[pdev->classId].EpAdd = EpAddr;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8009d64:	68fa      	ldr	r2, [r7, #12]
 8009d66:	212c      	movs	r1, #44	@ 0x2c
 8009d68:	fb01 f303 	mul.w	r3, r1, r3
 8009d6c:	4413      	add	r3, r2
 8009d6e:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8009d72:	683a      	ldr	r2, [r7, #0]
 8009d74:	601a      	str	r2, [r3, #0]

      /* Call the composite class builder */
      (void)USBD_CMPSIT_AddClass(pdev, pclass, classtype, 0);
 8009d76:	79fa      	ldrb	r2, [r7, #7]
 8009d78:	2300      	movs	r3, #0
 8009d7a:	68b9      	ldr	r1, [r7, #8]
 8009d7c:	68f8      	ldr	r0, [r7, #12]
 8009d7e:	f7fe fded 	bl	800895c <USBD_CMPSIT_AddClass>

      /* Increment the ClassId for the next occurrence */
      pdev->classId ++;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8009d88:	1c5a      	adds	r2, r3, #1
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
      pdev->NumClasses ++;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	f8d3 32e4 	ldr.w	r3, [r3, #740]	@ 0x2e4
 8009d96:	1c5a      	adds	r2, r3, #1
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	f8c3 22e4 	str.w	r2, [r3, #740]	@ 0x2e4
 8009d9e:	e00a      	b.n	8009db6 <USBD_RegisterClassComposite+0x9e>
    }
    else
    {
#if (USBD_DEBUG_LEVEL > 1U)
      USBD_ErrLog("Invalid Class handle");
 8009da0:	480e      	ldr	r0, [pc, #56]	@ (8009ddc <USBD_RegisterClassComposite+0xc4>)
 8009da2:	f001 fd05 	bl	800b7b0 <iprintf>
 8009da6:	480e      	ldr	r0, [pc, #56]	@ (8009de0 <USBD_RegisterClassComposite+0xc8>)
 8009da8:	f001 fd02 	bl	800b7b0 <iprintf>
 8009dac:	200a      	movs	r0, #10
 8009dae:	f001 fd11 	bl	800b7d4 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
      ret = USBD_FAIL;
 8009db2:	2303      	movs	r3, #3
 8009db4:	75fb      	strb	r3, [r7, #23]
    }
  }

  if (ret == USBD_OK)
 8009db6:	7dfb      	ldrb	r3, [r7, #23]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d109      	bne.n	8009dd0 <USBD_RegisterClassComposite+0xb8>
  {
    /* Get Device Configuration Descriptor */
#ifdef USE_USB_HS
    pdev->pConfDesc = USBD_CMPSIT.GetHSConfigDescriptor(&len);
#else /* Default USE_USB_FS */
    pdev->pConfDesc = USBD_CMPSIT.GetFSConfigDescriptor(&len);
 8009dbc:	4b09      	ldr	r3, [pc, #36]	@ (8009de4 <USBD_RegisterClassComposite+0xcc>)
 8009dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dc0:	f107 0214 	add.w	r2, r7, #20
 8009dc4:	4610      	mov	r0, r2
 8009dc6:	4798      	blx	r3
 8009dc8:	4602      	mov	r2, r0
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	f8c3 22dc 	str.w	r2, [r3, #732]	@ 0x2dc
#endif /* USE_USB_FS */
  }

  return ret;
 8009dd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3718      	adds	r7, #24
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}
 8009dda:	bf00      	nop
 8009ddc:	0800c8f8 	.word	0x0800c8f8
 8009de0:	0800c918 	.word	0x0800c918
 8009de4:	20000068 	.word	0x20000068

08009de8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b082      	sub	sp, #8
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2200      	movs	r2, #0
 8009df4:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f7ff fddd 	bl	80099b8 <USBD_LL_Start>
 8009dfe:	4603      	mov	r3, r0
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	3708      	adds	r7, #8
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bd80      	pop	{r7, pc}

08009e08 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009e08:	b480      	push	{r7}
 8009e0a:	b083      	sub	sp, #12
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009e10:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009e12:	4618      	mov	r0, r3
 8009e14:	370c      	adds	r7, #12
 8009e16:	46bd      	mov	sp, r7
 8009e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1c:	4770      	bx	lr

08009e1e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009e1e:	b580      	push	{r7, lr}
 8009e20:	b084      	sub	sp, #16
 8009e22:	af00      	add	r7, sp, #0
 8009e24:	6078      	str	r0, [r7, #4]
 8009e26:	460b      	mov	r3, r1
 8009e28:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Parse the table of classes in use */
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 8009e2e:	2300      	movs	r3, #0
 8009e30:	60bb      	str	r3, [r7, #8]
 8009e32:	e027      	b.n	8009e84 <USBD_SetClassConfig+0x66>
  {
    /* Check if current class is in use */
    if ((pdev->tclasslist[i].Active) == 1U)
 8009e34:	687a      	ldr	r2, [r7, #4]
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	212c      	movs	r1, #44	@ 0x2c
 8009e3a:	fb01 f303 	mul.w	r3, r1, r3
 8009e3e:	4413      	add	r3, r2
 8009e40:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	2b01      	cmp	r3, #1
 8009e48:	d119      	bne.n	8009e7e <USBD_SetClassConfig+0x60>
    {
      if (pdev->pClass[i] != NULL)
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	68ba      	ldr	r2, [r7, #8]
 8009e4e:	32ae      	adds	r2, #174	@ 0xae
 8009e50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d012      	beq.n	8009e7e <USBD_SetClassConfig+0x60>
      {
        pdev->classId = i;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	68ba      	ldr	r2, [r7, #8]
 8009e5c:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
        /* Set configuration  and Start the Class*/
        if (pdev->pClass[i]->Init(pdev, cfgidx) != 0U)
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	68ba      	ldr	r2, [r7, #8]
 8009e64:	32ae      	adds	r2, #174	@ 0xae
 8009e66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	78fa      	ldrb	r2, [r7, #3]
 8009e6e:	4611      	mov	r1, r2
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	4798      	blx	r3
 8009e74:	4603      	mov	r3, r0
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d001      	beq.n	8009e7e <USBD_SetClassConfig+0x60>
        {
          ret = USBD_FAIL;
 8009e7a:	2303      	movs	r3, #3
 8009e7c:	73fb      	strb	r3, [r7, #15]
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 8009e7e:	68bb      	ldr	r3, [r7, #8]
 8009e80:	3301      	adds	r3, #1
 8009e82:	60bb      	str	r3, [r7, #8]
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	2b01      	cmp	r3, #1
 8009e88:	d9d4      	bls.n	8009e34 <USBD_SetClassConfig+0x16>
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	3710      	adds	r7, #16
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bd80      	pop	{r7, pc}

08009e94 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b084      	sub	sp, #16
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
 8009e9c:	460b      	mov	r3, r1
 8009e9e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Parse the table of classes in use */
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	60bb      	str	r3, [r7, #8]
 8009ea8:	e027      	b.n	8009efa <USBD_ClrClassConfig+0x66>
  {
    /* Check if current class is in use */
    if ((pdev->tclasslist[i].Active) == 1U)
 8009eaa:	687a      	ldr	r2, [r7, #4]
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	212c      	movs	r1, #44	@ 0x2c
 8009eb0:	fb01 f303 	mul.w	r3, r1, r3
 8009eb4:	4413      	add	r3, r2
 8009eb6:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	2b01      	cmp	r3, #1
 8009ebe:	d119      	bne.n	8009ef4 <USBD_ClrClassConfig+0x60>
    {
      if (pdev->pClass[i] != NULL)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	68ba      	ldr	r2, [r7, #8]
 8009ec4:	32ae      	adds	r2, #174	@ 0xae
 8009ec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d012      	beq.n	8009ef4 <USBD_ClrClassConfig+0x60>
      {
        pdev->classId = i;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	68ba      	ldr	r2, [r7, #8]
 8009ed2:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
        /* Clear configuration  and De-initialize the Class process */
        if (pdev->pClass[i]->DeInit(pdev, cfgidx) != 0U)
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	68ba      	ldr	r2, [r7, #8]
 8009eda:	32ae      	adds	r2, #174	@ 0xae
 8009edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ee0:	685b      	ldr	r3, [r3, #4]
 8009ee2:	78fa      	ldrb	r2, [r7, #3]
 8009ee4:	4611      	mov	r1, r2
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	4798      	blx	r3
 8009eea:	4603      	mov	r3, r0
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d001      	beq.n	8009ef4 <USBD_ClrClassConfig+0x60>
        {
          ret = USBD_FAIL;
 8009ef0:	2303      	movs	r3, #3
 8009ef2:	73fb      	strb	r3, [r7, #15]
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	3301      	adds	r3, #1
 8009ef8:	60bb      	str	r3, [r7, #8]
 8009efa:	68bb      	ldr	r3, [r7, #8]
 8009efc:	2b01      	cmp	r3, #1
 8009efe:	d9d4      	bls.n	8009eaa <USBD_ClrClassConfig+0x16>
  {
    ret = USBD_FAIL;
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	3710      	adds	r7, #16
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}

08009f0a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009f0a:	b580      	push	{r7, lr}
 8009f0c:	b084      	sub	sp, #16
 8009f0e:	af00      	add	r7, sp, #0
 8009f10:	6078      	str	r0, [r7, #4]
 8009f12:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009f1a:	6839      	ldr	r1, [r7, #0]
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	f001 f94a 	bl	800b1b6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2201      	movs	r2, #1
 8009f26:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8009f30:	461a      	mov	r2, r3
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009f3e:	f003 031f 	and.w	r3, r3, #31
 8009f42:	2b02      	cmp	r3, #2
 8009f44:	d01a      	beq.n	8009f7c <USBD_LL_SetupStage+0x72>
 8009f46:	2b02      	cmp	r3, #2
 8009f48:	d822      	bhi.n	8009f90 <USBD_LL_SetupStage+0x86>
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d002      	beq.n	8009f54 <USBD_LL_SetupStage+0x4a>
 8009f4e:	2b01      	cmp	r3, #1
 8009f50:	d00a      	beq.n	8009f68 <USBD_LL_SetupStage+0x5e>
 8009f52:	e01d      	b.n	8009f90 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009f5a:	4619      	mov	r1, r3
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f000 fb67 	bl	800a630 <USBD_StdDevReq>
 8009f62:	4603      	mov	r3, r0
 8009f64:	73fb      	strb	r3, [r7, #15]
      break;
 8009f66:	e020      	b.n	8009faa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009f6e:	4619      	mov	r1, r3
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f000 fbcf 	bl	800a714 <USBD_StdItfReq>
 8009f76:	4603      	mov	r3, r0
 8009f78:	73fb      	strb	r3, [r7, #15]
      break;
 8009f7a:	e016      	b.n	8009faa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009f82:	4619      	mov	r1, r3
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	f000 fc31 	bl	800a7ec <USBD_StdEPReq>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	73fb      	strb	r3, [r7, #15]
      break;
 8009f8e:	e00c      	b.n	8009faa <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009f96:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009f9a:	b2db      	uxtb	r3, r3
 8009f9c:	4619      	mov	r1, r3
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f7ff fd58 	bl	8009a54 <USBD_LL_StallEP>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	73fb      	strb	r3, [r7, #15]
      break;
 8009fa8:	bf00      	nop
  }

  return ret;
 8009faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fac:	4618      	mov	r0, r3
 8009fae:	3710      	adds	r7, #16
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}

08009fb4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b086      	sub	sp, #24
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	60f8      	str	r0, [r7, #12]
 8009fbc:	460b      	mov	r3, r1
 8009fbe:	607a      	str	r2, [r7, #4]
 8009fc0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009fc6:	7afb      	ldrb	r3, [r7, #11]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d16e      	bne.n	800a0aa <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009fd2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009fda:	2b03      	cmp	r3, #3
 8009fdc:	f040 8098 	bne.w	800a110 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009fe0:	693b      	ldr	r3, [r7, #16]
 8009fe2:	689a      	ldr	r2, [r3, #8]
 8009fe4:	693b      	ldr	r3, [r7, #16]
 8009fe6:	68db      	ldr	r3, [r3, #12]
 8009fe8:	429a      	cmp	r2, r3
 8009fea:	d913      	bls.n	800a014 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009fec:	693b      	ldr	r3, [r7, #16]
 8009fee:	689a      	ldr	r2, [r3, #8]
 8009ff0:	693b      	ldr	r3, [r7, #16]
 8009ff2:	68db      	ldr	r3, [r3, #12]
 8009ff4:	1ad2      	subs	r2, r2, r3
 8009ff6:	693b      	ldr	r3, [r7, #16]
 8009ff8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009ffa:	693b      	ldr	r3, [r7, #16]
 8009ffc:	68da      	ldr	r2, [r3, #12]
 8009ffe:	693b      	ldr	r3, [r7, #16]
 800a000:	689b      	ldr	r3, [r3, #8]
 800a002:	4293      	cmp	r3, r2
 800a004:	bf28      	it	cs
 800a006:	4613      	movcs	r3, r2
 800a008:	461a      	mov	r2, r3
 800a00a:	6879      	ldr	r1, [r7, #4]
 800a00c:	68f8      	ldr	r0, [r7, #12]
 800a00e:	f001 fad5 	bl	800b5bc <USBD_CtlContinueRx>
 800a012:	e07d      	b.n	800a110 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a01a:	f003 031f 	and.w	r3, r3, #31
 800a01e:	2b02      	cmp	r3, #2
 800a020:	d014      	beq.n	800a04c <USBD_LL_DataOutStage+0x98>
 800a022:	2b02      	cmp	r3, #2
 800a024:	d81d      	bhi.n	800a062 <USBD_LL_DataOutStage+0xae>
 800a026:	2b00      	cmp	r3, #0
 800a028:	d002      	beq.n	800a030 <USBD_LL_DataOutStage+0x7c>
 800a02a:	2b01      	cmp	r3, #1
 800a02c:	d003      	beq.n	800a036 <USBD_LL_DataOutStage+0x82>
 800a02e:	e018      	b.n	800a062 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a030:	2300      	movs	r3, #0
 800a032:	75bb      	strb	r3, [r7, #22]
            break;
 800a034:	e018      	b.n	800a068 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a03c:	b2db      	uxtb	r3, r3
 800a03e:	4619      	mov	r1, r3
 800a040:	68f8      	ldr	r0, [r7, #12]
 800a042:	f000 f9da 	bl	800a3fa <USBD_CoreFindIF>
 800a046:	4603      	mov	r3, r0
 800a048:	75bb      	strb	r3, [r7, #22]
            break;
 800a04a:	e00d      	b.n	800a068 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a052:	b2db      	uxtb	r3, r3
 800a054:	4619      	mov	r1, r3
 800a056:	68f8      	ldr	r0, [r7, #12]
 800a058:	f000 fa1b 	bl	800a492 <USBD_CoreFindEP>
 800a05c:	4603      	mov	r3, r0
 800a05e:	75bb      	strb	r3, [r7, #22]
            break;
 800a060:	e002      	b.n	800a068 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a062:	2300      	movs	r3, #0
 800a064:	75bb      	strb	r3, [r7, #22]
            break;
 800a066:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a068:	7dbb      	ldrb	r3, [r7, #22]
 800a06a:	2b01      	cmp	r3, #1
 800a06c:	d819      	bhi.n	800a0a2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a074:	b2db      	uxtb	r3, r3
 800a076:	2b03      	cmp	r3, #3
 800a078:	d113      	bne.n	800a0a2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a07a:	7dba      	ldrb	r2, [r7, #22]
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	32ae      	adds	r2, #174	@ 0xae
 800a080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a084:	691b      	ldr	r3, [r3, #16]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d00b      	beq.n	800a0a2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a08a:	7dba      	ldrb	r2, [r7, #22]
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a092:	7dba      	ldrb	r2, [r7, #22]
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	32ae      	adds	r2, #174	@ 0xae
 800a098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a09c:	691b      	ldr	r3, [r3, #16]
 800a09e:	68f8      	ldr	r0, [r7, #12]
 800a0a0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a0a2:	68f8      	ldr	r0, [r7, #12]
 800a0a4:	f001 fa9b 	bl	800b5de <USBD_CtlSendStatus>
 800a0a8:	e032      	b.n	800a110 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a0aa:	7afb      	ldrb	r3, [r7, #11]
 800a0ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a0b0:	b2db      	uxtb	r3, r3
 800a0b2:	4619      	mov	r1, r3
 800a0b4:	68f8      	ldr	r0, [r7, #12]
 800a0b6:	f000 f9ec 	bl	800a492 <USBD_CoreFindEP>
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a0be:	7dbb      	ldrb	r3, [r7, #22]
 800a0c0:	2bff      	cmp	r3, #255	@ 0xff
 800a0c2:	d025      	beq.n	800a110 <USBD_LL_DataOutStage+0x15c>
 800a0c4:	7dbb      	ldrb	r3, [r7, #22]
 800a0c6:	2b01      	cmp	r3, #1
 800a0c8:	d822      	bhi.n	800a110 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a0d0:	b2db      	uxtb	r3, r3
 800a0d2:	2b03      	cmp	r3, #3
 800a0d4:	d117      	bne.n	800a106 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a0d6:	7dba      	ldrb	r2, [r7, #22]
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	32ae      	adds	r2, #174	@ 0xae
 800a0dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0e0:	699b      	ldr	r3, [r3, #24]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d00f      	beq.n	800a106 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a0e6:	7dba      	ldrb	r2, [r7, #22]
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a0ee:	7dba      	ldrb	r2, [r7, #22]
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	32ae      	adds	r2, #174	@ 0xae
 800a0f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0f8:	699b      	ldr	r3, [r3, #24]
 800a0fa:	7afa      	ldrb	r2, [r7, #11]
 800a0fc:	4611      	mov	r1, r2
 800a0fe:	68f8      	ldr	r0, [r7, #12]
 800a100:	4798      	blx	r3
 800a102:	4603      	mov	r3, r0
 800a104:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a106:	7dfb      	ldrb	r3, [r7, #23]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d001      	beq.n	800a110 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a10c:	7dfb      	ldrb	r3, [r7, #23]
 800a10e:	e000      	b.n	800a112 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a110:	2300      	movs	r3, #0
}
 800a112:	4618      	mov	r0, r3
 800a114:	3718      	adds	r7, #24
 800a116:	46bd      	mov	sp, r7
 800a118:	bd80      	pop	{r7, pc}

0800a11a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a11a:	b580      	push	{r7, lr}
 800a11c:	b086      	sub	sp, #24
 800a11e:	af00      	add	r7, sp, #0
 800a120:	60f8      	str	r0, [r7, #12]
 800a122:	460b      	mov	r3, r1
 800a124:	607a      	str	r2, [r7, #4]
 800a126:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a128:	7afb      	ldrb	r3, [r7, #11]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d16f      	bne.n	800a20e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	3314      	adds	r3, #20
 800a132:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a13a:	2b02      	cmp	r3, #2
 800a13c:	d15a      	bne.n	800a1f4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a13e:	693b      	ldr	r3, [r7, #16]
 800a140:	689a      	ldr	r2, [r3, #8]
 800a142:	693b      	ldr	r3, [r7, #16]
 800a144:	68db      	ldr	r3, [r3, #12]
 800a146:	429a      	cmp	r2, r3
 800a148:	d914      	bls.n	800a174 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a14a:	693b      	ldr	r3, [r7, #16]
 800a14c:	689a      	ldr	r2, [r3, #8]
 800a14e:	693b      	ldr	r3, [r7, #16]
 800a150:	68db      	ldr	r3, [r3, #12]
 800a152:	1ad2      	subs	r2, r2, r3
 800a154:	693b      	ldr	r3, [r7, #16]
 800a156:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a158:	693b      	ldr	r3, [r7, #16]
 800a15a:	689b      	ldr	r3, [r3, #8]
 800a15c:	461a      	mov	r2, r3
 800a15e:	6879      	ldr	r1, [r7, #4]
 800a160:	68f8      	ldr	r0, [r7, #12]
 800a162:	f001 f9fd 	bl	800b560 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a166:	2300      	movs	r3, #0
 800a168:	2200      	movs	r2, #0
 800a16a:	2100      	movs	r1, #0
 800a16c:	68f8      	ldr	r0, [r7, #12]
 800a16e:	f7ff fd03 	bl	8009b78 <USBD_LL_PrepareReceive>
 800a172:	e03f      	b.n	800a1f4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	68da      	ldr	r2, [r3, #12]
 800a178:	693b      	ldr	r3, [r7, #16]
 800a17a:	689b      	ldr	r3, [r3, #8]
 800a17c:	429a      	cmp	r2, r3
 800a17e:	d11c      	bne.n	800a1ba <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a180:	693b      	ldr	r3, [r7, #16]
 800a182:	685a      	ldr	r2, [r3, #4]
 800a184:	693b      	ldr	r3, [r7, #16]
 800a186:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a188:	429a      	cmp	r2, r3
 800a18a:	d316      	bcc.n	800a1ba <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a18c:	693b      	ldr	r3, [r7, #16]
 800a18e:	685a      	ldr	r2, [r3, #4]
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a196:	429a      	cmp	r2, r3
 800a198:	d20f      	bcs.n	800a1ba <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a19a:	2200      	movs	r2, #0
 800a19c:	2100      	movs	r1, #0
 800a19e:	68f8      	ldr	r0, [r7, #12]
 800a1a0:	f001 f9de 	bl	800b560 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	2100      	movs	r1, #0
 800a1b2:	68f8      	ldr	r0, [r7, #12]
 800a1b4:	f7ff fce0 	bl	8009b78 <USBD_LL_PrepareReceive>
 800a1b8:	e01c      	b.n	800a1f4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a1c0:	b2db      	uxtb	r3, r3
 800a1c2:	2b03      	cmp	r3, #3
 800a1c4:	d10f      	bne.n	800a1e6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a1cc:	68db      	ldr	r3, [r3, #12]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d009      	beq.n	800a1e6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a1e0:	68db      	ldr	r3, [r3, #12]
 800a1e2:	68f8      	ldr	r0, [r7, #12]
 800a1e4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a1e6:	2180      	movs	r1, #128	@ 0x80
 800a1e8:	68f8      	ldr	r0, [r7, #12]
 800a1ea:	f7ff fc33 	bl	8009a54 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a1ee:	68f8      	ldr	r0, [r7, #12]
 800a1f0:	f001 fa08 	bl	800b604 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d03a      	beq.n	800a274 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a1fe:	68f8      	ldr	r0, [r7, #12]
 800a200:	f7ff fe02 	bl	8009e08 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	2200      	movs	r2, #0
 800a208:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a20c:	e032      	b.n	800a274 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a20e:	7afb      	ldrb	r3, [r7, #11]
 800a210:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a214:	b2db      	uxtb	r3, r3
 800a216:	4619      	mov	r1, r3
 800a218:	68f8      	ldr	r0, [r7, #12]
 800a21a:	f000 f93a 	bl	800a492 <USBD_CoreFindEP>
 800a21e:	4603      	mov	r3, r0
 800a220:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a222:	7dfb      	ldrb	r3, [r7, #23]
 800a224:	2bff      	cmp	r3, #255	@ 0xff
 800a226:	d025      	beq.n	800a274 <USBD_LL_DataInStage+0x15a>
 800a228:	7dfb      	ldrb	r3, [r7, #23]
 800a22a:	2b01      	cmp	r3, #1
 800a22c:	d822      	bhi.n	800a274 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a234:	b2db      	uxtb	r3, r3
 800a236:	2b03      	cmp	r3, #3
 800a238:	d11c      	bne.n	800a274 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a23a:	7dfa      	ldrb	r2, [r7, #23]
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	32ae      	adds	r2, #174	@ 0xae
 800a240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a244:	695b      	ldr	r3, [r3, #20]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d014      	beq.n	800a274 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a24a:	7dfa      	ldrb	r2, [r7, #23]
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a252:	7dfa      	ldrb	r2, [r7, #23]
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	32ae      	adds	r2, #174	@ 0xae
 800a258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a25c:	695b      	ldr	r3, [r3, #20]
 800a25e:	7afa      	ldrb	r2, [r7, #11]
 800a260:	4611      	mov	r1, r2
 800a262:	68f8      	ldr	r0, [r7, #12]
 800a264:	4798      	blx	r3
 800a266:	4603      	mov	r3, r0
 800a268:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a26a:	7dbb      	ldrb	r3, [r7, #22]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d001      	beq.n	800a274 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a270:	7dbb      	ldrb	r3, [r7, #22]
 800a272:	e000      	b.n	800a276 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a274:	2300      	movs	r3, #0
}
 800a276:	4618      	mov	r0, r3
 800a278:	3718      	adds	r7, #24
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}

0800a27e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a27e:	b580      	push	{r7, lr}
 800a280:	b084      	sub	sp, #16
 800a282:	af00      	add	r7, sp, #0
 800a284:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a286:	2300      	movs	r3, #0
 800a288:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	2201      	movs	r2, #1
 800a28e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2200      	movs	r2, #0
 800a296:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2200      	movs	r2, #0
 800a29e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0

#ifdef USE_USBD_COMPOSITE
  /* Parse the table of classes in use */
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	60bb      	str	r3, [r7, #8]
 800a2b4:	e031      	b.n	800a31a <USBD_LL_Reset+0x9c>
  {
    /* Check if current class is in use */
    if ((pdev->tclasslist[i].Active) == 1U)
 800a2b6:	687a      	ldr	r2, [r7, #4]
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	212c      	movs	r1, #44	@ 0x2c
 800a2bc:	fb01 f303 	mul.w	r3, r1, r3
 800a2c0:	4413      	add	r3, r2
 800a2c2:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	2b01      	cmp	r3, #1
 800a2ca:	d123      	bne.n	800a314 <USBD_LL_Reset+0x96>
    {
      if (pdev->pClass[i] != NULL)
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	68ba      	ldr	r2, [r7, #8]
 800a2d0:	32ae      	adds	r2, #174	@ 0xae
 800a2d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d01c      	beq.n	800a314 <USBD_LL_Reset+0x96>
      {
        pdev->classId = i;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	68ba      	ldr	r2, [r7, #8]
 800a2de:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
        /* Clear configuration  and De-initialize the Class process*/

        if (pdev->pClass[i]->DeInit != NULL)
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	68ba      	ldr	r2, [r7, #8]
 800a2e6:	32ae      	adds	r2, #174	@ 0xae
 800a2e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2ec:	685b      	ldr	r3, [r3, #4]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d010      	beq.n	800a314 <USBD_LL_Reset+0x96>
        {
          if (pdev->pClass[i]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	68ba      	ldr	r2, [r7, #8]
 800a2f6:	32ae      	adds	r2, #174	@ 0xae
 800a2f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2fc:	685b      	ldr	r3, [r3, #4]
 800a2fe:	687a      	ldr	r2, [r7, #4]
 800a300:	6852      	ldr	r2, [r2, #4]
 800a302:	b2d2      	uxtb	r2, r2
 800a304:	4611      	mov	r1, r2
 800a306:	6878      	ldr	r0, [r7, #4]
 800a308:	4798      	blx	r3
 800a30a:	4603      	mov	r3, r0
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d001      	beq.n	800a314 <USBD_LL_Reset+0x96>
          {
            ret = USBD_FAIL;
 800a310:	2303      	movs	r3, #3
 800a312:	73fb      	strb	r3, [r7, #15]
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	3301      	adds	r3, #1
 800a318:	60bb      	str	r3, [r7, #8]
 800a31a:	68bb      	ldr	r3, [r7, #8]
 800a31c:	2b01      	cmp	r3, #1
 800a31e:	d9ca      	bls.n	800a2b6 <USBD_LL_Reset+0x38>
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a320:	2340      	movs	r3, #64	@ 0x40
 800a322:	2200      	movs	r2, #0
 800a324:	2100      	movs	r1, #0
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f7ff fb5b 	bl	80099e2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2201      	movs	r2, #1
 800a330:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2240      	movs	r2, #64	@ 0x40
 800a338:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a33c:	2340      	movs	r3, #64	@ 0x40
 800a33e:	2200      	movs	r2, #0
 800a340:	2180      	movs	r1, #128	@ 0x80
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	f7ff fb4d 	bl	80099e2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2201      	movs	r2, #1
 800a34c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2240      	movs	r2, #64	@ 0x40
 800a352:	621a      	str	r2, [r3, #32]

  return ret;
 800a354:	7bfb      	ldrb	r3, [r7, #15]
}
 800a356:	4618      	mov	r0, r3
 800a358:	3710      	adds	r7, #16
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bd80      	pop	{r7, pc}

0800a35e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a35e:	b480      	push	{r7}
 800a360:	b083      	sub	sp, #12
 800a362:	af00      	add	r7, sp, #0
 800a364:	6078      	str	r0, [r7, #4]
 800a366:	460b      	mov	r3, r1
 800a368:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	78fa      	ldrb	r2, [r7, #3]
 800a36e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a370:	2300      	movs	r3, #0
}
 800a372:	4618      	mov	r0, r3
 800a374:	370c      	adds	r7, #12
 800a376:	46bd      	mov	sp, r7
 800a378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37c:	4770      	bx	lr

0800a37e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a37e:	b580      	push	{r7, lr}
 800a380:	b084      	sub	sp, #16
 800a382:	af00      	add	r7, sp, #0
 800a384:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a38c:	b2db      	uxtb	r3, r3
 800a38e:	2b03      	cmp	r3, #3
 800a390:	d12e      	bne.n	800a3f0 <USBD_LL_SOF+0x72>
  {
#ifdef USE_USBD_COMPOSITE
    /* Parse the table of classes in use */
    for (uint32_t i = 0; i < USBD_MAX_SUPPORTED_CLASS; i++)
 800a392:	2300      	movs	r3, #0
 800a394:	60fb      	str	r3, [r7, #12]
 800a396:	e028      	b.n	800a3ea <USBD_LL_SOF+0x6c>
    {
      /* Check if current class is in use */
      if ((pdev->tclasslist[i].Active) == 1U)
 800a398:	687a      	ldr	r2, [r7, #4]
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	212c      	movs	r1, #44	@ 0x2c
 800a39e:	fb01 f303 	mul.w	r3, r1, r3
 800a3a2:	4413      	add	r3, r2
 800a3a4:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	2b01      	cmp	r3, #1
 800a3ac:	d11a      	bne.n	800a3e4 <USBD_LL_SOF+0x66>
      {
        if (pdev->pClass[i] != NULL)
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	68fa      	ldr	r2, [r7, #12]
 800a3b2:	32ae      	adds	r2, #174	@ 0xae
 800a3b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d013      	beq.n	800a3e4 <USBD_LL_SOF+0x66>
        {
          if (pdev->pClass[i]->SOF != NULL)
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	68fa      	ldr	r2, [r7, #12]
 800a3c0:	32ae      	adds	r2, #174	@ 0xae
 800a3c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3c6:	69db      	ldr	r3, [r3, #28]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d00b      	beq.n	800a3e4 <USBD_LL_SOF+0x66>
          {
            pdev->classId = i;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	68fa      	ldr	r2, [r7, #12]
 800a3d0:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
            (void)pdev->pClass[i]->SOF(pdev);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	68fa      	ldr	r2, [r7, #12]
 800a3d8:	32ae      	adds	r2, #174	@ 0xae
 800a3da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3de:	69db      	ldr	r3, [r3, #28]
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	4798      	blx	r3
    for (uint32_t i = 0; i < USBD_MAX_SUPPORTED_CLASS; i++)
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	3301      	adds	r3, #1
 800a3e8:	60fb      	str	r3, [r7, #12]
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	2b01      	cmp	r3, #1
 800a3ee:	d9d3      	bls.n	800a398 <USBD_LL_SOF+0x1a>
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a3f0:	2300      	movs	r3, #0
}
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	3710      	adds	r7, #16
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd80      	pop	{r7, pc}

0800a3fa <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a3fa:	b480      	push	{r7}
 800a3fc:	b085      	sub	sp, #20
 800a3fe:	af00      	add	r7, sp, #0
 800a400:	6078      	str	r0, [r7, #4]
 800a402:	460b      	mov	r3, r1
 800a404:	70fb      	strb	r3, [r7, #3]
#ifdef USE_USBD_COMPOSITE
  /* Parse the table of classes in use */
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 800a406:	2300      	movs	r3, #0
 800a408:	60fb      	str	r3, [r7, #12]
 800a40a:	e038      	b.n	800a47e <USBD_CoreFindIF+0x84>
  {
    /* Check if current class is in use */
    if ((pdev->tclasslist[i].Active) == 1U)
 800a40c:	687a      	ldr	r2, [r7, #4]
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	212c      	movs	r1, #44	@ 0x2c
 800a412:	fb01 f303 	mul.w	r3, r1, r3
 800a416:	4413      	add	r3, r2
 800a418:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	2b01      	cmp	r3, #1
 800a420:	d12a      	bne.n	800a478 <USBD_CoreFindIF+0x7e>
    {
      /* Parse all interfaces listed in the current class */
      for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 800a422:	2300      	movs	r3, #0
 800a424:	60bb      	str	r3, [r7, #8]
 800a426:	e01b      	b.n	800a460 <USBD_CoreFindIF+0x66>
      {
        /* Check if requested Interface matches the current class interface */
        if (pdev->tclasslist[i].Ifs[j] == index)
 800a428:	687a      	ldr	r2, [r7, #4]
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	212c      	movs	r1, #44	@ 0x2c
 800a42e:	fb01 f303 	mul.w	r3, r1, r3
 800a432:	441a      	add	r2, r3
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	4413      	add	r3, r2
 800a438:	f503 7343 	add.w	r3, r3, #780	@ 0x30c
 800a43c:	781b      	ldrb	r3, [r3, #0]
 800a43e:	78fa      	ldrb	r2, [r7, #3]
 800a440:	429a      	cmp	r2, r3
 800a442:	d10a      	bne.n	800a45a <USBD_CoreFindIF+0x60>
        {
          if (pdev->pClass[i]->Setup != NULL)
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	68fa      	ldr	r2, [r7, #12]
 800a448:	32ae      	adds	r2, #174	@ 0xae
 800a44a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a44e:	689b      	ldr	r3, [r3, #8]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d002      	beq.n	800a45a <USBD_CoreFindIF+0x60>
          {
            return (uint8_t)i;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	b2db      	uxtb	r3, r3
 800a458:	e015      	b.n	800a486 <USBD_CoreFindIF+0x8c>
      for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 800a45a:	68bb      	ldr	r3, [r7, #8]
 800a45c:	3301      	adds	r3, #1
 800a45e:	60bb      	str	r3, [r7, #8]
 800a460:	687a      	ldr	r2, [r7, #4]
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	212c      	movs	r1, #44	@ 0x2c
 800a466:	fb01 f303 	mul.w	r3, r1, r3
 800a46a:	4413      	add	r3, r2
 800a46c:	f503 7342 	add.w	r3, r3, #776	@ 0x308
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	68ba      	ldr	r2, [r7, #8]
 800a474:	429a      	cmp	r2, r3
 800a476:	d3d7      	bcc.n	800a428 <USBD_CoreFindIF+0x2e>
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	3301      	adds	r3, #1
 800a47c:	60fb      	str	r3, [r7, #12]
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	2b01      	cmp	r3, #1
 800a482:	d9c3      	bls.n	800a40c <USBD_CoreFindIF+0x12>
        }
      }
    }
  }

  return 0xFFU;
 800a484:	23ff      	movs	r3, #255	@ 0xff
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 800a486:	4618      	mov	r0, r3
 800a488:	3714      	adds	r7, #20
 800a48a:	46bd      	mov	sp, r7
 800a48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a490:	4770      	bx	lr

0800a492 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a492:	b480      	push	{r7}
 800a494:	b085      	sub	sp, #20
 800a496:	af00      	add	r7, sp, #0
 800a498:	6078      	str	r0, [r7, #4]
 800a49a:	460b      	mov	r3, r1
 800a49c:	70fb      	strb	r3, [r7, #3]
#ifdef USE_USBD_COMPOSITE
  /* Parse the table of classes in use */
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 800a49e:	2300      	movs	r3, #0
 800a4a0:	60fb      	str	r3, [r7, #12]
 800a4a2:	e039      	b.n	800a518 <USBD_CoreFindEP+0x86>
  {
    /* Check if current class is in use */
    if ((pdev->tclasslist[i].Active) == 1U)
 800a4a4:	687a      	ldr	r2, [r7, #4]
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	212c      	movs	r1, #44	@ 0x2c
 800a4aa:	fb01 f303 	mul.w	r3, r1, r3
 800a4ae:	4413      	add	r3, r2
 800a4b0:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	2b01      	cmp	r3, #1
 800a4b8:	d12b      	bne.n	800a512 <USBD_CoreFindEP+0x80>
    {
      /* Parse all endpoints listed in the current class */
      for (uint32_t j = 0U; j < pdev->tclasslist[i].NumEps; j++)
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	60bb      	str	r3, [r7, #8]
 800a4be:	e01c      	b.n	800a4fa <USBD_CoreFindEP+0x68>
      {
        /* Check if requested endpoint matches the current class endpoint */
        if (pdev->tclasslist[i].Eps[j].add == index)
 800a4c0:	6879      	ldr	r1, [r7, #4]
 800a4c2:	68fa      	ldr	r2, [r7, #12]
 800a4c4:	4613      	mov	r3, r2
 800a4c6:	009b      	lsls	r3, r3, #2
 800a4c8:	4413      	add	r3, r2
 800a4ca:	005b      	lsls	r3, r3, #1
 800a4cc:	4413      	add	r3, r2
 800a4ce:	68ba      	ldr	r2, [r7, #8]
 800a4d0:	4413      	add	r3, r2
 800a4d2:	33be      	adds	r3, #190	@ 0xbe
 800a4d4:	f811 3023 	ldrb.w	r3, [r1, r3, lsl #2]
 800a4d8:	78fa      	ldrb	r2, [r7, #3]
 800a4da:	429a      	cmp	r2, r3
 800a4dc:	d10a      	bne.n	800a4f4 <USBD_CoreFindEP+0x62>
        {
          if (pdev->pClass[i]->Setup != NULL)
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	68fa      	ldr	r2, [r7, #12]
 800a4e2:	32ae      	adds	r2, #174	@ 0xae
 800a4e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4e8:	689b      	ldr	r3, [r3, #8]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d002      	beq.n	800a4f4 <USBD_CoreFindEP+0x62>
          {
            return (uint8_t)i;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	b2db      	uxtb	r3, r3
 800a4f2:	e015      	b.n	800a520 <USBD_CoreFindEP+0x8e>
      for (uint32_t j = 0U; j < pdev->tclasslist[i].NumEps; j++)
 800a4f4:	68bb      	ldr	r3, [r7, #8]
 800a4f6:	3301      	adds	r3, #1
 800a4f8:	60bb      	str	r3, [r7, #8]
 800a4fa:	687a      	ldr	r2, [r7, #4]
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	212c      	movs	r1, #44	@ 0x2c
 800a500:	fb01 f303 	mul.w	r3, r1, r3
 800a504:	4413      	add	r3, r2
 800a506:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	68ba      	ldr	r2, [r7, #8]
 800a50e:	429a      	cmp	r2, r3
 800a510:	d3d6      	bcc.n	800a4c0 <USBD_CoreFindEP+0x2e>
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	3301      	adds	r3, #1
 800a516:	60fb      	str	r3, [r7, #12]
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	2b01      	cmp	r3, #1
 800a51c:	d9c2      	bls.n	800a4a4 <USBD_CoreFindEP+0x12>
        }
      }
    }
  }

  return 0xFFU;
 800a51e:	23ff      	movs	r3, #255	@ 0xff
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 800a520:	4618      	mov	r0, r3
 800a522:	3714      	adds	r7, #20
 800a524:	46bd      	mov	sp, r7
 800a526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52a:	4770      	bx	lr

0800a52c <USBD_CoreGetEPAdd>:
  * @param  ep_type: USBD_EP_TYPE_CTRL, USBD_EP_TYPE_ISOC, USBD_EP_TYPE_BULK or USBD_EP_TYPE_INTR
  * @param  ClassId: The Class ID
  * @retval Address of the selected endpoint or 0xFFU if no endpoint found.
  */
uint8_t USBD_CoreGetEPAdd(USBD_HandleTypeDef *pdev, uint8_t ep_dir, uint8_t ep_type, uint8_t ClassId)
{
 800a52c:	b480      	push	{r7}
 800a52e:	b085      	sub	sp, #20
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
 800a534:	4608      	mov	r0, r1
 800a536:	4611      	mov	r1, r2
 800a538:	461a      	mov	r2, r3
 800a53a:	4603      	mov	r3, r0
 800a53c:	70fb      	strb	r3, [r7, #3]
 800a53e:	460b      	mov	r3, r1
 800a540:	70bb      	strb	r3, [r7, #2]
 800a542:	4613      	mov	r3, r2
 800a544:	707b      	strb	r3, [r7, #1]
  uint8_t idx;

  /* Find the EP address in the selected class table */
  for (idx = 0; idx < pdev->tclasslist[ClassId].NumEps; idx++)
 800a546:	2300      	movs	r3, #0
 800a548:	73fb      	strb	r3, [r7, #15]
 800a54a:	e03f      	b.n	800a5cc <USBD_CoreGetEPAdd+0xa0>
  {
    if (((pdev->tclasslist[ClassId].Eps[idx].add & USBD_EP_IN) == ep_dir) && \
 800a54c:	787a      	ldrb	r2, [r7, #1]
 800a54e:	7bf8      	ldrb	r0, [r7, #15]
 800a550:	6879      	ldr	r1, [r7, #4]
 800a552:	4613      	mov	r3, r2
 800a554:	009b      	lsls	r3, r3, #2
 800a556:	4413      	add	r3, r2
 800a558:	005b      	lsls	r3, r3, #1
 800a55a:	4413      	add	r3, r2
 800a55c:	4403      	add	r3, r0
 800a55e:	33be      	adds	r3, #190	@ 0xbe
 800a560:	f811 3023 	ldrb.w	r3, [r1, r3, lsl #2]
 800a564:	f003 0280 	and.w	r2, r3, #128	@ 0x80
 800a568:	78fb      	ldrb	r3, [r7, #3]
 800a56a:	429a      	cmp	r2, r3
 800a56c:	d12b      	bne.n	800a5c6 <USBD_CoreGetEPAdd+0x9a>
        (pdev->tclasslist[ClassId].Eps[idx].type == ep_type) && \
 800a56e:	787a      	ldrb	r2, [r7, #1]
 800a570:	7bf8      	ldrb	r0, [r7, #15]
 800a572:	6879      	ldr	r1, [r7, #4]
 800a574:	4613      	mov	r3, r2
 800a576:	009b      	lsls	r3, r3, #2
 800a578:	4413      	add	r3, r2
 800a57a:	005b      	lsls	r3, r3, #1
 800a57c:	4413      	add	r3, r2
 800a57e:	4403      	add	r3, r0
 800a580:	33be      	adds	r3, #190	@ 0xbe
 800a582:	009b      	lsls	r3, r3, #2
 800a584:	440b      	add	r3, r1
 800a586:	785b      	ldrb	r3, [r3, #1]
    if (((pdev->tclasslist[ClassId].Eps[idx].add & USBD_EP_IN) == ep_dir) && \
 800a588:	78ba      	ldrb	r2, [r7, #2]
 800a58a:	429a      	cmp	r2, r3
 800a58c:	d11b      	bne.n	800a5c6 <USBD_CoreGetEPAdd+0x9a>
        (pdev->tclasslist[ClassId].Eps[idx].is_used != 0U))
 800a58e:	787a      	ldrb	r2, [r7, #1]
 800a590:	7bf8      	ldrb	r0, [r7, #15]
 800a592:	6879      	ldr	r1, [r7, #4]
 800a594:	4613      	mov	r3, r2
 800a596:	009b      	lsls	r3, r3, #2
 800a598:	4413      	add	r3, r2
 800a59a:	005b      	lsls	r3, r3, #1
 800a59c:	4413      	add	r3, r2
 800a59e:	4403      	add	r3, r0
 800a5a0:	33be      	adds	r3, #190	@ 0xbe
 800a5a2:	009b      	lsls	r3, r3, #2
 800a5a4:	440b      	add	r3, r1
 800a5a6:	78db      	ldrb	r3, [r3, #3]
        (pdev->tclasslist[ClassId].Eps[idx].type == ep_type) && \
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d00c      	beq.n	800a5c6 <USBD_CoreGetEPAdd+0x9a>
    {
      return (pdev->tclasslist[ClassId].Eps[idx].add);
 800a5ac:	787a      	ldrb	r2, [r7, #1]
 800a5ae:	7bf8      	ldrb	r0, [r7, #15]
 800a5b0:	6879      	ldr	r1, [r7, #4]
 800a5b2:	4613      	mov	r3, r2
 800a5b4:	009b      	lsls	r3, r3, #2
 800a5b6:	4413      	add	r3, r2
 800a5b8:	005b      	lsls	r3, r3, #1
 800a5ba:	4413      	add	r3, r2
 800a5bc:	4403      	add	r3, r0
 800a5be:	33be      	adds	r3, #190	@ 0xbe
 800a5c0:	f811 3023 	ldrb.w	r3, [r1, r3, lsl #2]
 800a5c4:	e00f      	b.n	800a5e6 <USBD_CoreGetEPAdd+0xba>
  for (idx = 0; idx < pdev->tclasslist[ClassId].NumEps; idx++)
 800a5c6:	7bfb      	ldrb	r3, [r7, #15]
 800a5c8:	3301      	adds	r3, #1
 800a5ca:	73fb      	strb	r3, [r7, #15]
 800a5cc:	7bfa      	ldrb	r2, [r7, #15]
 800a5ce:	787b      	ldrb	r3, [r7, #1]
 800a5d0:	6879      	ldr	r1, [r7, #4]
 800a5d2:	202c      	movs	r0, #44	@ 0x2c
 800a5d4:	fb00 f303 	mul.w	r3, r0, r3
 800a5d8:	440b      	add	r3, r1
 800a5da:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	429a      	cmp	r2, r3
 800a5e2:	d3b3      	bcc.n	800a54c <USBD_CoreGetEPAdd+0x20>
    }
  }

  /* If reaching this point, then no endpoint was found */
  return 0xFFU;
 800a5e4:	23ff      	movs	r3, #255	@ 0xff
}
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	3714      	adds	r7, #20
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f0:	4770      	bx	lr

0800a5f2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a5f2:	b480      	push	{r7}
 800a5f4:	b087      	sub	sp, #28
 800a5f6:	af00      	add	r7, sp, #0
 800a5f8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a5fe:	697b      	ldr	r3, [r7, #20]
 800a600:	781b      	ldrb	r3, [r3, #0]
 800a602:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	3301      	adds	r3, #1
 800a608:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a60a:	697b      	ldr	r3, [r7, #20]
 800a60c:	781b      	ldrb	r3, [r3, #0]
 800a60e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a610:	8a3b      	ldrh	r3, [r7, #16]
 800a612:	021b      	lsls	r3, r3, #8
 800a614:	b21a      	sxth	r2, r3
 800a616:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a61a:	4313      	orrs	r3, r2
 800a61c:	b21b      	sxth	r3, r3
 800a61e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a620:	89fb      	ldrh	r3, [r7, #14]
}
 800a622:	4618      	mov	r0, r3
 800a624:	371c      	adds	r7, #28
 800a626:	46bd      	mov	sp, r7
 800a628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62c:	4770      	bx	lr
	...

0800a630 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b084      	sub	sp, #16
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
 800a638:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a63a:	2300      	movs	r3, #0
 800a63c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	781b      	ldrb	r3, [r3, #0]
 800a642:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a646:	2b40      	cmp	r3, #64	@ 0x40
 800a648:	d005      	beq.n	800a656 <USBD_StdDevReq+0x26>
 800a64a:	2b40      	cmp	r3, #64	@ 0x40
 800a64c:	d857      	bhi.n	800a6fe <USBD_StdDevReq+0xce>
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d00f      	beq.n	800a672 <USBD_StdDevReq+0x42>
 800a652:	2b20      	cmp	r3, #32
 800a654:	d153      	bne.n	800a6fe <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	32ae      	adds	r2, #174	@ 0xae
 800a660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a664:	689b      	ldr	r3, [r3, #8]
 800a666:	6839      	ldr	r1, [r7, #0]
 800a668:	6878      	ldr	r0, [r7, #4]
 800a66a:	4798      	blx	r3
 800a66c:	4603      	mov	r3, r0
 800a66e:	73fb      	strb	r3, [r7, #15]
      break;
 800a670:	e04a      	b.n	800a708 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	785b      	ldrb	r3, [r3, #1]
 800a676:	2b09      	cmp	r3, #9
 800a678:	d83b      	bhi.n	800a6f2 <USBD_StdDevReq+0xc2>
 800a67a:	a201      	add	r2, pc, #4	@ (adr r2, 800a680 <USBD_StdDevReq+0x50>)
 800a67c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a680:	0800a6d5 	.word	0x0800a6d5
 800a684:	0800a6e9 	.word	0x0800a6e9
 800a688:	0800a6f3 	.word	0x0800a6f3
 800a68c:	0800a6df 	.word	0x0800a6df
 800a690:	0800a6f3 	.word	0x0800a6f3
 800a694:	0800a6b3 	.word	0x0800a6b3
 800a698:	0800a6a9 	.word	0x0800a6a9
 800a69c:	0800a6f3 	.word	0x0800a6f3
 800a6a0:	0800a6cb 	.word	0x0800a6cb
 800a6a4:	0800a6bd 	.word	0x0800a6bd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a6a8:	6839      	ldr	r1, [r7, #0]
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	f000 fa3c 	bl	800ab28 <USBD_GetDescriptor>
          break;
 800a6b0:	e024      	b.n	800a6fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a6b2:	6839      	ldr	r1, [r7, #0]
 800a6b4:	6878      	ldr	r0, [r7, #4]
 800a6b6:	f000 fbdb 	bl	800ae70 <USBD_SetAddress>
          break;
 800a6ba:	e01f      	b.n	800a6fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a6bc:	6839      	ldr	r1, [r7, #0]
 800a6be:	6878      	ldr	r0, [r7, #4]
 800a6c0:	f000 fc1a 	bl	800aef8 <USBD_SetConfig>
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	73fb      	strb	r3, [r7, #15]
          break;
 800a6c8:	e018      	b.n	800a6fc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a6ca:	6839      	ldr	r1, [r7, #0]
 800a6cc:	6878      	ldr	r0, [r7, #4]
 800a6ce:	f000 fcbd 	bl	800b04c <USBD_GetConfig>
          break;
 800a6d2:	e013      	b.n	800a6fc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a6d4:	6839      	ldr	r1, [r7, #0]
 800a6d6:	6878      	ldr	r0, [r7, #4]
 800a6d8:	f000 fcee 	bl	800b0b8 <USBD_GetStatus>
          break;
 800a6dc:	e00e      	b.n	800a6fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a6de:	6839      	ldr	r1, [r7, #0]
 800a6e0:	6878      	ldr	r0, [r7, #4]
 800a6e2:	f000 fd1d 	bl	800b120 <USBD_SetFeature>
          break;
 800a6e6:	e009      	b.n	800a6fc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a6e8:	6839      	ldr	r1, [r7, #0]
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	f000 fd41 	bl	800b172 <USBD_ClrFeature>
          break;
 800a6f0:	e004      	b.n	800a6fc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a6f2:	6839      	ldr	r1, [r7, #0]
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f000 fd98 	bl	800b22a <USBD_CtlError>
          break;
 800a6fa:	bf00      	nop
      }
      break;
 800a6fc:	e004      	b.n	800a708 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a6fe:	6839      	ldr	r1, [r7, #0]
 800a700:	6878      	ldr	r0, [r7, #4]
 800a702:	f000 fd92 	bl	800b22a <USBD_CtlError>
      break;
 800a706:	bf00      	nop
  }

  return ret;
 800a708:	7bfb      	ldrb	r3, [r7, #15]
}
 800a70a:	4618      	mov	r0, r3
 800a70c:	3710      	adds	r7, #16
 800a70e:	46bd      	mov	sp, r7
 800a710:	bd80      	pop	{r7, pc}
 800a712:	bf00      	nop

0800a714 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b084      	sub	sp, #16
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
 800a71c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a71e:	2300      	movs	r3, #0
 800a720:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	781b      	ldrb	r3, [r3, #0]
 800a726:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a72a:	2b40      	cmp	r3, #64	@ 0x40
 800a72c:	d005      	beq.n	800a73a <USBD_StdItfReq+0x26>
 800a72e:	2b40      	cmp	r3, #64	@ 0x40
 800a730:	d852      	bhi.n	800a7d8 <USBD_StdItfReq+0xc4>
 800a732:	2b00      	cmp	r3, #0
 800a734:	d001      	beq.n	800a73a <USBD_StdItfReq+0x26>
 800a736:	2b20      	cmp	r3, #32
 800a738:	d14e      	bne.n	800a7d8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a740:	b2db      	uxtb	r3, r3
 800a742:	3b01      	subs	r3, #1
 800a744:	2b02      	cmp	r3, #2
 800a746:	d840      	bhi.n	800a7ca <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	889b      	ldrh	r3, [r3, #4]
 800a74c:	b2db      	uxtb	r3, r3
 800a74e:	2b01      	cmp	r3, #1
 800a750:	d836      	bhi.n	800a7c0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	889b      	ldrh	r3, [r3, #4]
 800a756:	b2db      	uxtb	r3, r3
 800a758:	4619      	mov	r1, r3
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	f7ff fe4d 	bl	800a3fa <USBD_CoreFindIF>
 800a760:	4603      	mov	r3, r0
 800a762:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a764:	7bbb      	ldrb	r3, [r7, #14]
 800a766:	2bff      	cmp	r3, #255	@ 0xff
 800a768:	d01d      	beq.n	800a7a6 <USBD_StdItfReq+0x92>
 800a76a:	7bbb      	ldrb	r3, [r7, #14]
 800a76c:	2b01      	cmp	r3, #1
 800a76e:	d81a      	bhi.n	800a7a6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a770:	7bba      	ldrb	r2, [r7, #14]
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	32ae      	adds	r2, #174	@ 0xae
 800a776:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a77a:	689b      	ldr	r3, [r3, #8]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d00f      	beq.n	800a7a0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a780:	7bba      	ldrb	r2, [r7, #14]
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a788:	7bba      	ldrb	r2, [r7, #14]
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	32ae      	adds	r2, #174	@ 0xae
 800a78e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a792:	689b      	ldr	r3, [r3, #8]
 800a794:	6839      	ldr	r1, [r7, #0]
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	4798      	blx	r3
 800a79a:	4603      	mov	r3, r0
 800a79c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a79e:	e004      	b.n	800a7aa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a7a0:	2303      	movs	r3, #3
 800a7a2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a7a4:	e001      	b.n	800a7aa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a7a6:	2303      	movs	r3, #3
 800a7a8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	88db      	ldrh	r3, [r3, #6]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d110      	bne.n	800a7d4 <USBD_StdItfReq+0xc0>
 800a7b2:	7bfb      	ldrb	r3, [r7, #15]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d10d      	bne.n	800a7d4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	f000 ff10 	bl	800b5de <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a7be:	e009      	b.n	800a7d4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a7c0:	6839      	ldr	r1, [r7, #0]
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	f000 fd31 	bl	800b22a <USBD_CtlError>
          break;
 800a7c8:	e004      	b.n	800a7d4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a7ca:	6839      	ldr	r1, [r7, #0]
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	f000 fd2c 	bl	800b22a <USBD_CtlError>
          break;
 800a7d2:	e000      	b.n	800a7d6 <USBD_StdItfReq+0xc2>
          break;
 800a7d4:	bf00      	nop
      }
      break;
 800a7d6:	e004      	b.n	800a7e2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a7d8:	6839      	ldr	r1, [r7, #0]
 800a7da:	6878      	ldr	r0, [r7, #4]
 800a7dc:	f000 fd25 	bl	800b22a <USBD_CtlError>
      break;
 800a7e0:	bf00      	nop
  }

  return ret;
 800a7e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	3710      	adds	r7, #16
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	bd80      	pop	{r7, pc}

0800a7ec <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b084      	sub	sp, #16
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
 800a7f4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	889b      	ldrh	r3, [r3, #4]
 800a7fe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	781b      	ldrb	r3, [r3, #0]
 800a804:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a808:	2b40      	cmp	r3, #64	@ 0x40
 800a80a:	d007      	beq.n	800a81c <USBD_StdEPReq+0x30>
 800a80c:	2b40      	cmp	r3, #64	@ 0x40
 800a80e:	f200 817f 	bhi.w	800ab10 <USBD_StdEPReq+0x324>
 800a812:	2b00      	cmp	r3, #0
 800a814:	d02a      	beq.n	800a86c <USBD_StdEPReq+0x80>
 800a816:	2b20      	cmp	r3, #32
 800a818:	f040 817a 	bne.w	800ab10 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a81c:	7bbb      	ldrb	r3, [r7, #14]
 800a81e:	4619      	mov	r1, r3
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	f7ff fe36 	bl	800a492 <USBD_CoreFindEP>
 800a826:	4603      	mov	r3, r0
 800a828:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a82a:	7b7b      	ldrb	r3, [r7, #13]
 800a82c:	2bff      	cmp	r3, #255	@ 0xff
 800a82e:	f000 8174 	beq.w	800ab1a <USBD_StdEPReq+0x32e>
 800a832:	7b7b      	ldrb	r3, [r7, #13]
 800a834:	2b01      	cmp	r3, #1
 800a836:	f200 8170 	bhi.w	800ab1a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a83a:	7b7a      	ldrb	r2, [r7, #13]
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a842:	7b7a      	ldrb	r2, [r7, #13]
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	32ae      	adds	r2, #174	@ 0xae
 800a848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a84c:	689b      	ldr	r3, [r3, #8]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	f000 8163 	beq.w	800ab1a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a854:	7b7a      	ldrb	r2, [r7, #13]
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	32ae      	adds	r2, #174	@ 0xae
 800a85a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a85e:	689b      	ldr	r3, [r3, #8]
 800a860:	6839      	ldr	r1, [r7, #0]
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	4798      	blx	r3
 800a866:	4603      	mov	r3, r0
 800a868:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a86a:	e156      	b.n	800ab1a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	785b      	ldrb	r3, [r3, #1]
 800a870:	2b03      	cmp	r3, #3
 800a872:	d008      	beq.n	800a886 <USBD_StdEPReq+0x9a>
 800a874:	2b03      	cmp	r3, #3
 800a876:	f300 8145 	bgt.w	800ab04 <USBD_StdEPReq+0x318>
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	f000 809b 	beq.w	800a9b6 <USBD_StdEPReq+0x1ca>
 800a880:	2b01      	cmp	r3, #1
 800a882:	d03c      	beq.n	800a8fe <USBD_StdEPReq+0x112>
 800a884:	e13e      	b.n	800ab04 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a88c:	b2db      	uxtb	r3, r3
 800a88e:	2b02      	cmp	r3, #2
 800a890:	d002      	beq.n	800a898 <USBD_StdEPReq+0xac>
 800a892:	2b03      	cmp	r3, #3
 800a894:	d016      	beq.n	800a8c4 <USBD_StdEPReq+0xd8>
 800a896:	e02c      	b.n	800a8f2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a898:	7bbb      	ldrb	r3, [r7, #14]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d00d      	beq.n	800a8ba <USBD_StdEPReq+0xce>
 800a89e:	7bbb      	ldrb	r3, [r7, #14]
 800a8a0:	2b80      	cmp	r3, #128	@ 0x80
 800a8a2:	d00a      	beq.n	800a8ba <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a8a4:	7bbb      	ldrb	r3, [r7, #14]
 800a8a6:	4619      	mov	r1, r3
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	f7ff f8d3 	bl	8009a54 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a8ae:	2180      	movs	r1, #128	@ 0x80
 800a8b0:	6878      	ldr	r0, [r7, #4]
 800a8b2:	f7ff f8cf 	bl	8009a54 <USBD_LL_StallEP>
 800a8b6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a8b8:	e020      	b.n	800a8fc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a8ba:	6839      	ldr	r1, [r7, #0]
 800a8bc:	6878      	ldr	r0, [r7, #4]
 800a8be:	f000 fcb4 	bl	800b22a <USBD_CtlError>
              break;
 800a8c2:	e01b      	b.n	800a8fc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	885b      	ldrh	r3, [r3, #2]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d10e      	bne.n	800a8ea <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a8cc:	7bbb      	ldrb	r3, [r7, #14]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d00b      	beq.n	800a8ea <USBD_StdEPReq+0xfe>
 800a8d2:	7bbb      	ldrb	r3, [r7, #14]
 800a8d4:	2b80      	cmp	r3, #128	@ 0x80
 800a8d6:	d008      	beq.n	800a8ea <USBD_StdEPReq+0xfe>
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	88db      	ldrh	r3, [r3, #6]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d104      	bne.n	800a8ea <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a8e0:	7bbb      	ldrb	r3, [r7, #14]
 800a8e2:	4619      	mov	r1, r3
 800a8e4:	6878      	ldr	r0, [r7, #4]
 800a8e6:	f7ff f8b5 	bl	8009a54 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f000 fe77 	bl	800b5de <USBD_CtlSendStatus>

              break;
 800a8f0:	e004      	b.n	800a8fc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a8f2:	6839      	ldr	r1, [r7, #0]
 800a8f4:	6878      	ldr	r0, [r7, #4]
 800a8f6:	f000 fc98 	bl	800b22a <USBD_CtlError>
              break;
 800a8fa:	bf00      	nop
          }
          break;
 800a8fc:	e107      	b.n	800ab0e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a904:	b2db      	uxtb	r3, r3
 800a906:	2b02      	cmp	r3, #2
 800a908:	d002      	beq.n	800a910 <USBD_StdEPReq+0x124>
 800a90a:	2b03      	cmp	r3, #3
 800a90c:	d016      	beq.n	800a93c <USBD_StdEPReq+0x150>
 800a90e:	e04b      	b.n	800a9a8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a910:	7bbb      	ldrb	r3, [r7, #14]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d00d      	beq.n	800a932 <USBD_StdEPReq+0x146>
 800a916:	7bbb      	ldrb	r3, [r7, #14]
 800a918:	2b80      	cmp	r3, #128	@ 0x80
 800a91a:	d00a      	beq.n	800a932 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a91c:	7bbb      	ldrb	r3, [r7, #14]
 800a91e:	4619      	mov	r1, r3
 800a920:	6878      	ldr	r0, [r7, #4]
 800a922:	f7ff f897 	bl	8009a54 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a926:	2180      	movs	r1, #128	@ 0x80
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	f7ff f893 	bl	8009a54 <USBD_LL_StallEP>
 800a92e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a930:	e040      	b.n	800a9b4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a932:	6839      	ldr	r1, [r7, #0]
 800a934:	6878      	ldr	r0, [r7, #4]
 800a936:	f000 fc78 	bl	800b22a <USBD_CtlError>
              break;
 800a93a:	e03b      	b.n	800a9b4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	885b      	ldrh	r3, [r3, #2]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d136      	bne.n	800a9b2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a944:	7bbb      	ldrb	r3, [r7, #14]
 800a946:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d004      	beq.n	800a958 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a94e:	7bbb      	ldrb	r3, [r7, #14]
 800a950:	4619      	mov	r1, r3
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f7ff f897 	bl	8009a86 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a958:	6878      	ldr	r0, [r7, #4]
 800a95a:	f000 fe40 	bl	800b5de <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a95e:	7bbb      	ldrb	r3, [r7, #14]
 800a960:	4619      	mov	r1, r3
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	f7ff fd95 	bl	800a492 <USBD_CoreFindEP>
 800a968:	4603      	mov	r3, r0
 800a96a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a96c:	7b7b      	ldrb	r3, [r7, #13]
 800a96e:	2bff      	cmp	r3, #255	@ 0xff
 800a970:	d01f      	beq.n	800a9b2 <USBD_StdEPReq+0x1c6>
 800a972:	7b7b      	ldrb	r3, [r7, #13]
 800a974:	2b01      	cmp	r3, #1
 800a976:	d81c      	bhi.n	800a9b2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a978:	7b7a      	ldrb	r2, [r7, #13]
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a980:	7b7a      	ldrb	r2, [r7, #13]
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	32ae      	adds	r2, #174	@ 0xae
 800a986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a98a:	689b      	ldr	r3, [r3, #8]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d010      	beq.n	800a9b2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a990:	7b7a      	ldrb	r2, [r7, #13]
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	32ae      	adds	r2, #174	@ 0xae
 800a996:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a99a:	689b      	ldr	r3, [r3, #8]
 800a99c:	6839      	ldr	r1, [r7, #0]
 800a99e:	6878      	ldr	r0, [r7, #4]
 800a9a0:	4798      	blx	r3
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a9a6:	e004      	b.n	800a9b2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a9a8:	6839      	ldr	r1, [r7, #0]
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	f000 fc3d 	bl	800b22a <USBD_CtlError>
              break;
 800a9b0:	e000      	b.n	800a9b4 <USBD_StdEPReq+0x1c8>
              break;
 800a9b2:	bf00      	nop
          }
          break;
 800a9b4:	e0ab      	b.n	800ab0e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a9bc:	b2db      	uxtb	r3, r3
 800a9be:	2b02      	cmp	r3, #2
 800a9c0:	d002      	beq.n	800a9c8 <USBD_StdEPReq+0x1dc>
 800a9c2:	2b03      	cmp	r3, #3
 800a9c4:	d032      	beq.n	800aa2c <USBD_StdEPReq+0x240>
 800a9c6:	e097      	b.n	800aaf8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a9c8:	7bbb      	ldrb	r3, [r7, #14]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d007      	beq.n	800a9de <USBD_StdEPReq+0x1f2>
 800a9ce:	7bbb      	ldrb	r3, [r7, #14]
 800a9d0:	2b80      	cmp	r3, #128	@ 0x80
 800a9d2:	d004      	beq.n	800a9de <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a9d4:	6839      	ldr	r1, [r7, #0]
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f000 fc27 	bl	800b22a <USBD_CtlError>
                break;
 800a9dc:	e091      	b.n	800ab02 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a9de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	da0b      	bge.n	800a9fe <USBD_StdEPReq+0x212>
 800a9e6:	7bbb      	ldrb	r3, [r7, #14]
 800a9e8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a9ec:	4613      	mov	r3, r2
 800a9ee:	009b      	lsls	r3, r3, #2
 800a9f0:	4413      	add	r3, r2
 800a9f2:	009b      	lsls	r3, r3, #2
 800a9f4:	3310      	adds	r3, #16
 800a9f6:	687a      	ldr	r2, [r7, #4]
 800a9f8:	4413      	add	r3, r2
 800a9fa:	3304      	adds	r3, #4
 800a9fc:	e00b      	b.n	800aa16 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a9fe:	7bbb      	ldrb	r3, [r7, #14]
 800aa00:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa04:	4613      	mov	r3, r2
 800aa06:	009b      	lsls	r3, r3, #2
 800aa08:	4413      	add	r3, r2
 800aa0a:	009b      	lsls	r3, r3, #2
 800aa0c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800aa10:	687a      	ldr	r2, [r7, #4]
 800aa12:	4413      	add	r3, r2
 800aa14:	3304      	adds	r3, #4
 800aa16:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800aa18:	68bb      	ldr	r3, [r7, #8]
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	2202      	movs	r2, #2
 800aa22:	4619      	mov	r1, r3
 800aa24:	6878      	ldr	r0, [r7, #4]
 800aa26:	f000 fd80 	bl	800b52a <USBD_CtlSendData>
              break;
 800aa2a:	e06a      	b.n	800ab02 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800aa2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	da11      	bge.n	800aa58 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800aa34:	7bbb      	ldrb	r3, [r7, #14]
 800aa36:	f003 020f 	and.w	r2, r3, #15
 800aa3a:	6879      	ldr	r1, [r7, #4]
 800aa3c:	4613      	mov	r3, r2
 800aa3e:	009b      	lsls	r3, r3, #2
 800aa40:	4413      	add	r3, r2
 800aa42:	009b      	lsls	r3, r3, #2
 800aa44:	440b      	add	r3, r1
 800aa46:	3324      	adds	r3, #36	@ 0x24
 800aa48:	881b      	ldrh	r3, [r3, #0]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d117      	bne.n	800aa7e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800aa4e:	6839      	ldr	r1, [r7, #0]
 800aa50:	6878      	ldr	r0, [r7, #4]
 800aa52:	f000 fbea 	bl	800b22a <USBD_CtlError>
                  break;
 800aa56:	e054      	b.n	800ab02 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800aa58:	7bbb      	ldrb	r3, [r7, #14]
 800aa5a:	f003 020f 	and.w	r2, r3, #15
 800aa5e:	6879      	ldr	r1, [r7, #4]
 800aa60:	4613      	mov	r3, r2
 800aa62:	009b      	lsls	r3, r3, #2
 800aa64:	4413      	add	r3, r2
 800aa66:	009b      	lsls	r3, r3, #2
 800aa68:	440b      	add	r3, r1
 800aa6a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800aa6e:	881b      	ldrh	r3, [r3, #0]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d104      	bne.n	800aa7e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800aa74:	6839      	ldr	r1, [r7, #0]
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	f000 fbd7 	bl	800b22a <USBD_CtlError>
                  break;
 800aa7c:	e041      	b.n	800ab02 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa7e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	da0b      	bge.n	800aa9e <USBD_StdEPReq+0x2b2>
 800aa86:	7bbb      	ldrb	r3, [r7, #14]
 800aa88:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800aa8c:	4613      	mov	r3, r2
 800aa8e:	009b      	lsls	r3, r3, #2
 800aa90:	4413      	add	r3, r2
 800aa92:	009b      	lsls	r3, r3, #2
 800aa94:	3310      	adds	r3, #16
 800aa96:	687a      	ldr	r2, [r7, #4]
 800aa98:	4413      	add	r3, r2
 800aa9a:	3304      	adds	r3, #4
 800aa9c:	e00b      	b.n	800aab6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aa9e:	7bbb      	ldrb	r3, [r7, #14]
 800aaa0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aaa4:	4613      	mov	r3, r2
 800aaa6:	009b      	lsls	r3, r3, #2
 800aaa8:	4413      	add	r3, r2
 800aaaa:	009b      	lsls	r3, r3, #2
 800aaac:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800aab0:	687a      	ldr	r2, [r7, #4]
 800aab2:	4413      	add	r3, r2
 800aab4:	3304      	adds	r3, #4
 800aab6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800aab8:	7bbb      	ldrb	r3, [r7, #14]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d002      	beq.n	800aac4 <USBD_StdEPReq+0x2d8>
 800aabe:	7bbb      	ldrb	r3, [r7, #14]
 800aac0:	2b80      	cmp	r3, #128	@ 0x80
 800aac2:	d103      	bne.n	800aacc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800aac4:	68bb      	ldr	r3, [r7, #8]
 800aac6:	2200      	movs	r2, #0
 800aac8:	601a      	str	r2, [r3, #0]
 800aaca:	e00e      	b.n	800aaea <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800aacc:	7bbb      	ldrb	r3, [r7, #14]
 800aace:	4619      	mov	r1, r3
 800aad0:	6878      	ldr	r0, [r7, #4]
 800aad2:	f7fe fff1 	bl	8009ab8 <USBD_LL_IsStallEP>
 800aad6:	4603      	mov	r3, r0
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d003      	beq.n	800aae4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	2201      	movs	r2, #1
 800aae0:	601a      	str	r2, [r3, #0]
 800aae2:	e002      	b.n	800aaea <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800aae4:	68bb      	ldr	r3, [r7, #8]
 800aae6:	2200      	movs	r2, #0
 800aae8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	2202      	movs	r2, #2
 800aaee:	4619      	mov	r1, r3
 800aaf0:	6878      	ldr	r0, [r7, #4]
 800aaf2:	f000 fd1a 	bl	800b52a <USBD_CtlSendData>
              break;
 800aaf6:	e004      	b.n	800ab02 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800aaf8:	6839      	ldr	r1, [r7, #0]
 800aafa:	6878      	ldr	r0, [r7, #4]
 800aafc:	f000 fb95 	bl	800b22a <USBD_CtlError>
              break;
 800ab00:	bf00      	nop
          }
          break;
 800ab02:	e004      	b.n	800ab0e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800ab04:	6839      	ldr	r1, [r7, #0]
 800ab06:	6878      	ldr	r0, [r7, #4]
 800ab08:	f000 fb8f 	bl	800b22a <USBD_CtlError>
          break;
 800ab0c:	bf00      	nop
      }
      break;
 800ab0e:	e005      	b.n	800ab1c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800ab10:	6839      	ldr	r1, [r7, #0]
 800ab12:	6878      	ldr	r0, [r7, #4]
 800ab14:	f000 fb89 	bl	800b22a <USBD_CtlError>
      break;
 800ab18:	e000      	b.n	800ab1c <USBD_StdEPReq+0x330>
      break;
 800ab1a:	bf00      	nop
  }

  return ret;
 800ab1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab1e:	4618      	mov	r0, r3
 800ab20:	3710      	adds	r7, #16
 800ab22:	46bd      	mov	sp, r7
 800ab24:	bd80      	pop	{r7, pc}
	...

0800ab28 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b084      	sub	sp, #16
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
 800ab30:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ab32:	2300      	movs	r3, #0
 800ab34:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ab36:	2300      	movs	r3, #0
 800ab38:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ab3e:	683b      	ldr	r3, [r7, #0]
 800ab40:	885b      	ldrh	r3, [r3, #2]
 800ab42:	0a1b      	lsrs	r3, r3, #8
 800ab44:	b29b      	uxth	r3, r3
 800ab46:	3b01      	subs	r3, #1
 800ab48:	2b06      	cmp	r3, #6
 800ab4a:	f200 8163 	bhi.w	800ae14 <USBD_GetDescriptor+0x2ec>
 800ab4e:	a201      	add	r2, pc, #4	@ (adr r2, 800ab54 <USBD_GetDescriptor+0x2c>)
 800ab50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab54:	0800ab71 	.word	0x0800ab71
 800ab58:	0800ab89 	.word	0x0800ab89
 800ab5c:	0800ac01 	.word	0x0800ac01
 800ab60:	0800ae15 	.word	0x0800ae15
 800ab64:	0800ae15 	.word	0x0800ae15
 800ab68:	0800ad77 	.word	0x0800ad77
 800ab6c:	0800adbf 	.word	0x0800adbf
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	687a      	ldr	r2, [r7, #4]
 800ab7a:	7c12      	ldrb	r2, [r2, #16]
 800ab7c:	f107 0108 	add.w	r1, r7, #8
 800ab80:	4610      	mov	r0, r2
 800ab82:	4798      	blx	r3
 800ab84:	60f8      	str	r0, [r7, #12]
      break;
 800ab86:	e14d      	b.n	800ae24 <USBD_GetDescriptor+0x2fc>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	7c1b      	ldrb	r3, [r3, #16]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d11b      	bne.n	800abc8 <USBD_GetDescriptor+0xa0>
      {
#ifdef USE_USBD_COMPOSITE
        if ((uint8_t)(pdev->NumClasses) > 0U)
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f8d3 32e4 	ldr.w	r3, [r3, #740]	@ 0x2e4
 800ab96:	b2db      	uxtb	r3, r3
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d007      	beq.n	800abac <USBD_GetDescriptor+0x84>
        {
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
 800ab9c:	4b9c      	ldr	r3, [pc, #624]	@ (800ae10 <USBD_GetDescriptor+0x2e8>)
 800ab9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aba0:	f107 0208 	add.w	r2, r7, #8
 800aba4:	4610      	mov	r0, r2
 800aba6:	4798      	blx	r3
 800aba8:	60f8      	str	r0, [r7, #12]
 800abaa:	e008      	b.n	800abbe <USBD_GetDescriptor+0x96>
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800abb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abb4:	f107 0208 	add.w	r2, r7, #8
 800abb8:	4610      	mov	r0, r2
 800abba:	4798      	blx	r3
 800abbc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	3301      	adds	r3, #1
 800abc2:	2202      	movs	r2, #2
 800abc4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800abc6:	e12d      	b.n	800ae24 <USBD_GetDescriptor+0x2fc>
        if ((uint8_t)(pdev->NumClasses) > 0U)
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	f8d3 32e4 	ldr.w	r3, [r3, #740]	@ 0x2e4
 800abce:	b2db      	uxtb	r3, r3
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d007      	beq.n	800abe4 <USBD_GetDescriptor+0xbc>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetFSConfigDescriptor(&len);
 800abd4:	4b8e      	ldr	r3, [pc, #568]	@ (800ae10 <USBD_GetDescriptor+0x2e8>)
 800abd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abd8:	f107 0208 	add.w	r2, r7, #8
 800abdc:	4610      	mov	r0, r2
 800abde:	4798      	blx	r3
 800abe0:	60f8      	str	r0, [r7, #12]
 800abe2:	e008      	b.n	800abf6 <USBD_GetDescriptor+0xce>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800abea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abec:	f107 0208 	add.w	r2, r7, #8
 800abf0:	4610      	mov	r0, r2
 800abf2:	4798      	blx	r3
 800abf4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	3301      	adds	r3, #1
 800abfa:	2202      	movs	r2, #2
 800abfc:	701a      	strb	r2, [r3, #0]
      break;
 800abfe:	e111      	b.n	800ae24 <USBD_GetDescriptor+0x2fc>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	885b      	ldrh	r3, [r3, #2]
 800ac04:	b2db      	uxtb	r3, r3
 800ac06:	2b05      	cmp	r3, #5
 800ac08:	f200 80ac 	bhi.w	800ad64 <USBD_GetDescriptor+0x23c>
 800ac0c:	a201      	add	r2, pc, #4	@ (adr r2, 800ac14 <USBD_GetDescriptor+0xec>)
 800ac0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac12:	bf00      	nop
 800ac14:	0800ac2d 	.word	0x0800ac2d
 800ac18:	0800ac61 	.word	0x0800ac61
 800ac1c:	0800ac95 	.word	0x0800ac95
 800ac20:	0800acc9 	.word	0x0800acc9
 800ac24:	0800acfd 	.word	0x0800acfd
 800ac28:	0800ad31 	.word	0x0800ad31
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac32:	685b      	ldr	r3, [r3, #4]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d00b      	beq.n	800ac50 <USBD_GetDescriptor+0x128>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac3e:	685b      	ldr	r3, [r3, #4]
 800ac40:	687a      	ldr	r2, [r7, #4]
 800ac42:	7c12      	ldrb	r2, [r2, #16]
 800ac44:	f107 0108 	add.w	r1, r7, #8
 800ac48:	4610      	mov	r0, r2
 800ac4a:	4798      	blx	r3
 800ac4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac4e:	e091      	b.n	800ad74 <USBD_GetDescriptor+0x24c>
            USBD_CtlError(pdev, req);
 800ac50:	6839      	ldr	r1, [r7, #0]
 800ac52:	6878      	ldr	r0, [r7, #4]
 800ac54:	f000 fae9 	bl	800b22a <USBD_CtlError>
            err++;
 800ac58:	7afb      	ldrb	r3, [r7, #11]
 800ac5a:	3301      	adds	r3, #1
 800ac5c:	72fb      	strb	r3, [r7, #11]
          break;
 800ac5e:	e089      	b.n	800ad74 <USBD_GetDescriptor+0x24c>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac66:	689b      	ldr	r3, [r3, #8]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d00b      	beq.n	800ac84 <USBD_GetDescriptor+0x15c>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac72:	689b      	ldr	r3, [r3, #8]
 800ac74:	687a      	ldr	r2, [r7, #4]
 800ac76:	7c12      	ldrb	r2, [r2, #16]
 800ac78:	f107 0108 	add.w	r1, r7, #8
 800ac7c:	4610      	mov	r0, r2
 800ac7e:	4798      	blx	r3
 800ac80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac82:	e077      	b.n	800ad74 <USBD_GetDescriptor+0x24c>
            USBD_CtlError(pdev, req);
 800ac84:	6839      	ldr	r1, [r7, #0]
 800ac86:	6878      	ldr	r0, [r7, #4]
 800ac88:	f000 facf 	bl	800b22a <USBD_CtlError>
            err++;
 800ac8c:	7afb      	ldrb	r3, [r7, #11]
 800ac8e:	3301      	adds	r3, #1
 800ac90:	72fb      	strb	r3, [r7, #11]
          break;
 800ac92:	e06f      	b.n	800ad74 <USBD_GetDescriptor+0x24c>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac9a:	68db      	ldr	r3, [r3, #12]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d00b      	beq.n	800acb8 <USBD_GetDescriptor+0x190>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aca6:	68db      	ldr	r3, [r3, #12]
 800aca8:	687a      	ldr	r2, [r7, #4]
 800acaa:	7c12      	ldrb	r2, [r2, #16]
 800acac:	f107 0108 	add.w	r1, r7, #8
 800acb0:	4610      	mov	r0, r2
 800acb2:	4798      	blx	r3
 800acb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800acb6:	e05d      	b.n	800ad74 <USBD_GetDescriptor+0x24c>
            USBD_CtlError(pdev, req);
 800acb8:	6839      	ldr	r1, [r7, #0]
 800acba:	6878      	ldr	r0, [r7, #4]
 800acbc:	f000 fab5 	bl	800b22a <USBD_CtlError>
            err++;
 800acc0:	7afb      	ldrb	r3, [r7, #11]
 800acc2:	3301      	adds	r3, #1
 800acc4:	72fb      	strb	r3, [r7, #11]
          break;
 800acc6:	e055      	b.n	800ad74 <USBD_GetDescriptor+0x24c>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800acce:	691b      	ldr	r3, [r3, #16]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d00b      	beq.n	800acec <USBD_GetDescriptor+0x1c4>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800acda:	691b      	ldr	r3, [r3, #16]
 800acdc:	687a      	ldr	r2, [r7, #4]
 800acde:	7c12      	ldrb	r2, [r2, #16]
 800ace0:	f107 0108 	add.w	r1, r7, #8
 800ace4:	4610      	mov	r0, r2
 800ace6:	4798      	blx	r3
 800ace8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800acea:	e043      	b.n	800ad74 <USBD_GetDescriptor+0x24c>
            USBD_CtlError(pdev, req);
 800acec:	6839      	ldr	r1, [r7, #0]
 800acee:	6878      	ldr	r0, [r7, #4]
 800acf0:	f000 fa9b 	bl	800b22a <USBD_CtlError>
            err++;
 800acf4:	7afb      	ldrb	r3, [r7, #11]
 800acf6:	3301      	adds	r3, #1
 800acf8:	72fb      	strb	r3, [r7, #11]
          break;
 800acfa:	e03b      	b.n	800ad74 <USBD_GetDescriptor+0x24c>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad02:	695b      	ldr	r3, [r3, #20]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d00b      	beq.n	800ad20 <USBD_GetDescriptor+0x1f8>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad0e:	695b      	ldr	r3, [r3, #20]
 800ad10:	687a      	ldr	r2, [r7, #4]
 800ad12:	7c12      	ldrb	r2, [r2, #16]
 800ad14:	f107 0108 	add.w	r1, r7, #8
 800ad18:	4610      	mov	r0, r2
 800ad1a:	4798      	blx	r3
 800ad1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad1e:	e029      	b.n	800ad74 <USBD_GetDescriptor+0x24c>
            USBD_CtlError(pdev, req);
 800ad20:	6839      	ldr	r1, [r7, #0]
 800ad22:	6878      	ldr	r0, [r7, #4]
 800ad24:	f000 fa81 	bl	800b22a <USBD_CtlError>
            err++;
 800ad28:	7afb      	ldrb	r3, [r7, #11]
 800ad2a:	3301      	adds	r3, #1
 800ad2c:	72fb      	strb	r3, [r7, #11]
          break;
 800ad2e:	e021      	b.n	800ad74 <USBD_GetDescriptor+0x24c>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad36:	699b      	ldr	r3, [r3, #24]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d00b      	beq.n	800ad54 <USBD_GetDescriptor+0x22c>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad42:	699b      	ldr	r3, [r3, #24]
 800ad44:	687a      	ldr	r2, [r7, #4]
 800ad46:	7c12      	ldrb	r2, [r2, #16]
 800ad48:	f107 0108 	add.w	r1, r7, #8
 800ad4c:	4610      	mov	r0, r2
 800ad4e:	4798      	blx	r3
 800ad50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad52:	e00f      	b.n	800ad74 <USBD_GetDescriptor+0x24c>
            USBD_CtlError(pdev, req);
 800ad54:	6839      	ldr	r1, [r7, #0]
 800ad56:	6878      	ldr	r0, [r7, #4]
 800ad58:	f000 fa67 	bl	800b22a <USBD_CtlError>
            err++;
 800ad5c:	7afb      	ldrb	r3, [r7, #11]
 800ad5e:	3301      	adds	r3, #1
 800ad60:	72fb      	strb	r3, [r7, #11]
          break;
 800ad62:	e007      	b.n	800ad74 <USBD_GetDescriptor+0x24c>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ad64:	6839      	ldr	r1, [r7, #0]
 800ad66:	6878      	ldr	r0, [r7, #4]
 800ad68:	f000 fa5f 	bl	800b22a <USBD_CtlError>
          err++;
 800ad6c:	7afb      	ldrb	r3, [r7, #11]
 800ad6e:	3301      	adds	r3, #1
 800ad70:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ad72:	bf00      	nop
      }
      break;
 800ad74:	e056      	b.n	800ae24 <USBD_GetDescriptor+0x2fc>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	7c1b      	ldrb	r3, [r3, #16]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d117      	bne.n	800adae <USBD_GetDescriptor+0x286>
      {
#ifdef USE_USBD_COMPOSITE
        if ((uint8_t)(pdev->NumClasses) > 0U)
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	f8d3 32e4 	ldr.w	r3, [r3, #740]	@ 0x2e4
 800ad84:	b2db      	uxtb	r3, r3
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d007      	beq.n	800ad9a <USBD_GetDescriptor+0x272>
        {
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
 800ad8a:	4b21      	ldr	r3, [pc, #132]	@ (800ae10 <USBD_GetDescriptor+0x2e8>)
 800ad8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad8e:	f107 0208 	add.w	r2, r7, #8
 800ad92:	4610      	mov	r0, r2
 800ad94:	4798      	blx	r3
 800ad96:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ad98:	e044      	b.n	800ae24 <USBD_GetDescriptor+0x2fc>
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ada0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ada2:	f107 0208 	add.w	r2, r7, #8
 800ada6:	4610      	mov	r0, r2
 800ada8:	4798      	blx	r3
 800adaa:	60f8      	str	r0, [r7, #12]
      break;
 800adac:	e03a      	b.n	800ae24 <USBD_GetDescriptor+0x2fc>
        USBD_CtlError(pdev, req);
 800adae:	6839      	ldr	r1, [r7, #0]
 800adb0:	6878      	ldr	r0, [r7, #4]
 800adb2:	f000 fa3a 	bl	800b22a <USBD_CtlError>
        err++;
 800adb6:	7afb      	ldrb	r3, [r7, #11]
 800adb8:	3301      	adds	r3, #1
 800adba:	72fb      	strb	r3, [r7, #11]
      break;
 800adbc:	e032      	b.n	800ae24 <USBD_GetDescriptor+0x2fc>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	7c1b      	ldrb	r3, [r3, #16]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d11b      	bne.n	800adfe <USBD_GetDescriptor+0x2d6>
      {
#ifdef USE_USBD_COMPOSITE
        if ((uint8_t)(pdev->NumClasses) > 0U)
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	f8d3 32e4 	ldr.w	r3, [r3, #740]	@ 0x2e4
 800adcc:	b2db      	uxtb	r3, r3
 800adce:	2b00      	cmp	r3, #0
 800add0:	d007      	beq.n	800ade2 <USBD_GetDescriptor+0x2ba>
        {
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
 800add2:	4b0f      	ldr	r3, [pc, #60]	@ (800ae10 <USBD_GetDescriptor+0x2e8>)
 800add4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800add6:	f107 0208 	add.w	r2, r7, #8
 800adda:	4610      	mov	r0, r2
 800addc:	4798      	blx	r3
 800adde:	60f8      	str	r0, [r7, #12]
 800ade0:	e008      	b.n	800adf4 <USBD_GetDescriptor+0x2cc>
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ade8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800adea:	f107 0208 	add.w	r2, r7, #8
 800adee:	4610      	mov	r0, r2
 800adf0:	4798      	blx	r3
 800adf2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	3301      	adds	r3, #1
 800adf8:	2207      	movs	r2, #7
 800adfa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800adfc:	e012      	b.n	800ae24 <USBD_GetDescriptor+0x2fc>
        USBD_CtlError(pdev, req);
 800adfe:	6839      	ldr	r1, [r7, #0]
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	f000 fa12 	bl	800b22a <USBD_CtlError>
        err++;
 800ae06:	7afb      	ldrb	r3, [r7, #11]
 800ae08:	3301      	adds	r3, #1
 800ae0a:	72fb      	strb	r3, [r7, #11]
      break;
 800ae0c:	e00a      	b.n	800ae24 <USBD_GetDescriptor+0x2fc>
 800ae0e:	bf00      	nop
 800ae10:	20000068 	.word	0x20000068

    default:
      USBD_CtlError(pdev, req);
 800ae14:	6839      	ldr	r1, [r7, #0]
 800ae16:	6878      	ldr	r0, [r7, #4]
 800ae18:	f000 fa07 	bl	800b22a <USBD_CtlError>
      err++;
 800ae1c:	7afb      	ldrb	r3, [r7, #11]
 800ae1e:	3301      	adds	r3, #1
 800ae20:	72fb      	strb	r3, [r7, #11]
      break;
 800ae22:	bf00      	nop
  }

  if (err != 0U)
 800ae24:	7afb      	ldrb	r3, [r7, #11]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d11e      	bne.n	800ae68 <USBD_GetDescriptor+0x340>
  {
    return;
  }

  if (req->wLength != 0U)
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	88db      	ldrh	r3, [r3, #6]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d016      	beq.n	800ae60 <USBD_GetDescriptor+0x338>
  {
    if (len != 0U)
 800ae32:	893b      	ldrh	r3, [r7, #8]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d00e      	beq.n	800ae56 <USBD_GetDescriptor+0x32e>
    {
      len = MIN(len, req->wLength);
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	88da      	ldrh	r2, [r3, #6]
 800ae3c:	893b      	ldrh	r3, [r7, #8]
 800ae3e:	4293      	cmp	r3, r2
 800ae40:	bf28      	it	cs
 800ae42:	4613      	movcs	r3, r2
 800ae44:	b29b      	uxth	r3, r3
 800ae46:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ae48:	893b      	ldrh	r3, [r7, #8]
 800ae4a:	461a      	mov	r2, r3
 800ae4c:	68f9      	ldr	r1, [r7, #12]
 800ae4e:	6878      	ldr	r0, [r7, #4]
 800ae50:	f000 fb6b 	bl	800b52a <USBD_CtlSendData>
 800ae54:	e009      	b.n	800ae6a <USBD_GetDescriptor+0x342>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ae56:	6839      	ldr	r1, [r7, #0]
 800ae58:	6878      	ldr	r0, [r7, #4]
 800ae5a:	f000 f9e6 	bl	800b22a <USBD_CtlError>
 800ae5e:	e004      	b.n	800ae6a <USBD_GetDescriptor+0x342>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ae60:	6878      	ldr	r0, [r7, #4]
 800ae62:	f000 fbbc 	bl	800b5de <USBD_CtlSendStatus>
 800ae66:	e000      	b.n	800ae6a <USBD_GetDescriptor+0x342>
    return;
 800ae68:	bf00      	nop
  }
}
 800ae6a:	3710      	adds	r7, #16
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	bd80      	pop	{r7, pc}

0800ae70 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b084      	sub	sp, #16
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
 800ae78:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	889b      	ldrh	r3, [r3, #4]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d131      	bne.n	800aee6 <USBD_SetAddress+0x76>
 800ae82:	683b      	ldr	r3, [r7, #0]
 800ae84:	88db      	ldrh	r3, [r3, #6]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d12d      	bne.n	800aee6 <USBD_SetAddress+0x76>
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	885b      	ldrh	r3, [r3, #2]
 800ae8e:	2b7f      	cmp	r3, #127	@ 0x7f
 800ae90:	d829      	bhi.n	800aee6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	885b      	ldrh	r3, [r3, #2]
 800ae96:	b2db      	uxtb	r3, r3
 800ae98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae9c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aea4:	b2db      	uxtb	r3, r3
 800aea6:	2b03      	cmp	r3, #3
 800aea8:	d104      	bne.n	800aeb4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800aeaa:	6839      	ldr	r1, [r7, #0]
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f000 f9bc 	bl	800b22a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aeb2:	e01d      	b.n	800aef0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	7bfa      	ldrb	r2, [r7, #15]
 800aeb8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800aebc:	7bfb      	ldrb	r3, [r7, #15]
 800aebe:	4619      	mov	r1, r3
 800aec0:	6878      	ldr	r0, [r7, #4]
 800aec2:	f7fe fe25 	bl	8009b10 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	f000 fb89 	bl	800b5de <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800aecc:	7bfb      	ldrb	r3, [r7, #15]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d004      	beq.n	800aedc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2202      	movs	r2, #2
 800aed6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aeda:	e009      	b.n	800aef0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2201      	movs	r2, #1
 800aee0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aee4:	e004      	b.n	800aef0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800aee6:	6839      	ldr	r1, [r7, #0]
 800aee8:	6878      	ldr	r0, [r7, #4]
 800aeea:	f000 f99e 	bl	800b22a <USBD_CtlError>
  }
}
 800aeee:	bf00      	nop
 800aef0:	bf00      	nop
 800aef2:	3710      	adds	r7, #16
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bd80      	pop	{r7, pc}

0800aef8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b084      	sub	sp, #16
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
 800af00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800af02:	2300      	movs	r3, #0
 800af04:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	885b      	ldrh	r3, [r3, #2]
 800af0a:	b2da      	uxtb	r2, r3
 800af0c:	4b4e      	ldr	r3, [pc, #312]	@ (800b048 <USBD_SetConfig+0x150>)
 800af0e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800af10:	4b4d      	ldr	r3, [pc, #308]	@ (800b048 <USBD_SetConfig+0x150>)
 800af12:	781b      	ldrb	r3, [r3, #0]
 800af14:	2b01      	cmp	r3, #1
 800af16:	d905      	bls.n	800af24 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800af18:	6839      	ldr	r1, [r7, #0]
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f000 f985 	bl	800b22a <USBD_CtlError>
    return USBD_FAIL;
 800af20:	2303      	movs	r3, #3
 800af22:	e08c      	b.n	800b03e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af2a:	b2db      	uxtb	r3, r3
 800af2c:	2b02      	cmp	r3, #2
 800af2e:	d002      	beq.n	800af36 <USBD_SetConfig+0x3e>
 800af30:	2b03      	cmp	r3, #3
 800af32:	d029      	beq.n	800af88 <USBD_SetConfig+0x90>
 800af34:	e075      	b.n	800b022 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800af36:	4b44      	ldr	r3, [pc, #272]	@ (800b048 <USBD_SetConfig+0x150>)
 800af38:	781b      	ldrb	r3, [r3, #0]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d020      	beq.n	800af80 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800af3e:	4b42      	ldr	r3, [pc, #264]	@ (800b048 <USBD_SetConfig+0x150>)
 800af40:	781b      	ldrb	r3, [r3, #0]
 800af42:	461a      	mov	r2, r3
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800af48:	4b3f      	ldr	r3, [pc, #252]	@ (800b048 <USBD_SetConfig+0x150>)
 800af4a:	781b      	ldrb	r3, [r3, #0]
 800af4c:	4619      	mov	r1, r3
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f7fe ff65 	bl	8009e1e <USBD_SetClassConfig>
 800af54:	4603      	mov	r3, r0
 800af56:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800af58:	7bfb      	ldrb	r3, [r7, #15]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d008      	beq.n	800af70 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800af5e:	6839      	ldr	r1, [r7, #0]
 800af60:	6878      	ldr	r0, [r7, #4]
 800af62:	f000 f962 	bl	800b22a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	2202      	movs	r2, #2
 800af6a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800af6e:	e065      	b.n	800b03c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	f000 fb34 	bl	800b5de <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	2203      	movs	r2, #3
 800af7a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800af7e:	e05d      	b.n	800b03c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f000 fb2c 	bl	800b5de <USBD_CtlSendStatus>
      break;
 800af86:	e059      	b.n	800b03c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800af88:	4b2f      	ldr	r3, [pc, #188]	@ (800b048 <USBD_SetConfig+0x150>)
 800af8a:	781b      	ldrb	r3, [r3, #0]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d112      	bne.n	800afb6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2202      	movs	r2, #2
 800af94:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800af98:	4b2b      	ldr	r3, [pc, #172]	@ (800b048 <USBD_SetConfig+0x150>)
 800af9a:	781b      	ldrb	r3, [r3, #0]
 800af9c:	461a      	mov	r2, r3
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800afa2:	4b29      	ldr	r3, [pc, #164]	@ (800b048 <USBD_SetConfig+0x150>)
 800afa4:	781b      	ldrb	r3, [r3, #0]
 800afa6:	4619      	mov	r1, r3
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	f7fe ff73 	bl	8009e94 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800afae:	6878      	ldr	r0, [r7, #4]
 800afb0:	f000 fb15 	bl	800b5de <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800afb4:	e042      	b.n	800b03c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800afb6:	4b24      	ldr	r3, [pc, #144]	@ (800b048 <USBD_SetConfig+0x150>)
 800afb8:	781b      	ldrb	r3, [r3, #0]
 800afba:	461a      	mov	r2, r3
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	685b      	ldr	r3, [r3, #4]
 800afc0:	429a      	cmp	r2, r3
 800afc2:	d02a      	beq.n	800b01a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	685b      	ldr	r3, [r3, #4]
 800afc8:	b2db      	uxtb	r3, r3
 800afca:	4619      	mov	r1, r3
 800afcc:	6878      	ldr	r0, [r7, #4]
 800afce:	f7fe ff61 	bl	8009e94 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800afd2:	4b1d      	ldr	r3, [pc, #116]	@ (800b048 <USBD_SetConfig+0x150>)
 800afd4:	781b      	ldrb	r3, [r3, #0]
 800afd6:	461a      	mov	r2, r3
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800afdc:	4b1a      	ldr	r3, [pc, #104]	@ (800b048 <USBD_SetConfig+0x150>)
 800afde:	781b      	ldrb	r3, [r3, #0]
 800afe0:	4619      	mov	r1, r3
 800afe2:	6878      	ldr	r0, [r7, #4]
 800afe4:	f7fe ff1b 	bl	8009e1e <USBD_SetClassConfig>
 800afe8:	4603      	mov	r3, r0
 800afea:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800afec:	7bfb      	ldrb	r3, [r7, #15]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d00f      	beq.n	800b012 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800aff2:	6839      	ldr	r1, [r7, #0]
 800aff4:	6878      	ldr	r0, [r7, #4]
 800aff6:	f000 f918 	bl	800b22a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	685b      	ldr	r3, [r3, #4]
 800affe:	b2db      	uxtb	r3, r3
 800b000:	4619      	mov	r1, r3
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	f7fe ff46 	bl	8009e94 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2202      	movs	r2, #2
 800b00c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b010:	e014      	b.n	800b03c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b012:	6878      	ldr	r0, [r7, #4]
 800b014:	f000 fae3 	bl	800b5de <USBD_CtlSendStatus>
      break;
 800b018:	e010      	b.n	800b03c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b01a:	6878      	ldr	r0, [r7, #4]
 800b01c:	f000 fadf 	bl	800b5de <USBD_CtlSendStatus>
      break;
 800b020:	e00c      	b.n	800b03c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b022:	6839      	ldr	r1, [r7, #0]
 800b024:	6878      	ldr	r0, [r7, #4]
 800b026:	f000 f900 	bl	800b22a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b02a:	4b07      	ldr	r3, [pc, #28]	@ (800b048 <USBD_SetConfig+0x150>)
 800b02c:	781b      	ldrb	r3, [r3, #0]
 800b02e:	4619      	mov	r1, r3
 800b030:	6878      	ldr	r0, [r7, #4]
 800b032:	f7fe ff2f 	bl	8009e94 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b036:	2303      	movs	r3, #3
 800b038:	73fb      	strb	r3, [r7, #15]
      break;
 800b03a:	bf00      	nop
  }

  return ret;
 800b03c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b03e:	4618      	mov	r0, r3
 800b040:	3710      	adds	r7, #16
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}
 800b046:	bf00      	nop
 800b048:	20000b8c 	.word	0x20000b8c

0800b04c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b082      	sub	sp, #8
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
 800b054:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	88db      	ldrh	r3, [r3, #6]
 800b05a:	2b01      	cmp	r3, #1
 800b05c:	d004      	beq.n	800b068 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b05e:	6839      	ldr	r1, [r7, #0]
 800b060:	6878      	ldr	r0, [r7, #4]
 800b062:	f000 f8e2 	bl	800b22a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b066:	e023      	b.n	800b0b0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b06e:	b2db      	uxtb	r3, r3
 800b070:	2b02      	cmp	r3, #2
 800b072:	dc02      	bgt.n	800b07a <USBD_GetConfig+0x2e>
 800b074:	2b00      	cmp	r3, #0
 800b076:	dc03      	bgt.n	800b080 <USBD_GetConfig+0x34>
 800b078:	e015      	b.n	800b0a6 <USBD_GetConfig+0x5a>
 800b07a:	2b03      	cmp	r3, #3
 800b07c:	d00b      	beq.n	800b096 <USBD_GetConfig+0x4a>
 800b07e:	e012      	b.n	800b0a6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2200      	movs	r2, #0
 800b084:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	3308      	adds	r3, #8
 800b08a:	2201      	movs	r2, #1
 800b08c:	4619      	mov	r1, r3
 800b08e:	6878      	ldr	r0, [r7, #4]
 800b090:	f000 fa4b 	bl	800b52a <USBD_CtlSendData>
        break;
 800b094:	e00c      	b.n	800b0b0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	3304      	adds	r3, #4
 800b09a:	2201      	movs	r2, #1
 800b09c:	4619      	mov	r1, r3
 800b09e:	6878      	ldr	r0, [r7, #4]
 800b0a0:	f000 fa43 	bl	800b52a <USBD_CtlSendData>
        break;
 800b0a4:	e004      	b.n	800b0b0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b0a6:	6839      	ldr	r1, [r7, #0]
 800b0a8:	6878      	ldr	r0, [r7, #4]
 800b0aa:	f000 f8be 	bl	800b22a <USBD_CtlError>
        break;
 800b0ae:	bf00      	nop
}
 800b0b0:	bf00      	nop
 800b0b2:	3708      	adds	r7, #8
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	bd80      	pop	{r7, pc}

0800b0b8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b082      	sub	sp, #8
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
 800b0c0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b0c8:	b2db      	uxtb	r3, r3
 800b0ca:	3b01      	subs	r3, #1
 800b0cc:	2b02      	cmp	r3, #2
 800b0ce:	d81e      	bhi.n	800b10e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b0d0:	683b      	ldr	r3, [r7, #0]
 800b0d2:	88db      	ldrh	r3, [r3, #6]
 800b0d4:	2b02      	cmp	r3, #2
 800b0d6:	d004      	beq.n	800b0e2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b0d8:	6839      	ldr	r1, [r7, #0]
 800b0da:	6878      	ldr	r0, [r7, #4]
 800b0dc:	f000 f8a5 	bl	800b22a <USBD_CtlError>
        break;
 800b0e0:	e01a      	b.n	800b118 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	2201      	movs	r2, #1
 800b0e6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d005      	beq.n	800b0fe <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	68db      	ldr	r3, [r3, #12]
 800b0f6:	f043 0202 	orr.w	r2, r3, #2
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	330c      	adds	r3, #12
 800b102:	2202      	movs	r2, #2
 800b104:	4619      	mov	r1, r3
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	f000 fa0f 	bl	800b52a <USBD_CtlSendData>
      break;
 800b10c:	e004      	b.n	800b118 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b10e:	6839      	ldr	r1, [r7, #0]
 800b110:	6878      	ldr	r0, [r7, #4]
 800b112:	f000 f88a 	bl	800b22a <USBD_CtlError>
      break;
 800b116:	bf00      	nop
  }
}
 800b118:	bf00      	nop
 800b11a:	3708      	adds	r7, #8
 800b11c:	46bd      	mov	sp, r7
 800b11e:	bd80      	pop	{r7, pc}

0800b120 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b082      	sub	sp, #8
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
 800b128:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	885b      	ldrh	r3, [r3, #2]
 800b12e:	2b01      	cmp	r3, #1
 800b130:	d107      	bne.n	800b142 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2201      	movs	r2, #1
 800b136:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	f000 fa4f 	bl	800b5de <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b140:	e013      	b.n	800b16a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	885b      	ldrh	r3, [r3, #2]
 800b146:	2b02      	cmp	r3, #2
 800b148:	d10b      	bne.n	800b162 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	889b      	ldrh	r3, [r3, #4]
 800b14e:	0a1b      	lsrs	r3, r3, #8
 800b150:	b29b      	uxth	r3, r3
 800b152:	b2da      	uxtb	r2, r3
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b15a:	6878      	ldr	r0, [r7, #4]
 800b15c:	f000 fa3f 	bl	800b5de <USBD_CtlSendStatus>
}
 800b160:	e003      	b.n	800b16a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b162:	6839      	ldr	r1, [r7, #0]
 800b164:	6878      	ldr	r0, [r7, #4]
 800b166:	f000 f860 	bl	800b22a <USBD_CtlError>
}
 800b16a:	bf00      	nop
 800b16c:	3708      	adds	r7, #8
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}

0800b172 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b172:	b580      	push	{r7, lr}
 800b174:	b082      	sub	sp, #8
 800b176:	af00      	add	r7, sp, #0
 800b178:	6078      	str	r0, [r7, #4]
 800b17a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b182:	b2db      	uxtb	r3, r3
 800b184:	3b01      	subs	r3, #1
 800b186:	2b02      	cmp	r3, #2
 800b188:	d80b      	bhi.n	800b1a2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	885b      	ldrh	r3, [r3, #2]
 800b18e:	2b01      	cmp	r3, #1
 800b190:	d10c      	bne.n	800b1ac <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	2200      	movs	r2, #0
 800b196:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b19a:	6878      	ldr	r0, [r7, #4]
 800b19c:	f000 fa1f 	bl	800b5de <USBD_CtlSendStatus>
      }
      break;
 800b1a0:	e004      	b.n	800b1ac <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b1a2:	6839      	ldr	r1, [r7, #0]
 800b1a4:	6878      	ldr	r0, [r7, #4]
 800b1a6:	f000 f840 	bl	800b22a <USBD_CtlError>
      break;
 800b1aa:	e000      	b.n	800b1ae <USBD_ClrFeature+0x3c>
      break;
 800b1ac:	bf00      	nop
  }
}
 800b1ae:	bf00      	nop
 800b1b0:	3708      	adds	r7, #8
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	bd80      	pop	{r7, pc}

0800b1b6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b1b6:	b580      	push	{r7, lr}
 800b1b8:	b084      	sub	sp, #16
 800b1ba:	af00      	add	r7, sp, #0
 800b1bc:	6078      	str	r0, [r7, #4]
 800b1be:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	781a      	ldrb	r2, [r3, #0]
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	3301      	adds	r3, #1
 800b1d0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	781a      	ldrb	r2, [r3, #0]
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	3301      	adds	r3, #1
 800b1de:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b1e0:	68f8      	ldr	r0, [r7, #12]
 800b1e2:	f7ff fa06 	bl	800a5f2 <SWAPBYTE>
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	461a      	mov	r2, r3
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	3301      	adds	r3, #1
 800b1f2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	3301      	adds	r3, #1
 800b1f8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b1fa:	68f8      	ldr	r0, [r7, #12]
 800b1fc:	f7ff f9f9 	bl	800a5f2 <SWAPBYTE>
 800b200:	4603      	mov	r3, r0
 800b202:	461a      	mov	r2, r3
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	3301      	adds	r3, #1
 800b20c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	3301      	adds	r3, #1
 800b212:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b214:	68f8      	ldr	r0, [r7, #12]
 800b216:	f7ff f9ec 	bl	800a5f2 <SWAPBYTE>
 800b21a:	4603      	mov	r3, r0
 800b21c:	461a      	mov	r2, r3
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	80da      	strh	r2, [r3, #6]
}
 800b222:	bf00      	nop
 800b224:	3710      	adds	r7, #16
 800b226:	46bd      	mov	sp, r7
 800b228:	bd80      	pop	{r7, pc}

0800b22a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b22a:	b580      	push	{r7, lr}
 800b22c:	b082      	sub	sp, #8
 800b22e:	af00      	add	r7, sp, #0
 800b230:	6078      	str	r0, [r7, #4]
 800b232:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b234:	2180      	movs	r1, #128	@ 0x80
 800b236:	6878      	ldr	r0, [r7, #4]
 800b238:	f7fe fc0c 	bl	8009a54 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b23c:	2100      	movs	r1, #0
 800b23e:	6878      	ldr	r0, [r7, #4]
 800b240:	f7fe fc08 	bl	8009a54 <USBD_LL_StallEP>
}
 800b244:	bf00      	nop
 800b246:	3708      	adds	r7, #8
 800b248:	46bd      	mov	sp, r7
 800b24a:	bd80      	pop	{r7, pc}

0800b24c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b086      	sub	sp, #24
 800b250:	af00      	add	r7, sp, #0
 800b252:	60f8      	str	r0, [r7, #12]
 800b254:	60b9      	str	r1, [r7, #8]
 800b256:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b258:	2300      	movs	r3, #0
 800b25a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d036      	beq.n	800b2d0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b266:	6938      	ldr	r0, [r7, #16]
 800b268:	f000 f836 	bl	800b2d8 <USBD_GetLen>
 800b26c:	4603      	mov	r3, r0
 800b26e:	3301      	adds	r3, #1
 800b270:	b29b      	uxth	r3, r3
 800b272:	005b      	lsls	r3, r3, #1
 800b274:	b29a      	uxth	r2, r3
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b27a:	7dfb      	ldrb	r3, [r7, #23]
 800b27c:	68ba      	ldr	r2, [r7, #8]
 800b27e:	4413      	add	r3, r2
 800b280:	687a      	ldr	r2, [r7, #4]
 800b282:	7812      	ldrb	r2, [r2, #0]
 800b284:	701a      	strb	r2, [r3, #0]
  idx++;
 800b286:	7dfb      	ldrb	r3, [r7, #23]
 800b288:	3301      	adds	r3, #1
 800b28a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b28c:	7dfb      	ldrb	r3, [r7, #23]
 800b28e:	68ba      	ldr	r2, [r7, #8]
 800b290:	4413      	add	r3, r2
 800b292:	2203      	movs	r2, #3
 800b294:	701a      	strb	r2, [r3, #0]
  idx++;
 800b296:	7dfb      	ldrb	r3, [r7, #23]
 800b298:	3301      	adds	r3, #1
 800b29a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b29c:	e013      	b.n	800b2c6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b29e:	7dfb      	ldrb	r3, [r7, #23]
 800b2a0:	68ba      	ldr	r2, [r7, #8]
 800b2a2:	4413      	add	r3, r2
 800b2a4:	693a      	ldr	r2, [r7, #16]
 800b2a6:	7812      	ldrb	r2, [r2, #0]
 800b2a8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b2aa:	693b      	ldr	r3, [r7, #16]
 800b2ac:	3301      	adds	r3, #1
 800b2ae:	613b      	str	r3, [r7, #16]
    idx++;
 800b2b0:	7dfb      	ldrb	r3, [r7, #23]
 800b2b2:	3301      	adds	r3, #1
 800b2b4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b2b6:	7dfb      	ldrb	r3, [r7, #23]
 800b2b8:	68ba      	ldr	r2, [r7, #8]
 800b2ba:	4413      	add	r3, r2
 800b2bc:	2200      	movs	r2, #0
 800b2be:	701a      	strb	r2, [r3, #0]
    idx++;
 800b2c0:	7dfb      	ldrb	r3, [r7, #23]
 800b2c2:	3301      	adds	r3, #1
 800b2c4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b2c6:	693b      	ldr	r3, [r7, #16]
 800b2c8:	781b      	ldrb	r3, [r3, #0]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d1e7      	bne.n	800b29e <USBD_GetString+0x52>
 800b2ce:	e000      	b.n	800b2d2 <USBD_GetString+0x86>
    return;
 800b2d0:	bf00      	nop
  }
}
 800b2d2:	3718      	adds	r7, #24
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	bd80      	pop	{r7, pc}

0800b2d8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b2d8:	b480      	push	{r7}
 800b2da:	b085      	sub	sp, #20
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b2e8:	e005      	b.n	800b2f6 <USBD_GetLen+0x1e>
  {
    len++;
 800b2ea:	7bfb      	ldrb	r3, [r7, #15]
 800b2ec:	3301      	adds	r3, #1
 800b2ee:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b2f0:	68bb      	ldr	r3, [r7, #8]
 800b2f2:	3301      	adds	r3, #1
 800b2f4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b2f6:	68bb      	ldr	r3, [r7, #8]
 800b2f8:	781b      	ldrb	r3, [r3, #0]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d1f5      	bne.n	800b2ea <USBD_GetLen+0x12>
  }

  return len;
 800b2fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800b300:	4618      	mov	r0, r3
 800b302:	3714      	adds	r7, #20
 800b304:	46bd      	mov	sp, r7
 800b306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30a:	4770      	bx	lr

0800b30c <USBD_Class_DeviceDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b30c:	b480      	push	{r7}
 800b30e:	b083      	sub	sp, #12
 800b310:	af00      	add	r7, sp, #0
 800b312:	4603      	mov	r3, r0
 800b314:	6039      	str	r1, [r7, #0]
 800b316:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = sizeof(USBD_DeviceDesc);
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	2212      	movs	r2, #18
 800b31c:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)USBD_DeviceDesc;
 800b31e:	4b03      	ldr	r3, [pc, #12]	@ (800b32c <USBD_Class_DeviceDescriptor+0x20>)
}
 800b320:	4618      	mov	r0, r3
 800b322:	370c      	adds	r7, #12
 800b324:	46bd      	mov	sp, r7
 800b326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32a:	4770      	bx	lr
 800b32c:	20000110 	.word	0x20000110

0800b330 <USBD_Class_LangIDStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b330:	b480      	push	{r7}
 800b332:	b083      	sub	sp, #12
 800b334:	af00      	add	r7, sp, #0
 800b336:	4603      	mov	r3, r0
 800b338:	6039      	str	r1, [r7, #0]
 800b33a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = sizeof(USBD_LangIDDesc);
 800b33c:	683b      	ldr	r3, [r7, #0]
 800b33e:	2204      	movs	r2, #4
 800b340:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)USBD_LangIDDesc;
 800b342:	4b03      	ldr	r3, [pc, #12]	@ (800b350 <USBD_Class_LangIDStrDescriptor+0x20>)
}
 800b344:	4618      	mov	r0, r3
 800b346:	370c      	adds	r7, #12
 800b348:	46bd      	mov	sp, r7
 800b34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34e:	4770      	bx	lr
 800b350:	20000124 	.word	0x20000124

0800b354 <USBD_Class_ProductStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b082      	sub	sp, #8
 800b358:	af00      	add	r7, sp, #0
 800b35a:	4603      	mov	r3, r0
 800b35c:	6039      	str	r1, [r7, #0]
 800b35e:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 800b360:	79fb      	ldrb	r3, [r7, #7]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d105      	bne.n	800b372 <USBD_Class_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_HS_STRING, USBD_StrDesc, length);
 800b366:	683a      	ldr	r2, [r7, #0]
 800b368:	4907      	ldr	r1, [pc, #28]	@ (800b388 <USBD_Class_ProductStrDescriptor+0x34>)
 800b36a:	4808      	ldr	r0, [pc, #32]	@ (800b38c <USBD_Class_ProductStrDescriptor+0x38>)
 800b36c:	f7ff ff6e 	bl	800b24c <USBD_GetString>
 800b370:	e004      	b.n	800b37c <USBD_Class_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);
 800b372:	683a      	ldr	r2, [r7, #0]
 800b374:	4904      	ldr	r1, [pc, #16]	@ (800b388 <USBD_Class_ProductStrDescriptor+0x34>)
 800b376:	4806      	ldr	r0, [pc, #24]	@ (800b390 <USBD_Class_ProductStrDescriptor+0x3c>)
 800b378:	f7ff ff68 	bl	800b24c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b37c:	4b02      	ldr	r3, [pc, #8]	@ (800b388 <USBD_Class_ProductStrDescriptor+0x34>)
}
 800b37e:	4618      	mov	r0, r3
 800b380:	3708      	adds	r7, #8
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}
 800b386:	bf00      	nop
 800b388:	20000b90 	.word	0x20000b90
 800b38c:	0800c970 	.word	0x0800c970
 800b390:	0800c994 	.word	0x0800c994

0800b394 <USBD_Class_ManufacturerStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b082      	sub	sp, #8
 800b398:	af00      	add	r7, sp, #0
 800b39a:	4603      	mov	r3, r0
 800b39c:	6039      	str	r1, [r7, #0]
 800b39e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b3a0:	683a      	ldr	r2, [r7, #0]
 800b3a2:	4904      	ldr	r1, [pc, #16]	@ (800b3b4 <USBD_Class_ManufacturerStrDescriptor+0x20>)
 800b3a4:	4804      	ldr	r0, [pc, #16]	@ (800b3b8 <USBD_Class_ManufacturerStrDescriptor+0x24>)
 800b3a6:	f7ff ff51 	bl	800b24c <USBD_GetString>
  return USBD_StrDesc;
 800b3aa:	4b02      	ldr	r3, [pc, #8]	@ (800b3b4 <USBD_Class_ManufacturerStrDescriptor+0x20>)
}
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	3708      	adds	r7, #8
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	bd80      	pop	{r7, pc}
 800b3b4:	20000b90 	.word	0x20000b90
 800b3b8:	0800c9b8 	.word	0x0800c9b8

0800b3bc <USBD_Class_SerialStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b082      	sub	sp, #8
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	4603      	mov	r3, r0
 800b3c4:	6039      	str	r1, [r7, #0]
 800b3c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = USB_SIZ_STRING_SERIAL;
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	221a      	movs	r2, #26
 800b3cc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique ID*/
  Get_SerialNum();
 800b3ce:	f000 f843 	bl	800b458 <Get_SerialNum>

  return (uint8_t *)USBD_StringSerial;
 800b3d2:	4b02      	ldr	r3, [pc, #8]	@ (800b3dc <USBD_Class_SerialStrDescriptor+0x20>)
}
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	3708      	adds	r7, #8
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	bd80      	pop	{r7, pc}
 800b3dc:	20000128 	.word	0x20000128

0800b3e0 <USBD_Class_ConfigStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b082      	sub	sp, #8
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	6039      	str	r1, [r7, #0]
 800b3ea:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 800b3ec:	79fb      	ldrb	r3, [r7, #7]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d105      	bne.n	800b3fe <USBD_Class_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_HS_STRING, USBD_StrDesc, length);
 800b3f2:	683a      	ldr	r2, [r7, #0]
 800b3f4:	4907      	ldr	r1, [pc, #28]	@ (800b414 <USBD_Class_ConfigStrDescriptor+0x34>)
 800b3f6:	4808      	ldr	r0, [pc, #32]	@ (800b418 <USBD_Class_ConfigStrDescriptor+0x38>)
 800b3f8:	f7ff ff28 	bl	800b24c <USBD_GetString>
 800b3fc:	e004      	b.n	800b408 <USBD_Class_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length);
 800b3fe:	683a      	ldr	r2, [r7, #0]
 800b400:	4904      	ldr	r1, [pc, #16]	@ (800b414 <USBD_Class_ConfigStrDescriptor+0x34>)
 800b402:	4805      	ldr	r0, [pc, #20]	@ (800b418 <USBD_Class_ConfigStrDescriptor+0x38>)
 800b404:	f7ff ff22 	bl	800b24c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b408:	4b02      	ldr	r3, [pc, #8]	@ (800b414 <USBD_Class_ConfigStrDescriptor+0x34>)
}
 800b40a:	4618      	mov	r0, r3
 800b40c:	3708      	adds	r7, #8
 800b40e:	46bd      	mov	sp, r7
 800b410:	bd80      	pop	{r7, pc}
 800b412:	bf00      	nop
 800b414:	20000b90 	.word	0x20000b90
 800b418:	0800c9cc 	.word	0x0800c9cc

0800b41c <USBD_Class_InterfaceStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b082      	sub	sp, #8
 800b420:	af00      	add	r7, sp, #0
 800b422:	4603      	mov	r3, r0
 800b424:	6039      	str	r1, [r7, #0]
 800b426:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 800b428:	79fb      	ldrb	r3, [r7, #7]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d105      	bne.n	800b43a <USBD_Class_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_HS_STRING, USBD_StrDesc, length);
 800b42e:	683a      	ldr	r2, [r7, #0]
 800b430:	4907      	ldr	r1, [pc, #28]	@ (800b450 <USBD_Class_InterfaceStrDescriptor+0x34>)
 800b432:	4808      	ldr	r0, [pc, #32]	@ (800b454 <USBD_Class_InterfaceStrDescriptor+0x38>)
 800b434:	f7ff ff0a 	bl	800b24c <USBD_GetString>
 800b438:	e004      	b.n	800b444 <USBD_Class_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 800b43a:	683a      	ldr	r2, [r7, #0]
 800b43c:	4904      	ldr	r1, [pc, #16]	@ (800b450 <USBD_Class_InterfaceStrDescriptor+0x34>)
 800b43e:	4805      	ldr	r0, [pc, #20]	@ (800b454 <USBD_Class_InterfaceStrDescriptor+0x38>)
 800b440:	f7ff ff04 	bl	800b24c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b444:	4b02      	ldr	r3, [pc, #8]	@ (800b450 <USBD_Class_InterfaceStrDescriptor+0x34>)
}
 800b446:	4618      	mov	r0, r3
 800b448:	3708      	adds	r7, #8
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}
 800b44e:	bf00      	nop
 800b450:	20000b90 	.word	0x20000b90
 800b454:	0800c9ec 	.word	0x0800c9ec

0800b458 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b084      	sub	sp, #16
 800b45c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *)DEVICE_ID1;
 800b45e:	4b0f      	ldr	r3, [pc, #60]	@ (800b49c <Get_SerialNum+0x44>)
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *)DEVICE_ID2;
 800b464:	4b0e      	ldr	r3, [pc, #56]	@ (800b4a0 <Get_SerialNum+0x48>)
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *)DEVICE_ID3;
 800b46a:	4b0e      	ldr	r3, [pc, #56]	@ (800b4a4 <Get_SerialNum+0x4c>)
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b470:	68fa      	ldr	r2, [r7, #12]
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	4413      	add	r3, r2
 800b476:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0U)
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d009      	beq.n	800b492 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8U);
 800b47e:	2208      	movs	r2, #8
 800b480:	4909      	ldr	r1, [pc, #36]	@ (800b4a8 <Get_SerialNum+0x50>)
 800b482:	68f8      	ldr	r0, [r7, #12]
 800b484:	f000 f814 	bl	800b4b0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4U);
 800b488:	2204      	movs	r2, #4
 800b48a:	4908      	ldr	r1, [pc, #32]	@ (800b4ac <Get_SerialNum+0x54>)
 800b48c:	68b8      	ldr	r0, [r7, #8]
 800b48e:	f000 f80f 	bl	800b4b0 <IntToUnicode>
  }
}
 800b492:	bf00      	nop
 800b494:	3710      	adds	r7, #16
 800b496:	46bd      	mov	sp, r7
 800b498:	bd80      	pop	{r7, pc}
 800b49a:	bf00      	nop
 800b49c:	08fff800 	.word	0x08fff800
 800b4a0:	08fff804 	.word	0x08fff804
 800b4a4:	08fff808 	.word	0x08fff808
 800b4a8:	2000012a 	.word	0x2000012a
 800b4ac:	2000013a 	.word	0x2000013a

0800b4b0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t *pbuf, uint8_t len)
{
 800b4b0:	b480      	push	{r7}
 800b4b2:	b087      	sub	sp, #28
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	60f8      	str	r0, [r7, #12]
 800b4b8:	60b9      	str	r1, [r7, #8]
 800b4ba:	4613      	mov	r3, r2
 800b4bc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0U;
 800b4be:	2300      	movs	r3, #0
 800b4c0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0U ; idx < len ; idx ++)
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	75fb      	strb	r3, [r7, #23]
 800b4c6:	e025      	b.n	800b514 <IntToUnicode+0x64>
  {
    if (((value >> 28)) < 0xAU)
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	0f1b      	lsrs	r3, r3, #28
 800b4cc:	2b09      	cmp	r3, #9
 800b4ce:	d80a      	bhi.n	800b4e6 <IntToUnicode+0x36>
    {
      pbuf[ 2U * idx] = (value >> 28) + '0';
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	0f1b      	lsrs	r3, r3, #28
 800b4d4:	b2da      	uxtb	r2, r3
 800b4d6:	7dfb      	ldrb	r3, [r7, #23]
 800b4d8:	005b      	lsls	r3, r3, #1
 800b4da:	68b9      	ldr	r1, [r7, #8]
 800b4dc:	440b      	add	r3, r1
 800b4de:	3230      	adds	r2, #48	@ 0x30
 800b4e0:	b2d2      	uxtb	r2, r2
 800b4e2:	701a      	strb	r2, [r3, #0]
 800b4e4:	e009      	b.n	800b4fa <IntToUnicode+0x4a>
    }
    else
    {
      pbuf[2U * idx] = (value >> 28) + 'A' - 10U;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	0f1b      	lsrs	r3, r3, #28
 800b4ea:	b2da      	uxtb	r2, r3
 800b4ec:	7dfb      	ldrb	r3, [r7, #23]
 800b4ee:	005b      	lsls	r3, r3, #1
 800b4f0:	68b9      	ldr	r1, [r7, #8]
 800b4f2:	440b      	add	r3, r1
 800b4f4:	3237      	adds	r2, #55	@ 0x37
 800b4f6:	b2d2      	uxtb	r2, r2
 800b4f8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	011b      	lsls	r3, r3, #4
 800b4fe:	60fb      	str	r3, [r7, #12]

    pbuf[2U * idx + 1] = 0U;
 800b500:	7dfb      	ldrb	r3, [r7, #23]
 800b502:	005b      	lsls	r3, r3, #1
 800b504:	3301      	adds	r3, #1
 800b506:	68ba      	ldr	r2, [r7, #8]
 800b508:	4413      	add	r3, r2
 800b50a:	2200      	movs	r2, #0
 800b50c:	701a      	strb	r2, [r3, #0]
  for (idx = 0U ; idx < len ; idx ++)
 800b50e:	7dfb      	ldrb	r3, [r7, #23]
 800b510:	3301      	adds	r3, #1
 800b512:	75fb      	strb	r3, [r7, #23]
 800b514:	7dfa      	ldrb	r2, [r7, #23]
 800b516:	79fb      	ldrb	r3, [r7, #7]
 800b518:	429a      	cmp	r2, r3
 800b51a:	d3d5      	bcc.n	800b4c8 <IntToUnicode+0x18>
  }
}
 800b51c:	bf00      	nop
 800b51e:	bf00      	nop
 800b520:	371c      	adds	r7, #28
 800b522:	46bd      	mov	sp, r7
 800b524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b528:	4770      	bx	lr

0800b52a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b52a:	b580      	push	{r7, lr}
 800b52c:	b084      	sub	sp, #16
 800b52e:	af00      	add	r7, sp, #0
 800b530:	60f8      	str	r0, [r7, #12]
 800b532:	60b9      	str	r1, [r7, #8]
 800b534:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	2202      	movs	r2, #2
 800b53a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	687a      	ldr	r2, [r7, #4]
 800b542:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	687a      	ldr	r2, [r7, #4]
 800b548:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	68ba      	ldr	r2, [r7, #8]
 800b54e:	2100      	movs	r1, #0
 800b550:	68f8      	ldr	r0, [r7, #12]
 800b552:	f7fe faf6 	bl	8009b42 <USBD_LL_Transmit>

  return USBD_OK;
 800b556:	2300      	movs	r3, #0
}
 800b558:	4618      	mov	r0, r3
 800b55a:	3710      	adds	r7, #16
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bd80      	pop	{r7, pc}

0800b560 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b084      	sub	sp, #16
 800b564:	af00      	add	r7, sp, #0
 800b566:	60f8      	str	r0, [r7, #12]
 800b568:	60b9      	str	r1, [r7, #8]
 800b56a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	68ba      	ldr	r2, [r7, #8]
 800b570:	2100      	movs	r1, #0
 800b572:	68f8      	ldr	r0, [r7, #12]
 800b574:	f7fe fae5 	bl	8009b42 <USBD_LL_Transmit>

  return USBD_OK;
 800b578:	2300      	movs	r3, #0
}
 800b57a:	4618      	mov	r0, r3
 800b57c:	3710      	adds	r7, #16
 800b57e:	46bd      	mov	sp, r7
 800b580:	bd80      	pop	{r7, pc}

0800b582 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b582:	b580      	push	{r7, lr}
 800b584:	b084      	sub	sp, #16
 800b586:	af00      	add	r7, sp, #0
 800b588:	60f8      	str	r0, [r7, #12]
 800b58a:	60b9      	str	r1, [r7, #8]
 800b58c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	2203      	movs	r2, #3
 800b592:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	687a      	ldr	r2, [r7, #4]
 800b59a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	687a      	ldr	r2, [r7, #4]
 800b5a2:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	68ba      	ldr	r2, [r7, #8]
 800b5aa:	2100      	movs	r1, #0
 800b5ac:	68f8      	ldr	r0, [r7, #12]
 800b5ae:	f7fe fae3 	bl	8009b78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b5b2:	2300      	movs	r3, #0
}
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	3710      	adds	r7, #16
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	bd80      	pop	{r7, pc}

0800b5bc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b084      	sub	sp, #16
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	60f8      	str	r0, [r7, #12]
 800b5c4:	60b9      	str	r1, [r7, #8]
 800b5c6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	68ba      	ldr	r2, [r7, #8]
 800b5cc:	2100      	movs	r1, #0
 800b5ce:	68f8      	ldr	r0, [r7, #12]
 800b5d0:	f7fe fad2 	bl	8009b78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b5d4:	2300      	movs	r3, #0
}
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	3710      	adds	r7, #16
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	bd80      	pop	{r7, pc}

0800b5de <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b5de:	b580      	push	{r7, lr}
 800b5e0:	b082      	sub	sp, #8
 800b5e2:	af00      	add	r7, sp, #0
 800b5e4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2204      	movs	r2, #4
 800b5ea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	2100      	movs	r1, #0
 800b5f4:	6878      	ldr	r0, [r7, #4]
 800b5f6:	f7fe faa4 	bl	8009b42 <USBD_LL_Transmit>

  return USBD_OK;
 800b5fa:	2300      	movs	r3, #0
}
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	3708      	adds	r7, #8
 800b600:	46bd      	mov	sp, r7
 800b602:	bd80      	pop	{r7, pc}

0800b604 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b082      	sub	sp, #8
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	2205      	movs	r2, #5
 800b610:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b614:	2300      	movs	r3, #0
 800b616:	2200      	movs	r2, #0
 800b618:	2100      	movs	r1, #0
 800b61a:	6878      	ldr	r0, [r7, #4]
 800b61c:	f7fe faac 	bl	8009b78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b620:	2300      	movs	r3, #0
}
 800b622:	4618      	mov	r0, r3
 800b624:	3708      	adds	r7, #8
 800b626:	46bd      	mov	sp, r7
 800b628:	bd80      	pop	{r7, pc}
	...

0800b62c <std>:
 800b62c:	2300      	movs	r3, #0
 800b62e:	b510      	push	{r4, lr}
 800b630:	4604      	mov	r4, r0
 800b632:	6083      	str	r3, [r0, #8]
 800b634:	8181      	strh	r1, [r0, #12]
 800b636:	4619      	mov	r1, r3
 800b638:	6643      	str	r3, [r0, #100]	@ 0x64
 800b63a:	81c2      	strh	r2, [r0, #14]
 800b63c:	2208      	movs	r2, #8
 800b63e:	6183      	str	r3, [r0, #24]
 800b640:	e9c0 3300 	strd	r3, r3, [r0]
 800b644:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b648:	305c      	adds	r0, #92	@ 0x5c
 800b64a:	f000 f92e 	bl	800b8aa <memset>
 800b64e:	4b0d      	ldr	r3, [pc, #52]	@ (800b684 <std+0x58>)
 800b650:	6224      	str	r4, [r4, #32]
 800b652:	6263      	str	r3, [r4, #36]	@ 0x24
 800b654:	4b0c      	ldr	r3, [pc, #48]	@ (800b688 <std+0x5c>)
 800b656:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b658:	4b0c      	ldr	r3, [pc, #48]	@ (800b68c <std+0x60>)
 800b65a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b65c:	4b0c      	ldr	r3, [pc, #48]	@ (800b690 <std+0x64>)
 800b65e:	6323      	str	r3, [r4, #48]	@ 0x30
 800b660:	4b0c      	ldr	r3, [pc, #48]	@ (800b694 <std+0x68>)
 800b662:	429c      	cmp	r4, r3
 800b664:	d006      	beq.n	800b674 <std+0x48>
 800b666:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b66a:	4294      	cmp	r4, r2
 800b66c:	d002      	beq.n	800b674 <std+0x48>
 800b66e:	33d0      	adds	r3, #208	@ 0xd0
 800b670:	429c      	cmp	r4, r3
 800b672:	d105      	bne.n	800b680 <std+0x54>
 800b674:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b67c:	f000 b98e 	b.w	800b99c <__retarget_lock_init_recursive>
 800b680:	bd10      	pop	{r4, pc}
 800b682:	bf00      	nop
 800b684:	0800b825 	.word	0x0800b825
 800b688:	0800b847 	.word	0x0800b847
 800b68c:	0800b87f 	.word	0x0800b87f
 800b690:	0800b8a3 	.word	0x0800b8a3
 800b694:	20000c90 	.word	0x20000c90

0800b698 <stdio_exit_handler>:
 800b698:	4a02      	ldr	r2, [pc, #8]	@ (800b6a4 <stdio_exit_handler+0xc>)
 800b69a:	4903      	ldr	r1, [pc, #12]	@ (800b6a8 <stdio_exit_handler+0x10>)
 800b69c:	4803      	ldr	r0, [pc, #12]	@ (800b6ac <stdio_exit_handler+0x14>)
 800b69e:	f000 b869 	b.w	800b774 <_fwalk_sglue>
 800b6a2:	bf00      	nop
 800b6a4:	20000144 	.word	0x20000144
 800b6a8:	0800c4f5 	.word	0x0800c4f5
 800b6ac:	20000154 	.word	0x20000154

0800b6b0 <cleanup_stdio>:
 800b6b0:	6841      	ldr	r1, [r0, #4]
 800b6b2:	4b0c      	ldr	r3, [pc, #48]	@ (800b6e4 <cleanup_stdio+0x34>)
 800b6b4:	4299      	cmp	r1, r3
 800b6b6:	b510      	push	{r4, lr}
 800b6b8:	4604      	mov	r4, r0
 800b6ba:	d001      	beq.n	800b6c0 <cleanup_stdio+0x10>
 800b6bc:	f000 ff1a 	bl	800c4f4 <_fflush_r>
 800b6c0:	68a1      	ldr	r1, [r4, #8]
 800b6c2:	4b09      	ldr	r3, [pc, #36]	@ (800b6e8 <cleanup_stdio+0x38>)
 800b6c4:	4299      	cmp	r1, r3
 800b6c6:	d002      	beq.n	800b6ce <cleanup_stdio+0x1e>
 800b6c8:	4620      	mov	r0, r4
 800b6ca:	f000 ff13 	bl	800c4f4 <_fflush_r>
 800b6ce:	68e1      	ldr	r1, [r4, #12]
 800b6d0:	4b06      	ldr	r3, [pc, #24]	@ (800b6ec <cleanup_stdio+0x3c>)
 800b6d2:	4299      	cmp	r1, r3
 800b6d4:	d004      	beq.n	800b6e0 <cleanup_stdio+0x30>
 800b6d6:	4620      	mov	r0, r4
 800b6d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b6dc:	f000 bf0a 	b.w	800c4f4 <_fflush_r>
 800b6e0:	bd10      	pop	{r4, pc}
 800b6e2:	bf00      	nop
 800b6e4:	20000c90 	.word	0x20000c90
 800b6e8:	20000cf8 	.word	0x20000cf8
 800b6ec:	20000d60 	.word	0x20000d60

0800b6f0 <global_stdio_init.part.0>:
 800b6f0:	b510      	push	{r4, lr}
 800b6f2:	4b0b      	ldr	r3, [pc, #44]	@ (800b720 <global_stdio_init.part.0+0x30>)
 800b6f4:	2104      	movs	r1, #4
 800b6f6:	4c0b      	ldr	r4, [pc, #44]	@ (800b724 <global_stdio_init.part.0+0x34>)
 800b6f8:	4a0b      	ldr	r2, [pc, #44]	@ (800b728 <global_stdio_init.part.0+0x38>)
 800b6fa:	4620      	mov	r0, r4
 800b6fc:	601a      	str	r2, [r3, #0]
 800b6fe:	2200      	movs	r2, #0
 800b700:	f7ff ff94 	bl	800b62c <std>
 800b704:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b708:	2201      	movs	r2, #1
 800b70a:	2109      	movs	r1, #9
 800b70c:	f7ff ff8e 	bl	800b62c <std>
 800b710:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b714:	2202      	movs	r2, #2
 800b716:	2112      	movs	r1, #18
 800b718:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b71c:	f7ff bf86 	b.w	800b62c <std>
 800b720:	20000dc8 	.word	0x20000dc8
 800b724:	20000c90 	.word	0x20000c90
 800b728:	0800b699 	.word	0x0800b699

0800b72c <__sfp_lock_acquire>:
 800b72c:	4801      	ldr	r0, [pc, #4]	@ (800b734 <__sfp_lock_acquire+0x8>)
 800b72e:	f000 b936 	b.w	800b99e <__retarget_lock_acquire_recursive>
 800b732:	bf00      	nop
 800b734:	20000dd1 	.word	0x20000dd1

0800b738 <__sfp_lock_release>:
 800b738:	4801      	ldr	r0, [pc, #4]	@ (800b740 <__sfp_lock_release+0x8>)
 800b73a:	f000 b931 	b.w	800b9a0 <__retarget_lock_release_recursive>
 800b73e:	bf00      	nop
 800b740:	20000dd1 	.word	0x20000dd1

0800b744 <__sinit>:
 800b744:	b510      	push	{r4, lr}
 800b746:	4604      	mov	r4, r0
 800b748:	f7ff fff0 	bl	800b72c <__sfp_lock_acquire>
 800b74c:	6a23      	ldr	r3, [r4, #32]
 800b74e:	b11b      	cbz	r3, 800b758 <__sinit+0x14>
 800b750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b754:	f7ff bff0 	b.w	800b738 <__sfp_lock_release>
 800b758:	4b04      	ldr	r3, [pc, #16]	@ (800b76c <__sinit+0x28>)
 800b75a:	6223      	str	r3, [r4, #32]
 800b75c:	4b04      	ldr	r3, [pc, #16]	@ (800b770 <__sinit+0x2c>)
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d1f5      	bne.n	800b750 <__sinit+0xc>
 800b764:	f7ff ffc4 	bl	800b6f0 <global_stdio_init.part.0>
 800b768:	e7f2      	b.n	800b750 <__sinit+0xc>
 800b76a:	bf00      	nop
 800b76c:	0800b6b1 	.word	0x0800b6b1
 800b770:	20000dc8 	.word	0x20000dc8

0800b774 <_fwalk_sglue>:
 800b774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b778:	4607      	mov	r7, r0
 800b77a:	4688      	mov	r8, r1
 800b77c:	4614      	mov	r4, r2
 800b77e:	2600      	movs	r6, #0
 800b780:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b784:	f1b9 0901 	subs.w	r9, r9, #1
 800b788:	d505      	bpl.n	800b796 <_fwalk_sglue+0x22>
 800b78a:	6824      	ldr	r4, [r4, #0]
 800b78c:	2c00      	cmp	r4, #0
 800b78e:	d1f7      	bne.n	800b780 <_fwalk_sglue+0xc>
 800b790:	4630      	mov	r0, r6
 800b792:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b796:	89ab      	ldrh	r3, [r5, #12]
 800b798:	2b01      	cmp	r3, #1
 800b79a:	d907      	bls.n	800b7ac <_fwalk_sglue+0x38>
 800b79c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b7a0:	3301      	adds	r3, #1
 800b7a2:	d003      	beq.n	800b7ac <_fwalk_sglue+0x38>
 800b7a4:	4629      	mov	r1, r5
 800b7a6:	4638      	mov	r0, r7
 800b7a8:	47c0      	blx	r8
 800b7aa:	4306      	orrs	r6, r0
 800b7ac:	3568      	adds	r5, #104	@ 0x68
 800b7ae:	e7e9      	b.n	800b784 <_fwalk_sglue+0x10>

0800b7b0 <iprintf>:
 800b7b0:	b40f      	push	{r0, r1, r2, r3}
 800b7b2:	b507      	push	{r0, r1, r2, lr}
 800b7b4:	4906      	ldr	r1, [pc, #24]	@ (800b7d0 <iprintf+0x20>)
 800b7b6:	ab04      	add	r3, sp, #16
 800b7b8:	6808      	ldr	r0, [r1, #0]
 800b7ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7be:	6881      	ldr	r1, [r0, #8]
 800b7c0:	9301      	str	r3, [sp, #4]
 800b7c2:	f000 fb69 	bl	800be98 <_vfiprintf_r>
 800b7c6:	b003      	add	sp, #12
 800b7c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b7cc:	b004      	add	sp, #16
 800b7ce:	4770      	bx	lr
 800b7d0:	20000150 	.word	0x20000150

0800b7d4 <putchar>:
 800b7d4:	4b02      	ldr	r3, [pc, #8]	@ (800b7e0 <putchar+0xc>)
 800b7d6:	4601      	mov	r1, r0
 800b7d8:	6818      	ldr	r0, [r3, #0]
 800b7da:	6882      	ldr	r2, [r0, #8]
 800b7dc:	f000 beb2 	b.w	800c544 <_putc_r>
 800b7e0:	20000150 	.word	0x20000150

0800b7e4 <siprintf>:
 800b7e4:	b40e      	push	{r1, r2, r3}
 800b7e6:	b500      	push	{lr}
 800b7e8:	b09c      	sub	sp, #112	@ 0x70
 800b7ea:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b7ee:	ab1d      	add	r3, sp, #116	@ 0x74
 800b7f0:	9002      	str	r0, [sp, #8]
 800b7f2:	9006      	str	r0, [sp, #24]
 800b7f4:	9107      	str	r1, [sp, #28]
 800b7f6:	9104      	str	r1, [sp, #16]
 800b7f8:	4808      	ldr	r0, [pc, #32]	@ (800b81c <siprintf+0x38>)
 800b7fa:	4909      	ldr	r1, [pc, #36]	@ (800b820 <siprintf+0x3c>)
 800b7fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b800:	9105      	str	r1, [sp, #20]
 800b802:	a902      	add	r1, sp, #8
 800b804:	6800      	ldr	r0, [r0, #0]
 800b806:	9301      	str	r3, [sp, #4]
 800b808:	f000 fa20 	bl	800bc4c <_svfiprintf_r>
 800b80c:	9b02      	ldr	r3, [sp, #8]
 800b80e:	2200      	movs	r2, #0
 800b810:	701a      	strb	r2, [r3, #0]
 800b812:	b01c      	add	sp, #112	@ 0x70
 800b814:	f85d eb04 	ldr.w	lr, [sp], #4
 800b818:	b003      	add	sp, #12
 800b81a:	4770      	bx	lr
 800b81c:	20000150 	.word	0x20000150
 800b820:	ffff0208 	.word	0xffff0208

0800b824 <__sread>:
 800b824:	b510      	push	{r4, lr}
 800b826:	460c      	mov	r4, r1
 800b828:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b82c:	f000 f868 	bl	800b900 <_read_r>
 800b830:	2800      	cmp	r0, #0
 800b832:	bfab      	itete	ge
 800b834:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b836:	89a3      	ldrhlt	r3, [r4, #12]
 800b838:	181b      	addge	r3, r3, r0
 800b83a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b83e:	bfac      	ite	ge
 800b840:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b842:	81a3      	strhlt	r3, [r4, #12]
 800b844:	bd10      	pop	{r4, pc}

0800b846 <__swrite>:
 800b846:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b84a:	461f      	mov	r7, r3
 800b84c:	898b      	ldrh	r3, [r1, #12]
 800b84e:	4605      	mov	r5, r0
 800b850:	460c      	mov	r4, r1
 800b852:	05db      	lsls	r3, r3, #23
 800b854:	4616      	mov	r6, r2
 800b856:	d505      	bpl.n	800b864 <__swrite+0x1e>
 800b858:	2302      	movs	r3, #2
 800b85a:	2200      	movs	r2, #0
 800b85c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b860:	f000 f83c 	bl	800b8dc <_lseek_r>
 800b864:	89a3      	ldrh	r3, [r4, #12]
 800b866:	4632      	mov	r2, r6
 800b868:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b86c:	4628      	mov	r0, r5
 800b86e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b872:	81a3      	strh	r3, [r4, #12]
 800b874:	463b      	mov	r3, r7
 800b876:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b87a:	f000 b853 	b.w	800b924 <_write_r>

0800b87e <__sseek>:
 800b87e:	b510      	push	{r4, lr}
 800b880:	460c      	mov	r4, r1
 800b882:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b886:	f000 f829 	bl	800b8dc <_lseek_r>
 800b88a:	1c43      	adds	r3, r0, #1
 800b88c:	89a3      	ldrh	r3, [r4, #12]
 800b88e:	bf15      	itete	ne
 800b890:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b892:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b896:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b89a:	81a3      	strheq	r3, [r4, #12]
 800b89c:	bf18      	it	ne
 800b89e:	81a3      	strhne	r3, [r4, #12]
 800b8a0:	bd10      	pop	{r4, pc}

0800b8a2 <__sclose>:
 800b8a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8a6:	f000 b809 	b.w	800b8bc <_close_r>

0800b8aa <memset>:
 800b8aa:	4402      	add	r2, r0
 800b8ac:	4603      	mov	r3, r0
 800b8ae:	4293      	cmp	r3, r2
 800b8b0:	d100      	bne.n	800b8b4 <memset+0xa>
 800b8b2:	4770      	bx	lr
 800b8b4:	f803 1b01 	strb.w	r1, [r3], #1
 800b8b8:	e7f9      	b.n	800b8ae <memset+0x4>
	...

0800b8bc <_close_r>:
 800b8bc:	b538      	push	{r3, r4, r5, lr}
 800b8be:	2300      	movs	r3, #0
 800b8c0:	4d05      	ldr	r5, [pc, #20]	@ (800b8d8 <_close_r+0x1c>)
 800b8c2:	4604      	mov	r4, r0
 800b8c4:	4608      	mov	r0, r1
 800b8c6:	602b      	str	r3, [r5, #0]
 800b8c8:	f7f5 f89f 	bl	8000a0a <_close>
 800b8cc:	1c43      	adds	r3, r0, #1
 800b8ce:	d102      	bne.n	800b8d6 <_close_r+0x1a>
 800b8d0:	682b      	ldr	r3, [r5, #0]
 800b8d2:	b103      	cbz	r3, 800b8d6 <_close_r+0x1a>
 800b8d4:	6023      	str	r3, [r4, #0]
 800b8d6:	bd38      	pop	{r3, r4, r5, pc}
 800b8d8:	20000dcc 	.word	0x20000dcc

0800b8dc <_lseek_r>:
 800b8dc:	b538      	push	{r3, r4, r5, lr}
 800b8de:	4604      	mov	r4, r0
 800b8e0:	4d06      	ldr	r5, [pc, #24]	@ (800b8fc <_lseek_r+0x20>)
 800b8e2:	4608      	mov	r0, r1
 800b8e4:	4611      	mov	r1, r2
 800b8e6:	2200      	movs	r2, #0
 800b8e8:	602a      	str	r2, [r5, #0]
 800b8ea:	461a      	mov	r2, r3
 800b8ec:	f7f5 f8b4 	bl	8000a58 <_lseek>
 800b8f0:	1c43      	adds	r3, r0, #1
 800b8f2:	d102      	bne.n	800b8fa <_lseek_r+0x1e>
 800b8f4:	682b      	ldr	r3, [r5, #0]
 800b8f6:	b103      	cbz	r3, 800b8fa <_lseek_r+0x1e>
 800b8f8:	6023      	str	r3, [r4, #0]
 800b8fa:	bd38      	pop	{r3, r4, r5, pc}
 800b8fc:	20000dcc 	.word	0x20000dcc

0800b900 <_read_r>:
 800b900:	b538      	push	{r3, r4, r5, lr}
 800b902:	4604      	mov	r4, r0
 800b904:	4d06      	ldr	r5, [pc, #24]	@ (800b920 <_read_r+0x20>)
 800b906:	4608      	mov	r0, r1
 800b908:	4611      	mov	r1, r2
 800b90a:	2200      	movs	r2, #0
 800b90c:	602a      	str	r2, [r5, #0]
 800b90e:	461a      	mov	r2, r3
 800b910:	f7f5 f842 	bl	8000998 <_read>
 800b914:	1c43      	adds	r3, r0, #1
 800b916:	d102      	bne.n	800b91e <_read_r+0x1e>
 800b918:	682b      	ldr	r3, [r5, #0]
 800b91a:	b103      	cbz	r3, 800b91e <_read_r+0x1e>
 800b91c:	6023      	str	r3, [r4, #0]
 800b91e:	bd38      	pop	{r3, r4, r5, pc}
 800b920:	20000dcc 	.word	0x20000dcc

0800b924 <_write_r>:
 800b924:	b538      	push	{r3, r4, r5, lr}
 800b926:	4604      	mov	r4, r0
 800b928:	4d06      	ldr	r5, [pc, #24]	@ (800b944 <_write_r+0x20>)
 800b92a:	4608      	mov	r0, r1
 800b92c:	4611      	mov	r1, r2
 800b92e:	2200      	movs	r2, #0
 800b930:	602a      	str	r2, [r5, #0]
 800b932:	461a      	mov	r2, r3
 800b934:	f7f5 f84d 	bl	80009d2 <_write>
 800b938:	1c43      	adds	r3, r0, #1
 800b93a:	d102      	bne.n	800b942 <_write_r+0x1e>
 800b93c:	682b      	ldr	r3, [r5, #0]
 800b93e:	b103      	cbz	r3, 800b942 <_write_r+0x1e>
 800b940:	6023      	str	r3, [r4, #0]
 800b942:	bd38      	pop	{r3, r4, r5, pc}
 800b944:	20000dcc 	.word	0x20000dcc

0800b948 <__errno>:
 800b948:	4b01      	ldr	r3, [pc, #4]	@ (800b950 <__errno+0x8>)
 800b94a:	6818      	ldr	r0, [r3, #0]
 800b94c:	4770      	bx	lr
 800b94e:	bf00      	nop
 800b950:	20000150 	.word	0x20000150

0800b954 <__libc_init_array>:
 800b954:	b570      	push	{r4, r5, r6, lr}
 800b956:	4d0d      	ldr	r5, [pc, #52]	@ (800b98c <__libc_init_array+0x38>)
 800b958:	2600      	movs	r6, #0
 800b95a:	4c0d      	ldr	r4, [pc, #52]	@ (800b990 <__libc_init_array+0x3c>)
 800b95c:	1b64      	subs	r4, r4, r5
 800b95e:	10a4      	asrs	r4, r4, #2
 800b960:	42a6      	cmp	r6, r4
 800b962:	d109      	bne.n	800b978 <__libc_init_array+0x24>
 800b964:	4d0b      	ldr	r5, [pc, #44]	@ (800b994 <__libc_init_array+0x40>)
 800b966:	2600      	movs	r6, #0
 800b968:	4c0b      	ldr	r4, [pc, #44]	@ (800b998 <__libc_init_array+0x44>)
 800b96a:	f000 ffb1 	bl	800c8d0 <_init>
 800b96e:	1b64      	subs	r4, r4, r5
 800b970:	10a4      	asrs	r4, r4, #2
 800b972:	42a6      	cmp	r6, r4
 800b974:	d105      	bne.n	800b982 <__libc_init_array+0x2e>
 800b976:	bd70      	pop	{r4, r5, r6, pc}
 800b978:	f855 3b04 	ldr.w	r3, [r5], #4
 800b97c:	3601      	adds	r6, #1
 800b97e:	4798      	blx	r3
 800b980:	e7ee      	b.n	800b960 <__libc_init_array+0xc>
 800b982:	f855 3b04 	ldr.w	r3, [r5], #4
 800b986:	3601      	adds	r6, #1
 800b988:	4798      	blx	r3
 800b98a:	e7f2      	b.n	800b972 <__libc_init_array+0x1e>
 800b98c:	0800ca60 	.word	0x0800ca60
 800b990:	0800ca60 	.word	0x0800ca60
 800b994:	0800ca60 	.word	0x0800ca60
 800b998:	0800ca64 	.word	0x0800ca64

0800b99c <__retarget_lock_init_recursive>:
 800b99c:	4770      	bx	lr

0800b99e <__retarget_lock_acquire_recursive>:
 800b99e:	4770      	bx	lr

0800b9a0 <__retarget_lock_release_recursive>:
 800b9a0:	4770      	bx	lr
	...

0800b9a4 <_free_r>:
 800b9a4:	b538      	push	{r3, r4, r5, lr}
 800b9a6:	4605      	mov	r5, r0
 800b9a8:	2900      	cmp	r1, #0
 800b9aa:	d041      	beq.n	800ba30 <_free_r+0x8c>
 800b9ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9b0:	1f0c      	subs	r4, r1, #4
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	bfb8      	it	lt
 800b9b6:	18e4      	addlt	r4, r4, r3
 800b9b8:	f000 f8e0 	bl	800bb7c <__malloc_lock>
 800b9bc:	4a1d      	ldr	r2, [pc, #116]	@ (800ba34 <_free_r+0x90>)
 800b9be:	6813      	ldr	r3, [r2, #0]
 800b9c0:	b933      	cbnz	r3, 800b9d0 <_free_r+0x2c>
 800b9c2:	6063      	str	r3, [r4, #4]
 800b9c4:	6014      	str	r4, [r2, #0]
 800b9c6:	4628      	mov	r0, r5
 800b9c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b9cc:	f000 b8dc 	b.w	800bb88 <__malloc_unlock>
 800b9d0:	42a3      	cmp	r3, r4
 800b9d2:	d908      	bls.n	800b9e6 <_free_r+0x42>
 800b9d4:	6820      	ldr	r0, [r4, #0]
 800b9d6:	1821      	adds	r1, r4, r0
 800b9d8:	428b      	cmp	r3, r1
 800b9da:	bf01      	itttt	eq
 800b9dc:	6819      	ldreq	r1, [r3, #0]
 800b9de:	685b      	ldreq	r3, [r3, #4]
 800b9e0:	1809      	addeq	r1, r1, r0
 800b9e2:	6021      	streq	r1, [r4, #0]
 800b9e4:	e7ed      	b.n	800b9c2 <_free_r+0x1e>
 800b9e6:	461a      	mov	r2, r3
 800b9e8:	685b      	ldr	r3, [r3, #4]
 800b9ea:	b10b      	cbz	r3, 800b9f0 <_free_r+0x4c>
 800b9ec:	42a3      	cmp	r3, r4
 800b9ee:	d9fa      	bls.n	800b9e6 <_free_r+0x42>
 800b9f0:	6811      	ldr	r1, [r2, #0]
 800b9f2:	1850      	adds	r0, r2, r1
 800b9f4:	42a0      	cmp	r0, r4
 800b9f6:	d10b      	bne.n	800ba10 <_free_r+0x6c>
 800b9f8:	6820      	ldr	r0, [r4, #0]
 800b9fa:	4401      	add	r1, r0
 800b9fc:	1850      	adds	r0, r2, r1
 800b9fe:	6011      	str	r1, [r2, #0]
 800ba00:	4283      	cmp	r3, r0
 800ba02:	d1e0      	bne.n	800b9c6 <_free_r+0x22>
 800ba04:	6818      	ldr	r0, [r3, #0]
 800ba06:	685b      	ldr	r3, [r3, #4]
 800ba08:	4408      	add	r0, r1
 800ba0a:	6053      	str	r3, [r2, #4]
 800ba0c:	6010      	str	r0, [r2, #0]
 800ba0e:	e7da      	b.n	800b9c6 <_free_r+0x22>
 800ba10:	d902      	bls.n	800ba18 <_free_r+0x74>
 800ba12:	230c      	movs	r3, #12
 800ba14:	602b      	str	r3, [r5, #0]
 800ba16:	e7d6      	b.n	800b9c6 <_free_r+0x22>
 800ba18:	6820      	ldr	r0, [r4, #0]
 800ba1a:	1821      	adds	r1, r4, r0
 800ba1c:	428b      	cmp	r3, r1
 800ba1e:	bf02      	ittt	eq
 800ba20:	6819      	ldreq	r1, [r3, #0]
 800ba22:	685b      	ldreq	r3, [r3, #4]
 800ba24:	1809      	addeq	r1, r1, r0
 800ba26:	6063      	str	r3, [r4, #4]
 800ba28:	bf08      	it	eq
 800ba2a:	6021      	streq	r1, [r4, #0]
 800ba2c:	6054      	str	r4, [r2, #4]
 800ba2e:	e7ca      	b.n	800b9c6 <_free_r+0x22>
 800ba30:	bd38      	pop	{r3, r4, r5, pc}
 800ba32:	bf00      	nop
 800ba34:	20000dd8 	.word	0x20000dd8

0800ba38 <sbrk_aligned>:
 800ba38:	b570      	push	{r4, r5, r6, lr}
 800ba3a:	4e0f      	ldr	r6, [pc, #60]	@ (800ba78 <sbrk_aligned+0x40>)
 800ba3c:	460c      	mov	r4, r1
 800ba3e:	4605      	mov	r5, r0
 800ba40:	6831      	ldr	r1, [r6, #0]
 800ba42:	b911      	cbnz	r1, 800ba4a <sbrk_aligned+0x12>
 800ba44:	f000 fe60 	bl	800c708 <_sbrk_r>
 800ba48:	6030      	str	r0, [r6, #0]
 800ba4a:	4621      	mov	r1, r4
 800ba4c:	4628      	mov	r0, r5
 800ba4e:	f000 fe5b 	bl	800c708 <_sbrk_r>
 800ba52:	1c43      	adds	r3, r0, #1
 800ba54:	d103      	bne.n	800ba5e <sbrk_aligned+0x26>
 800ba56:	f04f 34ff 	mov.w	r4, #4294967295
 800ba5a:	4620      	mov	r0, r4
 800ba5c:	bd70      	pop	{r4, r5, r6, pc}
 800ba5e:	1cc4      	adds	r4, r0, #3
 800ba60:	f024 0403 	bic.w	r4, r4, #3
 800ba64:	42a0      	cmp	r0, r4
 800ba66:	d0f8      	beq.n	800ba5a <sbrk_aligned+0x22>
 800ba68:	1a21      	subs	r1, r4, r0
 800ba6a:	4628      	mov	r0, r5
 800ba6c:	f000 fe4c 	bl	800c708 <_sbrk_r>
 800ba70:	3001      	adds	r0, #1
 800ba72:	d1f2      	bne.n	800ba5a <sbrk_aligned+0x22>
 800ba74:	e7ef      	b.n	800ba56 <sbrk_aligned+0x1e>
 800ba76:	bf00      	nop
 800ba78:	20000dd4 	.word	0x20000dd4

0800ba7c <_malloc_r>:
 800ba7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba80:	1ccd      	adds	r5, r1, #3
 800ba82:	4606      	mov	r6, r0
 800ba84:	f025 0503 	bic.w	r5, r5, #3
 800ba88:	3508      	adds	r5, #8
 800ba8a:	2d0c      	cmp	r5, #12
 800ba8c:	bf38      	it	cc
 800ba8e:	250c      	movcc	r5, #12
 800ba90:	2d00      	cmp	r5, #0
 800ba92:	db01      	blt.n	800ba98 <_malloc_r+0x1c>
 800ba94:	42a9      	cmp	r1, r5
 800ba96:	d904      	bls.n	800baa2 <_malloc_r+0x26>
 800ba98:	230c      	movs	r3, #12
 800ba9a:	6033      	str	r3, [r6, #0]
 800ba9c:	2000      	movs	r0, #0
 800ba9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800baa2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bb78 <_malloc_r+0xfc>
 800baa6:	f000 f869 	bl	800bb7c <__malloc_lock>
 800baaa:	f8d8 3000 	ldr.w	r3, [r8]
 800baae:	461c      	mov	r4, r3
 800bab0:	bb44      	cbnz	r4, 800bb04 <_malloc_r+0x88>
 800bab2:	4629      	mov	r1, r5
 800bab4:	4630      	mov	r0, r6
 800bab6:	f7ff ffbf 	bl	800ba38 <sbrk_aligned>
 800baba:	1c43      	adds	r3, r0, #1
 800babc:	4604      	mov	r4, r0
 800babe:	d158      	bne.n	800bb72 <_malloc_r+0xf6>
 800bac0:	f8d8 4000 	ldr.w	r4, [r8]
 800bac4:	4627      	mov	r7, r4
 800bac6:	2f00      	cmp	r7, #0
 800bac8:	d143      	bne.n	800bb52 <_malloc_r+0xd6>
 800baca:	2c00      	cmp	r4, #0
 800bacc:	d04b      	beq.n	800bb66 <_malloc_r+0xea>
 800bace:	6823      	ldr	r3, [r4, #0]
 800bad0:	4639      	mov	r1, r7
 800bad2:	4630      	mov	r0, r6
 800bad4:	eb04 0903 	add.w	r9, r4, r3
 800bad8:	f000 fe16 	bl	800c708 <_sbrk_r>
 800badc:	4581      	cmp	r9, r0
 800bade:	d142      	bne.n	800bb66 <_malloc_r+0xea>
 800bae0:	6821      	ldr	r1, [r4, #0]
 800bae2:	4630      	mov	r0, r6
 800bae4:	1a6d      	subs	r5, r5, r1
 800bae6:	4629      	mov	r1, r5
 800bae8:	f7ff ffa6 	bl	800ba38 <sbrk_aligned>
 800baec:	3001      	adds	r0, #1
 800baee:	d03a      	beq.n	800bb66 <_malloc_r+0xea>
 800baf0:	6823      	ldr	r3, [r4, #0]
 800baf2:	442b      	add	r3, r5
 800baf4:	6023      	str	r3, [r4, #0]
 800baf6:	f8d8 3000 	ldr.w	r3, [r8]
 800bafa:	685a      	ldr	r2, [r3, #4]
 800bafc:	bb62      	cbnz	r2, 800bb58 <_malloc_r+0xdc>
 800bafe:	f8c8 7000 	str.w	r7, [r8]
 800bb02:	e00f      	b.n	800bb24 <_malloc_r+0xa8>
 800bb04:	6822      	ldr	r2, [r4, #0]
 800bb06:	1b52      	subs	r2, r2, r5
 800bb08:	d420      	bmi.n	800bb4c <_malloc_r+0xd0>
 800bb0a:	2a0b      	cmp	r2, #11
 800bb0c:	d917      	bls.n	800bb3e <_malloc_r+0xc2>
 800bb0e:	1961      	adds	r1, r4, r5
 800bb10:	42a3      	cmp	r3, r4
 800bb12:	6025      	str	r5, [r4, #0]
 800bb14:	bf18      	it	ne
 800bb16:	6059      	strne	r1, [r3, #4]
 800bb18:	6863      	ldr	r3, [r4, #4]
 800bb1a:	bf08      	it	eq
 800bb1c:	f8c8 1000 	streq.w	r1, [r8]
 800bb20:	5162      	str	r2, [r4, r5]
 800bb22:	604b      	str	r3, [r1, #4]
 800bb24:	4630      	mov	r0, r6
 800bb26:	f000 f82f 	bl	800bb88 <__malloc_unlock>
 800bb2a:	f104 000b 	add.w	r0, r4, #11
 800bb2e:	1d23      	adds	r3, r4, #4
 800bb30:	f020 0007 	bic.w	r0, r0, #7
 800bb34:	1ac2      	subs	r2, r0, r3
 800bb36:	bf1c      	itt	ne
 800bb38:	1a1b      	subne	r3, r3, r0
 800bb3a:	50a3      	strne	r3, [r4, r2]
 800bb3c:	e7af      	b.n	800ba9e <_malloc_r+0x22>
 800bb3e:	6862      	ldr	r2, [r4, #4]
 800bb40:	42a3      	cmp	r3, r4
 800bb42:	bf0c      	ite	eq
 800bb44:	f8c8 2000 	streq.w	r2, [r8]
 800bb48:	605a      	strne	r2, [r3, #4]
 800bb4a:	e7eb      	b.n	800bb24 <_malloc_r+0xa8>
 800bb4c:	4623      	mov	r3, r4
 800bb4e:	6864      	ldr	r4, [r4, #4]
 800bb50:	e7ae      	b.n	800bab0 <_malloc_r+0x34>
 800bb52:	463c      	mov	r4, r7
 800bb54:	687f      	ldr	r7, [r7, #4]
 800bb56:	e7b6      	b.n	800bac6 <_malloc_r+0x4a>
 800bb58:	461a      	mov	r2, r3
 800bb5a:	685b      	ldr	r3, [r3, #4]
 800bb5c:	42a3      	cmp	r3, r4
 800bb5e:	d1fb      	bne.n	800bb58 <_malloc_r+0xdc>
 800bb60:	2300      	movs	r3, #0
 800bb62:	6053      	str	r3, [r2, #4]
 800bb64:	e7de      	b.n	800bb24 <_malloc_r+0xa8>
 800bb66:	230c      	movs	r3, #12
 800bb68:	4630      	mov	r0, r6
 800bb6a:	6033      	str	r3, [r6, #0]
 800bb6c:	f000 f80c 	bl	800bb88 <__malloc_unlock>
 800bb70:	e794      	b.n	800ba9c <_malloc_r+0x20>
 800bb72:	6005      	str	r5, [r0, #0]
 800bb74:	e7d6      	b.n	800bb24 <_malloc_r+0xa8>
 800bb76:	bf00      	nop
 800bb78:	20000dd8 	.word	0x20000dd8

0800bb7c <__malloc_lock>:
 800bb7c:	4801      	ldr	r0, [pc, #4]	@ (800bb84 <__malloc_lock+0x8>)
 800bb7e:	f7ff bf0e 	b.w	800b99e <__retarget_lock_acquire_recursive>
 800bb82:	bf00      	nop
 800bb84:	20000dd0 	.word	0x20000dd0

0800bb88 <__malloc_unlock>:
 800bb88:	4801      	ldr	r0, [pc, #4]	@ (800bb90 <__malloc_unlock+0x8>)
 800bb8a:	f7ff bf09 	b.w	800b9a0 <__retarget_lock_release_recursive>
 800bb8e:	bf00      	nop
 800bb90:	20000dd0 	.word	0x20000dd0

0800bb94 <__ssputs_r>:
 800bb94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb98:	461f      	mov	r7, r3
 800bb9a:	688e      	ldr	r6, [r1, #8]
 800bb9c:	4682      	mov	sl, r0
 800bb9e:	460c      	mov	r4, r1
 800bba0:	42be      	cmp	r6, r7
 800bba2:	4690      	mov	r8, r2
 800bba4:	680b      	ldr	r3, [r1, #0]
 800bba6:	d82d      	bhi.n	800bc04 <__ssputs_r+0x70>
 800bba8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bbac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bbb0:	d026      	beq.n	800bc00 <__ssputs_r+0x6c>
 800bbb2:	6965      	ldr	r5, [r4, #20]
 800bbb4:	6909      	ldr	r1, [r1, #16]
 800bbb6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bbba:	eba3 0901 	sub.w	r9, r3, r1
 800bbbe:	1c7b      	adds	r3, r7, #1
 800bbc0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bbc4:	444b      	add	r3, r9
 800bbc6:	106d      	asrs	r5, r5, #1
 800bbc8:	429d      	cmp	r5, r3
 800bbca:	bf38      	it	cc
 800bbcc:	461d      	movcc	r5, r3
 800bbce:	0553      	lsls	r3, r2, #21
 800bbd0:	d527      	bpl.n	800bc22 <__ssputs_r+0x8e>
 800bbd2:	4629      	mov	r1, r5
 800bbd4:	f7ff ff52 	bl	800ba7c <_malloc_r>
 800bbd8:	4606      	mov	r6, r0
 800bbda:	b360      	cbz	r0, 800bc36 <__ssputs_r+0xa2>
 800bbdc:	464a      	mov	r2, r9
 800bbde:	6921      	ldr	r1, [r4, #16]
 800bbe0:	f000 fdb0 	bl	800c744 <memcpy>
 800bbe4:	89a3      	ldrh	r3, [r4, #12]
 800bbe6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bbea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bbee:	81a3      	strh	r3, [r4, #12]
 800bbf0:	6126      	str	r6, [r4, #16]
 800bbf2:	444e      	add	r6, r9
 800bbf4:	6165      	str	r5, [r4, #20]
 800bbf6:	eba5 0509 	sub.w	r5, r5, r9
 800bbfa:	6026      	str	r6, [r4, #0]
 800bbfc:	463e      	mov	r6, r7
 800bbfe:	60a5      	str	r5, [r4, #8]
 800bc00:	42be      	cmp	r6, r7
 800bc02:	d900      	bls.n	800bc06 <__ssputs_r+0x72>
 800bc04:	463e      	mov	r6, r7
 800bc06:	4632      	mov	r2, r6
 800bc08:	4641      	mov	r1, r8
 800bc0a:	6820      	ldr	r0, [r4, #0]
 800bc0c:	f000 fd62 	bl	800c6d4 <memmove>
 800bc10:	68a3      	ldr	r3, [r4, #8]
 800bc12:	2000      	movs	r0, #0
 800bc14:	1b9b      	subs	r3, r3, r6
 800bc16:	60a3      	str	r3, [r4, #8]
 800bc18:	6823      	ldr	r3, [r4, #0]
 800bc1a:	4433      	add	r3, r6
 800bc1c:	6023      	str	r3, [r4, #0]
 800bc1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc22:	462a      	mov	r2, r5
 800bc24:	f000 fd9b 	bl	800c75e <_realloc_r>
 800bc28:	4606      	mov	r6, r0
 800bc2a:	2800      	cmp	r0, #0
 800bc2c:	d1e0      	bne.n	800bbf0 <__ssputs_r+0x5c>
 800bc2e:	6921      	ldr	r1, [r4, #16]
 800bc30:	4650      	mov	r0, sl
 800bc32:	f7ff feb7 	bl	800b9a4 <_free_r>
 800bc36:	230c      	movs	r3, #12
 800bc38:	f04f 30ff 	mov.w	r0, #4294967295
 800bc3c:	f8ca 3000 	str.w	r3, [sl]
 800bc40:	89a3      	ldrh	r3, [r4, #12]
 800bc42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bc46:	81a3      	strh	r3, [r4, #12]
 800bc48:	e7e9      	b.n	800bc1e <__ssputs_r+0x8a>
	...

0800bc4c <_svfiprintf_r>:
 800bc4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc50:	4698      	mov	r8, r3
 800bc52:	898b      	ldrh	r3, [r1, #12]
 800bc54:	b09d      	sub	sp, #116	@ 0x74
 800bc56:	4607      	mov	r7, r0
 800bc58:	061b      	lsls	r3, r3, #24
 800bc5a:	460d      	mov	r5, r1
 800bc5c:	4614      	mov	r4, r2
 800bc5e:	d510      	bpl.n	800bc82 <_svfiprintf_r+0x36>
 800bc60:	690b      	ldr	r3, [r1, #16]
 800bc62:	b973      	cbnz	r3, 800bc82 <_svfiprintf_r+0x36>
 800bc64:	2140      	movs	r1, #64	@ 0x40
 800bc66:	f7ff ff09 	bl	800ba7c <_malloc_r>
 800bc6a:	6028      	str	r0, [r5, #0]
 800bc6c:	6128      	str	r0, [r5, #16]
 800bc6e:	b930      	cbnz	r0, 800bc7e <_svfiprintf_r+0x32>
 800bc70:	230c      	movs	r3, #12
 800bc72:	603b      	str	r3, [r7, #0]
 800bc74:	f04f 30ff 	mov.w	r0, #4294967295
 800bc78:	b01d      	add	sp, #116	@ 0x74
 800bc7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc7e:	2340      	movs	r3, #64	@ 0x40
 800bc80:	616b      	str	r3, [r5, #20]
 800bc82:	2300      	movs	r3, #0
 800bc84:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc88:	f04f 0901 	mov.w	r9, #1
 800bc8c:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800be30 <_svfiprintf_r+0x1e4>
 800bc90:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc92:	2320      	movs	r3, #32
 800bc94:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bc98:	2330      	movs	r3, #48	@ 0x30
 800bc9a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bc9e:	4623      	mov	r3, r4
 800bca0:	469a      	mov	sl, r3
 800bca2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bca6:	b10a      	cbz	r2, 800bcac <_svfiprintf_r+0x60>
 800bca8:	2a25      	cmp	r2, #37	@ 0x25
 800bcaa:	d1f9      	bne.n	800bca0 <_svfiprintf_r+0x54>
 800bcac:	ebba 0b04 	subs.w	fp, sl, r4
 800bcb0:	d00b      	beq.n	800bcca <_svfiprintf_r+0x7e>
 800bcb2:	465b      	mov	r3, fp
 800bcb4:	4622      	mov	r2, r4
 800bcb6:	4629      	mov	r1, r5
 800bcb8:	4638      	mov	r0, r7
 800bcba:	f7ff ff6b 	bl	800bb94 <__ssputs_r>
 800bcbe:	3001      	adds	r0, #1
 800bcc0:	f000 80a7 	beq.w	800be12 <_svfiprintf_r+0x1c6>
 800bcc4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bcc6:	445a      	add	r2, fp
 800bcc8:	9209      	str	r2, [sp, #36]	@ 0x24
 800bcca:	f89a 3000 	ldrb.w	r3, [sl]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	f000 809f 	beq.w	800be12 <_svfiprintf_r+0x1c6>
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	f04f 32ff 	mov.w	r2, #4294967295
 800bcda:	f10a 0a01 	add.w	sl, sl, #1
 800bcde:	9304      	str	r3, [sp, #16]
 800bce0:	9307      	str	r3, [sp, #28]
 800bce2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bce6:	931a      	str	r3, [sp, #104]	@ 0x68
 800bce8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bcec:	4654      	mov	r4, sl
 800bcee:	2205      	movs	r2, #5
 800bcf0:	484f      	ldr	r0, [pc, #316]	@ (800be30 <_svfiprintf_r+0x1e4>)
 800bcf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcf6:	f000 fd17 	bl	800c728 <memchr>
 800bcfa:	9a04      	ldr	r2, [sp, #16]
 800bcfc:	b9d8      	cbnz	r0, 800bd36 <_svfiprintf_r+0xea>
 800bcfe:	06d0      	lsls	r0, r2, #27
 800bd00:	bf44      	itt	mi
 800bd02:	2320      	movmi	r3, #32
 800bd04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bd08:	0711      	lsls	r1, r2, #28
 800bd0a:	bf44      	itt	mi
 800bd0c:	232b      	movmi	r3, #43	@ 0x2b
 800bd0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bd12:	f89a 3000 	ldrb.w	r3, [sl]
 800bd16:	2b2a      	cmp	r3, #42	@ 0x2a
 800bd18:	d015      	beq.n	800bd46 <_svfiprintf_r+0xfa>
 800bd1a:	9a07      	ldr	r2, [sp, #28]
 800bd1c:	4654      	mov	r4, sl
 800bd1e:	2000      	movs	r0, #0
 800bd20:	f04f 0c0a 	mov.w	ip, #10
 800bd24:	4621      	mov	r1, r4
 800bd26:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd2a:	3b30      	subs	r3, #48	@ 0x30
 800bd2c:	2b09      	cmp	r3, #9
 800bd2e:	d94b      	bls.n	800bdc8 <_svfiprintf_r+0x17c>
 800bd30:	b1b0      	cbz	r0, 800bd60 <_svfiprintf_r+0x114>
 800bd32:	9207      	str	r2, [sp, #28]
 800bd34:	e014      	b.n	800bd60 <_svfiprintf_r+0x114>
 800bd36:	eba0 0308 	sub.w	r3, r0, r8
 800bd3a:	46a2      	mov	sl, r4
 800bd3c:	fa09 f303 	lsl.w	r3, r9, r3
 800bd40:	4313      	orrs	r3, r2
 800bd42:	9304      	str	r3, [sp, #16]
 800bd44:	e7d2      	b.n	800bcec <_svfiprintf_r+0xa0>
 800bd46:	9b03      	ldr	r3, [sp, #12]
 800bd48:	1d19      	adds	r1, r3, #4
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	9103      	str	r1, [sp, #12]
 800bd50:	bfbb      	ittet	lt
 800bd52:	425b      	neglt	r3, r3
 800bd54:	f042 0202 	orrlt.w	r2, r2, #2
 800bd58:	9307      	strge	r3, [sp, #28]
 800bd5a:	9307      	strlt	r3, [sp, #28]
 800bd5c:	bfb8      	it	lt
 800bd5e:	9204      	strlt	r2, [sp, #16]
 800bd60:	7823      	ldrb	r3, [r4, #0]
 800bd62:	2b2e      	cmp	r3, #46	@ 0x2e
 800bd64:	d10a      	bne.n	800bd7c <_svfiprintf_r+0x130>
 800bd66:	7863      	ldrb	r3, [r4, #1]
 800bd68:	2b2a      	cmp	r3, #42	@ 0x2a
 800bd6a:	d132      	bne.n	800bdd2 <_svfiprintf_r+0x186>
 800bd6c:	9b03      	ldr	r3, [sp, #12]
 800bd6e:	3402      	adds	r4, #2
 800bd70:	1d1a      	adds	r2, r3, #4
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bd78:	9203      	str	r2, [sp, #12]
 800bd7a:	9305      	str	r3, [sp, #20]
 800bd7c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800be40 <_svfiprintf_r+0x1f4>
 800bd80:	2203      	movs	r2, #3
 800bd82:	7821      	ldrb	r1, [r4, #0]
 800bd84:	4650      	mov	r0, sl
 800bd86:	f000 fccf 	bl	800c728 <memchr>
 800bd8a:	b138      	cbz	r0, 800bd9c <_svfiprintf_r+0x150>
 800bd8c:	eba0 000a 	sub.w	r0, r0, sl
 800bd90:	2240      	movs	r2, #64	@ 0x40
 800bd92:	9b04      	ldr	r3, [sp, #16]
 800bd94:	3401      	adds	r4, #1
 800bd96:	4082      	lsls	r2, r0
 800bd98:	4313      	orrs	r3, r2
 800bd9a:	9304      	str	r3, [sp, #16]
 800bd9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bda0:	2206      	movs	r2, #6
 800bda2:	4824      	ldr	r0, [pc, #144]	@ (800be34 <_svfiprintf_r+0x1e8>)
 800bda4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bda8:	f000 fcbe 	bl	800c728 <memchr>
 800bdac:	2800      	cmp	r0, #0
 800bdae:	d036      	beq.n	800be1e <_svfiprintf_r+0x1d2>
 800bdb0:	4b21      	ldr	r3, [pc, #132]	@ (800be38 <_svfiprintf_r+0x1ec>)
 800bdb2:	bb1b      	cbnz	r3, 800bdfc <_svfiprintf_r+0x1b0>
 800bdb4:	9b03      	ldr	r3, [sp, #12]
 800bdb6:	3307      	adds	r3, #7
 800bdb8:	f023 0307 	bic.w	r3, r3, #7
 800bdbc:	3308      	adds	r3, #8
 800bdbe:	9303      	str	r3, [sp, #12]
 800bdc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdc2:	4433      	add	r3, r6
 800bdc4:	9309      	str	r3, [sp, #36]	@ 0x24
 800bdc6:	e76a      	b.n	800bc9e <_svfiprintf_r+0x52>
 800bdc8:	fb0c 3202 	mla	r2, ip, r2, r3
 800bdcc:	460c      	mov	r4, r1
 800bdce:	2001      	movs	r0, #1
 800bdd0:	e7a8      	b.n	800bd24 <_svfiprintf_r+0xd8>
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	3401      	adds	r4, #1
 800bdd6:	f04f 0c0a 	mov.w	ip, #10
 800bdda:	4619      	mov	r1, r3
 800bddc:	9305      	str	r3, [sp, #20]
 800bdde:	4620      	mov	r0, r4
 800bde0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bde4:	3a30      	subs	r2, #48	@ 0x30
 800bde6:	2a09      	cmp	r2, #9
 800bde8:	d903      	bls.n	800bdf2 <_svfiprintf_r+0x1a6>
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d0c6      	beq.n	800bd7c <_svfiprintf_r+0x130>
 800bdee:	9105      	str	r1, [sp, #20]
 800bdf0:	e7c4      	b.n	800bd7c <_svfiprintf_r+0x130>
 800bdf2:	fb0c 2101 	mla	r1, ip, r1, r2
 800bdf6:	4604      	mov	r4, r0
 800bdf8:	2301      	movs	r3, #1
 800bdfa:	e7f0      	b.n	800bdde <_svfiprintf_r+0x192>
 800bdfc:	ab03      	add	r3, sp, #12
 800bdfe:	462a      	mov	r2, r5
 800be00:	a904      	add	r1, sp, #16
 800be02:	4638      	mov	r0, r7
 800be04:	9300      	str	r3, [sp, #0]
 800be06:	4b0d      	ldr	r3, [pc, #52]	@ (800be3c <_svfiprintf_r+0x1f0>)
 800be08:	f3af 8000 	nop.w
 800be0c:	1c42      	adds	r2, r0, #1
 800be0e:	4606      	mov	r6, r0
 800be10:	d1d6      	bne.n	800bdc0 <_svfiprintf_r+0x174>
 800be12:	89ab      	ldrh	r3, [r5, #12]
 800be14:	065b      	lsls	r3, r3, #25
 800be16:	f53f af2d 	bmi.w	800bc74 <_svfiprintf_r+0x28>
 800be1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800be1c:	e72c      	b.n	800bc78 <_svfiprintf_r+0x2c>
 800be1e:	ab03      	add	r3, sp, #12
 800be20:	462a      	mov	r2, r5
 800be22:	a904      	add	r1, sp, #16
 800be24:	4638      	mov	r0, r7
 800be26:	9300      	str	r3, [sp, #0]
 800be28:	4b04      	ldr	r3, [pc, #16]	@ (800be3c <_svfiprintf_r+0x1f0>)
 800be2a:	f000 f9bf 	bl	800c1ac <_printf_i>
 800be2e:	e7ed      	b.n	800be0c <_svfiprintf_r+0x1c0>
 800be30:	0800ca2c 	.word	0x0800ca2c
 800be34:	0800ca36 	.word	0x0800ca36
 800be38:	00000000 	.word	0x00000000
 800be3c:	0800bb95 	.word	0x0800bb95
 800be40:	0800ca32 	.word	0x0800ca32

0800be44 <__sfputc_r>:
 800be44:	6893      	ldr	r3, [r2, #8]
 800be46:	3b01      	subs	r3, #1
 800be48:	2b00      	cmp	r3, #0
 800be4a:	6093      	str	r3, [r2, #8]
 800be4c:	b410      	push	{r4}
 800be4e:	da08      	bge.n	800be62 <__sfputc_r+0x1e>
 800be50:	6994      	ldr	r4, [r2, #24]
 800be52:	42a3      	cmp	r3, r4
 800be54:	db01      	blt.n	800be5a <__sfputc_r+0x16>
 800be56:	290a      	cmp	r1, #10
 800be58:	d103      	bne.n	800be62 <__sfputc_r+0x1e>
 800be5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be5e:	f000 bba5 	b.w	800c5ac <__swbuf_r>
 800be62:	6813      	ldr	r3, [r2, #0]
 800be64:	1c58      	adds	r0, r3, #1
 800be66:	6010      	str	r0, [r2, #0]
 800be68:	4608      	mov	r0, r1
 800be6a:	7019      	strb	r1, [r3, #0]
 800be6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be70:	4770      	bx	lr

0800be72 <__sfputs_r>:
 800be72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be74:	4606      	mov	r6, r0
 800be76:	460f      	mov	r7, r1
 800be78:	4614      	mov	r4, r2
 800be7a:	18d5      	adds	r5, r2, r3
 800be7c:	42ac      	cmp	r4, r5
 800be7e:	d101      	bne.n	800be84 <__sfputs_r+0x12>
 800be80:	2000      	movs	r0, #0
 800be82:	e007      	b.n	800be94 <__sfputs_r+0x22>
 800be84:	463a      	mov	r2, r7
 800be86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be8a:	4630      	mov	r0, r6
 800be8c:	f7ff ffda 	bl	800be44 <__sfputc_r>
 800be90:	1c43      	adds	r3, r0, #1
 800be92:	d1f3      	bne.n	800be7c <__sfputs_r+0xa>
 800be94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800be98 <_vfiprintf_r>:
 800be98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be9c:	460d      	mov	r5, r1
 800be9e:	b09d      	sub	sp, #116	@ 0x74
 800bea0:	4614      	mov	r4, r2
 800bea2:	4698      	mov	r8, r3
 800bea4:	4606      	mov	r6, r0
 800bea6:	b118      	cbz	r0, 800beb0 <_vfiprintf_r+0x18>
 800bea8:	6a03      	ldr	r3, [r0, #32]
 800beaa:	b90b      	cbnz	r3, 800beb0 <_vfiprintf_r+0x18>
 800beac:	f7ff fc4a 	bl	800b744 <__sinit>
 800beb0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800beb2:	07d9      	lsls	r1, r3, #31
 800beb4:	d405      	bmi.n	800bec2 <_vfiprintf_r+0x2a>
 800beb6:	89ab      	ldrh	r3, [r5, #12]
 800beb8:	059a      	lsls	r2, r3, #22
 800beba:	d402      	bmi.n	800bec2 <_vfiprintf_r+0x2a>
 800bebc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bebe:	f7ff fd6e 	bl	800b99e <__retarget_lock_acquire_recursive>
 800bec2:	89ab      	ldrh	r3, [r5, #12]
 800bec4:	071b      	lsls	r3, r3, #28
 800bec6:	d501      	bpl.n	800becc <_vfiprintf_r+0x34>
 800bec8:	692b      	ldr	r3, [r5, #16]
 800beca:	b99b      	cbnz	r3, 800bef4 <_vfiprintf_r+0x5c>
 800becc:	4629      	mov	r1, r5
 800bece:	4630      	mov	r0, r6
 800bed0:	f000 fbaa 	bl	800c628 <__swsetup_r>
 800bed4:	b170      	cbz	r0, 800bef4 <_vfiprintf_r+0x5c>
 800bed6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bed8:	07dc      	lsls	r4, r3, #31
 800beda:	d504      	bpl.n	800bee6 <_vfiprintf_r+0x4e>
 800bedc:	f04f 30ff 	mov.w	r0, #4294967295
 800bee0:	b01d      	add	sp, #116	@ 0x74
 800bee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bee6:	89ab      	ldrh	r3, [r5, #12]
 800bee8:	0598      	lsls	r0, r3, #22
 800beea:	d4f7      	bmi.n	800bedc <_vfiprintf_r+0x44>
 800beec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800beee:	f7ff fd57 	bl	800b9a0 <__retarget_lock_release_recursive>
 800bef2:	e7f3      	b.n	800bedc <_vfiprintf_r+0x44>
 800bef4:	2300      	movs	r3, #0
 800bef6:	f8cd 800c 	str.w	r8, [sp, #12]
 800befa:	f04f 0901 	mov.w	r9, #1
 800befe:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800c0b4 <_vfiprintf_r+0x21c>
 800bf02:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf04:	2320      	movs	r3, #32
 800bf06:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bf0a:	2330      	movs	r3, #48	@ 0x30
 800bf0c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bf10:	4623      	mov	r3, r4
 800bf12:	469a      	mov	sl, r3
 800bf14:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf18:	b10a      	cbz	r2, 800bf1e <_vfiprintf_r+0x86>
 800bf1a:	2a25      	cmp	r2, #37	@ 0x25
 800bf1c:	d1f9      	bne.n	800bf12 <_vfiprintf_r+0x7a>
 800bf1e:	ebba 0b04 	subs.w	fp, sl, r4
 800bf22:	d00b      	beq.n	800bf3c <_vfiprintf_r+0xa4>
 800bf24:	465b      	mov	r3, fp
 800bf26:	4622      	mov	r2, r4
 800bf28:	4629      	mov	r1, r5
 800bf2a:	4630      	mov	r0, r6
 800bf2c:	f7ff ffa1 	bl	800be72 <__sfputs_r>
 800bf30:	3001      	adds	r0, #1
 800bf32:	f000 80a7 	beq.w	800c084 <_vfiprintf_r+0x1ec>
 800bf36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bf38:	445a      	add	r2, fp
 800bf3a:	9209      	str	r2, [sp, #36]	@ 0x24
 800bf3c:	f89a 3000 	ldrb.w	r3, [sl]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	f000 809f 	beq.w	800c084 <_vfiprintf_r+0x1ec>
 800bf46:	2300      	movs	r3, #0
 800bf48:	f04f 32ff 	mov.w	r2, #4294967295
 800bf4c:	f10a 0a01 	add.w	sl, sl, #1
 800bf50:	9304      	str	r3, [sp, #16]
 800bf52:	9307      	str	r3, [sp, #28]
 800bf54:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bf58:	931a      	str	r3, [sp, #104]	@ 0x68
 800bf5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf5e:	4654      	mov	r4, sl
 800bf60:	2205      	movs	r2, #5
 800bf62:	4854      	ldr	r0, [pc, #336]	@ (800c0b4 <_vfiprintf_r+0x21c>)
 800bf64:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf68:	f000 fbde 	bl	800c728 <memchr>
 800bf6c:	9a04      	ldr	r2, [sp, #16]
 800bf6e:	b9d8      	cbnz	r0, 800bfa8 <_vfiprintf_r+0x110>
 800bf70:	06d1      	lsls	r1, r2, #27
 800bf72:	bf44      	itt	mi
 800bf74:	2320      	movmi	r3, #32
 800bf76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bf7a:	0713      	lsls	r3, r2, #28
 800bf7c:	bf44      	itt	mi
 800bf7e:	232b      	movmi	r3, #43	@ 0x2b
 800bf80:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bf84:	f89a 3000 	ldrb.w	r3, [sl]
 800bf88:	2b2a      	cmp	r3, #42	@ 0x2a
 800bf8a:	d015      	beq.n	800bfb8 <_vfiprintf_r+0x120>
 800bf8c:	9a07      	ldr	r2, [sp, #28]
 800bf8e:	4654      	mov	r4, sl
 800bf90:	2000      	movs	r0, #0
 800bf92:	f04f 0c0a 	mov.w	ip, #10
 800bf96:	4621      	mov	r1, r4
 800bf98:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf9c:	3b30      	subs	r3, #48	@ 0x30
 800bf9e:	2b09      	cmp	r3, #9
 800bfa0:	d94b      	bls.n	800c03a <_vfiprintf_r+0x1a2>
 800bfa2:	b1b0      	cbz	r0, 800bfd2 <_vfiprintf_r+0x13a>
 800bfa4:	9207      	str	r2, [sp, #28]
 800bfa6:	e014      	b.n	800bfd2 <_vfiprintf_r+0x13a>
 800bfa8:	eba0 0308 	sub.w	r3, r0, r8
 800bfac:	46a2      	mov	sl, r4
 800bfae:	fa09 f303 	lsl.w	r3, r9, r3
 800bfb2:	4313      	orrs	r3, r2
 800bfb4:	9304      	str	r3, [sp, #16]
 800bfb6:	e7d2      	b.n	800bf5e <_vfiprintf_r+0xc6>
 800bfb8:	9b03      	ldr	r3, [sp, #12]
 800bfba:	1d19      	adds	r1, r3, #4
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	9103      	str	r1, [sp, #12]
 800bfc2:	bfbb      	ittet	lt
 800bfc4:	425b      	neglt	r3, r3
 800bfc6:	f042 0202 	orrlt.w	r2, r2, #2
 800bfca:	9307      	strge	r3, [sp, #28]
 800bfcc:	9307      	strlt	r3, [sp, #28]
 800bfce:	bfb8      	it	lt
 800bfd0:	9204      	strlt	r2, [sp, #16]
 800bfd2:	7823      	ldrb	r3, [r4, #0]
 800bfd4:	2b2e      	cmp	r3, #46	@ 0x2e
 800bfd6:	d10a      	bne.n	800bfee <_vfiprintf_r+0x156>
 800bfd8:	7863      	ldrb	r3, [r4, #1]
 800bfda:	2b2a      	cmp	r3, #42	@ 0x2a
 800bfdc:	d132      	bne.n	800c044 <_vfiprintf_r+0x1ac>
 800bfde:	9b03      	ldr	r3, [sp, #12]
 800bfe0:	3402      	adds	r4, #2
 800bfe2:	1d1a      	adds	r2, r3, #4
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bfea:	9203      	str	r2, [sp, #12]
 800bfec:	9305      	str	r3, [sp, #20]
 800bfee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c0c4 <_vfiprintf_r+0x22c>
 800bff2:	2203      	movs	r2, #3
 800bff4:	7821      	ldrb	r1, [r4, #0]
 800bff6:	4650      	mov	r0, sl
 800bff8:	f000 fb96 	bl	800c728 <memchr>
 800bffc:	b138      	cbz	r0, 800c00e <_vfiprintf_r+0x176>
 800bffe:	eba0 000a 	sub.w	r0, r0, sl
 800c002:	2240      	movs	r2, #64	@ 0x40
 800c004:	9b04      	ldr	r3, [sp, #16]
 800c006:	3401      	adds	r4, #1
 800c008:	4082      	lsls	r2, r0
 800c00a:	4313      	orrs	r3, r2
 800c00c:	9304      	str	r3, [sp, #16]
 800c00e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c012:	2206      	movs	r2, #6
 800c014:	4828      	ldr	r0, [pc, #160]	@ (800c0b8 <_vfiprintf_r+0x220>)
 800c016:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c01a:	f000 fb85 	bl	800c728 <memchr>
 800c01e:	2800      	cmp	r0, #0
 800c020:	d03f      	beq.n	800c0a2 <_vfiprintf_r+0x20a>
 800c022:	4b26      	ldr	r3, [pc, #152]	@ (800c0bc <_vfiprintf_r+0x224>)
 800c024:	bb1b      	cbnz	r3, 800c06e <_vfiprintf_r+0x1d6>
 800c026:	9b03      	ldr	r3, [sp, #12]
 800c028:	3307      	adds	r3, #7
 800c02a:	f023 0307 	bic.w	r3, r3, #7
 800c02e:	3308      	adds	r3, #8
 800c030:	9303      	str	r3, [sp, #12]
 800c032:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c034:	443b      	add	r3, r7
 800c036:	9309      	str	r3, [sp, #36]	@ 0x24
 800c038:	e76a      	b.n	800bf10 <_vfiprintf_r+0x78>
 800c03a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c03e:	460c      	mov	r4, r1
 800c040:	2001      	movs	r0, #1
 800c042:	e7a8      	b.n	800bf96 <_vfiprintf_r+0xfe>
 800c044:	2300      	movs	r3, #0
 800c046:	3401      	adds	r4, #1
 800c048:	f04f 0c0a 	mov.w	ip, #10
 800c04c:	4619      	mov	r1, r3
 800c04e:	9305      	str	r3, [sp, #20]
 800c050:	4620      	mov	r0, r4
 800c052:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c056:	3a30      	subs	r2, #48	@ 0x30
 800c058:	2a09      	cmp	r2, #9
 800c05a:	d903      	bls.n	800c064 <_vfiprintf_r+0x1cc>
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d0c6      	beq.n	800bfee <_vfiprintf_r+0x156>
 800c060:	9105      	str	r1, [sp, #20]
 800c062:	e7c4      	b.n	800bfee <_vfiprintf_r+0x156>
 800c064:	fb0c 2101 	mla	r1, ip, r1, r2
 800c068:	4604      	mov	r4, r0
 800c06a:	2301      	movs	r3, #1
 800c06c:	e7f0      	b.n	800c050 <_vfiprintf_r+0x1b8>
 800c06e:	ab03      	add	r3, sp, #12
 800c070:	462a      	mov	r2, r5
 800c072:	a904      	add	r1, sp, #16
 800c074:	4630      	mov	r0, r6
 800c076:	9300      	str	r3, [sp, #0]
 800c078:	4b11      	ldr	r3, [pc, #68]	@ (800c0c0 <_vfiprintf_r+0x228>)
 800c07a:	f3af 8000 	nop.w
 800c07e:	4607      	mov	r7, r0
 800c080:	1c78      	adds	r0, r7, #1
 800c082:	d1d6      	bne.n	800c032 <_vfiprintf_r+0x19a>
 800c084:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c086:	07d9      	lsls	r1, r3, #31
 800c088:	d405      	bmi.n	800c096 <_vfiprintf_r+0x1fe>
 800c08a:	89ab      	ldrh	r3, [r5, #12]
 800c08c:	059a      	lsls	r2, r3, #22
 800c08e:	d402      	bmi.n	800c096 <_vfiprintf_r+0x1fe>
 800c090:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c092:	f7ff fc85 	bl	800b9a0 <__retarget_lock_release_recursive>
 800c096:	89ab      	ldrh	r3, [r5, #12]
 800c098:	065b      	lsls	r3, r3, #25
 800c09a:	f53f af1f 	bmi.w	800bedc <_vfiprintf_r+0x44>
 800c09e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c0a0:	e71e      	b.n	800bee0 <_vfiprintf_r+0x48>
 800c0a2:	ab03      	add	r3, sp, #12
 800c0a4:	462a      	mov	r2, r5
 800c0a6:	a904      	add	r1, sp, #16
 800c0a8:	4630      	mov	r0, r6
 800c0aa:	9300      	str	r3, [sp, #0]
 800c0ac:	4b04      	ldr	r3, [pc, #16]	@ (800c0c0 <_vfiprintf_r+0x228>)
 800c0ae:	f000 f87d 	bl	800c1ac <_printf_i>
 800c0b2:	e7e4      	b.n	800c07e <_vfiprintf_r+0x1e6>
 800c0b4:	0800ca2c 	.word	0x0800ca2c
 800c0b8:	0800ca36 	.word	0x0800ca36
 800c0bc:	00000000 	.word	0x00000000
 800c0c0:	0800be73 	.word	0x0800be73
 800c0c4:	0800ca32 	.word	0x0800ca32

0800c0c8 <_printf_common>:
 800c0c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0cc:	4616      	mov	r6, r2
 800c0ce:	4698      	mov	r8, r3
 800c0d0:	688a      	ldr	r2, [r1, #8]
 800c0d2:	4607      	mov	r7, r0
 800c0d4:	690b      	ldr	r3, [r1, #16]
 800c0d6:	460c      	mov	r4, r1
 800c0d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c0dc:	4293      	cmp	r3, r2
 800c0de:	bfb8      	it	lt
 800c0e0:	4613      	movlt	r3, r2
 800c0e2:	6033      	str	r3, [r6, #0]
 800c0e4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c0e8:	b10a      	cbz	r2, 800c0ee <_printf_common+0x26>
 800c0ea:	3301      	adds	r3, #1
 800c0ec:	6033      	str	r3, [r6, #0]
 800c0ee:	6823      	ldr	r3, [r4, #0]
 800c0f0:	0699      	lsls	r1, r3, #26
 800c0f2:	bf42      	ittt	mi
 800c0f4:	6833      	ldrmi	r3, [r6, #0]
 800c0f6:	3302      	addmi	r3, #2
 800c0f8:	6033      	strmi	r3, [r6, #0]
 800c0fa:	6825      	ldr	r5, [r4, #0]
 800c0fc:	f015 0506 	ands.w	r5, r5, #6
 800c100:	d106      	bne.n	800c110 <_printf_common+0x48>
 800c102:	f104 0a19 	add.w	sl, r4, #25
 800c106:	68e3      	ldr	r3, [r4, #12]
 800c108:	6832      	ldr	r2, [r6, #0]
 800c10a:	1a9b      	subs	r3, r3, r2
 800c10c:	42ab      	cmp	r3, r5
 800c10e:	dc2b      	bgt.n	800c168 <_printf_common+0xa0>
 800c110:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c114:	6822      	ldr	r2, [r4, #0]
 800c116:	3b00      	subs	r3, #0
 800c118:	bf18      	it	ne
 800c11a:	2301      	movne	r3, #1
 800c11c:	0692      	lsls	r2, r2, #26
 800c11e:	d430      	bmi.n	800c182 <_printf_common+0xba>
 800c120:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c124:	4641      	mov	r1, r8
 800c126:	4638      	mov	r0, r7
 800c128:	47c8      	blx	r9
 800c12a:	3001      	adds	r0, #1
 800c12c:	d023      	beq.n	800c176 <_printf_common+0xae>
 800c12e:	6823      	ldr	r3, [r4, #0]
 800c130:	341a      	adds	r4, #26
 800c132:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800c136:	f003 0306 	and.w	r3, r3, #6
 800c13a:	2b04      	cmp	r3, #4
 800c13c:	bf0a      	itet	eq
 800c13e:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800c142:	2500      	movne	r5, #0
 800c144:	6833      	ldreq	r3, [r6, #0]
 800c146:	f04f 0600 	mov.w	r6, #0
 800c14a:	bf08      	it	eq
 800c14c:	1aed      	subeq	r5, r5, r3
 800c14e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800c152:	bf08      	it	eq
 800c154:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c158:	4293      	cmp	r3, r2
 800c15a:	bfc4      	itt	gt
 800c15c:	1a9b      	subgt	r3, r3, r2
 800c15e:	18ed      	addgt	r5, r5, r3
 800c160:	42b5      	cmp	r5, r6
 800c162:	d11a      	bne.n	800c19a <_printf_common+0xd2>
 800c164:	2000      	movs	r0, #0
 800c166:	e008      	b.n	800c17a <_printf_common+0xb2>
 800c168:	2301      	movs	r3, #1
 800c16a:	4652      	mov	r2, sl
 800c16c:	4641      	mov	r1, r8
 800c16e:	4638      	mov	r0, r7
 800c170:	47c8      	blx	r9
 800c172:	3001      	adds	r0, #1
 800c174:	d103      	bne.n	800c17e <_printf_common+0xb6>
 800c176:	f04f 30ff 	mov.w	r0, #4294967295
 800c17a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c17e:	3501      	adds	r5, #1
 800c180:	e7c1      	b.n	800c106 <_printf_common+0x3e>
 800c182:	18e1      	adds	r1, r4, r3
 800c184:	1c5a      	adds	r2, r3, #1
 800c186:	2030      	movs	r0, #48	@ 0x30
 800c188:	3302      	adds	r3, #2
 800c18a:	4422      	add	r2, r4
 800c18c:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c190:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c194:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c198:	e7c2      	b.n	800c120 <_printf_common+0x58>
 800c19a:	2301      	movs	r3, #1
 800c19c:	4622      	mov	r2, r4
 800c19e:	4641      	mov	r1, r8
 800c1a0:	4638      	mov	r0, r7
 800c1a2:	47c8      	blx	r9
 800c1a4:	3001      	adds	r0, #1
 800c1a6:	d0e6      	beq.n	800c176 <_printf_common+0xae>
 800c1a8:	3601      	adds	r6, #1
 800c1aa:	e7d9      	b.n	800c160 <_printf_common+0x98>

0800c1ac <_printf_i>:
 800c1ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c1b0:	7e0f      	ldrb	r7, [r1, #24]
 800c1b2:	4691      	mov	r9, r2
 800c1b4:	4680      	mov	r8, r0
 800c1b6:	460c      	mov	r4, r1
 800c1b8:	2f78      	cmp	r7, #120	@ 0x78
 800c1ba:	469a      	mov	sl, r3
 800c1bc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c1be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c1c2:	d807      	bhi.n	800c1d4 <_printf_i+0x28>
 800c1c4:	2f62      	cmp	r7, #98	@ 0x62
 800c1c6:	d80a      	bhi.n	800c1de <_printf_i+0x32>
 800c1c8:	2f00      	cmp	r7, #0
 800c1ca:	f000 80d2 	beq.w	800c372 <_printf_i+0x1c6>
 800c1ce:	2f58      	cmp	r7, #88	@ 0x58
 800c1d0:	f000 80b9 	beq.w	800c346 <_printf_i+0x19a>
 800c1d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c1d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c1dc:	e03a      	b.n	800c254 <_printf_i+0xa8>
 800c1de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c1e2:	2b15      	cmp	r3, #21
 800c1e4:	d8f6      	bhi.n	800c1d4 <_printf_i+0x28>
 800c1e6:	a101      	add	r1, pc, #4	@ (adr r1, 800c1ec <_printf_i+0x40>)
 800c1e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c1ec:	0800c245 	.word	0x0800c245
 800c1f0:	0800c259 	.word	0x0800c259
 800c1f4:	0800c1d5 	.word	0x0800c1d5
 800c1f8:	0800c1d5 	.word	0x0800c1d5
 800c1fc:	0800c1d5 	.word	0x0800c1d5
 800c200:	0800c1d5 	.word	0x0800c1d5
 800c204:	0800c259 	.word	0x0800c259
 800c208:	0800c1d5 	.word	0x0800c1d5
 800c20c:	0800c1d5 	.word	0x0800c1d5
 800c210:	0800c1d5 	.word	0x0800c1d5
 800c214:	0800c1d5 	.word	0x0800c1d5
 800c218:	0800c359 	.word	0x0800c359
 800c21c:	0800c283 	.word	0x0800c283
 800c220:	0800c313 	.word	0x0800c313
 800c224:	0800c1d5 	.word	0x0800c1d5
 800c228:	0800c1d5 	.word	0x0800c1d5
 800c22c:	0800c37b 	.word	0x0800c37b
 800c230:	0800c1d5 	.word	0x0800c1d5
 800c234:	0800c283 	.word	0x0800c283
 800c238:	0800c1d5 	.word	0x0800c1d5
 800c23c:	0800c1d5 	.word	0x0800c1d5
 800c240:	0800c31b 	.word	0x0800c31b
 800c244:	6833      	ldr	r3, [r6, #0]
 800c246:	1d1a      	adds	r2, r3, #4
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	6032      	str	r2, [r6, #0]
 800c24c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c250:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c254:	2301      	movs	r3, #1
 800c256:	e09d      	b.n	800c394 <_printf_i+0x1e8>
 800c258:	6833      	ldr	r3, [r6, #0]
 800c25a:	6820      	ldr	r0, [r4, #0]
 800c25c:	1d19      	adds	r1, r3, #4
 800c25e:	6031      	str	r1, [r6, #0]
 800c260:	0606      	lsls	r6, r0, #24
 800c262:	d501      	bpl.n	800c268 <_printf_i+0xbc>
 800c264:	681d      	ldr	r5, [r3, #0]
 800c266:	e003      	b.n	800c270 <_printf_i+0xc4>
 800c268:	0645      	lsls	r5, r0, #25
 800c26a:	d5fb      	bpl.n	800c264 <_printf_i+0xb8>
 800c26c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c270:	2d00      	cmp	r5, #0
 800c272:	da03      	bge.n	800c27c <_printf_i+0xd0>
 800c274:	232d      	movs	r3, #45	@ 0x2d
 800c276:	426d      	negs	r5, r5
 800c278:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c27c:	4859      	ldr	r0, [pc, #356]	@ (800c3e4 <_printf_i+0x238>)
 800c27e:	230a      	movs	r3, #10
 800c280:	e011      	b.n	800c2a6 <_printf_i+0xfa>
 800c282:	6821      	ldr	r1, [r4, #0]
 800c284:	6833      	ldr	r3, [r6, #0]
 800c286:	0608      	lsls	r0, r1, #24
 800c288:	f853 5b04 	ldr.w	r5, [r3], #4
 800c28c:	d402      	bmi.n	800c294 <_printf_i+0xe8>
 800c28e:	0649      	lsls	r1, r1, #25
 800c290:	bf48      	it	mi
 800c292:	b2ad      	uxthmi	r5, r5
 800c294:	2f6f      	cmp	r7, #111	@ 0x6f
 800c296:	6033      	str	r3, [r6, #0]
 800c298:	4852      	ldr	r0, [pc, #328]	@ (800c3e4 <_printf_i+0x238>)
 800c29a:	bf14      	ite	ne
 800c29c:	230a      	movne	r3, #10
 800c29e:	2308      	moveq	r3, #8
 800c2a0:	2100      	movs	r1, #0
 800c2a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c2a6:	6866      	ldr	r6, [r4, #4]
 800c2a8:	2e00      	cmp	r6, #0
 800c2aa:	60a6      	str	r6, [r4, #8]
 800c2ac:	bfa2      	ittt	ge
 800c2ae:	6821      	ldrge	r1, [r4, #0]
 800c2b0:	f021 0104 	bicge.w	r1, r1, #4
 800c2b4:	6021      	strge	r1, [r4, #0]
 800c2b6:	b90d      	cbnz	r5, 800c2bc <_printf_i+0x110>
 800c2b8:	2e00      	cmp	r6, #0
 800c2ba:	d04b      	beq.n	800c354 <_printf_i+0x1a8>
 800c2bc:	4616      	mov	r6, r2
 800c2be:	fbb5 f1f3 	udiv	r1, r5, r3
 800c2c2:	fb03 5711 	mls	r7, r3, r1, r5
 800c2c6:	5dc7      	ldrb	r7, [r0, r7]
 800c2c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c2cc:	462f      	mov	r7, r5
 800c2ce:	460d      	mov	r5, r1
 800c2d0:	42bb      	cmp	r3, r7
 800c2d2:	d9f4      	bls.n	800c2be <_printf_i+0x112>
 800c2d4:	2b08      	cmp	r3, #8
 800c2d6:	d10b      	bne.n	800c2f0 <_printf_i+0x144>
 800c2d8:	6823      	ldr	r3, [r4, #0]
 800c2da:	07df      	lsls	r7, r3, #31
 800c2dc:	d508      	bpl.n	800c2f0 <_printf_i+0x144>
 800c2de:	6923      	ldr	r3, [r4, #16]
 800c2e0:	6861      	ldr	r1, [r4, #4]
 800c2e2:	4299      	cmp	r1, r3
 800c2e4:	bfde      	ittt	le
 800c2e6:	2330      	movle	r3, #48	@ 0x30
 800c2e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c2ec:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c2f0:	1b92      	subs	r2, r2, r6
 800c2f2:	6122      	str	r2, [r4, #16]
 800c2f4:	464b      	mov	r3, r9
 800c2f6:	aa03      	add	r2, sp, #12
 800c2f8:	4621      	mov	r1, r4
 800c2fa:	4640      	mov	r0, r8
 800c2fc:	f8cd a000 	str.w	sl, [sp]
 800c300:	f7ff fee2 	bl	800c0c8 <_printf_common>
 800c304:	3001      	adds	r0, #1
 800c306:	d14a      	bne.n	800c39e <_printf_i+0x1f2>
 800c308:	f04f 30ff 	mov.w	r0, #4294967295
 800c30c:	b004      	add	sp, #16
 800c30e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c312:	6823      	ldr	r3, [r4, #0]
 800c314:	f043 0320 	orr.w	r3, r3, #32
 800c318:	6023      	str	r3, [r4, #0]
 800c31a:	2778      	movs	r7, #120	@ 0x78
 800c31c:	4832      	ldr	r0, [pc, #200]	@ (800c3e8 <_printf_i+0x23c>)
 800c31e:	6823      	ldr	r3, [r4, #0]
 800c320:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c324:	061f      	lsls	r7, r3, #24
 800c326:	6831      	ldr	r1, [r6, #0]
 800c328:	f851 5b04 	ldr.w	r5, [r1], #4
 800c32c:	d402      	bmi.n	800c334 <_printf_i+0x188>
 800c32e:	065f      	lsls	r7, r3, #25
 800c330:	bf48      	it	mi
 800c332:	b2ad      	uxthmi	r5, r5
 800c334:	6031      	str	r1, [r6, #0]
 800c336:	07d9      	lsls	r1, r3, #31
 800c338:	bf44      	itt	mi
 800c33a:	f043 0320 	orrmi.w	r3, r3, #32
 800c33e:	6023      	strmi	r3, [r4, #0]
 800c340:	b11d      	cbz	r5, 800c34a <_printf_i+0x19e>
 800c342:	2310      	movs	r3, #16
 800c344:	e7ac      	b.n	800c2a0 <_printf_i+0xf4>
 800c346:	4827      	ldr	r0, [pc, #156]	@ (800c3e4 <_printf_i+0x238>)
 800c348:	e7e9      	b.n	800c31e <_printf_i+0x172>
 800c34a:	6823      	ldr	r3, [r4, #0]
 800c34c:	f023 0320 	bic.w	r3, r3, #32
 800c350:	6023      	str	r3, [r4, #0]
 800c352:	e7f6      	b.n	800c342 <_printf_i+0x196>
 800c354:	4616      	mov	r6, r2
 800c356:	e7bd      	b.n	800c2d4 <_printf_i+0x128>
 800c358:	6833      	ldr	r3, [r6, #0]
 800c35a:	6825      	ldr	r5, [r4, #0]
 800c35c:	1d18      	adds	r0, r3, #4
 800c35e:	6961      	ldr	r1, [r4, #20]
 800c360:	6030      	str	r0, [r6, #0]
 800c362:	062e      	lsls	r6, r5, #24
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	d501      	bpl.n	800c36c <_printf_i+0x1c0>
 800c368:	6019      	str	r1, [r3, #0]
 800c36a:	e002      	b.n	800c372 <_printf_i+0x1c6>
 800c36c:	0668      	lsls	r0, r5, #25
 800c36e:	d5fb      	bpl.n	800c368 <_printf_i+0x1bc>
 800c370:	8019      	strh	r1, [r3, #0]
 800c372:	2300      	movs	r3, #0
 800c374:	4616      	mov	r6, r2
 800c376:	6123      	str	r3, [r4, #16]
 800c378:	e7bc      	b.n	800c2f4 <_printf_i+0x148>
 800c37a:	6833      	ldr	r3, [r6, #0]
 800c37c:	2100      	movs	r1, #0
 800c37e:	1d1a      	adds	r2, r3, #4
 800c380:	6032      	str	r2, [r6, #0]
 800c382:	681e      	ldr	r6, [r3, #0]
 800c384:	6862      	ldr	r2, [r4, #4]
 800c386:	4630      	mov	r0, r6
 800c388:	f000 f9ce 	bl	800c728 <memchr>
 800c38c:	b108      	cbz	r0, 800c392 <_printf_i+0x1e6>
 800c38e:	1b80      	subs	r0, r0, r6
 800c390:	6060      	str	r0, [r4, #4]
 800c392:	6863      	ldr	r3, [r4, #4]
 800c394:	6123      	str	r3, [r4, #16]
 800c396:	2300      	movs	r3, #0
 800c398:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c39c:	e7aa      	b.n	800c2f4 <_printf_i+0x148>
 800c39e:	6923      	ldr	r3, [r4, #16]
 800c3a0:	4632      	mov	r2, r6
 800c3a2:	4649      	mov	r1, r9
 800c3a4:	4640      	mov	r0, r8
 800c3a6:	47d0      	blx	sl
 800c3a8:	3001      	adds	r0, #1
 800c3aa:	d0ad      	beq.n	800c308 <_printf_i+0x15c>
 800c3ac:	6823      	ldr	r3, [r4, #0]
 800c3ae:	079b      	lsls	r3, r3, #30
 800c3b0:	d413      	bmi.n	800c3da <_printf_i+0x22e>
 800c3b2:	68e0      	ldr	r0, [r4, #12]
 800c3b4:	9b03      	ldr	r3, [sp, #12]
 800c3b6:	4298      	cmp	r0, r3
 800c3b8:	bfb8      	it	lt
 800c3ba:	4618      	movlt	r0, r3
 800c3bc:	e7a6      	b.n	800c30c <_printf_i+0x160>
 800c3be:	2301      	movs	r3, #1
 800c3c0:	4632      	mov	r2, r6
 800c3c2:	4649      	mov	r1, r9
 800c3c4:	4640      	mov	r0, r8
 800c3c6:	47d0      	blx	sl
 800c3c8:	3001      	adds	r0, #1
 800c3ca:	d09d      	beq.n	800c308 <_printf_i+0x15c>
 800c3cc:	3501      	adds	r5, #1
 800c3ce:	68e3      	ldr	r3, [r4, #12]
 800c3d0:	9903      	ldr	r1, [sp, #12]
 800c3d2:	1a5b      	subs	r3, r3, r1
 800c3d4:	42ab      	cmp	r3, r5
 800c3d6:	dcf2      	bgt.n	800c3be <_printf_i+0x212>
 800c3d8:	e7eb      	b.n	800c3b2 <_printf_i+0x206>
 800c3da:	2500      	movs	r5, #0
 800c3dc:	f104 0619 	add.w	r6, r4, #25
 800c3e0:	e7f5      	b.n	800c3ce <_printf_i+0x222>
 800c3e2:	bf00      	nop
 800c3e4:	0800ca3d 	.word	0x0800ca3d
 800c3e8:	0800ca4e 	.word	0x0800ca4e

0800c3ec <__sflush_r>:
 800c3ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c3f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3f4:	0716      	lsls	r6, r2, #28
 800c3f6:	4605      	mov	r5, r0
 800c3f8:	460c      	mov	r4, r1
 800c3fa:	d454      	bmi.n	800c4a6 <__sflush_r+0xba>
 800c3fc:	684b      	ldr	r3, [r1, #4]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	dc02      	bgt.n	800c408 <__sflush_r+0x1c>
 800c402:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c404:	2b00      	cmp	r3, #0
 800c406:	dd48      	ble.n	800c49a <__sflush_r+0xae>
 800c408:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c40a:	2e00      	cmp	r6, #0
 800c40c:	d045      	beq.n	800c49a <__sflush_r+0xae>
 800c40e:	2300      	movs	r3, #0
 800c410:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c414:	682f      	ldr	r7, [r5, #0]
 800c416:	6a21      	ldr	r1, [r4, #32]
 800c418:	602b      	str	r3, [r5, #0]
 800c41a:	d030      	beq.n	800c47e <__sflush_r+0x92>
 800c41c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c41e:	89a3      	ldrh	r3, [r4, #12]
 800c420:	0759      	lsls	r1, r3, #29
 800c422:	d505      	bpl.n	800c430 <__sflush_r+0x44>
 800c424:	6863      	ldr	r3, [r4, #4]
 800c426:	1ad2      	subs	r2, r2, r3
 800c428:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c42a:	b10b      	cbz	r3, 800c430 <__sflush_r+0x44>
 800c42c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c42e:	1ad2      	subs	r2, r2, r3
 800c430:	2300      	movs	r3, #0
 800c432:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c434:	6a21      	ldr	r1, [r4, #32]
 800c436:	4628      	mov	r0, r5
 800c438:	47b0      	blx	r6
 800c43a:	1c43      	adds	r3, r0, #1
 800c43c:	89a3      	ldrh	r3, [r4, #12]
 800c43e:	d106      	bne.n	800c44e <__sflush_r+0x62>
 800c440:	6829      	ldr	r1, [r5, #0]
 800c442:	291d      	cmp	r1, #29
 800c444:	d82b      	bhi.n	800c49e <__sflush_r+0xb2>
 800c446:	4a2a      	ldr	r2, [pc, #168]	@ (800c4f0 <__sflush_r+0x104>)
 800c448:	410a      	asrs	r2, r1
 800c44a:	07d6      	lsls	r6, r2, #31
 800c44c:	d427      	bmi.n	800c49e <__sflush_r+0xb2>
 800c44e:	2200      	movs	r2, #0
 800c450:	04d9      	lsls	r1, r3, #19
 800c452:	6062      	str	r2, [r4, #4]
 800c454:	6922      	ldr	r2, [r4, #16]
 800c456:	6022      	str	r2, [r4, #0]
 800c458:	d504      	bpl.n	800c464 <__sflush_r+0x78>
 800c45a:	1c42      	adds	r2, r0, #1
 800c45c:	d101      	bne.n	800c462 <__sflush_r+0x76>
 800c45e:	682b      	ldr	r3, [r5, #0]
 800c460:	b903      	cbnz	r3, 800c464 <__sflush_r+0x78>
 800c462:	6560      	str	r0, [r4, #84]	@ 0x54
 800c464:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c466:	602f      	str	r7, [r5, #0]
 800c468:	b1b9      	cbz	r1, 800c49a <__sflush_r+0xae>
 800c46a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c46e:	4299      	cmp	r1, r3
 800c470:	d002      	beq.n	800c478 <__sflush_r+0x8c>
 800c472:	4628      	mov	r0, r5
 800c474:	f7ff fa96 	bl	800b9a4 <_free_r>
 800c478:	2300      	movs	r3, #0
 800c47a:	6363      	str	r3, [r4, #52]	@ 0x34
 800c47c:	e00d      	b.n	800c49a <__sflush_r+0xae>
 800c47e:	2301      	movs	r3, #1
 800c480:	4628      	mov	r0, r5
 800c482:	47b0      	blx	r6
 800c484:	4602      	mov	r2, r0
 800c486:	1c50      	adds	r0, r2, #1
 800c488:	d1c9      	bne.n	800c41e <__sflush_r+0x32>
 800c48a:	682b      	ldr	r3, [r5, #0]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d0c6      	beq.n	800c41e <__sflush_r+0x32>
 800c490:	2b1d      	cmp	r3, #29
 800c492:	d001      	beq.n	800c498 <__sflush_r+0xac>
 800c494:	2b16      	cmp	r3, #22
 800c496:	d11d      	bne.n	800c4d4 <__sflush_r+0xe8>
 800c498:	602f      	str	r7, [r5, #0]
 800c49a:	2000      	movs	r0, #0
 800c49c:	e021      	b.n	800c4e2 <__sflush_r+0xf6>
 800c49e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c4a2:	b21b      	sxth	r3, r3
 800c4a4:	e01a      	b.n	800c4dc <__sflush_r+0xf0>
 800c4a6:	690f      	ldr	r7, [r1, #16]
 800c4a8:	2f00      	cmp	r7, #0
 800c4aa:	d0f6      	beq.n	800c49a <__sflush_r+0xae>
 800c4ac:	0793      	lsls	r3, r2, #30
 800c4ae:	680e      	ldr	r6, [r1, #0]
 800c4b0:	600f      	str	r7, [r1, #0]
 800c4b2:	bf0c      	ite	eq
 800c4b4:	694b      	ldreq	r3, [r1, #20]
 800c4b6:	2300      	movne	r3, #0
 800c4b8:	eba6 0807 	sub.w	r8, r6, r7
 800c4bc:	608b      	str	r3, [r1, #8]
 800c4be:	f1b8 0f00 	cmp.w	r8, #0
 800c4c2:	ddea      	ble.n	800c49a <__sflush_r+0xae>
 800c4c4:	4643      	mov	r3, r8
 800c4c6:	463a      	mov	r2, r7
 800c4c8:	6a21      	ldr	r1, [r4, #32]
 800c4ca:	4628      	mov	r0, r5
 800c4cc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c4ce:	47b0      	blx	r6
 800c4d0:	2800      	cmp	r0, #0
 800c4d2:	dc08      	bgt.n	800c4e6 <__sflush_r+0xfa>
 800c4d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c4dc:	f04f 30ff 	mov.w	r0, #4294967295
 800c4e0:	81a3      	strh	r3, [r4, #12]
 800c4e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4e6:	4407      	add	r7, r0
 800c4e8:	eba8 0800 	sub.w	r8, r8, r0
 800c4ec:	e7e7      	b.n	800c4be <__sflush_r+0xd2>
 800c4ee:	bf00      	nop
 800c4f0:	dfbffffe 	.word	0xdfbffffe

0800c4f4 <_fflush_r>:
 800c4f4:	b538      	push	{r3, r4, r5, lr}
 800c4f6:	690b      	ldr	r3, [r1, #16]
 800c4f8:	4605      	mov	r5, r0
 800c4fa:	460c      	mov	r4, r1
 800c4fc:	b913      	cbnz	r3, 800c504 <_fflush_r+0x10>
 800c4fe:	2500      	movs	r5, #0
 800c500:	4628      	mov	r0, r5
 800c502:	bd38      	pop	{r3, r4, r5, pc}
 800c504:	b118      	cbz	r0, 800c50e <_fflush_r+0x1a>
 800c506:	6a03      	ldr	r3, [r0, #32]
 800c508:	b90b      	cbnz	r3, 800c50e <_fflush_r+0x1a>
 800c50a:	f7ff f91b 	bl	800b744 <__sinit>
 800c50e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d0f3      	beq.n	800c4fe <_fflush_r+0xa>
 800c516:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c518:	07d0      	lsls	r0, r2, #31
 800c51a:	d404      	bmi.n	800c526 <_fflush_r+0x32>
 800c51c:	0599      	lsls	r1, r3, #22
 800c51e:	d402      	bmi.n	800c526 <_fflush_r+0x32>
 800c520:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c522:	f7ff fa3c 	bl	800b99e <__retarget_lock_acquire_recursive>
 800c526:	4628      	mov	r0, r5
 800c528:	4621      	mov	r1, r4
 800c52a:	f7ff ff5f 	bl	800c3ec <__sflush_r>
 800c52e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c530:	4605      	mov	r5, r0
 800c532:	07da      	lsls	r2, r3, #31
 800c534:	d4e4      	bmi.n	800c500 <_fflush_r+0xc>
 800c536:	89a3      	ldrh	r3, [r4, #12]
 800c538:	059b      	lsls	r3, r3, #22
 800c53a:	d4e1      	bmi.n	800c500 <_fflush_r+0xc>
 800c53c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c53e:	f7ff fa2f 	bl	800b9a0 <__retarget_lock_release_recursive>
 800c542:	e7dd      	b.n	800c500 <_fflush_r+0xc>

0800c544 <_putc_r>:
 800c544:	b570      	push	{r4, r5, r6, lr}
 800c546:	460d      	mov	r5, r1
 800c548:	4614      	mov	r4, r2
 800c54a:	4606      	mov	r6, r0
 800c54c:	b118      	cbz	r0, 800c556 <_putc_r+0x12>
 800c54e:	6a03      	ldr	r3, [r0, #32]
 800c550:	b90b      	cbnz	r3, 800c556 <_putc_r+0x12>
 800c552:	f7ff f8f7 	bl	800b744 <__sinit>
 800c556:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c558:	07d8      	lsls	r0, r3, #31
 800c55a:	d405      	bmi.n	800c568 <_putc_r+0x24>
 800c55c:	89a3      	ldrh	r3, [r4, #12]
 800c55e:	0599      	lsls	r1, r3, #22
 800c560:	d402      	bmi.n	800c568 <_putc_r+0x24>
 800c562:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c564:	f7ff fa1b 	bl	800b99e <__retarget_lock_acquire_recursive>
 800c568:	68a3      	ldr	r3, [r4, #8]
 800c56a:	3b01      	subs	r3, #1
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	60a3      	str	r3, [r4, #8]
 800c570:	da05      	bge.n	800c57e <_putc_r+0x3a>
 800c572:	69a2      	ldr	r2, [r4, #24]
 800c574:	4293      	cmp	r3, r2
 800c576:	db12      	blt.n	800c59e <_putc_r+0x5a>
 800c578:	b2eb      	uxtb	r3, r5
 800c57a:	2b0a      	cmp	r3, #10
 800c57c:	d00f      	beq.n	800c59e <_putc_r+0x5a>
 800c57e:	6823      	ldr	r3, [r4, #0]
 800c580:	1c5a      	adds	r2, r3, #1
 800c582:	6022      	str	r2, [r4, #0]
 800c584:	701d      	strb	r5, [r3, #0]
 800c586:	b2ed      	uxtb	r5, r5
 800c588:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c58a:	07da      	lsls	r2, r3, #31
 800c58c:	d405      	bmi.n	800c59a <_putc_r+0x56>
 800c58e:	89a3      	ldrh	r3, [r4, #12]
 800c590:	059b      	lsls	r3, r3, #22
 800c592:	d402      	bmi.n	800c59a <_putc_r+0x56>
 800c594:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c596:	f7ff fa03 	bl	800b9a0 <__retarget_lock_release_recursive>
 800c59a:	4628      	mov	r0, r5
 800c59c:	bd70      	pop	{r4, r5, r6, pc}
 800c59e:	4629      	mov	r1, r5
 800c5a0:	4622      	mov	r2, r4
 800c5a2:	4630      	mov	r0, r6
 800c5a4:	f000 f802 	bl	800c5ac <__swbuf_r>
 800c5a8:	4605      	mov	r5, r0
 800c5aa:	e7ed      	b.n	800c588 <_putc_r+0x44>

0800c5ac <__swbuf_r>:
 800c5ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5ae:	460e      	mov	r6, r1
 800c5b0:	4614      	mov	r4, r2
 800c5b2:	4605      	mov	r5, r0
 800c5b4:	b118      	cbz	r0, 800c5be <__swbuf_r+0x12>
 800c5b6:	6a03      	ldr	r3, [r0, #32]
 800c5b8:	b90b      	cbnz	r3, 800c5be <__swbuf_r+0x12>
 800c5ba:	f7ff f8c3 	bl	800b744 <__sinit>
 800c5be:	69a3      	ldr	r3, [r4, #24]
 800c5c0:	60a3      	str	r3, [r4, #8]
 800c5c2:	89a3      	ldrh	r3, [r4, #12]
 800c5c4:	071a      	lsls	r2, r3, #28
 800c5c6:	d501      	bpl.n	800c5cc <__swbuf_r+0x20>
 800c5c8:	6923      	ldr	r3, [r4, #16]
 800c5ca:	b943      	cbnz	r3, 800c5de <__swbuf_r+0x32>
 800c5cc:	4621      	mov	r1, r4
 800c5ce:	4628      	mov	r0, r5
 800c5d0:	f000 f82a 	bl	800c628 <__swsetup_r>
 800c5d4:	b118      	cbz	r0, 800c5de <__swbuf_r+0x32>
 800c5d6:	f04f 37ff 	mov.w	r7, #4294967295
 800c5da:	4638      	mov	r0, r7
 800c5dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c5de:	6823      	ldr	r3, [r4, #0]
 800c5e0:	b2f6      	uxtb	r6, r6
 800c5e2:	6922      	ldr	r2, [r4, #16]
 800c5e4:	4637      	mov	r7, r6
 800c5e6:	1a98      	subs	r0, r3, r2
 800c5e8:	6963      	ldr	r3, [r4, #20]
 800c5ea:	4283      	cmp	r3, r0
 800c5ec:	dc05      	bgt.n	800c5fa <__swbuf_r+0x4e>
 800c5ee:	4621      	mov	r1, r4
 800c5f0:	4628      	mov	r0, r5
 800c5f2:	f7ff ff7f 	bl	800c4f4 <_fflush_r>
 800c5f6:	2800      	cmp	r0, #0
 800c5f8:	d1ed      	bne.n	800c5d6 <__swbuf_r+0x2a>
 800c5fa:	68a3      	ldr	r3, [r4, #8]
 800c5fc:	3b01      	subs	r3, #1
 800c5fe:	60a3      	str	r3, [r4, #8]
 800c600:	6823      	ldr	r3, [r4, #0]
 800c602:	1c5a      	adds	r2, r3, #1
 800c604:	6022      	str	r2, [r4, #0]
 800c606:	701e      	strb	r6, [r3, #0]
 800c608:	1c43      	adds	r3, r0, #1
 800c60a:	6962      	ldr	r2, [r4, #20]
 800c60c:	429a      	cmp	r2, r3
 800c60e:	d004      	beq.n	800c61a <__swbuf_r+0x6e>
 800c610:	89a3      	ldrh	r3, [r4, #12]
 800c612:	07db      	lsls	r3, r3, #31
 800c614:	d5e1      	bpl.n	800c5da <__swbuf_r+0x2e>
 800c616:	2e0a      	cmp	r6, #10
 800c618:	d1df      	bne.n	800c5da <__swbuf_r+0x2e>
 800c61a:	4621      	mov	r1, r4
 800c61c:	4628      	mov	r0, r5
 800c61e:	f7ff ff69 	bl	800c4f4 <_fflush_r>
 800c622:	2800      	cmp	r0, #0
 800c624:	d0d9      	beq.n	800c5da <__swbuf_r+0x2e>
 800c626:	e7d6      	b.n	800c5d6 <__swbuf_r+0x2a>

0800c628 <__swsetup_r>:
 800c628:	b538      	push	{r3, r4, r5, lr}
 800c62a:	4b29      	ldr	r3, [pc, #164]	@ (800c6d0 <__swsetup_r+0xa8>)
 800c62c:	4605      	mov	r5, r0
 800c62e:	460c      	mov	r4, r1
 800c630:	6818      	ldr	r0, [r3, #0]
 800c632:	b118      	cbz	r0, 800c63c <__swsetup_r+0x14>
 800c634:	6a03      	ldr	r3, [r0, #32]
 800c636:	b90b      	cbnz	r3, 800c63c <__swsetup_r+0x14>
 800c638:	f7ff f884 	bl	800b744 <__sinit>
 800c63c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c640:	0719      	lsls	r1, r3, #28
 800c642:	d422      	bmi.n	800c68a <__swsetup_r+0x62>
 800c644:	06da      	lsls	r2, r3, #27
 800c646:	d407      	bmi.n	800c658 <__swsetup_r+0x30>
 800c648:	2209      	movs	r2, #9
 800c64a:	602a      	str	r2, [r5, #0]
 800c64c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c650:	f04f 30ff 	mov.w	r0, #4294967295
 800c654:	81a3      	strh	r3, [r4, #12]
 800c656:	e033      	b.n	800c6c0 <__swsetup_r+0x98>
 800c658:	0758      	lsls	r0, r3, #29
 800c65a:	d512      	bpl.n	800c682 <__swsetup_r+0x5a>
 800c65c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c65e:	b141      	cbz	r1, 800c672 <__swsetup_r+0x4a>
 800c660:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c664:	4299      	cmp	r1, r3
 800c666:	d002      	beq.n	800c66e <__swsetup_r+0x46>
 800c668:	4628      	mov	r0, r5
 800c66a:	f7ff f99b 	bl	800b9a4 <_free_r>
 800c66e:	2300      	movs	r3, #0
 800c670:	6363      	str	r3, [r4, #52]	@ 0x34
 800c672:	89a3      	ldrh	r3, [r4, #12]
 800c674:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c678:	81a3      	strh	r3, [r4, #12]
 800c67a:	2300      	movs	r3, #0
 800c67c:	6063      	str	r3, [r4, #4]
 800c67e:	6923      	ldr	r3, [r4, #16]
 800c680:	6023      	str	r3, [r4, #0]
 800c682:	89a3      	ldrh	r3, [r4, #12]
 800c684:	f043 0308 	orr.w	r3, r3, #8
 800c688:	81a3      	strh	r3, [r4, #12]
 800c68a:	6923      	ldr	r3, [r4, #16]
 800c68c:	b94b      	cbnz	r3, 800c6a2 <__swsetup_r+0x7a>
 800c68e:	89a3      	ldrh	r3, [r4, #12]
 800c690:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c694:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c698:	d003      	beq.n	800c6a2 <__swsetup_r+0x7a>
 800c69a:	4621      	mov	r1, r4
 800c69c:	4628      	mov	r0, r5
 800c69e:	f000 f8b1 	bl	800c804 <__smakebuf_r>
 800c6a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c6a6:	f013 0201 	ands.w	r2, r3, #1
 800c6aa:	d00a      	beq.n	800c6c2 <__swsetup_r+0x9a>
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	60a2      	str	r2, [r4, #8]
 800c6b0:	6962      	ldr	r2, [r4, #20]
 800c6b2:	4252      	negs	r2, r2
 800c6b4:	61a2      	str	r2, [r4, #24]
 800c6b6:	6922      	ldr	r2, [r4, #16]
 800c6b8:	b942      	cbnz	r2, 800c6cc <__swsetup_r+0xa4>
 800c6ba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c6be:	d1c5      	bne.n	800c64c <__swsetup_r+0x24>
 800c6c0:	bd38      	pop	{r3, r4, r5, pc}
 800c6c2:	0799      	lsls	r1, r3, #30
 800c6c4:	bf58      	it	pl
 800c6c6:	6962      	ldrpl	r2, [r4, #20]
 800c6c8:	60a2      	str	r2, [r4, #8]
 800c6ca:	e7f4      	b.n	800c6b6 <__swsetup_r+0x8e>
 800c6cc:	2000      	movs	r0, #0
 800c6ce:	e7f7      	b.n	800c6c0 <__swsetup_r+0x98>
 800c6d0:	20000150 	.word	0x20000150

0800c6d4 <memmove>:
 800c6d4:	4288      	cmp	r0, r1
 800c6d6:	b510      	push	{r4, lr}
 800c6d8:	eb01 0402 	add.w	r4, r1, r2
 800c6dc:	d902      	bls.n	800c6e4 <memmove+0x10>
 800c6de:	4284      	cmp	r4, r0
 800c6e0:	4623      	mov	r3, r4
 800c6e2:	d807      	bhi.n	800c6f4 <memmove+0x20>
 800c6e4:	1e43      	subs	r3, r0, #1
 800c6e6:	42a1      	cmp	r1, r4
 800c6e8:	d008      	beq.n	800c6fc <memmove+0x28>
 800c6ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c6ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c6f2:	e7f8      	b.n	800c6e6 <memmove+0x12>
 800c6f4:	4402      	add	r2, r0
 800c6f6:	4601      	mov	r1, r0
 800c6f8:	428a      	cmp	r2, r1
 800c6fa:	d100      	bne.n	800c6fe <memmove+0x2a>
 800c6fc:	bd10      	pop	{r4, pc}
 800c6fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c702:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c706:	e7f7      	b.n	800c6f8 <memmove+0x24>

0800c708 <_sbrk_r>:
 800c708:	b538      	push	{r3, r4, r5, lr}
 800c70a:	2300      	movs	r3, #0
 800c70c:	4d05      	ldr	r5, [pc, #20]	@ (800c724 <_sbrk_r+0x1c>)
 800c70e:	4604      	mov	r4, r0
 800c710:	4608      	mov	r0, r1
 800c712:	602b      	str	r3, [r5, #0]
 800c714:	f7f4 f9ae 	bl	8000a74 <_sbrk>
 800c718:	1c43      	adds	r3, r0, #1
 800c71a:	d102      	bne.n	800c722 <_sbrk_r+0x1a>
 800c71c:	682b      	ldr	r3, [r5, #0]
 800c71e:	b103      	cbz	r3, 800c722 <_sbrk_r+0x1a>
 800c720:	6023      	str	r3, [r4, #0]
 800c722:	bd38      	pop	{r3, r4, r5, pc}
 800c724:	20000dcc 	.word	0x20000dcc

0800c728 <memchr>:
 800c728:	b2c9      	uxtb	r1, r1
 800c72a:	4603      	mov	r3, r0
 800c72c:	4402      	add	r2, r0
 800c72e:	b510      	push	{r4, lr}
 800c730:	4293      	cmp	r3, r2
 800c732:	4618      	mov	r0, r3
 800c734:	d101      	bne.n	800c73a <memchr+0x12>
 800c736:	2000      	movs	r0, #0
 800c738:	e003      	b.n	800c742 <memchr+0x1a>
 800c73a:	7804      	ldrb	r4, [r0, #0]
 800c73c:	3301      	adds	r3, #1
 800c73e:	428c      	cmp	r4, r1
 800c740:	d1f6      	bne.n	800c730 <memchr+0x8>
 800c742:	bd10      	pop	{r4, pc}

0800c744 <memcpy>:
 800c744:	440a      	add	r2, r1
 800c746:	1e43      	subs	r3, r0, #1
 800c748:	4291      	cmp	r1, r2
 800c74a:	d100      	bne.n	800c74e <memcpy+0xa>
 800c74c:	4770      	bx	lr
 800c74e:	b510      	push	{r4, lr}
 800c750:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c754:	4291      	cmp	r1, r2
 800c756:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c75a:	d1f9      	bne.n	800c750 <memcpy+0xc>
 800c75c:	bd10      	pop	{r4, pc}

0800c75e <_realloc_r>:
 800c75e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c762:	4680      	mov	r8, r0
 800c764:	4615      	mov	r5, r2
 800c766:	460c      	mov	r4, r1
 800c768:	b921      	cbnz	r1, 800c774 <_realloc_r+0x16>
 800c76a:	4611      	mov	r1, r2
 800c76c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c770:	f7ff b984 	b.w	800ba7c <_malloc_r>
 800c774:	b92a      	cbnz	r2, 800c782 <_realloc_r+0x24>
 800c776:	f7ff f915 	bl	800b9a4 <_free_r>
 800c77a:	2400      	movs	r4, #0
 800c77c:	4620      	mov	r0, r4
 800c77e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c782:	f000 f89d 	bl	800c8c0 <_malloc_usable_size_r>
 800c786:	4285      	cmp	r5, r0
 800c788:	4606      	mov	r6, r0
 800c78a:	d802      	bhi.n	800c792 <_realloc_r+0x34>
 800c78c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c790:	d8f4      	bhi.n	800c77c <_realloc_r+0x1e>
 800c792:	4629      	mov	r1, r5
 800c794:	4640      	mov	r0, r8
 800c796:	f7ff f971 	bl	800ba7c <_malloc_r>
 800c79a:	4607      	mov	r7, r0
 800c79c:	2800      	cmp	r0, #0
 800c79e:	d0ec      	beq.n	800c77a <_realloc_r+0x1c>
 800c7a0:	42b5      	cmp	r5, r6
 800c7a2:	462a      	mov	r2, r5
 800c7a4:	4621      	mov	r1, r4
 800c7a6:	bf28      	it	cs
 800c7a8:	4632      	movcs	r2, r6
 800c7aa:	f7ff ffcb 	bl	800c744 <memcpy>
 800c7ae:	4621      	mov	r1, r4
 800c7b0:	4640      	mov	r0, r8
 800c7b2:	463c      	mov	r4, r7
 800c7b4:	f7ff f8f6 	bl	800b9a4 <_free_r>
 800c7b8:	e7e0      	b.n	800c77c <_realloc_r+0x1e>

0800c7ba <__swhatbuf_r>:
 800c7ba:	b570      	push	{r4, r5, r6, lr}
 800c7bc:	460c      	mov	r4, r1
 800c7be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7c2:	b096      	sub	sp, #88	@ 0x58
 800c7c4:	4615      	mov	r5, r2
 800c7c6:	2900      	cmp	r1, #0
 800c7c8:	461e      	mov	r6, r3
 800c7ca:	da0c      	bge.n	800c7e6 <__swhatbuf_r+0x2c>
 800c7cc:	89a3      	ldrh	r3, [r4, #12]
 800c7ce:	2100      	movs	r1, #0
 800c7d0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c7d4:	bf14      	ite	ne
 800c7d6:	2340      	movne	r3, #64	@ 0x40
 800c7d8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c7dc:	2000      	movs	r0, #0
 800c7de:	6031      	str	r1, [r6, #0]
 800c7e0:	602b      	str	r3, [r5, #0]
 800c7e2:	b016      	add	sp, #88	@ 0x58
 800c7e4:	bd70      	pop	{r4, r5, r6, pc}
 800c7e6:	466a      	mov	r2, sp
 800c7e8:	f000 f848 	bl	800c87c <_fstat_r>
 800c7ec:	2800      	cmp	r0, #0
 800c7ee:	dbed      	blt.n	800c7cc <__swhatbuf_r+0x12>
 800c7f0:	9901      	ldr	r1, [sp, #4]
 800c7f2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c7f6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c7fa:	4259      	negs	r1, r3
 800c7fc:	4159      	adcs	r1, r3
 800c7fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c802:	e7eb      	b.n	800c7dc <__swhatbuf_r+0x22>

0800c804 <__smakebuf_r>:
 800c804:	898b      	ldrh	r3, [r1, #12]
 800c806:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c808:	079d      	lsls	r5, r3, #30
 800c80a:	4606      	mov	r6, r0
 800c80c:	460c      	mov	r4, r1
 800c80e:	d507      	bpl.n	800c820 <__smakebuf_r+0x1c>
 800c810:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c814:	6023      	str	r3, [r4, #0]
 800c816:	6123      	str	r3, [r4, #16]
 800c818:	2301      	movs	r3, #1
 800c81a:	6163      	str	r3, [r4, #20]
 800c81c:	b003      	add	sp, #12
 800c81e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c820:	ab01      	add	r3, sp, #4
 800c822:	466a      	mov	r2, sp
 800c824:	f7ff ffc9 	bl	800c7ba <__swhatbuf_r>
 800c828:	9f00      	ldr	r7, [sp, #0]
 800c82a:	4605      	mov	r5, r0
 800c82c:	4630      	mov	r0, r6
 800c82e:	4639      	mov	r1, r7
 800c830:	f7ff f924 	bl	800ba7c <_malloc_r>
 800c834:	b948      	cbnz	r0, 800c84a <__smakebuf_r+0x46>
 800c836:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c83a:	059a      	lsls	r2, r3, #22
 800c83c:	d4ee      	bmi.n	800c81c <__smakebuf_r+0x18>
 800c83e:	f023 0303 	bic.w	r3, r3, #3
 800c842:	f043 0302 	orr.w	r3, r3, #2
 800c846:	81a3      	strh	r3, [r4, #12]
 800c848:	e7e2      	b.n	800c810 <__smakebuf_r+0xc>
 800c84a:	89a3      	ldrh	r3, [r4, #12]
 800c84c:	6020      	str	r0, [r4, #0]
 800c84e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c852:	81a3      	strh	r3, [r4, #12]
 800c854:	9b01      	ldr	r3, [sp, #4]
 800c856:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c85a:	b15b      	cbz	r3, 800c874 <__smakebuf_r+0x70>
 800c85c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c860:	4630      	mov	r0, r6
 800c862:	f000 f81d 	bl	800c8a0 <_isatty_r>
 800c866:	b128      	cbz	r0, 800c874 <__smakebuf_r+0x70>
 800c868:	89a3      	ldrh	r3, [r4, #12]
 800c86a:	f023 0303 	bic.w	r3, r3, #3
 800c86e:	f043 0301 	orr.w	r3, r3, #1
 800c872:	81a3      	strh	r3, [r4, #12]
 800c874:	89a3      	ldrh	r3, [r4, #12]
 800c876:	431d      	orrs	r5, r3
 800c878:	81a5      	strh	r5, [r4, #12]
 800c87a:	e7cf      	b.n	800c81c <__smakebuf_r+0x18>

0800c87c <_fstat_r>:
 800c87c:	b538      	push	{r3, r4, r5, lr}
 800c87e:	2300      	movs	r3, #0
 800c880:	4d06      	ldr	r5, [pc, #24]	@ (800c89c <_fstat_r+0x20>)
 800c882:	4604      	mov	r4, r0
 800c884:	4608      	mov	r0, r1
 800c886:	4611      	mov	r1, r2
 800c888:	602b      	str	r3, [r5, #0]
 800c88a:	f7f4 f8ca 	bl	8000a22 <_fstat>
 800c88e:	1c43      	adds	r3, r0, #1
 800c890:	d102      	bne.n	800c898 <_fstat_r+0x1c>
 800c892:	682b      	ldr	r3, [r5, #0]
 800c894:	b103      	cbz	r3, 800c898 <_fstat_r+0x1c>
 800c896:	6023      	str	r3, [r4, #0]
 800c898:	bd38      	pop	{r3, r4, r5, pc}
 800c89a:	bf00      	nop
 800c89c:	20000dcc 	.word	0x20000dcc

0800c8a0 <_isatty_r>:
 800c8a0:	b538      	push	{r3, r4, r5, lr}
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	4d05      	ldr	r5, [pc, #20]	@ (800c8bc <_isatty_r+0x1c>)
 800c8a6:	4604      	mov	r4, r0
 800c8a8:	4608      	mov	r0, r1
 800c8aa:	602b      	str	r3, [r5, #0]
 800c8ac:	f7f4 f8c9 	bl	8000a42 <_isatty>
 800c8b0:	1c43      	adds	r3, r0, #1
 800c8b2:	d102      	bne.n	800c8ba <_isatty_r+0x1a>
 800c8b4:	682b      	ldr	r3, [r5, #0]
 800c8b6:	b103      	cbz	r3, 800c8ba <_isatty_r+0x1a>
 800c8b8:	6023      	str	r3, [r4, #0]
 800c8ba:	bd38      	pop	{r3, r4, r5, pc}
 800c8bc:	20000dcc 	.word	0x20000dcc

0800c8c0 <_malloc_usable_size_r>:
 800c8c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c8c4:	1f18      	subs	r0, r3, #4
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	bfbc      	itt	lt
 800c8ca:	580b      	ldrlt	r3, [r1, r0]
 800c8cc:	18c0      	addlt	r0, r0, r3
 800c8ce:	4770      	bx	lr

0800c8d0 <_init>:
 800c8d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8d2:	bf00      	nop
 800c8d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8d6:	bc08      	pop	{r3}
 800c8d8:	469e      	mov	lr, r3
 800c8da:	4770      	bx	lr

0800c8dc <_fini>:
 800c8dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8de:	bf00      	nop
 800c8e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8e2:	bc08      	pop	{r3}
 800c8e4:	469e      	mov	lr, r3
 800c8e6:	4770      	bx	lr
