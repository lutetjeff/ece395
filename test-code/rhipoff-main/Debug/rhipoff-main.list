
rhipoff-main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000254  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c570  08000254  08000254  00001254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  0800c7c4  0800c7c4  0000d7c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c93c  0800c93c  0000e1ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800c93c  0800c93c  0000e1ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c93c  0800c93c  0000e1ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c93c  0800c93c  0000d93c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c940  0800c940  0000d940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  0800c944  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c00  200001ec  0800cb30  0000e1ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000d04  20000dec  0800cb30  0000edec  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000e1ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017a61  00000000  00000000  0000e222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038f7  00000000  00000000  00025c83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001228  00000000  00000000  00029580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d87  00000000  00000000  0002a7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002dfc1  00000000  00000000  0002b52f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000176ad  00000000  00000000  000594f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00110764  00000000  00000000  00070b9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00181301  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053c0  00000000  00000000  00181344  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00186704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000254 <__do_global_dtors_aux>:
 8000254:	b510      	push	{r4, lr}
 8000256:	4c05      	ldr	r4, [pc, #20]	@ (800026c <__do_global_dtors_aux+0x18>)
 8000258:	7823      	ldrb	r3, [r4, #0]
 800025a:	b933      	cbnz	r3, 800026a <__do_global_dtors_aux+0x16>
 800025c:	4b04      	ldr	r3, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x1c>)
 800025e:	b113      	cbz	r3, 8000266 <__do_global_dtors_aux+0x12>
 8000260:	4804      	ldr	r0, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x20>)
 8000262:	f3af 8000 	nop.w
 8000266:	2301      	movs	r3, #1
 8000268:	7023      	strb	r3, [r4, #0]
 800026a:	bd10      	pop	{r4, pc}
 800026c:	200001ec 	.word	0x200001ec
 8000270:	00000000 	.word	0x00000000
 8000274:	0800c7ac 	.word	0x0800c7ac

08000278 <frame_dummy>:
 8000278:	b508      	push	{r3, lr}
 800027a:	4b03      	ldr	r3, [pc, #12]	@ (8000288 <frame_dummy+0x10>)
 800027c:	b11b      	cbz	r3, 8000286 <frame_dummy+0xe>
 800027e:	4903      	ldr	r1, [pc, #12]	@ (800028c <frame_dummy+0x14>)
 8000280:	4803      	ldr	r0, [pc, #12]	@ (8000290 <frame_dummy+0x18>)
 8000282:	f3af 8000 	nop.w
 8000286:	bd08      	pop	{r3, pc}
 8000288:	00000000 	.word	0x00000000
 800028c:	200001f0 	.word	0x200001f0
 8000290:	0800c7ac 	.word	0x0800c7ac

08000294 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b082      	sub	sp, #8
 8000298:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	hid_report_buffer[0] = 0;   /* Buttons â€“ first 3 bits [LSB] */
 800029a:	4b3a      	ldr	r3, [pc, #232]	@ (8000384 <main+0xf0>)
 800029c:	2200      	movs	r2, #0
 800029e:	701a      	strb	r2, [r3, #0]
	hid_report_buffer[1] = 001; /* X axis 8 bits value signed */
 80002a0:	4b38      	ldr	r3, [pc, #224]	@ (8000384 <main+0xf0>)
 80002a2:	2201      	movs	r2, #1
 80002a4:	705a      	strb	r2, [r3, #1]
	hid_report_buffer[2] = 255;   /* Y axis 8 bits value signed*/
 80002a6:	4b37      	ldr	r3, [pc, #220]	@ (8000384 <main+0xf0>)
 80002a8:	22ff      	movs	r2, #255	@ 0xff
 80002aa:	709a      	strb	r2, [r3, #2]
	hid_report_buffer[3] = 0;   /* Wheel 8 bits value signed*/
 80002ac:	4b35      	ldr	r3, [pc, #212]	@ (8000384 <main+0xf0>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	70da      	strb	r2, [r3, #3]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002b2:	f000 fc99 	bl	8000be8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002b6:	f000 f881 	bl	80003bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ba:	f000 f96d 	bl	8000598 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 80002be:	f000 f8f3 	bl	80004a8 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  /* Initialize the USB Device Library */
  if(USBD_Init(&hUsbDeviceFS, &Class_Desc, 0) != USBD_OK)
 80002c2:	2200      	movs	r2, #0
 80002c4:	4930      	ldr	r1, [pc, #192]	@ (8000388 <main+0xf4>)
 80002c6:	4831      	ldr	r0, [pc, #196]	@ (800038c <main+0xf8>)
 80002c8:	f009 fc36 	bl	8009b38 <USBD_Init>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d001      	beq.n	80002d6 <main+0x42>
  	Error_Handler();
 80002d2:	f000 fa37 	bl	8000744 <Error_Handler>
  /* Store HID Instance Class ID */
  HID_InstID = hUsbDeviceFS.classId;
 80002d6:	4b2d      	ldr	r3, [pc, #180]	@ (800038c <main+0xf8>)
 80002d8:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80002dc:	b2da      	uxtb	r2, r3
 80002de:	4b2c      	ldr	r3, [pc, #176]	@ (8000390 <main+0xfc>)
 80002e0:	701a      	strb	r2, [r3, #0]
  /* Register the HID Class */
  if(USBD_RegisterClassComposite(&hUsbDeviceFS, USBD_HID_CLASS, CLASS_TYPE_HID, &HID_EpAdd_Inst) != USBD_OK)
 80002e2:	4b2c      	ldr	r3, [pc, #176]	@ (8000394 <main+0x100>)
 80002e4:	2201      	movs	r2, #1
 80002e6:	492c      	ldr	r1, [pc, #176]	@ (8000398 <main+0x104>)
 80002e8:	4828      	ldr	r0, [pc, #160]	@ (800038c <main+0xf8>)
 80002ea:	f009 fc83 	bl	8009bf4 <USBD_RegisterClassComposite>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d001      	beq.n	80002f8 <main+0x64>
  	Error_Handler();
 80002f4:	f000 fa26 	bl	8000744 <Error_Handler>
  /* Store the HID Class */
  CDC_InstID = hUsbDeviceFS.classId;
 80002f8:	4b24      	ldr	r3, [pc, #144]	@ (800038c <main+0xf8>)
 80002fa:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80002fe:	b2da      	uxtb	r2, r3
 8000300:	4b26      	ldr	r3, [pc, #152]	@ (800039c <main+0x108>)
 8000302:	701a      	strb	r2, [r3, #0]
  /* Register CDC Class First Instance */
  if(USBD_RegisterClassComposite(&hUsbDeviceFS, USBD_CDC_CLASS, CLASS_TYPE_CDC, CDC_EpAdd_Inst) != USBD_OK)
 8000304:	4b26      	ldr	r3, [pc, #152]	@ (80003a0 <main+0x10c>)
 8000306:	2202      	movs	r2, #2
 8000308:	4926      	ldr	r1, [pc, #152]	@ (80003a4 <main+0x110>)
 800030a:	4820      	ldr	r0, [pc, #128]	@ (800038c <main+0xf8>)
 800030c:	f009 fc72 	bl	8009bf4 <USBD_RegisterClassComposite>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d001      	beq.n	800031a <main+0x86>
  	Error_Handler();
 8000316:	f000 fa15 	bl	8000744 <Error_Handler>
  /* Add CDC Interface Class */
  if (USBD_CMPSIT_SetClassID(&hUsbDeviceFS, CLASS_TYPE_CDC, 0) != 0xFF)
 800031a:	2200      	movs	r2, #0
 800031c:	2102      	movs	r1, #2
 800031e:	481b      	ldr	r0, [pc, #108]	@ (800038c <main+0xf8>)
 8000320:	f008 ffd0 	bl	80092c4 <USBD_CMPSIT_SetClassID>
 8000324:	4603      	mov	r3, r0
 8000326:	2bff      	cmp	r3, #255	@ 0xff
 8000328:	d003      	beq.n	8000332 <main+0x9e>
  {
  	USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_CDC_Template_fops);
 800032a:	491f      	ldr	r1, [pc, #124]	@ (80003a8 <main+0x114>)
 800032c:	4817      	ldr	r0, [pc, #92]	@ (800038c <main+0xf8>)
 800032e:	f008 f851 	bl	80083d4 <USBD_CDC_RegisterInterface>
  }
  USBD_Start(&hUsbDeviceFS);
 8000332:	4816      	ldr	r0, [pc, #88]	@ (800038c <main+0xf8>)
 8000334:	f009 fcc6 	bl	8009cc4 <USBD_Start>

  FDCAN_Config(); // need to set up the FD CAN peripheral with our parameters.
 8000338:	f000 f988 	bl	800064c <FDCAN_Config>
  while (1)
  {
//  	if(HAL_GPIO_ReadPin(USER_BT_GPIO_Port, USER_BT_Pin) == GPIO_PIN_SET)
//  	{
//  		USBD_HID_SendReport(&hUsbDeviceFS, hid_report_buffer, 4, HID_InstID);
  		USBD_CDC_TransmitPacket(&hUsbDeviceFS, CDC_InstID);
 800033c:	4b17      	ldr	r3, [pc, #92]	@ (800039c <main+0x108>)
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	4619      	mov	r1, r3
 8000342:	4812      	ldr	r0, [pc, #72]	@ (800038c <main+0xf8>)
 8000344:	f008 f8a0 	bl	8008488 <USBD_CDC_TransmitPacket>
  		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000348:	2201      	movs	r2, #1
 800034a:	2101      	movs	r1, #1
 800034c:	4817      	ldr	r0, [pc, #92]	@ (80003ac <main+0x118>)
 800034e:	f001 fdfb 	bl	8001f48 <HAL_GPIO_WritePin>
//  		if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &Tx_Header, txData) != HAL_OK)
//  		{
//  			Error_Handler();
//  		}
  		HAL_Delay(100);
 8000352:	2064      	movs	r0, #100	@ 0x64
 8000354:	f000 fd06 	bl	8000d64 <HAL_Delay>
//  		printf("Byte 4: %c", rxData[4]);
//  		printf("Byte 5: %c", rxData[5]);
//  		printf("Byte 6: %c", rxData[6]);
//  		printf("Byte 7: %c", rxData[7]);
//  	    sprintf(buffer, "S1: %d \r\nS2: %d \r\nS3: %d \r\nS4: %d\r\n-----------------\r\n", rxData[0], rxData[1], rxData[2], rxData[3]);
  	    	sprintf(buffer, "%d %d %d %d\r\n", rxData[0], rxData[1], rxData[2], rxData[3]);
 8000358:	4b15      	ldr	r3, [pc, #84]	@ (80003b0 <main+0x11c>)
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	4619      	mov	r1, r3
 800035e:	4b14      	ldr	r3, [pc, #80]	@ (80003b0 <main+0x11c>)
 8000360:	785b      	ldrb	r3, [r3, #1]
 8000362:	4618      	mov	r0, r3
 8000364:	4b12      	ldr	r3, [pc, #72]	@ (80003b0 <main+0x11c>)
 8000366:	789b      	ldrb	r3, [r3, #2]
 8000368:	461a      	mov	r2, r3
 800036a:	4b11      	ldr	r3, [pc, #68]	@ (80003b0 <main+0x11c>)
 800036c:	78db      	ldrb	r3, [r3, #3]
 800036e:	9301      	str	r3, [sp, #4]
 8000370:	9200      	str	r2, [sp, #0]
 8000372:	4603      	mov	r3, r0
 8000374:	460a      	mov	r2, r1
 8000376:	490f      	ldr	r1, [pc, #60]	@ (80003b4 <main+0x120>)
 8000378:	480f      	ldr	r0, [pc, #60]	@ (80003b8 <main+0x124>)
 800037a:	f00b f9a1 	bl	800b6c0 <siprintf>
  		USBD_CDC_TransmitPacket(&hUsbDeviceFS, CDC_InstID);
 800037e:	bf00      	nop
 8000380:	e7dc      	b.n	800033c <main+0xa8>
 8000382:	bf00      	nop
 8000384:	2000088c 	.word	0x2000088c
 8000388:	20000140 	.word	0x20000140
 800038c:	2000054c 	.word	0x2000054c
 8000390:	20000890 	.word	0x20000890
 8000394:	20000003 	.word	0x20000003
 8000398:	200000b0 	.word	0x200000b0
 800039c:	20000891 	.word	0x20000891
 80003a0:	20000000 	.word	0x20000000
 80003a4:	20000010 	.word	0x20000010
 80003a8:	2000004c 	.word	0x2000004c
 80003ac:	42020000 	.word	0x42020000
 80003b0:	200008bc 	.word	0x200008bc
 80003b4:	0800c7c4 	.word	0x0800c7c4
 80003b8:	200008e8 	.word	0x200008e8

080003bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b09c      	sub	sp, #112	@ 0x70
 80003c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003c2:	f107 0320 	add.w	r3, r7, #32
 80003c6:	2250      	movs	r2, #80	@ 0x50
 80003c8:	2100      	movs	r1, #0
 80003ca:	4618      	mov	r0, r3
 80003cc:	f00b f9db 	bl	800b786 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003d0:	f107 0308 	add.w	r3, r7, #8
 80003d4:	2200      	movs	r2, #0
 80003d6:	601a      	str	r2, [r3, #0]
 80003d8:	605a      	str	r2, [r3, #4]
 80003da:	609a      	str	r2, [r3, #8]
 80003dc:	60da      	str	r2, [r3, #12]
 80003de:	611a      	str	r2, [r3, #16]
 80003e0:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80003e2:	4b2f      	ldr	r3, [pc, #188]	@ (80004a0 <SystemClock_Config+0xe4>)
 80003e4:	691b      	ldr	r3, [r3, #16]
 80003e6:	4a2e      	ldr	r2, [pc, #184]	@ (80004a0 <SystemClock_Config+0xe4>)
 80003e8:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80003ec:	6113      	str	r3, [r2, #16]
 80003ee:	4b2c      	ldr	r3, [pc, #176]	@ (80004a0 <SystemClock_Config+0xe4>)
 80003f0:	691b      	ldr	r3, [r3, #16]
 80003f2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80003f6:	607b      	str	r3, [r7, #4]
 80003f8:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80003fa:	bf00      	nop
 80003fc:	4b28      	ldr	r3, [pc, #160]	@ (80004a0 <SystemClock_Config+0xe4>)
 80003fe:	695b      	ldr	r3, [r3, #20]
 8000400:	f003 0308 	and.w	r3, r3, #8
 8000404:	2b08      	cmp	r3, #8
 8000406:	d1f9      	bne.n	80003fc <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_CSI;
 8000408:	2330      	movs	r3, #48	@ 0x30
 800040a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800040c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000410:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8000412:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000416:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 8000418:	2320      	movs	r3, #32
 800041a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800041c:	2302      	movs	r3, #2
 800041e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_CSI;
 8000420:	2302      	movs	r3, #2
 8000422:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000424:	2301      	movs	r3, #1
 8000426:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000428:	2378      	movs	r3, #120	@ 0x78
 800042a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800042c:	2302      	movs	r3, #2
 800042e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000430:	2302      	movs	r3, #2
 8000432:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000434:	2302      	movs	r3, #2
 8000436:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_2;
 8000438:	2308      	movs	r3, #8
 800043a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 800043c:	2300      	movs	r3, #0
 800043e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000440:	2300      	movs	r3, #0
 8000442:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000444:	f107 0320 	add.w	r3, r7, #32
 8000448:	4618      	mov	r0, r3
 800044a:	f003 fa69 	bl	8003920 <HAL_RCC_OscConfig>
 800044e:	4603      	mov	r3, r0
 8000450:	2b00      	cmp	r3, #0
 8000452:	d001      	beq.n	8000458 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000454:	f000 f976 	bl	8000744 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000458:	231f      	movs	r3, #31
 800045a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800045c:	2303      	movs	r3, #3
 800045e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000460:	2300      	movs	r3, #0
 8000462:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000464:	2300      	movs	r3, #0
 8000466:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000468:	2300      	movs	r3, #0
 800046a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800046c:	2300      	movs	r3, #0
 800046e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000470:	f107 0308 	add.w	r3, r7, #8
 8000474:	2105      	movs	r1, #5
 8000476:	4618      	mov	r0, r3
 8000478:	f003 fe8a 	bl	8004190 <HAL_RCC_ClockConfig>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d001      	beq.n	8000486 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000482:	f000 f95f 	bl	8000744 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 8000486:	4b07      	ldr	r3, [pc, #28]	@ (80004a4 <SystemClock_Config+0xe8>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800048e:	4a05      	ldr	r2, [pc, #20]	@ (80004a4 <SystemClock_Config+0xe8>)
 8000490:	f043 0320 	orr.w	r3, r3, #32
 8000494:	6013      	str	r3, [r2, #0]
}
 8000496:	bf00      	nop
 8000498:	3770      	adds	r7, #112	@ 0x70
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	44020800 	.word	0x44020800
 80004a4:	40022000 	.word	0x40022000

080004a8 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80004ac:	4b1f      	ldr	r3, [pc, #124]	@ (800052c <MX_FDCAN1_Init+0x84>)
 80004ae:	4a20      	ldr	r2, [pc, #128]	@ (8000530 <MX_FDCAN1_Init+0x88>)
 80004b0:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80004b2:	4b1e      	ldr	r3, [pc, #120]	@ (800052c <MX_FDCAN1_Init+0x84>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80004b8:	4b1c      	ldr	r3, [pc, #112]	@ (800052c <MX_FDCAN1_Init+0x84>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80004be:	4b1b      	ldr	r3, [pc, #108]	@ (800052c <MX_FDCAN1_Init+0x84>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80004c4:	4b19      	ldr	r3, [pc, #100]	@ (800052c <MX_FDCAN1_Init+0x84>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80004ca:	4b18      	ldr	r3, [pc, #96]	@ (800052c <MX_FDCAN1_Init+0x84>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80004d0:	4b16      	ldr	r3, [pc, #88]	@ (800052c <MX_FDCAN1_Init+0x84>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 15;
 80004d6:	4b15      	ldr	r3, [pc, #84]	@ (800052c <MX_FDCAN1_Init+0x84>)
 80004d8:	220f      	movs	r2, #15
 80004da:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 2;
 80004dc:	4b13      	ldr	r3, [pc, #76]	@ (800052c <MX_FDCAN1_Init+0x84>)
 80004de:	2202      	movs	r2, #2
 80004e0:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 80004e2:	4b12      	ldr	r3, [pc, #72]	@ (800052c <MX_FDCAN1_Init+0x84>)
 80004e4:	220d      	movs	r2, #13
 80004e6:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80004e8:	4b10      	ldr	r3, [pc, #64]	@ (800052c <MX_FDCAN1_Init+0x84>)
 80004ea:	2202      	movs	r2, #2
 80004ec:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 15;
 80004ee:	4b0f      	ldr	r3, [pc, #60]	@ (800052c <MX_FDCAN1_Init+0x84>)
 80004f0:	220f      	movs	r2, #15
 80004f2:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 2;
 80004f4:	4b0d      	ldr	r3, [pc, #52]	@ (800052c <MX_FDCAN1_Init+0x84>)
 80004f6:	2202      	movs	r2, #2
 80004f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 13;
 80004fa:	4b0c      	ldr	r3, [pc, #48]	@ (800052c <MX_FDCAN1_Init+0x84>)
 80004fc:	220d      	movs	r2, #13
 80004fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 8000500:	4b0a      	ldr	r3, [pc, #40]	@ (800052c <MX_FDCAN1_Init+0x84>)
 8000502:	2202      	movs	r2, #2
 8000504:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 8000506:	4b09      	ldr	r3, [pc, #36]	@ (800052c <MX_FDCAN1_Init+0x84>)
 8000508:	2201      	movs	r2, #1
 800050a:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 800050c:	4b07      	ldr	r3, [pc, #28]	@ (800052c <MX_FDCAN1_Init+0x84>)
 800050e:	2200      	movs	r2, #0
 8000510:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000512:	4b06      	ldr	r3, [pc, #24]	@ (800052c <MX_FDCAN1_Init+0x84>)
 8000514:	2200      	movs	r2, #0
 8000516:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000518:	4804      	ldr	r0, [pc, #16]	@ (800052c <MX_FDCAN1_Init+0x84>)
 800051a:	f000 fdd7 	bl	80010cc <HAL_FDCAN_Init>
 800051e:	4603      	mov	r3, r0
 8000520:	2b00      	cmp	r3, #0
 8000522:	d001      	beq.n	8000528 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000524:	f000 f90e 	bl	8000744 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000528:	bf00      	nop
 800052a:	bd80      	pop	{r7, pc}
 800052c:	20000208 	.word	0x20000208
 8000530:	4000a400 	.word	0x4000a400

08000534 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
void MX_USB_PCD_Init(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 8000538:	4b15      	ldr	r3, [pc, #84]	@ (8000590 <MX_USB_PCD_Init+0x5c>)
 800053a:	4a16      	ldr	r2, [pc, #88]	@ (8000594 <MX_USB_PCD_Init+0x60>)
 800053c:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 800053e:	4b14      	ldr	r3, [pc, #80]	@ (8000590 <MX_USB_PCD_Init+0x5c>)
 8000540:	2208      	movs	r2, #8
 8000542:	711a      	strb	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 8000544:	4b12      	ldr	r3, [pc, #72]	@ (8000590 <MX_USB_PCD_Init+0x5c>)
 8000546:	2202      	movs	r2, #2
 8000548:	71da      	strb	r2, [r3, #7]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800054a:	4b11      	ldr	r3, [pc, #68]	@ (8000590 <MX_USB_PCD_Init+0x5c>)
 800054c:	2202      	movs	r2, #2
 800054e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 8000550:	4b0f      	ldr	r3, [pc, #60]	@ (8000590 <MX_USB_PCD_Init+0x5c>)
 8000552:	2200      	movs	r2, #0
 8000554:	729a      	strb	r2, [r3, #10]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 8000556:	4b0e      	ldr	r3, [pc, #56]	@ (8000590 <MX_USB_PCD_Init+0x5c>)
 8000558:	2200      	movs	r2, #0
 800055a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 800055c:	4b0c      	ldr	r3, [pc, #48]	@ (8000590 <MX_USB_PCD_Init+0x5c>)
 800055e:	2200      	movs	r2, #0
 8000560:	731a      	strb	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 8000562:	4b0b      	ldr	r3, [pc, #44]	@ (8000590 <MX_USB_PCD_Init+0x5c>)
 8000564:	2200      	movs	r2, #0
 8000566:	735a      	strb	r2, [r3, #13]
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 8000568:	4b09      	ldr	r3, [pc, #36]	@ (8000590 <MX_USB_PCD_Init+0x5c>)
 800056a:	2200      	movs	r2, #0
 800056c:	739a      	strb	r2, [r3, #14]
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 800056e:	4b08      	ldr	r3, [pc, #32]	@ (8000590 <MX_USB_PCD_Init+0x5c>)
 8000570:	2200      	movs	r2, #0
 8000572:	73da      	strb	r2, [r3, #15]
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 8000574:	4b06      	ldr	r3, [pc, #24]	@ (8000590 <MX_USB_PCD_Init+0x5c>)
 8000576:	2200      	movs	r2, #0
 8000578:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 800057a:	4805      	ldr	r0, [pc, #20]	@ (8000590 <MX_USB_PCD_Init+0x5c>)
 800057c:	f001 fd5f 	bl	800203e <HAL_PCD_Init>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <MX_USB_PCD_Init+0x56>
  {
    Error_Handler();
 8000586:	f000 f8dd 	bl	8000744 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800058a:	bf00      	nop
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	2000026c 	.word	0x2000026c
 8000594:	40016000 	.word	0x40016000

08000598 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b088      	sub	sp, #32
 800059c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059e:	f107 030c 	add.w	r3, r7, #12
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]
 80005a6:	605a      	str	r2, [r3, #4]
 80005a8:	609a      	str	r2, [r3, #8]
 80005aa:	60da      	str	r2, [r3, #12]
 80005ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ae:	4b24      	ldr	r3, [pc, #144]	@ (8000640 <MX_GPIO_Init+0xa8>)
 80005b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80005b4:	4a22      	ldr	r2, [pc, #136]	@ (8000640 <MX_GPIO_Init+0xa8>)
 80005b6:	f043 0301 	orr.w	r3, r3, #1
 80005ba:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80005be:	4b20      	ldr	r3, [pc, #128]	@ (8000640 <MX_GPIO_Init+0xa8>)
 80005c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80005c4:	f003 0301 	and.w	r3, r3, #1
 80005c8:	60bb      	str	r3, [r7, #8]
 80005ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005cc:	4b1c      	ldr	r3, [pc, #112]	@ (8000640 <MX_GPIO_Init+0xa8>)
 80005ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80005d2:	4a1b      	ldr	r2, [pc, #108]	@ (8000640 <MX_GPIO_Init+0xa8>)
 80005d4:	f043 0302 	orr.w	r3, r3, #2
 80005d8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80005dc:	4b18      	ldr	r3, [pc, #96]	@ (8000640 <MX_GPIO_Init+0xa8>)
 80005de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80005e2:	f003 0302 	and.w	r3, r3, #2
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80005ea:	2200      	movs	r2, #0
 80005ec:	21ff      	movs	r1, #255	@ 0xff
 80005ee:	4815      	ldr	r0, [pc, #84]	@ (8000644 <MX_GPIO_Init+0xac>)
 80005f0:	f001 fcaa 	bl	8001f48 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80005f4:	2200      	movs	r2, #0
 80005f6:	210f      	movs	r1, #15
 80005f8:	4813      	ldr	r0, [pc, #76]	@ (8000648 <MX_GPIO_Init+0xb0>)
 80005fa:	f001 fca5 	bl	8001f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80005fe:	23ff      	movs	r3, #255	@ 0xff
 8000600:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000602:	2301      	movs	r3, #1
 8000604:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000606:	2300      	movs	r3, #0
 8000608:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060a:	2300      	movs	r3, #0
 800060c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800060e:	f107 030c 	add.w	r3, r7, #12
 8000612:	4619      	mov	r1, r3
 8000614:	480b      	ldr	r0, [pc, #44]	@ (8000644 <MX_GPIO_Init+0xac>)
 8000616:	f001 fb45 	bl	8001ca4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800061a:	230f      	movs	r3, #15
 800061c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800061e:	2301      	movs	r3, #1
 8000620:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000622:	2300      	movs	r3, #0
 8000624:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000626:	2300      	movs	r3, #0
 8000628:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800062a:	f107 030c 	add.w	r3, r7, #12
 800062e:	4619      	mov	r1, r3
 8000630:	4805      	ldr	r0, [pc, #20]	@ (8000648 <MX_GPIO_Init+0xb0>)
 8000632:	f001 fb37 	bl	8001ca4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000636:	bf00      	nop
 8000638:	3720      	adds	r7, #32
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	44020c00 	.word	0x44020c00
 8000644:	42020000 	.word	0x42020000
 8000648:	42020400 	.word	0x42020400

0800064c <FDCAN_Config>:

/* USER CODE BEGIN 4 */
static void FDCAN_Config(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b088      	sub	sp, #32
 8000650:	af02      	add	r7, sp, #8
	FDCAN_FilterTypeDef filter;

	filter.IdType = FDCAN_STANDARD_ID;
 8000652:	2300      	movs	r3, #0
 8000654:	603b      	str	r3, [r7, #0]
	filter.FilterIndex = 0;
 8000656:	2300      	movs	r3, #0
 8000658:	607b      	str	r3, [r7, #4]
	filter.FilterType = FDCAN_FILTER_RANGE;
 800065a:	2300      	movs	r3, #0
 800065c:	60bb      	str	r3, [r7, #8]
	filter.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800065e:	2301      	movs	r3, #1
 8000660:	60fb      	str	r3, [r7, #12]
	filter.FilterID1 = 0x0;
 8000662:	2300      	movs	r3, #0
 8000664:	613b      	str	r3, [r7, #16]
	filter.FilterID2 = 0x7FF;
 8000666:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800066a:	617b      	str	r3, [r7, #20]

	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &filter) != HAL_OK)
 800066c:	463b      	mov	r3, r7
 800066e:	4619      	mov	r1, r3
 8000670:	4823      	ldr	r0, [pc, #140]	@ (8000700 <FDCAN_Config+0xb4>)
 8000672:	f000 fe85 	bl	8001380 <HAL_FDCAN_ConfigFilter>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <FDCAN_Config+0x34>
	  {
	    Error_Handler();
 800067c:	f000 f862 	bl	8000744 <Error_Handler>
	  }

	if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 8000680:	2300      	movs	r3, #0
 8000682:	9300      	str	r3, [sp, #0]
 8000684:	2300      	movs	r3, #0
 8000686:	2202      	movs	r2, #2
 8000688:	2102      	movs	r1, #2
 800068a:	481d      	ldr	r0, [pc, #116]	@ (8000700 <FDCAN_Config+0xb4>)
 800068c:	f000 fed2 	bl	8001434 <HAL_FDCAN_ConfigGlobalFilter>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <FDCAN_Config+0x4e>
	  {
	    Error_Handler();
 8000696:	f000 f855 	bl	8000744 <Error_Handler>
	  }

	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 800069a:	4819      	ldr	r0, [pc, #100]	@ (8000700 <FDCAN_Config+0xb4>)
 800069c:	f000 fefb 	bl	8001496 <HAL_FDCAN_Start>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <FDCAN_Config+0x5e>
	  {
	    Error_Handler();
 80006a6:	f000 f84d 	bl	8000744 <Error_Handler>
	  }

	  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80006aa:	2200      	movs	r2, #0
 80006ac:	2101      	movs	r1, #1
 80006ae:	4814      	ldr	r0, [pc, #80]	@ (8000700 <FDCAN_Config+0xb4>)
 80006b0:	f001 f822 	bl	80016f8 <HAL_FDCAN_ActivateNotification>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <FDCAN_Config+0x72>
	  {
	    Error_Handler();
 80006ba:	f000 f843 	bl	8000744 <Error_Handler>
	  }

	  Tx_Header.Identifier = 0x23D;
 80006be:	4b11      	ldr	r3, [pc, #68]	@ (8000704 <FDCAN_Config+0xb8>)
 80006c0:	f240 223d 	movw	r2, #573	@ 0x23d
 80006c4:	601a      	str	r2, [r3, #0]
	  Tx_Header.IdType = FDCAN_STANDARD_ID;
 80006c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000704 <FDCAN_Config+0xb8>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	605a      	str	r2, [r3, #4]
	  Tx_Header.TxFrameType = FDCAN_DATA_FRAME;
 80006cc:	4b0d      	ldr	r3, [pc, #52]	@ (8000704 <FDCAN_Config+0xb8>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
	  Tx_Header.DataLength = FDCAN_DLC_BYTES_4;
 80006d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000704 <FDCAN_Config+0xb8>)
 80006d4:	2204      	movs	r2, #4
 80006d6:	60da      	str	r2, [r3, #12]
	  Tx_Header.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80006d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000704 <FDCAN_Config+0xb8>)
 80006da:	2200      	movs	r2, #0
 80006dc:	611a      	str	r2, [r3, #16]
	  Tx_Header.BitRateSwitch = FDCAN_BRS_OFF;
 80006de:	4b09      	ldr	r3, [pc, #36]	@ (8000704 <FDCAN_Config+0xb8>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	615a      	str	r2, [r3, #20]
	  Tx_Header.FDFormat = FDCAN_CLASSIC_CAN;
 80006e4:	4b07      	ldr	r3, [pc, #28]	@ (8000704 <FDCAN_Config+0xb8>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	619a      	str	r2, [r3, #24]
	  Tx_Header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80006ea:	4b06      	ldr	r3, [pc, #24]	@ (8000704 <FDCAN_Config+0xb8>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	61da      	str	r2, [r3, #28]
	  Tx_Header.MessageMarker = 0;
 80006f0:	4b04      	ldr	r3, [pc, #16]	@ (8000704 <FDCAN_Config+0xb8>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	621a      	str	r2, [r3, #32]
}
 80006f6:	bf00      	nop
 80006f8:	3718      	adds	r7, #24
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	20000208 	.word	0x20000208
 8000704:	200008c4 	.word	0x200008c4

08000708 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
 8000710:	6039      	str	r1, [r7, #0]
	if (RxFifo0ITs == FDCAN_IT_RX_FIFO0_NEW_MESSAGE) // we have a new message!
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	2b01      	cmp	r3, #1
 8000716:	d10a      	bne.n	800072e <HAL_FDCAN_RxFifo0Callback+0x26>
	{
		if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &Rx_Header, rxData) != HAL_OK)
 8000718:	4b07      	ldr	r3, [pc, #28]	@ (8000738 <HAL_FDCAN_RxFifo0Callback+0x30>)
 800071a:	4a08      	ldr	r2, [pc, #32]	@ (800073c <HAL_FDCAN_RxFifo0Callback+0x34>)
 800071c:	2140      	movs	r1, #64	@ 0x40
 800071e:	4808      	ldr	r0, [pc, #32]	@ (8000740 <HAL_FDCAN_RxFifo0Callback+0x38>)
 8000720:	f000 fee2 	bl	80014e8 <HAL_FDCAN_GetRxMessage>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <HAL_FDCAN_RxFifo0Callback+0x26>
		{
			Error_Handler();
 800072a:	f000 f80b 	bl	8000744 <Error_Handler>
		}
	}
}
 800072e:	bf00      	nop
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	200008bc 	.word	0x200008bc
 800073c:	20000894 	.word	0x20000894
 8000740:	20000208 	.word	0x20000208

08000744 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000748:	b672      	cpsid	i
}
 800074a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800074c:	bf00      	nop
 800074e:	e7fd      	b.n	800074c <Error_Handler+0x8>

08000750 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000754:	bf00      	nop
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr
	...

08000760 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b0be      	sub	sp, #248	@ 0xf8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000768:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
 8000774:	60da      	str	r2, [r3, #12]
 8000776:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000778:	f107 0310 	add.w	r3, r7, #16
 800077c:	22d0      	movs	r2, #208	@ 0xd0
 800077e:	2100      	movs	r1, #0
 8000780:	4618      	mov	r0, r3
 8000782:	f00b f800 	bl	800b786 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4a2b      	ldr	r2, [pc, #172]	@ (8000838 <HAL_FDCAN_MspInit+0xd8>)
 800078c:	4293      	cmp	r3, r2
 800078e:	d14f      	bne.n	8000830 <HAL_FDCAN_MspInit+0xd0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000790:	f04f 0200 	mov.w	r2, #0
 8000794:	f04f 0304 	mov.w	r3, #4
 8000798:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL1Q;
 800079c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007a0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007a4:	f107 0310 	add.w	r3, r7, #16
 80007a8:	4618      	mov	r0, r3
 80007aa:	f003 fff1 	bl	8004790 <HAL_RCCEx_PeriphCLKConfig>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 80007b4:	f7ff ffc6 	bl	8000744 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80007b8:	4b20      	ldr	r3, [pc, #128]	@ (800083c <HAL_FDCAN_MspInit+0xdc>)
 80007ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80007be:	4a1f      	ldr	r2, [pc, #124]	@ (800083c <HAL_FDCAN_MspInit+0xdc>)
 80007c0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80007c4:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 80007c8:	4b1c      	ldr	r3, [pc, #112]	@ (800083c <HAL_FDCAN_MspInit+0xdc>)
 80007ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80007ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d6:	4b19      	ldr	r3, [pc, #100]	@ (800083c <HAL_FDCAN_MspInit+0xdc>)
 80007d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007dc:	4a17      	ldr	r2, [pc, #92]	@ (800083c <HAL_FDCAN_MspInit+0xdc>)
 80007de:	f043 0302 	orr.w	r3, r3, #2
 80007e2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80007e6:	4b15      	ldr	r3, [pc, #84]	@ (800083c <HAL_FDCAN_MspInit+0xdc>)
 80007e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007ec:	f003 0302 	and.w	r3, r3, #2
 80007f0:	60bb      	str	r3, [r7, #8]
 80007f2:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB7     ------> FDCAN1_TX
    PB8     ------> FDCAN1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80007f4:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80007f8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fc:	2302      	movs	r3, #2
 80007fe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000808:	2300      	movs	r3, #0
 800080a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800080e:	2309      	movs	r3, #9
 8000810:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000814:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000818:	4619      	mov	r1, r3
 800081a:	4809      	ldr	r0, [pc, #36]	@ (8000840 <HAL_FDCAN_MspInit+0xe0>)
 800081c:	f001 fa42 	bl	8001ca4 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000820:	2200      	movs	r2, #0
 8000822:	2100      	movs	r1, #0
 8000824:	2027      	movs	r0, #39	@ 0x27
 8000826:	f000 fb79 	bl	8000f1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800082a:	2027      	movs	r0, #39	@ 0x27
 800082c:	f000 fb90 	bl	8000f50 <HAL_NVIC_EnableIRQ>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8000830:	bf00      	nop
 8000832:	37f8      	adds	r7, #248	@ 0xf8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	4000a400 	.word	0x4000a400
 800083c:	44020c00 	.word	0x44020c00
 8000840:	42020400 	.word	0x42020400

08000844 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b0b8      	sub	sp, #224	@ 0xe0
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800084c:	f107 0310 	add.w	r3, r7, #16
 8000850:	22d0      	movs	r2, #208	@ 0xd0
 8000852:	2100      	movs	r1, #0
 8000854:	4618      	mov	r0, r3
 8000856:	f00a ff96 	bl	800b786 <memset>
  if(hpcd->Instance==USB_DRD_FS)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4a19      	ldr	r2, [pc, #100]	@ (80008c4 <HAL_PCD_MspInit+0x80>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d12b      	bne.n	80008bc <HAL_PCD_MspInit+0x78>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000864:	f04f 0200 	mov.w	r2, #0
 8000868:	f04f 0310 	mov.w	r3, #16
 800086c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000870:	2330      	movs	r3, #48	@ 0x30
 8000872:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000876:	f107 0310 	add.w	r3, r7, #16
 800087a:	4618      	mov	r0, r3
 800087c:	f003 ff88 	bl	8004790 <HAL_RCCEx_PeriphCLKConfig>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <HAL_PCD_MspInit+0x46>
    {
      Error_Handler();
 8000886:	f7ff ff5d 	bl	8000744 <Error_Handler>
    }

  /* Enable VDDUSB */
  HAL_PWREx_EnableVddUSB();
 800088a:	f003 f839 	bl	8003900 <HAL_PWREx_EnableVddUSB>
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800088e:	4b0e      	ldr	r3, [pc, #56]	@ (80008c8 <HAL_PCD_MspInit+0x84>)
 8000890:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000894:	4a0c      	ldr	r2, [pc, #48]	@ (80008c8 <HAL_PCD_MspInit+0x84>)
 8000896:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800089a:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800089e:	4b0a      	ldr	r3, [pc, #40]	@ (80008c8 <HAL_PCD_MspInit+0x84>)
 80008a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80008a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80008a8:	60fb      	str	r3, [r7, #12]
 80008aa:	68fb      	ldr	r3, [r7, #12]
    /* USB_DRD_FS interrupt Init */
    HAL_NVIC_SetPriority(USB_DRD_FS_IRQn, 0, 0);
 80008ac:	2200      	movs	r2, #0
 80008ae:	2100      	movs	r1, #0
 80008b0:	204a      	movs	r0, #74	@ 0x4a
 80008b2:	f000 fb33 	bl	8000f1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_DRD_FS_IRQn);
 80008b6:	204a      	movs	r0, #74	@ 0x4a
 80008b8:	f000 fb4a 	bl	8000f50 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_DRD_FS_MspInit 1 */

  }

}
 80008bc:	bf00      	nop
 80008be:	37e0      	adds	r7, #224	@ 0xe0
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40016000 	.word	0x40016000
 80008c8:	44020c00 	.word	0x44020c00

080008cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008d0:	bf00      	nop
 80008d2:	e7fd      	b.n	80008d0 <NMI_Handler+0x4>

080008d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008d8:	bf00      	nop
 80008da:	e7fd      	b.n	80008d8 <HardFault_Handler+0x4>

080008dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008e0:	bf00      	nop
 80008e2:	e7fd      	b.n	80008e0 <MemManage_Handler+0x4>

080008e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008e8:	bf00      	nop
 80008ea:	e7fd      	b.n	80008e8 <BusFault_Handler+0x4>

080008ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008f0:	bf00      	nop
 80008f2:	e7fd      	b.n	80008f0 <UsageFault_Handler+0x4>

080008f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr

08000902 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000906:	bf00      	nop
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr

08000910 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr

0800091e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800091e:	b580      	push	{r7, lr}
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000922:	f000 f9ff 	bl	8000d24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
	...

0800092c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000930:	4802      	ldr	r0, [pc, #8]	@ (800093c <FDCAN1_IT0_IRQHandler+0x10>)
 8000932:	f000 ffc7 	bl	80018c4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	20000208 	.word	0x20000208

08000940 <USB_DRD_FS_IRQHandler>:

/**
  * @brief This function handles USB FS global interrupt.
  */
void USB_DRD_FS_IRQHandler(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DRD_FS_IRQn 0 */

  /* USER CODE END USB_DRD_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_DRD_FS);
 8000944:	4802      	ldr	r0, [pc, #8]	@ (8000950 <USB_DRD_FS_IRQHandler+0x10>)
 8000946:	f001 fc6d 	bl	8002224 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_DRD_FS_IRQn 1 */

  /* USER CODE END USB_DRD_FS_IRQn 1 */
}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	2000026c 	.word	0x2000026c

08000954 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b086      	sub	sp, #24
 8000958:	af00      	add	r7, sp, #0
 800095a:	60f8      	str	r0, [r7, #12]
 800095c:	60b9      	str	r1, [r7, #8]
 800095e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000960:	2300      	movs	r3, #0
 8000962:	617b      	str	r3, [r7, #20]
 8000964:	e00a      	b.n	800097c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000966:	f3af 8000 	nop.w
 800096a:	4601      	mov	r1, r0
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	1c5a      	adds	r2, r3, #1
 8000970:	60ba      	str	r2, [r7, #8]
 8000972:	b2ca      	uxtb	r2, r1
 8000974:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000976:	697b      	ldr	r3, [r7, #20]
 8000978:	3301      	adds	r3, #1
 800097a:	617b      	str	r3, [r7, #20]
 800097c:	697a      	ldr	r2, [r7, #20]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	429a      	cmp	r2, r3
 8000982:	dbf0      	blt.n	8000966 <_read+0x12>
  }

  return len;
 8000984:	687b      	ldr	r3, [r7, #4]
}
 8000986:	4618      	mov	r0, r3
 8000988:	3718      	adds	r7, #24
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}

0800098e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800098e:	b580      	push	{r7, lr}
 8000990:	b086      	sub	sp, #24
 8000992:	af00      	add	r7, sp, #0
 8000994:	60f8      	str	r0, [r7, #12]
 8000996:	60b9      	str	r1, [r7, #8]
 8000998:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800099a:	2300      	movs	r3, #0
 800099c:	617b      	str	r3, [r7, #20]
 800099e:	e009      	b.n	80009b4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	1c5a      	adds	r2, r3, #1
 80009a4:	60ba      	str	r2, [r7, #8]
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	4618      	mov	r0, r3
 80009aa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	3301      	adds	r3, #1
 80009b2:	617b      	str	r3, [r7, #20]
 80009b4:	697a      	ldr	r2, [r7, #20]
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	429a      	cmp	r2, r3
 80009ba:	dbf1      	blt.n	80009a0 <_write+0x12>
  }
  return len;
 80009bc:	687b      	ldr	r3, [r7, #4]
}
 80009be:	4618      	mov	r0, r3
 80009c0:	3718      	adds	r7, #24
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <_close>:

int _close(int file)
{
 80009c6:	b480      	push	{r7}
 80009c8:	b083      	sub	sp, #12
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	370c      	adds	r7, #12
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr

080009de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009de:	b480      	push	{r7}
 80009e0:	b083      	sub	sp, #12
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	6078      	str	r0, [r7, #4]
 80009e6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80009ee:	605a      	str	r2, [r3, #4]
  return 0;
 80009f0:	2300      	movs	r3, #0
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr

080009fe <_isatty>:

int _isatty(int file)
{
 80009fe:	b480      	push	{r7}
 8000a00:	b083      	sub	sp, #12
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a06:	2301      	movs	r3, #1
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	370c      	adds	r7, #12
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr

08000a14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b085      	sub	sp, #20
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	60f8      	str	r0, [r7, #12]
 8000a1c:	60b9      	str	r1, [r7, #8]
 8000a1e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a20:	2300      	movs	r3, #0
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3714      	adds	r7, #20
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
	...

08000a30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b086      	sub	sp, #24
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a38:	4a14      	ldr	r2, [pc, #80]	@ (8000a8c <_sbrk+0x5c>)
 8000a3a:	4b15      	ldr	r3, [pc, #84]	@ (8000a90 <_sbrk+0x60>)
 8000a3c:	1ad3      	subs	r3, r2, r3
 8000a3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a44:	4b13      	ldr	r3, [pc, #76]	@ (8000a94 <_sbrk+0x64>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d102      	bne.n	8000a52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a4c:	4b11      	ldr	r3, [pc, #68]	@ (8000a94 <_sbrk+0x64>)
 8000a4e:	4a12      	ldr	r2, [pc, #72]	@ (8000a98 <_sbrk+0x68>)
 8000a50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a52:	4b10      	ldr	r3, [pc, #64]	@ (8000a94 <_sbrk+0x64>)
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4413      	add	r3, r2
 8000a5a:	693a      	ldr	r2, [r7, #16]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	d207      	bcs.n	8000a70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a60:	f00a fee0 	bl	800b824 <__errno>
 8000a64:	4603      	mov	r3, r0
 8000a66:	220c      	movs	r2, #12
 8000a68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a6e:	e009      	b.n	8000a84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a70:	4b08      	ldr	r3, [pc, #32]	@ (8000a94 <_sbrk+0x64>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a76:	4b07      	ldr	r3, [pc, #28]	@ (8000a94 <_sbrk+0x64>)
 8000a78:	681a      	ldr	r2, [r3, #0]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4413      	add	r3, r2
 8000a7e:	4a05      	ldr	r2, [pc, #20]	@ (8000a94 <_sbrk+0x64>)
 8000a80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a82:	68fb      	ldr	r3, [r7, #12]
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	3718      	adds	r7, #24
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	20044000 	.word	0x20044000
 8000a90:	00000700 	.word	0x00000700
 8000a94:	200009e8 	.word	0x200009e8
 8000a98:	20000df0 	.word	0x20000df0

08000a9c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000aa2:	4b35      	ldr	r3, [pc, #212]	@ (8000b78 <SystemInit+0xdc>)
 8000aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000aa8:	4a33      	ldr	r2, [pc, #204]	@ (8000b78 <SystemInit+0xdc>)
 8000aaa:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000aae:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8000ab2:	4b32      	ldr	r3, [pc, #200]	@ (8000b7c <SystemInit+0xe0>)
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000ab8:	4b30      	ldr	r3, [pc, #192]	@ (8000b7c <SystemInit+0xe0>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000abe:	4b2f      	ldr	r3, [pc, #188]	@ (8000b7c <SystemInit+0xe0>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8000ac4:	4b2d      	ldr	r3, [pc, #180]	@ (8000b7c <SystemInit+0xe0>)
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	492c      	ldr	r1, [pc, #176]	@ (8000b7c <SystemInit+0xe0>)
 8000aca:	4b2d      	ldr	r3, [pc, #180]	@ (8000b80 <SystemInit+0xe4>)
 8000acc:	4013      	ands	r3, r2
 8000ace:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8000ad0:	4b2a      	ldr	r3, [pc, #168]	@ (8000b7c <SystemInit+0xe0>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8000ad6:	4b29      	ldr	r3, [pc, #164]	@ (8000b7c <SystemInit+0xe0>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8000adc:	4b27      	ldr	r3, [pc, #156]	@ (8000b7c <SystemInit+0xe0>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8000ae2:	4b26      	ldr	r3, [pc, #152]	@ (8000b7c <SystemInit+0xe0>)
 8000ae4:	4a27      	ldr	r2, [pc, #156]	@ (8000b84 <SystemInit+0xe8>)
 8000ae6:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8000ae8:	4b24      	ldr	r3, [pc, #144]	@ (8000b7c <SystemInit+0xe0>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8000aee:	4b23      	ldr	r3, [pc, #140]	@ (8000b7c <SystemInit+0xe0>)
 8000af0:	4a24      	ldr	r2, [pc, #144]	@ (8000b84 <SystemInit+0xe8>)
 8000af2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8000af4:	4b21      	ldr	r3, [pc, #132]	@ (8000b7c <SystemInit+0xe0>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8000afa:	4b20      	ldr	r3, [pc, #128]	@ (8000b7c <SystemInit+0xe0>)
 8000afc:	4a21      	ldr	r2, [pc, #132]	@ (8000b84 <SystemInit+0xe8>)
 8000afe:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8000b00:	4b1e      	ldr	r3, [pc, #120]	@ (8000b7c <SystemInit+0xe0>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000b06:	4b1d      	ldr	r3, [pc, #116]	@ (8000b7c <SystemInit+0xe0>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4a1c      	ldr	r2, [pc, #112]	@ (8000b7c <SystemInit+0xe0>)
 8000b0c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b10:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000b12:	4b1a      	ldr	r3, [pc, #104]	@ (8000b7c <SystemInit+0xe0>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b18:	4b17      	ldr	r3, [pc, #92]	@ (8000b78 <SystemInit+0xdc>)
 8000b1a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000b1e:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8000b20:	4b19      	ldr	r3, [pc, #100]	@ (8000b88 <SystemInit+0xec>)
 8000b22:	699b      	ldr	r3, [r3, #24]
 8000b24:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8000b28:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8000b30:	d003      	beq.n	8000b3a <SystemInit+0x9e>
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8000b38:	d117      	bne.n	8000b6a <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8000b3a:	4b13      	ldr	r3, [pc, #76]	@ (8000b88 <SystemInit+0xec>)
 8000b3c:	69db      	ldr	r3, [r3, #28]
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d005      	beq.n	8000b52 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8000b46:	4b10      	ldr	r3, [pc, #64]	@ (8000b88 <SystemInit+0xec>)
 8000b48:	4a10      	ldr	r2, [pc, #64]	@ (8000b8c <SystemInit+0xf0>)
 8000b4a:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8000b4c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b88 <SystemInit+0xec>)
 8000b4e:	4a10      	ldr	r2, [pc, #64]	@ (8000b90 <SystemInit+0xf4>)
 8000b50:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8000b52:	4b0d      	ldr	r3, [pc, #52]	@ (8000b88 <SystemInit+0xec>)
 8000b54:	69db      	ldr	r3, [r3, #28]
 8000b56:	4a0c      	ldr	r2, [pc, #48]	@ (8000b88 <SystemInit+0xec>)
 8000b58:	f043 0302 	orr.w	r3, r3, #2
 8000b5c:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8000b5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b88 <SystemInit+0xec>)
 8000b60:	69db      	ldr	r3, [r3, #28]
 8000b62:	4a09      	ldr	r2, [pc, #36]	@ (8000b88 <SystemInit+0xec>)
 8000b64:	f043 0301 	orr.w	r3, r3, #1
 8000b68:	61d3      	str	r3, [r2, #28]
  }
}
 8000b6a:	bf00      	nop
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	e000ed00 	.word	0xe000ed00
 8000b7c:	44020c00 	.word	0x44020c00
 8000b80:	eae2eae3 	.word	0xeae2eae3
 8000b84:	01010280 	.word	0x01010280
 8000b88:	40022000 	.word	0x40022000
 8000b8c:	08192a3b 	.word	0x08192a3b
 8000b90:	4c5d6e7f 	.word	0x4c5d6e7f

08000b94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b94:	480d      	ldr	r0, [pc, #52]	@ (8000bcc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b96:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b98:	f7ff ff80 	bl	8000a9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b9c:	480c      	ldr	r0, [pc, #48]	@ (8000bd0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b9e:	490d      	ldr	r1, [pc, #52]	@ (8000bd4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ba0:	4a0d      	ldr	r2, [pc, #52]	@ (8000bd8 <LoopForever+0xe>)
  movs r3, #0
 8000ba2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ba4:	e002      	b.n	8000bac <LoopCopyDataInit>

08000ba6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ba6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000baa:	3304      	adds	r3, #4

08000bac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bb0:	d3f9      	bcc.n	8000ba6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bb2:	4a0a      	ldr	r2, [pc, #40]	@ (8000bdc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bb4:	4c0a      	ldr	r4, [pc, #40]	@ (8000be0 <LoopForever+0x16>)
  movs r3, #0
 8000bb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb8:	e001      	b.n	8000bbe <LoopFillZerobss>

08000bba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bbc:	3204      	adds	r2, #4

08000bbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bc0:	d3fb      	bcc.n	8000bba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000bc2:	f00a fe35 	bl	800b830 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bc6:	f7ff fb65 	bl	8000294 <main>

08000bca <LoopForever>:

LoopForever:
    b LoopForever
 8000bca:	e7fe      	b.n	8000bca <LoopForever>
  ldr   r0, =_estack
 8000bcc:	20044000 	.word	0x20044000
  ldr r0, =_sdata
 8000bd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bd4:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8000bd8:	0800c944 	.word	0x0800c944
  ldr r2, =_sbss
 8000bdc:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8000be0:	20000dec 	.word	0x20000dec

08000be4 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000be4:	e7fe      	b.n	8000be4 <ADC1_IRQHandler>
	...

08000be8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bec:	2003      	movs	r0, #3
 8000bee:	f000 f98a 	bl	8000f06 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000bf2:	f003 fc85 	bl	8004500 <HAL_RCC_GetSysClockFreq>
 8000bf6:	4602      	mov	r2, r0
 8000bf8:	4b0c      	ldr	r3, [pc, #48]	@ (8000c2c <HAL_Init+0x44>)
 8000bfa:	6a1b      	ldr	r3, [r3, #32]
 8000bfc:	f003 030f 	and.w	r3, r3, #15
 8000c00:	490b      	ldr	r1, [pc, #44]	@ (8000c30 <HAL_Init+0x48>)
 8000c02:	5ccb      	ldrb	r3, [r1, r3]
 8000c04:	fa22 f303 	lsr.w	r3, r2, r3
 8000c08:	4a0a      	ldr	r2, [pc, #40]	@ (8000c34 <HAL_Init+0x4c>)
 8000c0a:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000c0c:	2004      	movs	r0, #4
 8000c0e:	f000 f9cf 	bl	8000fb0 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c12:	200f      	movs	r0, #15
 8000c14:	f000 f810 	bl	8000c38 <HAL_InitTick>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	e002      	b.n	8000c28 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000c22:	f7ff fd95 	bl	8000750 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c26:	2300      	movs	r3, #0
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	44020c00 	.word	0x44020c00
 8000c30:	0800c8e8 	.word	0x0800c8e8
 8000c34:	20000004 	.word	0x20000004

08000c38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8000c40:	2300      	movs	r3, #0
 8000c42:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000c44:	4b33      	ldr	r3, [pc, #204]	@ (8000d14 <HAL_InitTick+0xdc>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d101      	bne.n	8000c50 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	e05c      	b.n	8000d0a <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8000c50:	4b31      	ldr	r3, [pc, #196]	@ (8000d18 <HAL_InitTick+0xe0>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f003 0304 	and.w	r3, r3, #4
 8000c58:	2b04      	cmp	r3, #4
 8000c5a:	d10c      	bne.n	8000c76 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8000c5c:	4b2f      	ldr	r3, [pc, #188]	@ (8000d1c <HAL_InitTick+0xe4>)
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	4b2c      	ldr	r3, [pc, #176]	@ (8000d14 <HAL_InitTick+0xdc>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	4619      	mov	r1, r3
 8000c66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	e037      	b.n	8000ce6 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8000c76:	f000 f9f3 	bl	8001060 <HAL_SYSTICK_GetCLKSourceConfig>
 8000c7a:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	2b02      	cmp	r3, #2
 8000c80:	d023      	beq.n	8000cca <HAL_InitTick+0x92>
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	2b02      	cmp	r3, #2
 8000c86:	d82d      	bhi.n	8000ce4 <HAL_InitTick+0xac>
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d003      	beq.n	8000c96 <HAL_InitTick+0x5e>
 8000c8e:	68bb      	ldr	r3, [r7, #8]
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d00d      	beq.n	8000cb0 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8000c94:	e026      	b.n	8000ce4 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8000c96:	4b21      	ldr	r3, [pc, #132]	@ (8000d1c <HAL_InitTick+0xe4>)
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	4b1e      	ldr	r3, [pc, #120]	@ (8000d14 <HAL_InitTick+0xdc>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8000ca4:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cac:	60fb      	str	r3, [r7, #12]
        break;
 8000cae:	e01a      	b.n	8000ce6 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000cb0:	4b18      	ldr	r3, [pc, #96]	@ (8000d14 <HAL_InitTick+0xdc>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cba:	fbb3 f3f2 	udiv	r3, r3, r2
 8000cbe:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cc6:	60fb      	str	r3, [r7, #12]
        break;
 8000cc8:	e00d      	b.n	8000ce6 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000cca:	4b12      	ldr	r3, [pc, #72]	@ (8000d14 <HAL_InitTick+0xdc>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	461a      	mov	r2, r3
 8000cd0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cd4:	fbb3 f3f2 	udiv	r3, r3, r2
 8000cd8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ce0:	60fb      	str	r3, [r7, #12]
        break;
 8000ce2:	e000      	b.n	8000ce6 <HAL_InitTick+0xae>
        break;
 8000ce4:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8000ce6:	68f8      	ldr	r0, [r7, #12]
 8000ce8:	f000 f940 	bl	8000f6c <HAL_SYSTICK_Config>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	e009      	b.n	8000d0a <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	6879      	ldr	r1, [r7, #4]
 8000cfa:	f04f 30ff 	mov.w	r0, #4294967295
 8000cfe:	f000 f90d 	bl	8000f1c <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8000d02:	4a07      	ldr	r2, [pc, #28]	@ (8000d20 <HAL_InitTick+0xe8>)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000d08:	2300      	movs	r3, #0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3710      	adds	r7, #16
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	2000000c 	.word	0x2000000c
 8000d18:	e000e010 	.word	0xe000e010
 8000d1c:	20000004 	.word	0x20000004
 8000d20:	20000008 	.word	0x20000008

08000d24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d28:	4b06      	ldr	r3, [pc, #24]	@ (8000d44 <HAL_IncTick+0x20>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	4b06      	ldr	r3, [pc, #24]	@ (8000d48 <HAL_IncTick+0x24>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4413      	add	r3, r2
 8000d34:	4a04      	ldr	r2, [pc, #16]	@ (8000d48 <HAL_IncTick+0x24>)
 8000d36:	6013      	str	r3, [r2, #0]
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	2000000c 	.word	0x2000000c
 8000d48:	200009ec 	.word	0x200009ec

08000d4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d50:	4b03      	ldr	r3, [pc, #12]	@ (8000d60 <HAL_GetTick+0x14>)
 8000d52:	681b      	ldr	r3, [r3, #0]
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	200009ec 	.word	0x200009ec

08000d64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d6c:	f7ff ffee 	bl	8000d4c <HAL_GetTick>
 8000d70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d7c:	d005      	beq.n	8000d8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000da8 <HAL_Delay+0x44>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	461a      	mov	r2, r3
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	4413      	add	r3, r2
 8000d88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d8a:	bf00      	nop
 8000d8c:	f7ff ffde 	bl	8000d4c <HAL_GetTick>
 8000d90:	4602      	mov	r2, r0
 8000d92:	68bb      	ldr	r3, [r7, #8]
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	68fa      	ldr	r2, [r7, #12]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d8f7      	bhi.n	8000d8c <HAL_Delay+0x28>
  {
  }
}
 8000d9c:	bf00      	nop
 8000d9e:	bf00      	nop
 8000da0:	3710      	adds	r7, #16
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	2000000c 	.word	0x2000000c

08000dac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	f003 0307 	and.w	r3, r3, #7
 8000dba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8000df0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dc2:	68ba      	ldr	r2, [r7, #8]
 8000dc4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000dc8:	4013      	ands	r3, r2
 8000dca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dd4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000dd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ddc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dde:	4a04      	ldr	r2, [pc, #16]	@ (8000df0 <__NVIC_SetPriorityGrouping+0x44>)
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	60d3      	str	r3, [r2, #12]
}
 8000de4:	bf00      	nop
 8000de6:	3714      	adds	r7, #20
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	e000ed00 	.word	0xe000ed00

08000df4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000df8:	4b04      	ldr	r3, [pc, #16]	@ (8000e0c <__NVIC_GetPriorityGrouping+0x18>)
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	0a1b      	lsrs	r3, r3, #8
 8000dfe:	f003 0307 	and.w	r3, r3, #7
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000e1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	db0b      	blt.n	8000e3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e22:	88fb      	ldrh	r3, [r7, #6]
 8000e24:	f003 021f 	and.w	r2, r3, #31
 8000e28:	4907      	ldr	r1, [pc, #28]	@ (8000e48 <__NVIC_EnableIRQ+0x38>)
 8000e2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e2e:	095b      	lsrs	r3, r3, #5
 8000e30:	2001      	movs	r0, #1
 8000e32:	fa00 f202 	lsl.w	r2, r0, r2
 8000e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e3a:	bf00      	nop
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	e000e100 	.word	0xe000e100

08000e4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	6039      	str	r1, [r7, #0]
 8000e56:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000e58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	db0a      	blt.n	8000e76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	b2da      	uxtb	r2, r3
 8000e64:	490c      	ldr	r1, [pc, #48]	@ (8000e98 <__NVIC_SetPriority+0x4c>)
 8000e66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e6a:	0112      	lsls	r2, r2, #4
 8000e6c:	b2d2      	uxtb	r2, r2
 8000e6e:	440b      	add	r3, r1
 8000e70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e74:	e00a      	b.n	8000e8c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	b2da      	uxtb	r2, r3
 8000e7a:	4908      	ldr	r1, [pc, #32]	@ (8000e9c <__NVIC_SetPriority+0x50>)
 8000e7c:	88fb      	ldrh	r3, [r7, #6]
 8000e7e:	f003 030f 	and.w	r3, r3, #15
 8000e82:	3b04      	subs	r3, #4
 8000e84:	0112      	lsls	r2, r2, #4
 8000e86:	b2d2      	uxtb	r2, r2
 8000e88:	440b      	add	r3, r1
 8000e8a:	761a      	strb	r2, [r3, #24]
}
 8000e8c:	bf00      	nop
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	e000e100 	.word	0xe000e100
 8000e9c:	e000ed00 	.word	0xe000ed00

08000ea0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b089      	sub	sp, #36	@ 0x24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	f003 0307 	and.w	r3, r3, #7
 8000eb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	f1c3 0307 	rsb	r3, r3, #7
 8000eba:	2b04      	cmp	r3, #4
 8000ebc:	bf28      	it	cs
 8000ebe:	2304      	movcs	r3, #4
 8000ec0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	3304      	adds	r3, #4
 8000ec6:	2b06      	cmp	r3, #6
 8000ec8:	d902      	bls.n	8000ed0 <NVIC_EncodePriority+0x30>
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	3b03      	subs	r3, #3
 8000ece:	e000      	b.n	8000ed2 <NVIC_EncodePriority+0x32>
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ed8:	69bb      	ldr	r3, [r7, #24]
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	43da      	mvns	r2, r3
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	401a      	ands	r2, r3
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ee8:	f04f 31ff 	mov.w	r1, #4294967295
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef2:	43d9      	mvns	r1, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef8:	4313      	orrs	r3, r2
         );
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3724      	adds	r7, #36	@ 0x24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr

08000f06 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b082      	sub	sp, #8
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f7ff ff4c 	bl	8000dac <__NVIC_SetPriorityGrouping>
}
 8000f14:	bf00      	nop
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b086      	sub	sp, #24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
 8000f28:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f2a:	f7ff ff63 	bl	8000df4 <__NVIC_GetPriorityGrouping>
 8000f2e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f30:	687a      	ldr	r2, [r7, #4]
 8000f32:	68b9      	ldr	r1, [r7, #8]
 8000f34:	6978      	ldr	r0, [r7, #20]
 8000f36:	f7ff ffb3 	bl	8000ea0 <NVIC_EncodePriority>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f40:	4611      	mov	r1, r2
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff ff82 	bl	8000e4c <__NVIC_SetPriority>
}
 8000f48:	bf00      	nop
 8000f4a:	3718      	adds	r7, #24
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff ff56 	bl	8000e10 <__NVIC_EnableIRQ>
}
 8000f64:	bf00      	nop
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	3b01      	subs	r3, #1
 8000f78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f7c:	d301      	bcc.n	8000f82 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e00d      	b.n	8000f9e <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8000f82:	4a0a      	ldr	r2, [pc, #40]	@ (8000fac <HAL_SYSTICK_Config+0x40>)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	3b01      	subs	r3, #1
 8000f88:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8000f8a:	4b08      	ldr	r3, [pc, #32]	@ (8000fac <HAL_SYSTICK_Config+0x40>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8000f90:	4b06      	ldr	r3, [pc, #24]	@ (8000fac <HAL_SYSTICK_Config+0x40>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a05      	ldr	r2, [pc, #20]	@ (8000fac <HAL_SYSTICK_Config+0x40>)
 8000f96:	f043 0303 	orr.w	r3, r3, #3
 8000f9a:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8000f9c:	2300      	movs	r3, #0
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	e000e010 	.word	0xe000e010

08000fb0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2b04      	cmp	r3, #4
 8000fbc:	d844      	bhi.n	8001048 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8000fbe:	a201      	add	r2, pc, #4	@ (adr r2, 8000fc4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8000fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fc4:	08000fe7 	.word	0x08000fe7
 8000fc8:	08001005 	.word	0x08001005
 8000fcc:	08001027 	.word	0x08001027
 8000fd0:	08001049 	.word	0x08001049
 8000fd4:	08000fd9 	.word	0x08000fd9
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000fd8:	4b1f      	ldr	r3, [pc, #124]	@ (8001058 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a1e      	ldr	r2, [pc, #120]	@ (8001058 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000fde:	f043 0304 	orr.w	r3, r3, #4
 8000fe2:	6013      	str	r3, [r2, #0]
      break;
 8000fe4:	e031      	b.n	800104a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000fe6:	4b1c      	ldr	r3, [pc, #112]	@ (8001058 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a1b      	ldr	r2, [pc, #108]	@ (8001058 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000fec:	f023 0304 	bic.w	r3, r3, #4
 8000ff0:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8000ff2:	4b1a      	ldr	r3, [pc, #104]	@ (800105c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000ff4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000ff8:	4a18      	ldr	r2, [pc, #96]	@ (800105c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000ffa:	f023 030c 	bic.w	r3, r3, #12
 8000ffe:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001002:	e022      	b.n	800104a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001004:	4b14      	ldr	r3, [pc, #80]	@ (8001058 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a13      	ldr	r2, [pc, #76]	@ (8001058 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800100a:	f023 0304 	bic.w	r3, r3, #4
 800100e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8001010:	4b12      	ldr	r3, [pc, #72]	@ (800105c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001012:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001016:	f023 030c 	bic.w	r3, r3, #12
 800101a:	4a10      	ldr	r2, [pc, #64]	@ (800105c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800101c:	f043 0304 	orr.w	r3, r3, #4
 8001020:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001024:	e011      	b.n	800104a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001026:	4b0c      	ldr	r3, [pc, #48]	@ (8001058 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a0b      	ldr	r2, [pc, #44]	@ (8001058 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800102c:	f023 0304 	bic.w	r3, r3, #4
 8001030:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8001032:	4b0a      	ldr	r3, [pc, #40]	@ (800105c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001034:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001038:	f023 030c 	bic.w	r3, r3, #12
 800103c:	4a07      	ldr	r2, [pc, #28]	@ (800105c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800103e:	f043 0308 	orr.w	r3, r3, #8
 8001042:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001046:	e000      	b.n	800104a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001048:	bf00      	nop
  }
}
 800104a:	bf00      	nop
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	e000e010 	.word	0xe000e010
 800105c:	44020c00 	.word	0x44020c00

08001060 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8001066:	4b17      	ldr	r3, [pc, #92]	@ (80010c4 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f003 0304 	and.w	r3, r3, #4
 800106e:	2b00      	cmp	r3, #0
 8001070:	d002      	beq.n	8001078 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8001072:	2304      	movs	r3, #4
 8001074:	607b      	str	r3, [r7, #4]
 8001076:	e01e      	b.n	80010b6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8001078:	4b13      	ldr	r3, [pc, #76]	@ (80010c8 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 800107a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800107e:	f003 030c 	and.w	r3, r3, #12
 8001082:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	2b08      	cmp	r3, #8
 8001088:	d00f      	beq.n	80010aa <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	2b08      	cmp	r3, #8
 800108e:	d80f      	bhi.n	80010b0 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d003      	beq.n	800109e <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	2b04      	cmp	r3, #4
 800109a:	d003      	beq.n	80010a4 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 800109c:	e008      	b.n	80010b0 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800109e:	2300      	movs	r3, #0
 80010a0:	607b      	str	r3, [r7, #4]
        break;
 80010a2:	e008      	b.n	80010b6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80010a4:	2301      	movs	r3, #1
 80010a6:	607b      	str	r3, [r7, #4]
        break;
 80010a8:	e005      	b.n	80010b6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80010aa:	2302      	movs	r3, #2
 80010ac:	607b      	str	r3, [r7, #4]
        break;
 80010ae:	e002      	b.n	80010b6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80010b0:	2300      	movs	r3, #0
 80010b2:	607b      	str	r3, [r7, #4]
        break;
 80010b4:	bf00      	nop
    }
  }
  return systick_source;
 80010b6:	687b      	ldr	r3, [r7, #4]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	e000e010 	.word	0xe000e010
 80010c8:	44020c00 	.word	0x44020c00

080010cc <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d101      	bne.n	80010de <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e147      	b.n	800136e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d106      	bne.n	80010f8 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2200      	movs	r2, #0
 80010ee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f7ff fb34 	bl	8000760 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	699a      	ldr	r2, [r3, #24]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f022 0210 	bic.w	r2, r2, #16
 8001106:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001108:	f7ff fe20 	bl	8000d4c <HAL_GetTick>
 800110c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800110e:	e012      	b.n	8001136 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001110:	f7ff fe1c 	bl	8000d4c <HAL_GetTick>
 8001114:	4602      	mov	r2, r0
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	2b0a      	cmp	r3, #10
 800111c:	d90b      	bls.n	8001136 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001122:	f043 0201 	orr.w	r2, r3, #1
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2203      	movs	r2, #3
 800112e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e11b      	b.n	800136e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	699b      	ldr	r3, [r3, #24]
 800113c:	f003 0308 	and.w	r3, r3, #8
 8001140:	2b08      	cmp	r3, #8
 8001142:	d0e5      	beq.n	8001110 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	699a      	ldr	r2, [r3, #24]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f042 0201 	orr.w	r2, r2, #1
 8001152:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001154:	f7ff fdfa 	bl	8000d4c <HAL_GetTick>
 8001158:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800115a:	e012      	b.n	8001182 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800115c:	f7ff fdf6 	bl	8000d4c <HAL_GetTick>
 8001160:	4602      	mov	r2, r0
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	2b0a      	cmp	r3, #10
 8001168:	d90b      	bls.n	8001182 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800116e:	f043 0201 	orr.w	r2, r3, #1
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2203      	movs	r2, #3
 800117a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e0f5      	b.n	800136e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	f003 0301 	and.w	r3, r3, #1
 800118c:	2b00      	cmp	r3, #0
 800118e:	d0e5      	beq.n	800115c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	699a      	ldr	r2, [r3, #24]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f042 0202 	orr.w	r2, r2, #2
 800119e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a74      	ldr	r2, [pc, #464]	@ (8001378 <HAL_FDCAN_Init+0x2ac>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d103      	bne.n	80011b2 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80011aa:	4a74      	ldr	r2, [pc, #464]	@ (800137c <HAL_FDCAN_Init+0x2b0>)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	7c1b      	ldrb	r3, [r3, #16]
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d108      	bne.n	80011cc <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	699a      	ldr	r2, [r3, #24]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80011c8:	619a      	str	r2, [r3, #24]
 80011ca:	e007      	b.n	80011dc <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	699a      	ldr	r2, [r3, #24]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80011da:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	7c5b      	ldrb	r3, [r3, #17]
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d108      	bne.n	80011f6 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	699a      	ldr	r2, [r3, #24]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80011f2:	619a      	str	r2, [r3, #24]
 80011f4:	e007      	b.n	8001206 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	699a      	ldr	r2, [r3, #24]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001204:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	7c9b      	ldrb	r3, [r3, #18]
 800120a:	2b01      	cmp	r3, #1
 800120c:	d108      	bne.n	8001220 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	699a      	ldr	r2, [r3, #24]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800121c:	619a      	str	r2, [r3, #24]
 800121e:	e007      	b.n	8001230 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	699a      	ldr	r2, [r3, #24]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800122e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	699b      	ldr	r3, [r3, #24]
 8001236:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	689a      	ldr	r2, [r3, #8]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	430a      	orrs	r2, r1
 8001244:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	699a      	ldr	r2, [r3, #24]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8001254:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	691a      	ldr	r2, [r3, #16]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f022 0210 	bic.w	r2, r2, #16
 8001264:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	68db      	ldr	r3, [r3, #12]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d108      	bne.n	8001280 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	699a      	ldr	r2, [r3, #24]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f042 0204 	orr.w	r2, r2, #4
 800127c:	619a      	str	r2, [r3, #24]
 800127e:	e02c      	b.n	80012da <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d028      	beq.n	80012da <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	2b02      	cmp	r3, #2
 800128e:	d01c      	beq.n	80012ca <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	699a      	ldr	r2, [r3, #24]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800129e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	691a      	ldr	r2, [r3, #16]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f042 0210 	orr.w	r2, r2, #16
 80012ae:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	2b03      	cmp	r3, #3
 80012b6:	d110      	bne.n	80012da <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	699a      	ldr	r2, [r3, #24]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f042 0220 	orr.w	r2, r2, #32
 80012c6:	619a      	str	r2, [r3, #24]
 80012c8:	e007      	b.n	80012da <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	699a      	ldr	r2, [r3, #24]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f042 0220 	orr.w	r2, r2, #32
 80012d8:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	699b      	ldr	r3, [r3, #24]
 80012de:	3b01      	subs	r3, #1
 80012e0:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	69db      	ldr	r3, [r3, #28]
 80012e6:	3b01      	subs	r3, #1
 80012e8:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80012ea:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6a1b      	ldr	r3, [r3, #32]
 80012f0:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80012f2:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	695b      	ldr	r3, [r3, #20]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001302:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001304:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800130e:	d115      	bne.n	800133c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001314:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800131a:	3b01      	subs	r3, #1
 800131c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800131e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001324:	3b01      	subs	r3, #1
 8001326:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001328:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001330:	3b01      	subs	r3, #1
 8001332:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001338:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800133a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	430a      	orrs	r2, r1
 800134e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f000 fc44 	bl	8001be0 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2200      	movs	r2, #0
 800135c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2200      	movs	r2, #0
 8001362:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2201      	movs	r2, #1
 8001368:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	4000a400 	.word	0x4000a400
 800137c:	4000a500 	.word	0x4000a500

08001380 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8001380:	b480      	push	{r7}
 8001382:	b087      	sub	sp, #28
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001390:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001392:	7dfb      	ldrb	r3, [r7, #23]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d002      	beq.n	800139e <HAL_FDCAN_ConfigFilter+0x1e>
 8001398:	7dfb      	ldrb	r3, [r7, #23]
 800139a:	2b02      	cmp	r3, #2
 800139c:	d13d      	bne.n	800141a <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d119      	bne.n	80013da <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80013b2:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	691b      	ldr	r3, [r3, #16]
 80013b8:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 80013ba:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80013c0:	4313      	orrs	r3, r2
 80013c2:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	4413      	add	r3, r2
 80013d0:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	e01d      	b.n	8001416 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	68db      	ldr	r3, [r3, #12]
 80013de:	075a      	lsls	r2, r3, #29
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	691b      	ldr	r3, [r3, #16]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	079a      	lsls	r2, r3, #30
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	695b      	ldr	r3, [r3, #20]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	00db      	lsls	r3, r3, #3
 8001400:	4413      	add	r3, r2
 8001402:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	3304      	adds	r3, #4
 800140e:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	68fa      	ldr	r2, [r7, #12]
 8001414:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8001416:	2300      	movs	r3, #0
 8001418:	e006      	b.n	8001428 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800141e:	f043 0202 	orr.w	r2, r3, #2
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
  }
}
 8001428:	4618      	mov	r0, r3
 800142a:	371c      	adds	r7, #28
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8001434:	b480      	push	{r7}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	607a      	str	r2, [r7, #4]
 8001440:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001448:	b2db      	uxtb	r3, r3
 800144a:	2b01      	cmp	r3, #1
 800144c:	d116      	bne.n	800147c <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001456:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	011a      	lsls	r2, r3, #4
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	431a      	orrs	r2, r3
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	431a      	orrs	r2, r3
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	431a      	orrs	r2, r3
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	430a      	orrs	r2, r1
 8001474:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8001478:	2300      	movs	r3, #0
 800147a:	e006      	b.n	800148a <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001480:	f043 0204 	orr.w	r2, r3, #4
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
  }
}
 800148a:	4618      	mov	r0, r3
 800148c:	3714      	adds	r7, #20
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr

08001496 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001496:	b480      	push	{r7}
 8001498:	b083      	sub	sp, #12
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d110      	bne.n	80014cc <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2202      	movs	r2, #2
 80014ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	699a      	ldr	r2, [r3, #24]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f022 0201 	bic.w	r2, r2, #1
 80014c0:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2200      	movs	r2, #0
 80014c6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 80014c8:	2300      	movs	r3, #0
 80014ca:	e006      	b.n	80014da <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014d0:	f043 0204 	orr.w	r2, r3, #4
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
  }
}
 80014da:	4618      	mov	r0, r3
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
	...

080014e8 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b08b      	sub	sp, #44	@ 0x2c
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	607a      	str	r2, [r7, #4]
 80014f4:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80014f6:	2300      	movs	r3, #0
 80014f8:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001500:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8001502:	7efb      	ldrb	r3, [r7, #27]
 8001504:	2b02      	cmp	r3, #2
 8001506:	f040 80e8 	bne.w	80016da <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	2b40      	cmp	r3, #64	@ 0x40
 800150e:	d137      	bne.n	8001580 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001518:	f003 030f 	and.w	r3, r3, #15
 800151c:	2b00      	cmp	r3, #0
 800151e:	d107      	bne.n	8001530 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001524:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e0db      	b.n	80016e8 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001538:	0e1b      	lsrs	r3, r3, #24
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	2b01      	cmp	r3, #1
 8001540:	d10a      	bne.n	8001558 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800154a:	0a5b      	lsrs	r3, r3, #9
 800154c:	f003 0301 	and.w	r3, r3, #1
 8001550:	2b01      	cmp	r3, #1
 8001552:	d101      	bne.n	8001558 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001554:	2301      	movs	r3, #1
 8001556:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001560:	0a1b      	lsrs	r3, r3, #8
 8001562:	f003 0303 	and.w	r3, r3, #3
 8001566:	69fa      	ldr	r2, [r7, #28]
 8001568:	4413      	add	r3, r2
 800156a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8001570:	69fa      	ldr	r2, [r7, #28]
 8001572:	4613      	mov	r3, r2
 8001574:	00db      	lsls	r3, r3, #3
 8001576:	4413      	add	r3, r2
 8001578:	00db      	lsls	r3, r3, #3
 800157a:	440b      	add	r3, r1
 800157c:	627b      	str	r3, [r7, #36]	@ 0x24
 800157e:	e036      	b.n	80015ee <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001588:	f003 030f 	and.w	r3, r3, #15
 800158c:	2b00      	cmp	r3, #0
 800158e:	d107      	bne.n	80015a0 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001594:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e0a3      	b.n	80016e8 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80015a8:	0e1b      	lsrs	r3, r3, #24
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d10a      	bne.n	80015c8 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80015ba:	0a1b      	lsrs	r3, r3, #8
 80015bc:	f003 0301 	and.w	r3, r3, #1
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d101      	bne.n	80015c8 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80015c4:	2301      	movs	r3, #1
 80015c6:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80015d0:	0a1b      	lsrs	r3, r3, #8
 80015d2:	f003 0303 	and.w	r3, r3, #3
 80015d6:	69fa      	ldr	r2, [r7, #28]
 80015d8:	4413      	add	r3, r2
 80015da:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80015e0:	69fa      	ldr	r2, [r7, #28]
 80015e2:	4613      	mov	r3, r2
 80015e4:	00db      	lsls	r3, r3, #3
 80015e6:	4413      	add	r3, r2
 80015e8:	00db      	lsls	r3, r3, #3
 80015ea:	440b      	add	r3, r1
 80015ec:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80015ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d107      	bne.n	8001612 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8001602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	0c9b      	lsrs	r3, r3, #18
 8001608:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	e005      	b.n	800161e <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800161e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800162a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001638:	3304      	adds	r3, #4
 800163a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800163c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	b29a      	uxth	r2, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8001646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	0c1b      	lsrs	r3, r3, #16
 800164c:	f003 020f 	and.w	r2, r3, #15
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800166c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	0e1b      	lsrs	r3, r3, #24
 8001672:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800167a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	0fda      	lsrs	r2, r3, #31
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001686:	3304      	adds	r3, #4
 8001688:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800168a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800168c:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800168e:	2300      	movs	r3, #0
 8001690:	623b      	str	r3, [r7, #32]
 8001692:	e00a      	b.n	80016aa <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001694:	697a      	ldr	r2, [r7, #20]
 8001696:	6a3b      	ldr	r3, [r7, #32]
 8001698:	441a      	add	r2, r3
 800169a:	6839      	ldr	r1, [r7, #0]
 800169c:	6a3b      	ldr	r3, [r7, #32]
 800169e:	440b      	add	r3, r1
 80016a0:	7812      	ldrb	r2, [r2, #0]
 80016a2:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80016a4:	6a3b      	ldr	r3, [r7, #32]
 80016a6:	3301      	adds	r3, #1
 80016a8:	623b      	str	r3, [r7, #32]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	4a11      	ldr	r2, [pc, #68]	@ (80016f4 <HAL_FDCAN_GetRxMessage+0x20c>)
 80016b0:	5cd3      	ldrb	r3, [r2, r3]
 80016b2:	461a      	mov	r2, r3
 80016b4:	6a3b      	ldr	r3, [r7, #32]
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d3ec      	bcc.n	8001694 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	2b40      	cmp	r3, #64	@ 0x40
 80016be:	d105      	bne.n	80016cc <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	69fa      	ldr	r2, [r7, #28]
 80016c6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 80016ca:	e004      	b.n	80016d6 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	69fa      	ldr	r2, [r7, #28]
 80016d2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 80016d6:	2300      	movs	r3, #0
 80016d8:	e006      	b.n	80016e8 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016de:	f043 0208 	orr.w	r2, r3, #8
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
  }
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	372c      	adds	r7, #44	@ 0x2c
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	0800c8f8 	.word	0x0800c8f8

080016f8 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b087      	sub	sp, #28
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	60b9      	str	r1, [r7, #8]
 8001702:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800170a:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800170c:	7dfb      	ldrb	r3, [r7, #23]
 800170e:	2b01      	cmp	r3, #1
 8001710:	d003      	beq.n	800171a <HAL_FDCAN_ActivateNotification+0x22>
 8001712:	7dfb      	ldrb	r3, [r7, #23]
 8001714:	2b02      	cmp	r3, #2
 8001716:	f040 80c8 	bne.w	80018aa <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001720:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	f003 0307 	and.w	r3, r3, #7
 8001728:	2b00      	cmp	r3, #0
 800172a:	d004      	beq.n	8001736 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	2b00      	cmp	r3, #0
 8001734:	d03b      	beq.n	80017ae <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 800173c:	2b00      	cmp	r3, #0
 800173e:	d004      	beq.n	800174a <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	2b00      	cmp	r3, #0
 8001748:	d031      	beq.n	80017ae <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001750:	2b00      	cmp	r3, #0
 8001752:	d004      	beq.n	800175e <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	f003 0304 	and.w	r3, r3, #4
 800175a:	2b00      	cmp	r3, #0
 800175c:	d027      	beq.n	80017ae <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001764:	2b00      	cmp	r3, #0
 8001766:	d004      	beq.n	8001772 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	f003 0308 	and.w	r3, r3, #8
 800176e:	2b00      	cmp	r3, #0
 8001770:	d01d      	beq.n	80017ae <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001778:	2b00      	cmp	r3, #0
 800177a:	d004      	beq.n	8001786 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	f003 0310 	and.w	r3, r3, #16
 8001782:	2b00      	cmp	r3, #0
 8001784:	d013      	beq.n	80017ae <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800178c:	2b00      	cmp	r3, #0
 800178e:	d004      	beq.n	800179a <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	f003 0320 	and.w	r3, r3, #32
 8001796:	2b00      	cmp	r3, #0
 8001798:	d009      	beq.n	80017ae <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d00c      	beq.n	80017be <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d107      	bne.n	80017be <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f042 0201 	orr.w	r2, r2, #1
 80017bc:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	f003 0307 	and.w	r3, r3, #7
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d004      	beq.n	80017d2 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d13b      	bne.n	800184a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d004      	beq.n	80017e6 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d131      	bne.n	800184a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d004      	beq.n	80017fa <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	f003 0304 	and.w	r3, r3, #4
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d127      	bne.n	800184a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001800:	2b00      	cmp	r3, #0
 8001802:	d004      	beq.n	800180e <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	f003 0308 	and.w	r3, r3, #8
 800180a:	2b00      	cmp	r3, #0
 800180c:	d11d      	bne.n	800184a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001814:	2b00      	cmp	r3, #0
 8001816:	d004      	beq.n	8001822 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	f003 0310 	and.w	r3, r3, #16
 800181e:	2b00      	cmp	r3, #0
 8001820:	d113      	bne.n	800184a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001828:	2b00      	cmp	r3, #0
 800182a:	d004      	beq.n	8001836 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	f003 0320 	and.w	r3, r3, #32
 8001832:	2b00      	cmp	r3, #0
 8001834:	d109      	bne.n	800184a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800183c:	2b00      	cmp	r3, #0
 800183e:	d00c      	beq.n	800185a <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001846:	2b00      	cmp	r3, #0
 8001848:	d007      	beq.n	800185a <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f042 0202 	orr.w	r2, r2, #2
 8001858:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001860:	2b00      	cmp	r3, #0
 8001862:	d009      	beq.n	8001878 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	430a      	orrs	r2, r1
 8001874:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800187e:	2b00      	cmp	r3, #0
 8001880:	d009      	beq.n	8001896 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	430a      	orrs	r2, r1
 8001892:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	68ba      	ldr	r2, [r7, #8]
 80018a2:	430a      	orrs	r2, r1
 80018a4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 80018a6:	2300      	movs	r3, #0
 80018a8:	e006      	b.n	80018b8 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018ae:	f043 0202 	orr.w	r2, r3, #2
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
  }
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	371c      	adds	r7, #28
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b08c      	sub	sp, #48	@ 0x30
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018d2:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 80018d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018e0:	4013      	ands	r3, r2
 80018e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018ea:	f003 0307 	and.w	r3, r3, #7
 80018ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80018f8:	4013      	ands	r3, r2
 80018fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001902:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001906:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800190e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001910:	4013      	ands	r3, r2
 8001912:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800191a:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 800191e:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001926:	6a3a      	ldr	r2, [r7, #32]
 8001928:	4013      	ands	r3, r2
 800192a:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001932:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001936:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800193e:	69fa      	ldr	r2, [r7, #28]
 8001940:	4013      	ands	r3, r2
 8001942:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800194a:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001952:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800195a:	2b00      	cmp	r3, #0
 800195c:	d00b      	beq.n	8001976 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001964:	2b00      	cmp	r3, #0
 8001966:	d006      	beq.n	8001976 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2240      	movs	r2, #64	@ 0x40
 800196e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f000 f916 	bl	8001ba2 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800197c:	2b00      	cmp	r3, #0
 800197e:	d019      	beq.n	80019b4 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001986:	2b00      	cmp	r3, #0
 8001988:	d014      	beq.n	80019b4 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001992:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800199c:	693a      	ldr	r2, [r7, #16]
 800199e:	4013      	ands	r3, r2
 80019a0:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019aa:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80019ac:	6939      	ldr	r1, [r7, #16]
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f000 f8d8 	bl	8001b64 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80019b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d007      	beq.n	80019ca <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80019c0:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80019c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f000 f8a2 	bl	8001b0e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80019ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d007      	beq.n	80019e0 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80019d6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80019d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f7fe fe94 	bl	8000708 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80019e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d007      	beq.n	80019f6 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019ec:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80019ee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f000 f897 	bl	8001b24 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d00c      	beq.n	8001a1a <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d007      	beq.n	8001a1a <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a12:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f000 f890 	bl	8001b3a <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d018      	beq.n	8001a56 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d013      	beq.n	8001a56 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001a36:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001a40:	68fa      	ldr	r2, [r7, #12]
 8001a42:	4013      	ands	r3, r2
 8001a44:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2280      	movs	r2, #128	@ 0x80
 8001a4c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001a4e:	68f9      	ldr	r1, [r7, #12]
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f000 f87c 	bl	8001b4e <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d00c      	beq.n	8001a7a <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d007      	beq.n	8001a7a <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a72:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f000 f880 	bl	8001b7a <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d00c      	beq.n	8001a9e <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d007      	beq.n	8001a9e <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001a96:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f000 f878 	bl	8001b8e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d00f      	beq.n	8001ac8 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d00a      	beq.n	8001ac8 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001aba:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ac0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d007      	beq.n	8001ade <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	69fa      	ldr	r2, [r7, #28]
 8001ad4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001ad6:	69f9      	ldr	r1, [r7, #28]
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f000 f876 	bl	8001bca <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001ade:	6a3b      	ldr	r3, [r7, #32]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d009      	beq.n	8001af8 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	6a3a      	ldr	r2, [r7, #32]
 8001aea:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001af0:	6a3b      	ldr	r3, [r7, #32]
 8001af2:	431a      	orrs	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d002      	beq.n	8001b06 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f000 f858 	bl	8001bb6 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001b06:	bf00      	nop
 8001b08:	3730      	adds	r7, #48	@ 0x30
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	b083      	sub	sp, #12
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
 8001b16:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001b18:	bf00      	nop
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001b2e:	bf00      	nop
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr

08001b3a <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	b083      	sub	sp, #12
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001b42:	bf00      	nop
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr

08001b4e <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	b083      	sub	sp, #12
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
 8001b56:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001b58:	bf00      	nop
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001b6e:	bf00      	nop
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr

08001b7a <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	b083      	sub	sp, #12
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001b82:	bf00      	nop
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	b083      	sub	sp, #12
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001b96:	bf00      	nop
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr

08001ba2 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	b083      	sub	sp, #12
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001baa:	bf00      	nop
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	b083      	sub	sp, #12
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr

08001bca <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	b083      	sub	sp, #12
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
 8001bd2:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001bd4:	bf00      	nop
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b085      	sub	sp, #20
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001be8:	4b2c      	ldr	r3, [pc, #176]	@ (8001c9c <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 8001bea:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a2b      	ldr	r2, [pc, #172]	@ (8001ca0 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d103      	bne.n	8001bfe <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001bfc:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	68ba      	ldr	r2, [r7, #8]
 8001c02:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c0c:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c14:	041a      	lsls	r2, r3, #16
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	430a      	orrs	r2, r1
 8001c1c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c32:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c3a:	061a      	lsls	r2, r3, #24
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	430a      	orrs	r2, r1
 8001c42:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	60fb      	str	r3, [r7, #12]
 8001c72:	e005      	b.n	8001c80 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2200      	movs	r2, #0
 8001c78:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	3304      	adds	r3, #4
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001c86:	68fa      	ldr	r2, [r7, #12]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d3f3      	bcc.n	8001c74 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 8001c8c:	bf00      	nop
 8001c8e:	bf00      	nop
 8001c90:	3714      	adds	r7, #20
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	4000ac00 	.word	0x4000ac00
 8001ca0:	4000a800 	.word	0x4000a800

08001ca4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b087      	sub	sp, #28
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001cb2:	e136      	b.n	8001f22 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	2101      	movs	r1, #1
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	f000 8128 	beq.w	8001f1c <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d003      	beq.n	8001cdc <HAL_GPIO_Init+0x38>
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	2b12      	cmp	r3, #18
 8001cda:	d125      	bne.n	8001d28 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	08da      	lsrs	r2, r3, #3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	3208      	adds	r2, #8
 8001ce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ce8:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	f003 0307 	and.w	r3, r3, #7
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	220f      	movs	r2, #15
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	697a      	ldr	r2, [r7, #20]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	691b      	ldr	r3, [r3, #16]
 8001d04:	f003 020f 	and.w	r2, r3, #15
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	f003 0307 	and.w	r3, r3, #7
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	697a      	ldr	r2, [r7, #20]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	08da      	lsrs	r2, r3, #3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	3208      	adds	r2, #8
 8001d22:	6979      	ldr	r1, [r7, #20]
 8001d24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	2203      	movs	r2, #3
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	697a      	ldr	r2, [r7, #20]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f003 0203 	and.w	r2, r3, #3
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	697a      	ldr	r2, [r7, #20]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	697a      	ldr	r2, [r7, #20]
 8001d5a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d00b      	beq.n	8001d7c <HAL_GPIO_Init+0xd8>
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d007      	beq.n	8001d7c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d70:	2b11      	cmp	r3, #17
 8001d72:	d003      	beq.n	8001d7c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	2b12      	cmp	r3, #18
 8001d7a:	d130      	bne.n	8001dde <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	2203      	movs	r2, #3
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	697a      	ldr	r2, [r7, #20]
 8001d90:	4013      	ands	r3, r2
 8001d92:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	68da      	ldr	r2, [r3, #12]
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	697a      	ldr	r2, [r7, #20]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	697a      	ldr	r2, [r7, #20]
 8001daa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001db2:	2201      	movs	r2, #1
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	697a      	ldr	r2, [r7, #20]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	091b      	lsrs	r3, r3, #4
 8001dc8:	f003 0201 	and.w	r2, r3, #1
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	697a      	ldr	r2, [r7, #20]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	697a      	ldr	r2, [r7, #20]
 8001ddc:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	2b03      	cmp	r3, #3
 8001de4:	d017      	beq.n	8001e16 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	2203      	movs	r2, #3
 8001df2:	fa02 f303 	lsl.w	r3, r2, r3
 8001df6:	43db      	mvns	r3, r3
 8001df8:	697a      	ldr	r2, [r7, #20]
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	689a      	ldr	r2, [r3, #8]
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0a:	697a      	ldr	r2, [r7, #20]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	697a      	ldr	r2, [r7, #20]
 8001e14:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d07c      	beq.n	8001f1c <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001e22:	4a47      	ldr	r2, [pc, #284]	@ (8001f40 <HAL_GPIO_Init+0x29c>)
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	089b      	lsrs	r3, r3, #2
 8001e28:	3318      	adds	r3, #24
 8001e2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e2e:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	f003 0303 	and.w	r3, r3, #3
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	220f      	movs	r2, #15
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	697a      	ldr	r2, [r7, #20]
 8001e42:	4013      	ands	r3, r2
 8001e44:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	0a9a      	lsrs	r2, r3, #10
 8001e4a:	4b3e      	ldr	r3, [pc, #248]	@ (8001f44 <HAL_GPIO_Init+0x2a0>)
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	f002 0203 	and.w	r2, r2, #3
 8001e54:	00d2      	lsls	r2, r2, #3
 8001e56:	4093      	lsls	r3, r2
 8001e58:	697a      	ldr	r2, [r7, #20]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001e5e:	4938      	ldr	r1, [pc, #224]	@ (8001f40 <HAL_GPIO_Init+0x29c>)
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	089b      	lsrs	r3, r3, #2
 8001e64:	3318      	adds	r3, #24
 8001e66:	697a      	ldr	r2, [r7, #20]
 8001e68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001e6c:	4b34      	ldr	r3, [pc, #208]	@ (8001f40 <HAL_GPIO_Init+0x29c>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	43db      	mvns	r3, r3
 8001e76:	697a      	ldr	r2, [r7, #20]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d003      	beq.n	8001e90 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8001e88:	697a      	ldr	r2, [r7, #20]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001e90:	4a2b      	ldr	r2, [pc, #172]	@ (8001f40 <HAL_GPIO_Init+0x29c>)
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001e96:	4b2a      	ldr	r3, [pc, #168]	@ (8001f40 <HAL_GPIO_Init+0x29c>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	43db      	mvns	r3, r3
 8001ea0:	697a      	ldr	r2, [r7, #20]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d003      	beq.n	8001eba <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8001eb2:	697a      	ldr	r2, [r7, #20]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001eba:	4a21      	ldr	r2, [pc, #132]	@ (8001f40 <HAL_GPIO_Init+0x29c>)
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001ec0:	4b1f      	ldr	r3, [pc, #124]	@ (8001f40 <HAL_GPIO_Init+0x29c>)
 8001ec2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001ec6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	43db      	mvns	r3, r3
 8001ecc:	697a      	ldr	r2, [r7, #20]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d003      	beq.n	8001ee6 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8001ede:	697a      	ldr	r2, [r7, #20]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001ee6:	4a16      	ldr	r2, [pc, #88]	@ (8001f40 <HAL_GPIO_Init+0x29c>)
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8001eee:	4b14      	ldr	r3, [pc, #80]	@ (8001f40 <HAL_GPIO_Init+0x29c>)
 8001ef0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ef4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	697a      	ldr	r2, [r7, #20]
 8001efc:	4013      	ands	r3, r2
 8001efe:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d003      	beq.n	8001f14 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8001f0c:	697a      	ldr	r2, [r7, #20]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001f14:	4a0a      	ldr	r2, [pc, #40]	@ (8001f40 <HAL_GPIO_Init+0x29c>)
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	fa22 f303 	lsr.w	r3, r2, r3
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	f47f aec1 	bne.w	8001cb4 <HAL_GPIO_Init+0x10>
  }
}
 8001f32:	bf00      	nop
 8001f34:	bf00      	nop
 8001f36:	371c      	adds	r7, #28
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	44022000 	.word	0x44022000
 8001f44:	002f7f7f 	.word	0x002f7f7f

08001f48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	460b      	mov	r3, r1
 8001f52:	807b      	strh	r3, [r7, #2]
 8001f54:	4613      	mov	r3, r2
 8001f56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f58:	787b      	ldrb	r3, [r7, #1]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d003      	beq.n	8001f66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f5e:	887a      	ldrh	r2, [r7, #2]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f64:	e002      	b.n	8001f6c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f66:	887a      	ldrh	r2, [r7, #2]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <PCD_GET_EP_RX_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_RX_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	460b      	mov	r3, r1
 8001f82:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8001f84:	230a      	movs	r3, #10
 8001f86:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8001f88:	e002      	b.n	8001f90 <PCD_GET_EP_RX_CNT+0x18>
  {
    count--;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	3b01      	subs	r3, #1
 8001f8e:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d1f9      	bne.n	8001f8a <PCD_GET_EP_RX_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_RX_CNT((Instance), (bEpNum));
 8001f96:	887b      	ldrh	r3, [r7, #2]
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001f9e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	0c1b      	lsrs	r3, r3, #16
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fac:	b29b      	uxth	r3, r3
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3714      	adds	r7, #20
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr

08001fba <PCD_GET_EP_DBUF0_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF0_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	b085      	sub	sp, #20
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8001fc6:	230a      	movs	r3, #10
 8001fc8:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8001fca:	e002      	b.n	8001fd2 <PCD_GET_EP_DBUF0_CNT+0x18>
  {
    count--;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	3b01      	subs	r3, #1
 8001fd0:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d1f9      	bne.n	8001fcc <PCD_GET_EP_DBUF0_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF0_CNT((Instance), (bEpNum));
 8001fd8:	887b      	ldrh	r3, [r7, #2]
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001fe0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	0c1b      	lsrs	r3, r3, #16
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fee:	b29b      	uxth	r3, r3
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3714      	adds	r7, #20
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <PCD_GET_EP_DBUF1_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF1_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	460b      	mov	r3, r1
 8002006:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8002008:	230a      	movs	r3, #10
 800200a:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 800200c:	e002      	b.n	8002014 <PCD_GET_EP_DBUF1_CNT+0x18>
  {
    count--;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	3b01      	subs	r3, #1
 8002012:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d1f9      	bne.n	800200e <PCD_GET_EP_DBUF1_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF1_CNT((Instance), (bEpNum));
 800201a:	887b      	ldrh	r3, [r7, #2]
 800201c:	00db      	lsls	r3, r3, #3
 800201e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002022:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	0c1b      	lsrs	r3, r3, #16
 800202a:	b29b      	uxth	r3, r3
 800202c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002030:	b29b      	uxth	r3, r3
}
 8002032:	4618      	mov	r0, r3
 8002034:	3714      	adds	r7, #20
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b086      	sub	sp, #24
 8002042:	af02      	add	r7, sp, #8
 8002044:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d101      	bne.n	8002050 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e0c3      	b.n	80021d8 <HAL_PCD_Init+0x19a>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f893 3295 	ldrb.w	r3, [r3, #661]	@ 0x295
 8002056:	b2db      	uxtb	r3, r3
 8002058:	2b00      	cmp	r3, #0
 800205a:	d106      	bne.n	800206a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f7fe fbed 	bl	8000844 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2203      	movs	r2, #3
 800206e:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4618      	mov	r0, r3
 8002078:	f003 fe8e 	bl	8005d98 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800207c:	2300      	movs	r3, #0
 800207e:	73fb      	strb	r3, [r7, #15]
 8002080:	e03f      	b.n	8002102 <HAL_PCD_Init+0xc4>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002082:	7bfa      	ldrb	r2, [r7, #15]
 8002084:	6879      	ldr	r1, [r7, #4]
 8002086:	4613      	mov	r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	4413      	add	r3, r2
 800208c:	00db      	lsls	r3, r3, #3
 800208e:	440b      	add	r3, r1
 8002090:	3315      	adds	r3, #21
 8002092:	2201      	movs	r2, #1
 8002094:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002096:	7bfa      	ldrb	r2, [r7, #15]
 8002098:	6879      	ldr	r1, [r7, #4]
 800209a:	4613      	mov	r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	4413      	add	r3, r2
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	440b      	add	r3, r1
 80020a4:	3314      	adds	r3, #20
 80020a6:	7bfa      	ldrb	r2, [r7, #15]
 80020a8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80020aa:	7bfa      	ldrb	r2, [r7, #15]
 80020ac:	6879      	ldr	r1, [r7, #4]
 80020ae:	4613      	mov	r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	4413      	add	r3, r2
 80020b4:	00db      	lsls	r3, r3, #3
 80020b6:	440b      	add	r3, r1
 80020b8:	3317      	adds	r3, #23
 80020ba:	2200      	movs	r2, #0
 80020bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80020be:	7bfa      	ldrb	r2, [r7, #15]
 80020c0:	6879      	ldr	r1, [r7, #4]
 80020c2:	4613      	mov	r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	4413      	add	r3, r2
 80020c8:	00db      	lsls	r3, r3, #3
 80020ca:	440b      	add	r3, r1
 80020cc:	3324      	adds	r3, #36	@ 0x24
 80020ce:	2200      	movs	r2, #0
 80020d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80020d2:	7bfa      	ldrb	r2, [r7, #15]
 80020d4:	6879      	ldr	r1, [r7, #4]
 80020d6:	4613      	mov	r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	4413      	add	r3, r2
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	440b      	add	r3, r1
 80020e0:	3328      	adds	r3, #40	@ 0x28
 80020e2:	2200      	movs	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80020e6:	7bfb      	ldrb	r3, [r7, #15]
 80020e8:	6879      	ldr	r1, [r7, #4]
 80020ea:	1c5a      	adds	r2, r3, #1
 80020ec:	4613      	mov	r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	4413      	add	r3, r2
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	440b      	add	r3, r1
 80020f6:	3304      	adds	r3, #4
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020fc:	7bfb      	ldrb	r3, [r7, #15]
 80020fe:	3301      	adds	r3, #1
 8002100:	73fb      	strb	r3, [r7, #15]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	791b      	ldrb	r3, [r3, #4]
 8002106:	7bfa      	ldrb	r2, [r7, #15]
 8002108:	429a      	cmp	r2, r3
 800210a:	d3ba      	bcc.n	8002082 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800210c:	2300      	movs	r3, #0
 800210e:	73fb      	strb	r3, [r7, #15]
 8002110:	e044      	b.n	800219c <HAL_PCD_Init+0x15e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002112:	7bfa      	ldrb	r2, [r7, #15]
 8002114:	6879      	ldr	r1, [r7, #4]
 8002116:	4613      	mov	r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	4413      	add	r3, r2
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	440b      	add	r3, r1
 8002120:	f203 1355 	addw	r3, r3, #341	@ 0x155
 8002124:	2200      	movs	r2, #0
 8002126:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002128:	7bfa      	ldrb	r2, [r7, #15]
 800212a:	6879      	ldr	r1, [r7, #4]
 800212c:	4613      	mov	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4413      	add	r3, r2
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	440b      	add	r3, r1
 8002136:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800213a:	7bfa      	ldrb	r2, [r7, #15]
 800213c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800213e:	7bfa      	ldrb	r2, [r7, #15]
 8002140:	6879      	ldr	r1, [r7, #4]
 8002142:	4613      	mov	r3, r2
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	4413      	add	r3, r2
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	440b      	add	r3, r1
 800214c:	f203 1357 	addw	r3, r3, #343	@ 0x157
 8002150:	2200      	movs	r2, #0
 8002152:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002154:	7bfa      	ldrb	r2, [r7, #15]
 8002156:	6879      	ldr	r1, [r7, #4]
 8002158:	4613      	mov	r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	4413      	add	r3, r2
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	440b      	add	r3, r1
 8002162:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002166:	2200      	movs	r2, #0
 8002168:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800216a:	7bfa      	ldrb	r2, [r7, #15]
 800216c:	6879      	ldr	r1, [r7, #4]
 800216e:	4613      	mov	r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	4413      	add	r3, r2
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	440b      	add	r3, r1
 8002178:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002180:	7bfa      	ldrb	r2, [r7, #15]
 8002182:	6879      	ldr	r1, [r7, #4]
 8002184:	4613      	mov	r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	4413      	add	r3, r2
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	440b      	add	r3, r1
 800218e:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8002192:	2200      	movs	r2, #0
 8002194:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002196:	7bfb      	ldrb	r3, [r7, #15]
 8002198:	3301      	adds	r3, #1
 800219a:	73fb      	strb	r3, [r7, #15]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	791b      	ldrb	r3, [r3, #4]
 80021a0:	7bfa      	ldrb	r2, [r7, #15]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d3b5      	bcc.n	8002112 <HAL_PCD_Init+0xd4>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6818      	ldr	r0, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	7c1a      	ldrb	r2, [r3, #16]
 80021ae:	f88d 2000 	strb.w	r2, [sp]
 80021b2:	3304      	adds	r3, #4
 80021b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021b6:	f003 fe27 	bl	8005e08 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	7b1b      	ldrb	r3, [r3, #12]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d102      	bne.n	80021d6 <HAL_PCD_Init+0x198>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f001 fb66 	bl	80038a2 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80021d6:	2300      	movs	r3, #0
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3710      	adds	r7, #16
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d101      	bne.n	80021f6 <HAL_PCD_Start+0x16>
 80021f2:	2302      	movs	r3, #2
 80021f4:	e012      	b.n	800221c <HAL_PCD_Start+0x3c>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2201      	movs	r2, #1
 80021fa:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  __HAL_PCD_ENABLE(hpcd);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4618      	mov	r0, r3
 8002204:	f003 fdb4 	bl	8005d70 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4618      	mov	r0, r3
 800220e:	f005 fc60 	bl	8007ad2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	3708      	adds	r7, #8
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4618      	mov	r0, r3
 8002232:	f005 fc5f 	bl	8007af4 <USB_ReadInterrupts>
 8002236:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d003      	beq.n	800224a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f000 faf2 	bl	800282c <PCD_EP_ISR_Handler>

    return;
 8002248:	e0de      	b.n	8002408 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002250:	2b00      	cmp	r3, #0
 8002252:	d010      	beq.n	8002276 <HAL_PCD_IRQHandler+0x52>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	f64f 33ff 	movw	r3, #64511	@ 0xfbff
 8002262:	400b      	ands	r3, r1
 8002264:	6453      	str	r3, [r2, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f007 faae 	bl	80097c8 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800226c:	2100      	movs	r1, #0
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f000 f8e1 	bl	8002436 <HAL_PCD_SetAddress>

    return;
 8002274:	e0c8      	b.n	8002408 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d009      	beq.n	8002294 <HAL_PCD_IRQHandler+0x70>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	f64b 73ff 	movw	r3, #49151	@ 0xbfff
 800228e:	400b      	ands	r3, r1
 8002290:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8002292:	e0b9      	b.n	8002408 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d009      	beq.n	80022b2 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	f64d 73ff 	movw	r3, #57343	@ 0xdfff
 80022ac:	400b      	ands	r3, r1
 80022ae:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 80022b0:	e0aa      	b.n	8002408 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d029      	beq.n	8002310 <HAL_PCD_IRQHandler+0xec>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPRDY);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f022 0204 	bic.w	r2, r2, #4
 80022ca:	641a      	str	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPEN);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f022 0208 	bic.w	r2, r2, #8
 80022da:	641a      	str	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d107      	bne.n	80022f6 <HAL_PCD_IRQHandler+0xd2>
    {
      hpcd->LPM_State = LPM_L0;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80022ee:	2100      	movs	r1, #0
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f001 faf8 	bl	80038e6 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 f893 	bl	8002422 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 800230a:	400b      	ands	r3, r1
 800230c:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 800230e:	e07b      	b.n	8002408 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002316:	2b00      	cmp	r3, #0
 8002318:	d01c      	beq.n	8002354 <HAL_PCD_IRQHandler+0x130>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f042 0208 	orr.w	r2, r2, #8
 8002328:	641a      	str	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	f24f 73ff 	movw	r3, #63487	@ 0xf7ff
 8002338:	400b      	ands	r3, r1
 800233a:	6453      	str	r3, [r2, #68]	@ 0x44

    hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f042 0204 	orr.w	r2, r2, #4
 800234a:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f000 f85e 	bl	800240e <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002352:	e059      	b.n	8002408 <HAL_PCD_IRQHandler+0x1e4>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800235a:	2b00      	cmp	r3, #0
 800235c:	d033      	beq.n	80023c6 <HAL_PCD_IRQHandler+0x1a2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	f64f 737f 	movw	r3, #65407	@ 0xff7f
 800236c:	400b      	ands	r3, r1
 800236e:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 8002376:	2b00      	cmp	r3, #0
 8002378:	d121      	bne.n	80023be <HAL_PCD_IRQHandler+0x19a>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f042 0204 	orr.w	r2, r2, #4
 8002388:	641a      	str	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f042 0208 	orr.w	r2, r2, #8
 8002398:	641a      	str	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2201      	movs	r2, #1
 800239e:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023a8:	089b      	lsrs	r3, r3, #2
 80023aa:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80023b4:	2101      	movs	r1, #1
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f001 fa95 	bl	80038e6 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80023bc:	e024      	b.n	8002408 <HAL_PCD_IRQHandler+0x1e4>
      HAL_PCD_SuspendCallback(hpcd);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f000 f825 	bl	800240e <HAL_PCD_SuspendCallback>
    return;
 80023c4:	e020      	b.n	8002408 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d00c      	beq.n	80023ea <HAL_PCD_IRQHandler+0x1c6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	f64f 53ff 	movw	r3, #65023	@ 0xfdff
 80023de:	400b      	ands	r3, r1
 80023e0:	6453      	str	r3, [r2, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f007 f9e2 	bl	80097ac <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80023e8:	e00e      	b.n	8002408 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d009      	beq.n	8002408 <HAL_PCD_IRQHandler+0x1e4>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8002402:	400b      	ands	r3, r1
 8002404:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8002406:	bf00      	nop
  }
}
 8002408:	3710      	adds	r7, #16
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 800240e:	b480      	push	{r7}
 8002410:	b083      	sub	sp, #12
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8002416:	bf00      	nop
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8002422:	b480      	push	{r7}
 8002424:	b083      	sub	sp, #12
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 800242a:	bf00      	nop
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr

08002436 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b082      	sub	sp, #8
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
 800243e:	460b      	mov	r3, r1
 8002440:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8002448:	2b01      	cmp	r3, #1
 800244a:	d101      	bne.n	8002450 <HAL_PCD_SetAddress+0x1a>
 800244c:	2302      	movs	r3, #2
 800244e:	e012      	b.n	8002476 <HAL_PCD_SetAddress+0x40>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  hpcd->USB_Address = address;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	78fa      	ldrb	r2, [r7, #3]
 800245c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	78fa      	ldrb	r2, [r7, #3]
 8002464:	4611      	mov	r1, r2
 8002466:	4618      	mov	r0, r3
 8002468:	f005 fb20 	bl	8007aac <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b084      	sub	sp, #16
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
 8002486:	4608      	mov	r0, r1
 8002488:	4611      	mov	r1, r2
 800248a:	461a      	mov	r2, r3
 800248c:	4603      	mov	r3, r0
 800248e:	70fb      	strb	r3, [r7, #3]
 8002490:	460b      	mov	r3, r1
 8002492:	803b      	strh	r3, [r7, #0]
 8002494:	4613      	mov	r3, r2
 8002496:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002498:	2300      	movs	r3, #0
 800249a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800249c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	da0f      	bge.n	80024c4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024a4:	78fb      	ldrb	r3, [r7, #3]
 80024a6:	f003 0207 	and.w	r2, r3, #7
 80024aa:	4613      	mov	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	4413      	add	r3, r2
 80024b0:	00db      	lsls	r3, r3, #3
 80024b2:	3310      	adds	r3, #16
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	4413      	add	r3, r2
 80024b8:	3304      	adds	r3, #4
 80024ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2201      	movs	r2, #1
 80024c0:	705a      	strb	r2, [r3, #1]
 80024c2:	e00f      	b.n	80024e4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024c4:	78fb      	ldrb	r3, [r7, #3]
 80024c6:	f003 0207 	and.w	r2, r3, #7
 80024ca:	4613      	mov	r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	4413      	add	r3, r2
 80024d0:	00db      	lsls	r3, r3, #3
 80024d2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	4413      	add	r3, r2
 80024da:	3304      	adds	r3, #4
 80024dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2200      	movs	r2, #0
 80024e2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80024e4:	78fb      	ldrb	r3, [r7, #3]
 80024e6:	f003 0307 	and.w	r3, r3, #7
 80024ea:	b2da      	uxtb	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80024f0:	883b      	ldrh	r3, [r7, #0]
 80024f2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	78ba      	ldrb	r2, [r7, #2]
 80024fe:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002500:	78bb      	ldrb	r3, [r7, #2]
 8002502:	2b02      	cmp	r3, #2
 8002504:	d102      	bne.n	800250c <HAL_PCD_EP_Open+0x8e>
  {
    ep->data_pid_start = 0U;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2200      	movs	r2, #0
 800250a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8002512:	2b01      	cmp	r3, #1
 8002514:	d101      	bne.n	800251a <HAL_PCD_EP_Open+0x9c>
 8002516:	2302      	movs	r3, #2
 8002518:	e00e      	b.n	8002538 <HAL_PCD_EP_Open+0xba>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2201      	movs	r2, #1
 800251e:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	68f9      	ldr	r1, [r7, #12]
 8002528:	4618      	mov	r0, r3
 800252a:	f003 fc91 	bl	8005e50 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return ret;
 8002536:	7afb      	ldrb	r3, [r7, #11]
}
 8002538:	4618      	mov	r0, r3
 800253a:	3710      	adds	r7, #16
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}

08002540 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	460b      	mov	r3, r1
 800254a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800254c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002550:	2b00      	cmp	r3, #0
 8002552:	da0f      	bge.n	8002574 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002554:	78fb      	ldrb	r3, [r7, #3]
 8002556:	f003 0207 	and.w	r2, r3, #7
 800255a:	4613      	mov	r3, r2
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	4413      	add	r3, r2
 8002560:	00db      	lsls	r3, r3, #3
 8002562:	3310      	adds	r3, #16
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	4413      	add	r3, r2
 8002568:	3304      	adds	r3, #4
 800256a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2201      	movs	r2, #1
 8002570:	705a      	strb	r2, [r3, #1]
 8002572:	e00f      	b.n	8002594 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002574:	78fb      	ldrb	r3, [r7, #3]
 8002576:	f003 0207 	and.w	r2, r3, #7
 800257a:	4613      	mov	r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	4413      	add	r3, r2
 8002580:	00db      	lsls	r3, r3, #3
 8002582:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	4413      	add	r3, r2
 800258a:	3304      	adds	r3, #4
 800258c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2200      	movs	r2, #0
 8002592:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002594:	78fb      	ldrb	r3, [r7, #3]
 8002596:	f003 0307 	and.w	r3, r3, #7
 800259a:	b2da      	uxtb	r2, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d101      	bne.n	80025ae <HAL_PCD_EP_Close+0x6e>
 80025aa:	2302      	movs	r3, #2
 80025ac:	e00e      	b.n	80025cc <HAL_PCD_EP_Close+0x8c>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2201      	movs	r2, #1
 80025b2:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	68f9      	ldr	r1, [r7, #12]
 80025bc:	4618      	mov	r0, r3
 80025be:	f003 ffa7 	bl	8006510 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  return HAL_OK;
 80025ca:	2300      	movs	r3, #0
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3710      	adds	r7, #16
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	607a      	str	r2, [r7, #4]
 80025de:	603b      	str	r3, [r7, #0]
 80025e0:	460b      	mov	r3, r1
 80025e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025e4:	7afb      	ldrb	r3, [r7, #11]
 80025e6:	f003 0207 	and.w	r2, r3, #7
 80025ea:	4613      	mov	r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	4413      	add	r3, r2
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	4413      	add	r3, r2
 80025fa:	3304      	adds	r3, #4
 80025fc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	683a      	ldr	r2, [r7, #0]
 8002608:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	2200      	movs	r2, #0
 800260e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	2200      	movs	r2, #0
 8002614:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002616:	7afb      	ldrb	r3, [r7, #11]
 8002618:	f003 0307 	and.w	r3, r3, #7
 800261c:	b2da      	uxtb	r2, r3
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	6979      	ldr	r1, [r7, #20]
 8002628:	4618      	mov	r0, r3
 800262a:	f004 f8fb 	bl	8006824 <USB_EPStartXfer>

  return HAL_OK;
 800262e:	2300      	movs	r3, #0
}
 8002630:	4618      	mov	r0, r3
 8002632:	3718      	adds	r7, #24
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	460b      	mov	r3, r1
 8002642:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002644:	78fb      	ldrb	r3, [r7, #3]
 8002646:	f003 0207 	and.w	r2, r3, #7
 800264a:	6879      	ldr	r1, [r7, #4]
 800264c:	4613      	mov	r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	4413      	add	r3, r2
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	440b      	add	r3, r1
 8002656:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 800265a:	681b      	ldr	r3, [r3, #0]
}
 800265c:	4618      	mov	r0, r3
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b086      	sub	sp, #24
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	607a      	str	r2, [r7, #4]
 8002672:	603b      	str	r3, [r7, #0]
 8002674:	460b      	mov	r3, r1
 8002676:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002678:	7afb      	ldrb	r3, [r7, #11]
 800267a:	f003 0207 	and.w	r2, r3, #7
 800267e:	4613      	mov	r3, r2
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	4413      	add	r3, r2
 8002684:	00db      	lsls	r3, r3, #3
 8002686:	3310      	adds	r3, #16
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	4413      	add	r3, r2
 800268c:	3304      	adds	r3, #4
 800268e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	683a      	ldr	r2, [r7, #0]
 800269a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	683a      	ldr	r2, [r7, #0]
 80026a8:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	2200      	movs	r2, #0
 80026ae:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	2201      	movs	r2, #1
 80026b4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026b6:	7afb      	ldrb	r3, [r7, #11]
 80026b8:	f003 0307 	and.w	r3, r3, #7
 80026bc:	b2da      	uxtb	r2, r3
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	6979      	ldr	r1, [r7, #20]
 80026c8:	4618      	mov	r0, r3
 80026ca:	f004 f8ab 	bl	8006824 <USB_EPStartXfer>

  return HAL_OK;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3718      	adds	r7, #24
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	460b      	mov	r3, r1
 80026e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80026e4:	78fb      	ldrb	r3, [r7, #3]
 80026e6:	f003 0307 	and.w	r3, r3, #7
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	7912      	ldrb	r2, [r2, #4]
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d901      	bls.n	80026f6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e040      	b.n	8002778 <HAL_PCD_EP_SetStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80026f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	da0f      	bge.n	800271e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026fe:	78fb      	ldrb	r3, [r7, #3]
 8002700:	f003 0207 	and.w	r2, r3, #7
 8002704:	4613      	mov	r3, r2
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	4413      	add	r3, r2
 800270a:	00db      	lsls	r3, r3, #3
 800270c:	3310      	adds	r3, #16
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	4413      	add	r3, r2
 8002712:	3304      	adds	r3, #4
 8002714:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2201      	movs	r2, #1
 800271a:	705a      	strb	r2, [r3, #1]
 800271c:	e00d      	b.n	800273a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800271e:	78fa      	ldrb	r2, [r7, #3]
 8002720:	4613      	mov	r3, r2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	4413      	add	r3, r2
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	4413      	add	r3, r2
 8002730:	3304      	adds	r3, #4
 8002732:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2200      	movs	r2, #0
 8002738:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2201      	movs	r2, #1
 800273e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002740:	78fb      	ldrb	r3, [r7, #3]
 8002742:	f003 0307 	and.w	r3, r3, #7
 8002746:	b2da      	uxtb	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8002752:	2b01      	cmp	r3, #1
 8002754:	d101      	bne.n	800275a <HAL_PCD_EP_SetStall+0x82>
 8002756:	2302      	movs	r3, #2
 8002758:	e00e      	b.n	8002778 <HAL_PCD_EP_SetStall+0xa0>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2201      	movs	r2, #1
 800275e:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68f9      	ldr	r1, [r7, #12]
 8002768:	4618      	mov	r0, r3
 800276a:	f005 f8c5 	bl	80078f8 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8002776:	2300      	movs	r3, #0
}
 8002778:	4618      	mov	r0, r3
 800277a:	3710      	adds	r7, #16
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	460b      	mov	r3, r1
 800278a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800278c:	78fb      	ldrb	r3, [r7, #3]
 800278e:	f003 030f 	and.w	r3, r3, #15
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	7912      	ldrb	r2, [r2, #4]
 8002796:	4293      	cmp	r3, r2
 8002798:	d901      	bls.n	800279e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e042      	b.n	8002824 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800279e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	da0f      	bge.n	80027c6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027a6:	78fb      	ldrb	r3, [r7, #3]
 80027a8:	f003 0207 	and.w	r2, r3, #7
 80027ac:	4613      	mov	r3, r2
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	4413      	add	r3, r2
 80027b2:	00db      	lsls	r3, r3, #3
 80027b4:	3310      	adds	r3, #16
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	4413      	add	r3, r2
 80027ba:	3304      	adds	r3, #4
 80027bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2201      	movs	r2, #1
 80027c2:	705a      	strb	r2, [r3, #1]
 80027c4:	e00f      	b.n	80027e6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027c6:	78fb      	ldrb	r3, [r7, #3]
 80027c8:	f003 0207 	and.w	r2, r3, #7
 80027cc:	4613      	mov	r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	4413      	add	r3, r2
 80027d2:	00db      	lsls	r3, r3, #3
 80027d4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	4413      	add	r3, r2
 80027dc:	3304      	adds	r3, #4
 80027de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2200      	movs	r2, #0
 80027ea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027ec:	78fb      	ldrb	r3, [r7, #3]
 80027ee:	f003 0307 	and.w	r3, r3, #7
 80027f2:	b2da      	uxtb	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d101      	bne.n	8002806 <HAL_PCD_EP_ClrStall+0x86>
 8002802:	2302      	movs	r3, #2
 8002804:	e00e      	b.n	8002824 <HAL_PCD_EP_ClrStall+0xa4>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2201      	movs	r2, #1
 800280a:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	68f9      	ldr	r1, [r7, #12]
 8002814:	4618      	mov	r0, r3
 8002816:	f005 f8b5 	bl	8007984 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8002822:	2300      	movs	r3, #0
}
 8002824:	4618      	mov	r0, r3
 8002826:	3710      	adds	r7, #16
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b08e      	sub	sp, #56	@ 0x38
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002834:	e326      	b.n	8002e84 <PCD_EP_ISR_Handler+0x658>
  {
    wIstr = (uint16_t)hpcd->Instance->ISTR;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800283c:	847b      	strh	r3, [r7, #34]	@ 0x22

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_IDN);
 800283e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002840:	b2db      	uxtb	r3, r3
 8002842:	f003 030f 	and.w	r3, r3, #15
 8002846:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

    if (epindex == 0U)
 800284a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800284e:	2b00      	cmp	r3, #0
 8002850:	f040 8124 	bne.w	8002a9c <PCD_EP_ISR_Handler+0x270>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002854:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002856:	f003 0310 	and.w	r3, r3, #16
 800285a:	2b00      	cmp	r3, #0
 800285c:	d13e      	bne.n	80028dc <PCD_EP_ISR_Handler+0xb0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	4b89      	ldr	r3, [pc, #548]	@ (8002a8c <PCD_EP_ISR_Handler+0x260>)
 8002866:	4013      	ands	r3, r2
 8002868:	60bb      	str	r3, [r7, #8]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	68ba      	ldr	r2, [r7, #8]
 8002870:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002874:	601a      	str	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	3314      	adds	r3, #20
 800287a:	637b      	str	r3, [r7, #52]	@ 0x34

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800287c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	00db      	lsls	r3, r3, #3
 8002882:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002886:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	0c1b      	lsrs	r3, r3, #16
 800288e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002892:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002894:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002896:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002898:	695a      	ldr	r2, [r3, #20]
 800289a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800289c:	69db      	ldr	r3, [r3, #28]
 800289e:	441a      	add	r2, r3
 80028a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028a2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80028a4:	2100      	movs	r1, #0
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f006 ff66 	bl	8009778 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	7c5b      	ldrb	r3, [r3, #17]
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	f000 82e6 	beq.w	8002e84 <PCD_EP_ISR_Handler+0x658>
 80028b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028ba:	699b      	ldr	r3, [r3, #24]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	f040 82e1 	bne.w	8002e84 <PCD_EP_ISR_Handler+0x658>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	7c5b      	ldrb	r3, [r3, #17]
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80028cc:	b2da      	uxtb	r2, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	64da      	str	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	745a      	strb	r2, [r3, #17]
 80028da:	e2d3      	b.n	8002e84 <PCD_EP_ISR_Handler+0x658>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80028e2:	637b      	str	r3, [r7, #52]	@ 0x34
        wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	867b      	strh	r3, [r7, #50]	@ 0x32

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80028ec:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80028ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d027      	beq.n	8002946 <PCD_EP_ISR_Handler+0x11a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	4619      	mov	r1, r3
 8002900:	4610      	mov	r0, r2
 8002902:	f7ff fb39 	bl	8001f78 <PCD_GET_EP_RX_CNT>
 8002906:	4603      	mov	r3, r0
 8002908:	461a      	mov	r2, r3
 800290a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800290c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6818      	ldr	r0, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f503 7127 	add.w	r1, r3, #668	@ 0x29c
 8002918:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800291a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800291c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800291e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002920:	b29b      	uxth	r3, r3
 8002922:	f005 f956 	bl	8007bd2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	4b58      	ldr	r3, [pc, #352]	@ (8002a90 <PCD_EP_ISR_Handler+0x264>)
 800292e:	4013      	ands	r3, r2
 8002930:	60fb      	str	r3, [r7, #12]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800293c:	601a      	str	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f006 feed 	bl	800971e <HAL_PCD_SetupStageCallback>
 8002944:	e29e      	b.n	8002e84 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_VTRX) != 0U)
 8002946:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 800294a:	2b00      	cmp	r3, #0
 800294c:	f280 829a 	bge.w	8002e84 <PCD_EP_ISR_Handler+0x658>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	4b4e      	ldr	r3, [pc, #312]	@ (8002a90 <PCD_EP_ISR_Handler+0x264>)
 8002958:	4013      	ands	r3, r2
 800295a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002962:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002966:	601a      	str	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	4619      	mov	r1, r3
 8002972:	4610      	mov	r0, r2
 8002974:	f7ff fb00 	bl	8001f78 <PCD_GET_EP_RX_CNT>
 8002978:	4603      	mov	r3, r0
 800297a:	461a      	mov	r2, r3
 800297c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800297e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002980:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002982:	69db      	ldr	r3, [r3, #28]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d019      	beq.n	80029bc <PCD_EP_ISR_Handler+0x190>
 8002988:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800298a:	695b      	ldr	r3, [r3, #20]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d015      	beq.n	80029bc <PCD_EP_ISR_Handler+0x190>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6818      	ldr	r0, [r3, #0]
 8002994:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002996:	6959      	ldr	r1, [r3, #20]
 8002998:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800299a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800299c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800299e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	f005 f916 	bl	8007bd2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80029a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029a8:	695a      	ldr	r2, [r3, #20]
 80029aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029ac:	69db      	ldr	r3, [r3, #28]
 80029ae:	441a      	add	r2, r3
 80029b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029b2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80029b4:	2100      	movs	r1, #0
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f006 fec3 	bl	8009742 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	867b      	strh	r3, [r7, #50]	@ 0x32

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80029c4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80029c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	f040 825a 	bne.w	8002e84 <PCD_EP_ISR_Handler+0x658>
 80029d0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80029d2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80029d6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80029da:	f000 8253 	beq.w	8002e84 <PCD_EP_ISR_Handler+0x658>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80029de:	4b2d      	ldr	r3, [pc, #180]	@ (8002a94 <PCD_EP_ISR_Handler+0x268>)
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	4a2c      	ldr	r2, [pc, #176]	@ (8002a94 <PCD_EP_ISR_Handler+0x268>)
 80029e4:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 80029e8:	6053      	str	r3, [r2, #4]
 80029ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d106      	bne.n	8002a00 <PCD_EP_ISR_Handler+0x1d4>
 80029f2:	4b28      	ldr	r3, [pc, #160]	@ (8002a94 <PCD_EP_ISR_Handler+0x268>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	4a27      	ldr	r2, [pc, #156]	@ (8002a94 <PCD_EP_ISR_Handler+0x268>)
 80029f8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80029fc:	6053      	str	r3, [r2, #4]
 80029fe:	e02e      	b.n	8002a5e <PCD_EP_ISR_Handler+0x232>
 8002a00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	2b3e      	cmp	r3, #62	@ 0x3e
 8002a06:	d814      	bhi.n	8002a32 <PCD_EP_ISR_Handler+0x206>
 8002a08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	085b      	lsrs	r3, r3, #1
 8002a0e:	617b      	str	r3, [r7, #20]
 8002a10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a12:	691b      	ldr	r3, [r3, #16]
 8002a14:	f003 0301 	and.w	r3, r3, #1
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d002      	beq.n	8002a22 <PCD_EP_ISR_Handler+0x1f6>
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	3301      	adds	r3, #1
 8002a20:	617b      	str	r3, [r7, #20]
 8002a22:	4b1c      	ldr	r3, [pc, #112]	@ (8002a94 <PCD_EP_ISR_Handler+0x268>)
 8002a24:	685a      	ldr	r2, [r3, #4]
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	069b      	lsls	r3, r3, #26
 8002a2a:	491a      	ldr	r1, [pc, #104]	@ (8002a94 <PCD_EP_ISR_Handler+0x268>)
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	604b      	str	r3, [r1, #4]
 8002a30:	e015      	b.n	8002a5e <PCD_EP_ISR_Handler+0x232>
 8002a32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	095b      	lsrs	r3, r3, #5
 8002a38:	617b      	str	r3, [r7, #20]
 8002a3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	f003 031f 	and.w	r3, r3, #31
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d102      	bne.n	8002a4c <PCD_EP_ISR_Handler+0x220>
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	3b01      	subs	r3, #1
 8002a4a:	617b      	str	r3, [r7, #20]
 8002a4c:	4b11      	ldr	r3, [pc, #68]	@ (8002a94 <PCD_EP_ISR_Handler+0x268>)
 8002a4e:	685a      	ldr	r2, [r3, #4]
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	069b      	lsls	r3, r3, #26
 8002a54:	4313      	orrs	r3, r2
 8002a56:	4a0f      	ldr	r2, [pc, #60]	@ (8002a94 <PCD_EP_ISR_Handler+0x268>)
 8002a58:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002a5c:	6053      	str	r3, [r2, #4]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	4b0c      	ldr	r3, [pc, #48]	@ (8002a98 <PCD_EP_ISR_Handler+0x26c>)
 8002a66:	4013      	ands	r3, r2
 8002a68:	613b      	str	r3, [r7, #16]
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002a70:	613b      	str	r3, [r7, #16]
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002a78:	613b      	str	r3, [r7, #16]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a88:	6013      	str	r3, [r2, #0]
 8002a8a:	e1fb      	b.n	8002e84 <PCD_EP_ISR_Handler+0x658>
 8002a8c:	07ff8f0f 	.word	0x07ff8f0f
 8002a90:	07ff0f8f 	.word	0x07ff0f8f
 8002a94:	40016400 	.word	0x40016400
 8002a98:	07ffbf8f 	.word	0x07ffbf8f
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	4413      	add	r3, r2
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	867b      	strh	r3, [r7, #50]	@ 0x32

      if ((wEPVal & USB_EP_VTRX) != 0U)
 8002aae:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	f280 80bd 	bge.w	8002c32 <PCD_EP_ISR_Handler+0x406>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	461a      	mov	r2, r3
 8002abe:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	4413      	add	r3, r2
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	4b9e      	ldr	r3, [pc, #632]	@ (8002d44 <PCD_EP_ISR_Handler+0x518>)
 8002aca:	4013      	ands	r3, r2
 8002acc:	61fb      	str	r3, [r7, #28]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	4413      	add	r3, r2
 8002adc:	69fa      	ldr	r2, [r7, #28]
 8002ade:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002ae2:	601a      	str	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002ae4:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8002ae8:	4613      	mov	r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	4413      	add	r3, r2
 8002aee:	00db      	lsls	r3, r3, #3
 8002af0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	4413      	add	r3, r2
 8002af8:	3304      	adds	r3, #4
 8002afa:	637b      	str	r3, [r7, #52]	@ 0x34

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002afc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002afe:	7b1b      	ldrb	r3, [r3, #12]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d116      	bne.n	8002b32 <PCD_EP_ISR_Handler+0x306>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	4610      	mov	r0, r2
 8002b10:	f7ff fa32 	bl	8001f78 <PCD_GET_EP_RX_CNT>
 8002b14:	4603      	mov	r3, r0
 8002b16:	84bb      	strh	r3, [r7, #36]	@ 0x24

          if (count != 0U)
 8002b18:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d067      	beq.n	8002bee <PCD_EP_ISR_Handler+0x3c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6818      	ldr	r0, [r3, #0]
 8002b22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b24:	6959      	ldr	r1, [r3, #20]
 8002b26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b28:	88da      	ldrh	r2, [r3, #6]
 8002b2a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002b2c:	f005 f851 	bl	8007bd2 <USB_ReadPMA>
 8002b30:	e05d      	b.n	8002bee <PCD_EP_ISR_Handler+0x3c2>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002b32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b34:	78db      	ldrb	r3, [r3, #3]
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d108      	bne.n	8002b4c <PCD_EP_ISR_Handler+0x320>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002b3a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f000 f9ad 	bl	8002ea0 <HAL_PCD_EP_DB_Receive>
 8002b46:	4603      	mov	r3, r0
 8002b48:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8002b4a:	e050      	b.n	8002bee <PCD_EP_ISR_Handler+0x3c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	461a      	mov	r2, r3
 8002b52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	4413      	add	r3, r2
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	4b7a      	ldr	r3, [pc, #488]	@ (8002d48 <PCD_EP_ISR_Handler+0x51c>)
 8002b5e:	4013      	ands	r3, r2
 8002b60:	61bb      	str	r3, [r7, #24]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	461a      	mov	r2, r3
 8002b68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	441a      	add	r2, r3
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b76:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002b7a:	6013      	str	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	461a      	mov	r2, r3
 8002b82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	4413      	add	r3, r2
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d016      	beq.n	8002bc2 <PCD_EP_ISR_Handler+0x396>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	4610      	mov	r0, r2
 8002ba0:	f7ff fa0b 	bl	8001fba <PCD_GET_EP_DBUF0_CNT>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	84bb      	strh	r3, [r7, #36]	@ 0x24

              if (count != 0U)
 8002ba8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d01f      	beq.n	8002bee <PCD_EP_ISR_Handler+0x3c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6818      	ldr	r0, [r3, #0]
 8002bb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bb4:	6959      	ldr	r1, [r3, #20]
 8002bb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bb8:	891a      	ldrh	r2, [r3, #8]
 8002bba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002bbc:	f005 f809 	bl	8007bd2 <USB_ReadPMA>
 8002bc0:	e015      	b.n	8002bee <PCD_EP_ISR_Handler+0x3c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	4619      	mov	r1, r3
 8002bcc:	4610      	mov	r0, r2
 8002bce:	f7ff fa15 	bl	8001ffc <PCD_GET_EP_DBUF1_CNT>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	84bb      	strh	r3, [r7, #36]	@ 0x24

              if (count != 0U)
 8002bd6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d008      	beq.n	8002bee <PCD_EP_ISR_Handler+0x3c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6818      	ldr	r0, [r3, #0]
 8002be0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002be2:	6959      	ldr	r1, [r3, #20]
 8002be4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002be6:	895a      	ldrh	r2, [r3, #10]
 8002be8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002bea:	f004 fff2 	bl	8007bd2 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002bee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bf0:	69da      	ldr	r2, [r3, #28]
 8002bf2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002bf4:	441a      	add	r2, r3
 8002bf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bf8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002bfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bfc:	695a      	ldr	r2, [r3, #20]
 8002bfe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002c00:	441a      	add	r2, r3
 8002c02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c04:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002c06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d004      	beq.n	8002c18 <PCD_EP_ISR_Handler+0x3ec>
 8002c0e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002c10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c12:	691b      	ldr	r3, [r3, #16]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d206      	bcs.n	8002c26 <PCD_EP_ISR_Handler+0x3fa>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002c18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f006 fd8f 	bl	8009742 <HAL_PCD_DataOutStageCallback>
 8002c24:	e005      	b.n	8002c32 <PCD_EP_ISR_Handler+0x406>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f003 fdf9 	bl	8006824 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_VTTX) != 0U)
 8002c32:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002c34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f000 8123 	beq.w	8002e84 <PCD_EP_ISR_Handler+0x658>
      {
        ep = &hpcd->IN_ep[epindex];
 8002c3e:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8002c42:	4613      	mov	r3, r2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	4413      	add	r3, r2
 8002c48:	00db      	lsls	r3, r3, #3
 8002c4a:	3310      	adds	r3, #16
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	4413      	add	r3, r2
 8002c50:	3304      	adds	r3, #4
 8002c52:	637b      	str	r3, [r7, #52]	@ 0x34

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	461a      	mov	r2, r3
 8002c5a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	4413      	add	r3, r2
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	4b39      	ldr	r3, [pc, #228]	@ (8002d4c <PCD_EP_ISR_Handler+0x520>)
 8002c66:	4013      	ands	r3, r2
 8002c68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	461a      	mov	r2, r3
 8002c70:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	4413      	add	r3, r2
 8002c78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002c7a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002c7e:	601a      	str	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002c80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c82:	78db      	ldrb	r3, [r3, #3]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	f040 80b8 	bne.w	8002dfa <PCD_EP_ISR_Handler+0x5ce>
        {
          ep->xfer_len = 0U;
 8002c8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002c90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c92:	7b1b      	ldrb	r3, [r3, #12]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f000 80a9 	beq.w	8002dec <PCD_EP_ISR_Handler+0x5c0>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002c9a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002c9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d055      	beq.n	8002d50 <PCD_EP_ISR_Handler+0x524>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ca4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ca6:	785b      	ldrb	r3, [r3, #1]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d124      	bne.n	8002cf6 <PCD_EP_ISR_Handler+0x4ca>
 8002cac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	00db      	lsls	r3, r3, #3
 8002cb2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002cb6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	00db      	lsls	r3, r3, #3
 8002cc2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002cc6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002cca:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8002cce:	601a      	str	r2, [r3, #0]
 8002cd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	00db      	lsls	r3, r3, #3
 8002cd6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002cda:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	00db      	lsls	r3, r3, #3
 8002ce6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002cea:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002cee:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002cf2:	601a      	str	r2, [r3, #0]
 8002cf4:	e07a      	b.n	8002dec <PCD_EP_ISR_Handler+0x5c0>
 8002cf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cf8:	785b      	ldrb	r3, [r3, #1]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d176      	bne.n	8002dec <PCD_EP_ISR_Handler+0x5c0>
 8002cfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	00db      	lsls	r3, r3, #3
 8002d04:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002d08:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	00db      	lsls	r3, r3, #3
 8002d14:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002d18:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002d1c:	b292      	uxth	r2, r2
 8002d1e:	601a      	str	r2, [r3, #0]
 8002d20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	00db      	lsls	r3, r3, #3
 8002d26:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8002d2a:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8002d2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	00db      	lsls	r3, r3, #3
 8002d34:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002d38:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002d3c:	6812      	ldr	r2, [r2, #0]
 8002d3e:	601a      	str	r2, [r3, #0]
 8002d40:	e054      	b.n	8002dec <PCD_EP_ISR_Handler+0x5c0>
 8002d42:	bf00      	nop
 8002d44:	07ff0f8f 	.word	0x07ff0f8f
 8002d48:	07ff8f8f 	.word	0x07ff8f8f
 8002d4c:	07ff8f0f 	.word	0x07ff8f0f
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d52:	785b      	ldrb	r3, [r3, #1]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d124      	bne.n	8002da2 <PCD_EP_ISR_Handler+0x576>
 8002d58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	00db      	lsls	r3, r3, #3
 8002d5e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002d62:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002d66:	685a      	ldr	r2, [r3, #4]
 8002d68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	00db      	lsls	r3, r3, #3
 8002d6e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002d72:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002d76:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8002d7a:	605a      	str	r2, [r3, #4]
 8002d7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	00db      	lsls	r3, r3, #3
 8002d82:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002d86:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002d8a:	685a      	ldr	r2, [r3, #4]
 8002d8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	00db      	lsls	r3, r3, #3
 8002d92:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002d96:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002d9a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002d9e:	605a      	str	r2, [r3, #4]
 8002da0:	e024      	b.n	8002dec <PCD_EP_ISR_Handler+0x5c0>
 8002da2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002da4:	785b      	ldrb	r3, [r3, #1]
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d120      	bne.n	8002dec <PCD_EP_ISR_Handler+0x5c0>
 8002daa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	00db      	lsls	r3, r3, #3
 8002db0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002db4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002db8:	685a      	ldr	r2, [r3, #4]
 8002dba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	00db      	lsls	r3, r3, #3
 8002dc0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002dc4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002dc8:	b292      	uxth	r2, r2
 8002dca:	605a      	str	r2, [r3, #4]
 8002dcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	00db      	lsls	r3, r3, #3
 8002dd2:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8002dd6:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8002dda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002de4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002de8:	6852      	ldr	r2, [r2, #4]
 8002dea:	605a      	str	r2, [r3, #4]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002dec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	4619      	mov	r1, r3
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f006 fcc0 	bl	8009778 <HAL_PCD_DataInStageCallback>
 8002df8:	e044      	b.n	8002e84 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002dfa:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002dfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d139      	bne.n	8002e78 <PCD_EP_ISR_Handler+0x64c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002e04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	00db      	lsls	r3, r3, #3
 8002e0a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002e0e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	0c1b      	lsrs	r3, r3, #16
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e1c:	84fb      	strh	r3, [r7, #38]	@ 0x26

            if (ep->xfer_len > TxPctSize)
 8002e1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e20:	699a      	ldr	r2, [r3, #24]
 8002e22:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d906      	bls.n	8002e36 <PCD_EP_ISR_Handler+0x60a>
            {
              ep->xfer_len -= TxPctSize;
 8002e28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e2a:	699a      	ldr	r2, [r3, #24]
 8002e2c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002e2e:	1ad2      	subs	r2, r2, r3
 8002e30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e32:	619a      	str	r2, [r3, #24]
 8002e34:	e002      	b.n	8002e3c <PCD_EP_ISR_Handler+0x610>
            }
            else
            {
              ep->xfer_len = 0U;
 8002e36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e38:	2200      	movs	r2, #0
 8002e3a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002e3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e3e:	699b      	ldr	r3, [r3, #24]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d106      	bne.n	8002e52 <PCD_EP_ISR_Handler+0x626>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	4619      	mov	r1, r3
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f006 fc94 	bl	8009778 <HAL_PCD_DataInStageCallback>
 8002e50:	e018      	b.n	8002e84 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002e52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e54:	695a      	ldr	r2, [r3, #20]
 8002e56:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002e58:	441a      	add	r2, r3
 8002e5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e5c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002e5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e60:	69da      	ldr	r2, [r3, #28]
 8002e62:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002e64:	441a      	add	r2, r3
 8002e66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e68:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002e70:	4618      	mov	r0, r3
 8002e72:	f003 fcd7 	bl	8006824 <USB_EPStartXfer>
 8002e76:	e005      	b.n	8002e84 <PCD_EP_ISR_Handler+0x658>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002e78:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 f8e8 	bl	8003054 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e8a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	f47f acd1 	bne.w	8002836 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3738      	adds	r7, #56	@ 0x38
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop

08002ea0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b08a      	sub	sp, #40	@ 0x28
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002eae:	88fb      	ldrh	r3, [r7, #6]
 8002eb0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d062      	beq.n	8002f7e <HAL_PCD_EP_DB_Receive+0xde>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	4610      	mov	r0, r2
 8002ec4:	f7ff f879 	bl	8001fba <PCD_GET_EP_DBUF0_CNT>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	699a      	ldr	r2, [r3, #24]
 8002ed0:	8bfb      	ldrh	r3, [r7, #30]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d306      	bcc.n	8002ee4 <HAL_PCD_EP_DB_Receive+0x44>
    {
      ep->xfer_len -= count;
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	699a      	ldr	r2, [r3, #24]
 8002eda:	8bfb      	ldrh	r3, [r7, #30]
 8002edc:	1ad2      	subs	r2, r2, r3
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	619a      	str	r2, [r3, #24]
 8002ee2:	e002      	b.n	8002eea <HAL_PCD_EP_DB_Receive+0x4a>
    }
    else
    {
      ep->xfer_len = 0U;
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d11b      	bne.n	8002f2a <HAL_PCD_EP_DB_Receive+0x8a>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	4413      	add	r3, r2
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	4b52      	ldr	r3, [pc, #328]	@ (800304c <HAL_PCD_EP_DB_Receive+0x1ac>)
 8002f04:	4013      	ands	r3, r2
 8002f06:	61bb      	str	r3, [r7, #24]
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002f0e:	61bb      	str	r3, [r7, #24]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	461a      	mov	r2, r3
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	441a      	add	r2, r3
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f28:	6013      	str	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002f2a:	88fb      	ldrh	r3, [r7, #6]
 8002f2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d017      	beq.n	8002f64 <HAL_PCD_EP_DB_Receive+0xc4>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	461a      	mov	r2, r3
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	4413      	add	r3, r2
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	4b42      	ldr	r3, [pc, #264]	@ (8003050 <HAL_PCD_EP_DB_Receive+0x1b0>)
 8002f46:	4013      	ands	r3, r2
 8002f48:	617b      	str	r3, [r7, #20]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	461a      	mov	r2, r3
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	441a      	add	r2, r3
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f5e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002f62:	6013      	str	r3, [r2, #0]
    }

    if (count != 0U)
 8002f64:	8bfb      	ldrh	r3, [r7, #30]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d06b      	beq.n	8003042 <HAL_PCD_EP_DB_Receive+0x1a2>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6818      	ldr	r0, [r3, #0]
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	6959      	ldr	r1, [r3, #20]
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	891a      	ldrh	r2, [r3, #8]
 8002f76:	8bfb      	ldrh	r3, [r7, #30]
 8002f78:	f004 fe2b 	bl	8007bd2 <USB_ReadPMA>
 8002f7c:	e061      	b.n	8003042 <HAL_PCD_EP_DB_Receive+0x1a2>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	4619      	mov	r1, r3
 8002f88:	4610      	mov	r0, r2
 8002f8a:	f7ff f837 	bl	8001ffc <PCD_GET_EP_DBUF1_CNT>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	699a      	ldr	r2, [r3, #24]
 8002f96:	8bfb      	ldrh	r3, [r7, #30]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d306      	bcc.n	8002faa <HAL_PCD_EP_DB_Receive+0x10a>
    {
      ep->xfer_len -= count;
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	699a      	ldr	r2, [r3, #24]
 8002fa0:	8bfb      	ldrh	r3, [r7, #30]
 8002fa2:	1ad2      	subs	r2, r2, r3
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	619a      	str	r2, [r3, #24]
 8002fa8:	e002      	b.n	8002fb0 <HAL_PCD_EP_DB_Receive+0x110>
    }
    else
    {
      ep->xfer_len = 0U;
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	2200      	movs	r2, #0
 8002fae:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	699b      	ldr	r3, [r3, #24]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d11b      	bne.n	8002ff0 <HAL_PCD_EP_DB_Receive+0x150>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	4413      	add	r3, r2
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	4b20      	ldr	r3, [pc, #128]	@ (800304c <HAL_PCD_EP_DB_Receive+0x1ac>)
 8002fca:	4013      	ands	r3, r2
 8002fcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002fd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	461a      	mov	r2, r3
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	441a      	add	r2, r3
 8002fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002fea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002fee:	6013      	str	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002ff0:	88fb      	ldrh	r3, [r7, #6]
 8002ff2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d117      	bne.n	800302a <HAL_PCD_EP_DB_Receive+0x18a>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	461a      	mov	r2, r3
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	4413      	add	r3, r2
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	4b11      	ldr	r3, [pc, #68]	@ (8003050 <HAL_PCD_EP_DB_Receive+0x1b0>)
 800300c:	4013      	ands	r3, r2
 800300e:	623b      	str	r3, [r7, #32]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	461a      	mov	r2, r3
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	441a      	add	r2, r3
 800301e:	6a3b      	ldr	r3, [r7, #32]
 8003020:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003024:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003028:	6013      	str	r3, [r2, #0]
    }

    if (count != 0U)
 800302a:	8bfb      	ldrh	r3, [r7, #30]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d008      	beq.n	8003042 <HAL_PCD_EP_DB_Receive+0x1a2>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6818      	ldr	r0, [r3, #0]
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	6959      	ldr	r1, [r3, #20]
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	895a      	ldrh	r2, [r3, #10]
 800303c:	8bfb      	ldrh	r3, [r7, #30]
 800303e:	f004 fdc8 	bl	8007bd2 <USB_ReadPMA>
    }
  }

  return count;
 8003042:	8bfb      	ldrh	r3, [r7, #30]
}
 8003044:	4618      	mov	r0, r3
 8003046:	3728      	adds	r7, #40	@ 0x28
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	07ffbf8f 	.word	0x07ffbf8f
 8003050:	07ff8f8f 	.word	0x07ff8f8f

08003054 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b08e      	sub	sp, #56	@ 0x38
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	4613      	mov	r3, r2
 8003060:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003062:	88fb      	ldrh	r3, [r7, #6]
 8003064:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003068:	2b00      	cmp	r3, #0
 800306a:	f000 81d5 	beq.w	8003418 <HAL_PCD_EP_DB_Transmit+0x3c4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	4619      	mov	r1, r3
 8003078:	4610      	mov	r0, r2
 800307a:	f7fe ff9e 	bl	8001fba <PCD_GET_EP_DBUF0_CNT>
 800307e:	4603      	mov	r3, r0
 8003080:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len > TxPctSize)
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	699a      	ldr	r2, [r3, #24]
 8003086:	8bfb      	ldrh	r3, [r7, #30]
 8003088:	429a      	cmp	r2, r3
 800308a:	d906      	bls.n	800309a <HAL_PCD_EP_DB_Transmit+0x46>
    {
      ep->xfer_len -= TxPctSize;
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	699a      	ldr	r2, [r3, #24]
 8003090:	8bfb      	ldrh	r3, [r7, #30]
 8003092:	1ad2      	subs	r2, r2, r3
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	619a      	str	r2, [r3, #24]
 8003098:	e002      	b.n	80030a0 <HAL_PCD_EP_DB_Transmit+0x4c>
    }
    else
    {
      ep->xfer_len = 0U;
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	2200      	movs	r2, #0
 800309e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	f040 80c1 	bne.w	800322c <HAL_PCD_EP_DB_Transmit+0x1d8>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	785b      	ldrb	r3, [r3, #1]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d124      	bne.n	80030fc <HAL_PCD_EP_DB_Transmit+0xa8>
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80030bc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	00db      	lsls	r3, r3, #3
 80030c8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80030cc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80030d0:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80030d4:	601a      	str	r2, [r3, #0]
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	00db      	lsls	r3, r3, #3
 80030dc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80030e0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80030f0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80030f4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80030f8:	601a      	str	r2, [r3, #0]
 80030fa:	e024      	b.n	8003146 <HAL_PCD_EP_DB_Transmit+0xf2>
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	785b      	ldrb	r3, [r3, #1]
 8003100:	2b01      	cmp	r3, #1
 8003102:	d120      	bne.n	8003146 <HAL_PCD_EP_DB_Transmit+0xf2>
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	00db      	lsls	r3, r3, #3
 800310a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800310e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	00db      	lsls	r3, r3, #3
 800311a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800311e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003122:	b292      	uxth	r2, r2
 8003124:	601a      	str	r2, [r3, #0]
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	00db      	lsls	r3, r3, #3
 800312c:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8003130:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	00db      	lsls	r3, r3, #3
 800313a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800313e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003142:	6812      	ldr	r2, [r2, #0]
 8003144:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	785b      	ldrb	r3, [r3, #1]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d124      	bne.n	8003198 <HAL_PCD_EP_DB_Transmit+0x144>
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003158:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800315c:	685a      	ldr	r2, [r3, #4]
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	00db      	lsls	r3, r3, #3
 8003164:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003168:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800316c:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8003170:	605a      	str	r2, [r3, #4]
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	00db      	lsls	r3, r3, #3
 8003178:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800317c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003180:	685a      	ldr	r2, [r3, #4]
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800318c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003190:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003194:	605a      	str	r2, [r3, #4]
 8003196:	e024      	b.n	80031e2 <HAL_PCD_EP_DB_Transmit+0x18e>
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	785b      	ldrb	r3, [r3, #1]
 800319c:	2b01      	cmp	r3, #1
 800319e:	d120      	bne.n	80031e2 <HAL_PCD_EP_DB_Transmit+0x18e>
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	00db      	lsls	r3, r3, #3
 80031a6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80031aa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80031ae:	685a      	ldr	r2, [r3, #4]
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	00db      	lsls	r3, r3, #3
 80031b6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80031ba:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80031be:	b292      	uxth	r2, r2
 80031c0:	605a      	str	r2, [r3, #4]
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	00db      	lsls	r3, r3, #3
 80031c8:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 80031cc:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	00db      	lsls	r3, r3, #3
 80031d6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80031da:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80031de:	6852      	ldr	r2, [r2, #4]
 80031e0:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	4619      	mov	r1, r3
 80031e8:	68f8      	ldr	r0, [r7, #12]
 80031ea:	f006 fac5 	bl	8009778 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80031ee:	88fb      	ldrh	r3, [r7, #6]
 80031f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	f000 82e5 	beq.w	80037c4 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	461a      	mov	r2, r3
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	4413      	add	r3, r2
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	4b8e      	ldr	r3, [pc, #568]	@ (8003444 <HAL_PCD_EP_DB_Transmit+0x3f0>)
 800320c:	4013      	ands	r3, r2
 800320e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	461a      	mov	r2, r3
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	441a      	add	r2, r3
 800321e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003220:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003224:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003228:	6013      	str	r3, [r2, #0]
 800322a:	e2cb      	b.n	80037c4 <HAL_PCD_EP_DB_Transmit+0x770>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800322c:	88fb      	ldrh	r3, [r7, #6]
 800322e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d017      	beq.n	8003266 <HAL_PCD_EP_DB_Transmit+0x212>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	461a      	mov	r2, r3
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	4413      	add	r3, r2
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	4b7f      	ldr	r3, [pc, #508]	@ (8003444 <HAL_PCD_EP_DB_Transmit+0x3f0>)
 8003248:	4013      	ands	r3, r2
 800324a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	461a      	mov	r2, r3
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	441a      	add	r2, r3
 800325a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800325c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003260:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003264:	6013      	str	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800326c:	2b01      	cmp	r3, #1
 800326e:	f040 82a9 	bne.w	80037c4 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        ep->xfer_buff += TxPctSize;
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	695a      	ldr	r2, [r3, #20]
 8003276:	8bfb      	ldrh	r3, [r7, #30]
 8003278:	441a      	add	r2, r3
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	69da      	ldr	r2, [r3, #28]
 8003282:	8bfb      	ldrh	r3, [r7, #30]
 8003284:	441a      	add	r2, r3
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	6a1a      	ldr	r2, [r3, #32]
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	429a      	cmp	r2, r3
 8003294:	d309      	bcc.n	80032aa <HAL_PCD_EP_DB_Transmit+0x256>
        {
          len = ep->maxpacket;
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	6a1a      	ldr	r2, [r3, #32]
 80032a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a2:	1ad2      	subs	r2, r2, r3
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	621a      	str	r2, [r3, #32]
 80032a8:	e014      	b.n	80032d4 <HAL_PCD_EP_DB_Transmit+0x280>
        }
        else if (ep->xfer_len_db == 0U)
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	6a1b      	ldr	r3, [r3, #32]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d106      	bne.n	80032c0 <HAL_PCD_EP_DB_Transmit+0x26c>
        {
          len = TxPctSize;
 80032b2:	8bfb      	ldrh	r3, [r7, #30]
 80032b4:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80032be:	e009      	b.n	80032d4 <HAL_PCD_EP_DB_Transmit+0x280>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	6a1b      	ldr	r3, [r3, #32]
 80032cc:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	2200      	movs	r2, #0
 80032d2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	785b      	ldrb	r3, [r3, #1]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d16a      	bne.n	80033b2 <HAL_PCD_EP_DB_Transmit+0x35e>
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	00db      	lsls	r3, r3, #3
 80032e2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80032e6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	00db      	lsls	r3, r3, #3
 80032f2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80032f6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80032fa:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80032fe:	601a      	str	r2, [r3, #0]
 8003300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003302:	2b00      	cmp	r3, #0
 8003304:	d112      	bne.n	800332c <HAL_PCD_EP_DB_Transmit+0x2d8>
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	00db      	lsls	r3, r3, #3
 800330c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003310:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	00db      	lsls	r3, r3, #3
 800331c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003320:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003324:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003328:	601a      	str	r2, [r3, #0]
 800332a:	e06a      	b.n	8003402 <HAL_PCD_EP_DB_Transmit+0x3ae>
 800332c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800332e:	2b3e      	cmp	r3, #62	@ 0x3e
 8003330:	d81e      	bhi.n	8003370 <HAL_PCD_EP_DB_Transmit+0x31c>
 8003332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003334:	085b      	lsrs	r3, r3, #1
 8003336:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	2b00      	cmp	r3, #0
 8003340:	d002      	beq.n	8003348 <HAL_PCD_EP_DB_Transmit+0x2f4>
 8003342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003344:	3301      	adds	r3, #1
 8003346:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	00db      	lsls	r3, r3, #3
 800334e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003352:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003356:	6819      	ldr	r1, [r3, #0]
 8003358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800335a:	069a      	lsls	r2, r3, #26
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	00db      	lsls	r3, r3, #3
 8003362:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003366:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800336a:	430a      	orrs	r2, r1
 800336c:	601a      	str	r2, [r3, #0]
 800336e:	e048      	b.n	8003402 <HAL_PCD_EP_DB_Transmit+0x3ae>
 8003370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003372:	095b      	lsrs	r3, r3, #5
 8003374:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003378:	f003 031f 	and.w	r3, r3, #31
 800337c:	2b00      	cmp	r3, #0
 800337e:	d102      	bne.n	8003386 <HAL_PCD_EP_DB_Transmit+0x332>
 8003380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003382:	3b01      	subs	r3, #1
 8003384:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	00db      	lsls	r3, r3, #3
 800338c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003390:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003398:	069b      	lsls	r3, r3, #26
 800339a:	431a      	orrs	r2, r3
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	00db      	lsls	r3, r3, #3
 80033a2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80033a6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80033aa:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80033ae:	601a      	str	r2, [r3, #0]
 80033b0:	e027      	b.n	8003402 <HAL_PCD_EP_DB_Transmit+0x3ae>
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	785b      	ldrb	r3, [r3, #1]
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d123      	bne.n	8003402 <HAL_PCD_EP_DB_Transmit+0x3ae>
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	00db      	lsls	r3, r3, #3
 80033c0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80033c4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	00db      	lsls	r3, r3, #3
 80033d0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80033d4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80033d8:	b292      	uxth	r2, r2
 80033da:	601a      	str	r2, [r3, #0]
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	00db      	lsls	r3, r3, #3
 80033e2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80033e6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80033ea:	6819      	ldr	r1, [r3, #0]
 80033ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ee:	041a      	lsls	r2, r3, #16
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	00db      	lsls	r3, r3, #3
 80033f6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80033fa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80033fe:	430a      	orrs	r2, r1
 8003400:	601a      	str	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6818      	ldr	r0, [r3, #0]
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	6959      	ldr	r1, [r3, #20]
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	891a      	ldrh	r2, [r3, #8]
 800340e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003410:	b29b      	uxth	r3, r3
 8003412:	f004 fb7d 	bl	8007b10 <USB_WritePMA>
 8003416:	e1d5      	b.n	80037c4 <HAL_PCD_EP_DB_Transmit+0x770>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	4619      	mov	r1, r3
 8003422:	4610      	mov	r0, r2
 8003424:	f7fe fdea 	bl	8001ffc <PCD_GET_EP_DBUF1_CNT>
 8003428:	4603      	mov	r3, r0
 800342a:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= TxPctSize)
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	699a      	ldr	r2, [r3, #24]
 8003430:	8bfb      	ldrh	r3, [r7, #30]
 8003432:	429a      	cmp	r2, r3
 8003434:	d308      	bcc.n	8003448 <HAL_PCD_EP_DB_Transmit+0x3f4>
    {
      ep->xfer_len -= TxPctSize;
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	699a      	ldr	r2, [r3, #24]
 800343a:	8bfb      	ldrh	r3, [r7, #30]
 800343c:	1ad2      	subs	r2, r2, r3
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	619a      	str	r2, [r3, #24]
 8003442:	e004      	b.n	800344e <HAL_PCD_EP_DB_Transmit+0x3fa>
 8003444:	07ff8f8f 	.word	0x07ff8f8f
    }
    else
    {
      ep->xfer_len = 0U;
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	2200      	movs	r2, #0
 800344c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	2b00      	cmp	r3, #0
 8003454:	f040 80c1 	bne.w	80035da <HAL_PCD_EP_DB_Transmit+0x586>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	785b      	ldrb	r3, [r3, #1]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d124      	bne.n	80034aa <HAL_PCD_EP_DB_Transmit+0x456>
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	00db      	lsls	r3, r3, #3
 8003466:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800346a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	00db      	lsls	r3, r3, #3
 8003476:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800347a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800347e:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8003482:	601a      	str	r2, [r3, #0]
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	00db      	lsls	r3, r3, #3
 800348a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800348e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	00db      	lsls	r3, r3, #3
 800349a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800349e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80034a2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80034a6:	601a      	str	r2, [r3, #0]
 80034a8:	e024      	b.n	80034f4 <HAL_PCD_EP_DB_Transmit+0x4a0>
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	785b      	ldrb	r3, [r3, #1]
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d120      	bne.n	80034f4 <HAL_PCD_EP_DB_Transmit+0x4a0>
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	00db      	lsls	r3, r3, #3
 80034b8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80034bc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80034cc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80034d0:	b292      	uxth	r2, r2
 80034d2:	601a      	str	r2, [r3, #0]
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	00db      	lsls	r3, r3, #3
 80034da:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 80034de:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	00db      	lsls	r3, r3, #3
 80034e8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80034ec:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80034f0:	6812      	ldr	r2, [r2, #0]
 80034f2:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	785b      	ldrb	r3, [r3, #1]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d124      	bne.n	8003546 <HAL_PCD_EP_DB_Transmit+0x4f2>
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	00db      	lsls	r3, r3, #3
 8003502:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003506:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800350a:	685a      	ldr	r2, [r3, #4]
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	00db      	lsls	r3, r3, #3
 8003512:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003516:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800351a:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800351e:	605a      	str	r2, [r3, #4]
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	00db      	lsls	r3, r3, #3
 8003526:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800352a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800352e:	685a      	ldr	r2, [r3, #4]
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	00db      	lsls	r3, r3, #3
 8003536:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800353a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800353e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003542:	605a      	str	r2, [r3, #4]
 8003544:	e024      	b.n	8003590 <HAL_PCD_EP_DB_Transmit+0x53c>
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	785b      	ldrb	r3, [r3, #1]
 800354a:	2b01      	cmp	r3, #1
 800354c:	d120      	bne.n	8003590 <HAL_PCD_EP_DB_Transmit+0x53c>
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	00db      	lsls	r3, r3, #3
 8003554:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003558:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800355c:	685a      	ldr	r2, [r3, #4]
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	00db      	lsls	r3, r3, #3
 8003564:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003568:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800356c:	b292      	uxth	r2, r2
 800356e:	605a      	str	r2, [r3, #4]
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	00db      	lsls	r3, r3, #3
 8003576:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 800357a:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	00db      	lsls	r3, r3, #3
 8003584:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003588:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800358c:	6852      	ldr	r2, [r2, #4]
 800358e:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	4619      	mov	r1, r3
 8003596:	68f8      	ldr	r0, [r7, #12]
 8003598:	f006 f8ee 	bl	8009778 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800359c:	88fb      	ldrh	r3, [r7, #6]
 800359e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	f040 810e 	bne.w	80037c4 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	461a      	mov	r2, r3
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	4413      	add	r3, r2
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	4b95      	ldr	r3, [pc, #596]	@ (8003810 <HAL_PCD_EP_DB_Transmit+0x7bc>)
 80035ba:	4013      	ands	r3, r2
 80035bc:	623b      	str	r3, [r7, #32]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	461a      	mov	r2, r3
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	441a      	add	r2, r3
 80035cc:	6a3b      	ldr	r3, [r7, #32]
 80035ce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80035d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035d6:	6013      	str	r3, [r2, #0]
 80035d8:	e0f4      	b.n	80037c4 <HAL_PCD_EP_DB_Transmit+0x770>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80035da:	88fb      	ldrh	r3, [r7, #6]
 80035dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d117      	bne.n	8003614 <HAL_PCD_EP_DB_Transmit+0x5c0>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	461a      	mov	r2, r3
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	4413      	add	r3, r2
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	4b86      	ldr	r3, [pc, #536]	@ (8003810 <HAL_PCD_EP_DB_Transmit+0x7bc>)
 80035f6:	4013      	ands	r3, r2
 80035f8:	617b      	str	r3, [r7, #20]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	461a      	mov	r2, r3
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	441a      	add	r2, r3
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800360e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003612:	6013      	str	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800361a:	2b01      	cmp	r3, #1
 800361c:	f040 80d2 	bne.w	80037c4 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        ep->xfer_buff += TxPctSize;
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	695a      	ldr	r2, [r3, #20]
 8003624:	8bfb      	ldrh	r3, [r7, #30]
 8003626:	441a      	add	r2, r3
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	69da      	ldr	r2, [r3, #28]
 8003630:	8bfb      	ldrh	r3, [r7, #30]
 8003632:	441a      	add	r2, r3
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	6a1a      	ldr	r2, [r3, #32]
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	691b      	ldr	r3, [r3, #16]
 8003640:	429a      	cmp	r2, r3
 8003642:	d309      	bcc.n	8003658 <HAL_PCD_EP_DB_Transmit+0x604>
        {
          len = ep->maxpacket;
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	6a1a      	ldr	r2, [r3, #32]
 800364e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003650:	1ad2      	subs	r2, r2, r3
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	621a      	str	r2, [r3, #32]
 8003656:	e014      	b.n	8003682 <HAL_PCD_EP_DB_Transmit+0x62e>
        }
        else if (ep->xfer_len_db == 0U)
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	6a1b      	ldr	r3, [r3, #32]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d106      	bne.n	800366e <HAL_PCD_EP_DB_Transmit+0x61a>
        {
          len = TxPctSize;
 8003660:	8bfb      	ldrh	r3, [r7, #30]
 8003662:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800366c:	e009      	b.n	8003682 <HAL_PCD_EP_DB_Transmit+0x62e>
        }
        else
        {
          len = ep->xfer_len_db;
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	6a1b      	ldr	r3, [r3, #32]
 8003672:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	2200      	movs	r2, #0
 8003678:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	785b      	ldrb	r3, [r3, #1]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d16a      	bne.n	8003760 <HAL_PCD_EP_DB_Transmit+0x70c>
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	00db      	lsls	r3, r3, #3
 8003690:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003694:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003698:	685a      	ldr	r2, [r3, #4]
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	00db      	lsls	r3, r3, #3
 80036a0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80036a4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80036a8:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80036ac:	605a      	str	r2, [r3, #4]
 80036ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d112      	bne.n	80036da <HAL_PCD_EP_DB_Transmit+0x686>
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	00db      	lsls	r3, r3, #3
 80036ba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80036be:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80036c2:	685a      	ldr	r2, [r3, #4]
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	00db      	lsls	r3, r3, #3
 80036ca:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80036ce:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80036d2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80036d6:	605a      	str	r2, [r3, #4]
 80036d8:	e06a      	b.n	80037b0 <HAL_PCD_EP_DB_Transmit+0x75c>
 80036da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036dc:	2b3e      	cmp	r3, #62	@ 0x3e
 80036de:	d81e      	bhi.n	800371e <HAL_PCD_EP_DB_Transmit+0x6ca>
 80036e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e2:	085b      	lsrs	r3, r3, #1
 80036e4:	61bb      	str	r3, [r7, #24]
 80036e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e8:	f003 0301 	and.w	r3, r3, #1
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d002      	beq.n	80036f6 <HAL_PCD_EP_DB_Transmit+0x6a2>
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	3301      	adds	r3, #1
 80036f4:	61bb      	str	r3, [r7, #24]
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	00db      	lsls	r3, r3, #3
 80036fc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003700:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003704:	6859      	ldr	r1, [r3, #4]
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	069a      	lsls	r2, r3, #26
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	00db      	lsls	r3, r3, #3
 8003710:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003714:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003718:	430a      	orrs	r2, r1
 800371a:	605a      	str	r2, [r3, #4]
 800371c:	e048      	b.n	80037b0 <HAL_PCD_EP_DB_Transmit+0x75c>
 800371e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003720:	095b      	lsrs	r3, r3, #5
 8003722:	61bb      	str	r3, [r7, #24]
 8003724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003726:	f003 031f 	and.w	r3, r3, #31
 800372a:	2b00      	cmp	r3, #0
 800372c:	d102      	bne.n	8003734 <HAL_PCD_EP_DB_Transmit+0x6e0>
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	3b01      	subs	r3, #1
 8003732:	61bb      	str	r3, [r7, #24]
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	00db      	lsls	r3, r3, #3
 800373a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800373e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003742:	685a      	ldr	r2, [r3, #4]
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	069b      	lsls	r3, r3, #26
 8003748:	431a      	orrs	r2, r3
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	00db      	lsls	r3, r3, #3
 8003750:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003754:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003758:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800375c:	605a      	str	r2, [r3, #4]
 800375e:	e027      	b.n	80037b0 <HAL_PCD_EP_DB_Transmit+0x75c>
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	785b      	ldrb	r3, [r3, #1]
 8003764:	2b01      	cmp	r3, #1
 8003766:	d123      	bne.n	80037b0 <HAL_PCD_EP_DB_Transmit+0x75c>
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	00db      	lsls	r3, r3, #3
 800376e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003772:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003776:	685a      	ldr	r2, [r3, #4]
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	00db      	lsls	r3, r3, #3
 800377e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003782:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003786:	b292      	uxth	r2, r2
 8003788:	605a      	str	r2, [r3, #4]
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	00db      	lsls	r3, r3, #3
 8003790:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003794:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003798:	6859      	ldr	r1, [r3, #4]
 800379a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800379c:	041a      	lsls	r2, r3, #16
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	00db      	lsls	r3, r3, #3
 80037a4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80037a8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80037ac:	430a      	orrs	r2, r1
 80037ae:	605a      	str	r2, [r3, #4]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6818      	ldr	r0, [r3, #0]
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	6959      	ldr	r1, [r3, #20]
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	895a      	ldrh	r2, [r3, #10]
 80037bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037be:	b29b      	uxth	r3, r3
 80037c0:	f004 f9a6 	bl	8007b10 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	461a      	mov	r2, r3
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	4413      	add	r3, r2
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	4b0f      	ldr	r3, [pc, #60]	@ (8003814 <HAL_PCD_EP_DB_Transmit+0x7c0>)
 80037d6:	4013      	ands	r3, r2
 80037d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80037da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037dc:	f083 0310 	eor.w	r3, r3, #16
 80037e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80037e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037e4:	f083 0320 	eor.w	r3, r3, #32
 80037e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	461a      	mov	r2, r3
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	441a      	add	r2, r3
 80037f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80037fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003802:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3738      	adds	r7, #56	@ 0x38
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	07ff8f8f 	.word	0x07ff8f8f
 8003814:	07ff8fbf 	.word	0x07ff8fbf

08003818 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003818:	b480      	push	{r7}
 800381a:	b087      	sub	sp, #28
 800381c:	af00      	add	r7, sp, #0
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	607b      	str	r3, [r7, #4]
 8003822:	460b      	mov	r3, r1
 8003824:	817b      	strh	r3, [r7, #10]
 8003826:	4613      	mov	r3, r2
 8003828:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800382a:	897b      	ldrh	r3, [r7, #10]
 800382c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003830:	b29b      	uxth	r3, r3
 8003832:	2b00      	cmp	r3, #0
 8003834:	d00c      	beq.n	8003850 <HAL_PCDEx_PMAConfig+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003836:	897b      	ldrh	r3, [r7, #10]
 8003838:	f003 0207 	and.w	r2, r3, #7
 800383c:	4613      	mov	r3, r2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	4413      	add	r3, r2
 8003842:	00db      	lsls	r3, r3, #3
 8003844:	3310      	adds	r3, #16
 8003846:	68fa      	ldr	r2, [r7, #12]
 8003848:	4413      	add	r3, r2
 800384a:	3304      	adds	r3, #4
 800384c:	617b      	str	r3, [r7, #20]
 800384e:	e00a      	b.n	8003866 <HAL_PCDEx_PMAConfig+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003850:	897a      	ldrh	r2, [r7, #10]
 8003852:	4613      	mov	r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	4413      	add	r3, r2
 8003858:	00db      	lsls	r3, r3, #3
 800385a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800385e:	68fa      	ldr	r2, [r7, #12]
 8003860:	4413      	add	r3, r2
 8003862:	3304      	adds	r3, #4
 8003864:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003866:	893b      	ldrh	r3, [r7, #8]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d107      	bne.n	800387c <HAL_PCDEx_PMAConfig+0x64>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	2200      	movs	r2, #0
 8003870:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	b29a      	uxth	r2, r3
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	80da      	strh	r2, [r3, #6]
 800387a:	e00b      	b.n	8003894 <HAL_PCDEx_PMAConfig+0x7c>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	2201      	movs	r2, #1
 8003880:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	b29a      	uxth	r2, r3
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	0c1b      	lsrs	r3, r3, #16
 800388e:	b29a      	uxth	r2, r3
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	371c      	adds	r7, #28
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr

080038a2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80038a2:	b480      	push	{r7}
 80038a4:	b085      	sub	sp, #20
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
  hpcd->LPM_State = LPM_L0;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038c4:	f043 0201 	orr.w	r2, r3, #1
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	655a      	str	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038d0:	f043 0202 	orr.w	r2, r3, #2
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	655a      	str	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3714      	adds	r7, #20
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr

080038e6 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80038e6:	b480      	push	{r7}
 80038e8:	b083      	sub	sp, #12
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
 80038ee:	460b      	mov	r3, r1
 80038f0:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80038f2:	bf00      	nop
 80038f4:	370c      	adds	r7, #12
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
	...

08003900 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003900:	b480      	push	{r7}
 8003902:	af00      	add	r7, sp, #0
  SET_BIT(PWR->USBSCR, PWR_USBSCR_USB33SV);
 8003904:	4b05      	ldr	r3, [pc, #20]	@ (800391c <HAL_PWREx_EnableVddUSB+0x1c>)
 8003906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003908:	4a04      	ldr	r2, [pc, #16]	@ (800391c <HAL_PWREx_EnableVddUSB+0x1c>)
 800390a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800390e:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003910:	bf00      	nop
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	44020800 	.word	0x44020800

08003920 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b088      	sub	sp, #32
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d102      	bne.n	8003934 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	f000 bc28 	b.w	8004184 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003934:	4b94      	ldr	r3, [pc, #592]	@ (8003b88 <HAL_RCC_OscConfig+0x268>)
 8003936:	69db      	ldr	r3, [r3, #28]
 8003938:	f003 0318 	and.w	r3, r3, #24
 800393c:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 800393e:	4b92      	ldr	r3, [pc, #584]	@ (8003b88 <HAL_RCC_OscConfig+0x268>)
 8003940:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003942:	f003 0303 	and.w	r3, r3, #3
 8003946:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0310 	and.w	r3, r3, #16
 8003950:	2b00      	cmp	r3, #0
 8003952:	d05b      	beq.n	8003a0c <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	2b08      	cmp	r3, #8
 8003958:	d005      	beq.n	8003966 <HAL_RCC_OscConfig+0x46>
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	2b18      	cmp	r3, #24
 800395e:	d114      	bne.n	800398a <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	2b02      	cmp	r3, #2
 8003964:	d111      	bne.n	800398a <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	69db      	ldr	r3, [r3, #28]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d102      	bne.n	8003974 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	f000 bc08 	b.w	8004184 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8003974:	4b84      	ldr	r3, [pc, #528]	@ (8003b88 <HAL_RCC_OscConfig+0x268>)
 8003976:	699b      	ldr	r3, [r3, #24]
 8003978:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a1b      	ldr	r3, [r3, #32]
 8003980:	041b      	lsls	r3, r3, #16
 8003982:	4981      	ldr	r1, [pc, #516]	@ (8003b88 <HAL_RCC_OscConfig+0x268>)
 8003984:	4313      	orrs	r3, r2
 8003986:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8003988:	e040      	b.n	8003a0c <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	69db      	ldr	r3, [r3, #28]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d023      	beq.n	80039da <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003992:	4b7d      	ldr	r3, [pc, #500]	@ (8003b88 <HAL_RCC_OscConfig+0x268>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a7c      	ldr	r2, [pc, #496]	@ (8003b88 <HAL_RCC_OscConfig+0x268>)
 8003998:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800399c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800399e:	f7fd f9d5 	bl	8000d4c <HAL_GetTick>
 80039a2:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80039a4:	e008      	b.n	80039b8 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80039a6:	f7fd f9d1 	bl	8000d4c <HAL_GetTick>
 80039aa:	4602      	mov	r2, r0
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d901      	bls.n	80039b8 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 80039b4:	2303      	movs	r3, #3
 80039b6:	e3e5      	b.n	8004184 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80039b8:	4b73      	ldr	r3, [pc, #460]	@ (8003b88 <HAL_RCC_OscConfig+0x268>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d0f0      	beq.n	80039a6 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80039c4:	4b70      	ldr	r3, [pc, #448]	@ (8003b88 <HAL_RCC_OscConfig+0x268>)
 80039c6:	699b      	ldr	r3, [r3, #24]
 80039c8:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a1b      	ldr	r3, [r3, #32]
 80039d0:	041b      	lsls	r3, r3, #16
 80039d2:	496d      	ldr	r1, [pc, #436]	@ (8003b88 <HAL_RCC_OscConfig+0x268>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	618b      	str	r3, [r1, #24]
 80039d8:	e018      	b.n	8003a0c <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80039da:	4b6b      	ldr	r3, [pc, #428]	@ (8003b88 <HAL_RCC_OscConfig+0x268>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a6a      	ldr	r2, [pc, #424]	@ (8003b88 <HAL_RCC_OscConfig+0x268>)
 80039e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e6:	f7fd f9b1 	bl	8000d4c <HAL_GetTick>
 80039ea:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80039ec:	e008      	b.n	8003a00 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80039ee:	f7fd f9ad 	bl	8000d4c <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d901      	bls.n	8003a00 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	e3c1      	b.n	8004184 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003a00:	4b61      	ldr	r3, [pc, #388]	@ (8003b88 <HAL_RCC_OscConfig+0x268>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d1f0      	bne.n	80039ee <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0301 	and.w	r3, r3, #1
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	f000 80a0 	beq.w	8003b5a <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	2b10      	cmp	r3, #16
 8003a1e:	d005      	beq.n	8003a2c <HAL_RCC_OscConfig+0x10c>
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	2b18      	cmp	r3, #24
 8003a24:	d109      	bne.n	8003a3a <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	2b03      	cmp	r3, #3
 8003a2a:	d106      	bne.n	8003a3a <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	f040 8092 	bne.w	8003b5a <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e3a4      	b.n	8004184 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a42:	d106      	bne.n	8003a52 <HAL_RCC_OscConfig+0x132>
 8003a44:	4b50      	ldr	r3, [pc, #320]	@ (8003b88 <HAL_RCC_OscConfig+0x268>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a4f      	ldr	r2, [pc, #316]	@ (8003b88 <HAL_RCC_OscConfig+0x268>)
 8003a4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a4e:	6013      	str	r3, [r2, #0]
 8003a50:	e058      	b.n	8003b04 <HAL_RCC_OscConfig+0x1e4>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d112      	bne.n	8003a80 <HAL_RCC_OscConfig+0x160>
 8003a5a:	4b4b      	ldr	r3, [pc, #300]	@ (8003b88 <HAL_RCC_OscConfig+0x268>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a4a      	ldr	r2, [pc, #296]	@ (8003b88 <HAL_RCC_OscConfig+0x268>)
 8003a60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a64:	6013      	str	r3, [r2, #0]
 8003a66:	4b48      	ldr	r3, [pc, #288]	@ (8003b88 <HAL_RCC_OscConfig+0x268>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a47      	ldr	r2, [pc, #284]	@ (8003b88 <HAL_RCC_OscConfig+0x268>)
 8003a6c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003a70:	6013      	str	r3, [r2, #0]
 8003a72:	4b45      	ldr	r3, [pc, #276]	@ (8003b88 <HAL_RCC_OscConfig+0x268>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a44      	ldr	r2, [pc, #272]	@ (8003b88 <HAL_RCC_OscConfig+0x268>)
 8003a78:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a7c:	6013      	str	r3, [r2, #0]
 8003a7e:	e041      	b.n	8003b04 <HAL_RCC_OscConfig+0x1e4>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a88:	d112      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x190>
 8003a8a:	4b3f      	ldr	r3, [pc, #252]	@ (8003b88 <HAL_RCC_OscConfig+0x268>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a3e      	ldr	r2, [pc, #248]	@ (8003b88 <HAL_RCC_OscConfig+0x268>)
 8003a90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a94:	6013      	str	r3, [r2, #0]
 8003a96:	4b3c      	ldr	r3, [pc, #240]	@ (8003b88 <HAL_RCC_OscConfig+0x268>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a3b      	ldr	r2, [pc, #236]	@ (8003b88 <HAL_RCC_OscConfig+0x268>)
 8003a9c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003aa0:	6013      	str	r3, [r2, #0]
 8003aa2:	4b39      	ldr	r3, [pc, #228]	@ (8003b88 <HAL_RCC_OscConfig+0x268>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a38      	ldr	r2, [pc, #224]	@ (8003b88 <HAL_RCC_OscConfig+0x268>)
 8003aa8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003aac:	6013      	str	r3, [r2, #0]
 8003aae:	e029      	b.n	8003b04 <HAL_RCC_OscConfig+0x1e4>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8003ab8:	d112      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x1c0>
 8003aba:	4b33      	ldr	r3, [pc, #204]	@ (8003b88 <HAL_RCC_OscConfig+0x268>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a32      	ldr	r2, [pc, #200]	@ (8003b88 <HAL_RCC_OscConfig+0x268>)
 8003ac0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ac4:	6013      	str	r3, [r2, #0]
 8003ac6:	4b30      	ldr	r3, [pc, #192]	@ (8003b88 <HAL_RCC_OscConfig+0x268>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a2f      	ldr	r2, [pc, #188]	@ (8003b88 <HAL_RCC_OscConfig+0x268>)
 8003acc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ad0:	6013      	str	r3, [r2, #0]
 8003ad2:	4b2d      	ldr	r3, [pc, #180]	@ (8003b88 <HAL_RCC_OscConfig+0x268>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a2c      	ldr	r2, [pc, #176]	@ (8003b88 <HAL_RCC_OscConfig+0x268>)
 8003ad8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003adc:	6013      	str	r3, [r2, #0]
 8003ade:	e011      	b.n	8003b04 <HAL_RCC_OscConfig+0x1e4>
 8003ae0:	4b29      	ldr	r3, [pc, #164]	@ (8003b88 <HAL_RCC_OscConfig+0x268>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a28      	ldr	r2, [pc, #160]	@ (8003b88 <HAL_RCC_OscConfig+0x268>)
 8003ae6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003aea:	6013      	str	r3, [r2, #0]
 8003aec:	4b26      	ldr	r3, [pc, #152]	@ (8003b88 <HAL_RCC_OscConfig+0x268>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a25      	ldr	r2, [pc, #148]	@ (8003b88 <HAL_RCC_OscConfig+0x268>)
 8003af2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003af6:	6013      	str	r3, [r2, #0]
 8003af8:	4b23      	ldr	r3, [pc, #140]	@ (8003b88 <HAL_RCC_OscConfig+0x268>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a22      	ldr	r2, [pc, #136]	@ (8003b88 <HAL_RCC_OscConfig+0x268>)
 8003afe:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003b02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d013      	beq.n	8003b34 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b0c:	f7fd f91e 	bl	8000d4c <HAL_GetTick>
 8003b10:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b12:	e008      	b.n	8003b26 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003b14:	f7fd f91a 	bl	8000d4c <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b64      	cmp	r3, #100	@ 0x64
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e32e      	b.n	8004184 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b26:	4b18      	ldr	r3, [pc, #96]	@ (8003b88 <HAL_RCC_OscConfig+0x268>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d0f0      	beq.n	8003b14 <HAL_RCC_OscConfig+0x1f4>
 8003b32:	e012      	b.n	8003b5a <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b34:	f7fd f90a 	bl	8000d4c <HAL_GetTick>
 8003b38:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b3a:	e008      	b.n	8003b4e <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003b3c:	f7fd f906 	bl	8000d4c <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	2b64      	cmp	r3, #100	@ 0x64
 8003b48:	d901      	bls.n	8003b4e <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e31a      	b.n	8004184 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b4e:	4b0e      	ldr	r3, [pc, #56]	@ (8003b88 <HAL_RCC_OscConfig+0x268>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d1f0      	bne.n	8003b3c <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0302 	and.w	r3, r3, #2
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	f000 809a 	beq.w	8003c9c <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d005      	beq.n	8003b7a <HAL_RCC_OscConfig+0x25a>
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	2b18      	cmp	r3, #24
 8003b72:	d149      	bne.n	8003c08 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d146      	bne.n	8003c08 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d104      	bne.n	8003b8c <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e2fe      	b.n	8004184 <HAL_RCC_OscConfig+0x864>
 8003b86:	bf00      	nop
 8003b88:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d11c      	bne.n	8003bcc <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8003b92:	4b9a      	ldr	r3, [pc, #616]	@ (8003dfc <HAL_RCC_OscConfig+0x4dc>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0218 	and.w	r2, r3, #24
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d014      	beq.n	8003bcc <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8003ba2:	4b96      	ldr	r3, [pc, #600]	@ (8003dfc <HAL_RCC_OscConfig+0x4dc>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f023 0218 	bic.w	r2, r3, #24
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	4993      	ldr	r1, [pc, #588]	@ (8003dfc <HAL_RCC_OscConfig+0x4dc>)
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8003bb4:	f000 fdd0 	bl	8004758 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003bb8:	4b91      	ldr	r3, [pc, #580]	@ (8003e00 <HAL_RCC_OscConfig+0x4e0>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f7fd f83b 	bl	8000c38 <HAL_InitTick>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d001      	beq.n	8003bcc <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e2db      	b.n	8004184 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bcc:	f7fd f8be 	bl	8000d4c <HAL_GetTick>
 8003bd0:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bd2:	e008      	b.n	8003be6 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003bd4:	f7fd f8ba 	bl	8000d4c <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d901      	bls.n	8003be6 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e2ce      	b.n	8004184 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003be6:	4b85      	ldr	r3, [pc, #532]	@ (8003dfc <HAL_RCC_OscConfig+0x4dc>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0302 	and.w	r3, r3, #2
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d0f0      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8003bf2:	4b82      	ldr	r3, [pc, #520]	@ (8003dfc <HAL_RCC_OscConfig+0x4dc>)
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	041b      	lsls	r3, r3, #16
 8003c00:	497e      	ldr	r1, [pc, #504]	@ (8003dfc <HAL_RCC_OscConfig+0x4dc>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8003c06:	e049      	b.n	8003c9c <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d02c      	beq.n	8003c6a <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8003c10:	4b7a      	ldr	r3, [pc, #488]	@ (8003dfc <HAL_RCC_OscConfig+0x4dc>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f023 0218 	bic.w	r2, r3, #24
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	691b      	ldr	r3, [r3, #16]
 8003c1c:	4977      	ldr	r1, [pc, #476]	@ (8003dfc <HAL_RCC_OscConfig+0x4dc>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8003c22:	4b76      	ldr	r3, [pc, #472]	@ (8003dfc <HAL_RCC_OscConfig+0x4dc>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a75      	ldr	r2, [pc, #468]	@ (8003dfc <HAL_RCC_OscConfig+0x4dc>)
 8003c28:	f043 0301 	orr.w	r3, r3, #1
 8003c2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c2e:	f7fd f88d 	bl	8000d4c <HAL_GetTick>
 8003c32:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c34:	e008      	b.n	8003c48 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003c36:	f7fd f889 	bl	8000d4c <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d901      	bls.n	8003c48 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e29d      	b.n	8004184 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c48:	4b6c      	ldr	r3, [pc, #432]	@ (8003dfc <HAL_RCC_OscConfig+0x4dc>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0302 	and.w	r3, r3, #2
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d0f0      	beq.n	8003c36 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8003c54:	4b69      	ldr	r3, [pc, #420]	@ (8003dfc <HAL_RCC_OscConfig+0x4dc>)
 8003c56:	691b      	ldr	r3, [r3, #16]
 8003c58:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	695b      	ldr	r3, [r3, #20]
 8003c60:	041b      	lsls	r3, r3, #16
 8003c62:	4966      	ldr	r1, [pc, #408]	@ (8003dfc <HAL_RCC_OscConfig+0x4dc>)
 8003c64:	4313      	orrs	r3, r2
 8003c66:	610b      	str	r3, [r1, #16]
 8003c68:	e018      	b.n	8003c9c <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c6a:	4b64      	ldr	r3, [pc, #400]	@ (8003dfc <HAL_RCC_OscConfig+0x4dc>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a63      	ldr	r2, [pc, #396]	@ (8003dfc <HAL_RCC_OscConfig+0x4dc>)
 8003c70:	f023 0301 	bic.w	r3, r3, #1
 8003c74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c76:	f7fd f869 	bl	8000d4c <HAL_GetTick>
 8003c7a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c7c:	e008      	b.n	8003c90 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003c7e:	f7fd f865 	bl	8000d4c <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d901      	bls.n	8003c90 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e279      	b.n	8004184 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c90:	4b5a      	ldr	r3, [pc, #360]	@ (8003dfc <HAL_RCC_OscConfig+0x4dc>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0302 	and.w	r3, r3, #2
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d1f0      	bne.n	8003c7e <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0308 	and.w	r3, r3, #8
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d03c      	beq.n	8003d22 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	699b      	ldr	r3, [r3, #24]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d01c      	beq.n	8003cea <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cb0:	4b52      	ldr	r3, [pc, #328]	@ (8003dfc <HAL_RCC_OscConfig+0x4dc>)
 8003cb2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003cb6:	4a51      	ldr	r2, [pc, #324]	@ (8003dfc <HAL_RCC_OscConfig+0x4dc>)
 8003cb8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003cbc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cc0:	f7fd f844 	bl	8000d4c <HAL_GetTick>
 8003cc4:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003cc6:	e008      	b.n	8003cda <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003cc8:	f7fd f840 	bl	8000d4c <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e254      	b.n	8004184 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003cda:	4b48      	ldr	r3, [pc, #288]	@ (8003dfc <HAL_RCC_OscConfig+0x4dc>)
 8003cdc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ce0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d0ef      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x3a8>
 8003ce8:	e01b      	b.n	8003d22 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cea:	4b44      	ldr	r3, [pc, #272]	@ (8003dfc <HAL_RCC_OscConfig+0x4dc>)
 8003cec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003cf0:	4a42      	ldr	r2, [pc, #264]	@ (8003dfc <HAL_RCC_OscConfig+0x4dc>)
 8003cf2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003cf6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cfa:	f7fd f827 	bl	8000d4c <HAL_GetTick>
 8003cfe:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003d00:	e008      	b.n	8003d14 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003d02:	f7fd f823 	bl	8000d4c <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d901      	bls.n	8003d14 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e237      	b.n	8004184 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003d14:	4b39      	ldr	r3, [pc, #228]	@ (8003dfc <HAL_RCC_OscConfig+0x4dc>)
 8003d16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d1a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d1ef      	bne.n	8003d02 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0304 	and.w	r3, r3, #4
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	f000 80d2 	beq.w	8003ed4 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003d30:	4b34      	ldr	r3, [pc, #208]	@ (8003e04 <HAL_RCC_OscConfig+0x4e4>)
 8003d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d34:	f003 0301 	and.w	r3, r3, #1
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d118      	bne.n	8003d6e <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8003d3c:	4b31      	ldr	r3, [pc, #196]	@ (8003e04 <HAL_RCC_OscConfig+0x4e4>)
 8003d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d40:	4a30      	ldr	r2, [pc, #192]	@ (8003e04 <HAL_RCC_OscConfig+0x4e4>)
 8003d42:	f043 0301 	orr.w	r3, r3, #1
 8003d46:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d48:	f7fd f800 	bl	8000d4c <HAL_GetTick>
 8003d4c:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003d4e:	e008      	b.n	8003d62 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d50:	f7fc fffc 	bl	8000d4c <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d901      	bls.n	8003d62 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e210      	b.n	8004184 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003d62:	4b28      	ldr	r3, [pc, #160]	@ (8003e04 <HAL_RCC_OscConfig+0x4e4>)
 8003d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d66:	f003 0301 	and.w	r3, r3, #1
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d0f0      	beq.n	8003d50 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d108      	bne.n	8003d88 <HAL_RCC_OscConfig+0x468>
 8003d76:	4b21      	ldr	r3, [pc, #132]	@ (8003dfc <HAL_RCC_OscConfig+0x4dc>)
 8003d78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d7c:	4a1f      	ldr	r2, [pc, #124]	@ (8003dfc <HAL_RCC_OscConfig+0x4dc>)
 8003d7e:	f043 0301 	orr.w	r3, r3, #1
 8003d82:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003d86:	e074      	b.n	8003e72 <HAL_RCC_OscConfig+0x552>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d118      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x4a2>
 8003d90:	4b1a      	ldr	r3, [pc, #104]	@ (8003dfc <HAL_RCC_OscConfig+0x4dc>)
 8003d92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d96:	4a19      	ldr	r2, [pc, #100]	@ (8003dfc <HAL_RCC_OscConfig+0x4dc>)
 8003d98:	f023 0301 	bic.w	r3, r3, #1
 8003d9c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003da0:	4b16      	ldr	r3, [pc, #88]	@ (8003dfc <HAL_RCC_OscConfig+0x4dc>)
 8003da2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003da6:	4a15      	ldr	r2, [pc, #84]	@ (8003dfc <HAL_RCC_OscConfig+0x4dc>)
 8003da8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003dac:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003db0:	4b12      	ldr	r3, [pc, #72]	@ (8003dfc <HAL_RCC_OscConfig+0x4dc>)
 8003db2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003db6:	4a11      	ldr	r2, [pc, #68]	@ (8003dfc <HAL_RCC_OscConfig+0x4dc>)
 8003db8:	f023 0304 	bic.w	r3, r3, #4
 8003dbc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003dc0:	e057      	b.n	8003e72 <HAL_RCC_OscConfig+0x552>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	2b05      	cmp	r3, #5
 8003dc8:	d11e      	bne.n	8003e08 <HAL_RCC_OscConfig+0x4e8>
 8003dca:	4b0c      	ldr	r3, [pc, #48]	@ (8003dfc <HAL_RCC_OscConfig+0x4dc>)
 8003dcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003dd0:	4a0a      	ldr	r2, [pc, #40]	@ (8003dfc <HAL_RCC_OscConfig+0x4dc>)
 8003dd2:	f043 0304 	orr.w	r3, r3, #4
 8003dd6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003dda:	4b08      	ldr	r3, [pc, #32]	@ (8003dfc <HAL_RCC_OscConfig+0x4dc>)
 8003ddc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003de0:	4a06      	ldr	r2, [pc, #24]	@ (8003dfc <HAL_RCC_OscConfig+0x4dc>)
 8003de2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003de6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003dea:	4b04      	ldr	r3, [pc, #16]	@ (8003dfc <HAL_RCC_OscConfig+0x4dc>)
 8003dec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003df0:	4a02      	ldr	r2, [pc, #8]	@ (8003dfc <HAL_RCC_OscConfig+0x4dc>)
 8003df2:	f043 0301 	orr.w	r3, r3, #1
 8003df6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003dfa:	e03a      	b.n	8003e72 <HAL_RCC_OscConfig+0x552>
 8003dfc:	44020c00 	.word	0x44020c00
 8003e00:	20000008 	.word	0x20000008
 8003e04:	44020800 	.word	0x44020800
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	2b85      	cmp	r3, #133	@ 0x85
 8003e0e:	d118      	bne.n	8003e42 <HAL_RCC_OscConfig+0x522>
 8003e10:	4ba2      	ldr	r3, [pc, #648]	@ (800409c <HAL_RCC_OscConfig+0x77c>)
 8003e12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e16:	4aa1      	ldr	r2, [pc, #644]	@ (800409c <HAL_RCC_OscConfig+0x77c>)
 8003e18:	f043 0304 	orr.w	r3, r3, #4
 8003e1c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003e20:	4b9e      	ldr	r3, [pc, #632]	@ (800409c <HAL_RCC_OscConfig+0x77c>)
 8003e22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e26:	4a9d      	ldr	r2, [pc, #628]	@ (800409c <HAL_RCC_OscConfig+0x77c>)
 8003e28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e2c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003e30:	4b9a      	ldr	r3, [pc, #616]	@ (800409c <HAL_RCC_OscConfig+0x77c>)
 8003e32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e36:	4a99      	ldr	r2, [pc, #612]	@ (800409c <HAL_RCC_OscConfig+0x77c>)
 8003e38:	f043 0301 	orr.w	r3, r3, #1
 8003e3c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003e40:	e017      	b.n	8003e72 <HAL_RCC_OscConfig+0x552>
 8003e42:	4b96      	ldr	r3, [pc, #600]	@ (800409c <HAL_RCC_OscConfig+0x77c>)
 8003e44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e48:	4a94      	ldr	r2, [pc, #592]	@ (800409c <HAL_RCC_OscConfig+0x77c>)
 8003e4a:	f023 0301 	bic.w	r3, r3, #1
 8003e4e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003e52:	4b92      	ldr	r3, [pc, #584]	@ (800409c <HAL_RCC_OscConfig+0x77c>)
 8003e54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e58:	4a90      	ldr	r2, [pc, #576]	@ (800409c <HAL_RCC_OscConfig+0x77c>)
 8003e5a:	f023 0304 	bic.w	r3, r3, #4
 8003e5e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003e62:	4b8e      	ldr	r3, [pc, #568]	@ (800409c <HAL_RCC_OscConfig+0x77c>)
 8003e64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e68:	4a8c      	ldr	r2, [pc, #560]	@ (800409c <HAL_RCC_OscConfig+0x77c>)
 8003e6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e6e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d016      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e7a:	f7fc ff67 	bl	8000d4c <HAL_GetTick>
 8003e7e:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e80:	e00a      	b.n	8003e98 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e82:	f7fc ff63 	bl	8000d4c <HAL_GetTick>
 8003e86:	4602      	mov	r2, r0
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d901      	bls.n	8003e98 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e175      	b.n	8004184 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e98:	4b80      	ldr	r3, [pc, #512]	@ (800409c <HAL_RCC_OscConfig+0x77c>)
 8003e9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e9e:	f003 0302 	and.w	r3, r3, #2
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d0ed      	beq.n	8003e82 <HAL_RCC_OscConfig+0x562>
 8003ea6:	e015      	b.n	8003ed4 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ea8:	f7fc ff50 	bl	8000d4c <HAL_GetTick>
 8003eac:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003eae:	e00a      	b.n	8003ec6 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eb0:	f7fc ff4c 	bl	8000d4c <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e15e      	b.n	8004184 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ec6:	4b75      	ldr	r3, [pc, #468]	@ (800409c <HAL_RCC_OscConfig+0x77c>)
 8003ec8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ecc:	f003 0302 	and.w	r3, r3, #2
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d1ed      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0320 	and.w	r3, r3, #32
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d036      	beq.n	8003f4e <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d019      	beq.n	8003f1c <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ee8:	4b6c      	ldr	r3, [pc, #432]	@ (800409c <HAL_RCC_OscConfig+0x77c>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a6b      	ldr	r2, [pc, #428]	@ (800409c <HAL_RCC_OscConfig+0x77c>)
 8003eee:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003ef2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ef4:	f7fc ff2a 	bl	8000d4c <HAL_GetTick>
 8003ef8:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003efa:	e008      	b.n	8003f0e <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8003efc:	f7fc ff26 	bl	8000d4c <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d901      	bls.n	8003f0e <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e13a      	b.n	8004184 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003f0e:	4b63      	ldr	r3, [pc, #396]	@ (800409c <HAL_RCC_OscConfig+0x77c>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d0f0      	beq.n	8003efc <HAL_RCC_OscConfig+0x5dc>
 8003f1a:	e018      	b.n	8003f4e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003f1c:	4b5f      	ldr	r3, [pc, #380]	@ (800409c <HAL_RCC_OscConfig+0x77c>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a5e      	ldr	r2, [pc, #376]	@ (800409c <HAL_RCC_OscConfig+0x77c>)
 8003f22:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003f26:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f28:	f7fc ff10 	bl	8000d4c <HAL_GetTick>
 8003f2c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003f2e:	e008      	b.n	8003f42 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8003f30:	f7fc ff0c 	bl	8000d4c <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d901      	bls.n	8003f42 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e120      	b.n	8004184 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003f42:	4b56      	ldr	r3, [pc, #344]	@ (800409c <HAL_RCC_OscConfig+0x77c>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d1f0      	bne.n	8003f30 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	f000 8115 	beq.w	8004182 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	2b18      	cmp	r3, #24
 8003f5c:	f000 80af 	beq.w	80040be <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	f040 8086 	bne.w	8004076 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8003f6a:	4b4c      	ldr	r3, [pc, #304]	@ (800409c <HAL_RCC_OscConfig+0x77c>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a4b      	ldr	r2, [pc, #300]	@ (800409c <HAL_RCC_OscConfig+0x77c>)
 8003f70:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f76:	f7fc fee9 	bl	8000d4c <HAL_GetTick>
 8003f7a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003f7c:	e008      	b.n	8003f90 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003f7e:	f7fc fee5 	bl	8000d4c <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d901      	bls.n	8003f90 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e0f9      	b.n	8004184 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003f90:	4b42      	ldr	r3, [pc, #264]	@ (800409c <HAL_RCC_OscConfig+0x77c>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1f0      	bne.n	8003f7e <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8003f9c:	4b3f      	ldr	r3, [pc, #252]	@ (800409c <HAL_RCC_OscConfig+0x77c>)
 8003f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fa0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003fa4:	f023 0303 	bic.w	r3, r3, #3
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003fb0:	0212      	lsls	r2, r2, #8
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	4939      	ldr	r1, [pc, #228]	@ (800409c <HAL_RCC_OscConfig+0x77c>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	628b      	str	r3, [r1, #40]	@ 0x28
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fc8:	3b01      	subs	r3, #1
 8003fca:	025b      	lsls	r3, r3, #9
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	431a      	orrs	r2, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fd4:	3b01      	subs	r3, #1
 8003fd6:	041b      	lsls	r3, r3, #16
 8003fd8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003fdc:	431a      	orrs	r2, r3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	061b      	lsls	r3, r3, #24
 8003fe6:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003fea:	492c      	ldr	r1, [pc, #176]	@ (800409c <HAL_RCC_OscConfig+0x77c>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8003ff0:	4b2a      	ldr	r3, [pc, #168]	@ (800409c <HAL_RCC_OscConfig+0x77c>)
 8003ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ff4:	4a29      	ldr	r2, [pc, #164]	@ (800409c <HAL_RCC_OscConfig+0x77c>)
 8003ff6:	f023 0310 	bic.w	r3, r3, #16
 8003ffa:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004000:	4a26      	ldr	r2, [pc, #152]	@ (800409c <HAL_RCC_OscConfig+0x77c>)
 8004002:	00db      	lsls	r3, r3, #3
 8004004:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8004006:	4b25      	ldr	r3, [pc, #148]	@ (800409c <HAL_RCC_OscConfig+0x77c>)
 8004008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800400a:	4a24      	ldr	r2, [pc, #144]	@ (800409c <HAL_RCC_OscConfig+0x77c>)
 800400c:	f043 0310 	orr.w	r3, r3, #16
 8004010:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8004012:	4b22      	ldr	r3, [pc, #136]	@ (800409c <HAL_RCC_OscConfig+0x77c>)
 8004014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004016:	f023 020c 	bic.w	r2, r3, #12
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800401e:	491f      	ldr	r1, [pc, #124]	@ (800409c <HAL_RCC_OscConfig+0x77c>)
 8004020:	4313      	orrs	r3, r2
 8004022:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8004024:	4b1d      	ldr	r3, [pc, #116]	@ (800409c <HAL_RCC_OscConfig+0x77c>)
 8004026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004028:	f023 0220 	bic.w	r2, r3, #32
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004030:	491a      	ldr	r1, [pc, #104]	@ (800409c <HAL_RCC_OscConfig+0x77c>)
 8004032:	4313      	orrs	r3, r2
 8004034:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004036:	4b19      	ldr	r3, [pc, #100]	@ (800409c <HAL_RCC_OscConfig+0x77c>)
 8004038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800403a:	4a18      	ldr	r2, [pc, #96]	@ (800409c <HAL_RCC_OscConfig+0x77c>)
 800403c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004040:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8004042:	4b16      	ldr	r3, [pc, #88]	@ (800409c <HAL_RCC_OscConfig+0x77c>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a15      	ldr	r2, [pc, #84]	@ (800409c <HAL_RCC_OscConfig+0x77c>)
 8004048:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800404c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800404e:	f7fc fe7d 	bl	8000d4c <HAL_GetTick>
 8004052:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004054:	e008      	b.n	8004068 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8004056:	f7fc fe79 	bl	8000d4c <HAL_GetTick>
 800405a:	4602      	mov	r2, r0
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	2b02      	cmp	r3, #2
 8004062:	d901      	bls.n	8004068 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8004064:	2303      	movs	r3, #3
 8004066:	e08d      	b.n	8004184 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004068:	4b0c      	ldr	r3, [pc, #48]	@ (800409c <HAL_RCC_OscConfig+0x77c>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d0f0      	beq.n	8004056 <HAL_RCC_OscConfig+0x736>
 8004074:	e085      	b.n	8004182 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8004076:	4b09      	ldr	r3, [pc, #36]	@ (800409c <HAL_RCC_OscConfig+0x77c>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a08      	ldr	r2, [pc, #32]	@ (800409c <HAL_RCC_OscConfig+0x77c>)
 800407c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004080:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004082:	f7fc fe63 	bl	8000d4c <HAL_GetTick>
 8004086:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004088:	e00a      	b.n	80040a0 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800408a:	f7fc fe5f 	bl	8000d4c <HAL_GetTick>
 800408e:	4602      	mov	r2, r0
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	2b02      	cmp	r3, #2
 8004096:	d903      	bls.n	80040a0 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	e073      	b.n	8004184 <HAL_RCC_OscConfig+0x864>
 800409c:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80040a0:	4b3a      	ldr	r3, [pc, #232]	@ (800418c <HAL_RCC_OscConfig+0x86c>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d1ee      	bne.n	800408a <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80040ac:	4b37      	ldr	r3, [pc, #220]	@ (800418c <HAL_RCC_OscConfig+0x86c>)
 80040ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040b0:	4a36      	ldr	r2, [pc, #216]	@ (800418c <HAL_RCC_OscConfig+0x86c>)
 80040b2:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80040b6:	f023 0303 	bic.w	r3, r3, #3
 80040ba:	6293      	str	r3, [r2, #40]	@ 0x28
 80040bc:	e061      	b.n	8004182 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80040be:	4b33      	ldr	r3, [pc, #204]	@ (800418c <HAL_RCC_OscConfig+0x86c>)
 80040c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040c2:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80040c4:	4b31      	ldr	r3, [pc, #196]	@ (800418c <HAL_RCC_OscConfig+0x86c>)
 80040c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040c8:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d031      	beq.n	8004136 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	f003 0203 	and.w	r2, r3, #3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040dc:	429a      	cmp	r2, r3
 80040de:	d12a      	bne.n	8004136 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	0a1b      	lsrs	r3, r3, #8
 80040e4:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d122      	bne.n	8004136 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040fa:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d11a      	bne.n	8004136 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	0a5b      	lsrs	r3, r3, #9
 8004104:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800410c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800410e:	429a      	cmp	r2, r3
 8004110:	d111      	bne.n	8004136 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	0c1b      	lsrs	r3, r3, #16
 8004116:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800411e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8004120:	429a      	cmp	r2, r3
 8004122:	d108      	bne.n	8004136 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	0e1b      	lsrs	r3, r3, #24
 8004128:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004130:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8004132:	429a      	cmp	r2, r3
 8004134:	d001      	beq.n	800413a <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e024      	b.n	8004184 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800413a:	4b14      	ldr	r3, [pc, #80]	@ (800418c <HAL_RCC_OscConfig+0x86c>)
 800413c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800413e:	08db      	lsrs	r3, r3, #3
 8004140:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004148:	429a      	cmp	r2, r3
 800414a:	d01a      	beq.n	8004182 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 800414c:	4b0f      	ldr	r3, [pc, #60]	@ (800418c <HAL_RCC_OscConfig+0x86c>)
 800414e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004150:	4a0e      	ldr	r2, [pc, #56]	@ (800418c <HAL_RCC_OscConfig+0x86c>)
 8004152:	f023 0310 	bic.w	r3, r3, #16
 8004156:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004158:	f7fc fdf8 	bl	8000d4c <HAL_GetTick>
 800415c:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 800415e:	bf00      	nop
 8004160:	f7fc fdf4 	bl	8000d4c <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	4293      	cmp	r3, r2
 800416a:	d0f9      	beq.n	8004160 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004170:	4a06      	ldr	r2, [pc, #24]	@ (800418c <HAL_RCC_OscConfig+0x86c>)
 8004172:	00db      	lsls	r3, r3, #3
 8004174:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8004176:	4b05      	ldr	r3, [pc, #20]	@ (800418c <HAL_RCC_OscConfig+0x86c>)
 8004178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800417a:	4a04      	ldr	r2, [pc, #16]	@ (800418c <HAL_RCC_OscConfig+0x86c>)
 800417c:	f043 0310 	orr.w	r3, r3, #16
 8004180:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8004182:	2300      	movs	r3, #0
}
 8004184:	4618      	mov	r0, r3
 8004186:	3720      	adds	r7, #32
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	44020c00 	.word	0x44020c00

08004190 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d101      	bne.n	80041a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e19e      	b.n	80044e2 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041a4:	4b83      	ldr	r3, [pc, #524]	@ (80043b4 <HAL_RCC_ClockConfig+0x224>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 030f 	and.w	r3, r3, #15
 80041ac:	683a      	ldr	r2, [r7, #0]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d910      	bls.n	80041d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041b2:	4b80      	ldr	r3, [pc, #512]	@ (80043b4 <HAL_RCC_ClockConfig+0x224>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f023 020f 	bic.w	r2, r3, #15
 80041ba:	497e      	ldr	r1, [pc, #504]	@ (80043b4 <HAL_RCC_ClockConfig+0x224>)
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	4313      	orrs	r3, r2
 80041c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041c2:	4b7c      	ldr	r3, [pc, #496]	@ (80043b4 <HAL_RCC_ClockConfig+0x224>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 030f 	and.w	r3, r3, #15
 80041ca:	683a      	ldr	r2, [r7, #0]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d001      	beq.n	80041d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e186      	b.n	80044e2 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0310 	and.w	r3, r3, #16
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d012      	beq.n	8004206 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	695a      	ldr	r2, [r3, #20]
 80041e4:	4b74      	ldr	r3, [pc, #464]	@ (80043b8 <HAL_RCC_ClockConfig+0x228>)
 80041e6:	6a1b      	ldr	r3, [r3, #32]
 80041e8:	0a1b      	lsrs	r3, r3, #8
 80041ea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d909      	bls.n	8004206 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80041f2:	4b71      	ldr	r3, [pc, #452]	@ (80043b8 <HAL_RCC_ClockConfig+0x228>)
 80041f4:	6a1b      	ldr	r3, [r3, #32]
 80041f6:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	021b      	lsls	r3, r3, #8
 8004200:	496d      	ldr	r1, [pc, #436]	@ (80043b8 <HAL_RCC_ClockConfig+0x228>)
 8004202:	4313      	orrs	r3, r2
 8004204:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0308 	and.w	r3, r3, #8
 800420e:	2b00      	cmp	r3, #0
 8004210:	d012      	beq.n	8004238 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	691a      	ldr	r2, [r3, #16]
 8004216:	4b68      	ldr	r3, [pc, #416]	@ (80043b8 <HAL_RCC_ClockConfig+0x228>)
 8004218:	6a1b      	ldr	r3, [r3, #32]
 800421a:	091b      	lsrs	r3, r3, #4
 800421c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004220:	429a      	cmp	r2, r3
 8004222:	d909      	bls.n	8004238 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8004224:	4b64      	ldr	r3, [pc, #400]	@ (80043b8 <HAL_RCC_ClockConfig+0x228>)
 8004226:	6a1b      	ldr	r3, [r3, #32]
 8004228:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	691b      	ldr	r3, [r3, #16]
 8004230:	011b      	lsls	r3, r3, #4
 8004232:	4961      	ldr	r1, [pc, #388]	@ (80043b8 <HAL_RCC_ClockConfig+0x228>)
 8004234:	4313      	orrs	r3, r2
 8004236:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0304 	and.w	r3, r3, #4
 8004240:	2b00      	cmp	r3, #0
 8004242:	d010      	beq.n	8004266 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	68da      	ldr	r2, [r3, #12]
 8004248:	4b5b      	ldr	r3, [pc, #364]	@ (80043b8 <HAL_RCC_ClockConfig+0x228>)
 800424a:	6a1b      	ldr	r3, [r3, #32]
 800424c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004250:	429a      	cmp	r2, r3
 8004252:	d908      	bls.n	8004266 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8004254:	4b58      	ldr	r3, [pc, #352]	@ (80043b8 <HAL_RCC_ClockConfig+0x228>)
 8004256:	6a1b      	ldr	r3, [r3, #32]
 8004258:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	4955      	ldr	r1, [pc, #340]	@ (80043b8 <HAL_RCC_ClockConfig+0x228>)
 8004262:	4313      	orrs	r3, r2
 8004264:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0302 	and.w	r3, r3, #2
 800426e:	2b00      	cmp	r3, #0
 8004270:	d010      	beq.n	8004294 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	689a      	ldr	r2, [r3, #8]
 8004276:	4b50      	ldr	r3, [pc, #320]	@ (80043b8 <HAL_RCC_ClockConfig+0x228>)
 8004278:	6a1b      	ldr	r3, [r3, #32]
 800427a:	f003 030f 	and.w	r3, r3, #15
 800427e:	429a      	cmp	r2, r3
 8004280:	d908      	bls.n	8004294 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8004282:	4b4d      	ldr	r3, [pc, #308]	@ (80043b8 <HAL_RCC_ClockConfig+0x228>)
 8004284:	6a1b      	ldr	r3, [r3, #32]
 8004286:	f023 020f 	bic.w	r2, r3, #15
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	494a      	ldr	r1, [pc, #296]	@ (80043b8 <HAL_RCC_ClockConfig+0x228>)
 8004290:	4313      	orrs	r3, r2
 8004292:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0301 	and.w	r3, r3, #1
 800429c:	2b00      	cmp	r3, #0
 800429e:	f000 8093 	beq.w	80043c8 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	2b03      	cmp	r3, #3
 80042a8:	d107      	bne.n	80042ba <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80042aa:	4b43      	ldr	r3, [pc, #268]	@ (80043b8 <HAL_RCC_ClockConfig+0x228>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d121      	bne.n	80042fa <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e113      	b.n	80044e2 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d107      	bne.n	80042d2 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042c2:	4b3d      	ldr	r3, [pc, #244]	@ (80043b8 <HAL_RCC_ClockConfig+0x228>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d115      	bne.n	80042fa <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e107      	b.n	80044e2 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d107      	bne.n	80042ea <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80042da:	4b37      	ldr	r3, [pc, #220]	@ (80043b8 <HAL_RCC_ClockConfig+0x228>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d109      	bne.n	80042fa <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e0fb      	b.n	80044e2 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042ea:	4b33      	ldr	r3, [pc, #204]	@ (80043b8 <HAL_RCC_ClockConfig+0x228>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0302 	and.w	r3, r3, #2
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d101      	bne.n	80042fa <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e0f3      	b.n	80044e2 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 80042fa:	4b2f      	ldr	r3, [pc, #188]	@ (80043b8 <HAL_RCC_ClockConfig+0x228>)
 80042fc:	69db      	ldr	r3, [r3, #28]
 80042fe:	f023 0203 	bic.w	r2, r3, #3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	492c      	ldr	r1, [pc, #176]	@ (80043b8 <HAL_RCC_ClockConfig+0x228>)
 8004308:	4313      	orrs	r3, r2
 800430a:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800430c:	f7fc fd1e 	bl	8000d4c <HAL_GetTick>
 8004310:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	2b03      	cmp	r3, #3
 8004318:	d112      	bne.n	8004340 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800431a:	e00a      	b.n	8004332 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800431c:	f7fc fd16 	bl	8000d4c <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	f241 3288 	movw	r2, #5000	@ 0x1388
 800432a:	4293      	cmp	r3, r2
 800432c:	d901      	bls.n	8004332 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e0d7      	b.n	80044e2 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004332:	4b21      	ldr	r3, [pc, #132]	@ (80043b8 <HAL_RCC_ClockConfig+0x228>)
 8004334:	69db      	ldr	r3, [r3, #28]
 8004336:	f003 0318 	and.w	r3, r3, #24
 800433a:	2b18      	cmp	r3, #24
 800433c:	d1ee      	bne.n	800431c <HAL_RCC_ClockConfig+0x18c>
 800433e:	e043      	b.n	80043c8 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	2b02      	cmp	r3, #2
 8004346:	d112      	bne.n	800436e <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004348:	e00a      	b.n	8004360 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800434a:	f7fc fcff 	bl	8000d4c <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004358:	4293      	cmp	r3, r2
 800435a:	d901      	bls.n	8004360 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e0c0      	b.n	80044e2 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004360:	4b15      	ldr	r3, [pc, #84]	@ (80043b8 <HAL_RCC_ClockConfig+0x228>)
 8004362:	69db      	ldr	r3, [r3, #28]
 8004364:	f003 0318 	and.w	r3, r3, #24
 8004368:	2b10      	cmp	r3, #16
 800436a:	d1ee      	bne.n	800434a <HAL_RCC_ClockConfig+0x1ba>
 800436c:	e02c      	b.n	80043c8 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	2b01      	cmp	r3, #1
 8004374:	d122      	bne.n	80043bc <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8004376:	e00a      	b.n	800438e <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004378:	f7fc fce8 	bl	8000d4c <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004386:	4293      	cmp	r3, r2
 8004388:	d901      	bls.n	800438e <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e0a9      	b.n	80044e2 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800438e:	4b0a      	ldr	r3, [pc, #40]	@ (80043b8 <HAL_RCC_ClockConfig+0x228>)
 8004390:	69db      	ldr	r3, [r3, #28]
 8004392:	f003 0318 	and.w	r3, r3, #24
 8004396:	2b08      	cmp	r3, #8
 8004398:	d1ee      	bne.n	8004378 <HAL_RCC_ClockConfig+0x1e8>
 800439a:	e015      	b.n	80043c8 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800439c:	f7fc fcd6 	bl	8000d4c <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d906      	bls.n	80043bc <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e097      	b.n	80044e2 <HAL_RCC_ClockConfig+0x352>
 80043b2:	bf00      	nop
 80043b4:	40022000 	.word	0x40022000
 80043b8:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80043bc:	4b4b      	ldr	r3, [pc, #300]	@ (80044ec <HAL_RCC_ClockConfig+0x35c>)
 80043be:	69db      	ldr	r3, [r3, #28]
 80043c0:	f003 0318 	and.w	r3, r3, #24
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d1e9      	bne.n	800439c <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0302 	and.w	r3, r3, #2
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d010      	beq.n	80043f6 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	689a      	ldr	r2, [r3, #8]
 80043d8:	4b44      	ldr	r3, [pc, #272]	@ (80044ec <HAL_RCC_ClockConfig+0x35c>)
 80043da:	6a1b      	ldr	r3, [r3, #32]
 80043dc:	f003 030f 	and.w	r3, r3, #15
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d208      	bcs.n	80043f6 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80043e4:	4b41      	ldr	r3, [pc, #260]	@ (80044ec <HAL_RCC_ClockConfig+0x35c>)
 80043e6:	6a1b      	ldr	r3, [r3, #32]
 80043e8:	f023 020f 	bic.w	r2, r3, #15
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	493e      	ldr	r1, [pc, #248]	@ (80044ec <HAL_RCC_ClockConfig+0x35c>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80043f6:	4b3e      	ldr	r3, [pc, #248]	@ (80044f0 <HAL_RCC_ClockConfig+0x360>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 030f 	and.w	r3, r3, #15
 80043fe:	683a      	ldr	r2, [r7, #0]
 8004400:	429a      	cmp	r2, r3
 8004402:	d210      	bcs.n	8004426 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004404:	4b3a      	ldr	r3, [pc, #232]	@ (80044f0 <HAL_RCC_ClockConfig+0x360>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f023 020f 	bic.w	r2, r3, #15
 800440c:	4938      	ldr	r1, [pc, #224]	@ (80044f0 <HAL_RCC_ClockConfig+0x360>)
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	4313      	orrs	r3, r2
 8004412:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004414:	4b36      	ldr	r3, [pc, #216]	@ (80044f0 <HAL_RCC_ClockConfig+0x360>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 030f 	and.w	r3, r3, #15
 800441c:	683a      	ldr	r2, [r7, #0]
 800441e:	429a      	cmp	r2, r3
 8004420:	d001      	beq.n	8004426 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e05d      	b.n	80044e2 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0304 	and.w	r3, r3, #4
 800442e:	2b00      	cmp	r3, #0
 8004430:	d010      	beq.n	8004454 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	68da      	ldr	r2, [r3, #12]
 8004436:	4b2d      	ldr	r3, [pc, #180]	@ (80044ec <HAL_RCC_ClockConfig+0x35c>)
 8004438:	6a1b      	ldr	r3, [r3, #32]
 800443a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800443e:	429a      	cmp	r2, r3
 8004440:	d208      	bcs.n	8004454 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8004442:	4b2a      	ldr	r3, [pc, #168]	@ (80044ec <HAL_RCC_ClockConfig+0x35c>)
 8004444:	6a1b      	ldr	r3, [r3, #32]
 8004446:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	4927      	ldr	r1, [pc, #156]	@ (80044ec <HAL_RCC_ClockConfig+0x35c>)
 8004450:	4313      	orrs	r3, r2
 8004452:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0308 	and.w	r3, r3, #8
 800445c:	2b00      	cmp	r3, #0
 800445e:	d012      	beq.n	8004486 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	691a      	ldr	r2, [r3, #16]
 8004464:	4b21      	ldr	r3, [pc, #132]	@ (80044ec <HAL_RCC_ClockConfig+0x35c>)
 8004466:	6a1b      	ldr	r3, [r3, #32]
 8004468:	091b      	lsrs	r3, r3, #4
 800446a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800446e:	429a      	cmp	r2, r3
 8004470:	d209      	bcs.n	8004486 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8004472:	4b1e      	ldr	r3, [pc, #120]	@ (80044ec <HAL_RCC_ClockConfig+0x35c>)
 8004474:	6a1b      	ldr	r3, [r3, #32]
 8004476:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	011b      	lsls	r3, r3, #4
 8004480:	491a      	ldr	r1, [pc, #104]	@ (80044ec <HAL_RCC_ClockConfig+0x35c>)
 8004482:	4313      	orrs	r3, r2
 8004484:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0310 	and.w	r3, r3, #16
 800448e:	2b00      	cmp	r3, #0
 8004490:	d012      	beq.n	80044b8 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	695a      	ldr	r2, [r3, #20]
 8004496:	4b15      	ldr	r3, [pc, #84]	@ (80044ec <HAL_RCC_ClockConfig+0x35c>)
 8004498:	6a1b      	ldr	r3, [r3, #32]
 800449a:	0a1b      	lsrs	r3, r3, #8
 800449c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d209      	bcs.n	80044b8 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80044a4:	4b11      	ldr	r3, [pc, #68]	@ (80044ec <HAL_RCC_ClockConfig+0x35c>)
 80044a6:	6a1b      	ldr	r3, [r3, #32]
 80044a8:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	695b      	ldr	r3, [r3, #20]
 80044b0:	021b      	lsls	r3, r3, #8
 80044b2:	490e      	ldr	r1, [pc, #56]	@ (80044ec <HAL_RCC_ClockConfig+0x35c>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80044b8:	f000 f822 	bl	8004500 <HAL_RCC_GetSysClockFreq>
 80044bc:	4602      	mov	r2, r0
 80044be:	4b0b      	ldr	r3, [pc, #44]	@ (80044ec <HAL_RCC_ClockConfig+0x35c>)
 80044c0:	6a1b      	ldr	r3, [r3, #32]
 80044c2:	f003 030f 	and.w	r3, r3, #15
 80044c6:	490b      	ldr	r1, [pc, #44]	@ (80044f4 <HAL_RCC_ClockConfig+0x364>)
 80044c8:	5ccb      	ldrb	r3, [r1, r3]
 80044ca:	fa22 f303 	lsr.w	r3, r2, r3
 80044ce:	4a0a      	ldr	r2, [pc, #40]	@ (80044f8 <HAL_RCC_ClockConfig+0x368>)
 80044d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80044d2:	4b0a      	ldr	r3, [pc, #40]	@ (80044fc <HAL_RCC_ClockConfig+0x36c>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7fc fbae 	bl	8000c38 <HAL_InitTick>
 80044dc:	4603      	mov	r3, r0
 80044de:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 80044e0:	7afb      	ldrb	r3, [r7, #11]
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3710      	adds	r7, #16
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	44020c00 	.word	0x44020c00
 80044f0:	40022000 	.word	0x40022000
 80044f4:	0800c8e8 	.word	0x0800c8e8
 80044f8:	20000004 	.word	0x20000004
 80044fc:	20000008 	.word	0x20000008

08004500 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004500:	b480      	push	{r7}
 8004502:	b089      	sub	sp, #36	@ 0x24
 8004504:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8004506:	4b8c      	ldr	r3, [pc, #560]	@ (8004738 <HAL_RCC_GetSysClockFreq+0x238>)
 8004508:	69db      	ldr	r3, [r3, #28]
 800450a:	f003 0318 	and.w	r3, r3, #24
 800450e:	2b08      	cmp	r3, #8
 8004510:	d102      	bne.n	8004518 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004512:	4b8a      	ldr	r3, [pc, #552]	@ (800473c <HAL_RCC_GetSysClockFreq+0x23c>)
 8004514:	61fb      	str	r3, [r7, #28]
 8004516:	e107      	b.n	8004728 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004518:	4b87      	ldr	r3, [pc, #540]	@ (8004738 <HAL_RCC_GetSysClockFreq+0x238>)
 800451a:	69db      	ldr	r3, [r3, #28]
 800451c:	f003 0318 	and.w	r3, r3, #24
 8004520:	2b00      	cmp	r3, #0
 8004522:	d112      	bne.n	800454a <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8004524:	4b84      	ldr	r3, [pc, #528]	@ (8004738 <HAL_RCC_GetSysClockFreq+0x238>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0320 	and.w	r3, r3, #32
 800452c:	2b00      	cmp	r3, #0
 800452e:	d009      	beq.n	8004544 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004530:	4b81      	ldr	r3, [pc, #516]	@ (8004738 <HAL_RCC_GetSysClockFreq+0x238>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	08db      	lsrs	r3, r3, #3
 8004536:	f003 0303 	and.w	r3, r3, #3
 800453a:	4a81      	ldr	r2, [pc, #516]	@ (8004740 <HAL_RCC_GetSysClockFreq+0x240>)
 800453c:	fa22 f303 	lsr.w	r3, r2, r3
 8004540:	61fb      	str	r3, [r7, #28]
 8004542:	e0f1      	b.n	8004728 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8004544:	4b7e      	ldr	r3, [pc, #504]	@ (8004740 <HAL_RCC_GetSysClockFreq+0x240>)
 8004546:	61fb      	str	r3, [r7, #28]
 8004548:	e0ee      	b.n	8004728 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800454a:	4b7b      	ldr	r3, [pc, #492]	@ (8004738 <HAL_RCC_GetSysClockFreq+0x238>)
 800454c:	69db      	ldr	r3, [r3, #28]
 800454e:	f003 0318 	and.w	r3, r3, #24
 8004552:	2b10      	cmp	r3, #16
 8004554:	d102      	bne.n	800455c <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004556:	4b7b      	ldr	r3, [pc, #492]	@ (8004744 <HAL_RCC_GetSysClockFreq+0x244>)
 8004558:	61fb      	str	r3, [r7, #28]
 800455a:	e0e5      	b.n	8004728 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800455c:	4b76      	ldr	r3, [pc, #472]	@ (8004738 <HAL_RCC_GetSysClockFreq+0x238>)
 800455e:	69db      	ldr	r3, [r3, #28]
 8004560:	f003 0318 	and.w	r3, r3, #24
 8004564:	2b18      	cmp	r3, #24
 8004566:	f040 80dd 	bne.w	8004724 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800456a:	4b73      	ldr	r3, [pc, #460]	@ (8004738 <HAL_RCC_GetSysClockFreq+0x238>)
 800456c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800456e:	f003 0303 	and.w	r3, r3, #3
 8004572:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8004574:	4b70      	ldr	r3, [pc, #448]	@ (8004738 <HAL_RCC_GetSysClockFreq+0x238>)
 8004576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004578:	0a1b      	lsrs	r3, r3, #8
 800457a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800457e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004580:	4b6d      	ldr	r3, [pc, #436]	@ (8004738 <HAL_RCC_GetSysClockFreq+0x238>)
 8004582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004584:	091b      	lsrs	r3, r3, #4
 8004586:	f003 0301 	and.w	r3, r3, #1
 800458a:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800458c:	4b6a      	ldr	r3, [pc, #424]	@ (8004738 <HAL_RCC_GetSysClockFreq+0x238>)
 800458e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8004590:	08db      	lsrs	r3, r3, #3
 8004592:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	fb02 f303 	mul.w	r3, r2, r3
 800459c:	ee07 3a90 	vmov	s15, r3
 80045a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045a4:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	f000 80b7 	beq.w	800471e <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d003      	beq.n	80045be <HAL_RCC_GetSysClockFreq+0xbe>
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	2b03      	cmp	r3, #3
 80045ba:	d056      	beq.n	800466a <HAL_RCC_GetSysClockFreq+0x16a>
 80045bc:	e077      	b.n	80046ae <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80045be:	4b5e      	ldr	r3, [pc, #376]	@ (8004738 <HAL_RCC_GetSysClockFreq+0x238>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0320 	and.w	r3, r3, #32
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d02d      	beq.n	8004626 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80045ca:	4b5b      	ldr	r3, [pc, #364]	@ (8004738 <HAL_RCC_GetSysClockFreq+0x238>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	08db      	lsrs	r3, r3, #3
 80045d0:	f003 0303 	and.w	r3, r3, #3
 80045d4:	4a5a      	ldr	r2, [pc, #360]	@ (8004740 <HAL_RCC_GetSysClockFreq+0x240>)
 80045d6:	fa22 f303 	lsr.w	r3, r2, r3
 80045da:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	ee07 3a90 	vmov	s15, r3
 80045e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	ee07 3a90 	vmov	s15, r3
 80045ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045f4:	4b50      	ldr	r3, [pc, #320]	@ (8004738 <HAL_RCC_GetSysClockFreq+0x238>)
 80045f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045fc:	ee07 3a90 	vmov	s15, r3
 8004600:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8004604:	ed97 6a02 	vldr	s12, [r7, #8]
 8004608:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8004748 <HAL_RCC_GetSysClockFreq+0x248>
 800460c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004610:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8004614:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004618:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800461c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004620:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8004624:	e065      	b.n	80046f2 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	ee07 3a90 	vmov	s15, r3
 800462c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004630:	eddf 6a46 	vldr	s13, [pc, #280]	@ 800474c <HAL_RCC_GetSysClockFreq+0x24c>
 8004634:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004638:	4b3f      	ldr	r3, [pc, #252]	@ (8004738 <HAL_RCC_GetSysClockFreq+0x238>)
 800463a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800463c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004640:	ee07 3a90 	vmov	s15, r3
 8004644:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8004648:	ed97 6a02 	vldr	s12, [r7, #8]
 800464c:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8004748 <HAL_RCC_GetSysClockFreq+0x248>
 8004650:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004654:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8004658:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800465c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004660:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004664:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8004668:	e043      	b.n	80046f2 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	ee07 3a90 	vmov	s15, r3
 8004670:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004674:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8004750 <HAL_RCC_GetSysClockFreq+0x250>
 8004678:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800467c:	4b2e      	ldr	r3, [pc, #184]	@ (8004738 <HAL_RCC_GetSysClockFreq+0x238>)
 800467e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004680:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004684:	ee07 3a90 	vmov	s15, r3
 8004688:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800468c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004690:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8004748 <HAL_RCC_GetSysClockFreq+0x248>
 8004694:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004698:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800469c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80046a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046a8:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 80046ac:	e021      	b.n	80046f2 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	ee07 3a90 	vmov	s15, r3
 80046b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046b8:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004754 <HAL_RCC_GetSysClockFreq+0x254>
 80046bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046c0:	4b1d      	ldr	r3, [pc, #116]	@ (8004738 <HAL_RCC_GetSysClockFreq+0x238>)
 80046c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046c8:	ee07 3a90 	vmov	s15, r3
 80046cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80046d0:	ed97 6a02 	vldr	s12, [r7, #8]
 80046d4:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8004748 <HAL_RCC_GetSysClockFreq+0x248>
 80046d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80046dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80046e0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80046e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046ec:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80046f0:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 80046f2:	4b11      	ldr	r3, [pc, #68]	@ (8004738 <HAL_RCC_GetSysClockFreq+0x238>)
 80046f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046f6:	0a5b      	lsrs	r3, r3, #9
 80046f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046fc:	3301      	adds	r3, #1
 80046fe:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	ee07 3a90 	vmov	s15, r3
 8004706:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800470a:	edd7 6a06 	vldr	s13, [r7, #24]
 800470e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004712:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004716:	ee17 3a90 	vmov	r3, s15
 800471a:	61fb      	str	r3, [r7, #28]
 800471c:	e004      	b.n	8004728 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 800471e:	2300      	movs	r3, #0
 8004720:	61fb      	str	r3, [r7, #28]
 8004722:	e001      	b.n	8004728 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8004724:	4b06      	ldr	r3, [pc, #24]	@ (8004740 <HAL_RCC_GetSysClockFreq+0x240>)
 8004726:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8004728:	69fb      	ldr	r3, [r7, #28]
}
 800472a:	4618      	mov	r0, r3
 800472c:	3724      	adds	r7, #36	@ 0x24
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr
 8004736:	bf00      	nop
 8004738:	44020c00 	.word	0x44020c00
 800473c:	003d0900 	.word	0x003d0900
 8004740:	03d09000 	.word	0x03d09000
 8004744:	017d7840 	.word	0x017d7840
 8004748:	46000000 	.word	0x46000000
 800474c:	4c742400 	.word	0x4c742400
 8004750:	4bbebc20 	.word	0x4bbebc20
 8004754:	4a742400 	.word	0x4a742400

08004758 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800475c:	f7ff fed0 	bl	8004500 <HAL_RCC_GetSysClockFreq>
 8004760:	4602      	mov	r2, r0
 8004762:	4b08      	ldr	r3, [pc, #32]	@ (8004784 <HAL_RCC_GetHCLKFreq+0x2c>)
 8004764:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8004766:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800476a:	4907      	ldr	r1, [pc, #28]	@ (8004788 <HAL_RCC_GetHCLKFreq+0x30>)
 800476c:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800476e:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004772:	fa22 f303 	lsr.w	r3, r2, r3
 8004776:	4a05      	ldr	r2, [pc, #20]	@ (800478c <HAL_RCC_GetHCLKFreq+0x34>)
 8004778:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 800477a:	4b04      	ldr	r3, [pc, #16]	@ (800478c <HAL_RCC_GetHCLKFreq+0x34>)
 800477c:	681b      	ldr	r3, [r3, #0]
}
 800477e:	4618      	mov	r0, r3
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	44020c00 	.word	0x44020c00
 8004788:	0800c8e8 	.word	0x0800c8e8
 800478c:	20000004 	.word	0x20000004

08004790 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8004790:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004794:	b0ba      	sub	sp, #232	@ 0xe8
 8004796:	af00      	add	r7, sp, #0
 8004798:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800479c:	2300      	movs	r3, #0
 800479e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80047a2:	2300      	movs	r3, #0
 80047a4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80047a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b0:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 80047b4:	2500      	movs	r5, #0
 80047b6:	ea54 0305 	orrs.w	r3, r4, r5
 80047ba:	d00b      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 80047bc:	4bcd      	ldr	r3, [pc, #820]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80047be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80047c2:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 80047c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047cc:	4ac9      	ldr	r2, [pc, #804]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80047ce:	430b      	orrs	r3, r1
 80047d0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047dc:	f002 0801 	and.w	r8, r2, #1
 80047e0:	f04f 0900 	mov.w	r9, #0
 80047e4:	ea58 0309 	orrs.w	r3, r8, r9
 80047e8:	d042      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 80047ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047f0:	2b05      	cmp	r3, #5
 80047f2:	d823      	bhi.n	800483c <HAL_RCCEx_PeriphCLKConfig+0xac>
 80047f4:	a201      	add	r2, pc, #4	@ (adr r2, 80047fc <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 80047f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047fa:	bf00      	nop
 80047fc:	08004845 	.word	0x08004845
 8004800:	08004815 	.word	0x08004815
 8004804:	08004829 	.word	0x08004829
 8004808:	08004845 	.word	0x08004845
 800480c:	08004845 	.word	0x08004845
 8004810:	08004845 	.word	0x08004845
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004814:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004818:	3308      	adds	r3, #8
 800481a:	4618      	mov	r0, r3
 800481c:	f001 f978 	bl	8005b10 <RCCEx_PLL2_Config>
 8004820:	4603      	mov	r3, r0
 8004822:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 8004826:	e00e      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004828:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800482c:	3330      	adds	r3, #48	@ 0x30
 800482e:	4618      	mov	r0, r3
 8004830:	f001 fa06 	bl	8005c40 <RCCEx_PLL3_Config>
 8004834:	4603      	mov	r3, r0
 8004836:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 800483a:	e004      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004842:	e000      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8004844:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004846:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800484a:	2b00      	cmp	r3, #0
 800484c:	d10c      	bne.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800484e:	4ba9      	ldr	r3, [pc, #676]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004850:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004854:	f023 0107 	bic.w	r1, r3, #7
 8004858:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800485c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800485e:	4aa5      	ldr	r2, [pc, #660]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004860:	430b      	orrs	r3, r1
 8004862:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004866:	e003      	b.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004868:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800486c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004870:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004878:	f002 0a02 	and.w	sl, r2, #2
 800487c:	f04f 0b00 	mov.w	fp, #0
 8004880:	ea5a 030b 	orrs.w	r3, sl, fp
 8004884:	f000 8088 	beq.w	8004998 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8004888:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800488c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800488e:	2b28      	cmp	r3, #40	@ 0x28
 8004890:	d868      	bhi.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8004892:	a201      	add	r2, pc, #4	@ (adr r2, 8004898 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8004894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004898:	0800496d 	.word	0x0800496d
 800489c:	08004965 	.word	0x08004965
 80048a0:	08004965 	.word	0x08004965
 80048a4:	08004965 	.word	0x08004965
 80048a8:	08004965 	.word	0x08004965
 80048ac:	08004965 	.word	0x08004965
 80048b0:	08004965 	.word	0x08004965
 80048b4:	08004965 	.word	0x08004965
 80048b8:	0800493d 	.word	0x0800493d
 80048bc:	08004965 	.word	0x08004965
 80048c0:	08004965 	.word	0x08004965
 80048c4:	08004965 	.word	0x08004965
 80048c8:	08004965 	.word	0x08004965
 80048cc:	08004965 	.word	0x08004965
 80048d0:	08004965 	.word	0x08004965
 80048d4:	08004965 	.word	0x08004965
 80048d8:	08004951 	.word	0x08004951
 80048dc:	08004965 	.word	0x08004965
 80048e0:	08004965 	.word	0x08004965
 80048e4:	08004965 	.word	0x08004965
 80048e8:	08004965 	.word	0x08004965
 80048ec:	08004965 	.word	0x08004965
 80048f0:	08004965 	.word	0x08004965
 80048f4:	08004965 	.word	0x08004965
 80048f8:	0800496d 	.word	0x0800496d
 80048fc:	08004965 	.word	0x08004965
 8004900:	08004965 	.word	0x08004965
 8004904:	08004965 	.word	0x08004965
 8004908:	08004965 	.word	0x08004965
 800490c:	08004965 	.word	0x08004965
 8004910:	08004965 	.word	0x08004965
 8004914:	08004965 	.word	0x08004965
 8004918:	0800496d 	.word	0x0800496d
 800491c:	08004965 	.word	0x08004965
 8004920:	08004965 	.word	0x08004965
 8004924:	08004965 	.word	0x08004965
 8004928:	08004965 	.word	0x08004965
 800492c:	08004965 	.word	0x08004965
 8004930:	08004965 	.word	0x08004965
 8004934:	08004965 	.word	0x08004965
 8004938:	0800496d 	.word	0x0800496d
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800493c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004940:	3308      	adds	r3, #8
 8004942:	4618      	mov	r0, r3
 8004944:	f001 f8e4 	bl	8005b10 <RCCEx_PLL2_Config>
 8004948:	4603      	mov	r3, r0
 800494a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 800494e:	e00e      	b.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004950:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004954:	3330      	adds	r3, #48	@ 0x30
 8004956:	4618      	mov	r0, r3
 8004958:	f001 f972 	bl	8005c40 <RCCEx_PLL3_Config>
 800495c:	4603      	mov	r3, r0
 800495e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 8004962:	e004      	b.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800496a:	e000      	b.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 800496c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800496e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004972:	2b00      	cmp	r3, #0
 8004974:	d10c      	bne.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8004976:	4b5f      	ldr	r3, [pc, #380]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004978:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800497c:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004980:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004984:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004986:	4a5b      	ldr	r2, [pc, #364]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004988:	430b      	orrs	r3, r1
 800498a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800498e:	e003      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004990:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004994:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004998:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800499c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049a0:	f002 0304 	and.w	r3, r2, #4
 80049a4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80049a8:	2300      	movs	r3, #0
 80049aa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80049ae:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80049b2:	460b      	mov	r3, r1
 80049b4:	4313      	orrs	r3, r2
 80049b6:	d04e      	beq.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 80049b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80049bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80049be:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80049c2:	d02c      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x28e>
 80049c4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80049c8:	d825      	bhi.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80049ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049ce:	d028      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80049d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049d4:	d81f      	bhi.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80049d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80049d8:	d025      	beq.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x296>
 80049da:	2bc0      	cmp	r3, #192	@ 0xc0
 80049dc:	d81b      	bhi.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80049de:	2b80      	cmp	r3, #128	@ 0x80
 80049e0:	d00f      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x272>
 80049e2:	2b80      	cmp	r3, #128	@ 0x80
 80049e4:	d817      	bhi.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d01f      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x29a>
 80049ea:	2b40      	cmp	r3, #64	@ 0x40
 80049ec:	d113      	bne.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80049ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80049f2:	3308      	adds	r3, #8
 80049f4:	4618      	mov	r0, r3
 80049f6:	f001 f88b 	bl	8005b10 <RCCEx_PLL2_Config>
 80049fa:	4603      	mov	r3, r0
 80049fc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 8004a00:	e014      	b.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004a02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a06:	3330      	adds	r3, #48	@ 0x30
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f001 f919 	bl	8005c40 <RCCEx_PLL3_Config>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 8004a14:	e00a      	b.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004a1c:	e006      	b.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004a1e:	bf00      	nop
 8004a20:	e004      	b.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004a22:	bf00      	nop
 8004a24:	e002      	b.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004a26:	bf00      	nop
 8004a28:	e000      	b.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004a2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a2c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d10c      	bne.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8004a34:	4b2f      	ldr	r3, [pc, #188]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004a36:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004a3a:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004a3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a44:	4a2b      	ldr	r2, [pc, #172]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004a46:	430b      	orrs	r3, r1
 8004a48:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004a4c:	e003      	b.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a4e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004a52:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a5e:	f002 0308 	and.w	r3, r2, #8
 8004a62:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004a66:	2300      	movs	r3, #0
 8004a68:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004a6c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004a70:	460b      	mov	r3, r1
 8004a72:	4313      	orrs	r3, r2
 8004a74:	d056      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8004a76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a7a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a7c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004a80:	d031      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8004a82:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004a86:	d82a      	bhi.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004a88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a8c:	d02d      	beq.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004a8e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a92:	d824      	bhi.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004a94:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004a98:	d029      	beq.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8004a9a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004a9e:	d81e      	bhi.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004aa0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004aa4:	d011      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8004aa6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004aaa:	d818      	bhi.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d023      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004ab0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ab4:	d113      	bne.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004ab6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004aba:	3308      	adds	r3, #8
 8004abc:	4618      	mov	r0, r3
 8004abe:	f001 f827 	bl	8005b10 <RCCEx_PLL2_Config>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 8004ac8:	e017      	b.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004aca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ace:	3330      	adds	r3, #48	@ 0x30
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f001 f8b5 	bl	8005c40 <RCCEx_PLL3_Config>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 8004adc:	e00d      	b.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004ae4:	e009      	b.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8004ae6:	bf00      	nop
 8004ae8:	e007      	b.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8004aea:	bf00      	nop
 8004aec:	e005      	b.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8004aee:	bf00      	nop
 8004af0:	e003      	b.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8004af2:	bf00      	nop
 8004af4:	44020c00 	.word	0x44020c00
        break;
 8004af8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004afa:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d10c      	bne.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8004b02:	4bb9      	ldr	r3, [pc, #740]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004b04:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004b08:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8004b0c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b10:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b12:	4ab5      	ldr	r2, [pc, #724]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004b14:	430b      	orrs	r3, r1
 8004b16:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004b1a:	e003      	b.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b1c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004b20:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004b24:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b2c:	f002 0310 	and.w	r3, r2, #16
 8004b30:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004b34:	2300      	movs	r3, #0
 8004b36:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004b3a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004b3e:	460b      	mov	r3, r1
 8004b40:	4313      	orrs	r3, r2
 8004b42:	d053      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8004b44:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b4a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004b4e:	d031      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8004b50:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004b54:	d82a      	bhi.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004b56:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b5a:	d02d      	beq.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8004b5c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b60:	d824      	bhi.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004b62:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004b66:	d029      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8004b68:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004b6c:	d81e      	bhi.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004b6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b72:	d011      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8004b74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b78:	d818      	bhi.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d020      	beq.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8004b7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b82:	d113      	bne.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004b84:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b88:	3308      	adds	r3, #8
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f000 ffc0 	bl	8005b10 <RCCEx_PLL2_Config>
 8004b90:	4603      	mov	r3, r0
 8004b92:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 8004b96:	e014      	b.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004b98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b9c:	3330      	adds	r3, #48	@ 0x30
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f001 f84e 	bl	8005c40 <RCCEx_PLL3_Config>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 8004baa:	e00a      	b.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004bb2:	e006      	b.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004bb4:	bf00      	nop
 8004bb6:	e004      	b.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004bb8:	bf00      	nop
 8004bba:	e002      	b.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004bbc:	bf00      	nop
 8004bbe:	e000      	b.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004bc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bc2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d10c      	bne.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8004bca:	4b87      	ldr	r3, [pc, #540]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004bcc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004bd0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004bd4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004bd8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004bda:	4a83      	ldr	r2, [pc, #524]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004bdc:	430b      	orrs	r3, r1
 8004bde:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004be2:	e003      	b.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004be4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004be8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004bec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf4:	f002 0320 	and.w	r3, r2, #32
 8004bf8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004c02:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004c06:	460b      	mov	r3, r1
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	d053      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8004c0c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c12:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8004c16:	d031      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8004c18:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8004c1c:	d82a      	bhi.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004c1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c22:	d02d      	beq.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004c24:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c28:	d824      	bhi.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004c2a:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8004c2e:	d029      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8004c30:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8004c34:	d81e      	bhi.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004c36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c3a:	d011      	beq.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8004c3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c40:	d818      	bhi.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d020      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8004c46:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c4a:	d113      	bne.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004c4c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c50:	3308      	adds	r3, #8
 8004c52:	4618      	mov	r0, r3
 8004c54:	f000 ff5c 	bl	8005b10 <RCCEx_PLL2_Config>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 8004c5e:	e014      	b.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004c60:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c64:	3330      	adds	r3, #48	@ 0x30
 8004c66:	4618      	mov	r0, r3
 8004c68:	f000 ffea 	bl	8005c40 <RCCEx_PLL3_Config>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 8004c72:	e00a      	b.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004c7a:	e006      	b.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004c7c:	bf00      	nop
 8004c7e:	e004      	b.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004c80:	bf00      	nop
 8004c82:	e002      	b.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004c84:	bf00      	nop
 8004c86:	e000      	b.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004c88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c8a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d10c      	bne.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8004c92:	4b55      	ldr	r3, [pc, #340]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004c94:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004c98:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8004c9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ca0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ca2:	4a51      	ldr	r2, [pc, #324]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004ca4:	430b      	orrs	r3, r1
 8004ca6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004caa:	e003      	b.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cac:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004cb0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004cb4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cbc:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004cc0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004cca:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004cce:	460b      	mov	r3, r1
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	d053      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8004cd4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004cd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cda:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004cde:	d031      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8004ce0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004ce4:	d82a      	bhi.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004ce6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004cea:	d02d      	beq.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8004cec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004cf0:	d824      	bhi.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004cf2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004cf6:	d029      	beq.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004cf8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004cfc:	d81e      	bhi.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004cfe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004d02:	d011      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8004d04:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004d08:	d818      	bhi.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d020      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004d0e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004d12:	d113      	bne.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004d14:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d18:	3308      	adds	r3, #8
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f000 fef8 	bl	8005b10 <RCCEx_PLL2_Config>
 8004d20:	4603      	mov	r3, r0
 8004d22:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8004d26:	e014      	b.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004d28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d2c:	3330      	adds	r3, #48	@ 0x30
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f000 ff86 	bl	8005c40 <RCCEx_PLL3_Config>
 8004d34:	4603      	mov	r3, r0
 8004d36:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8004d3a:	e00a      	b.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004d42:	e006      	b.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004d44:	bf00      	nop
 8004d46:	e004      	b.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004d48:	bf00      	nop
 8004d4a:	e002      	b.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004d4c:	bf00      	nop
 8004d4e:	e000      	b.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004d50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d52:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d10c      	bne.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8004d5a:	4b23      	ldr	r3, [pc, #140]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004d5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d60:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004d64:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d6a:	4a1f      	ldr	r2, [pc, #124]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004d6c:	430b      	orrs	r3, r1
 8004d6e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004d72:	e003      	b.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d74:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004d78:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d7c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d84:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004d88:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004d92:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004d96:	460b      	mov	r3, r1
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	d03d      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x688>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8004d9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004da0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004da2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004da6:	d01b      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8004da8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004dac:	d814      	bhi.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x648>
 8004dae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004db2:	d017      	beq.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x654>
 8004db4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004db8:	d80e      	bhi.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x648>
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d016      	beq.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8004dbe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dc2:	d109      	bne.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x648>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004dc4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004dc8:	3330      	adds	r3, #48	@ 0x30
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f000 ff38 	bl	8005c40 <RCCEx_PLL3_Config>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8004dd6:	e00a      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x65e>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004dde:	e006      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 8004de0:	bf00      	nop
 8004de2:	e004      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 8004de4:	bf00      	nop
 8004de6:	e002      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x65e>
 8004de8:	44020c00 	.word	0x44020c00
        break;
 8004dec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dee:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d10c      	bne.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x680>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004df6:	4b99      	ldr	r3, [pc, #612]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004df8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004dfc:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004e00:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e04:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e06:	4a95      	ldr	r2, [pc, #596]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004e08:	430b      	orrs	r3, r1
 8004e0a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004e0e:	e003      	b.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x688>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e10:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004e14:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e18:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e20:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004e24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004e28:	2300      	movs	r3, #0
 8004e2a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004e2e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004e32:	460b      	mov	r3, r1
 8004e34:	4313      	orrs	r3, r2
 8004e36:	d03b      	beq.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x720>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8004e38:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e3c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e3e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004e42:	d01b      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
 8004e44:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004e48:	d814      	bhi.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 8004e4a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004e4e:	d017      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 8004e50:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004e54:	d80e      	bhi.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d014      	beq.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 8004e5a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004e5e:	d109      	bne.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004e60:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e64:	3330      	adds	r3, #48	@ 0x30
 8004e66:	4618      	mov	r0, r3
 8004e68:	f000 feea 	bl	8005c40 <RCCEx_PLL3_Config>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8004e72:	e008      	b.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004e7a:	e004      	b.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8004e7c:	bf00      	nop
 8004e7e:	e002      	b.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8004e80:	bf00      	nop
 8004e82:	e000      	b.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8004e84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e86:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d10c      	bne.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x718>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8004e8e:	4b73      	ldr	r3, [pc, #460]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004e90:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004e94:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8004e98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e9c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e9e:	4a6f      	ldr	r2, [pc, #444]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004ea0:	430b      	orrs	r3, r1
 8004ea2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004ea6:	e003      	b.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ea8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004eac:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004eb0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004ebc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004ec6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004eca:	460b      	mov	r3, r1
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	d03d      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8004ed0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ed4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ed8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004edc:	d01b      	beq.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x786>
 8004ede:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004ee2:	d814      	bhi.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8004ee4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004ee8:	d017      	beq.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x78a>
 8004eea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004eee:	d80e      	bhi.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d014      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x78e>
 8004ef4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ef8:	d109      	bne.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x77e>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004efa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004efe:	3330      	adds	r3, #48	@ 0x30
 8004f00:	4618      	mov	r0, r3
 8004f02:	f000 fe9d 	bl	8005c40 <RCCEx_PLL3_Config>
 8004f06:	4603      	mov	r3, r0
 8004f08:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* I2C3 clock source config set later after clock selection check */
        break;
 8004f0c:	e008      	b.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x790>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004f14:	e004      	b.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8004f16:	bf00      	nop
 8004f18:	e002      	b.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8004f1a:	bf00      	nop
 8004f1c:	e000      	b.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8004f1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f20:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d10d      	bne.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8004f28:	4b4c      	ldr	r3, [pc, #304]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004f2a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004f2e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004f32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f3a:	4a48      	ldr	r2, [pc, #288]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004f3c:	430b      	orrs	r3, r1
 8004f3e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004f42:	e003      	b.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f44:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004f48:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8004f4c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f54:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004f58:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004f62:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004f66:	460b      	mov	r3, r1
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	d035      	beq.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x848>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8004f6c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f74:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004f78:	d015      	beq.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x816>
 8004f7a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004f7e:	d80e      	bhi.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x80e>
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d012      	beq.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8004f84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004f88:	d109      	bne.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004f8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f8e:	3330      	adds	r3, #48	@ 0x30
 8004f90:	4618      	mov	r0, r3
 8004f92:	f000 fe55 	bl	8005c40 <RCCEx_PLL3_Config>
 8004f96:	4603      	mov	r3, r0
 8004f98:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8004f9c:	e006      	b.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x81c>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004fa4:	e002      	b.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 8004fa6:	bf00      	nop
 8004fa8:	e000      	b.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 8004faa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fac:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d10d      	bne.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8004fb4:	4b29      	ldr	r3, [pc, #164]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004fb6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004fba:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8004fbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004fc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fc6:	4a25      	ldr	r2, [pc, #148]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004fc8:	430b      	orrs	r3, r1
 8004fca:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004fce:	e003      	b.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x848>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fd0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004fd4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 8004fd8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe0:	2100      	movs	r1, #0
 8004fe2:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 8004fe6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004fea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004fee:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004ff2:	460b      	mov	r3, r1
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	d037      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 8004ff8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005000:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005004:	d015      	beq.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8005006:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800500a:	d80e      	bhi.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x89a>
 800500c:	2b00      	cmp	r3, #0
 800500e:	d012      	beq.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 8005010:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005014:	d109      	bne.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x89a>
        break;

#if defined(RCC_I3C2CLKSOURCE_PLL3R)
      case RCC_I3C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005016:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800501a:	3330      	adds	r3, #48	@ 0x30
 800501c:	4618      	mov	r0, r3
 800501e:	f000 fe0f 	bl	8005c40 <RCCEx_PLL3_Config>
 8005022:	4603      	mov	r3, r0
 8005024:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 8005028:	e006      	b.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005030:	e002      	b.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 8005032:	bf00      	nop
 8005034:	e000      	b.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 8005036:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005038:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800503c:	2b00      	cmp	r3, #0
 800503e:	d10f      	bne.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x8d0>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 8005040:	4b06      	ldr	r3, [pc, #24]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005042:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005046:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800504a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800504e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005052:	4a02      	ldr	r2, [pc, #8]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005054:	430b      	orrs	r3, r1
 8005056:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800505a:	e005      	b.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 800505c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005060:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005064:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005068:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800506c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005070:	2100      	movs	r1, #0
 8005072:	67b9      	str	r1, [r7, #120]	@ 0x78
 8005074:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005078:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800507a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800507e:	460b      	mov	r3, r1
 8005080:	4313      	orrs	r3, r2
 8005082:	d00e      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x912>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8005084:	4bb8      	ldr	r3, [pc, #736]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005086:	69db      	ldr	r3, [r3, #28]
 8005088:	4ab7      	ldr	r2, [pc, #732]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800508a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800508e:	61d3      	str	r3, [r2, #28]
 8005090:	4bb5      	ldr	r3, [pc, #724]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005092:	69d9      	ldr	r1, [r3, #28]
 8005094:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005098:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800509c:	4ab2      	ldr	r2, [pc, #712]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800509e:	430b      	orrs	r3, r1
 80050a0:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80050a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050aa:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80050ae:	673b      	str	r3, [r7, #112]	@ 0x70
 80050b0:	2300      	movs	r3, #0
 80050b2:	677b      	str	r3, [r7, #116]	@ 0x74
 80050b4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80050b8:	460b      	mov	r3, r1
 80050ba:	4313      	orrs	r3, r2
 80050bc:	d055      	beq.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x9da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 80050be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80050c6:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80050ca:	d031      	beq.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 80050cc:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80050d0:	d82a      	bhi.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x998>
 80050d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050d6:	d02d      	beq.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x9a4>
 80050d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050dc:	d824      	bhi.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x998>
 80050de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80050e2:	d029      	beq.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
 80050e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80050e8:	d81e      	bhi.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x998>
 80050ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050ee:	d011      	beq.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80050f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050f4:	d818      	bhi.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x998>
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d020      	beq.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x9ac>
 80050fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050fe:	d113      	bne.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x998>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005100:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005104:	3308      	adds	r3, #8
 8005106:	4618      	mov	r0, r3
 8005108:	f000 fd02 	bl	8005b10 <RCCEx_PLL2_Config>
 800510c:	4603      	mov	r3, r0
 800510e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8005112:	e014      	b.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x9ae>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005114:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005118:	3330      	adds	r3, #48	@ 0x30
 800511a:	4618      	mov	r0, r3
 800511c:	f000 fd90 	bl	8005c40 <RCCEx_PLL3_Config>
 8005120:	4603      	mov	r3, r0
 8005122:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8005126:	e00a      	b.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800512e:	e006      	b.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8005130:	bf00      	nop
 8005132:	e004      	b.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8005134:	bf00      	nop
 8005136:	e002      	b.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8005138:	bf00      	nop
 800513a:	e000      	b.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 800513c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800513e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005142:	2b00      	cmp	r3, #0
 8005144:	d10d      	bne.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8005146:	4b88      	ldr	r3, [pc, #544]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005148:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800514c:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8005150:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005154:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005158:	4a83      	ldr	r2, [pc, #524]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800515a:	430b      	orrs	r3, r1
 800515c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005160:	e003      	b.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x9da>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005162:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005166:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800516a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800516e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005172:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005176:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005178:	2300      	movs	r3, #0
 800517a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800517c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005180:	460b      	mov	r3, r1
 8005182:	4313      	orrs	r3, r2
 8005184:	d055      	beq.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8005186:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800518a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800518e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005192:	d031      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0xa68>
 8005194:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005198:	d82a      	bhi.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 800519a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800519e:	d02d      	beq.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0xa6c>
 80051a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80051a4:	d824      	bhi.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 80051a6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80051aa:	d029      	beq.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80051ac:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80051b0:	d81e      	bhi.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 80051b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051b6:	d011      	beq.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 80051b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051bc:	d818      	bhi.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d020      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80051c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051c6:	d113      	bne.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80051c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80051cc:	3308      	adds	r3, #8
 80051ce:	4618      	mov	r0, r3
 80051d0:	f000 fc9e 	bl	8005b10 <RCCEx_PLL2_Config>
 80051d4:	4603      	mov	r3, r0
 80051d6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80051da:	e014      	b.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0xa76>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80051dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80051e0:	3330      	adds	r3, #48	@ 0x30
 80051e2:	4618      	mov	r0, r3
 80051e4:	f000 fd2c 	bl	8005c40 <RCCEx_PLL3_Config>
 80051e8:	4603      	mov	r3, r0
 80051ea:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80051ee:	e00a      	b.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0xa76>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80051f6:	e006      	b.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 80051f8:	bf00      	nop
 80051fa:	e004      	b.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 80051fc:	bf00      	nop
 80051fe:	e002      	b.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8005200:	bf00      	nop
 8005202:	e000      	b.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8005204:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005206:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800520a:	2b00      	cmp	r3, #0
 800520c:	d10d      	bne.n	800522a <HAL_RCCEx_PeriphCLKConfig+0xa9a>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800520e:	4b56      	ldr	r3, [pc, #344]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005210:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005214:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005218:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800521c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005220:	4a51      	ldr	r2, [pc, #324]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005222:	430b      	orrs	r3, r1
 8005224:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005228:	e003      	b.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800522a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800522e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8005232:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800523a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800523e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005240:	2300      	movs	r3, #0
 8005242:	667b      	str	r3, [r7, #100]	@ 0x64
 8005244:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005248:	460b      	mov	r3, r1
 800524a:	4313      	orrs	r3, r2
 800524c:	d032      	beq.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0xb24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800524e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005252:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005256:	2b05      	cmp	r3, #5
 8005258:	d80f      	bhi.n	800527a <HAL_RCCEx_PeriphCLKConfig+0xaea>
 800525a:	2b03      	cmp	r3, #3
 800525c:	d211      	bcs.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 800525e:	2b01      	cmp	r3, #1
 8005260:	d911      	bls.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 8005262:	2b02      	cmp	r3, #2
 8005264:	d109      	bne.n	800527a <HAL_RCCEx_PeriphCLKConfig+0xaea>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005266:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800526a:	3308      	adds	r3, #8
 800526c:	4618      	mov	r0, r3
 800526e:	f000 fc4f 	bl	8005b10 <RCCEx_PLL2_Config>
 8005272:	4603      	mov	r3, r0
 8005274:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005278:	e006      	b.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005280:	e002      	b.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 8005282:	bf00      	nop
 8005284:	e000      	b.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 8005286:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005288:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800528c:	2b00      	cmp	r3, #0
 800528e:	d10d      	bne.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8005290:	4b35      	ldr	r3, [pc, #212]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005292:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005296:	f023 0107 	bic.w	r1, r3, #7
 800529a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800529e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80052a2:	4a31      	ldr	r2, [pc, #196]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80052a4:	430b      	orrs	r3, r1
 80052a6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80052aa:	e003      	b.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0xb24>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052ac:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80052b0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 80052b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80052b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052bc:	2100      	movs	r1, #0
 80052be:	65b9      	str	r1, [r7, #88]	@ 0x58
 80052c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80052c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80052c6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80052ca:	460b      	mov	r3, r1
 80052cc:	4313      	orrs	r3, r2
 80052ce:	d024      	beq.n	800531a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 80052d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80052d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d005      	beq.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0xb58>
 80052dc:	2b08      	cmp	r3, #8
 80052de:	d005      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0xb5c>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80052e6:	e002      	b.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 80052e8:	bf00      	nop
 80052ea:	e000      	b.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 80052ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052ee:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d10d      	bne.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0xb82>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 80052f6:	4b1c      	ldr	r3, [pc, #112]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80052f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80052fc:	f023 0108 	bic.w	r1, r3, #8
 8005300:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005304:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005308:	4a17      	ldr	r2, [pc, #92]	@ (8005368 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800530a:	430b      	orrs	r3, r1
 800530c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005310:	e003      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005312:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005316:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800531a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800531e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005322:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005326:	653b      	str	r3, [r7, #80]	@ 0x50
 8005328:	2300      	movs	r3, #0
 800532a:	657b      	str	r3, [r7, #84]	@ 0x54
 800532c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005330:	460b      	mov	r3, r1
 8005332:	4313      	orrs	r3, r2
 8005334:	f000 80b9 	beq.w	80054aa <HAL_RCCEx_PeriphCLKConfig+0xd1a>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8005338:	4b0c      	ldr	r3, [pc, #48]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 800533a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800533c:	4a0b      	ldr	r2, [pc, #44]	@ (800536c <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 800533e:	f043 0301 	orr.w	r3, r3, #1
 8005342:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005344:	f7fb fd02 	bl	8000d4c <HAL_GetTick>
 8005348:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800534c:	e010      	b.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800534e:	f7fb fcfd 	bl	8000d4c <HAL_GetTick>
 8005352:	4602      	mov	r2, r0
 8005354:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	2b02      	cmp	r3, #2
 800535c:	d908      	bls.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
      {
        ret = HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005364:	e00a      	b.n	800537c <HAL_RCCEx_PeriphCLKConfig+0xbec>
 8005366:	bf00      	nop
 8005368:	44020c00 	.word	0x44020c00
 800536c:	44020800 	.word	0x44020800
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005370:	4bba      	ldr	r3, [pc, #744]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0xecc>)
 8005372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005374:	f003 0301 	and.w	r3, r3, #1
 8005378:	2b00      	cmp	r3, #0
 800537a:	d0e8      	beq.n	800534e <HAL_RCCEx_PeriphCLKConfig+0xbbe>
      }
    }

    if (ret == HAL_OK)
 800537c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005380:	2b00      	cmp	r3, #0
 8005382:	f040 808e 	bne.w	80054a2 <HAL_RCCEx_PeriphCLKConfig+0xd12>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005386:	4bb6      	ldr	r3, [pc, #728]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005388:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800538c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005390:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8005394:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005398:	2b00      	cmp	r3, #0
 800539a:	d023      	beq.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 800539c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053a0:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 80053a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d01b      	beq.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0xc54>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80053ac:	4bac      	ldr	r3, [pc, #688]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80053ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80053b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80053ba:	4ba9      	ldr	r3, [pc, #676]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80053bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80053c0:	4aa7      	ldr	r2, [pc, #668]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80053c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053c6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80053ca:	4ba5      	ldr	r3, [pc, #660]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80053cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80053d0:	4aa3      	ldr	r2, [pc, #652]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80053d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053d6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80053da:	4aa1      	ldr	r2, [pc, #644]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80053dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053e0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80053e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053e8:	f003 0301 	and.w	r3, r3, #1
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d019      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053f0:	f7fb fcac 	bl	8000d4c <HAL_GetTick>
 80053f4:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053f8:	e00d      	b.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0xc86>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053fa:	f7fb fca7 	bl	8000d4c <HAL_GetTick>
 80053fe:	4602      	mov	r2, r0
 8005400:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005404:	1ad2      	subs	r2, r2, r3
 8005406:	f241 3388 	movw	r3, #5000	@ 0x1388
 800540a:	429a      	cmp	r2, r3
 800540c:	d903      	bls.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0xc86>
          {
            ret = HAL_TIMEOUT;
 800540e:	2303      	movs	r3, #3
 8005410:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 8005414:	e006      	b.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0xc94>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005416:	4b92      	ldr	r3, [pc, #584]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005418:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800541c:	f003 0302 	and.w	r3, r3, #2
 8005420:	2b00      	cmp	r3, #0
 8005422:	d0ea      	beq.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0xc6a>
          }
        }
      }

      if (ret == HAL_OK)
 8005424:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005428:	2b00      	cmp	r3, #0
 800542a:	d135      	bne.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800542c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005430:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005434:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005438:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800543c:	d110      	bne.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0xcd0>
 800543e:	4b88      	ldr	r3, [pc, #544]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005440:	69db      	ldr	r3, [r3, #28]
 8005442:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005446:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800544a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800544e:	091b      	lsrs	r3, r3, #4
 8005450:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005454:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8005458:	4a81      	ldr	r2, [pc, #516]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800545a:	430b      	orrs	r3, r1
 800545c:	61d3      	str	r3, [r2, #28]
 800545e:	e005      	b.n	800546c <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8005460:	4b7f      	ldr	r3, [pc, #508]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005462:	69db      	ldr	r3, [r3, #28]
 8005464:	4a7e      	ldr	r2, [pc, #504]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005466:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800546a:	61d3      	str	r3, [r2, #28]
 800546c:	4b7c      	ldr	r3, [pc, #496]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800546e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005472:	4a7b      	ldr	r2, [pc, #492]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005474:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005478:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800547c:	4b78      	ldr	r3, [pc, #480]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800547e:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8005482:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005486:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800548a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800548e:	4a74      	ldr	r2, [pc, #464]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005490:	430b      	orrs	r3, r1
 8005492:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005496:	e008      	b.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005498:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800549c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 80054a0:	e003      	b.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054a2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80054a6:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80054aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80054ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b2:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80054b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054b8:	2300      	movs	r3, #0
 80054ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054bc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80054c0:	460b      	mov	r3, r1
 80054c2:	4313      	orrs	r3, r2
 80054c4:	d035      	beq.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0xda2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80054c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80054ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80054ce:	2b30      	cmp	r3, #48	@ 0x30
 80054d0:	d014      	beq.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0xd6c>
 80054d2:	2b30      	cmp	r3, #48	@ 0x30
 80054d4:	d80e      	bhi.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0xd64>
 80054d6:	2b20      	cmp	r3, #32
 80054d8:	d012      	beq.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0xd70>
 80054da:	2b20      	cmp	r3, #32
 80054dc:	d80a      	bhi.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0xd64>
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d010      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0xd74>
 80054e2:	2b10      	cmp	r3, #16
 80054e4:	d106      	bne.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0xd64>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054e6:	4b5e      	ldr	r3, [pc, #376]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80054e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054ea:	4a5d      	ldr	r2, [pc, #372]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80054ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054f0:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 80054f2:	e008      	b.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0xd76>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80054fa:	e004      	b.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 80054fc:	bf00      	nop
 80054fe:	e002      	b.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8005500:	bf00      	nop
 8005502:	e000      	b.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8005504:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005506:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800550a:	2b00      	cmp	r3, #0
 800550c:	d10d      	bne.n	800552a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800550e:	4b54      	ldr	r3, [pc, #336]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005510:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005514:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005518:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800551c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005520:	4a4f      	ldr	r2, [pc, #316]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005522:	430b      	orrs	r3, r1
 8005524:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005528:	e003      	b.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0xda2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800552a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800552e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005532:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800553a:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800553e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005540:	2300      	movs	r3, #0
 8005542:	647b      	str	r3, [r7, #68]	@ 0x44
 8005544:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005548:	460b      	mov	r3, r1
 800554a:	4313      	orrs	r3, r2
 800554c:	d033      	beq.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 800554e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005552:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005556:	2b00      	cmp	r3, #0
 8005558:	d002      	beq.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
 800555a:	2b40      	cmp	r3, #64	@ 0x40
 800555c:	d007      	beq.n	800556e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800555e:	e010      	b.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005560:	4b3f      	ldr	r3, [pc, #252]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005564:	4a3e      	ldr	r2, [pc, #248]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005566:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800556a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 800556c:	e00d      	b.n	800558a <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800556e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005572:	3308      	adds	r3, #8
 8005574:	4618      	mov	r0, r3
 8005576:	f000 facb 	bl	8005b10 <RCCEx_PLL2_Config>
 800557a:	4603      	mov	r3, r0
 800557c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8005580:	e003      	b.n	800558a <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      default:
        ret = HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005588:	bf00      	nop
    }

    if (ret == HAL_OK)
 800558a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800558e:	2b00      	cmp	r3, #0
 8005590:	d10d      	bne.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8005592:	4b33      	ldr	r3, [pc, #204]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005594:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005598:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 800559c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80055a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80055a4:	4a2e      	ldr	r2, [pc, #184]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80055a6:	430b      	orrs	r3, r1
 80055a8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80055ac:	e003      	b.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0xe26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055ae:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80055b2:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80055b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80055ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055be:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80055c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80055c4:	2300      	movs	r3, #0
 80055c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055c8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80055cc:	460b      	mov	r3, r1
 80055ce:	4313      	orrs	r3, r2
 80055d0:	d04c      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0xedc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 80055d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80055d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80055da:	2b04      	cmp	r3, #4
 80055dc:	d827      	bhi.n	800562e <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 80055de:	a201      	add	r2, pc, #4	@ (adr r2, 80055e4 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
 80055e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055e4:	080055f9 	.word	0x080055f9
 80055e8:	08005607 	.word	0x08005607
 80055ec:	0800561b 	.word	0x0800561b
 80055f0:	08005637 	.word	0x08005637
 80055f4:	08005637 	.word	0x08005637
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055f8:	4b19      	ldr	r3, [pc, #100]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80055fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055fc:	4a18      	ldr	r2, [pc, #96]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80055fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005602:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005604:	e018      	b.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0xea8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005606:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800560a:	3308      	adds	r3, #8
 800560c:	4618      	mov	r0, r3
 800560e:	f000 fa7f 	bl	8005b10 <RCCEx_PLL2_Config>
 8005612:	4603      	mov	r3, r0
 8005614:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005618:	e00e      	b.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0xea8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800561a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800561e:	3330      	adds	r3, #48	@ 0x30
 8005620:	4618      	mov	r0, r3
 8005622:	f000 fb0d 	bl	8005c40 <RCCEx_PLL3_Config>
 8005626:	4603      	mov	r3, r0
 8005628:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800562c:	e004      	b.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0xea8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005634:	e000      	b.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0xea8>
        break;
 8005636:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005638:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800563c:	2b00      	cmp	r3, #0
 800563e:	d111      	bne.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0xed4>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005640:	4b07      	ldr	r3, [pc, #28]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005642:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005646:	f023 0107 	bic.w	r1, r3, #7
 800564a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800564e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005652:	4a03      	ldr	r2, [pc, #12]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005654:	430b      	orrs	r3, r1
 8005656:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800565a:	e007      	b.n	800566c <HAL_RCCEx_PeriphCLKConfig+0xedc>
 800565c:	44020800 	.word	0x44020800
 8005660:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005664:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005668:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800566c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005674:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005678:	633b      	str	r3, [r7, #48]	@ 0x30
 800567a:	2300      	movs	r3, #0
 800567c:	637b      	str	r3, [r7, #52]	@ 0x34
 800567e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005682:	460b      	mov	r3, r1
 8005684:	4313      	orrs	r3, r2
 8005686:	f000 8081 	beq.w	800578c <HAL_RCCEx_PeriphCLKConfig+0xffc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 800568a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800568e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005692:	2b20      	cmp	r3, #32
 8005694:	d85f      	bhi.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 8005696:	a201      	add	r2, pc, #4	@ (adr r2, 800569c <HAL_RCCEx_PeriphCLKConfig+0xf0c>)
 8005698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800569c:	08005721 	.word	0x08005721
 80056a0:	08005757 	.word	0x08005757
 80056a4:	08005757 	.word	0x08005757
 80056a8:	08005757 	.word	0x08005757
 80056ac:	08005757 	.word	0x08005757
 80056b0:	08005757 	.word	0x08005757
 80056b4:	08005757 	.word	0x08005757
 80056b8:	08005757 	.word	0x08005757
 80056bc:	0800572f 	.word	0x0800572f
 80056c0:	08005757 	.word	0x08005757
 80056c4:	08005757 	.word	0x08005757
 80056c8:	08005757 	.word	0x08005757
 80056cc:	08005757 	.word	0x08005757
 80056d0:	08005757 	.word	0x08005757
 80056d4:	08005757 	.word	0x08005757
 80056d8:	08005757 	.word	0x08005757
 80056dc:	08005743 	.word	0x08005743
 80056e0:	08005757 	.word	0x08005757
 80056e4:	08005757 	.word	0x08005757
 80056e8:	08005757 	.word	0x08005757
 80056ec:	08005757 	.word	0x08005757
 80056f0:	08005757 	.word	0x08005757
 80056f4:	08005757 	.word	0x08005757
 80056f8:	08005757 	.word	0x08005757
 80056fc:	0800575f 	.word	0x0800575f
 8005700:	08005757 	.word	0x08005757
 8005704:	08005757 	.word	0x08005757
 8005708:	08005757 	.word	0x08005757
 800570c:	08005757 	.word	0x08005757
 8005710:	08005757 	.word	0x08005757
 8005714:	08005757 	.word	0x08005757
 8005718:	08005757 	.word	0x08005757
 800571c:	0800575f 	.word	0x0800575f
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005720:	4bb9      	ldr	r3, [pc, #740]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005724:	4ab8      	ldr	r2, [pc, #736]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005726:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800572a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800572c:	e018      	b.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0xfd0>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800572e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005732:	3308      	adds	r3, #8
 8005734:	4618      	mov	r0, r3
 8005736:	f000 f9eb 	bl	8005b10 <RCCEx_PLL2_Config>
 800573a:	4603      	mov	r3, r0
 800573c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005740:	e00e      	b.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0xfd0>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005742:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005746:	3330      	adds	r3, #48	@ 0x30
 8005748:	4618      	mov	r0, r3
 800574a:	f000 fa79 	bl	8005c40 <RCCEx_PLL3_Config>
 800574e:	4603      	mov	r3, r0
 8005750:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005754:	e004      	b.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800575c:	e000      	b.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        break;
 800575e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005760:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005764:	2b00      	cmp	r3, #0
 8005766:	d10d      	bne.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0xff4>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8005768:	4ba7      	ldr	r3, [pc, #668]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800576a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800576e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005772:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005776:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800577a:	4aa3      	ldr	r2, [pc, #652]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800577c:	430b      	orrs	r3, r1
 800577e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005782:	e003      	b.n	800578c <HAL_RCCEx_PeriphCLKConfig+0xffc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005784:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005788:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800578c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005794:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005798:	62bb      	str	r3, [r7, #40]	@ 0x28
 800579a:	2300      	movs	r3, #0
 800579c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800579e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80057a2:	460b      	mov	r3, r1
 80057a4:	4313      	orrs	r3, r2
 80057a6:	d04e      	beq.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x10b6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 80057a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80057ac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80057b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057b4:	d02e      	beq.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80057b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057ba:	d827      	bhi.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80057bc:	2bc0      	cmp	r3, #192	@ 0xc0
 80057be:	d02b      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x1088>
 80057c0:	2bc0      	cmp	r3, #192	@ 0xc0
 80057c2:	d823      	bhi.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80057c4:	2b80      	cmp	r3, #128	@ 0x80
 80057c6:	d017      	beq.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1068>
 80057c8:	2b80      	cmp	r3, #128	@ 0x80
 80057ca:	d81f      	bhi.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d002      	beq.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x1046>
 80057d0:	2b40      	cmp	r3, #64	@ 0x40
 80057d2:	d007      	beq.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1054>
 80057d4:	e01a      	b.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057d6:	4b8c      	ldr	r3, [pc, #560]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80057d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057da:	4a8b      	ldr	r2, [pc, #556]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80057dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057e0:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80057e2:	e01a      	b.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x108a>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80057e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80057e8:	3308      	adds	r3, #8
 80057ea:	4618      	mov	r0, r3
 80057ec:	f000 f990 	bl	8005b10 <RCCEx_PLL2_Config>
 80057f0:	4603      	mov	r3, r0
 80057f2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80057f6:	e010      	b.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x108a>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80057f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80057fc:	3330      	adds	r3, #48	@ 0x30
 80057fe:	4618      	mov	r0, r3
 8005800:	f000 fa1e 	bl	8005c40 <RCCEx_PLL3_Config>
 8005804:	4603      	mov	r3, r0
 8005806:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800580a:	e006      	b.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x108a>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005812:	e002      	b.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 8005814:	bf00      	nop
 8005816:	e000      	b.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 8005818:	bf00      	nop
    }

    if (ret == HAL_OK)
 800581a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800581e:	2b00      	cmp	r3, #0
 8005820:	d10d      	bne.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x10ae>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8005822:	4b79      	ldr	r3, [pc, #484]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005824:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005828:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 800582c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005830:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005834:	4974      	ldr	r1, [pc, #464]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005836:	4313      	orrs	r3, r2
 8005838:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800583c:	e003      	b.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x10b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800583e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005842:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8005846:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800584a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800584e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005852:	623b      	str	r3, [r7, #32]
 8005854:	2300      	movs	r3, #0
 8005856:	627b      	str	r3, [r7, #36]	@ 0x24
 8005858:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800585c:	460b      	mov	r3, r1
 800585e:	4313      	orrs	r3, r2
 8005860:	d055      	beq.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x117e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8005862:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005866:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800586a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800586e:	d031      	beq.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x1144>
 8005870:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005874:	d82a      	bhi.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8005876:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800587a:	d02d      	beq.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
 800587c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005880:	d824      	bhi.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8005882:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005886:	d029      	beq.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x114c>
 8005888:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800588c:	d81e      	bhi.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x113c>
 800588e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005892:	d011      	beq.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x1128>
 8005894:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005898:	d818      	bhi.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x113c>
 800589a:	2b00      	cmp	r3, #0
 800589c:	d020      	beq.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x1150>
 800589e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058a2:	d113      	bne.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x113c>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80058a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058a8:	3308      	adds	r3, #8
 80058aa:	4618      	mov	r0, r3
 80058ac:	f000 f930 	bl	8005b10 <RCCEx_PLL2_Config>
 80058b0:	4603      	mov	r3, r0
 80058b2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 80058b6:	e014      	b.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x1152>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80058b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058bc:	3330      	adds	r3, #48	@ 0x30
 80058be:	4618      	mov	r0, r3
 80058c0:	f000 f9be 	bl	8005c40 <RCCEx_PLL3_Config>
 80058c4:	4603      	mov	r3, r0
 80058c6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 80058ca:	e00a      	b.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80058d2:	e006      	b.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 80058d4:	bf00      	nop
 80058d6:	e004      	b.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 80058d8:	bf00      	nop
 80058da:	e002      	b.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 80058dc:	bf00      	nop
 80058de:	e000      	b.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 80058e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058e2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d10d      	bne.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x1176>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 80058ea:	4b47      	ldr	r3, [pc, #284]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80058ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80058f0:	f423 6260 	bic.w	r2, r3, #3584	@ 0xe00
 80058f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058f8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80058fc:	4942      	ldr	r1, [pc, #264]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80058fe:	4313      	orrs	r3, r2
 8005900:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005904:	e003      	b.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x117e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005906:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800590a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800590e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005916:	2100      	movs	r1, #0
 8005918:	61b9      	str	r1, [r7, #24]
 800591a:	f003 0302 	and.w	r3, r3, #2
 800591e:	61fb      	str	r3, [r7, #28]
 8005920:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005924:	460b      	mov	r3, r1
 8005926:	4313      	orrs	r3, r2
 8005928:	d03c      	beq.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 800592a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800592e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005932:	2b03      	cmp	r3, #3
 8005934:	d81b      	bhi.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x11de>
 8005936:	a201      	add	r2, pc, #4	@ (adr r2, 800593c <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
 8005938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800593c:	08005977 	.word	0x08005977
 8005940:	0800594d 	.word	0x0800594d
 8005944:	0800595b 	.word	0x0800595b
 8005948:	08005977 	.word	0x08005977
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800594c:	4b2e      	ldr	r3, [pc, #184]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800594e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005950:	4a2d      	ldr	r2, [pc, #180]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005952:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005956:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005958:	e00e      	b.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x11e8>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800595a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800595e:	3308      	adds	r3, #8
 8005960:	4618      	mov	r0, r3
 8005962:	f000 f8d5 	bl	8005b10 <RCCEx_PLL2_Config>
 8005966:	4603      	mov	r3, r0
 8005968:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 800596c:	e004      	b.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005974:	e000      	b.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
        break;
 8005976:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005978:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800597c:	2b00      	cmp	r3, #0
 800597e:	d10d      	bne.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x120c>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8005980:	4b21      	ldr	r3, [pc, #132]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005982:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005986:	f023 0203 	bic.w	r2, r3, #3
 800598a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800598e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005992:	491d      	ldr	r1, [pc, #116]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005994:	4313      	orrs	r3, r2
 8005996:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800599a:	e003      	b.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800599c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80059a0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80059a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80059a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ac:	2100      	movs	r1, #0
 80059ae:	6139      	str	r1, [r7, #16]
 80059b0:	f003 0304 	and.w	r3, r3, #4
 80059b4:	617b      	str	r3, [r7, #20]
 80059b6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80059ba:	460b      	mov	r3, r1
 80059bc:	4313      	orrs	r3, r2
 80059be:	d03c      	beq.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x12aa>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 80059c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80059c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80059cc:	d00e      	beq.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x125c>
 80059ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80059d2:	d815      	bhi.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x1270>
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d019      	beq.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x127c>
 80059d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059dc:	d110      	bne.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x1270>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059de:	4b0a      	ldr	r3, [pc, #40]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80059e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059e2:	4a09      	ldr	r2, [pc, #36]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80059e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059e8:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80059ea:	e010      	b.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x127e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80059ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80059f0:	3308      	adds	r3, #8
 80059f2:	4618      	mov	r0, r3
 80059f4:	f000 f88c 	bl	8005b10 <RCCEx_PLL2_Config>
 80059f8:	4603      	mov	r3, r0
 80059fa:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80059fe:	e006      	b.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x127e>

      default:
        ret = HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005a06:	e002      	b.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x127e>
 8005a08:	44020c00 	.word	0x44020c00
        break;
 8005a0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a0e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d10d      	bne.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x12a2>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8005a16:	4b3d      	ldr	r3, [pc, #244]	@ (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005a18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005a1c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005a20:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a24:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a28:	4938      	ldr	r1, [pc, #224]	@ (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8005a30:	e003      	b.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x12aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a32:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005a36:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005a3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a42:	2100      	movs	r1, #0
 8005a44:	60b9      	str	r1, [r7, #8]
 8005a46:	f003 0310 	and.w	r3, r3, #16
 8005a4a:	60fb      	str	r3, [r7, #12]
 8005a4c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005a50:	460b      	mov	r3, r1
 8005a52:	4313      	orrs	r3, r2
 8005a54:	d038      	beq.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x1338>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8005a56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a5a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005a5e:	2b30      	cmp	r3, #48	@ 0x30
 8005a60:	d01b      	beq.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x130a>
 8005a62:	2b30      	cmp	r3, #48	@ 0x30
 8005a64:	d815      	bhi.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x1302>
 8005a66:	2b10      	cmp	r3, #16
 8005a68:	d002      	beq.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
 8005a6a:	2b20      	cmp	r3, #32
 8005a6c:	d007      	beq.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x12ee>
 8005a6e:	e010      	b.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x1302>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a70:	4b26      	ldr	r3, [pc, #152]	@ (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a74:	4a25      	ldr	r2, [pc, #148]	@ (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005a76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a7a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8005a7c:	e00e      	b.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x130c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005a7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a82:	3330      	adds	r3, #48	@ 0x30
 8005a84:	4618      	mov	r0, r3
 8005a86:	f000 f8db 	bl	8005c40 <RCCEx_PLL3_Config>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8005a90:	e004      	b.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x130c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005a98:	e000      	b.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x130c>
        break;
 8005a9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a9c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d10d      	bne.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x1330>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8005aa4:	4b19      	ldr	r3, [pc, #100]	@ (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005aa6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005aaa:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005aae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005ab2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005ab6:	4915      	ldr	r1, [pc, #84]	@ (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8005abe:	e003      	b.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x1338>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ac0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005ac4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005ac8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad0:	2100      	movs	r1, #0
 8005ad2:	6039      	str	r1, [r7, #0]
 8005ad4:	f003 0308 	and.w	r3, r3, #8
 8005ad8:	607b      	str	r3, [r7, #4]
 8005ada:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005ade:	460b      	mov	r3, r1
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	d00c      	beq.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x136e>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8005ae4:	4b09      	ldr	r3, [pc, #36]	@ (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005ae6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005aea:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005aee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005af2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005af6:	4905      	ldr	r1, [pc, #20]	@ (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005af8:	4313      	orrs	r3, r2
 8005afa:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 8005afe:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	37e8      	adds	r7, #232	@ 0xe8
 8005b06:	46bd      	mov	sp, r7
 8005b08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b0c:	44020c00 	.word	0x44020c00

08005b10 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8005b18:	4b48      	ldr	r3, [pc, #288]	@ (8005c3c <RCCEx_PLL2_Config+0x12c>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a47      	ldr	r2, [pc, #284]	@ (8005c3c <RCCEx_PLL2_Config+0x12c>)
 8005b1e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005b22:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005b24:	f7fb f912 	bl	8000d4c <HAL_GetTick>
 8005b28:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005b2a:	e008      	b.n	8005b3e <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005b2c:	f7fb f90e 	bl	8000d4c <HAL_GetTick>
 8005b30:	4602      	mov	r2, r0
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	1ad3      	subs	r3, r2, r3
 8005b36:	2b02      	cmp	r3, #2
 8005b38:	d901      	bls.n	8005b3e <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005b3a:	2303      	movs	r3, #3
 8005b3c:	e07a      	b.n	8005c34 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005b3e:	4b3f      	ldr	r3, [pc, #252]	@ (8005c3c <RCCEx_PLL2_Config+0x12c>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d1f0      	bne.n	8005b2c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8005b4a:	4b3c      	ldr	r3, [pc, #240]	@ (8005c3c <RCCEx_PLL2_Config+0x12c>)
 8005b4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b4e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005b52:	f023 0303 	bic.w	r3, r3, #3
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	6811      	ldr	r1, [r2, #0]
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	6852      	ldr	r2, [r2, #4]
 8005b5e:	0212      	lsls	r2, r2, #8
 8005b60:	430a      	orrs	r2, r1
 8005b62:	4936      	ldr	r1, [pc, #216]	@ (8005c3c <RCCEx_PLL2_Config+0x12c>)
 8005b64:	4313      	orrs	r3, r2
 8005b66:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	3b01      	subs	r3, #1
 8005b6e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	3b01      	subs	r3, #1
 8005b78:	025b      	lsls	r3, r3, #9
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	431a      	orrs	r2, r3
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	691b      	ldr	r3, [r3, #16]
 8005b82:	3b01      	subs	r3, #1
 8005b84:	041b      	lsls	r3, r3, #16
 8005b86:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005b8a:	431a      	orrs	r2, r3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	695b      	ldr	r3, [r3, #20]
 8005b90:	3b01      	subs	r3, #1
 8005b92:	061b      	lsls	r3, r3, #24
 8005b94:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005b98:	4928      	ldr	r1, [pc, #160]	@ (8005c3c <RCCEx_PLL2_Config+0x12c>)
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8005b9e:	4b27      	ldr	r3, [pc, #156]	@ (8005c3c <RCCEx_PLL2_Config+0x12c>)
 8005ba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ba2:	f023 020c 	bic.w	r2, r3, #12
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	699b      	ldr	r3, [r3, #24]
 8005baa:	4924      	ldr	r1, [pc, #144]	@ (8005c3c <RCCEx_PLL2_Config+0x12c>)
 8005bac:	4313      	orrs	r3, r2
 8005bae:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8005bb0:	4b22      	ldr	r3, [pc, #136]	@ (8005c3c <RCCEx_PLL2_Config+0x12c>)
 8005bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bb4:	f023 0220 	bic.w	r2, r3, #32
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	69db      	ldr	r3, [r3, #28]
 8005bbc:	491f      	ldr	r1, [pc, #124]	@ (8005c3c <RCCEx_PLL2_Config+0x12c>)
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8005bc2:	4b1e      	ldr	r3, [pc, #120]	@ (8005c3c <RCCEx_PLL2_Config+0x12c>)
 8005bc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bca:	491c      	ldr	r1, [pc, #112]	@ (8005c3c <RCCEx_PLL2_Config+0x12c>)
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8005bd0:	4b1a      	ldr	r3, [pc, #104]	@ (8005c3c <RCCEx_PLL2_Config+0x12c>)
 8005bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bd4:	4a19      	ldr	r2, [pc, #100]	@ (8005c3c <RCCEx_PLL2_Config+0x12c>)
 8005bd6:	f023 0310 	bic.w	r3, r3, #16
 8005bda:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8005bdc:	4b17      	ldr	r3, [pc, #92]	@ (8005c3c <RCCEx_PLL2_Config+0x12c>)
 8005bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005be0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005be4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005be8:	687a      	ldr	r2, [r7, #4]
 8005bea:	6a12      	ldr	r2, [r2, #32]
 8005bec:	00d2      	lsls	r2, r2, #3
 8005bee:	4913      	ldr	r1, [pc, #76]	@ (8005c3c <RCCEx_PLL2_Config+0x12c>)
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8005bf4:	4b11      	ldr	r3, [pc, #68]	@ (8005c3c <RCCEx_PLL2_Config+0x12c>)
 8005bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bf8:	4a10      	ldr	r2, [pc, #64]	@ (8005c3c <RCCEx_PLL2_Config+0x12c>)
 8005bfa:	f043 0310 	orr.w	r3, r3, #16
 8005bfe:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8005c00:	4b0e      	ldr	r3, [pc, #56]	@ (8005c3c <RCCEx_PLL2_Config+0x12c>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a0d      	ldr	r2, [pc, #52]	@ (8005c3c <RCCEx_PLL2_Config+0x12c>)
 8005c06:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005c0a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005c0c:	f7fb f89e 	bl	8000d4c <HAL_GetTick>
 8005c10:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005c12:	e008      	b.n	8005c26 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005c14:	f7fb f89a 	bl	8000d4c <HAL_GetTick>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	2b02      	cmp	r3, #2
 8005c20:	d901      	bls.n	8005c26 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8005c22:	2303      	movs	r3, #3
 8005c24:	e006      	b.n	8005c34 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005c26:	4b05      	ldr	r3, [pc, #20]	@ (8005c3c <RCCEx_PLL2_Config+0x12c>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d0f0      	beq.n	8005c14 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8005c32:	2300      	movs	r3, #0

}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3710      	adds	r7, #16
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}
 8005c3c:	44020c00 	.word	0x44020c00

08005c40 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b084      	sub	sp, #16
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8005c48:	4b48      	ldr	r3, [pc, #288]	@ (8005d6c <RCCEx_PLL3_Config+0x12c>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a47      	ldr	r2, [pc, #284]	@ (8005d6c <RCCEx_PLL3_Config+0x12c>)
 8005c4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c52:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005c54:	f7fb f87a 	bl	8000d4c <HAL_GetTick>
 8005c58:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005c5a:	e008      	b.n	8005c6e <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005c5c:	f7fb f876 	bl	8000d4c <HAL_GetTick>
 8005c60:	4602      	mov	r2, r0
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	1ad3      	subs	r3, r2, r3
 8005c66:	2b02      	cmp	r3, #2
 8005c68:	d901      	bls.n	8005c6e <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005c6a:	2303      	movs	r3, #3
 8005c6c:	e07a      	b.n	8005d64 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005c6e:	4b3f      	ldr	r3, [pc, #252]	@ (8005d6c <RCCEx_PLL3_Config+0x12c>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d1f0      	bne.n	8005c5c <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8005c7a:	4b3c      	ldr	r3, [pc, #240]	@ (8005d6c <RCCEx_PLL3_Config+0x12c>)
 8005c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c7e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005c82:	f023 0303 	bic.w	r3, r3, #3
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	6811      	ldr	r1, [r2, #0]
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	6852      	ldr	r2, [r2, #4]
 8005c8e:	0212      	lsls	r2, r2, #8
 8005c90:	430a      	orrs	r2, r1
 8005c92:	4936      	ldr	r1, [pc, #216]	@ (8005d6c <RCCEx_PLL3_Config+0x12c>)
 8005c94:	4313      	orrs	r3, r2
 8005c96:	630b      	str	r3, [r1, #48]	@ 0x30
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	3b01      	subs	r3, #1
 8005c9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	3b01      	subs	r3, #1
 8005ca8:	025b      	lsls	r3, r3, #9
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	431a      	orrs	r2, r3
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	691b      	ldr	r3, [r3, #16]
 8005cb2:	3b01      	subs	r3, #1
 8005cb4:	041b      	lsls	r3, r3, #16
 8005cb6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005cba:	431a      	orrs	r2, r3
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	695b      	ldr	r3, [r3, #20]
 8005cc0:	3b01      	subs	r3, #1
 8005cc2:	061b      	lsls	r3, r3, #24
 8005cc4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005cc8:	4928      	ldr	r1, [pc, #160]	@ (8005d6c <RCCEx_PLL3_Config+0x12c>)
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005cce:	4b27      	ldr	r3, [pc, #156]	@ (8005d6c <RCCEx_PLL3_Config+0x12c>)
 8005cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cd2:	f023 020c 	bic.w	r2, r3, #12
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	699b      	ldr	r3, [r3, #24]
 8005cda:	4924      	ldr	r1, [pc, #144]	@ (8005d6c <RCCEx_PLL3_Config+0x12c>)
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8005ce0:	4b22      	ldr	r3, [pc, #136]	@ (8005d6c <RCCEx_PLL3_Config+0x12c>)
 8005ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ce4:	f023 0220 	bic.w	r2, r3, #32
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	69db      	ldr	r3, [r3, #28]
 8005cec:	491f      	ldr	r1, [pc, #124]	@ (8005d6c <RCCEx_PLL3_Config+0x12c>)
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8005cf2:	4b1e      	ldr	r3, [pc, #120]	@ (8005d6c <RCCEx_PLL3_Config+0x12c>)
 8005cf4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cfa:	491c      	ldr	r1, [pc, #112]	@ (8005d6c <RCCEx_PLL3_Config+0x12c>)
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8005d00:	4b1a      	ldr	r3, [pc, #104]	@ (8005d6c <RCCEx_PLL3_Config+0x12c>)
 8005d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d04:	4a19      	ldr	r2, [pc, #100]	@ (8005d6c <RCCEx_PLL3_Config+0x12c>)
 8005d06:	f023 0310 	bic.w	r3, r3, #16
 8005d0a:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8005d0c:	4b17      	ldr	r3, [pc, #92]	@ (8005d6c <RCCEx_PLL3_Config+0x12c>)
 8005d0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d10:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d14:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	6a12      	ldr	r2, [r2, #32]
 8005d1c:	00d2      	lsls	r2, r2, #3
 8005d1e:	4913      	ldr	r1, [pc, #76]	@ (8005d6c <RCCEx_PLL3_Config+0x12c>)
 8005d20:	4313      	orrs	r3, r2
 8005d22:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8005d24:	4b11      	ldr	r3, [pc, #68]	@ (8005d6c <RCCEx_PLL3_Config+0x12c>)
 8005d26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d28:	4a10      	ldr	r2, [pc, #64]	@ (8005d6c <RCCEx_PLL3_Config+0x12c>)
 8005d2a:	f043 0310 	orr.w	r3, r3, #16
 8005d2e:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8005d30:	4b0e      	ldr	r3, [pc, #56]	@ (8005d6c <RCCEx_PLL3_Config+0x12c>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a0d      	ldr	r2, [pc, #52]	@ (8005d6c <RCCEx_PLL3_Config+0x12c>)
 8005d36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d3a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005d3c:	f7fb f806 	bl	8000d4c <HAL_GetTick>
 8005d40:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005d42:	e008      	b.n	8005d56 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005d44:	f7fb f802 	bl	8000d4c <HAL_GetTick>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	1ad3      	subs	r3, r2, r3
 8005d4e:	2b02      	cmp	r3, #2
 8005d50:	d901      	bls.n	8005d56 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 8005d52:	2303      	movs	r3, #3
 8005d54:	e006      	b.n	8005d64 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005d56:	4b05      	ldr	r3, [pc, #20]	@ (8005d6c <RCCEx_PLL3_Config+0x12c>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d0f0      	beq.n	8005d44 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 8005d62:	2300      	movs	r3, #0
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3710      	adds	r7, #16
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}
 8005d6c:	44020c00 	.word	0x44020c00

08005d70 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_DRD_TypeDef *USBx)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b085      	sub	sp, #20
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005d7e:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8005d82:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = winterruptmask;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	68fa      	ldr	r2, [r7, #12]
 8005d88:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005d8a:	2300      	movs	r3, #0
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3714      	adds	r7, #20
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b085      	sub	sp, #20
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005da0:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8005da4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	43db      	mvns	r3, r3
 8005dae:	401a      	ands	r2, r3
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005db4:	2300      	movs	r3, #0
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3714      	adds	r7, #20
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr

08005dc2 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 8005dc2:	b480      	push	{r7}
 8005dc4:	b083      	sub	sp, #12
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
 8005dca:	460b      	mov	r3, r1
 8005dcc:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 8005dce:	78fb      	ldrb	r3, [r7, #3]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d106      	bne.n	8005de2 <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dd8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	641a      	str	r2, [r3, #64]	@ 0x40
 8005de0:	e00b      	b.n	8005dfa <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 8005de2:	78fb      	ldrb	r3, [r7, #3]
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d106      	bne.n	8005df6 <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dec:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	641a      	str	r2, [r3, #64]	@ 0x40
 8005df4:	e001      	b.n	8005dfa <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e000      	b.n	8005dfc <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 8005dfa:	2300      	movs	r3, #0
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	370c      	adds	r7, #12
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr

08005e08 <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 8005e08:	b084      	sub	sp, #16
 8005e0a:	b580      	push	{r7, lr}
 8005e0c:	b084      	sub	sp, #16
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	6078      	str	r0, [r7, #4]
 8005e12:	f107 001c 	add.w	r0, r7, #28
 8005e16:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e24:	f023 0201 	bic.w	r2, r3, #1
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 8005e2c:	2100      	movs	r1, #0
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f7ff ffc7 	bl	8005dc2 <USB_SetCurrentMode>
 8005e34:	4603      	mov	r3, r0
 8005e36:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 8005e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3710      	adds	r7, #16
 8005e44:	46bd      	mov	sp, r7
 8005e46:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e4a:	b004      	add	sp, #16
 8005e4c:	4770      	bx	lr
	...

08005e50 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b09f      	sub	sp, #124	@ 0x7c
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  uint32_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005e60:	687a      	ldr	r2, [r7, #4]
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	009b      	lsls	r3, r3, #2
 8005e68:	4413      	add	r3, r2
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	4ba0      	ldr	r3, [pc, #640]	@ (80060f0 <USB_ActivateEndpoint+0x2a0>)
 8005e6e:	4013      	ands	r3, r2
 8005e70:	673b      	str	r3, [r7, #112]	@ 0x70

  /* initialize Endpoint */
  switch (ep->type)
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	78db      	ldrb	r3, [r3, #3]
 8005e76:	2b03      	cmp	r3, #3
 8005e78:	d819      	bhi.n	8005eae <USB_ActivateEndpoint+0x5e>
 8005e7a:	a201      	add	r2, pc, #4	@ (adr r2, 8005e80 <USB_ActivateEndpoint+0x30>)
 8005e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e80:	08005e91 	.word	0x08005e91
 8005e84:	08005ea5 	.word	0x08005ea5
 8005e88:	08005eb7 	.word	0x08005eb7
 8005e8c:	08005e9b 	.word	0x08005e9b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005e90:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005e92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005e96:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 8005e98:	e00e      	b.n	8005eb8 <USB_ActivateEndpoint+0x68>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005e9a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005e9c:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8005ea0:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 8005ea2:	e009      	b.n	8005eb8 <USB_ActivateEndpoint+0x68>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005ea4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005ea6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005eaa:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 8005eac:	e004      	b.n	8005eb8 <USB_ActivateEndpoint+0x68>

    default:
      ret = HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      break;
 8005eb4:	e000      	b.n	8005eb8 <USB_ActivateEndpoint+0x68>
      break;
 8005eb6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_VTRX | USB_EP_VTTX));
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	441a      	add	r2, r3
 8005ec2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005ec4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ec8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ecc:	6013      	str	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	4413      	add	r3, r2
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	4b86      	ldr	r3, [pc, #536]	@ (80060f4 <USB_ActivateEndpoint+0x2a4>)
 8005edc:	4013      	ands	r3, r2
 8005ede:	683a      	ldr	r2, [r7, #0]
 8005ee0:	7812      	ldrb	r2, [r2, #0]
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	781b      	ldrb	r3, [r3, #0]
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	441a      	add	r2, r3
 8005ef0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005ef2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ef6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005efa:	6013      	str	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	7b1b      	ldrb	r3, [r3, #12]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	f040 8177 	bne.w	80061f4 <USB_ActivateEndpoint+0x3a4>
  {
    if (ep->is_in != 0U)
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	785b      	ldrb	r3, [r3, #1]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d079      	beq.n	8006002 <USB_ActivateEndpoint+0x1b2>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	00db      	lsls	r3, r3, #3
 8005f14:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005f18:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	00db      	lsls	r3, r3, #3
 8005f24:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005f28:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005f2c:	0c12      	lsrs	r2, r2, #16
 8005f2e:	0412      	lsls	r2, r2, #16
 8005f30:	601a      	str	r2, [r3, #0]
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	00db      	lsls	r3, r3, #3
 8005f38:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005f3c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005f40:	6819      	ldr	r1, [r3, #0]
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	88db      	ldrh	r3, [r3, #6]
 8005f46:	089b      	lsrs	r3, r3, #2
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	009a      	lsls	r2, r3, #2
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	00db      	lsls	r3, r3, #3
 8005f52:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005f56:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005f5a:	430a      	orrs	r2, r1
 8005f5c:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f5e:	687a      	ldr	r2, [r7, #4]
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	4413      	add	r3, r2
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	61bb      	str	r3, [r7, #24]
 8005f6c:	69bb      	ldr	r3, [r7, #24]
 8005f6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d013      	beq.n	8005f9e <USB_ActivateEndpoint+0x14e>
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	4413      	add	r3, r2
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	4b5c      	ldr	r3, [pc, #368]	@ (80060f4 <USB_ActivateEndpoint+0x2a4>)
 8005f84:	4013      	ands	r3, r2
 8005f86:	617b      	str	r3, [r7, #20]
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	441a      	add	r2, r3
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f98:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005f9c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	78db      	ldrb	r3, [r3, #3]
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d018      	beq.n	8005fd8 <USB_ActivateEndpoint+0x188>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	009b      	lsls	r3, r3, #2
 8005fae:	4413      	add	r3, r2
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	4b51      	ldr	r3, [pc, #324]	@ (80060f8 <USB_ActivateEndpoint+0x2a8>)
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	60fb      	str	r3, [r7, #12]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f083 0320 	eor.w	r3, r3, #32
 8005fbe:	60fb      	str	r3, [r7, #12]
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	441a      	add	r2, r3
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005fd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fd4:	6013      	str	r3, [r2, #0]
 8005fd6:	e28c      	b.n	80064f2 <USB_ActivateEndpoint+0x6a2>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	4413      	add	r3, r2
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	4b44      	ldr	r3, [pc, #272]	@ (80060f8 <USB_ActivateEndpoint+0x2a8>)
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	613b      	str	r3, [r7, #16]
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	441a      	add	r2, r3
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ffa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ffe:	6013      	str	r3, [r2, #0]
 8006000:	e277      	b.n	80064f2 <USB_ActivateEndpoint+0x6a2>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	00db      	lsls	r3, r3, #3
 8006008:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800600c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006010:	685a      	ldr	r2, [r3, #4]
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	00db      	lsls	r3, r3, #3
 8006018:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800601c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006020:	0c12      	lsrs	r2, r2, #16
 8006022:	0412      	lsls	r2, r2, #16
 8006024:	605a      	str	r2, [r3, #4]
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	00db      	lsls	r3, r3, #3
 800602c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006030:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006034:	6859      	ldr	r1, [r3, #4]
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	88db      	ldrh	r3, [r3, #6]
 800603a:	089b      	lsrs	r3, r3, #2
 800603c:	b29b      	uxth	r3, r3
 800603e:	009a      	lsls	r2, r3, #2
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	00db      	lsls	r3, r3, #3
 8006046:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800604a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800604e:	430a      	orrs	r2, r1
 8006050:	605a      	str	r2, [r3, #4]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	00db      	lsls	r3, r3, #3
 8006058:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800605c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006060:	685a      	ldr	r2, [r3, #4]
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	00db      	lsls	r3, r3, #3
 8006068:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800606c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006070:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8006074:	605a      	str	r2, [r3, #4]
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	691b      	ldr	r3, [r3, #16]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d112      	bne.n	80060a4 <USB_ActivateEndpoint+0x254>
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	00db      	lsls	r3, r3, #3
 8006084:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006088:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800608c:	685a      	ldr	r2, [r3, #4]
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	00db      	lsls	r3, r3, #3
 8006094:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006098:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800609c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80060a0:	605a      	str	r2, [r3, #4]
 80060a2:	e04d      	b.n	8006140 <USB_ActivateEndpoint+0x2f0>
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	691b      	ldr	r3, [r3, #16]
 80060a8:	2b3e      	cmp	r3, #62	@ 0x3e
 80060aa:	d827      	bhi.n	80060fc <USB_ActivateEndpoint+0x2ac>
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	691b      	ldr	r3, [r3, #16]
 80060b0:	085b      	lsrs	r3, r3, #1
 80060b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	691b      	ldr	r3, [r3, #16]
 80060b8:	f003 0301 	and.w	r3, r3, #1
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d002      	beq.n	80060c6 <USB_ActivateEndpoint+0x276>
 80060c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80060c2:	3301      	adds	r3, #1
 80060c4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	781b      	ldrb	r3, [r3, #0]
 80060ca:	00db      	lsls	r3, r3, #3
 80060cc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80060d0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80060d4:	6859      	ldr	r1, [r3, #4]
 80060d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80060d8:	069a      	lsls	r2, r3, #26
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	00db      	lsls	r3, r3, #3
 80060e0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80060e4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80060e8:	430a      	orrs	r2, r1
 80060ea:	605a      	str	r2, [r3, #4]
 80060ec:	e028      	b.n	8006140 <USB_ActivateEndpoint+0x2f0>
 80060ee:	bf00      	nop
 80060f0:	07ff898f 	.word	0x07ff898f
 80060f4:	07ff8f8f 	.word	0x07ff8f8f
 80060f8:	07ff8fbf 	.word	0x07ff8fbf
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	691b      	ldr	r3, [r3, #16]
 8006100:	095b      	lsrs	r3, r3, #5
 8006102:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	691b      	ldr	r3, [r3, #16]
 8006108:	f003 031f 	and.w	r3, r3, #31
 800610c:	2b00      	cmp	r3, #0
 800610e:	d102      	bne.n	8006116 <USB_ActivateEndpoint+0x2c6>
 8006110:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006112:	3b01      	subs	r3, #1
 8006114:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	781b      	ldrb	r3, [r3, #0]
 800611a:	00db      	lsls	r3, r3, #3
 800611c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006120:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006124:	685a      	ldr	r2, [r3, #4]
 8006126:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006128:	069b      	lsls	r3, r3, #26
 800612a:	431a      	orrs	r2, r3
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	00db      	lsls	r3, r3, #3
 8006132:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006136:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800613a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800613e:	605a      	str	r2, [r3, #4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	4413      	add	r3, r2
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800614e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006150:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006154:	2b00      	cmp	r3, #0
 8006156:	d013      	beq.n	8006180 <USB_ActivateEndpoint+0x330>
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	4413      	add	r3, r2
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	4b9c      	ldr	r3, [pc, #624]	@ (80063d8 <USB_ActivateEndpoint+0x588>)
 8006166:	4013      	ands	r3, r2
 8006168:	627b      	str	r3, [r7, #36]	@ 0x24
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	441a      	add	r2, r3
 8006174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006176:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800617a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800617e:	6013      	str	r3, [r2, #0]

      if (ep->num == 0U)
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d11c      	bne.n	80061c2 <USB_ActivateEndpoint+0x372>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	4413      	add	r3, r2
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	4b91      	ldr	r3, [pc, #580]	@ (80063dc <USB_ActivateEndpoint+0x58c>)
 8006196:	4013      	ands	r3, r2
 8006198:	61fb      	str	r3, [r7, #28]
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80061a0:	61fb      	str	r3, [r7, #28]
 80061a2:	69fb      	ldr	r3, [r7, #28]
 80061a4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80061a8:	61fb      	str	r3, [r7, #28]
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	009b      	lsls	r3, r3, #2
 80061b2:	441a      	add	r2, r3
 80061b4:	69fb      	ldr	r3, [r7, #28]
 80061b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061be:	6013      	str	r3, [r2, #0]
 80061c0:	e197      	b.n	80064f2 <USB_ActivateEndpoint+0x6a2>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	4413      	add	r3, r2
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	4b83      	ldr	r3, [pc, #524]	@ (80063dc <USB_ActivateEndpoint+0x58c>)
 80061d0:	4013      	ands	r3, r2
 80061d2:	623b      	str	r3, [r7, #32]
 80061d4:	6a3b      	ldr	r3, [r7, #32]
 80061d6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80061da:	623b      	str	r3, [r7, #32]
 80061dc:	687a      	ldr	r2, [r7, #4]
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	441a      	add	r2, r3
 80061e6:	6a3b      	ldr	r3, [r7, #32]
 80061e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061f0:	6013      	str	r3, [r2, #0]
 80061f2:	e17e      	b.n	80064f2 <USB_ActivateEndpoint+0x6a2>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	78db      	ldrb	r3, [r3, #3]
 80061f8:	2b02      	cmp	r3, #2
 80061fa:	d114      	bne.n	8006226 <USB_ActivateEndpoint+0x3d6>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	4413      	add	r3, r2
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	4b73      	ldr	r3, [pc, #460]	@ (80063d8 <USB_ActivateEndpoint+0x588>)
 800620a:	4013      	ands	r3, r2
 800620c:	663b      	str	r3, [r7, #96]	@ 0x60
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	441a      	add	r2, r3
 8006218:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800621a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800621e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006222:	6013      	str	r3, [r2, #0]
 8006224:	e013      	b.n	800624e <USB_ActivateEndpoint+0x3fe>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	4413      	add	r3, r2
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	4b6b      	ldr	r3, [pc, #428]	@ (80063e0 <USB_ActivateEndpoint+0x590>)
 8006234:	4013      	ands	r3, r2
 8006236:	667b      	str	r3, [r7, #100]	@ 0x64
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	441a      	add	r2, r3
 8006242:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006244:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006248:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800624c:	6013      	str	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	781b      	ldrb	r3, [r3, #0]
 8006252:	00db      	lsls	r3, r3, #3
 8006254:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006258:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	00db      	lsls	r3, r3, #3
 8006264:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006268:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800626c:	0c12      	lsrs	r2, r2, #16
 800626e:	0412      	lsls	r2, r2, #16
 8006270:	601a      	str	r2, [r3, #0]
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	00db      	lsls	r3, r3, #3
 8006278:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800627c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006280:	6819      	ldr	r1, [r3, #0]
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	891b      	ldrh	r3, [r3, #8]
 8006286:	089b      	lsrs	r3, r3, #2
 8006288:	b29b      	uxth	r3, r3
 800628a:	009a      	lsls	r2, r3, #2
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	781b      	ldrb	r3, [r3, #0]
 8006290:	00db      	lsls	r3, r3, #3
 8006292:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006296:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800629a:	430a      	orrs	r2, r1
 800629c:	601a      	str	r2, [r3, #0]
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	781b      	ldrb	r3, [r3, #0]
 80062a2:	00db      	lsls	r3, r3, #3
 80062a4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80062a8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80062ac:	685a      	ldr	r2, [r3, #4]
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	00db      	lsls	r3, r3, #3
 80062b4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80062b8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80062bc:	0c12      	lsrs	r2, r2, #16
 80062be:	0412      	lsls	r2, r2, #16
 80062c0:	605a      	str	r2, [r3, #4]
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	00db      	lsls	r3, r3, #3
 80062c8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80062cc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80062d0:	6859      	ldr	r1, [r3, #4]
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	895b      	ldrh	r3, [r3, #10]
 80062d6:	089b      	lsrs	r3, r3, #2
 80062d8:	b29b      	uxth	r3, r3
 80062da:	009a      	lsls	r2, r3, #2
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	00db      	lsls	r3, r3, #3
 80062e2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80062e6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80062ea:	430a      	orrs	r2, r1
 80062ec:	605a      	str	r2, [r3, #4]

    if (ep->is_in == 0U)
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	785b      	ldrb	r3, [r3, #1]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d178      	bne.n	80063e8 <USB_ActivateEndpoint+0x598>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80062f6:	687a      	ldr	r2, [r7, #4]
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	009b      	lsls	r3, r3, #2
 80062fe:	4413      	add	r3, r2
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	643b      	str	r3, [r7, #64]	@ 0x40
 8006304:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006306:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800630a:	2b00      	cmp	r3, #0
 800630c:	d013      	beq.n	8006336 <USB_ActivateEndpoint+0x4e6>
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	009b      	lsls	r3, r3, #2
 8006316:	4413      	add	r3, r2
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	4b2f      	ldr	r3, [pc, #188]	@ (80063d8 <USB_ActivateEndpoint+0x588>)
 800631c:	4013      	ands	r3, r2
 800631e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	441a      	add	r2, r3
 800632a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800632c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006330:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006334:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	009b      	lsls	r3, r3, #2
 800633e:	4413      	add	r3, r2
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006346:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800634a:	2b00      	cmp	r3, #0
 800634c:	d013      	beq.n	8006376 <USB_ActivateEndpoint+0x526>
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	009b      	lsls	r3, r3, #2
 8006356:	4413      	add	r3, r2
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	4b1f      	ldr	r3, [pc, #124]	@ (80063d8 <USB_ActivateEndpoint+0x588>)
 800635c:	4013      	ands	r3, r2
 800635e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006360:	687a      	ldr	r2, [r7, #4]
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	781b      	ldrb	r3, [r3, #0]
 8006366:	009b      	lsls	r3, r3, #2
 8006368:	441a      	add	r2, r3
 800636a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800636c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006370:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006374:	6013      	str	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006376:	687a      	ldr	r2, [r7, #4]
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	781b      	ldrb	r3, [r3, #0]
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	4413      	add	r3, r2
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	4b16      	ldr	r3, [pc, #88]	@ (80063dc <USB_ActivateEndpoint+0x58c>)
 8006384:	4013      	ands	r3, r2
 8006386:	633b      	str	r3, [r7, #48]	@ 0x30
 8006388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800638a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800638e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006392:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006396:	633b      	str	r3, [r7, #48]	@ 0x30
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	441a      	add	r2, r3
 80063a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063ac:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	009b      	lsls	r3, r3, #2
 80063b6:	4413      	add	r3, r2
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	4b0a      	ldr	r3, [pc, #40]	@ (80063e4 <USB_ActivateEndpoint+0x594>)
 80063bc:	4013      	ands	r3, r2
 80063be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	781b      	ldrb	r3, [r3, #0]
 80063c6:	009b      	lsls	r3, r3, #2
 80063c8:	441a      	add	r2, r3
 80063ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063d4:	6013      	str	r3, [r2, #0]
 80063d6:	e08c      	b.n	80064f2 <USB_ActivateEndpoint+0x6a2>
 80063d8:	07ff8f8f 	.word	0x07ff8f8f
 80063dc:	07ffbf8f 	.word	0x07ffbf8f
 80063e0:	07ff8e8f 	.word	0x07ff8e8f
 80063e4:	07ff8fbf 	.word	0x07ff8fbf
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80063e8:	687a      	ldr	r2, [r7, #4]
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	009b      	lsls	r3, r3, #2
 80063f0:	4413      	add	r3, r2
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80063f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80063f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d013      	beq.n	8006428 <USB_ActivateEndpoint+0x5d8>
 8006400:	687a      	ldr	r2, [r7, #4]
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	781b      	ldrb	r3, [r3, #0]
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	4413      	add	r3, r2
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	4b3d      	ldr	r3, [pc, #244]	@ (8006504 <USB_ActivateEndpoint+0x6b4>)
 800640e:	4013      	ands	r3, r2
 8006410:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	009b      	lsls	r3, r3, #2
 800641a:	441a      	add	r2, r3
 800641c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800641e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006422:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006426:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	781b      	ldrb	r3, [r3, #0]
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	4413      	add	r3, r2
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	657b      	str	r3, [r7, #84]	@ 0x54
 8006436:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006438:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800643c:	2b00      	cmp	r3, #0
 800643e:	d013      	beq.n	8006468 <USB_ActivateEndpoint+0x618>
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	4413      	add	r3, r2
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	4b2d      	ldr	r3, [pc, #180]	@ (8006504 <USB_ActivateEndpoint+0x6b4>)
 800644e:	4013      	ands	r3, r2
 8006450:	653b      	str	r3, [r7, #80]	@ 0x50
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	441a      	add	r2, r3
 800645c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800645e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006462:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006466:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	78db      	ldrb	r3, [r3, #3]
 800646c:	2b01      	cmp	r3, #1
 800646e:	d018      	beq.n	80064a2 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	781b      	ldrb	r3, [r3, #0]
 8006476:	009b      	lsls	r3, r3, #2
 8006478:	4413      	add	r3, r2
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	4b22      	ldr	r3, [pc, #136]	@ (8006508 <USB_ActivateEndpoint+0x6b8>)
 800647e:	4013      	ands	r3, r2
 8006480:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006482:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006484:	f083 0320 	eor.w	r3, r3, #32
 8006488:	64bb      	str	r3, [r7, #72]	@ 0x48
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	009b      	lsls	r3, r3, #2
 8006492:	441a      	add	r2, r3
 8006494:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006496:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800649a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800649e:	6013      	str	r3, [r2, #0]
 80064a0:	e013      	b.n	80064ca <USB_ActivateEndpoint+0x67a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	4413      	add	r3, r2
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	4b16      	ldr	r3, [pc, #88]	@ (8006508 <USB_ActivateEndpoint+0x6b8>)
 80064b0:	4013      	ands	r3, r2
 80064b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80064b4:	687a      	ldr	r2, [r7, #4]
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	009b      	lsls	r3, r3, #2
 80064bc:	441a      	add	r2, r3
 80064be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80064c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064c8:	6013      	str	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80064ca:	687a      	ldr	r2, [r7, #4]
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	781b      	ldrb	r3, [r3, #0]
 80064d0:	009b      	lsls	r3, r3, #2
 80064d2:	4413      	add	r3, r2
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	4b0d      	ldr	r3, [pc, #52]	@ (800650c <USB_ActivateEndpoint+0x6bc>)
 80064d8:	4013      	ands	r3, r2
 80064da:	647b      	str	r3, [r7, #68]	@ 0x44
 80064dc:	687a      	ldr	r2, [r7, #4]
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	009b      	lsls	r3, r3, #2
 80064e4:	441a      	add	r2, r3
 80064e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064f0:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80064f2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	377c      	adds	r7, #124	@ 0x7c
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr
 8006502:	bf00      	nop
 8006504:	07ff8f8f 	.word	0x07ff8f8f
 8006508:	07ff8fbf 	.word	0x07ff8fbf
 800650c:	07ffbf8f 	.word	0x07ffbf8f

08006510 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8006510:	b480      	push	{r7}
 8006512:	b097      	sub	sp, #92	@ 0x5c
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	7b1b      	ldrb	r3, [r3, #12]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d16d      	bne.n	80065fe <USB_DeactivateEndpoint+0xee>
  {
    if (ep->is_in != 0U)
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	785b      	ldrb	r3, [r3, #1]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d034      	beq.n	8006594 <USB_DeactivateEndpoint+0x84>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	781b      	ldrb	r3, [r3, #0]
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	4413      	add	r3, r2
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	613b      	str	r3, [r7, #16]
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800653e:	2b00      	cmp	r3, #0
 8006540:	d013      	beq.n	800656a <USB_DeactivateEndpoint+0x5a>
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	781b      	ldrb	r3, [r3, #0]
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	4413      	add	r3, r2
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	4b6d      	ldr	r3, [pc, #436]	@ (8006704 <USB_DeactivateEndpoint+0x1f4>)
 8006550:	4013      	ands	r3, r2
 8006552:	60fb      	str	r3, [r7, #12]
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	009b      	lsls	r3, r3, #2
 800655c:	441a      	add	r2, r3
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006564:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006568:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800656a:	687a      	ldr	r2, [r7, #4]
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	4413      	add	r3, r2
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	4b64      	ldr	r3, [pc, #400]	@ (8006708 <USB_DeactivateEndpoint+0x1f8>)
 8006578:	4013      	ands	r3, r2
 800657a:	60bb      	str	r3, [r7, #8]
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	441a      	add	r2, r3
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800658c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006590:	6013      	str	r3, [r2, #0]
 8006592:	e139      	b.n	8006808 <USB_DeactivateEndpoint+0x2f8>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	4413      	add	r3, r2
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	61fb      	str	r3, [r7, #28]
 80065a2:	69fb      	ldr	r3, [r7, #28]
 80065a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d013      	beq.n	80065d4 <USB_DeactivateEndpoint+0xc4>
 80065ac:	687a      	ldr	r2, [r7, #4]
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	781b      	ldrb	r3, [r3, #0]
 80065b2:	009b      	lsls	r3, r3, #2
 80065b4:	4413      	add	r3, r2
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	4b52      	ldr	r3, [pc, #328]	@ (8006704 <USB_DeactivateEndpoint+0x1f4>)
 80065ba:	4013      	ands	r3, r2
 80065bc:	61bb      	str	r3, [r7, #24]
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	009b      	lsls	r3, r3, #2
 80065c6:	441a      	add	r2, r3
 80065c8:	69bb      	ldr	r3, [r7, #24]
 80065ca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80065ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065d2:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	4413      	add	r3, r2
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	4b4a      	ldr	r3, [pc, #296]	@ (800670c <USB_DeactivateEndpoint+0x1fc>)
 80065e2:	4013      	ands	r3, r2
 80065e4:	617b      	str	r3, [r7, #20]
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	009b      	lsls	r3, r3, #2
 80065ee:	441a      	add	r2, r3
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065fa:	6013      	str	r3, [r2, #0]
 80065fc:	e104      	b.n	8006808 <USB_DeactivateEndpoint+0x2f8>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	785b      	ldrb	r3, [r3, #1]
 8006602:	2b00      	cmp	r3, #0
 8006604:	f040 8084 	bne.w	8006710 <USB_DeactivateEndpoint+0x200>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006608:	687a      	ldr	r2, [r7, #4]
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	781b      	ldrb	r3, [r3, #0]
 800660e:	009b      	lsls	r3, r3, #2
 8006610:	4413      	add	r3, r2
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006618:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800661c:	2b00      	cmp	r3, #0
 800661e:	d013      	beq.n	8006648 <USB_DeactivateEndpoint+0x138>
 8006620:	687a      	ldr	r2, [r7, #4]
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	4413      	add	r3, r2
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	4b35      	ldr	r3, [pc, #212]	@ (8006704 <USB_DeactivateEndpoint+0x1f4>)
 800662e:	4013      	ands	r3, r2
 8006630:	637b      	str	r3, [r7, #52]	@ 0x34
 8006632:	687a      	ldr	r2, [r7, #4]
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	781b      	ldrb	r3, [r3, #0]
 8006638:	009b      	lsls	r3, r3, #2
 800663a:	441a      	add	r2, r3
 800663c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800663e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006642:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006646:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	781b      	ldrb	r3, [r3, #0]
 800664e:	009b      	lsls	r3, r3, #2
 8006650:	4413      	add	r3, r2
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	633b      	str	r3, [r7, #48]	@ 0x30
 8006656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006658:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800665c:	2b00      	cmp	r3, #0
 800665e:	d013      	beq.n	8006688 <USB_DeactivateEndpoint+0x178>
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	009b      	lsls	r3, r3, #2
 8006668:	4413      	add	r3, r2
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	4b25      	ldr	r3, [pc, #148]	@ (8006704 <USB_DeactivateEndpoint+0x1f4>)
 800666e:	4013      	ands	r3, r2
 8006670:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	009b      	lsls	r3, r3, #2
 800667a:	441a      	add	r2, r3
 800667c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800667e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006682:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006686:	6013      	str	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	4413      	add	r3, r2
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	4b1b      	ldr	r3, [pc, #108]	@ (8006704 <USB_DeactivateEndpoint+0x1f4>)
 8006696:	4013      	ands	r3, r2
 8006698:	62bb      	str	r3, [r7, #40]	@ 0x28
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	009b      	lsls	r3, r3, #2
 80066a2:	441a      	add	r2, r3
 80066a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066aa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80066ae:	6013      	str	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	4413      	add	r3, r2
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	4b13      	ldr	r3, [pc, #76]	@ (800670c <USB_DeactivateEndpoint+0x1fc>)
 80066be:	4013      	ands	r3, r2
 80066c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	441a      	add	r2, r3
 80066cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066d6:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	781b      	ldrb	r3, [r3, #0]
 80066de:	009b      	lsls	r3, r3, #2
 80066e0:	4413      	add	r3, r2
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	4b08      	ldr	r3, [pc, #32]	@ (8006708 <USB_DeactivateEndpoint+0x1f8>)
 80066e6:	4013      	ands	r3, r2
 80066e8:	623b      	str	r3, [r7, #32]
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	009b      	lsls	r3, r3, #2
 80066f2:	441a      	add	r2, r3
 80066f4:	6a3b      	ldr	r3, [r7, #32]
 80066f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066fe:	6013      	str	r3, [r2, #0]
 8006700:	e082      	b.n	8006808 <USB_DeactivateEndpoint+0x2f8>
 8006702:	bf00      	nop
 8006704:	07ff8f8f 	.word	0x07ff8f8f
 8006708:	07ff8fbf 	.word	0x07ff8fbf
 800670c:	07ffbf8f 	.word	0x07ffbf8f
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	4413      	add	r3, r2
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	657b      	str	r3, [r7, #84]	@ 0x54
 800671e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006720:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006724:	2b00      	cmp	r3, #0
 8006726:	d013      	beq.n	8006750 <USB_DeactivateEndpoint+0x240>
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	4413      	add	r3, r2
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	4b38      	ldr	r3, [pc, #224]	@ (8006818 <USB_DeactivateEndpoint+0x308>)
 8006736:	4013      	ands	r3, r2
 8006738:	653b      	str	r3, [r7, #80]	@ 0x50
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	781b      	ldrb	r3, [r3, #0]
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	441a      	add	r2, r3
 8006744:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006746:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800674a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800674e:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006750:	687a      	ldr	r2, [r7, #4]
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	781b      	ldrb	r3, [r3, #0]
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	4413      	add	r3, r2
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800675e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006760:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006764:	2b00      	cmp	r3, #0
 8006766:	d013      	beq.n	8006790 <USB_DeactivateEndpoint+0x280>
 8006768:	687a      	ldr	r2, [r7, #4]
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	4413      	add	r3, r2
 8006772:	681a      	ldr	r2, [r3, #0]
 8006774:	4b28      	ldr	r3, [pc, #160]	@ (8006818 <USB_DeactivateEndpoint+0x308>)
 8006776:	4013      	ands	r3, r2
 8006778:	64bb      	str	r3, [r7, #72]	@ 0x48
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	441a      	add	r2, r3
 8006784:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006786:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800678a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800678e:	6013      	str	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	4413      	add	r3, r2
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	4b1e      	ldr	r3, [pc, #120]	@ (8006818 <USB_DeactivateEndpoint+0x308>)
 800679e:	4013      	ands	r3, r2
 80067a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	441a      	add	r2, r3
 80067ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80067ae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80067b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067b6:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	009b      	lsls	r3, r3, #2
 80067c0:	4413      	add	r3, r2
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	4b15      	ldr	r3, [pc, #84]	@ (800681c <USB_DeactivateEndpoint+0x30c>)
 80067c6:	4013      	ands	r3, r2
 80067c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80067ca:	687a      	ldr	r2, [r7, #4]
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	781b      	ldrb	r3, [r3, #0]
 80067d0:	009b      	lsls	r3, r3, #2
 80067d2:	441a      	add	r2, r3
 80067d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80067d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067de:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	4413      	add	r3, r2
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	4b0c      	ldr	r3, [pc, #48]	@ (8006820 <USB_DeactivateEndpoint+0x310>)
 80067ee:	4013      	ands	r3, r2
 80067f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067f2:	687a      	ldr	r2, [r7, #4]
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	009b      	lsls	r3, r3, #2
 80067fa:	441a      	add	r2, r3
 80067fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006802:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006806:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006808:	2300      	movs	r3, #0
}
 800680a:	4618      	mov	r0, r3
 800680c:	375c      	adds	r7, #92	@ 0x5c
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr
 8006816:	bf00      	nop
 8006818:	07ff8f8f 	.word	0x07ff8f8f
 800681c:	07ff8fbf 	.word	0x07ff8fbf
 8006820:	07ffbf8f 	.word	0x07ffbf8f

08006824 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b096      	sub	sp, #88	@ 0x58
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	785b      	ldrb	r3, [r3, #1]
 8006832:	2b01      	cmp	r3, #1
 8006834:	f040 84ed 	bne.w	8007212 <USB_EPStartXfer+0x9ee>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	699a      	ldr	r2, [r3, #24]
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	691b      	ldr	r3, [r3, #16]
 8006840:	429a      	cmp	r2, r3
 8006842:	d903      	bls.n	800684c <USB_EPStartXfer+0x28>
    {
      len = ep->maxpacket;
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	691b      	ldr	r3, [r3, #16]
 8006848:	657b      	str	r3, [r7, #84]	@ 0x54
 800684a:	e002      	b.n	8006852 <USB_EPStartXfer+0x2e>
    }
    else
    {
      len = ep->xfer_len;
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	699b      	ldr	r3, [r3, #24]
 8006850:	657b      	str	r3, [r7, #84]	@ 0x54
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	7b1b      	ldrb	r3, [r3, #12]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d12e      	bne.n	80068b8 <USB_EPStartXfer+0x94>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	6959      	ldr	r1, [r3, #20]
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	88da      	ldrh	r2, [r3, #6]
 8006862:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006864:	b29b      	uxth	r3, r3
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f001 f952 	bl	8007b10 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	00db      	lsls	r3, r3, #3
 8006872:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006876:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	781b      	ldrb	r3, [r3, #0]
 8006880:	00db      	lsls	r3, r3, #3
 8006882:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006886:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800688a:	b292      	uxth	r2, r2
 800688c:	601a      	str	r2, [r3, #0]
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	00db      	lsls	r3, r3, #3
 8006894:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006898:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800689c:	6819      	ldr	r1, [r3, #0]
 800689e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80068a0:	041a      	lsls	r2, r3, #16
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	00db      	lsls	r3, r3, #3
 80068a8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80068ac:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80068b0:	430a      	orrs	r2, r1
 80068b2:	601a      	str	r2, [r3, #0]
 80068b4:	f000 bc90 	b.w	80071d8 <USB_EPStartXfer+0x9b4>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	78db      	ldrb	r3, [r3, #3]
 80068bc:	2b02      	cmp	r3, #2
 80068be:	f040 8332 	bne.w	8006f26 <USB_EPStartXfer+0x702>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	6a1a      	ldr	r2, [r3, #32]
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	691b      	ldr	r3, [r3, #16]
 80068ca:	429a      	cmp	r2, r3
 80068cc:	f240 82e4 	bls.w	8006e98 <USB_EPStartXfer+0x674>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	4413      	add	r3, r2
 80068da:	681a      	ldr	r2, [r3, #0]
 80068dc:	4ba4      	ldr	r3, [pc, #656]	@ (8006b70 <USB_EPStartXfer+0x34c>)
 80068de:	4013      	ands	r3, r2
 80068e0:	613b      	str	r3, [r7, #16]
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	009b      	lsls	r3, r3, #2
 80068ea:	441a      	add	r2, r3
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80068f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068f6:	6013      	str	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	6a1a      	ldr	r2, [r3, #32]
 80068fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80068fe:	1ad2      	subs	r2, r2, r3
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	4413      	add	r3, r2
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006914:	2b00      	cmp	r3, #0
 8006916:	f000 8161 	beq.w	8006bdc <USB_EPStartXfer+0x3b8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	785b      	ldrb	r3, [r3, #1]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d16a      	bne.n	80069f8 <USB_EPStartXfer+0x1d4>
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	781b      	ldrb	r3, [r3, #0]
 8006926:	00db      	lsls	r3, r3, #3
 8006928:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800692c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006930:	685a      	ldr	r2, [r3, #4]
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	781b      	ldrb	r3, [r3, #0]
 8006936:	00db      	lsls	r3, r3, #3
 8006938:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800693c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006940:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8006944:	605a      	str	r2, [r3, #4]
 8006946:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006948:	2b00      	cmp	r3, #0
 800694a:	d112      	bne.n	8006972 <USB_EPStartXfer+0x14e>
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	00db      	lsls	r3, r3, #3
 8006952:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006956:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800695a:	685a      	ldr	r2, [r3, #4]
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	781b      	ldrb	r3, [r3, #0]
 8006960:	00db      	lsls	r3, r3, #3
 8006962:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006966:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800696a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800696e:	605a      	str	r2, [r3, #4]
 8006970:	e06a      	b.n	8006a48 <USB_EPStartXfer+0x224>
 8006972:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006974:	2b3e      	cmp	r3, #62	@ 0x3e
 8006976:	d81e      	bhi.n	80069b6 <USB_EPStartXfer+0x192>
 8006978:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800697a:	085b      	lsrs	r3, r3, #1
 800697c:	653b      	str	r3, [r7, #80]	@ 0x50
 800697e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006980:	f003 0301 	and.w	r3, r3, #1
 8006984:	2b00      	cmp	r3, #0
 8006986:	d002      	beq.n	800698e <USB_EPStartXfer+0x16a>
 8006988:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800698a:	3301      	adds	r3, #1
 800698c:	653b      	str	r3, [r7, #80]	@ 0x50
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	00db      	lsls	r3, r3, #3
 8006994:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006998:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800699c:	6859      	ldr	r1, [r3, #4]
 800699e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80069a0:	069a      	lsls	r2, r3, #26
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	00db      	lsls	r3, r3, #3
 80069a8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80069ac:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80069b0:	430a      	orrs	r2, r1
 80069b2:	605a      	str	r2, [r3, #4]
 80069b4:	e048      	b.n	8006a48 <USB_EPStartXfer+0x224>
 80069b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80069b8:	095b      	lsrs	r3, r3, #5
 80069ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80069bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80069be:	f003 031f 	and.w	r3, r3, #31
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d102      	bne.n	80069cc <USB_EPStartXfer+0x1a8>
 80069c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80069c8:	3b01      	subs	r3, #1
 80069ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	00db      	lsls	r3, r3, #3
 80069d2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80069d6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80069da:	685a      	ldr	r2, [r3, #4]
 80069dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80069de:	069b      	lsls	r3, r3, #26
 80069e0:	431a      	orrs	r2, r3
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	00db      	lsls	r3, r3, #3
 80069e8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80069ec:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80069f0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80069f4:	605a      	str	r2, [r3, #4]
 80069f6:	e027      	b.n	8006a48 <USB_EPStartXfer+0x224>
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	785b      	ldrb	r3, [r3, #1]
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d123      	bne.n	8006a48 <USB_EPStartXfer+0x224>
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	00db      	lsls	r3, r3, #3
 8006a06:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006a0a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006a0e:	685a      	ldr	r2, [r3, #4]
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	00db      	lsls	r3, r3, #3
 8006a16:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006a1a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006a1e:	b292      	uxth	r2, r2
 8006a20:	605a      	str	r2, [r3, #4]
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	781b      	ldrb	r3, [r3, #0]
 8006a26:	00db      	lsls	r3, r3, #3
 8006a28:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006a2c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006a30:	6859      	ldr	r1, [r3, #4]
 8006a32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a34:	041a      	lsls	r2, r3, #16
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	781b      	ldrb	r3, [r3, #0]
 8006a3a:	00db      	lsls	r3, r3, #3
 8006a3c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006a40:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006a44:	430a      	orrs	r2, r1
 8006a46:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	895b      	ldrh	r3, [r3, #10]
 8006a4c:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	6959      	ldr	r1, [r3, #20]
 8006a52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	8b7a      	ldrh	r2, [r7, #26]
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f001 f859 	bl	8007b10 <USB_WritePMA>
            ep->xfer_buff += len;
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	695a      	ldr	r2, [r3, #20]
 8006a62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a64:	441a      	add	r2, r3
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	6a1a      	ldr	r2, [r3, #32]
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	691b      	ldr	r3, [r3, #16]
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d906      	bls.n	8006a84 <USB_EPStartXfer+0x260>
            {
              ep->xfer_len_db -= len;
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	6a1a      	ldr	r2, [r3, #32]
 8006a7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a7c:	1ad2      	subs	r2, r2, r3
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	621a      	str	r2, [r3, #32]
 8006a82:	e005      	b.n	8006a90 <USB_EPStartXfer+0x26c>
            }
            else
            {
              len = ep->xfer_len_db;
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	6a1b      	ldr	r3, [r3, #32]
 8006a88:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	785b      	ldrb	r3, [r3, #1]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d16d      	bne.n	8006b74 <USB_EPStartXfer+0x350>
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	00db      	lsls	r3, r3, #3
 8006a9e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006aa2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	00db      	lsls	r3, r3, #3
 8006aae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006ab2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006ab6:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8006aba:	601a      	str	r2, [r3, #0]
 8006abc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d112      	bne.n	8006ae8 <USB_EPStartXfer+0x2c4>
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	00db      	lsls	r3, r3, #3
 8006ac8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006acc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	781b      	ldrb	r3, [r3, #0]
 8006ad6:	00db      	lsls	r3, r3, #3
 8006ad8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006adc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006ae0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006ae4:	601a      	str	r2, [r3, #0]
 8006ae6:	e06d      	b.n	8006bc4 <USB_EPStartXfer+0x3a0>
 8006ae8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006aea:	2b3e      	cmp	r3, #62	@ 0x3e
 8006aec:	d81e      	bhi.n	8006b2c <USB_EPStartXfer+0x308>
 8006aee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006af0:	085b      	lsrs	r3, r3, #1
 8006af2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006af4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006af6:	f003 0301 	and.w	r3, r3, #1
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d002      	beq.n	8006b04 <USB_EPStartXfer+0x2e0>
 8006afe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b00:	3301      	adds	r3, #1
 8006b02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	781b      	ldrb	r3, [r3, #0]
 8006b08:	00db      	lsls	r3, r3, #3
 8006b0a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006b0e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006b12:	6819      	ldr	r1, [r3, #0]
 8006b14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b16:	069a      	lsls	r2, r3, #26
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	00db      	lsls	r3, r3, #3
 8006b1e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006b22:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006b26:	430a      	orrs	r2, r1
 8006b28:	601a      	str	r2, [r3, #0]
 8006b2a:	e04b      	b.n	8006bc4 <USB_EPStartXfer+0x3a0>
 8006b2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b2e:	095b      	lsrs	r3, r3, #5
 8006b30:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b34:	f003 031f 	and.w	r3, r3, #31
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d102      	bne.n	8006b42 <USB_EPStartXfer+0x31e>
 8006b3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b3e:	3b01      	subs	r3, #1
 8006b40:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	00db      	lsls	r3, r3, #3
 8006b48:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006b4c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b54:	069b      	lsls	r3, r3, #26
 8006b56:	431a      	orrs	r2, r3
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	00db      	lsls	r3, r3, #3
 8006b5e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006b62:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006b66:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006b6a:	601a      	str	r2, [r3, #0]
 8006b6c:	e02a      	b.n	8006bc4 <USB_EPStartXfer+0x3a0>
 8006b6e:	bf00      	nop
 8006b70:	07ff8f8f 	.word	0x07ff8f8f
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	785b      	ldrb	r3, [r3, #1]
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d123      	bne.n	8006bc4 <USB_EPStartXfer+0x3a0>
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	00db      	lsls	r3, r3, #3
 8006b82:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006b86:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	00db      	lsls	r3, r3, #3
 8006b92:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006b96:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006b9a:	b292      	uxth	r2, r2
 8006b9c:	601a      	str	r2, [r3, #0]
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	00db      	lsls	r3, r3, #3
 8006ba4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006ba8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006bac:	6819      	ldr	r1, [r3, #0]
 8006bae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006bb0:	041a      	lsls	r2, r3, #16
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	781b      	ldrb	r3, [r3, #0]
 8006bb6:	00db      	lsls	r3, r3, #3
 8006bb8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006bbc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006bc0:	430a      	orrs	r2, r1
 8006bc2:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	891b      	ldrh	r3, [r3, #8]
 8006bc8:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	6959      	ldr	r1, [r3, #20]
 8006bce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	8b7a      	ldrh	r2, [r7, #26]
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f000 ff9b 	bl	8007b10 <USB_WritePMA>
 8006bda:	e2fd      	b.n	80071d8 <USB_EPStartXfer+0x9b4>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	785b      	ldrb	r3, [r3, #1]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d16a      	bne.n	8006cba <USB_EPStartXfer+0x496>
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	00db      	lsls	r3, r3, #3
 8006bea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006bee:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	00db      	lsls	r3, r3, #3
 8006bfa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006bfe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006c02:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8006c06:	601a      	str	r2, [r3, #0]
 8006c08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d112      	bne.n	8006c34 <USB_EPStartXfer+0x410>
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	00db      	lsls	r3, r3, #3
 8006c14:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006c18:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	00db      	lsls	r3, r3, #3
 8006c24:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006c28:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006c2c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006c30:	601a      	str	r2, [r3, #0]
 8006c32:	e06a      	b.n	8006d0a <USB_EPStartXfer+0x4e6>
 8006c34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c36:	2b3e      	cmp	r3, #62	@ 0x3e
 8006c38:	d81e      	bhi.n	8006c78 <USB_EPStartXfer+0x454>
 8006c3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c3c:	085b      	lsrs	r3, r3, #1
 8006c3e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c42:	f003 0301 	and.w	r3, r3, #1
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d002      	beq.n	8006c50 <USB_EPStartXfer+0x42c>
 8006c4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c4c:	3301      	adds	r3, #1
 8006c4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	00db      	lsls	r3, r3, #3
 8006c56:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006c5a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006c5e:	6819      	ldr	r1, [r3, #0]
 8006c60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c62:	069a      	lsls	r2, r3, #26
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	00db      	lsls	r3, r3, #3
 8006c6a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006c6e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006c72:	430a      	orrs	r2, r1
 8006c74:	601a      	str	r2, [r3, #0]
 8006c76:	e048      	b.n	8006d0a <USB_EPStartXfer+0x4e6>
 8006c78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c7a:	095b      	lsrs	r3, r3, #5
 8006c7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c80:	f003 031f 	and.w	r3, r3, #31
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d102      	bne.n	8006c8e <USB_EPStartXfer+0x46a>
 8006c88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c8a:	3b01      	subs	r3, #1
 8006c8c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	00db      	lsls	r3, r3, #3
 8006c94:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006c98:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006c9c:	681a      	ldr	r2, [r3, #0]
 8006c9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ca0:	069b      	lsls	r3, r3, #26
 8006ca2:	431a      	orrs	r2, r3
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	00db      	lsls	r3, r3, #3
 8006caa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006cae:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006cb2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006cb6:	601a      	str	r2, [r3, #0]
 8006cb8:	e027      	b.n	8006d0a <USB_EPStartXfer+0x4e6>
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	785b      	ldrb	r3, [r3, #1]
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d123      	bne.n	8006d0a <USB_EPStartXfer+0x4e6>
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	781b      	ldrb	r3, [r3, #0]
 8006cc6:	00db      	lsls	r3, r3, #3
 8006cc8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006ccc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	00db      	lsls	r3, r3, #3
 8006cd8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006cdc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006ce0:	b292      	uxth	r2, r2
 8006ce2:	601a      	str	r2, [r3, #0]
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	781b      	ldrb	r3, [r3, #0]
 8006ce8:	00db      	lsls	r3, r3, #3
 8006cea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006cee:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006cf2:	6819      	ldr	r1, [r3, #0]
 8006cf4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006cf6:	041a      	lsls	r2, r3, #16
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	00db      	lsls	r3, r3, #3
 8006cfe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006d02:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006d06:	430a      	orrs	r2, r1
 8006d08:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	891b      	ldrh	r3, [r3, #8]
 8006d0e:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	6959      	ldr	r1, [r3, #20]
 8006d14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	8b7a      	ldrh	r2, [r7, #26]
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 fef8 	bl	8007b10 <USB_WritePMA>
            ep->xfer_buff += len;
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	695a      	ldr	r2, [r3, #20]
 8006d24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d26:	441a      	add	r2, r3
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	6a1a      	ldr	r2, [r3, #32]
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	691b      	ldr	r3, [r3, #16]
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d906      	bls.n	8006d46 <USB_EPStartXfer+0x522>
            {
              ep->xfer_len_db -= len;
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	6a1a      	ldr	r2, [r3, #32]
 8006d3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d3e:	1ad2      	subs	r2, r2, r3
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	621a      	str	r2, [r3, #32]
 8006d44:	e005      	b.n	8006d52 <USB_EPStartXfer+0x52e>
            }
            else
            {
              len = ep->xfer_len_db;
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	6a1b      	ldr	r3, [r3, #32]
 8006d4a:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	785b      	ldrb	r3, [r3, #1]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d16a      	bne.n	8006e30 <USB_EPStartXfer+0x60c>
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	00db      	lsls	r3, r3, #3
 8006d60:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006d64:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006d68:	685a      	ldr	r2, [r3, #4]
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	00db      	lsls	r3, r3, #3
 8006d70:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006d74:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006d78:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8006d7c:	605a      	str	r2, [r3, #4]
 8006d7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d112      	bne.n	8006daa <USB_EPStartXfer+0x586>
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	00db      	lsls	r3, r3, #3
 8006d8a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006d8e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006d92:	685a      	ldr	r2, [r3, #4]
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	00db      	lsls	r3, r3, #3
 8006d9a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006d9e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006da2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006da6:	605a      	str	r2, [r3, #4]
 8006da8:	e06a      	b.n	8006e80 <USB_EPStartXfer+0x65c>
 8006daa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006dac:	2b3e      	cmp	r3, #62	@ 0x3e
 8006dae:	d81e      	bhi.n	8006dee <USB_EPStartXfer+0x5ca>
 8006db0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006db2:	085b      	lsrs	r3, r3, #1
 8006db4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006db6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006db8:	f003 0301 	and.w	r3, r3, #1
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d002      	beq.n	8006dc6 <USB_EPStartXfer+0x5a2>
 8006dc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006dc2:	3301      	adds	r3, #1
 8006dc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	781b      	ldrb	r3, [r3, #0]
 8006dca:	00db      	lsls	r3, r3, #3
 8006dcc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006dd0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006dd4:	6859      	ldr	r1, [r3, #4]
 8006dd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006dd8:	069a      	lsls	r2, r3, #26
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	781b      	ldrb	r3, [r3, #0]
 8006dde:	00db      	lsls	r3, r3, #3
 8006de0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006de4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006de8:	430a      	orrs	r2, r1
 8006dea:	605a      	str	r2, [r3, #4]
 8006dec:	e048      	b.n	8006e80 <USB_EPStartXfer+0x65c>
 8006dee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006df0:	095b      	lsrs	r3, r3, #5
 8006df2:	647b      	str	r3, [r7, #68]	@ 0x44
 8006df4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006df6:	f003 031f 	and.w	r3, r3, #31
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d102      	bne.n	8006e04 <USB_EPStartXfer+0x5e0>
 8006dfe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e00:	3b01      	subs	r3, #1
 8006e02:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	00db      	lsls	r3, r3, #3
 8006e0a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006e0e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006e12:	685a      	ldr	r2, [r3, #4]
 8006e14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e16:	069b      	lsls	r3, r3, #26
 8006e18:	431a      	orrs	r2, r3
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	00db      	lsls	r3, r3, #3
 8006e20:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006e24:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006e28:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006e2c:	605a      	str	r2, [r3, #4]
 8006e2e:	e027      	b.n	8006e80 <USB_EPStartXfer+0x65c>
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	785b      	ldrb	r3, [r3, #1]
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d123      	bne.n	8006e80 <USB_EPStartXfer+0x65c>
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	00db      	lsls	r3, r3, #3
 8006e3e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006e42:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006e46:	685a      	ldr	r2, [r3, #4]
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	781b      	ldrb	r3, [r3, #0]
 8006e4c:	00db      	lsls	r3, r3, #3
 8006e4e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006e52:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006e56:	b292      	uxth	r2, r2
 8006e58:	605a      	str	r2, [r3, #4]
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	00db      	lsls	r3, r3, #3
 8006e60:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006e64:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006e68:	6859      	ldr	r1, [r3, #4]
 8006e6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e6c:	041a      	lsls	r2, r3, #16
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	781b      	ldrb	r3, [r3, #0]
 8006e72:	00db      	lsls	r3, r3, #3
 8006e74:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006e78:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006e7c:	430a      	orrs	r2, r1
 8006e7e:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	895b      	ldrh	r3, [r3, #10]
 8006e84:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	6959      	ldr	r1, [r3, #20]
 8006e8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	8b7a      	ldrh	r2, [r7, #26]
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f000 fe3d 	bl	8007b10 <USB_WritePMA>
 8006e96:	e19f      	b.n	80071d8 <USB_EPStartXfer+0x9b4>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	6a1b      	ldr	r3, [r3, #32]
 8006e9c:	657b      	str	r3, [r7, #84]	@ 0x54

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	781b      	ldrb	r3, [r3, #0]
 8006ea4:	009b      	lsls	r3, r3, #2
 8006ea6:	4413      	add	r3, r2
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	4ba0      	ldr	r3, [pc, #640]	@ (800712c <USB_EPStartXfer+0x908>)
 8006eac:	4013      	ands	r3, r2
 8006eae:	617b      	str	r3, [r7, #20]
 8006eb0:	687a      	ldr	r2, [r7, #4]
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	781b      	ldrb	r3, [r3, #0]
 8006eb6:	009b      	lsls	r3, r3, #2
 8006eb8:	441a      	add	r2, r3
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ec0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ec4:	6013      	str	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	781b      	ldrb	r3, [r3, #0]
 8006eca:	00db      	lsls	r3, r3, #3
 8006ecc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006ed0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	781b      	ldrb	r3, [r3, #0]
 8006eda:	00db      	lsls	r3, r3, #3
 8006edc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006ee0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006ee4:	b292      	uxth	r2, r2
 8006ee6:	601a      	str	r2, [r3, #0]
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	00db      	lsls	r3, r3, #3
 8006eee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006ef2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006ef6:	6819      	ldr	r1, [r3, #0]
 8006ef8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006efa:	041a      	lsls	r2, r3, #16
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	00db      	lsls	r3, r3, #3
 8006f02:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006f06:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006f0a:	430a      	orrs	r2, r1
 8006f0c:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	891b      	ldrh	r3, [r3, #8]
 8006f12:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	6959      	ldr	r1, [r3, #20]
 8006f18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	8b7a      	ldrh	r2, [r7, #26]
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 fdf6 	bl	8007b10 <USB_WritePMA>
 8006f24:	e158      	b.n	80071d8 <USB_EPStartXfer+0x9b4>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	6a1a      	ldr	r2, [r3, #32]
 8006f2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f2c:	1ad2      	subs	r2, r2, r3
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	781b      	ldrb	r3, [r3, #0]
 8006f38:	009b      	lsls	r3, r3, #2
 8006f3a:	4413      	add	r3, r2
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	f000 80a3 	beq.w	800708e <USB_EPStartXfer+0x86a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	785b      	ldrb	r3, [r3, #1]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d16a      	bne.n	8007026 <USB_EPStartXfer+0x802>
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	781b      	ldrb	r3, [r3, #0]
 8006f54:	00db      	lsls	r3, r3, #3
 8006f56:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006f5a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006f5e:	685a      	ldr	r2, [r3, #4]
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	781b      	ldrb	r3, [r3, #0]
 8006f64:	00db      	lsls	r3, r3, #3
 8006f66:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006f6a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006f6e:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8006f72:	605a      	str	r2, [r3, #4]
 8006f74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d112      	bne.n	8006fa0 <USB_EPStartXfer+0x77c>
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	00db      	lsls	r3, r3, #3
 8006f80:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006f84:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006f88:	685a      	ldr	r2, [r3, #4]
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	00db      	lsls	r3, r3, #3
 8006f90:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006f94:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006f98:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006f9c:	605a      	str	r2, [r3, #4]
 8006f9e:	e06a      	b.n	8007076 <USB_EPStartXfer+0x852>
 8006fa0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006fa2:	2b3e      	cmp	r3, #62	@ 0x3e
 8006fa4:	d81e      	bhi.n	8006fe4 <USB_EPStartXfer+0x7c0>
 8006fa6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006fa8:	085b      	lsrs	r3, r3, #1
 8006faa:	643b      	str	r3, [r7, #64]	@ 0x40
 8006fac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006fae:	f003 0301 	and.w	r3, r3, #1
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d002      	beq.n	8006fbc <USB_EPStartXfer+0x798>
 8006fb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006fb8:	3301      	adds	r3, #1
 8006fba:	643b      	str	r3, [r7, #64]	@ 0x40
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	781b      	ldrb	r3, [r3, #0]
 8006fc0:	00db      	lsls	r3, r3, #3
 8006fc2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006fc6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006fca:	6859      	ldr	r1, [r3, #4]
 8006fcc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006fce:	069a      	lsls	r2, r3, #26
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	00db      	lsls	r3, r3, #3
 8006fd6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006fda:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006fde:	430a      	orrs	r2, r1
 8006fe0:	605a      	str	r2, [r3, #4]
 8006fe2:	e048      	b.n	8007076 <USB_EPStartXfer+0x852>
 8006fe4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006fe6:	095b      	lsrs	r3, r3, #5
 8006fe8:	643b      	str	r3, [r7, #64]	@ 0x40
 8006fea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006fec:	f003 031f 	and.w	r3, r3, #31
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d102      	bne.n	8006ffa <USB_EPStartXfer+0x7d6>
 8006ff4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ff6:	3b01      	subs	r3, #1
 8006ff8:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	00db      	lsls	r3, r3, #3
 8007000:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007004:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007008:	685a      	ldr	r2, [r3, #4]
 800700a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800700c:	069b      	lsls	r3, r3, #26
 800700e:	431a      	orrs	r2, r3
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	00db      	lsls	r3, r3, #3
 8007016:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800701a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800701e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8007022:	605a      	str	r2, [r3, #4]
 8007024:	e027      	b.n	8007076 <USB_EPStartXfer+0x852>
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	785b      	ldrb	r3, [r3, #1]
 800702a:	2b01      	cmp	r3, #1
 800702c:	d123      	bne.n	8007076 <USB_EPStartXfer+0x852>
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	00db      	lsls	r3, r3, #3
 8007034:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007038:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800703c:	685a      	ldr	r2, [r3, #4]
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	00db      	lsls	r3, r3, #3
 8007044:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007048:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800704c:	b292      	uxth	r2, r2
 800704e:	605a      	str	r2, [r3, #4]
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	00db      	lsls	r3, r3, #3
 8007056:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800705a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800705e:	6859      	ldr	r1, [r3, #4]
 8007060:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007062:	041a      	lsls	r2, r3, #16
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	781b      	ldrb	r3, [r3, #0]
 8007068:	00db      	lsls	r3, r3, #3
 800706a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800706e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007072:	430a      	orrs	r2, r1
 8007074:	605a      	str	r2, [r3, #4]
          pmabuffer = ep->pmaaddr1;
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	895b      	ldrh	r3, [r3, #10]
 800707a:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	6959      	ldr	r1, [r3, #20]
 8007080:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007082:	b29b      	uxth	r3, r3
 8007084:	8b7a      	ldrh	r2, [r7, #26]
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f000 fd42 	bl	8007b10 <USB_WritePMA>
 800708c:	e0a4      	b.n	80071d8 <USB_EPStartXfer+0x9b4>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	785b      	ldrb	r3, [r3, #1]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d16d      	bne.n	8007172 <USB_EPStartXfer+0x94e>
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	00db      	lsls	r3, r3, #3
 800709c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80070a0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80070a4:	681a      	ldr	r2, [r3, #0]
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	781b      	ldrb	r3, [r3, #0]
 80070aa:	00db      	lsls	r3, r3, #3
 80070ac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80070b0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80070b4:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80070b8:	601a      	str	r2, [r3, #0]
 80070ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d112      	bne.n	80070e6 <USB_EPStartXfer+0x8c2>
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	781b      	ldrb	r3, [r3, #0]
 80070c4:	00db      	lsls	r3, r3, #3
 80070c6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80070ca:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80070ce:	681a      	ldr	r2, [r3, #0]
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	781b      	ldrb	r3, [r3, #0]
 80070d4:	00db      	lsls	r3, r3, #3
 80070d6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80070da:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80070de:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80070e2:	601a      	str	r2, [r3, #0]
 80070e4:	e06d      	b.n	80071c2 <USB_EPStartXfer+0x99e>
 80070e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070e8:	2b3e      	cmp	r3, #62	@ 0x3e
 80070ea:	d821      	bhi.n	8007130 <USB_EPStartXfer+0x90c>
 80070ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070ee:	085b      	lsrs	r3, r3, #1
 80070f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80070f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070f4:	f003 0301 	and.w	r3, r3, #1
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d002      	beq.n	8007102 <USB_EPStartXfer+0x8de>
 80070fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070fe:	3301      	adds	r3, #1
 8007100:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	00db      	lsls	r3, r3, #3
 8007108:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800710c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007110:	6819      	ldr	r1, [r3, #0]
 8007112:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007114:	069a      	lsls	r2, r3, #26
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	781b      	ldrb	r3, [r3, #0]
 800711a:	00db      	lsls	r3, r3, #3
 800711c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007120:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007124:	430a      	orrs	r2, r1
 8007126:	601a      	str	r2, [r3, #0]
 8007128:	e04b      	b.n	80071c2 <USB_EPStartXfer+0x99e>
 800712a:	bf00      	nop
 800712c:	07ff8e8f 	.word	0x07ff8e8f
 8007130:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007132:	095b      	lsrs	r3, r3, #5
 8007134:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007136:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007138:	f003 031f 	and.w	r3, r3, #31
 800713c:	2b00      	cmp	r3, #0
 800713e:	d102      	bne.n	8007146 <USB_EPStartXfer+0x922>
 8007140:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007142:	3b01      	subs	r3, #1
 8007144:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	781b      	ldrb	r3, [r3, #0]
 800714a:	00db      	lsls	r3, r3, #3
 800714c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007150:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007154:	681a      	ldr	r2, [r3, #0]
 8007156:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007158:	069b      	lsls	r3, r3, #26
 800715a:	431a      	orrs	r2, r3
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	781b      	ldrb	r3, [r3, #0]
 8007160:	00db      	lsls	r3, r3, #3
 8007162:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007166:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800716a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800716e:	601a      	str	r2, [r3, #0]
 8007170:	e027      	b.n	80071c2 <USB_EPStartXfer+0x99e>
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	785b      	ldrb	r3, [r3, #1]
 8007176:	2b01      	cmp	r3, #1
 8007178:	d123      	bne.n	80071c2 <USB_EPStartXfer+0x99e>
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	00db      	lsls	r3, r3, #3
 8007180:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007184:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	00db      	lsls	r3, r3, #3
 8007190:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007194:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007198:	b292      	uxth	r2, r2
 800719a:	601a      	str	r2, [r3, #0]
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	781b      	ldrb	r3, [r3, #0]
 80071a0:	00db      	lsls	r3, r3, #3
 80071a2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80071a6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80071aa:	6819      	ldr	r1, [r3, #0]
 80071ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80071ae:	041a      	lsls	r2, r3, #16
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	781b      	ldrb	r3, [r3, #0]
 80071b4:	00db      	lsls	r3, r3, #3
 80071b6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80071ba:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80071be:	430a      	orrs	r2, r1
 80071c0:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	891b      	ldrh	r3, [r3, #8]
 80071c6:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	6959      	ldr	r1, [r3, #20]
 80071cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	8b7a      	ldrh	r2, [r7, #26]
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 fc9c 	bl	8007b10 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	781b      	ldrb	r3, [r3, #0]
 80071de:	009b      	lsls	r3, r3, #2
 80071e0:	4413      	add	r3, r2
 80071e2:	681a      	ldr	r2, [r3, #0]
 80071e4:	4b8b      	ldr	r3, [pc, #556]	@ (8007414 <USB_EPStartXfer+0xbf0>)
 80071e6:	4013      	ands	r3, r2
 80071e8:	60fb      	str	r3, [r7, #12]
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f083 0310 	eor.w	r3, r3, #16
 80071f0:	60fb      	str	r3, [r7, #12]
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	f083 0320 	eor.w	r3, r3, #32
 80071f8:	60fb      	str	r3, [r7, #12]
 80071fa:	687a      	ldr	r2, [r7, #4]
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	781b      	ldrb	r3, [r3, #0]
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	441a      	add	r2, r3
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800720a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800720e:	6013      	str	r3, [r2, #0]
 8007210:	e36b      	b.n	80078ea <USB_EPStartXfer+0x10c6>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	7b1b      	ldrb	r3, [r3, #12]
 8007216:	2b00      	cmp	r3, #0
 8007218:	f040 8081 	bne.w	800731e <USB_EPStartXfer+0xafa>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	699a      	ldr	r2, [r3, #24]
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	691b      	ldr	r3, [r3, #16]
 8007224:	429a      	cmp	r2, r3
 8007226:	d909      	bls.n	800723c <USB_EPStartXfer+0xa18>
      {
        len = ep->maxpacket;
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	691b      	ldr	r3, [r3, #16]
 800722c:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len -= len;
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	699a      	ldr	r2, [r3, #24]
 8007232:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007234:	1ad2      	subs	r2, r2, r3
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	619a      	str	r2, [r3, #24]
 800723a:	e005      	b.n	8007248 <USB_EPStartXfer+0xa24>
      }
      else
      {
        len = ep->xfer_len;
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	699b      	ldr	r3, [r3, #24]
 8007240:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len = 0U;
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	2200      	movs	r2, #0
 8007246:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	781b      	ldrb	r3, [r3, #0]
 800724c:	00db      	lsls	r3, r3, #3
 800724e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007252:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007256:	685a      	ldr	r2, [r3, #4]
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	781b      	ldrb	r3, [r3, #0]
 800725c:	00db      	lsls	r3, r3, #3
 800725e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007262:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007266:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800726a:	605a      	str	r2, [r3, #4]
 800726c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800726e:	2b00      	cmp	r3, #0
 8007270:	d112      	bne.n	8007298 <USB_EPStartXfer+0xa74>
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	781b      	ldrb	r3, [r3, #0]
 8007276:	00db      	lsls	r3, r3, #3
 8007278:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800727c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007280:	685a      	ldr	r2, [r3, #4]
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	781b      	ldrb	r3, [r3, #0]
 8007286:	00db      	lsls	r3, r3, #3
 8007288:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800728c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007290:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8007294:	605a      	str	r2, [r3, #4]
 8007296:	e30c      	b.n	80078b2 <USB_EPStartXfer+0x108e>
 8007298:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800729a:	2b3e      	cmp	r3, #62	@ 0x3e
 800729c:	d81e      	bhi.n	80072dc <USB_EPStartXfer+0xab8>
 800729e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072a0:	085b      	lsrs	r3, r3, #1
 80072a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80072a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072a6:	f003 0301 	and.w	r3, r3, #1
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d002      	beq.n	80072b4 <USB_EPStartXfer+0xa90>
 80072ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072b0:	3301      	adds	r3, #1
 80072b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	00db      	lsls	r3, r3, #3
 80072ba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80072be:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80072c2:	6859      	ldr	r1, [r3, #4]
 80072c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072c6:	069a      	lsls	r2, r3, #26
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	781b      	ldrb	r3, [r3, #0]
 80072cc:	00db      	lsls	r3, r3, #3
 80072ce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80072d2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80072d6:	430a      	orrs	r2, r1
 80072d8:	605a      	str	r2, [r3, #4]
 80072da:	e2ea      	b.n	80078b2 <USB_EPStartXfer+0x108e>
 80072dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072de:	095b      	lsrs	r3, r3, #5
 80072e0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80072e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072e4:	f003 031f 	and.w	r3, r3, #31
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d102      	bne.n	80072f2 <USB_EPStartXfer+0xace>
 80072ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072ee:	3b01      	subs	r3, #1
 80072f0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	00db      	lsls	r3, r3, #3
 80072f8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80072fc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007300:	685a      	ldr	r2, [r3, #4]
 8007302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007304:	069b      	lsls	r3, r3, #26
 8007306:	431a      	orrs	r2, r3
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	781b      	ldrb	r3, [r3, #0]
 800730c:	00db      	lsls	r3, r3, #3
 800730e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007312:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007316:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800731a:	605a      	str	r2, [r3, #4]
 800731c:	e2c9      	b.n	80078b2 <USB_EPStartXfer+0x108e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	78db      	ldrb	r3, [r3, #3]
 8007322:	2b02      	cmp	r3, #2
 8007324:	f040 8176 	bne.w	8007614 <USB_EPStartXfer+0xdf0>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	785b      	ldrb	r3, [r3, #1]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d173      	bne.n	8007418 <USB_EPStartXfer+0xbf4>
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	781b      	ldrb	r3, [r3, #0]
 8007334:	00db      	lsls	r3, r3, #3
 8007336:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800733a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800733e:	681a      	ldr	r2, [r3, #0]
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	781b      	ldrb	r3, [r3, #0]
 8007344:	00db      	lsls	r3, r3, #3
 8007346:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800734a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800734e:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8007352:	601a      	str	r2, [r3, #0]
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	691b      	ldr	r3, [r3, #16]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d112      	bne.n	8007382 <USB_EPStartXfer+0xb5e>
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	781b      	ldrb	r3, [r3, #0]
 8007360:	00db      	lsls	r3, r3, #3
 8007362:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007366:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800736a:	681a      	ldr	r2, [r3, #0]
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	781b      	ldrb	r3, [r3, #0]
 8007370:	00db      	lsls	r3, r3, #3
 8007372:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007376:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800737a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800737e:	601a      	str	r2, [r3, #0]
 8007380:	e073      	b.n	800746a <USB_EPStartXfer+0xc46>
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	691b      	ldr	r3, [r3, #16]
 8007386:	2b3e      	cmp	r3, #62	@ 0x3e
 8007388:	d820      	bhi.n	80073cc <USB_EPStartXfer+0xba8>
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	691b      	ldr	r3, [r3, #16]
 800738e:	085b      	lsrs	r3, r3, #1
 8007390:	637b      	str	r3, [r7, #52]	@ 0x34
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	691b      	ldr	r3, [r3, #16]
 8007396:	f003 0301 	and.w	r3, r3, #1
 800739a:	2b00      	cmp	r3, #0
 800739c:	d002      	beq.n	80073a4 <USB_EPStartXfer+0xb80>
 800739e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073a0:	3301      	adds	r3, #1
 80073a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	781b      	ldrb	r3, [r3, #0]
 80073a8:	00db      	lsls	r3, r3, #3
 80073aa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80073ae:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80073b2:	6819      	ldr	r1, [r3, #0]
 80073b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073b6:	069a      	lsls	r2, r3, #26
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	00db      	lsls	r3, r3, #3
 80073be:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80073c2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80073c6:	430a      	orrs	r2, r1
 80073c8:	601a      	str	r2, [r3, #0]
 80073ca:	e04e      	b.n	800746a <USB_EPStartXfer+0xc46>
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	691b      	ldr	r3, [r3, #16]
 80073d0:	095b      	lsrs	r3, r3, #5
 80073d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	691b      	ldr	r3, [r3, #16]
 80073d8:	f003 031f 	and.w	r3, r3, #31
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d102      	bne.n	80073e6 <USB_EPStartXfer+0xbc2>
 80073e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073e2:	3b01      	subs	r3, #1
 80073e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	781b      	ldrb	r3, [r3, #0]
 80073ea:	00db      	lsls	r3, r3, #3
 80073ec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80073f0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073f8:	069b      	lsls	r3, r3, #26
 80073fa:	431a      	orrs	r2, r3
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	781b      	ldrb	r3, [r3, #0]
 8007400:	00db      	lsls	r3, r3, #3
 8007402:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007406:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800740a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800740e:	601a      	str	r2, [r3, #0]
 8007410:	e02b      	b.n	800746a <USB_EPStartXfer+0xc46>
 8007412:	bf00      	nop
 8007414:	07ff8fbf 	.word	0x07ff8fbf
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	785b      	ldrb	r3, [r3, #1]
 800741c:	2b01      	cmp	r3, #1
 800741e:	d124      	bne.n	800746a <USB_EPStartXfer+0xc46>
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	781b      	ldrb	r3, [r3, #0]
 8007424:	00db      	lsls	r3, r3, #3
 8007426:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800742a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800742e:	681a      	ldr	r2, [r3, #0]
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	781b      	ldrb	r3, [r3, #0]
 8007434:	00db      	lsls	r3, r3, #3
 8007436:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800743a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800743e:	b292      	uxth	r2, r2
 8007440:	601a      	str	r2, [r3, #0]
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	781b      	ldrb	r3, [r3, #0]
 8007446:	00db      	lsls	r3, r3, #3
 8007448:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800744c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007450:	6819      	ldr	r1, [r3, #0]
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	691b      	ldr	r3, [r3, #16]
 8007456:	041a      	lsls	r2, r3, #16
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	00db      	lsls	r3, r3, #3
 800745e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007462:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007466:	430a      	orrs	r2, r1
 8007468:	601a      	str	r2, [r3, #0]
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	785b      	ldrb	r3, [r3, #1]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d170      	bne.n	8007554 <USB_EPStartXfer+0xd30>
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	781b      	ldrb	r3, [r3, #0]
 8007476:	00db      	lsls	r3, r3, #3
 8007478:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800747c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007480:	685a      	ldr	r2, [r3, #4]
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	00db      	lsls	r3, r3, #3
 8007488:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800748c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007490:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8007494:	605a      	str	r2, [r3, #4]
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	691b      	ldr	r3, [r3, #16]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d112      	bne.n	80074c4 <USB_EPStartXfer+0xca0>
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	781b      	ldrb	r3, [r3, #0]
 80074a2:	00db      	lsls	r3, r3, #3
 80074a4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80074a8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80074ac:	685a      	ldr	r2, [r3, #4]
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	781b      	ldrb	r3, [r3, #0]
 80074b2:	00db      	lsls	r3, r3, #3
 80074b4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80074b8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80074bc:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80074c0:	605a      	str	r2, [r3, #4]
 80074c2:	e070      	b.n	80075a6 <USB_EPStartXfer+0xd82>
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	691b      	ldr	r3, [r3, #16]
 80074c8:	2b3e      	cmp	r3, #62	@ 0x3e
 80074ca:	d820      	bhi.n	800750e <USB_EPStartXfer+0xcea>
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	691b      	ldr	r3, [r3, #16]
 80074d0:	085b      	lsrs	r3, r3, #1
 80074d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	691b      	ldr	r3, [r3, #16]
 80074d8:	f003 0301 	and.w	r3, r3, #1
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d002      	beq.n	80074e6 <USB_EPStartXfer+0xcc2>
 80074e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074e2:	3301      	adds	r3, #1
 80074e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	781b      	ldrb	r3, [r3, #0]
 80074ea:	00db      	lsls	r3, r3, #3
 80074ec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80074f0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80074f4:	6859      	ldr	r1, [r3, #4]
 80074f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074f8:	069a      	lsls	r2, r3, #26
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	781b      	ldrb	r3, [r3, #0]
 80074fe:	00db      	lsls	r3, r3, #3
 8007500:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007504:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007508:	430a      	orrs	r2, r1
 800750a:	605a      	str	r2, [r3, #4]
 800750c:	e04b      	b.n	80075a6 <USB_EPStartXfer+0xd82>
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	691b      	ldr	r3, [r3, #16]
 8007512:	095b      	lsrs	r3, r3, #5
 8007514:	633b      	str	r3, [r7, #48]	@ 0x30
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	691b      	ldr	r3, [r3, #16]
 800751a:	f003 031f 	and.w	r3, r3, #31
 800751e:	2b00      	cmp	r3, #0
 8007520:	d102      	bne.n	8007528 <USB_EPStartXfer+0xd04>
 8007522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007524:	3b01      	subs	r3, #1
 8007526:	633b      	str	r3, [r7, #48]	@ 0x30
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	00db      	lsls	r3, r3, #3
 800752e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007532:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007536:	685a      	ldr	r2, [r3, #4]
 8007538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800753a:	069b      	lsls	r3, r3, #26
 800753c:	431a      	orrs	r2, r3
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	781b      	ldrb	r3, [r3, #0]
 8007542:	00db      	lsls	r3, r3, #3
 8007544:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007548:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800754c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8007550:	605a      	str	r2, [r3, #4]
 8007552:	e028      	b.n	80075a6 <USB_EPStartXfer+0xd82>
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	785b      	ldrb	r3, [r3, #1]
 8007558:	2b01      	cmp	r3, #1
 800755a:	d124      	bne.n	80075a6 <USB_EPStartXfer+0xd82>
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	781b      	ldrb	r3, [r3, #0]
 8007560:	00db      	lsls	r3, r3, #3
 8007562:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007566:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800756a:	685a      	ldr	r2, [r3, #4]
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	00db      	lsls	r3, r3, #3
 8007572:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007576:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800757a:	b292      	uxth	r2, r2
 800757c:	605a      	str	r2, [r3, #4]
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	781b      	ldrb	r3, [r3, #0]
 8007582:	00db      	lsls	r3, r3, #3
 8007584:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007588:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800758c:	6859      	ldr	r1, [r3, #4]
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	691b      	ldr	r3, [r3, #16]
 8007592:	041a      	lsls	r2, r3, #16
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	781b      	ldrb	r3, [r3, #0]
 8007598:	00db      	lsls	r3, r3, #3
 800759a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800759e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80075a2:	430a      	orrs	r2, r1
 80075a4:	605a      	str	r2, [r3, #4]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	69db      	ldr	r3, [r3, #28]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	f000 8181 	beq.w	80078b2 <USB_EPStartXfer+0x108e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(USBx, ep->num);
 80075b0:	687a      	ldr	r2, [r7, #4]
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	781b      	ldrb	r3, [r3, #0]
 80075b6:	009b      	lsls	r3, r3, #2
 80075b8:	4413      	add	r3, r2
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	84fb      	strh	r3, [r7, #38]	@ 0x26

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80075be:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80075c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d004      	beq.n	80075d2 <USB_EPStartXfer+0xdae>
 80075c8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80075ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d10b      	bne.n	80075ea <USB_EPStartXfer+0xdc6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80075d2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80075d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80075d8:	2b00      	cmp	r3, #0
 80075da:	f040 816a 	bne.w	80078b2 <USB_EPStartXfer+0x108e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80075de:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80075e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	f040 8164 	bne.w	80078b2 <USB_EPStartXfer+0x108e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80075ea:	687a      	ldr	r2, [r7, #4]
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	781b      	ldrb	r3, [r3, #0]
 80075f0:	009b      	lsls	r3, r3, #2
 80075f2:	4413      	add	r3, r2
 80075f4:	681a      	ldr	r2, [r3, #0]
 80075f6:	4b98      	ldr	r3, [pc, #608]	@ (8007858 <USB_EPStartXfer+0x1034>)
 80075f8:	4013      	ands	r3, r2
 80075fa:	623b      	str	r3, [r7, #32]
 80075fc:	687a      	ldr	r2, [r7, #4]
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	781b      	ldrb	r3, [r3, #0]
 8007602:	009b      	lsls	r3, r3, #2
 8007604:	441a      	add	r2, r3
 8007606:	6a3b      	ldr	r3, [r7, #32]
 8007608:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800760c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007610:	6013      	str	r3, [r2, #0]
 8007612:	e14e      	b.n	80078b2 <USB_EPStartXfer+0x108e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	78db      	ldrb	r3, [r3, #3]
 8007618:	2b01      	cmp	r3, #1
 800761a:	f040 8148 	bne.w	80078ae <USB_EPStartXfer+0x108a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	699a      	ldr	r2, [r3, #24]
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	691b      	ldr	r3, [r3, #16]
 8007626:	429a      	cmp	r2, r3
 8007628:	d909      	bls.n	800763e <USB_EPStartXfer+0xe1a>
        {
          len = ep->maxpacket;
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	691b      	ldr	r3, [r3, #16]
 800762e:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len -= len;
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	699a      	ldr	r2, [r3, #24]
 8007634:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007636:	1ad2      	subs	r2, r2, r3
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	619a      	str	r2, [r3, #24]
 800763c:	e005      	b.n	800764a <USB_EPStartXfer+0xe26>
        }
        else
        {
          len = ep->xfer_len;
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	699b      	ldr	r3, [r3, #24]
 8007642:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len = 0U;
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	2200      	movs	r2, #0
 8007648:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	785b      	ldrb	r3, [r3, #1]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d16a      	bne.n	8007728 <USB_EPStartXfer+0xf04>
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	00db      	lsls	r3, r3, #3
 8007658:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800765c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	781b      	ldrb	r3, [r3, #0]
 8007666:	00db      	lsls	r3, r3, #3
 8007668:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800766c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007670:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8007674:	601a      	str	r2, [r3, #0]
 8007676:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007678:	2b00      	cmp	r3, #0
 800767a:	d112      	bne.n	80076a2 <USB_EPStartXfer+0xe7e>
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	781b      	ldrb	r3, [r3, #0]
 8007680:	00db      	lsls	r3, r3, #3
 8007682:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007686:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800768a:	681a      	ldr	r2, [r3, #0]
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	781b      	ldrb	r3, [r3, #0]
 8007690:	00db      	lsls	r3, r3, #3
 8007692:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007696:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800769a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800769e:	601a      	str	r2, [r3, #0]
 80076a0:	e06a      	b.n	8007778 <USB_EPStartXfer+0xf54>
 80076a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076a4:	2b3e      	cmp	r3, #62	@ 0x3e
 80076a6:	d81e      	bhi.n	80076e6 <USB_EPStartXfer+0xec2>
 80076a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076aa:	085b      	lsrs	r3, r3, #1
 80076ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80076ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076b0:	f003 0301 	and.w	r3, r3, #1
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d002      	beq.n	80076be <USB_EPStartXfer+0xe9a>
 80076b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076ba:	3301      	adds	r3, #1
 80076bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	00db      	lsls	r3, r3, #3
 80076c4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80076c8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80076cc:	6819      	ldr	r1, [r3, #0]
 80076ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076d0:	069a      	lsls	r2, r3, #26
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	00db      	lsls	r3, r3, #3
 80076d8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80076dc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80076e0:	430a      	orrs	r2, r1
 80076e2:	601a      	str	r2, [r3, #0]
 80076e4:	e048      	b.n	8007778 <USB_EPStartXfer+0xf54>
 80076e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076e8:	095b      	lsrs	r3, r3, #5
 80076ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80076ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076ee:	f003 031f 	and.w	r3, r3, #31
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d102      	bne.n	80076fc <USB_EPStartXfer+0xed8>
 80076f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076f8:	3b01      	subs	r3, #1
 80076fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	781b      	ldrb	r3, [r3, #0]
 8007700:	00db      	lsls	r3, r3, #3
 8007702:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007706:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800770e:	069b      	lsls	r3, r3, #26
 8007710:	431a      	orrs	r2, r3
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	00db      	lsls	r3, r3, #3
 8007718:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800771c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007720:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8007724:	601a      	str	r2, [r3, #0]
 8007726:	e027      	b.n	8007778 <USB_EPStartXfer+0xf54>
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	785b      	ldrb	r3, [r3, #1]
 800772c:	2b01      	cmp	r3, #1
 800772e:	d123      	bne.n	8007778 <USB_EPStartXfer+0xf54>
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	00db      	lsls	r3, r3, #3
 8007736:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800773a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800773e:	681a      	ldr	r2, [r3, #0]
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	781b      	ldrb	r3, [r3, #0]
 8007744:	00db      	lsls	r3, r3, #3
 8007746:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800774a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800774e:	b292      	uxth	r2, r2
 8007750:	601a      	str	r2, [r3, #0]
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	781b      	ldrb	r3, [r3, #0]
 8007756:	00db      	lsls	r3, r3, #3
 8007758:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800775c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007760:	6819      	ldr	r1, [r3, #0]
 8007762:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007764:	041a      	lsls	r2, r3, #16
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	781b      	ldrb	r3, [r3, #0]
 800776a:	00db      	lsls	r3, r3, #3
 800776c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007770:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007774:	430a      	orrs	r2, r1
 8007776:	601a      	str	r2, [r3, #0]
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	785b      	ldrb	r3, [r3, #1]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d16d      	bne.n	800785c <USB_EPStartXfer+0x1038>
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	00db      	lsls	r3, r3, #3
 8007786:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800778a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800778e:	685a      	ldr	r2, [r3, #4]
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	781b      	ldrb	r3, [r3, #0]
 8007794:	00db      	lsls	r3, r3, #3
 8007796:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800779a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800779e:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80077a2:	605a      	str	r2, [r3, #4]
 80077a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d112      	bne.n	80077d0 <USB_EPStartXfer+0xfac>
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	781b      	ldrb	r3, [r3, #0]
 80077ae:	00db      	lsls	r3, r3, #3
 80077b0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80077b4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80077b8:	685a      	ldr	r2, [r3, #4]
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	781b      	ldrb	r3, [r3, #0]
 80077be:	00db      	lsls	r3, r3, #3
 80077c0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80077c4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80077c8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80077cc:	605a      	str	r2, [r3, #4]
 80077ce:	e070      	b.n	80078b2 <USB_EPStartXfer+0x108e>
 80077d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077d2:	2b3e      	cmp	r3, #62	@ 0x3e
 80077d4:	d81e      	bhi.n	8007814 <USB_EPStartXfer+0xff0>
 80077d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077d8:	085b      	lsrs	r3, r3, #1
 80077da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80077dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077de:	f003 0301 	and.w	r3, r3, #1
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d002      	beq.n	80077ec <USB_EPStartXfer+0xfc8>
 80077e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077e8:	3301      	adds	r3, #1
 80077ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	781b      	ldrb	r3, [r3, #0]
 80077f0:	00db      	lsls	r3, r3, #3
 80077f2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80077f6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80077fa:	6859      	ldr	r1, [r3, #4]
 80077fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077fe:	069a      	lsls	r2, r3, #26
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	00db      	lsls	r3, r3, #3
 8007806:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800780a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800780e:	430a      	orrs	r2, r1
 8007810:	605a      	str	r2, [r3, #4]
 8007812:	e04e      	b.n	80078b2 <USB_EPStartXfer+0x108e>
 8007814:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007816:	095b      	lsrs	r3, r3, #5
 8007818:	62bb      	str	r3, [r7, #40]	@ 0x28
 800781a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800781c:	f003 031f 	and.w	r3, r3, #31
 8007820:	2b00      	cmp	r3, #0
 8007822:	d102      	bne.n	800782a <USB_EPStartXfer+0x1006>
 8007824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007826:	3b01      	subs	r3, #1
 8007828:	62bb      	str	r3, [r7, #40]	@ 0x28
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	00db      	lsls	r3, r3, #3
 8007830:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007834:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007838:	685a      	ldr	r2, [r3, #4]
 800783a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800783c:	069b      	lsls	r3, r3, #26
 800783e:	431a      	orrs	r2, r3
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	00db      	lsls	r3, r3, #3
 8007846:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800784a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800784e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8007852:	605a      	str	r2, [r3, #4]
 8007854:	e02d      	b.n	80078b2 <USB_EPStartXfer+0x108e>
 8007856:	bf00      	nop
 8007858:	07ff8f8f 	.word	0x07ff8f8f
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	785b      	ldrb	r3, [r3, #1]
 8007860:	2b01      	cmp	r3, #1
 8007862:	d126      	bne.n	80078b2 <USB_EPStartXfer+0x108e>
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	781b      	ldrb	r3, [r3, #0]
 8007868:	00db      	lsls	r3, r3, #3
 800786a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800786e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007872:	685a      	ldr	r2, [r3, #4]
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	781b      	ldrb	r3, [r3, #0]
 8007878:	00db      	lsls	r3, r3, #3
 800787a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800787e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007882:	b292      	uxth	r2, r2
 8007884:	605a      	str	r2, [r3, #4]
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	781b      	ldrb	r3, [r3, #0]
 800788a:	00db      	lsls	r3, r3, #3
 800788c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007890:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007894:	6859      	ldr	r1, [r3, #4]
 8007896:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007898:	041a      	lsls	r2, r3, #16
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	781b      	ldrb	r3, [r3, #0]
 800789e:	00db      	lsls	r3, r3, #3
 80078a0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80078a4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80078a8:	430a      	orrs	r2, r1
 80078aa:	605a      	str	r2, [r3, #4]
 80078ac:	e001      	b.n	80078b2 <USB_EPStartXfer+0x108e>
      }
      else
      {
        return HAL_ERROR;
 80078ae:	2301      	movs	r3, #1
 80078b0:	e01c      	b.n	80078ec <USB_EPStartXfer+0x10c8>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80078b2:	687a      	ldr	r2, [r7, #4]
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	781b      	ldrb	r3, [r3, #0]
 80078b8:	009b      	lsls	r3, r3, #2
 80078ba:	4413      	add	r3, r2
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	4b0d      	ldr	r3, [pc, #52]	@ (80078f4 <USB_EPStartXfer+0x10d0>)
 80078c0:	4013      	ands	r3, r2
 80078c2:	61fb      	str	r3, [r7, #28]
 80078c4:	69fb      	ldr	r3, [r7, #28]
 80078c6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80078ca:	61fb      	str	r3, [r7, #28]
 80078cc:	69fb      	ldr	r3, [r7, #28]
 80078ce:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80078d2:	61fb      	str	r3, [r7, #28]
 80078d4:	687a      	ldr	r2, [r7, #4]
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	781b      	ldrb	r3, [r3, #0]
 80078da:	009b      	lsls	r3, r3, #2
 80078dc:	441a      	add	r2, r3
 80078de:	69fb      	ldr	r3, [r7, #28]
 80078e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80078e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078e8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80078ea:	2300      	movs	r3, #0
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3758      	adds	r7, #88	@ 0x58
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}
 80078f4:	07ffbf8f 	.word	0x07ffbf8f

080078f8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b085      	sub	sp, #20
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	785b      	ldrb	r3, [r3, #1]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d018      	beq.n	800793c <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800790a:	687a      	ldr	r2, [r7, #4]
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	781b      	ldrb	r3, [r3, #0]
 8007910:	009b      	lsls	r3, r3, #2
 8007912:	4413      	add	r3, r2
 8007914:	681a      	ldr	r2, [r3, #0]
 8007916:	4b19      	ldr	r3, [pc, #100]	@ (800797c <USB_EPSetStall+0x84>)
 8007918:	4013      	ands	r3, r2
 800791a:	60bb      	str	r3, [r7, #8]
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	f083 0310 	eor.w	r3, r3, #16
 8007922:	60bb      	str	r3, [r7, #8]
 8007924:	687a      	ldr	r2, [r7, #4]
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	781b      	ldrb	r3, [r3, #0]
 800792a:	009b      	lsls	r3, r3, #2
 800792c:	441a      	add	r2, r3
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007934:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007938:	6013      	str	r3, [r2, #0]
 800793a:	e017      	b.n	800796c <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800793c:	687a      	ldr	r2, [r7, #4]
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	009b      	lsls	r3, r3, #2
 8007944:	4413      	add	r3, r2
 8007946:	681a      	ldr	r2, [r3, #0]
 8007948:	4b0d      	ldr	r3, [pc, #52]	@ (8007980 <USB_EPSetStall+0x88>)
 800794a:	4013      	ands	r3, r2
 800794c:	60fb      	str	r3, [r7, #12]
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007954:	60fb      	str	r3, [r7, #12]
 8007956:	687a      	ldr	r2, [r7, #4]
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	781b      	ldrb	r3, [r3, #0]
 800795c:	009b      	lsls	r3, r3, #2
 800795e:	441a      	add	r2, r3
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007966:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800796a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800796c:	2300      	movs	r3, #0
}
 800796e:	4618      	mov	r0, r3
 8007970:	3714      	adds	r7, #20
 8007972:	46bd      	mov	sp, r7
 8007974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007978:	4770      	bx	lr
 800797a:	bf00      	nop
 800797c:	07ff8fbf 	.word	0x07ff8fbf
 8007980:	07ffbf8f 	.word	0x07ffbf8f

08007984 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8007984:	b480      	push	{r7}
 8007986:	b089      	sub	sp, #36	@ 0x24
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	7b1b      	ldrb	r3, [r3, #12]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d17c      	bne.n	8007a90 <USB_EPClearStall+0x10c>
  {
    if (ep->is_in != 0U)
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	785b      	ldrb	r3, [r3, #1]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d03c      	beq.n	8007a18 <USB_EPClearStall+0x94>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800799e:	687a      	ldr	r2, [r7, #4]
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	781b      	ldrb	r3, [r3, #0]
 80079a4:	009b      	lsls	r3, r3, #2
 80079a6:	4413      	add	r3, r2
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	613b      	str	r3, [r7, #16]
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d013      	beq.n	80079de <USB_EPClearStall+0x5a>
 80079b6:	687a      	ldr	r2, [r7, #4]
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	781b      	ldrb	r3, [r3, #0]
 80079bc:	009b      	lsls	r3, r3, #2
 80079be:	4413      	add	r3, r2
 80079c0:	681a      	ldr	r2, [r3, #0]
 80079c2:	4b37      	ldr	r3, [pc, #220]	@ (8007aa0 <USB_EPClearStall+0x11c>)
 80079c4:	4013      	ands	r3, r2
 80079c6:	60fb      	str	r3, [r7, #12]
 80079c8:	687a      	ldr	r2, [r7, #4]
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	781b      	ldrb	r3, [r3, #0]
 80079ce:	009b      	lsls	r3, r3, #2
 80079d0:	441a      	add	r2, r3
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80079d8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80079dc:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	78db      	ldrb	r3, [r3, #3]
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	d054      	beq.n	8007a90 <USB_EPClearStall+0x10c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80079e6:	687a      	ldr	r2, [r7, #4]
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	781b      	ldrb	r3, [r3, #0]
 80079ec:	009b      	lsls	r3, r3, #2
 80079ee:	4413      	add	r3, r2
 80079f0:	681a      	ldr	r2, [r3, #0]
 80079f2:	4b2c      	ldr	r3, [pc, #176]	@ (8007aa4 <USB_EPClearStall+0x120>)
 80079f4:	4013      	ands	r3, r2
 80079f6:	60bb      	str	r3, [r7, #8]
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	f083 0320 	eor.w	r3, r3, #32
 80079fe:	60bb      	str	r3, [r7, #8]
 8007a00:	687a      	ldr	r2, [r7, #4]
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	781b      	ldrb	r3, [r3, #0]
 8007a06:	009b      	lsls	r3, r3, #2
 8007a08:	441a      	add	r2, r3
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a14:	6013      	str	r3, [r2, #0]
 8007a16:	e03b      	b.n	8007a90 <USB_EPClearStall+0x10c>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007a18:	687a      	ldr	r2, [r7, #4]
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	781b      	ldrb	r3, [r3, #0]
 8007a1e:	009b      	lsls	r3, r3, #2
 8007a20:	4413      	add	r3, r2
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	61fb      	str	r3, [r7, #28]
 8007a26:	69fb      	ldr	r3, [r7, #28]
 8007a28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d013      	beq.n	8007a58 <USB_EPClearStall+0xd4>
 8007a30:	687a      	ldr	r2, [r7, #4]
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	009b      	lsls	r3, r3, #2
 8007a38:	4413      	add	r3, r2
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	4b18      	ldr	r3, [pc, #96]	@ (8007aa0 <USB_EPClearStall+0x11c>)
 8007a3e:	4013      	ands	r3, r2
 8007a40:	61bb      	str	r3, [r7, #24]
 8007a42:	687a      	ldr	r2, [r7, #4]
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	781b      	ldrb	r3, [r3, #0]
 8007a48:	009b      	lsls	r3, r3, #2
 8007a4a:	441a      	add	r2, r3
 8007a4c:	69bb      	ldr	r3, [r7, #24]
 8007a4e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007a52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a56:	6013      	str	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007a58:	687a      	ldr	r2, [r7, #4]
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	781b      	ldrb	r3, [r3, #0]
 8007a5e:	009b      	lsls	r3, r3, #2
 8007a60:	4413      	add	r3, r2
 8007a62:	681a      	ldr	r2, [r3, #0]
 8007a64:	4b10      	ldr	r3, [pc, #64]	@ (8007aa8 <USB_EPClearStall+0x124>)
 8007a66:	4013      	ands	r3, r2
 8007a68:	617b      	str	r3, [r7, #20]
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007a70:	617b      	str	r3, [r7, #20]
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007a78:	617b      	str	r3, [r7, #20]
 8007a7a:	687a      	ldr	r2, [r7, #4]
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	781b      	ldrb	r3, [r3, #0]
 8007a80:	009b      	lsls	r3, r3, #2
 8007a82:	441a      	add	r2, r3
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a8e:	6013      	str	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007a90:	2300      	movs	r3, #0
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3724      	adds	r7, #36	@ 0x24
 8007a96:	46bd      	mov	sp, r7
 8007a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9c:	4770      	bx	lr
 8007a9e:	bf00      	nop
 8007aa0:	07ff8f8f 	.word	0x07ff8f8f
 8007aa4:	07ff8fbf 	.word	0x07ff8fbf
 8007aa8:	07ffbf8f 	.word	0x07ffbf8f

08007aac <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_DRD_TypeDef *USBx, uint8_t address)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b083      	sub	sp, #12
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	460b      	mov	r3, r1
 8007ab6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007ab8:	78fb      	ldrb	r3, [r7, #3]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d102      	bne.n	8007ac4 <USB_SetDevAddress+0x18>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2280      	movs	r2, #128	@ 0x80
 8007ac2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8007ac4:	2300      	movs	r3, #0
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	370c      	adds	r7, #12
 8007aca:	46bd      	mov	sp, r7
 8007acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad0:	4770      	bx	lr

08007ad2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_DRD_TypeDef *USBx)
{
 8007ad2:	b480      	push	{r7}
 8007ad4:	b083      	sub	sp, #12
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ade:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8007ae6:	2300      	movs	r3, #0
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	370c      	adds	r7, #12
 8007aec:	46bd      	mov	sp, r7
 8007aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af2:	4770      	bx	lr

08007af4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_DRD_TypeDef const *USBx)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b085      	sub	sp, #20
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b00:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007b02:	68fb      	ldr	r3, [r7, #12]
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3714      	adds	r7, #20
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr

08007b10 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b08b      	sub	sp, #44	@ 0x2c
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	60f8      	str	r0, [r7, #12]
 8007b18:	60b9      	str	r1, [r7, #8]
 8007b1a:	4611      	mov	r1, r2
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	460b      	mov	r3, r1
 8007b20:	80fb      	strh	r3, [r7, #6]
 8007b22:	4613      	mov	r3, r2
 8007b24:	80bb      	strh	r3, [r7, #4]
  UNUSED(USBx);
  uint32_t WrVal;
  uint32_t count;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 8007b26:	88bb      	ldrh	r3, [r7, #4]
 8007b28:	3303      	adds	r3, #3
 8007b2a:	089b      	lsrs	r3, r3, #2
 8007b2c:	61bb      	str	r3, [r7, #24]
  /* Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 8007b2e:	88bb      	ldrh	r3, [r7, #4]
 8007b30:	f003 0303 	and.w	r3, r3, #3
 8007b34:	82fb      	strh	r3, [r7, #22]
  uint8_t *pBuf = pbUsrBuf;
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	613b      	str	r3, [r7, #16]

  /* Check if there is a remaining byte */
  if (remaining_bytes != 0U)
 8007b3a:	8afb      	ldrh	r3, [r7, #22]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d002      	beq.n	8007b46 <USB_WritePMA+0x36>
  {
    NbWords--;
 8007b40:	69bb      	ldr	r3, [r7, #24]
 8007b42:	3b01      	subs	r3, #1
 8007b44:	61bb      	str	r3, [r7, #24]
  }

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 8007b46:	88fb      	ldrh	r3, [r7, #6]
 8007b48:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007b4c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007b50:	61fb      	str	r3, [r7, #28]

  /* Write the Calculated Word into the PMA related Buffer */
  for (count = NbWords; count != 0U; count--)
 8007b52:	69bb      	ldr	r3, [r7, #24]
 8007b54:	623b      	str	r3, [r7, #32]
 8007b56:	e015      	b.n	8007b84 <USB_WritePMA+0x74>
  {
    *pdwVal = __UNALIGNED_UINT32_READ(pBuf);
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	681a      	ldr	r2, [r3, #0]
 8007b5c:	69fb      	ldr	r3, [r7, #28]
 8007b5e:	601a      	str	r2, [r3, #0]
    pdwVal++;
 8007b60:	69fb      	ldr	r3, [r7, #28]
 8007b62:	3304      	adds	r3, #4
 8007b64:	61fb      	str	r3, [r7, #28]
    /* Increment pBuf 4 Time as Word Increment */
    pBuf++;
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	3301      	adds	r3, #1
 8007b6a:	613b      	str	r3, [r7, #16]
    pBuf++;
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	3301      	adds	r3, #1
 8007b70:	613b      	str	r3, [r7, #16]
    pBuf++;
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	3301      	adds	r3, #1
 8007b76:	613b      	str	r3, [r7, #16]
    pBuf++;
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	3301      	adds	r3, #1
 8007b7c:	613b      	str	r3, [r7, #16]
  for (count = NbWords; count != 0U; count--)
 8007b7e:	6a3b      	ldr	r3, [r7, #32]
 8007b80:	3b01      	subs	r3, #1
 8007b82:	623b      	str	r3, [r7, #32]
 8007b84:	6a3b      	ldr	r3, [r7, #32]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d1e6      	bne.n	8007b58 <USB_WritePMA+0x48>
  }

  /* When Number of data is not word aligned, write the remaining Byte */
  if (remaining_bytes != 0U)
 8007b8a:	8afb      	ldrh	r3, [r7, #22]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d01a      	beq.n	8007bc6 <USB_WritePMA+0xb6>
  {
    WrVal = 0U;
 8007b90:	2300      	movs	r3, #0
 8007b92:	627b      	str	r3, [r7, #36]	@ 0x24

    do
    {
      WrVal |= (uint32_t)(*(uint8_t *)pBuf) << (8U * count);
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	781b      	ldrb	r3, [r3, #0]
 8007b98:	461a      	mov	r2, r3
 8007b9a:	6a3b      	ldr	r3, [r7, #32]
 8007b9c:	00db      	lsls	r3, r3, #3
 8007b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8007ba2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	627b      	str	r3, [r7, #36]	@ 0x24
      count++;
 8007ba8:	6a3b      	ldr	r3, [r7, #32]
 8007baa:	3301      	adds	r3, #1
 8007bac:	623b      	str	r3, [r7, #32]
      pBuf++;
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	3301      	adds	r3, #1
 8007bb2:	613b      	str	r3, [r7, #16]
      remaining_bytes--;
 8007bb4:	8afb      	ldrh	r3, [r7, #22]
 8007bb6:	3b01      	subs	r3, #1
 8007bb8:	82fb      	strh	r3, [r7, #22]
    } while (remaining_bytes != 0U);
 8007bba:	8afb      	ldrh	r3, [r7, #22]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d1e9      	bne.n	8007b94 <USB_WritePMA+0x84>

    *pdwVal = WrVal;
 8007bc0:	69fb      	ldr	r3, [r7, #28]
 8007bc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bc4:	601a      	str	r2, [r3, #0]
  }
}
 8007bc6:	bf00      	nop
 8007bc8:	372c      	adds	r7, #44	@ 0x2c
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd0:	4770      	bx	lr

08007bd2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007bd2:	b480      	push	{r7}
 8007bd4:	b08b      	sub	sp, #44	@ 0x2c
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	60f8      	str	r0, [r7, #12]
 8007bda:	60b9      	str	r1, [r7, #8]
 8007bdc:	4611      	mov	r1, r2
 8007bde:	461a      	mov	r2, r3
 8007be0:	460b      	mov	r3, r1
 8007be2:	80fb      	strh	r3, [r7, #6]
 8007be4:	4613      	mov	r3, r2
 8007be6:	80bb      	strh	r3, [r7, #4]
  UNUSED(USBx);
  uint32_t count;
  uint32_t RdVal;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 8007be8:	88bb      	ldrh	r3, [r7, #4]
 8007bea:	3303      	adds	r3, #3
 8007bec:	089b      	lsrs	r3, r3, #2
 8007bee:	61fb      	str	r3, [r7, #28]
  /*Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 8007bf0:	88bb      	ldrh	r3, [r7, #4]
 8007bf2:	f003 0303 	and.w	r3, r3, #3
 8007bf6:	837b      	strh	r3, [r7, #26]
  uint8_t *pBuf = pbUsrBuf;
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	617b      	str	r3, [r7, #20]

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 8007bfc:	88fb      	ldrh	r3, [r7, #6]
 8007bfe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007c02:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007c06:	623b      	str	r3, [r7, #32]

  /* if nbre of byte is not word aligned decrement the nbre of word*/
  if (remaining_bytes != 0U)
 8007c08:	8b7b      	ldrh	r3, [r7, #26]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d002      	beq.n	8007c14 <USB_ReadPMA+0x42>
  {
    NbWords--;
 8007c0e:	69fb      	ldr	r3, [r7, #28]
 8007c10:	3b01      	subs	r3, #1
 8007c12:	61fb      	str	r3, [r7, #28]
  }

  /*Read the Calculated Word From the PMA related Buffer*/
  for (count = NbWords; count != 0U; count--)
 8007c14:	69fb      	ldr	r3, [r7, #28]
 8007c16:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c18:	e015      	b.n	8007c46 <USB_ReadPMA+0x74>
  {
    __UNALIGNED_UINT32_WRITE(pBuf, *pdwVal);
 8007c1a:	6a3b      	ldr	r3, [r7, #32]
 8007c1c:	681a      	ldr	r2, [r3, #0]
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	601a      	str	r2, [r3, #0]

    pdwVal++;
 8007c22:	6a3b      	ldr	r3, [r7, #32]
 8007c24:	3304      	adds	r3, #4
 8007c26:	623b      	str	r3, [r7, #32]
    pBuf++;
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	3301      	adds	r3, #1
 8007c2c:	617b      	str	r3, [r7, #20]
    pBuf++;
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	3301      	adds	r3, #1
 8007c32:	617b      	str	r3, [r7, #20]
    pBuf++;
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	3301      	adds	r3, #1
 8007c38:	617b      	str	r3, [r7, #20]
    pBuf++;
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	3301      	adds	r3, #1
 8007c3e:	617b      	str	r3, [r7, #20]
  for (count = NbWords; count != 0U; count--)
 8007c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c42:	3b01      	subs	r3, #1
 8007c44:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d1e6      	bne.n	8007c1a <USB_ReadPMA+0x48>
  }

  /*When Number of data is not word aligned, read the remaining byte*/
  if (remaining_bytes != 0U)
 8007c4c:	8b7b      	ldrh	r3, [r7, #26]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d017      	beq.n	8007c82 <USB_ReadPMA+0xb0>
  {
    RdVal = *(__IO uint32_t *)pdwVal;
 8007c52:	6a3b      	ldr	r3, [r7, #32]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	613b      	str	r3, [r7, #16]

    do
    {
      *(uint8_t *)pBuf = (uint8_t)(RdVal >> (8U * (uint8_t)(count)));
 8007c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c5a:	b2db      	uxtb	r3, r3
 8007c5c:	00db      	lsls	r3, r3, #3
 8007c5e:	693a      	ldr	r2, [r7, #16]
 8007c60:	fa22 f303 	lsr.w	r3, r2, r3
 8007c64:	b2da      	uxtb	r2, r3
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	701a      	strb	r2, [r3, #0]
      count++;
 8007c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c6c:	3301      	adds	r3, #1
 8007c6e:	627b      	str	r3, [r7, #36]	@ 0x24
      pBuf++;
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	3301      	adds	r3, #1
 8007c74:	617b      	str	r3, [r7, #20]
      remaining_bytes--;
 8007c76:	8b7b      	ldrh	r3, [r7, #26]
 8007c78:	3b01      	subs	r3, #1
 8007c7a:	837b      	strh	r3, [r7, #26]
    } while (remaining_bytes != 0U);
 8007c7c:	8b7b      	ldrh	r3, [r7, #26]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d1ea      	bne.n	8007c58 <USB_ReadPMA+0x86>
  }
}
 8007c82:	bf00      	nop
 8007c84:	372c      	adds	r7, #44	@ 0x2c
 8007c86:	46bd      	mov	sp, r7
 8007c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8c:	4770      	bx	lr
	...

08007c90 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b084      	sub	sp, #16
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	460b      	mov	r3, r1
 8007c9a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007c9c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007ca0:	f001 ff06 	bl	8009ab0 <USBD_static_malloc>
 8007ca4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d10a      	bne.n	8007cc2 <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007cb2:	687a      	ldr	r2, [r7, #4]
 8007cb4:	33b0      	adds	r3, #176	@ 0xb0
 8007cb6:	009b      	lsls	r3, r3, #2
 8007cb8:	4413      	add	r3, r2
 8007cba:	2200      	movs	r2, #0
 8007cbc:	605a      	str	r2, [r3, #4]
    return (uint8_t)USBD_EMEM;
 8007cbe:	2302      	movs	r3, #2
 8007cc0:	e0fd      	b.n	8007ebe <USBD_CDC_Init+0x22e>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007cc2:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8007cc6:	2100      	movs	r1, #0
 8007cc8:	68f8      	ldr	r0, [r7, #12]
 8007cca:	f003 fd5c 	bl	800b786 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	33b0      	adds	r3, #176	@ 0xb0
 8007cd8:	009b      	lsls	r3, r3, #2
 8007cda:	4413      	add	r3, r2
 8007cdc:	68fa      	ldr	r2, [r7, #12]
 8007cde:	605a      	str	r2, [r3, #4]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007ce6:	687a      	ldr	r2, [r7, #4]
 8007ce8:	33b0      	adds	r3, #176	@ 0xb0
 8007cea:	009b      	lsls	r3, r3, #2
 8007cec:	4413      	add	r3, r2
 8007cee:	685a      	ldr	r2, [r3, #4]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007cfc:	b2db      	uxtb	r3, r3
 8007cfe:	2202      	movs	r2, #2
 8007d00:	2180      	movs	r1, #128	@ 0x80
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f002 fb80 	bl	800a408 <USBD_CoreGetEPAdd>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	461a      	mov	r2, r3
 8007d0c:	4b6e      	ldr	r3, [pc, #440]	@ (8007ec8 <USBD_CDC_Init+0x238>)
 8007d0e:	701a      	strb	r2, [r3, #0]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007d16:	b2db      	uxtb	r3, r3
 8007d18:	2202      	movs	r2, #2
 8007d1a:	2100      	movs	r1, #0
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f002 fb73 	bl	800a408 <USBD_CoreGetEPAdd>
 8007d22:	4603      	mov	r3, r0
 8007d24:	461a      	mov	r2, r3
 8007d26:	4b69      	ldr	r3, [pc, #420]	@ (8007ecc <USBD_CDC_Init+0x23c>)
 8007d28:	701a      	strb	r2, [r3, #0]
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007d30:	b2db      	uxtb	r3, r3
 8007d32:	2203      	movs	r2, #3
 8007d34:	2180      	movs	r1, #128	@ 0x80
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f002 fb66 	bl	800a408 <USBD_CoreGetEPAdd>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	461a      	mov	r2, r3
 8007d40:	4b63      	ldr	r3, [pc, #396]	@ (8007ed0 <USBD_CDC_Init+0x240>)
 8007d42:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	7c1b      	ldrb	r3, [r3, #16]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d138      	bne.n	8007dbe <USBD_CDC_Init+0x12e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007d4c:	4b5e      	ldr	r3, [pc, #376]	@ (8007ec8 <USBD_CDC_Init+0x238>)
 8007d4e:	7819      	ldrb	r1, [r3, #0]
 8007d50:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007d54:	2202      	movs	r2, #2
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f001 fdb1 	bl	80098be <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007d5c:	4b5a      	ldr	r3, [pc, #360]	@ (8007ec8 <USBD_CDC_Init+0x238>)
 8007d5e:	781b      	ldrb	r3, [r3, #0]
 8007d60:	f003 020f 	and.w	r2, r3, #15
 8007d64:	6879      	ldr	r1, [r7, #4]
 8007d66:	4613      	mov	r3, r2
 8007d68:	009b      	lsls	r3, r3, #2
 8007d6a:	4413      	add	r3, r2
 8007d6c:	009b      	lsls	r3, r3, #2
 8007d6e:	440b      	add	r3, r1
 8007d70:	3324      	adds	r3, #36	@ 0x24
 8007d72:	2201      	movs	r2, #1
 8007d74:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007d76:	4b55      	ldr	r3, [pc, #340]	@ (8007ecc <USBD_CDC_Init+0x23c>)
 8007d78:	7819      	ldrb	r1, [r3, #0]
 8007d7a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007d7e:	2202      	movs	r2, #2
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f001 fd9c 	bl	80098be <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007d86:	4b51      	ldr	r3, [pc, #324]	@ (8007ecc <USBD_CDC_Init+0x23c>)
 8007d88:	781b      	ldrb	r3, [r3, #0]
 8007d8a:	f003 020f 	and.w	r2, r3, #15
 8007d8e:	6879      	ldr	r1, [r7, #4]
 8007d90:	4613      	mov	r3, r2
 8007d92:	009b      	lsls	r3, r3, #2
 8007d94:	4413      	add	r3, r2
 8007d96:	009b      	lsls	r3, r3, #2
 8007d98:	440b      	add	r3, r1
 8007d9a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007d9e:	2201      	movs	r2, #1
 8007da0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007da2:	4b4b      	ldr	r3, [pc, #300]	@ (8007ed0 <USBD_CDC_Init+0x240>)
 8007da4:	781b      	ldrb	r3, [r3, #0]
 8007da6:	f003 020f 	and.w	r2, r3, #15
 8007daa:	6879      	ldr	r1, [r7, #4]
 8007dac:	4613      	mov	r3, r2
 8007dae:	009b      	lsls	r3, r3, #2
 8007db0:	4413      	add	r3, r2
 8007db2:	009b      	lsls	r3, r3, #2
 8007db4:	440b      	add	r3, r1
 8007db6:	3326      	adds	r3, #38	@ 0x26
 8007db8:	2210      	movs	r2, #16
 8007dba:	801a      	strh	r2, [r3, #0]
 8007dbc:	e035      	b.n	8007e2a <USBD_CDC_Init+0x19a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007dbe:	4b42      	ldr	r3, [pc, #264]	@ (8007ec8 <USBD_CDC_Init+0x238>)
 8007dc0:	7819      	ldrb	r1, [r3, #0]
 8007dc2:	2340      	movs	r3, #64	@ 0x40
 8007dc4:	2202      	movs	r2, #2
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f001 fd79 	bl	80098be <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007dcc:	4b3e      	ldr	r3, [pc, #248]	@ (8007ec8 <USBD_CDC_Init+0x238>)
 8007dce:	781b      	ldrb	r3, [r3, #0]
 8007dd0:	f003 020f 	and.w	r2, r3, #15
 8007dd4:	6879      	ldr	r1, [r7, #4]
 8007dd6:	4613      	mov	r3, r2
 8007dd8:	009b      	lsls	r3, r3, #2
 8007dda:	4413      	add	r3, r2
 8007ddc:	009b      	lsls	r3, r3, #2
 8007dde:	440b      	add	r3, r1
 8007de0:	3324      	adds	r3, #36	@ 0x24
 8007de2:	2201      	movs	r2, #1
 8007de4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007de6:	4b39      	ldr	r3, [pc, #228]	@ (8007ecc <USBD_CDC_Init+0x23c>)
 8007de8:	7819      	ldrb	r1, [r3, #0]
 8007dea:	2340      	movs	r3, #64	@ 0x40
 8007dec:	2202      	movs	r2, #2
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f001 fd65 	bl	80098be <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007df4:	4b35      	ldr	r3, [pc, #212]	@ (8007ecc <USBD_CDC_Init+0x23c>)
 8007df6:	781b      	ldrb	r3, [r3, #0]
 8007df8:	f003 020f 	and.w	r2, r3, #15
 8007dfc:	6879      	ldr	r1, [r7, #4]
 8007dfe:	4613      	mov	r3, r2
 8007e00:	009b      	lsls	r3, r3, #2
 8007e02:	4413      	add	r3, r2
 8007e04:	009b      	lsls	r3, r3, #2
 8007e06:	440b      	add	r3, r1
 8007e08:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007e0c:	2201      	movs	r2, #1
 8007e0e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007e10:	4b2f      	ldr	r3, [pc, #188]	@ (8007ed0 <USBD_CDC_Init+0x240>)
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	f003 020f 	and.w	r2, r3, #15
 8007e18:	6879      	ldr	r1, [r7, #4]
 8007e1a:	4613      	mov	r3, r2
 8007e1c:	009b      	lsls	r3, r3, #2
 8007e1e:	4413      	add	r3, r2
 8007e20:	009b      	lsls	r3, r3, #2
 8007e22:	440b      	add	r3, r1
 8007e24:	3326      	adds	r3, #38	@ 0x26
 8007e26:	2210      	movs	r2, #16
 8007e28:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007e2a:	4b29      	ldr	r3, [pc, #164]	@ (8007ed0 <USBD_CDC_Init+0x240>)
 8007e2c:	7819      	ldrb	r1, [r3, #0]
 8007e2e:	2308      	movs	r3, #8
 8007e30:	2203      	movs	r2, #3
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f001 fd43 	bl	80098be <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007e38:	4b25      	ldr	r3, [pc, #148]	@ (8007ed0 <USBD_CDC_Init+0x240>)
 8007e3a:	781b      	ldrb	r3, [r3, #0]
 8007e3c:	f003 020f 	and.w	r2, r3, #15
 8007e40:	6879      	ldr	r1, [r7, #4]
 8007e42:	4613      	mov	r3, r2
 8007e44:	009b      	lsls	r3, r3, #2
 8007e46:	4413      	add	r3, r2
 8007e48:	009b      	lsls	r3, r3, #2
 8007e4a:	440b      	add	r3, r1
 8007e4c:	3324      	adds	r3, #36	@ 0x24
 8007e4e:	2201      	movs	r2, #1
 8007e50:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	2200      	movs	r2, #0
 8007e56:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007e60:	687a      	ldr	r2, [r7, #4]
 8007e62:	33b2      	adds	r3, #178	@ 0xb2
 8007e64:	009b      	lsls	r3, r3, #2
 8007e66:	4413      	add	r3, r2
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	2200      	movs	r2, #0
 8007e72:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d101      	bne.n	8007e8c <USBD_CDC_Init+0x1fc>
  {
    return (uint8_t)USBD_EMEM;
 8007e88:	2302      	movs	r3, #2
 8007e8a:	e018      	b.n	8007ebe <USBD_CDC_Init+0x22e>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	7c1b      	ldrb	r3, [r3, #16]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d10a      	bne.n	8007eaa <USBD_CDC_Init+0x21a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007e94:	4b0d      	ldr	r3, [pc, #52]	@ (8007ecc <USBD_CDC_Init+0x23c>)
 8007e96:	7819      	ldrb	r1, [r3, #0]
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007e9e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f001 fdd6 	bl	8009a54 <USBD_LL_PrepareReceive>
 8007ea8:	e008      	b.n	8007ebc <USBD_CDC_Init+0x22c>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007eaa:	4b08      	ldr	r3, [pc, #32]	@ (8007ecc <USBD_CDC_Init+0x23c>)
 8007eac:	7819      	ldrb	r1, [r3, #0]
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007eb4:	2340      	movs	r3, #64	@ 0x40
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f001 fdcc 	bl	8009a54 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007ebc:	2300      	movs	r3, #0
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3710      	adds	r7, #16
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}
 8007ec6:	bf00      	nop
 8007ec8:	20000048 	.word	0x20000048
 8007ecc:	20000049 	.word	0x20000049
 8007ed0:	2000004a 	.word	0x2000004a

08007ed4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b082      	sub	sp, #8
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	460b      	mov	r3, r1
 8007ede:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);


#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this CDC class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007ee6:	b2db      	uxtb	r3, r3
 8007ee8:	2202      	movs	r2, #2
 8007eea:	2180      	movs	r1, #128	@ 0x80
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f002 fa8b 	bl	800a408 <USBD_CoreGetEPAdd>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	461a      	mov	r2, r3
 8007ef6:	4b4a      	ldr	r3, [pc, #296]	@ (8008020 <USBD_CDC_DeInit+0x14c>)
 8007ef8:	701a      	strb	r2, [r3, #0]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007f00:	b2db      	uxtb	r3, r3
 8007f02:	2202      	movs	r2, #2
 8007f04:	2100      	movs	r1, #0
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f002 fa7e 	bl	800a408 <USBD_CoreGetEPAdd>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	461a      	mov	r2, r3
 8007f10:	4b44      	ldr	r3, [pc, #272]	@ (8008024 <USBD_CDC_DeInit+0x150>)
 8007f12:	701a      	strb	r2, [r3, #0]
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007f1a:	b2db      	uxtb	r3, r3
 8007f1c:	2203      	movs	r2, #3
 8007f1e:	2180      	movs	r1, #128	@ 0x80
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f002 fa71 	bl	800a408 <USBD_CoreGetEPAdd>
 8007f26:	4603      	mov	r3, r0
 8007f28:	461a      	mov	r2, r3
 8007f2a:	4b3f      	ldr	r3, [pc, #252]	@ (8008028 <USBD_CDC_DeInit+0x154>)
 8007f2c:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007f2e:	4b3c      	ldr	r3, [pc, #240]	@ (8008020 <USBD_CDC_DeInit+0x14c>)
 8007f30:	781b      	ldrb	r3, [r3, #0]
 8007f32:	4619      	mov	r1, r3
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f001 fce2 	bl	80098fe <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007f3a:	4b39      	ldr	r3, [pc, #228]	@ (8008020 <USBD_CDC_DeInit+0x14c>)
 8007f3c:	781b      	ldrb	r3, [r3, #0]
 8007f3e:	f003 020f 	and.w	r2, r3, #15
 8007f42:	6879      	ldr	r1, [r7, #4]
 8007f44:	4613      	mov	r3, r2
 8007f46:	009b      	lsls	r3, r3, #2
 8007f48:	4413      	add	r3, r2
 8007f4a:	009b      	lsls	r3, r3, #2
 8007f4c:	440b      	add	r3, r1
 8007f4e:	3324      	adds	r3, #36	@ 0x24
 8007f50:	2200      	movs	r2, #0
 8007f52:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007f54:	4b33      	ldr	r3, [pc, #204]	@ (8008024 <USBD_CDC_DeInit+0x150>)
 8007f56:	781b      	ldrb	r3, [r3, #0]
 8007f58:	4619      	mov	r1, r3
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f001 fccf 	bl	80098fe <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007f60:	4b30      	ldr	r3, [pc, #192]	@ (8008024 <USBD_CDC_DeInit+0x150>)
 8007f62:	781b      	ldrb	r3, [r3, #0]
 8007f64:	f003 020f 	and.w	r2, r3, #15
 8007f68:	6879      	ldr	r1, [r7, #4]
 8007f6a:	4613      	mov	r3, r2
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	4413      	add	r3, r2
 8007f70:	009b      	lsls	r3, r3, #2
 8007f72:	440b      	add	r3, r1
 8007f74:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007f78:	2200      	movs	r2, #0
 8007f7a:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007f7c:	4b2a      	ldr	r3, [pc, #168]	@ (8008028 <USBD_CDC_DeInit+0x154>)
 8007f7e:	781b      	ldrb	r3, [r3, #0]
 8007f80:	4619      	mov	r1, r3
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f001 fcbb 	bl	80098fe <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007f88:	4b27      	ldr	r3, [pc, #156]	@ (8008028 <USBD_CDC_DeInit+0x154>)
 8007f8a:	781b      	ldrb	r3, [r3, #0]
 8007f8c:	f003 020f 	and.w	r2, r3, #15
 8007f90:	6879      	ldr	r1, [r7, #4]
 8007f92:	4613      	mov	r3, r2
 8007f94:	009b      	lsls	r3, r3, #2
 8007f96:	4413      	add	r3, r2
 8007f98:	009b      	lsls	r3, r3, #2
 8007f9a:	440b      	add	r3, r1
 8007f9c:	3324      	adds	r3, #36	@ 0x24
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007fa2:	4b21      	ldr	r3, [pc, #132]	@ (8008028 <USBD_CDC_DeInit+0x154>)
 8007fa4:	781b      	ldrb	r3, [r3, #0]
 8007fa6:	f003 020f 	and.w	r2, r3, #15
 8007faa:	6879      	ldr	r1, [r7, #4]
 8007fac:	4613      	mov	r3, r2
 8007fae:	009b      	lsls	r3, r3, #2
 8007fb0:	4413      	add	r3, r2
 8007fb2:	009b      	lsls	r3, r3, #2
 8007fb4:	440b      	add	r3, r1
 8007fb6:	3326      	adds	r3, #38	@ 0x26
 8007fb8:	2200      	movs	r2, #0
 8007fba:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007fc2:	687a      	ldr	r2, [r7, #4]
 8007fc4:	33b0      	adds	r3, #176	@ 0xb0
 8007fc6:	009b      	lsls	r3, r3, #2
 8007fc8:	4413      	add	r3, r2
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d021      	beq.n	8008014 <USBD_CDC_DeInit+0x140>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007fd6:	687a      	ldr	r2, [r7, #4]
 8007fd8:	33b2      	adds	r3, #178	@ 0xb2
 8007fda:	009b      	lsls	r3, r3, #2
 8007fdc:	4413      	add	r3, r2
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007fea:	687a      	ldr	r2, [r7, #4]
 8007fec:	33b0      	adds	r3, #176	@ 0xb0
 8007fee:	009b      	lsls	r3, r3, #2
 8007ff0:	4413      	add	r3, r2
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f001 fd69 	bl	8009acc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008000:	687a      	ldr	r2, [r7, #4]
 8008002:	33b0      	adds	r3, #176	@ 0xb0
 8008004:	009b      	lsls	r3, r3, #2
 8008006:	4413      	add	r3, r2
 8008008:	2200      	movs	r2, #0
 800800a:	605a      	str	r2, [r3, #4]
    pdev->pClassData = NULL;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2200      	movs	r2, #0
 8008010:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  }

  return (uint8_t)USBD_OK;
 8008014:	2300      	movs	r3, #0
}
 8008016:	4618      	mov	r0, r3
 8008018:	3708      	adds	r7, #8
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}
 800801e:	bf00      	nop
 8008020:	20000048 	.word	0x20000048
 8008024:	20000049 	.word	0x20000049
 8008028:	2000004a 	.word	0x2000004a

0800802c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b086      	sub	sp, #24
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
 8008034:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800803c:	687a      	ldr	r2, [r7, #4]
 800803e:	33b0      	adds	r3, #176	@ 0xb0
 8008040:	009b      	lsls	r3, r3, #2
 8008042:	4413      	add	r3, r2
 8008044:	685b      	ldr	r3, [r3, #4]
 8008046:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008048:	2300      	movs	r3, #0
 800804a:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800804c:	2300      	movs	r3, #0
 800804e:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008050:	2300      	movs	r3, #0
 8008052:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d101      	bne.n	800805e <USBD_CDC_Setup+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800805a:	2303      	movs	r3, #3
 800805c:	e0c0      	b.n	80081e0 <USBD_CDC_Setup+0x1b4>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	781b      	ldrb	r3, [r3, #0]
 8008062:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008066:	2b00      	cmp	r3, #0
 8008068:	d050      	beq.n	800810c <USBD_CDC_Setup+0xe0>
 800806a:	2b20      	cmp	r3, #32
 800806c:	f040 80b0 	bne.w	80081d0 <USBD_CDC_Setup+0x1a4>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	88db      	ldrh	r3, [r3, #6]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d03a      	beq.n	80080ee <USBD_CDC_Setup+0xc2>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	781b      	ldrb	r3, [r3, #0]
 800807c:	b25b      	sxtb	r3, r3
 800807e:	2b00      	cmp	r3, #0
 8008080:	da1b      	bge.n	80080ba <USBD_CDC_Setup+0x8e>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008088:	687a      	ldr	r2, [r7, #4]
 800808a:	33b2      	adds	r3, #178	@ 0xb2
 800808c:	009b      	lsls	r3, r3, #2
 800808e:	4413      	add	r3, r2
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	689b      	ldr	r3, [r3, #8]
 8008094:	683a      	ldr	r2, [r7, #0]
 8008096:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008098:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800809a:	683a      	ldr	r2, [r7, #0]
 800809c:	88d2      	ldrh	r2, [r2, #6]
 800809e:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	88db      	ldrh	r3, [r3, #6]
 80080a4:	2b07      	cmp	r3, #7
 80080a6:	bf28      	it	cs
 80080a8:	2307      	movcs	r3, #7
 80080aa:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	89fa      	ldrh	r2, [r7, #14]
 80080b0:	4619      	mov	r1, r3
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f003 f9a7 	bl	800b406 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80080b8:	e091      	b.n	80081de <USBD_CDC_Setup+0x1b2>
          hcdc->CmdOpCode = req->bRequest;
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	785a      	ldrb	r2, [r3, #1]
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	88db      	ldrh	r3, [r3, #6]
 80080c8:	2b3f      	cmp	r3, #63	@ 0x3f
 80080ca:	d803      	bhi.n	80080d4 <USBD_CDC_Setup+0xa8>
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	88db      	ldrh	r3, [r3, #6]
 80080d0:	b2da      	uxtb	r2, r3
 80080d2:	e000      	b.n	80080d6 <USBD_CDC_Setup+0xaa>
 80080d4:	2240      	movs	r2, #64	@ 0x40
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80080dc:	6939      	ldr	r1, [r7, #16]
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80080e4:	461a      	mov	r2, r3
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f003 f9b9 	bl	800b45e <USBD_CtlPrepareRx>
      break;
 80080ec:	e077      	b.n	80081de <USBD_CDC_Setup+0x1b2>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80080f4:	687a      	ldr	r2, [r7, #4]
 80080f6:	33b2      	adds	r3, #178	@ 0xb2
 80080f8:	009b      	lsls	r3, r3, #2
 80080fa:	4413      	add	r3, r2
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	689b      	ldr	r3, [r3, #8]
 8008100:	683a      	ldr	r2, [r7, #0]
 8008102:	7850      	ldrb	r0, [r2, #1]
 8008104:	2200      	movs	r2, #0
 8008106:	6839      	ldr	r1, [r7, #0]
 8008108:	4798      	blx	r3
      break;
 800810a:	e068      	b.n	80081de <USBD_CDC_Setup+0x1b2>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	785b      	ldrb	r3, [r3, #1]
 8008110:	2b0b      	cmp	r3, #11
 8008112:	d852      	bhi.n	80081ba <USBD_CDC_Setup+0x18e>
 8008114:	a201      	add	r2, pc, #4	@ (adr r2, 800811c <USBD_CDC_Setup+0xf0>)
 8008116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800811a:	bf00      	nop
 800811c:	0800814d 	.word	0x0800814d
 8008120:	080081c9 	.word	0x080081c9
 8008124:	080081bb 	.word	0x080081bb
 8008128:	080081bb 	.word	0x080081bb
 800812c:	080081bb 	.word	0x080081bb
 8008130:	080081bb 	.word	0x080081bb
 8008134:	080081bb 	.word	0x080081bb
 8008138:	080081bb 	.word	0x080081bb
 800813c:	080081bb 	.word	0x080081bb
 8008140:	080081bb 	.word	0x080081bb
 8008144:	08008177 	.word	0x08008177
 8008148:	080081a1 	.word	0x080081a1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008152:	b2db      	uxtb	r3, r3
 8008154:	2b03      	cmp	r3, #3
 8008156:	d107      	bne.n	8008168 <USBD_CDC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008158:	f107 030a 	add.w	r3, r7, #10
 800815c:	2202      	movs	r2, #2
 800815e:	4619      	mov	r1, r3
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f003 f950 	bl	800b406 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008166:	e032      	b.n	80081ce <USBD_CDC_Setup+0x1a2>
            USBD_CtlError(pdev, req);
 8008168:	6839      	ldr	r1, [r7, #0]
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f002 ffcb 	bl	800b106 <USBD_CtlError>
            ret = USBD_FAIL;
 8008170:	2303      	movs	r3, #3
 8008172:	75fb      	strb	r3, [r7, #23]
          break;
 8008174:	e02b      	b.n	80081ce <USBD_CDC_Setup+0x1a2>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800817c:	b2db      	uxtb	r3, r3
 800817e:	2b03      	cmp	r3, #3
 8008180:	d107      	bne.n	8008192 <USBD_CDC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008182:	f107 030d 	add.w	r3, r7, #13
 8008186:	2201      	movs	r2, #1
 8008188:	4619      	mov	r1, r3
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f003 f93b 	bl	800b406 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008190:	e01d      	b.n	80081ce <USBD_CDC_Setup+0x1a2>
            USBD_CtlError(pdev, req);
 8008192:	6839      	ldr	r1, [r7, #0]
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f002 ffb6 	bl	800b106 <USBD_CtlError>
            ret = USBD_FAIL;
 800819a:	2303      	movs	r3, #3
 800819c:	75fb      	strb	r3, [r7, #23]
          break;
 800819e:	e016      	b.n	80081ce <USBD_CDC_Setup+0x1a2>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081a6:	b2db      	uxtb	r3, r3
 80081a8:	2b03      	cmp	r3, #3
 80081aa:	d00f      	beq.n	80081cc <USBD_CDC_Setup+0x1a0>
          {
            USBD_CtlError(pdev, req);
 80081ac:	6839      	ldr	r1, [r7, #0]
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f002 ffa9 	bl	800b106 <USBD_CtlError>
            ret = USBD_FAIL;
 80081b4:	2303      	movs	r3, #3
 80081b6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80081b8:	e008      	b.n	80081cc <USBD_CDC_Setup+0x1a0>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80081ba:	6839      	ldr	r1, [r7, #0]
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f002 ffa2 	bl	800b106 <USBD_CtlError>
          ret = USBD_FAIL;
 80081c2:	2303      	movs	r3, #3
 80081c4:	75fb      	strb	r3, [r7, #23]
          break;
 80081c6:	e002      	b.n	80081ce <USBD_CDC_Setup+0x1a2>
          break;
 80081c8:	bf00      	nop
 80081ca:	e008      	b.n	80081de <USBD_CDC_Setup+0x1b2>
          break;
 80081cc:	bf00      	nop
      }
      break;
 80081ce:	e006      	b.n	80081de <USBD_CDC_Setup+0x1b2>

    default:
      USBD_CtlError(pdev, req);
 80081d0:	6839      	ldr	r1, [r7, #0]
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f002 ff97 	bl	800b106 <USBD_CtlError>
      ret = USBD_FAIL;
 80081d8:	2303      	movs	r3, #3
 80081da:	75fb      	strb	r3, [r7, #23]
      break;
 80081dc:	bf00      	nop
  }

  return (uint8_t)ret;
 80081de:	7dfb      	ldrb	r3, [r7, #23]
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3718      	adds	r7, #24
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}

080081e8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b084      	sub	sp, #16
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	460b      	mov	r3, r1
 80081f2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80081fa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008202:	687a      	ldr	r2, [r7, #4]
 8008204:	33b0      	adds	r3, #176	@ 0xb0
 8008206:	009b      	lsls	r3, r3, #2
 8008208:	4413      	add	r3, r2
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d101      	bne.n	8008214 <USBD_CDC_DataIn+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8008210:	2303      	movs	r3, #3
 8008212:	e066      	b.n	80082e2 <USBD_CDC_DataIn+0xfa>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800821a:	687a      	ldr	r2, [r7, #4]
 800821c:	33b0      	adds	r3, #176	@ 0xb0
 800821e:	009b      	lsls	r3, r3, #2
 8008220:	4413      	add	r3, r2
 8008222:	685b      	ldr	r3, [r3, #4]
 8008224:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008226:	78fb      	ldrb	r3, [r7, #3]
 8008228:	f003 020f 	and.w	r2, r3, #15
 800822c:	6879      	ldr	r1, [r7, #4]
 800822e:	4613      	mov	r3, r2
 8008230:	009b      	lsls	r3, r3, #2
 8008232:	4413      	add	r3, r2
 8008234:	009b      	lsls	r3, r3, #2
 8008236:	440b      	add	r3, r1
 8008238:	3318      	adds	r3, #24
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d02f      	beq.n	80082a0 <USBD_CDC_DataIn+0xb8>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008240:	78fb      	ldrb	r3, [r7, #3]
 8008242:	f003 020f 	and.w	r2, r3, #15
 8008246:	6879      	ldr	r1, [r7, #4]
 8008248:	4613      	mov	r3, r2
 800824a:	009b      	lsls	r3, r3, #2
 800824c:	4413      	add	r3, r2
 800824e:	009b      	lsls	r3, r3, #2
 8008250:	440b      	add	r3, r1
 8008252:	3318      	adds	r3, #24
 8008254:	681a      	ldr	r2, [r3, #0]
 8008256:	78fb      	ldrb	r3, [r7, #3]
 8008258:	f003 010f 	and.w	r1, r3, #15
 800825c:	68f8      	ldr	r0, [r7, #12]
 800825e:	460b      	mov	r3, r1
 8008260:	009b      	lsls	r3, r3, #2
 8008262:	440b      	add	r3, r1
 8008264:	00db      	lsls	r3, r3, #3
 8008266:	4403      	add	r3, r0
 8008268:	3324      	adds	r3, #36	@ 0x24
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	fbb2 f1f3 	udiv	r1, r2, r3
 8008270:	fb01 f303 	mul.w	r3, r1, r3
 8008274:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008276:	2b00      	cmp	r3, #0
 8008278:	d112      	bne.n	80082a0 <USBD_CDC_DataIn+0xb8>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800827a:	78fb      	ldrb	r3, [r7, #3]
 800827c:	f003 020f 	and.w	r2, r3, #15
 8008280:	6879      	ldr	r1, [r7, #4]
 8008282:	4613      	mov	r3, r2
 8008284:	009b      	lsls	r3, r3, #2
 8008286:	4413      	add	r3, r2
 8008288:	009b      	lsls	r3, r3, #2
 800828a:	440b      	add	r3, r1
 800828c:	3318      	adds	r3, #24
 800828e:	2200      	movs	r2, #0
 8008290:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008292:	78f9      	ldrb	r1, [r7, #3]
 8008294:	2300      	movs	r3, #0
 8008296:	2200      	movs	r2, #0
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f001 fbc0 	bl	8009a1e <USBD_LL_Transmit>
 800829e:	e01f      	b.n	80082e0 <USBD_CDC_DataIn+0xf8>
  }
  else
  {
    hcdc->TxState = 0U;
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	2200      	movs	r2, #0
 80082a4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80082ae:	687a      	ldr	r2, [r7, #4]
 80082b0:	33b2      	adds	r3, #178	@ 0xb2
 80082b2:	009b      	lsls	r3, r3, #2
 80082b4:	4413      	add	r3, r2
 80082b6:	685b      	ldr	r3, [r3, #4]
 80082b8:	691b      	ldr	r3, [r3, #16]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d010      	beq.n	80082e0 <USBD_CDC_DataIn+0xf8>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80082c4:	687a      	ldr	r2, [r7, #4]
 80082c6:	33b2      	adds	r3, #178	@ 0xb2
 80082c8:	009b      	lsls	r3, r3, #2
 80082ca:	4413      	add	r3, r2
 80082cc:	685b      	ldr	r3, [r3, #4]
 80082ce:	691b      	ldr	r3, [r3, #16]
 80082d0:	68ba      	ldr	r2, [r7, #8]
 80082d2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80082d6:	68ba      	ldr	r2, [r7, #8]
 80082d8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80082dc:	78fa      	ldrb	r2, [r7, #3]
 80082de:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80082e0:	2300      	movs	r3, #0
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	3710      	adds	r7, #16
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}

080082ea <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80082ea:	b580      	push	{r7, lr}
 80082ec:	b084      	sub	sp, #16
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	6078      	str	r0, [r7, #4]
 80082f2:	460b      	mov	r3, r1
 80082f4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80082fc:	687a      	ldr	r2, [r7, #4]
 80082fe:	33b0      	adds	r3, #176	@ 0xb0
 8008300:	009b      	lsls	r3, r3, #2
 8008302:	4413      	add	r3, r2
 8008304:	685b      	ldr	r3, [r3, #4]
 8008306:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800830e:	687a      	ldr	r2, [r7, #4]
 8008310:	33b0      	adds	r3, #176	@ 0xb0
 8008312:	009b      	lsls	r3, r3, #2
 8008314:	4413      	add	r3, r2
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d101      	bne.n	8008320 <USBD_CDC_DataOut+0x36>
  {
    return (uint8_t)USBD_FAIL;
 800831c:	2303      	movs	r3, #3
 800831e:	e01a      	b.n	8008356 <USBD_CDC_DataOut+0x6c>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008320:	78fb      	ldrb	r3, [r7, #3]
 8008322:	4619      	mov	r1, r3
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f001 fbb0 	bl	8009a8a <USBD_LL_GetRxDataSize>
 800832a:	4602      	mov	r2, r0
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008338:	687a      	ldr	r2, [r7, #4]
 800833a:	33b2      	adds	r3, #178	@ 0xb2
 800833c:	009b      	lsls	r3, r3, #2
 800833e:	4413      	add	r3, r2
 8008340:	685b      	ldr	r3, [r3, #4]
 8008342:	68db      	ldr	r3, [r3, #12]
 8008344:	68fa      	ldr	r2, [r7, #12]
 8008346:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800834a:	68fa      	ldr	r2, [r7, #12]
 800834c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008350:	4611      	mov	r1, r2
 8008352:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008354:	2300      	movs	r3, #0
}
 8008356:	4618      	mov	r0, r3
 8008358:	3710      	adds	r7, #16
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}

0800835e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800835e:	b580      	push	{r7, lr}
 8008360:	b084      	sub	sp, #16
 8008362:	af00      	add	r7, sp, #0
 8008364:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800836c:	687a      	ldr	r2, [r7, #4]
 800836e:	33b0      	adds	r3, #176	@ 0xb0
 8008370:	009b      	lsls	r3, r3, #2
 8008372:	4413      	add	r3, r2
 8008374:	685b      	ldr	r3, [r3, #4]
 8008376:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d101      	bne.n	8008382 <USBD_CDC_EP0_RxReady+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800837e:	2303      	movs	r3, #3
 8008380:	e024      	b.n	80083cc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008388:	687a      	ldr	r2, [r7, #4]
 800838a:	33b2      	adds	r3, #178	@ 0xb2
 800838c:	009b      	lsls	r3, r3, #2
 800838e:	4413      	add	r3, r2
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d019      	beq.n	80083ca <USBD_CDC_EP0_RxReady+0x6c>
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800839c:	2bff      	cmp	r3, #255	@ 0xff
 800839e:	d014      	beq.n	80083ca <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80083a6:	687a      	ldr	r2, [r7, #4]
 80083a8:	33b2      	adds	r3, #178	@ 0xb2
 80083aa:	009b      	lsls	r3, r3, #2
 80083ac:	4413      	add	r3, r2
 80083ae:	685b      	ldr	r3, [r3, #4]
 80083b0:	689b      	ldr	r3, [r3, #8]
 80083b2:	68fa      	ldr	r2, [r7, #12]
 80083b4:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80083b8:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80083ba:	68fa      	ldr	r2, [r7, #12]
 80083bc:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80083c0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	22ff      	movs	r2, #255	@ 0xff
 80083c6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80083ca:	2300      	movs	r3, #0
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3710      	adds	r7, #16
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}

080083d4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b083      	sub	sp, #12
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d101      	bne.n	80083e8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80083e4:	2303      	movs	r3, #3
 80083e6:	e009      	b.n	80083fc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80083ee:	687a      	ldr	r2, [r7, #4]
 80083f0:	33b2      	adds	r3, #178	@ 0xb2
 80083f2:	009b      	lsls	r3, r3, #2
 80083f4:	4413      	add	r3, r2
 80083f6:	683a      	ldr	r2, [r7, #0]
 80083f8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80083fa:	2300      	movs	r3, #0
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	370c      	adds	r7, #12
 8008400:	46bd      	mov	sp, r7
 8008402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008406:	4770      	bx	lr

08008408 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
#ifdef USE_USBD_COMPOSITE
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length, uint8_t ClassId)
{
 8008408:	b480      	push	{r7}
 800840a:	b087      	sub	sp, #28
 800840c:	af00      	add	r7, sp, #0
 800840e:	60f8      	str	r0, [r7, #12]
 8008410:	60b9      	str	r1, [r7, #8]
 8008412:	607a      	str	r2, [r7, #4]
 8008414:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
 8008416:	78fb      	ldrb	r3, [r7, #3]
 8008418:	68fa      	ldr	r2, [r7, #12]
 800841a:	33b0      	adds	r3, #176	@ 0xb0
 800841c:	009b      	lsls	r3, r3, #2
 800841e:	4413      	add	r3, r2
 8008420:	685b      	ldr	r3, [r3, #4]
 8008422:	617b      	str	r3, [r7, #20]
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d101      	bne.n	800842e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800842a:	2303      	movs	r3, #3
 800842c:	e008      	b.n	8008440 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	68ba      	ldr	r2, [r7, #8]
 8008432:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	687a      	ldr	r2, [r7, #4]
 800843a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800843e:	2300      	movs	r3, #0
}
 8008440:	4618      	mov	r0, r3
 8008442:	371c      	adds	r7, #28
 8008444:	46bd      	mov	sp, r7
 8008446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844a:	4770      	bx	lr

0800844c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800844c:	b480      	push	{r7}
 800844e:	b085      	sub	sp, #20
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
 8008454:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800845c:	687a      	ldr	r2, [r7, #4]
 800845e:	33b0      	adds	r3, #176	@ 0xb0
 8008460:	009b      	lsls	r3, r3, #2
 8008462:	4413      	add	r3, r2
 8008464:	685b      	ldr	r3, [r3, #4]
 8008466:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d101      	bne.n	8008472 <USBD_CDC_SetRxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800846e:	2303      	movs	r3, #3
 8008470:	e004      	b.n	800847c <USBD_CDC_SetRxBuffer+0x30>
  }

  hcdc->RxBuffer = pbuff;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	683a      	ldr	r2, [r7, #0]
 8008476:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800847a:	2300      	movs	r3, #0
}
 800847c:	4618      	mov	r0, r3
 800847e:	3714      	adds	r7, #20
 8008480:	46bd      	mov	sp, r7
 8008482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008486:	4770      	bx	lr

08008488 <USBD_CDC_TransmitPacket>:
  * @param  ClassId: The Class ID
  * @retval status
  */
#ifdef USE_USBD_COMPOSITE
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b084      	sub	sp, #16
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
 8008490:	460b      	mov	r3, r1
 8008492:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
 8008494:	78fb      	ldrb	r3, [r7, #3]
 8008496:	687a      	ldr	r2, [r7, #4]
 8008498:	33b0      	adds	r3, #176	@ 0xb0
 800849a:	009b      	lsls	r3, r3, #2
 800849c:	4413      	add	r3, r2
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	60bb      	str	r3, [r7, #8]
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80084a2:	2301      	movs	r3, #1
 80084a4:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
 80084a6:	78fb      	ldrb	r3, [r7, #3]
 80084a8:	2202      	movs	r2, #2
 80084aa:	2180      	movs	r1, #128	@ 0x80
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f001 ffab 	bl	800a408 <USBD_CoreGetEPAdd>
 80084b2:	4603      	mov	r3, r0
 80084b4:	461a      	mov	r2, r3
 80084b6:	4b18      	ldr	r3, [pc, #96]	@ (8008518 <USBD_CDC_TransmitPacket+0x90>)
 80084b8:	701a      	strb	r2, [r3, #0]
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d101      	bne.n	80084c4 <USBD_CDC_TransmitPacket+0x3c>
  {
    return (uint8_t)USBD_FAIL;
 80084c0:	2303      	movs	r3, #3
 80084c2:	e025      	b.n	8008510 <USBD_CDC_TransmitPacket+0x88>
  }

  if (hcdc->TxState == 0U)
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d11f      	bne.n	800850e <USBD_CDC_TransmitPacket+0x86>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	2201      	movs	r2, #1
 80084d2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80084d6:	4b10      	ldr	r3, [pc, #64]	@ (8008518 <USBD_CDC_TransmitPacket+0x90>)
 80084d8:	781b      	ldrb	r3, [r3, #0]
 80084da:	f003 020f 	and.w	r2, r3, #15
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	4613      	mov	r3, r2
 80084e8:	009b      	lsls	r3, r3, #2
 80084ea:	4413      	add	r3, r2
 80084ec:	009b      	lsls	r3, r3, #2
 80084ee:	4403      	add	r3, r0
 80084f0:	3318      	adds	r3, #24
 80084f2:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80084f4:	4b08      	ldr	r3, [pc, #32]	@ (8008518 <USBD_CDC_TransmitPacket+0x90>)
 80084f6:	7819      	ldrb	r1, [r3, #0]
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f001 fa8a 	bl	8009a1e <USBD_LL_Transmit>

    ret = USBD_OK;
 800850a:	2300      	movs	r3, #0
 800850c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800850e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008510:	4618      	mov	r0, r3
 8008512:	3710      	adds	r7, #16
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}
 8008518:	20000048 	.word	0x20000048

0800851c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b084      	sub	sp, #16
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800852a:	687a      	ldr	r2, [r7, #4]
 800852c:	33b0      	adds	r3, #176	@ 0xb0
 800852e:	009b      	lsls	r3, r3, #2
 8008530:	4413      	add	r3, r2
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	60fb      	str	r3, [r7, #12]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800853c:	b2db      	uxtb	r3, r3
 800853e:	2202      	movs	r2, #2
 8008540:	2100      	movs	r1, #0
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f001 ff60 	bl	800a408 <USBD_CoreGetEPAdd>
 8008548:	4603      	mov	r3, r0
 800854a:	461a      	mov	r2, r3
 800854c:	4b15      	ldr	r3, [pc, #84]	@ (80085a4 <USBD_CDC_ReceivePacket+0x88>)
 800854e:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008556:	687a      	ldr	r2, [r7, #4]
 8008558:	33b0      	adds	r3, #176	@ 0xb0
 800855a:	009b      	lsls	r3, r3, #2
 800855c:	4413      	add	r3, r2
 800855e:	685b      	ldr	r3, [r3, #4]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d101      	bne.n	8008568 <USBD_CDC_ReceivePacket+0x4c>
  {
    return (uint8_t)USBD_FAIL;
 8008564:	2303      	movs	r3, #3
 8008566:	e018      	b.n	800859a <USBD_CDC_ReceivePacket+0x7e>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	7c1b      	ldrb	r3, [r3, #16]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d10a      	bne.n	8008586 <USBD_CDC_ReceivePacket+0x6a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008570:	4b0c      	ldr	r3, [pc, #48]	@ (80085a4 <USBD_CDC_ReceivePacket+0x88>)
 8008572:	7819      	ldrb	r1, [r3, #0]
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800857a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f001 fa68 	bl	8009a54 <USBD_LL_PrepareReceive>
 8008584:	e008      	b.n	8008598 <USBD_CDC_ReceivePacket+0x7c>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008586:	4b07      	ldr	r3, [pc, #28]	@ (80085a4 <USBD_CDC_ReceivePacket+0x88>)
 8008588:	7819      	ldrb	r1, [r3, #0]
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008590:	2340      	movs	r3, #64	@ 0x40
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f001 fa5e 	bl	8009a54 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008598:	2300      	movs	r3, #0
}
 800859a:	4618      	mov	r0, r3
 800859c:	3710      	adds	r7, #16
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}
 80085a2:	bf00      	nop
 80085a4:	20000049 	.word	0x20000049

080085a8 <TEMPLATE_Init>:
  *         Initializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Init(void)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	af00      	add	r7, sp, #0
	hUsbDeviceFS.classId = CDC_InstID;
 80085ac:	4b0a      	ldr	r3, [pc, #40]	@ (80085d8 <TEMPLATE_Init+0x30>)
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	461a      	mov	r2, r3
 80085b2:	4b0a      	ldr	r3, [pc, #40]	@ (80085dc <TEMPLATE_Init+0x34>)
 80085b4:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, buffer, sizeof(buffer), CDC_InstID);
 80085b8:	4b07      	ldr	r3, [pc, #28]	@ (80085d8 <TEMPLATE_Init+0x30>)
 80085ba:	781b      	ldrb	r3, [r3, #0]
 80085bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80085c0:	4907      	ldr	r1, [pc, #28]	@ (80085e0 <TEMPLATE_Init+0x38>)
 80085c2:	4806      	ldr	r0, [pc, #24]	@ (80085dc <TEMPLATE_Init+0x34>)
 80085c4:	f7ff ff20 	bl	8008408 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBuffer);
 80085c8:	4906      	ldr	r1, [pc, #24]	@ (80085e4 <TEMPLATE_Init+0x3c>)
 80085ca:	4804      	ldr	r0, [pc, #16]	@ (80085dc <TEMPLATE_Init+0x34>)
 80085cc:	f7ff ff3e 	bl	800844c <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 80085d0:	2300      	movs	r3, #0
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	bd80      	pop	{r7, pc}
 80085d6:	bf00      	nop
 80085d8:	20000891 	.word	0x20000891
 80085dc:	2000054c 	.word	0x2000054c
 80085e0:	200008e8 	.word	0x200008e8
 80085e4:	200009f0 	.word	0x200009f0

080085e8 <TEMPLATE_DeInit>:
  *         DeInitializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_DeInit(void)
{
 80085e8:	b480      	push	{r7}
 80085ea:	af00      	add	r7, sp, #0
  /*
     Add your deinitialization code here
  */
  return (0);
 80085ec:	2300      	movs	r3, #0
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	46bd      	mov	sp, r7
 80085f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f6:	4770      	bx	lr

080085f8 <TEMPLATE_Control>:
  * @param  Buf: Buffer containing command data (request parameters)
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Control(uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b083      	sub	sp, #12
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	4603      	mov	r3, r0
 8008600:	6039      	str	r1, [r7, #0]
 8008602:	71fb      	strb	r3, [r7, #7]
 8008604:	4613      	mov	r3, r2
 8008606:	80bb      	strh	r3, [r7, #4]
  UNUSED(length);

  switch (cmd)
 8008608:	79fb      	ldrb	r3, [r7, #7]
 800860a:	2b23      	cmp	r3, #35	@ 0x23
 800860c:	f200 8098 	bhi.w	8008740 <TEMPLATE_Control+0x148>
 8008610:	a201      	add	r2, pc, #4	@ (adr r2, 8008618 <TEMPLATE_Control+0x20>)
 8008612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008616:	bf00      	nop
 8008618:	08008741 	.word	0x08008741
 800861c:	08008741 	.word	0x08008741
 8008620:	08008741 	.word	0x08008741
 8008624:	08008741 	.word	0x08008741
 8008628:	08008741 	.word	0x08008741
 800862c:	08008741 	.word	0x08008741
 8008630:	08008741 	.word	0x08008741
 8008634:	08008741 	.word	0x08008741
 8008638:	08008741 	.word	0x08008741
 800863c:	08008741 	.word	0x08008741
 8008640:	08008741 	.word	0x08008741
 8008644:	08008741 	.word	0x08008741
 8008648:	08008741 	.word	0x08008741
 800864c:	08008741 	.word	0x08008741
 8008650:	08008741 	.word	0x08008741
 8008654:	08008741 	.word	0x08008741
 8008658:	08008741 	.word	0x08008741
 800865c:	08008741 	.word	0x08008741
 8008660:	08008741 	.word	0x08008741
 8008664:	08008741 	.word	0x08008741
 8008668:	08008741 	.word	0x08008741
 800866c:	08008741 	.word	0x08008741
 8008670:	08008741 	.word	0x08008741
 8008674:	08008741 	.word	0x08008741
 8008678:	08008741 	.word	0x08008741
 800867c:	08008741 	.word	0x08008741
 8008680:	08008741 	.word	0x08008741
 8008684:	08008741 	.word	0x08008741
 8008688:	08008741 	.word	0x08008741
 800868c:	08008741 	.word	0x08008741
 8008690:	08008741 	.word	0x08008741
 8008694:	08008741 	.word	0x08008741
 8008698:	080086a9 	.word	0x080086a9
 800869c:	080086ed 	.word	0x080086ed
 80086a0:	08008741 	.word	0x08008741
 80086a4:	08008741 	.word	0x08008741
    case CDC_CLEAR_COMM_FEATURE:
      /* Add your code here */
      break;

    case CDC_SET_LINE_CODING:
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	781b      	ldrb	r3, [r3, #0]
 80086ac:	461a      	mov	r2, r3
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	3301      	adds	r3, #1
 80086b2:	781b      	ldrb	r3, [r3, #0]
 80086b4:	021b      	lsls	r3, r3, #8
 80086b6:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	3302      	adds	r3, #2
 80086bc:	781b      	ldrb	r3, [r3, #0]
 80086be:	041b      	lsls	r3, r3, #16
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 80086c0:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	3303      	adds	r3, #3
 80086c6:	781b      	ldrb	r3, [r3, #0]
 80086c8:	061b      	lsls	r3, r3, #24
 80086ca:	4313      	orrs	r3, r2
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 80086cc:	461a      	mov	r2, r3
 80086ce:	4b20      	ldr	r3, [pc, #128]	@ (8008750 <TEMPLATE_Control+0x158>)
 80086d0:	601a      	str	r2, [r3, #0]
      linecoding.format     = pbuf[4];
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	791a      	ldrb	r2, [r3, #4]
 80086d6:	4b1e      	ldr	r3, [pc, #120]	@ (8008750 <TEMPLATE_Control+0x158>)
 80086d8:	711a      	strb	r2, [r3, #4]
      linecoding.paritytype = pbuf[5];
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	795a      	ldrb	r2, [r3, #5]
 80086de:	4b1c      	ldr	r3, [pc, #112]	@ (8008750 <TEMPLATE_Control+0x158>)
 80086e0:	715a      	strb	r2, [r3, #5]
      linecoding.datatype   = pbuf[6];
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	799a      	ldrb	r2, [r3, #6]
 80086e6:	4b1a      	ldr	r3, [pc, #104]	@ (8008750 <TEMPLATE_Control+0x158>)
 80086e8:	719a      	strb	r2, [r3, #6]

      /* Add your code here */
      break;
 80086ea:	e02a      	b.n	8008742 <TEMPLATE_Control+0x14a>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(linecoding.bitrate);
 80086ec:	4b18      	ldr	r3, [pc, #96]	@ (8008750 <TEMPLATE_Control+0x158>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	b2da      	uxtb	r2, r3
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(linecoding.bitrate >> 8);
 80086f6:	4b16      	ldr	r3, [pc, #88]	@ (8008750 <TEMPLATE_Control+0x158>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	0a1a      	lsrs	r2, r3, #8
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	3301      	adds	r3, #1
 8008700:	b2d2      	uxtb	r2, r2
 8008702:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(linecoding.bitrate >> 16);
 8008704:	4b12      	ldr	r3, [pc, #72]	@ (8008750 <TEMPLATE_Control+0x158>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	0c1a      	lsrs	r2, r3, #16
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	3302      	adds	r3, #2
 800870e:	b2d2      	uxtb	r2, r2
 8008710:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(linecoding.bitrate >> 24);
 8008712:	4b0f      	ldr	r3, [pc, #60]	@ (8008750 <TEMPLATE_Control+0x158>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	0e1a      	lsrs	r2, r3, #24
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	3303      	adds	r3, #3
 800871c:	b2d2      	uxtb	r2, r2
 800871e:	701a      	strb	r2, [r3, #0]
      pbuf[4] = linecoding.format;
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	3304      	adds	r3, #4
 8008724:	4a0a      	ldr	r2, [pc, #40]	@ (8008750 <TEMPLATE_Control+0x158>)
 8008726:	7912      	ldrb	r2, [r2, #4]
 8008728:	701a      	strb	r2, [r3, #0]
      pbuf[5] = linecoding.paritytype;
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	3305      	adds	r3, #5
 800872e:	4a08      	ldr	r2, [pc, #32]	@ (8008750 <TEMPLATE_Control+0x158>)
 8008730:	7952      	ldrb	r2, [r2, #5]
 8008732:	701a      	strb	r2, [r3, #0]
      pbuf[6] = linecoding.datatype;
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	3306      	adds	r3, #6
 8008738:	4a05      	ldr	r2, [pc, #20]	@ (8008750 <TEMPLATE_Control+0x158>)
 800873a:	7992      	ldrb	r2, [r2, #6]
 800873c:	701a      	strb	r2, [r3, #0]

      /* Add your code here */
      break;
 800873e:	e000      	b.n	8008742 <TEMPLATE_Control+0x14a>
    case CDC_SEND_BREAK:
      /* Add your code here */
      break;

    default:
      break;
 8008740:	bf00      	nop
  }

  return (0);
 8008742:	2300      	movs	r3, #0
}
 8008744:	4618      	mov	r0, r3
 8008746:	370c      	adds	r7, #12
 8008748:	46bd      	mov	sp, r7
 800874a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874e:	4770      	bx	lr
 8008750:	20000060 	.word	0x20000060

08008754 <TEMPLATE_Receive>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Receive(uint8_t *Buf, uint32_t *Len)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b082      	sub	sp, #8
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	6039      	str	r1, [r7, #0]
	/* Add your RX code here */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800875e:	6879      	ldr	r1, [r7, #4]
 8008760:	4805      	ldr	r0, [pc, #20]	@ (8008778 <TEMPLATE_Receive+0x24>)
 8008762:	f7ff fe73 	bl	800844c <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008766:	4804      	ldr	r0, [pc, #16]	@ (8008778 <TEMPLATE_Receive+0x24>)
 8008768:	f7ff fed8 	bl	800851c <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 800876c:	2300      	movs	r3, #0
}
 800876e:	4618      	mov	r0, r3
 8008770:	3708      	adds	r7, #8
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}
 8008776:	bf00      	nop
 8008778:	2000054c 	.word	0x2000054c

0800877c <TEMPLATE_TransmitCplt>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_TransmitCplt(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800877c:	b480      	push	{r7}
 800877e:	b085      	sub	sp, #20
 8008780:	af00      	add	r7, sp, #0
 8008782:	60f8      	str	r0, [r7, #12]
 8008784:	60b9      	str	r1, [r7, #8]
 8008786:	4613      	mov	r3, r2
 8008788:	71fb      	strb	r3, [r7, #7]
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);

  return (0);
 800878a:	2300      	movs	r3, #0
}
 800878c:	4618      	mov	r0, r3
 800878e:	3714      	adds	r7, #20
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr

08008798 <USBD_CMPSIT_AddClass>:
  */
uint8_t  USBD_CMPSIT_AddClass(USBD_HandleTypeDef *pdev,
                              USBD_ClassTypeDef *pclass,
                              USBD_CompositeClassTypeDef class,
                              uint8_t cfgidx)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b084      	sub	sp, #16
 800879c:	af00      	add	r7, sp, #0
 800879e:	60f8      	str	r0, [r7, #12]
 80087a0:	60b9      	str	r1, [r7, #8]
 80087a2:	4611      	mov	r1, r2
 80087a4:	461a      	mov	r2, r3
 80087a6:	460b      	mov	r3, r1
 80087a8:	71fb      	strb	r3, [r7, #7]
 80087aa:	4613      	mov	r3, r2
 80087ac:	71bb      	strb	r3, [r7, #6]
  if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) && (pdev->tclasslist[pdev->classId].Active == 0U))
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80087b4:	2b01      	cmp	r3, #1
 80087b6:	d842      	bhi.n	800883e <USBD_CMPSIT_AddClass+0xa6>
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80087be:	68fa      	ldr	r2, [r7, #12]
 80087c0:	212c      	movs	r1, #44	@ 0x2c
 80087c2:	fb01 f303 	mul.w	r3, r1, r3
 80087c6:	4413      	add	r3, r2
 80087c8:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d135      	bne.n	800883e <USBD_CMPSIT_AddClass+0xa6>
  {
    /* Store the class parameters in the global tab */
    pdev->pClass[pdev->classId] = pclass;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	32ae      	adds	r2, #174	@ 0xae
 80087dc:	68b9      	ldr	r1, [r7, #8]
 80087de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->tclasslist[pdev->classId].ClassId = pdev->classId;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80087e8:	68fa      	ldr	r2, [r7, #12]
 80087ea:	f8d2 22e0 	ldr.w	r2, [r2, #736]	@ 0x2e0
 80087ee:	68f9      	ldr	r1, [r7, #12]
 80087f0:	202c      	movs	r0, #44	@ 0x2c
 80087f2:	fb00 f303 	mul.w	r3, r0, r3
 80087f6:	440b      	add	r3, r1
 80087f8:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 80087fc:	601a      	str	r2, [r3, #0]
    pdev->tclasslist[pdev->classId].Active = 1U;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008804:	68fa      	ldr	r2, [r7, #12]
 8008806:	212c      	movs	r1, #44	@ 0x2c
 8008808:	fb01 f303 	mul.w	r3, r1, r3
 800880c:	4413      	add	r3, r2
 800880e:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8008812:	2201      	movs	r2, #1
 8008814:	601a      	str	r2, [r3, #0]
    pdev->tclasslist[pdev->classId].ClassType = class;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800881c:	68fa      	ldr	r2, [r7, #12]
 800881e:	212c      	movs	r1, #44	@ 0x2c
 8008820:	fb01 f303 	mul.w	r3, r1, r3
 8008824:	4413      	add	r3, r2
 8008826:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 800882a:	79fa      	ldrb	r2, [r7, #7]
 800882c:	701a      	strb	r2, [r3, #0]

    /* Call configuration descriptor builder and endpoint configuration builder */
    if (USBD_CMPSIT_AddToConfDesc(pdev) != (uint8_t)USBD_OK)
 800882e:	68f8      	ldr	r0, [r7, #12]
 8008830:	f000 f80a 	bl	8008848 <USBD_CMPSIT_AddToConfDesc>
 8008834:	4603      	mov	r3, r0
 8008836:	2b00      	cmp	r3, #0
 8008838:	d001      	beq.n	800883e <USBD_CMPSIT_AddClass+0xa6>
    {
      return (uint8_t)USBD_FAIL;
 800883a:	2303      	movs	r3, #3
 800883c:	e000      	b.n	8008840 <USBD_CMPSIT_AddClass+0xa8>
    }
  }

  UNUSED(cfgidx);

  return (uint8_t)USBD_OK;
 800883e:	2300      	movs	r3, #0
}
 8008840:	4618      	mov	r0, r3
 8008842:	3710      	adds	r7, #16
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}

08008848 <USBD_CMPSIT_AddToConfDesc>:
  *         Add a new class to the configuration descriptor
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CMPSIT_AddToConfDesc(USBD_HandleTypeDef *pdev)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b084      	sub	sp, #16
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  uint8_t idxIf = 0U;
 8008850:	2300      	movs	r3, #0
 8008852:	73fb      	strb	r3, [r7, #15]
  uint8_t iEp = 0U;
 8008854:	2300      	movs	r3, #0
 8008856:	73bb      	strb	r3, [r7, #14]

  /* For the first class instance, start building the config descriptor common part */
  if (pdev->classId == 0U)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800885e:	2b00      	cmp	r3, #0
 8008860:	d105      	bne.n	800886e <USBD_CMPSIT_AddToConfDesc+0x26>
  {
    /* Add configuration and IAD descriptors */
    USBD_CMPSIT_AddConfDesc((uint32_t)pCmpstFSConfDesc, &CurrFSConfDescSz);
 8008862:	4b88      	ldr	r3, [pc, #544]	@ (8008a84 <USBD_CMPSIT_AddToConfDesc+0x23c>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4988      	ldr	r1, [pc, #544]	@ (8008a88 <USBD_CMPSIT_AddToConfDesc+0x240>)
 8008868:	4618      	mov	r0, r3
 800886a:	f000 f976 	bl	8008b5a <USBD_CMPSIT_AddConfDesc>
#ifdef USE_USB_HS
    USBD_CMPSIT_AddConfDesc((uint32_t)pCmpstHSConfDesc, &CurrHSConfDescSz);
#endif /* USE_USB_HS */
  }

  switch (pdev->tclasslist[pdev->classId].ClassType)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008874:	687a      	ldr	r2, [r7, #4]
 8008876:	212c      	movs	r1, #44	@ 0x2c
 8008878:	fb01 f303 	mul.w	r3, r1, r3
 800887c:	4413      	add	r3, r2
 800887e:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 8008882:	781b      	ldrb	r3, [r3, #0]
 8008884:	2b01      	cmp	r3, #1
 8008886:	d002      	beq.n	800888e <USBD_CMPSIT_AddToConfDesc+0x46>
 8008888:	2b02      	cmp	r3, #2
 800888a:	d05b      	beq.n	8008944 <USBD_CMPSIT_AddToConfDesc+0xfc>
    default:
      UNUSED(idxIf);
      UNUSED(iEp);
      UNUSED(USBD_CMPSIT_FindFreeIFNbr);
      UNUSED(USBD_CMPSIT_AssignEp);
      break;
 800888c:	e0f4      	b.n	8008a78 <USBD_CMPSIT_AddToConfDesc+0x230>
      pdev->tclasslist[pdev->classId].CurrPcktSze = HID_EPIN_SIZE;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008894:	687a      	ldr	r2, [r7, #4]
 8008896:	212c      	movs	r1, #44	@ 0x2c
 8008898:	fb01 f303 	mul.w	r3, r1, r3
 800889c:	4413      	add	r3, r2
 800889e:	f503 7344 	add.w	r3, r3, #784	@ 0x310
 80088a2:	2204      	movs	r2, #4
 80088a4:	601a      	str	r2, [r3, #0]
      idxIf = USBD_CMPSIT_FindFreeIFNbr(pdev);
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f000 f928 	bl	8008afc <USBD_CMPSIT_FindFreeIFNbr>
 80088ac:	4603      	mov	r3, r0
 80088ae:	73fb      	strb	r3, [r7, #15]
      pdev->tclasslist[pdev->classId].NumIf = 1U;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80088b6:	687a      	ldr	r2, [r7, #4]
 80088b8:	212c      	movs	r1, #44	@ 0x2c
 80088ba:	fb01 f303 	mul.w	r3, r1, r3
 80088be:	4413      	add	r3, r2
 80088c0:	f503 7342 	add.w	r3, r3, #776	@ 0x308
 80088c4:	2201      	movs	r2, #1
 80088c6:	601a      	str	r2, [r3, #0]
      pdev->tclasslist[pdev->classId].Ifs[0] = idxIf;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80088ce:	687a      	ldr	r2, [r7, #4]
 80088d0:	212c      	movs	r1, #44	@ 0x2c
 80088d2:	fb01 f303 	mul.w	r3, r1, r3
 80088d6:	4413      	add	r3, r2
 80088d8:	f503 7343 	add.w	r3, r3, #780	@ 0x30c
 80088dc:	7bfa      	ldrb	r2, [r7, #15]
 80088de:	701a      	strb	r2, [r3, #0]
      pdev->tclasslist[pdev->classId].NumEps = 1U; /* EP1_IN */
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80088e6:	687a      	ldr	r2, [r7, #4]
 80088e8:	212c      	movs	r1, #44	@ 0x2c
 80088ea:	fb01 f303 	mul.w	r3, r1, r3
 80088ee:	4413      	add	r3, r2
 80088f0:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 80088f4:	2201      	movs	r2, #1
 80088f6:	601a      	str	r2, [r3, #0]
      iEp = pdev->tclasslist[pdev->classId].EpAdd[0];
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80088fe:	687a      	ldr	r2, [r7, #4]
 8008900:	212c      	movs	r1, #44	@ 0x2c
 8008902:	fb01 f303 	mul.w	r3, r1, r3
 8008906:	4413      	add	r3, r2
 8008908:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	781b      	ldrb	r3, [r3, #0]
 8008910:	73bb      	strb	r3, [r7, #14]
      USBD_CMPSIT_AssignEp(pdev, iEp, USBD_EP_TYPE_INTR, pdev->tclasslist[pdev->classId].CurrPcktSze);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008918:	687a      	ldr	r2, [r7, #4]
 800891a:	212c      	movs	r1, #44	@ 0x2c
 800891c:	fb01 f303 	mul.w	r3, r1, r3
 8008920:	4413      	add	r3, r2
 8008922:	f503 7344 	add.w	r3, r3, #784	@ 0x310
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	7bb9      	ldrb	r1, [r7, #14]
 800892a:	2203      	movs	r2, #3
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f000 f941 	bl	8008bb4 <USBD_CMPSIT_AssignEp>
      USBD_CMPSIT_HIDMouseDesc(pdev, (uint32_t)pCmpstFSConfDesc, &CurrFSConfDescSz, (uint8_t)USBD_SPEED_FULL);
 8008932:	4b54      	ldr	r3, [pc, #336]	@ (8008a84 <USBD_CMPSIT_AddToConfDesc+0x23c>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	4619      	mov	r1, r3
 8008938:	2301      	movs	r3, #1
 800893a:	4a53      	ldr	r2, [pc, #332]	@ (8008a88 <USBD_CMPSIT_AddToConfDesc+0x240>)
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f000 f9af 	bl	8008ca0 <USBD_CMPSIT_HIDMouseDesc>
      break;
 8008942:	e099      	b.n	8008a78 <USBD_CMPSIT_AddToConfDesc+0x230>
      pdev->tclasslist[pdev->classId].CurrPcktSze = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800894a:	687a      	ldr	r2, [r7, #4]
 800894c:	212c      	movs	r1, #44	@ 0x2c
 800894e:	fb01 f303 	mul.w	r3, r1, r3
 8008952:	4413      	add	r3, r2
 8008954:	f503 7344 	add.w	r3, r3, #784	@ 0x310
 8008958:	2240      	movs	r2, #64	@ 0x40
 800895a:	601a      	str	r2, [r3, #0]
      idxIf = USBD_CMPSIT_FindFreeIFNbr(pdev);
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f000 f8cd 	bl	8008afc <USBD_CMPSIT_FindFreeIFNbr>
 8008962:	4603      	mov	r3, r0
 8008964:	73fb      	strb	r3, [r7, #15]
      pdev->tclasslist[pdev->classId].NumIf = 2U;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800896c:	687a      	ldr	r2, [r7, #4]
 800896e:	212c      	movs	r1, #44	@ 0x2c
 8008970:	fb01 f303 	mul.w	r3, r1, r3
 8008974:	4413      	add	r3, r2
 8008976:	f503 7342 	add.w	r3, r3, #776	@ 0x308
 800897a:	2202      	movs	r2, #2
 800897c:	601a      	str	r2, [r3, #0]
      pdev->tclasslist[pdev->classId].Ifs[0] = idxIf;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008984:	687a      	ldr	r2, [r7, #4]
 8008986:	212c      	movs	r1, #44	@ 0x2c
 8008988:	fb01 f303 	mul.w	r3, r1, r3
 800898c:	4413      	add	r3, r2
 800898e:	f503 7343 	add.w	r3, r3, #780	@ 0x30c
 8008992:	7bfa      	ldrb	r2, [r7, #15]
 8008994:	701a      	strb	r2, [r3, #0]
      pdev->tclasslist[pdev->classId].Ifs[1] = (uint8_t)(idxIf + 1U);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800899c:	7bfa      	ldrb	r2, [r7, #15]
 800899e:	3201      	adds	r2, #1
 80089a0:	b2d0      	uxtb	r0, r2
 80089a2:	687a      	ldr	r2, [r7, #4]
 80089a4:	212c      	movs	r1, #44	@ 0x2c
 80089a6:	fb01 f303 	mul.w	r3, r1, r3
 80089aa:	4413      	add	r3, r2
 80089ac:	f203 330d 	addw	r3, r3, #781	@ 0x30d
 80089b0:	4602      	mov	r2, r0
 80089b2:	701a      	strb	r2, [r3, #0]
      pdev->tclasslist[pdev->classId].NumEps = 3U;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80089ba:	687a      	ldr	r2, [r7, #4]
 80089bc:	212c      	movs	r1, #44	@ 0x2c
 80089be:	fb01 f303 	mul.w	r3, r1, r3
 80089c2:	4413      	add	r3, r2
 80089c4:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 80089c8:	2203      	movs	r2, #3
 80089ca:	601a      	str	r2, [r3, #0]
      iEp = pdev->tclasslist[pdev->classId].EpAdd[0];
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80089d2:	687a      	ldr	r2, [r7, #4]
 80089d4:	212c      	movs	r1, #44	@ 0x2c
 80089d6:	fb01 f303 	mul.w	r3, r1, r3
 80089da:	4413      	add	r3, r2
 80089dc:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	781b      	ldrb	r3, [r3, #0]
 80089e4:	73bb      	strb	r3, [r7, #14]
      USBD_CMPSIT_AssignEp(pdev, iEp, USBD_EP_TYPE_BULK, pdev->tclasslist[pdev->classId].CurrPcktSze);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80089ec:	687a      	ldr	r2, [r7, #4]
 80089ee:	212c      	movs	r1, #44	@ 0x2c
 80089f0:	fb01 f303 	mul.w	r3, r1, r3
 80089f4:	4413      	add	r3, r2
 80089f6:	f503 7344 	add.w	r3, r3, #784	@ 0x310
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	7bb9      	ldrb	r1, [r7, #14]
 80089fe:	2202      	movs	r2, #2
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f000 f8d7 	bl	8008bb4 <USBD_CMPSIT_AssignEp>
      iEp = pdev->tclasslist[pdev->classId].EpAdd[1];
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008a0c:	687a      	ldr	r2, [r7, #4]
 8008a0e:	212c      	movs	r1, #44	@ 0x2c
 8008a10:	fb01 f303 	mul.w	r3, r1, r3
 8008a14:	4413      	add	r3, r2
 8008a16:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	785b      	ldrb	r3, [r3, #1]
 8008a1e:	73bb      	strb	r3, [r7, #14]
      USBD_CMPSIT_AssignEp(pdev, iEp, USBD_EP_TYPE_BULK, pdev->tclasslist[pdev->classId].CurrPcktSze);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008a26:	687a      	ldr	r2, [r7, #4]
 8008a28:	212c      	movs	r1, #44	@ 0x2c
 8008a2a:	fb01 f303 	mul.w	r3, r1, r3
 8008a2e:	4413      	add	r3, r2
 8008a30:	f503 7344 	add.w	r3, r3, #784	@ 0x310
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	7bb9      	ldrb	r1, [r7, #14]
 8008a38:	2202      	movs	r2, #2
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f000 f8ba 	bl	8008bb4 <USBD_CMPSIT_AssignEp>
      iEp = pdev->tclasslist[pdev->classId].EpAdd[2];
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008a46:	687a      	ldr	r2, [r7, #4]
 8008a48:	212c      	movs	r1, #44	@ 0x2c
 8008a4a:	fb01 f303 	mul.w	r3, r1, r3
 8008a4e:	4413      	add	r3, r2
 8008a50:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	789b      	ldrb	r3, [r3, #2]
 8008a58:	73bb      	strb	r3, [r7, #14]
      USBD_CMPSIT_AssignEp(pdev, iEp, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008a5a:	7bb9      	ldrb	r1, [r7, #14]
 8008a5c:	2308      	movs	r3, #8
 8008a5e:	2203      	movs	r2, #3
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f000 f8a7 	bl	8008bb4 <USBD_CMPSIT_AssignEp>
      USBD_CMPSIT_CDCDesc(pdev, (uint32_t)pCmpstFSConfDesc, &CurrFSConfDescSz, (uint8_t)USBD_SPEED_FULL);
 8008a66:	4b07      	ldr	r3, [pc, #28]	@ (8008a84 <USBD_CMPSIT_AddToConfDesc+0x23c>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	4619      	mov	r1, r3
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	4a06      	ldr	r2, [pc, #24]	@ (8008a88 <USBD_CMPSIT_AddToConfDesc+0x240>)
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f000 f9e7 	bl	8008e44 <USBD_CMPSIT_CDCDesc>
      break;
 8008a76:	bf00      	nop
  }

  return (uint8_t)USBD_OK;
 8008a78:	2300      	movs	r3, #0
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3710      	adds	r7, #16
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}
 8008a82:	bf00      	nop
 8008a84:	200000a0 	.word	0x200000a0
 8008a88:	20000b5c 	.word	0x20000b5c

08008a8c <USBD_CMPSIT_GetFSCfgDesc>:
  *         return configuration descriptor for both FS and HS modes
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t  *USBD_CMPSIT_GetFSCfgDesc(uint16_t *length)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b083      	sub	sp, #12
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)CurrFSConfDescSz;
 8008a94:	4b05      	ldr	r3, [pc, #20]	@ (8008aac <USBD_CMPSIT_GetFSCfgDesc+0x20>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	b29a      	uxth	r2, r3
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	801a      	strh	r2, [r3, #0]

  return USBD_CMPSIT_FSCfgDesc;
 8008a9e:	4b04      	ldr	r3, [pc, #16]	@ (8008ab0 <USBD_CMPSIT_GetFSCfgDesc+0x24>)
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	370c      	adds	r7, #12
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aaa:	4770      	bx	lr
 8008aac:	20000b5c 	.word	0x20000b5c
 8008ab0:	20000a30 	.word	0x20000a30

08008ab4 <USBD_CMPSIT_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t  *USBD_CMPSIT_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b083      	sub	sp, #12
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)CurrFSConfDescSz;
 8008abc:	4b05      	ldr	r3, [pc, #20]	@ (8008ad4 <USBD_CMPSIT_GetOtherSpeedCfgDesc+0x20>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	b29a      	uxth	r2, r3
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	801a      	strh	r2, [r3, #0]

  return USBD_CMPSIT_FSCfgDesc;
 8008ac6:	4b04      	ldr	r3, [pc, #16]	@ (8008ad8 <USBD_CMPSIT_GetOtherSpeedCfgDesc+0x24>)
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	370c      	adds	r7, #12
 8008acc:	46bd      	mov	sp, r7
 8008ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad2:	4770      	bx	lr
 8008ad4:	20000b5c 	.word	0x20000b5c
 8008ad8:	20000a30 	.word	0x20000a30

08008adc <USBD_CMPSIT_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t  *USBD_CMPSIT_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008adc:	b480      	push	{r7}
 8008ade:	b083      	sub	sp, #12
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)(sizeof(USBD_CMPSIT_DeviceQualifierDesc));
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	220a      	movs	r2, #10
 8008ae8:	801a      	strh	r2, [r3, #0]
  return USBD_CMPSIT_DeviceQualifierDesc;
 8008aea:	4b03      	ldr	r3, [pc, #12]	@ (8008af8 <USBD_CMPSIT_GetDeviceQualifierDescriptor+0x1c>)
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	370c      	adds	r7, #12
 8008af0:	46bd      	mov	sp, r7
 8008af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af6:	4770      	bx	lr
 8008af8:	200000a4 	.word	0x200000a4

08008afc <USBD_CMPSIT_FindFreeIFNbr>:
  *         Find the first interface available slot
  * @param  pdev: device instance
  * @retval The interface number to be used
  */
static uint8_t USBD_CMPSIT_FindFreeIFNbr(USBD_HandleTypeDef *pdev)
{
 8008afc:	b480      	push	{r7}
 8008afe:	b087      	sub	sp, #28
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
  uint32_t idx = 0U;
 8008b04:	2300      	movs	r3, #0
 8008b06:	617b      	str	r3, [r7, #20]

  /* Unroll all already activated classes */
  for (uint32_t i = 0U; i < pdev->NumClasses; i++)
 8008b08:	2300      	movs	r3, #0
 8008b0a:	613b      	str	r3, [r7, #16]
 8008b0c:	e017      	b.n	8008b3e <USBD_CMPSIT_FindFreeIFNbr+0x42>
  {
    /* Unroll each class interfaces */
    for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 8008b0e:	2300      	movs	r3, #0
 8008b10:	60fb      	str	r3, [r7, #12]
 8008b12:	e005      	b.n	8008b20 <USBD_CMPSIT_FindFreeIFNbr+0x24>
    {
      /* Increment the interface counter index */
      idx++;
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	3301      	adds	r3, #1
 8008b18:	617b      	str	r3, [r7, #20]
    for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	3301      	adds	r3, #1
 8008b1e:	60fb      	str	r3, [r7, #12]
 8008b20:	687a      	ldr	r2, [r7, #4]
 8008b22:	693b      	ldr	r3, [r7, #16]
 8008b24:	212c      	movs	r1, #44	@ 0x2c
 8008b26:	fb01 f303 	mul.w	r3, r1, r3
 8008b2a:	4413      	add	r3, r2
 8008b2c:	f503 7342 	add.w	r3, r3, #776	@ 0x308
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	68fa      	ldr	r2, [r7, #12]
 8008b34:	429a      	cmp	r2, r3
 8008b36:	d3ed      	bcc.n	8008b14 <USBD_CMPSIT_FindFreeIFNbr+0x18>
  for (uint32_t i = 0U; i < pdev->NumClasses; i++)
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	3301      	adds	r3, #1
 8008b3c:	613b      	str	r3, [r7, #16]
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f8d3 32e4 	ldr.w	r3, [r3, #740]	@ 0x2e4
 8008b44:	693a      	ldr	r2, [r7, #16]
 8008b46:	429a      	cmp	r2, r3
 8008b48:	d3e1      	bcc.n	8008b0e <USBD_CMPSIT_FindFreeIFNbr+0x12>
    }
  }

  /* Return the first available interface slot */
  return (uint8_t)idx;
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	b2db      	uxtb	r3, r3
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	371c      	adds	r7, #28
 8008b52:	46bd      	mov	sp, r7
 8008b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b58:	4770      	bx	lr

08008b5a <USBD_CMPSIT_AddConfDesc>:
  *         Add a new class to the configuration descriptor
  * @param  pdev: device instance
  * @retval none
  */
static void  USBD_CMPSIT_AddConfDesc(uint32_t Conf, __IO uint32_t *pSze)
{
 8008b5a:	b480      	push	{r7}
 8008b5c:	b085      	sub	sp, #20
 8008b5e:	af00      	add	r7, sp, #0
 8008b60:	6078      	str	r0, [r7, #4]
 8008b62:	6039      	str	r1, [r7, #0]
  /* Intermediate variable to comply with MISRA-C Rule 11.3 */
  USBD_ConfigDescTypeDef *ptr = (USBD_ConfigDescTypeDef *)Conf;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	60fb      	str	r3, [r7, #12]

  ptr->bLength = (uint8_t)sizeof(USBD_ConfigDescTypeDef);
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	2209      	movs	r2, #9
 8008b6c:	701a      	strb	r2, [r3, #0]
  ptr->bDescriptorType = USB_DESC_TYPE_CONFIGURATION;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	2202      	movs	r2, #2
 8008b72:	705a      	strb	r2, [r3, #1]
  ptr->wTotalLength = 0U;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	2200      	movs	r2, #0
 8008b78:	709a      	strb	r2, [r3, #2]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	70da      	strb	r2, [r3, #3]
  ptr->bNumInterfaces = 0U;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	2200      	movs	r2, #0
 8008b82:	711a      	strb	r2, [r3, #4]
  ptr->bConfigurationValue = 1U;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	2201      	movs	r2, #1
 8008b88:	715a      	strb	r2, [r3, #5]
  ptr->iConfiguration = USBD_CONFIG_STR_DESC_IDX;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	2204      	movs	r2, #4
 8008b8e:	719a      	strb	r2, [r3, #6]

#if (USBD_SELF_POWERED == 1U)
  ptr->bmAttributes = 0xC0U;   /* bmAttributes: Self Powered according to user configuration */
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	22c0      	movs	r2, #192	@ 0xc0
 8008b94:	71da      	strb	r2, [r3, #7]
#else
  ptr->bmAttributes = 0x80U;   /* bmAttributes: Bus Powered according to user configuration */
#endif /* USBD_SELF_POWERED */

  ptr->bMaxPower = USBD_MAX_POWER;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	2232      	movs	r2, #50	@ 0x32
 8008b9a:	721a      	strb	r2, [r3, #8]

  *pSze += sizeof(USBD_ConfigDescTypeDef);
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f103 0209 	add.w	r2, r3, #9
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	601a      	str	r2, [r3, #0]
}
 8008ba8:	bf00      	nop
 8008baa:	3714      	adds	r7, #20
 8008bac:	46bd      	mov	sp, r7
 8008bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb2:	4770      	bx	lr

08008bb4 <USBD_CMPSIT_AssignEp>:
  * @param  Type: Endpoint type
  * @param  Sze: Endpoint max packet size
  * @retval none
  */
static void  USBD_CMPSIT_AssignEp(USBD_HandleTypeDef *pdev, uint8_t Add, uint8_t Type, uint32_t Sze)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b087      	sub	sp, #28
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	60f8      	str	r0, [r7, #12]
 8008bbc:	607b      	str	r3, [r7, #4]
 8008bbe:	460b      	mov	r3, r1
 8008bc0:	72fb      	strb	r3, [r7, #11]
 8008bc2:	4613      	mov	r3, r2
 8008bc4:	72bb      	strb	r3, [r7, #10]
  uint32_t idx = 0U;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	617b      	str	r3, [r7, #20]

  /* Find the first available endpoint slot */
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 8008bca:	e002      	b.n	8008bd2 <USBD_CMPSIT_AssignEp+0x1e>
          ((pdev->tclasslist[pdev->classId].Eps[idx].is_used) != 0U)))
  {
    /* Increment the index */
    idx++;
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	3301      	adds	r3, #1
 8008bd0:	617b      	str	r3, [r7, #20]
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008bd8:	68fa      	ldr	r2, [r7, #12]
 8008bda:	212c      	movs	r1, #44	@ 0x2c
 8008bdc:	fb01 f303 	mul.w	r3, r1, r3
 8008be0:	4413      	add	r3, r2
 8008be2:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	697a      	ldr	r2, [r7, #20]
 8008bea:	429a      	cmp	r2, r3
 8008bec:	d210      	bcs.n	8008c10 <USBD_CMPSIT_AssignEp+0x5c>
          ((pdev->tclasslist[pdev->classId].Eps[idx].is_used) != 0U)))
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 8008bf4:	68f9      	ldr	r1, [r7, #12]
 8008bf6:	4613      	mov	r3, r2
 8008bf8:	009b      	lsls	r3, r3, #2
 8008bfa:	4413      	add	r3, r2
 8008bfc:	005b      	lsls	r3, r3, #1
 8008bfe:	4413      	add	r3, r2
 8008c00:	697a      	ldr	r2, [r7, #20]
 8008c02:	4413      	add	r3, r2
 8008c04:	33be      	adds	r3, #190	@ 0xbe
 8008c06:	009b      	lsls	r3, r3, #2
 8008c08:	440b      	add	r3, r1
 8008c0a:	78db      	ldrb	r3, [r3, #3]
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d1dd      	bne.n	8008bcc <USBD_CMPSIT_AssignEp+0x18>
  }

  /* Configure the endpoint */
  pdev->tclasslist[pdev->classId].Eps[idx].add = Add;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 8008c16:	68f9      	ldr	r1, [r7, #12]
 8008c18:	4613      	mov	r3, r2
 8008c1a:	009b      	lsls	r3, r3, #2
 8008c1c:	4413      	add	r3, r2
 8008c1e:	005b      	lsls	r3, r3, #1
 8008c20:	4413      	add	r3, r2
 8008c22:	697a      	ldr	r2, [r7, #20]
 8008c24:	4413      	add	r3, r2
 8008c26:	33be      	adds	r3, #190	@ 0xbe
 8008c28:	7afa      	ldrb	r2, [r7, #11]
 8008c2a:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
  pdev->tclasslist[pdev->classId].Eps[idx].type = Type;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 8008c34:	68f9      	ldr	r1, [r7, #12]
 8008c36:	4613      	mov	r3, r2
 8008c38:	009b      	lsls	r3, r3, #2
 8008c3a:	4413      	add	r3, r2
 8008c3c:	005b      	lsls	r3, r3, #1
 8008c3e:	4413      	add	r3, r2
 8008c40:	697a      	ldr	r2, [r7, #20]
 8008c42:	4413      	add	r3, r2
 8008c44:	33be      	adds	r3, #190	@ 0xbe
 8008c46:	009b      	lsls	r3, r3, #2
 8008c48:	440b      	add	r3, r1
 8008c4a:	7aba      	ldrb	r2, [r7, #10]
 8008c4c:	705a      	strb	r2, [r3, #1]
  pdev->tclasslist[pdev->classId].Eps[idx].size = (uint8_t)Sze;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	b2d8      	uxtb	r0, r3
 8008c58:	68f9      	ldr	r1, [r7, #12]
 8008c5a:	4613      	mov	r3, r2
 8008c5c:	009b      	lsls	r3, r3, #2
 8008c5e:	4413      	add	r3, r2
 8008c60:	005b      	lsls	r3, r3, #1
 8008c62:	4413      	add	r3, r2
 8008c64:	697a      	ldr	r2, [r7, #20]
 8008c66:	4413      	add	r3, r2
 8008c68:	33be      	adds	r3, #190	@ 0xbe
 8008c6a:	009b      	lsls	r3, r3, #2
 8008c6c:	440b      	add	r3, r1
 8008c6e:	4602      	mov	r2, r0
 8008c70:	709a      	strb	r2, [r3, #2]
  pdev->tclasslist[pdev->classId].Eps[idx].is_used = 1U;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 8008c78:	68f9      	ldr	r1, [r7, #12]
 8008c7a:	4613      	mov	r3, r2
 8008c7c:	009b      	lsls	r3, r3, #2
 8008c7e:	4413      	add	r3, r2
 8008c80:	005b      	lsls	r3, r3, #1
 8008c82:	4413      	add	r3, r2
 8008c84:	697a      	ldr	r2, [r7, #20]
 8008c86:	4413      	add	r3, r2
 8008c88:	33be      	adds	r3, #190	@ 0xbe
 8008c8a:	009b      	lsls	r3, r3, #2
 8008c8c:	440b      	add	r3, r1
 8008c8e:	2201      	movs	r2, #1
 8008c90:	70da      	strb	r2, [r3, #3]
}
 8008c92:	bf00      	nop
 8008c94:	371c      	adds	r7, #28
 8008c96:	46bd      	mov	sp, r7
 8008c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9c:	4770      	bx	lr
	...

08008ca0 <USBD_CMPSIT_HIDMouseDesc>:
  * @param  Sze: pointer to the current configuration descriptor size
  * @retval None
  */
static void  USBD_CMPSIT_HIDMouseDesc(USBD_HandleTypeDef *pdev, uint32_t pConf,
                                      __IO uint32_t *Sze, uint8_t speed)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b085      	sub	sp, #20
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	60f8      	str	r0, [r7, #12]
 8008ca8:	60b9      	str	r1, [r7, #8]
 8008caa:	607a      	str	r2, [r7, #4]
 8008cac:	70fb      	strb	r3, [r7, #3]
  static USBD_IfDescTypeDef *pIfDesc;
  static USBD_EpDescTypeDef *pEpDesc;
  static USBD_HIDDescTypeDef *pHidMouseDesc;

  /* Append HID Interface descriptor to Configuration descriptor */
  __USBD_CMPSIT_SET_IF(pdev->tclasslist[pdev->classId].Ifs[0], 0U, \
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681a      	ldr	r2, [r3, #0]
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	4413      	add	r3, r2
 8008cb6:	461a      	mov	r2, r3
 8008cb8:	4b5f      	ldr	r3, [pc, #380]	@ (8008e38 <USBD_CMPSIT_HIDMouseDesc+0x198>)
 8008cba:	601a      	str	r2, [r3, #0]
 8008cbc:	4b5e      	ldr	r3, [pc, #376]	@ (8008e38 <USBD_CMPSIT_HIDMouseDesc+0x198>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	2209      	movs	r2, #9
 8008cc2:	701a      	strb	r2, [r3, #0]
 8008cc4:	4b5c      	ldr	r3, [pc, #368]	@ (8008e38 <USBD_CMPSIT_HIDMouseDesc+0x198>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	2204      	movs	r2, #4
 8008cca:	705a      	strb	r2, [r3, #1]
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 8008cd2:	4b59      	ldr	r3, [pc, #356]	@ (8008e38 <USBD_CMPSIT_HIDMouseDesc+0x198>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	68f9      	ldr	r1, [r7, #12]
 8008cd8:	202c      	movs	r0, #44	@ 0x2c
 8008cda:	fb00 f202 	mul.w	r2, r0, r2
 8008cde:	440a      	add	r2, r1
 8008ce0:	f502 7243 	add.w	r2, r2, #780	@ 0x30c
 8008ce4:	7812      	ldrb	r2, [r2, #0]
 8008ce6:	709a      	strb	r2, [r3, #2]
 8008ce8:	4b53      	ldr	r3, [pc, #332]	@ (8008e38 <USBD_CMPSIT_HIDMouseDesc+0x198>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	2200      	movs	r2, #0
 8008cee:	70da      	strb	r2, [r3, #3]
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008cf6:	68fa      	ldr	r2, [r7, #12]
 8008cf8:	212c      	movs	r1, #44	@ 0x2c
 8008cfa:	fb01 f303 	mul.w	r3, r1, r3
 8008cfe:	4413      	add	r3, r2
 8008d00:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 8008d04:	681a      	ldr	r2, [r3, #0]
 8008d06:	4b4c      	ldr	r3, [pc, #304]	@ (8008e38 <USBD_CMPSIT_HIDMouseDesc+0x198>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	b2d2      	uxtb	r2, r2
 8008d0c:	711a      	strb	r2, [r3, #4]
 8008d0e:	4b4a      	ldr	r3, [pc, #296]	@ (8008e38 <USBD_CMPSIT_HIDMouseDesc+0x198>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	2203      	movs	r2, #3
 8008d14:	715a      	strb	r2, [r3, #5]
 8008d16:	4b48      	ldr	r3, [pc, #288]	@ (8008e38 <USBD_CMPSIT_HIDMouseDesc+0x198>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	2201      	movs	r2, #1
 8008d1c:	719a      	strb	r2, [r3, #6]
 8008d1e:	4b46      	ldr	r3, [pc, #280]	@ (8008e38 <USBD_CMPSIT_HIDMouseDesc+0x198>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	2202      	movs	r2, #2
 8008d24:	71da      	strb	r2, [r3, #7]
 8008d26:	4b44      	ldr	r3, [pc, #272]	@ (8008e38 <USBD_CMPSIT_HIDMouseDesc+0x198>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	721a      	strb	r2, [r3, #8]
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f103 0209 	add.w	r2, r3, #9
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	601a      	str	r2, [r3, #0]
                       (uint8_t)(pdev->tclasslist[pdev->classId].NumEps), 0x03U, 0x01U, 0x02U, 0U);

  /* Append HID Functional descriptor to Configuration descriptor */
  pHidMouseDesc = ((USBD_HIDDescTypeDef *)(pConf + *Sze));
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681a      	ldr	r2, [r3, #0]
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	4413      	add	r3, r2
 8008d42:	461a      	mov	r2, r3
 8008d44:	4b3d      	ldr	r3, [pc, #244]	@ (8008e3c <USBD_CMPSIT_HIDMouseDesc+0x19c>)
 8008d46:	601a      	str	r2, [r3, #0]
  pHidMouseDesc->bLength = (uint8_t)sizeof(USBD_HIDDescTypeDef);
 8008d48:	4b3c      	ldr	r3, [pc, #240]	@ (8008e3c <USBD_CMPSIT_HIDMouseDesc+0x19c>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	2209      	movs	r2, #9
 8008d4e:	701a      	strb	r2, [r3, #0]
  pHidMouseDesc->bDescriptorType = HID_DESCRIPTOR_TYPE;
 8008d50:	4b3a      	ldr	r3, [pc, #232]	@ (8008e3c <USBD_CMPSIT_HIDMouseDesc+0x19c>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	2221      	movs	r2, #33	@ 0x21
 8008d56:	705a      	strb	r2, [r3, #1]
  pHidMouseDesc->bcdHID = 0x0111U;
 8008d58:	4b38      	ldr	r3, [pc, #224]	@ (8008e3c <USBD_CMPSIT_HIDMouseDesc+0x19c>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	f042 0211 	orr.w	r2, r2, #17
 8008d62:	709a      	strb	r2, [r3, #2]
 8008d64:	2200      	movs	r2, #0
 8008d66:	f042 0201 	orr.w	r2, r2, #1
 8008d6a:	70da      	strb	r2, [r3, #3]
  pHidMouseDesc->bCountryCode = 0x00U;
 8008d6c:	4b33      	ldr	r3, [pc, #204]	@ (8008e3c <USBD_CMPSIT_HIDMouseDesc+0x19c>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	2200      	movs	r2, #0
 8008d72:	711a      	strb	r2, [r3, #4]
  pHidMouseDesc->bNumDescriptors = 0x01U;
 8008d74:	4b31      	ldr	r3, [pc, #196]	@ (8008e3c <USBD_CMPSIT_HIDMouseDesc+0x19c>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	2201      	movs	r2, #1
 8008d7a:	715a      	strb	r2, [r3, #5]
  pHidMouseDesc->bHIDDescriptorType = 0x22U;
 8008d7c:	4b2f      	ldr	r3, [pc, #188]	@ (8008e3c <USBD_CMPSIT_HIDMouseDesc+0x19c>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	2222      	movs	r2, #34	@ 0x22
 8008d82:	719a      	strb	r2, [r3, #6]
  pHidMouseDesc->wItemLength = HID_MOUSE_REPORT_DESC_SIZE;
 8008d84:	4b2d      	ldr	r3, [pc, #180]	@ (8008e3c <USBD_CMPSIT_HIDMouseDesc+0x19c>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	f042 024a 	orr.w	r2, r2, #74	@ 0x4a
 8008d8e:	71da      	strb	r2, [r3, #7]
 8008d90:	2200      	movs	r2, #0
 8008d92:	721a      	strb	r2, [r3, #8]
  *Sze += (uint32_t)sizeof(USBD_HIDDescTypeDef);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f103 0209 	add.w	r2, r3, #9
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	601a      	str	r2, [r3, #0]

  /* Append Endpoint descriptor to Configuration descriptor */
  __USBD_CMPSIT_SET_EP(pdev->tclasslist[pdev->classId].Eps[0].add, USBD_EP_TYPE_INTR, HID_EPIN_SIZE, \
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681a      	ldr	r2, [r3, #0]
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	4413      	add	r3, r2
 8008da8:	461a      	mov	r2, r3
 8008daa:	4b25      	ldr	r3, [pc, #148]	@ (8008e40 <USBD_CMPSIT_HIDMouseDesc+0x1a0>)
 8008dac:	601a      	str	r2, [r3, #0]
 8008dae:	4b24      	ldr	r3, [pc, #144]	@ (8008e40 <USBD_CMPSIT_HIDMouseDesc+0x1a0>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	2207      	movs	r2, #7
 8008db4:	701a      	strb	r2, [r3, #0]
 8008db6:	4b22      	ldr	r3, [pc, #136]	@ (8008e40 <USBD_CMPSIT_HIDMouseDesc+0x1a0>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	2205      	movs	r2, #5
 8008dbc:	705a      	strb	r2, [r3, #1]
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 8008dc4:	4b1e      	ldr	r3, [pc, #120]	@ (8008e40 <USBD_CMPSIT_HIDMouseDesc+0x1a0>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	68f9      	ldr	r1, [r7, #12]
 8008dca:	202c      	movs	r0, #44	@ 0x2c
 8008dcc:	fb00 f202 	mul.w	r2, r0, r2
 8008dd0:	440a      	add	r2, r1
 8008dd2:	f502 723e 	add.w	r2, r2, #760	@ 0x2f8
 8008dd6:	7812      	ldrb	r2, [r2, #0]
 8008dd8:	709a      	strb	r2, [r3, #2]
 8008dda:	4b19      	ldr	r3, [pc, #100]	@ (8008e40 <USBD_CMPSIT_HIDMouseDesc+0x1a0>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	2203      	movs	r2, #3
 8008de0:	70da      	strb	r2, [r3, #3]
 8008de2:	4b17      	ldr	r3, [pc, #92]	@ (8008e40 <USBD_CMPSIT_HIDMouseDesc+0x1a0>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	2200      	movs	r2, #0
 8008de8:	f042 0204 	orr.w	r2, r2, #4
 8008dec:	711a      	strb	r2, [r3, #4]
 8008dee:	2200      	movs	r2, #0
 8008df0:	715a      	strb	r2, [r3, #5]
 8008df2:	78fb      	ldrb	r3, [r7, #3]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d104      	bne.n	8008e02 <USBD_CMPSIT_HIDMouseDesc+0x162>
 8008df8:	4b11      	ldr	r3, [pc, #68]	@ (8008e40 <USBD_CMPSIT_HIDMouseDesc+0x1a0>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	2207      	movs	r2, #7
 8008dfe:	719a      	strb	r2, [r3, #6]
 8008e00:	e003      	b.n	8008e0a <USBD_CMPSIT_HIDMouseDesc+0x16a>
 8008e02:	4b0f      	ldr	r3, [pc, #60]	@ (8008e40 <USBD_CMPSIT_HIDMouseDesc+0x1a0>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	220a      	movs	r2, #10
 8008e08:	719a      	strb	r2, [r3, #6]
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	1dda      	adds	r2, r3, #7
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	601a      	str	r2, [r3, #0]
                       HID_HS_BINTERVAL, HID_FS_BINTERVAL);

  /* Update Config Descriptor and IAD descriptor */
  ((USBD_ConfigDescTypeDef *)pConf)->bNumInterfaces += 1U;
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	791a      	ldrb	r2, [r3, #4]
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	3201      	adds	r2, #1
 8008e1c:	b2d2      	uxtb	r2, r2
 8008e1e:	711a      	strb	r2, [r3, #4]
  ((USBD_ConfigDescTypeDef *)pConf)->wTotalLength  = (uint16_t)(*Sze);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681a      	ldr	r2, [r3, #0]
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	b292      	uxth	r2, r2
 8008e28:	805a      	strh	r2, [r3, #2]
}
 8008e2a:	bf00      	nop
 8008e2c:	3714      	adds	r7, #20
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e34:	4770      	bx	lr
 8008e36:	bf00      	nop
 8008e38:	20000b60 	.word	0x20000b60
 8008e3c:	20000b64 	.word	0x20000b64
 8008e40:	20000b68 	.word	0x20000b68

08008e44 <USBD_CMPSIT_CDCDesc>:
  * @param  pConf: Configuration descriptor pointer
  * @param  Sze: pointer to the current configuration descriptor size
  * @retval None
  */
static void  USBD_CMPSIT_CDCDesc(USBD_HandleTypeDef *pdev, uint32_t pConf, __IO uint32_t *Sze, uint8_t speed)
{
 8008e44:	b480      	push	{r7}
 8008e46:	b085      	sub	sp, #20
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	60f8      	str	r0, [r7, #12]
 8008e4c:	60b9      	str	r1, [r7, #8]
 8008e4e:	607a      	str	r2, [r7, #4]
 8008e50:	70fb      	strb	r3, [r7, #3]
#if USBD_COMPOSITE_USE_IAD == 1
  static USBD_IadDescTypeDef              *pIadDesc;
#endif /* USBD_COMPOSITE_USE_IAD == 1 */

#if USBD_COMPOSITE_USE_IAD == 1
  pIadDesc                          = ((USBD_IadDescTypeDef *)(pConf + *Sze));
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681a      	ldr	r2, [r3, #0]
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	4413      	add	r3, r2
 8008e5a:	461a      	mov	r2, r3
 8008e5c:	4b9c      	ldr	r3, [pc, #624]	@ (80090d0 <USBD_CMPSIT_CDCDesc+0x28c>)
 8008e5e:	601a      	str	r2, [r3, #0]
  pIadDesc->bLength                 = (uint8_t)sizeof(USBD_IadDescTypeDef);
 8008e60:	4b9b      	ldr	r3, [pc, #620]	@ (80090d0 <USBD_CMPSIT_CDCDesc+0x28c>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	2208      	movs	r2, #8
 8008e66:	701a      	strb	r2, [r3, #0]
  pIadDesc->bDescriptorType         = USB_DESC_TYPE_IAD; /* IAD descriptor */
 8008e68:	4b99      	ldr	r3, [pc, #612]	@ (80090d0 <USBD_CMPSIT_CDCDesc+0x28c>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	220b      	movs	r2, #11
 8008e6e:	705a      	strb	r2, [r3, #1]
  pIadDesc->bFirstInterface         = pdev->tclasslist[pdev->classId].Ifs[0];
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 8008e76:	4b96      	ldr	r3, [pc, #600]	@ (80090d0 <USBD_CMPSIT_CDCDesc+0x28c>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	68f9      	ldr	r1, [r7, #12]
 8008e7c:	202c      	movs	r0, #44	@ 0x2c
 8008e7e:	fb00 f202 	mul.w	r2, r0, r2
 8008e82:	440a      	add	r2, r1
 8008e84:	f502 7243 	add.w	r2, r2, #780	@ 0x30c
 8008e88:	7812      	ldrb	r2, [r2, #0]
 8008e8a:	709a      	strb	r2, [r3, #2]
  pIadDesc->bInterfaceCount         = 2U;    /* 2 interfaces */
 8008e8c:	4b90      	ldr	r3, [pc, #576]	@ (80090d0 <USBD_CMPSIT_CDCDesc+0x28c>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	2202      	movs	r2, #2
 8008e92:	70da      	strb	r2, [r3, #3]
  pIadDesc->bFunctionClass          = 0x02U;
 8008e94:	4b8e      	ldr	r3, [pc, #568]	@ (80090d0 <USBD_CMPSIT_CDCDesc+0x28c>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	2202      	movs	r2, #2
 8008e9a:	711a      	strb	r2, [r3, #4]
  pIadDesc->bFunctionSubClass       = 0x02U;
 8008e9c:	4b8c      	ldr	r3, [pc, #560]	@ (80090d0 <USBD_CMPSIT_CDCDesc+0x28c>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	2202      	movs	r2, #2
 8008ea2:	715a      	strb	r2, [r3, #5]
  pIadDesc->bFunctionProtocol       = 0x01U;
 8008ea4:	4b8a      	ldr	r3, [pc, #552]	@ (80090d0 <USBD_CMPSIT_CDCDesc+0x28c>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	2201      	movs	r2, #1
 8008eaa:	719a      	strb	r2, [r3, #6]
  pIadDesc->iFunction               = 0U; /* String Index */
 8008eac:	4b88      	ldr	r3, [pc, #544]	@ (80090d0 <USBD_CMPSIT_CDCDesc+0x28c>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	71da      	strb	r2, [r3, #7]
  *Sze                              += (uint32_t)sizeof(USBD_IadDescTypeDef);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f103 0208 	add.w	r2, r3, #8
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	601a      	str	r2, [r3, #0]
#endif /* USBD_COMPOSITE_USE_IAD == 1 */

  /* Control Interface Descriptor */
  __USBD_CMPSIT_SET_IF(pdev->tclasslist[pdev->classId].Ifs[0], 0U, 1U, 0x02, 0x02U, 0x01U, 0U);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681a      	ldr	r2, [r3, #0]
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	4413      	add	r3, r2
 8008ec8:	461a      	mov	r2, r3
 8008eca:	4b82      	ldr	r3, [pc, #520]	@ (80090d4 <USBD_CMPSIT_CDCDesc+0x290>)
 8008ecc:	601a      	str	r2, [r3, #0]
 8008ece:	4b81      	ldr	r3, [pc, #516]	@ (80090d4 <USBD_CMPSIT_CDCDesc+0x290>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	2209      	movs	r2, #9
 8008ed4:	701a      	strb	r2, [r3, #0]
 8008ed6:	4b7f      	ldr	r3, [pc, #508]	@ (80090d4 <USBD_CMPSIT_CDCDesc+0x290>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	2204      	movs	r2, #4
 8008edc:	705a      	strb	r2, [r3, #1]
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 8008ee4:	4b7b      	ldr	r3, [pc, #492]	@ (80090d4 <USBD_CMPSIT_CDCDesc+0x290>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	68f9      	ldr	r1, [r7, #12]
 8008eea:	202c      	movs	r0, #44	@ 0x2c
 8008eec:	fb00 f202 	mul.w	r2, r0, r2
 8008ef0:	440a      	add	r2, r1
 8008ef2:	f502 7243 	add.w	r2, r2, #780	@ 0x30c
 8008ef6:	7812      	ldrb	r2, [r2, #0]
 8008ef8:	709a      	strb	r2, [r3, #2]
 8008efa:	4b76      	ldr	r3, [pc, #472]	@ (80090d4 <USBD_CMPSIT_CDCDesc+0x290>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	2200      	movs	r2, #0
 8008f00:	70da      	strb	r2, [r3, #3]
 8008f02:	4b74      	ldr	r3, [pc, #464]	@ (80090d4 <USBD_CMPSIT_CDCDesc+0x290>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	2201      	movs	r2, #1
 8008f08:	711a      	strb	r2, [r3, #4]
 8008f0a:	4b72      	ldr	r3, [pc, #456]	@ (80090d4 <USBD_CMPSIT_CDCDesc+0x290>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	2202      	movs	r2, #2
 8008f10:	715a      	strb	r2, [r3, #5]
 8008f12:	4b70      	ldr	r3, [pc, #448]	@ (80090d4 <USBD_CMPSIT_CDCDesc+0x290>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	2202      	movs	r2, #2
 8008f18:	719a      	strb	r2, [r3, #6]
 8008f1a:	4b6e      	ldr	r3, [pc, #440]	@ (80090d4 <USBD_CMPSIT_CDCDesc+0x290>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	2201      	movs	r2, #1
 8008f20:	71da      	strb	r2, [r3, #7]
 8008f22:	4b6c      	ldr	r3, [pc, #432]	@ (80090d4 <USBD_CMPSIT_CDCDesc+0x290>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	2200      	movs	r2, #0
 8008f28:	721a      	strb	r2, [r3, #8]
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f103 0209 	add.w	r2, r3, #9
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	601a      	str	r2, [r3, #0]

  /* Control interface headers */
  pHeadDesc = ((USBD_CDCHeaderFuncDescTypeDef *)((uint32_t)pConf + *Sze));
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681a      	ldr	r2, [r3, #0]
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	4413      	add	r3, r2
 8008f3e:	461a      	mov	r2, r3
 8008f40:	4b65      	ldr	r3, [pc, #404]	@ (80090d8 <USBD_CMPSIT_CDCDesc+0x294>)
 8008f42:	601a      	str	r2, [r3, #0]
  /* Header Functional Descriptor*/
  pHeadDesc->bLength = 0x05U;
 8008f44:	4b64      	ldr	r3, [pc, #400]	@ (80090d8 <USBD_CMPSIT_CDCDesc+0x294>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	2205      	movs	r2, #5
 8008f4a:	701a      	strb	r2, [r3, #0]
  pHeadDesc->bDescriptorType = 0x24U;
 8008f4c:	4b62      	ldr	r3, [pc, #392]	@ (80090d8 <USBD_CMPSIT_CDCDesc+0x294>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	2224      	movs	r2, #36	@ 0x24
 8008f52:	705a      	strb	r2, [r3, #1]
  pHeadDesc->bDescriptorSubtype = 0x00U;
 8008f54:	4b60      	ldr	r3, [pc, #384]	@ (80090d8 <USBD_CMPSIT_CDCDesc+0x294>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	709a      	strb	r2, [r3, #2]
  pHeadDesc->bcdCDC = 0x0110U;
 8008f5c:	4b5e      	ldr	r3, [pc, #376]	@ (80090d8 <USBD_CMPSIT_CDCDesc+0x294>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	2200      	movs	r2, #0
 8008f62:	f042 0210 	orr.w	r2, r2, #16
 8008f66:	70da      	strb	r2, [r3, #3]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	f042 0201 	orr.w	r2, r2, #1
 8008f6e:	711a      	strb	r2, [r3, #4]
  *Sze += (uint32_t)sizeof(USBD_CDCHeaderFuncDescTypeDef);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	1d5a      	adds	r2, r3, #5
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	601a      	str	r2, [r3, #0]

  /* Call Management Functional Descriptor */
  pCallMgmDesc = ((USBD_CDCCallMgmFuncDescTypeDef *)((uint32_t)pConf + *Sze));
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681a      	ldr	r2, [r3, #0]
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	4413      	add	r3, r2
 8008f82:	461a      	mov	r2, r3
 8008f84:	4b55      	ldr	r3, [pc, #340]	@ (80090dc <USBD_CMPSIT_CDCDesc+0x298>)
 8008f86:	601a      	str	r2, [r3, #0]
  pCallMgmDesc->bLength = 0x05U;
 8008f88:	4b54      	ldr	r3, [pc, #336]	@ (80090dc <USBD_CMPSIT_CDCDesc+0x298>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	2205      	movs	r2, #5
 8008f8e:	701a      	strb	r2, [r3, #0]
  pCallMgmDesc->bDescriptorType = 0x24U;
 8008f90:	4b52      	ldr	r3, [pc, #328]	@ (80090dc <USBD_CMPSIT_CDCDesc+0x298>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	2224      	movs	r2, #36	@ 0x24
 8008f96:	705a      	strb	r2, [r3, #1]
  pCallMgmDesc->bDescriptorSubtype = 0x01U;
 8008f98:	4b50      	ldr	r3, [pc, #320]	@ (80090dc <USBD_CMPSIT_CDCDesc+0x298>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	2201      	movs	r2, #1
 8008f9e:	709a      	strb	r2, [r3, #2]
  pCallMgmDesc->bmCapabilities = 0x00U;
 8008fa0:	4b4e      	ldr	r3, [pc, #312]	@ (80090dc <USBD_CMPSIT_CDCDesc+0x298>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	70da      	strb	r2, [r3, #3]
  pCallMgmDesc->bDataInterface = pdev->tclasslist[pdev->classId].Ifs[1];
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 8008fae:	4b4b      	ldr	r3, [pc, #300]	@ (80090dc <USBD_CMPSIT_CDCDesc+0x298>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	68f9      	ldr	r1, [r7, #12]
 8008fb4:	202c      	movs	r0, #44	@ 0x2c
 8008fb6:	fb00 f202 	mul.w	r2, r0, r2
 8008fba:	440a      	add	r2, r1
 8008fbc:	f202 320d 	addw	r2, r2, #781	@ 0x30d
 8008fc0:	7812      	ldrb	r2, [r2, #0]
 8008fc2:	711a      	strb	r2, [r3, #4]
  *Sze += (uint32_t)sizeof(USBD_CDCCallMgmFuncDescTypeDef);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	1d5a      	adds	r2, r3, #5
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	601a      	str	r2, [r3, #0]

  /* ACM Functional Descriptor*/
  pACMDesc = ((USBD_CDCACMFuncDescTypeDef *)((uint32_t)pConf + *Sze));
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681a      	ldr	r2, [r3, #0]
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	4413      	add	r3, r2
 8008fd6:	461a      	mov	r2, r3
 8008fd8:	4b41      	ldr	r3, [pc, #260]	@ (80090e0 <USBD_CMPSIT_CDCDesc+0x29c>)
 8008fda:	601a      	str	r2, [r3, #0]
  pACMDesc->bLength = 0x04U;
 8008fdc:	4b40      	ldr	r3, [pc, #256]	@ (80090e0 <USBD_CMPSIT_CDCDesc+0x29c>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	2204      	movs	r2, #4
 8008fe2:	701a      	strb	r2, [r3, #0]
  pACMDesc->bDescriptorType = 0x24U;
 8008fe4:	4b3e      	ldr	r3, [pc, #248]	@ (80090e0 <USBD_CMPSIT_CDCDesc+0x29c>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	2224      	movs	r2, #36	@ 0x24
 8008fea:	705a      	strb	r2, [r3, #1]
  pACMDesc->bDescriptorSubtype = 0x02U;
 8008fec:	4b3c      	ldr	r3, [pc, #240]	@ (80090e0 <USBD_CMPSIT_CDCDesc+0x29c>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	2202      	movs	r2, #2
 8008ff2:	709a      	strb	r2, [r3, #2]
  pACMDesc->bmCapabilities = 0x02U;
 8008ff4:	4b3a      	ldr	r3, [pc, #232]	@ (80090e0 <USBD_CMPSIT_CDCDesc+0x29c>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	2202      	movs	r2, #2
 8008ffa:	70da      	strb	r2, [r3, #3]
  *Sze += (uint32_t)sizeof(USBD_CDCACMFuncDescTypeDef);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	1d1a      	adds	r2, r3, #4
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	601a      	str	r2, [r3, #0]

  /* Union Functional Descriptor*/
  pUnionDesc = ((USBD_CDCUnionFuncDescTypeDef *)((uint32_t)pConf + *Sze));
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681a      	ldr	r2, [r3, #0]
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	4413      	add	r3, r2
 800900e:	461a      	mov	r2, r3
 8009010:	4b34      	ldr	r3, [pc, #208]	@ (80090e4 <USBD_CMPSIT_CDCDesc+0x2a0>)
 8009012:	601a      	str	r2, [r3, #0]
  pUnionDesc->bLength = 0x05U;
 8009014:	4b33      	ldr	r3, [pc, #204]	@ (80090e4 <USBD_CMPSIT_CDCDesc+0x2a0>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	2205      	movs	r2, #5
 800901a:	701a      	strb	r2, [r3, #0]
  pUnionDesc->bDescriptorType = 0x24U;
 800901c:	4b31      	ldr	r3, [pc, #196]	@ (80090e4 <USBD_CMPSIT_CDCDesc+0x2a0>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	2224      	movs	r2, #36	@ 0x24
 8009022:	705a      	strb	r2, [r3, #1]
  pUnionDesc->bDescriptorSubtype = 0x06U;
 8009024:	4b2f      	ldr	r3, [pc, #188]	@ (80090e4 <USBD_CMPSIT_CDCDesc+0x2a0>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	2206      	movs	r2, #6
 800902a:	709a      	strb	r2, [r3, #2]
  pUnionDesc->bMasterInterface = pdev->tclasslist[pdev->classId].Ifs[0];
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 8009032:	4b2c      	ldr	r3, [pc, #176]	@ (80090e4 <USBD_CMPSIT_CDCDesc+0x2a0>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	68f9      	ldr	r1, [r7, #12]
 8009038:	202c      	movs	r0, #44	@ 0x2c
 800903a:	fb00 f202 	mul.w	r2, r0, r2
 800903e:	440a      	add	r2, r1
 8009040:	f502 7243 	add.w	r2, r2, #780	@ 0x30c
 8009044:	7812      	ldrb	r2, [r2, #0]
 8009046:	70da      	strb	r2, [r3, #3]
  pUnionDesc->bSlaveInterface = pdev->tclasslist[pdev->classId].Ifs[1];
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 800904e:	4b25      	ldr	r3, [pc, #148]	@ (80090e4 <USBD_CMPSIT_CDCDesc+0x2a0>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	68f9      	ldr	r1, [r7, #12]
 8009054:	202c      	movs	r0, #44	@ 0x2c
 8009056:	fb00 f202 	mul.w	r2, r0, r2
 800905a:	440a      	add	r2, r1
 800905c:	f202 320d 	addw	r2, r2, #781	@ 0x30d
 8009060:	7812      	ldrb	r2, [r2, #0]
 8009062:	711a      	strb	r2, [r3, #4]
  *Sze += (uint32_t)sizeof(USBD_CDCUnionFuncDescTypeDef);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	1d5a      	adds	r2, r3, #5
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	601a      	str	r2, [r3, #0]

  /* Append Endpoint descriptor to Configuration descriptor */
  __USBD_CMPSIT_SET_EP(pdev->tclasslist[pdev->classId].Eps[2].add, \
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681a      	ldr	r2, [r3, #0]
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	4413      	add	r3, r2
 8009076:	461a      	mov	r2, r3
 8009078:	4b1b      	ldr	r3, [pc, #108]	@ (80090e8 <USBD_CMPSIT_CDCDesc+0x2a4>)
 800907a:	601a      	str	r2, [r3, #0]
 800907c:	4b1a      	ldr	r3, [pc, #104]	@ (80090e8 <USBD_CMPSIT_CDCDesc+0x2a4>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	2207      	movs	r2, #7
 8009082:	701a      	strb	r2, [r3, #0]
 8009084:	4b18      	ldr	r3, [pc, #96]	@ (80090e8 <USBD_CMPSIT_CDCDesc+0x2a4>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	2205      	movs	r2, #5
 800908a:	705a      	strb	r2, [r3, #1]
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 8009092:	4b15      	ldr	r3, [pc, #84]	@ (80090e8 <USBD_CMPSIT_CDCDesc+0x2a4>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	68f9      	ldr	r1, [r7, #12]
 8009098:	202c      	movs	r0, #44	@ 0x2c
 800909a:	fb00 f202 	mul.w	r2, r0, r2
 800909e:	440a      	add	r2, r1
 80090a0:	f502 7240 	add.w	r2, r2, #768	@ 0x300
 80090a4:	7812      	ldrb	r2, [r2, #0]
 80090a6:	709a      	strb	r2, [r3, #2]
 80090a8:	4b0f      	ldr	r3, [pc, #60]	@ (80090e8 <USBD_CMPSIT_CDCDesc+0x2a4>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	2203      	movs	r2, #3
 80090ae:	70da      	strb	r2, [r3, #3]
 80090b0:	4b0d      	ldr	r3, [pc, #52]	@ (80090e8 <USBD_CMPSIT_CDCDesc+0x2a4>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	2200      	movs	r2, #0
 80090b6:	f042 0208 	orr.w	r2, r2, #8
 80090ba:	711a      	strb	r2, [r3, #4]
 80090bc:	2200      	movs	r2, #0
 80090be:	715a      	strb	r2, [r3, #5]
 80090c0:	78fb      	ldrb	r3, [r7, #3]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d112      	bne.n	80090ec <USBD_CMPSIT_CDCDesc+0x2a8>
 80090c6:	4b08      	ldr	r3, [pc, #32]	@ (80090e8 <USBD_CMPSIT_CDCDesc+0x2a4>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	2210      	movs	r2, #16
 80090cc:	719a      	strb	r2, [r3, #6]
 80090ce:	e011      	b.n	80090f4 <USBD_CMPSIT_CDCDesc+0x2b0>
 80090d0:	20000b6c 	.word	0x20000b6c
 80090d4:	20000b70 	.word	0x20000b70
 80090d8:	20000b74 	.word	0x20000b74
 80090dc:	20000b78 	.word	0x20000b78
 80090e0:	20000b7c 	.word	0x20000b7c
 80090e4:	20000b80 	.word	0x20000b80
 80090e8:	20000b84 	.word	0x20000b84
 80090ec:	4b73      	ldr	r3, [pc, #460]	@ (80092bc <USBD_CMPSIT_CDCDesc+0x478>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	2210      	movs	r2, #16
 80090f2:	719a      	strb	r2, [r3, #6]
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	1dda      	adds	r2, r3, #7
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	601a      	str	r2, [r3, #0]
                       USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE, CDC_HS_BINTERVAL, CDC_FS_BINTERVAL);

  /* Data Interface Descriptor */
  __USBD_CMPSIT_SET_IF(pdev->tclasslist[pdev->classId].Ifs[1], 0U, 2U, 0x0A, 0U, 0U, 0U);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681a      	ldr	r2, [r3, #0]
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	4413      	add	r3, r2
 8009106:	461a      	mov	r2, r3
 8009108:	4b6d      	ldr	r3, [pc, #436]	@ (80092c0 <USBD_CMPSIT_CDCDesc+0x47c>)
 800910a:	601a      	str	r2, [r3, #0]
 800910c:	4b6c      	ldr	r3, [pc, #432]	@ (80092c0 <USBD_CMPSIT_CDCDesc+0x47c>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	2209      	movs	r2, #9
 8009112:	701a      	strb	r2, [r3, #0]
 8009114:	4b6a      	ldr	r3, [pc, #424]	@ (80092c0 <USBD_CMPSIT_CDCDesc+0x47c>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	2204      	movs	r2, #4
 800911a:	705a      	strb	r2, [r3, #1]
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 8009122:	4b67      	ldr	r3, [pc, #412]	@ (80092c0 <USBD_CMPSIT_CDCDesc+0x47c>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	68f9      	ldr	r1, [r7, #12]
 8009128:	202c      	movs	r0, #44	@ 0x2c
 800912a:	fb00 f202 	mul.w	r2, r0, r2
 800912e:	440a      	add	r2, r1
 8009130:	f202 320d 	addw	r2, r2, #781	@ 0x30d
 8009134:	7812      	ldrb	r2, [r2, #0]
 8009136:	709a      	strb	r2, [r3, #2]
 8009138:	4b61      	ldr	r3, [pc, #388]	@ (80092c0 <USBD_CMPSIT_CDCDesc+0x47c>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	2200      	movs	r2, #0
 800913e:	70da      	strb	r2, [r3, #3]
 8009140:	4b5f      	ldr	r3, [pc, #380]	@ (80092c0 <USBD_CMPSIT_CDCDesc+0x47c>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	2202      	movs	r2, #2
 8009146:	711a      	strb	r2, [r3, #4]
 8009148:	4b5d      	ldr	r3, [pc, #372]	@ (80092c0 <USBD_CMPSIT_CDCDesc+0x47c>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	220a      	movs	r2, #10
 800914e:	715a      	strb	r2, [r3, #5]
 8009150:	4b5b      	ldr	r3, [pc, #364]	@ (80092c0 <USBD_CMPSIT_CDCDesc+0x47c>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	2200      	movs	r2, #0
 8009156:	719a      	strb	r2, [r3, #6]
 8009158:	4b59      	ldr	r3, [pc, #356]	@ (80092c0 <USBD_CMPSIT_CDCDesc+0x47c>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	2200      	movs	r2, #0
 800915e:	71da      	strb	r2, [r3, #7]
 8009160:	4b57      	ldr	r3, [pc, #348]	@ (80092c0 <USBD_CMPSIT_CDCDesc+0x47c>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	2200      	movs	r2, #0
 8009166:	721a      	strb	r2, [r3, #8]
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f103 0209 	add.w	r2, r3, #9
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	601a      	str	r2, [r3, #0]

  if (speed == (uint8_t)USBD_SPEED_HIGH)
 8009174:	78fb      	ldrb	r3, [r7, #3]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d10c      	bne.n	8009194 <USBD_CMPSIT_CDCDesc+0x350>
  {
    pdev->tclasslist[pdev->classId].CurrPcktSze = CDC_DATA_HS_MAX_PACKET_SIZE;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8009180:	68fa      	ldr	r2, [r7, #12]
 8009182:	212c      	movs	r1, #44	@ 0x2c
 8009184:	fb01 f303 	mul.w	r3, r1, r3
 8009188:	4413      	add	r3, r2
 800918a:	f503 7344 	add.w	r3, r3, #784	@ 0x310
 800918e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009192:	601a      	str	r2, [r3, #0]
  }

  /* Append Endpoint descriptor to Configuration descriptor */
  __USBD_CMPSIT_SET_EP((pdev->tclasslist[pdev->classId].Eps[0].add), \
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681a      	ldr	r2, [r3, #0]
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	4413      	add	r3, r2
 800919c:	461a      	mov	r2, r3
 800919e:	4b47      	ldr	r3, [pc, #284]	@ (80092bc <USBD_CMPSIT_CDCDesc+0x478>)
 80091a0:	601a      	str	r2, [r3, #0]
 80091a2:	4b46      	ldr	r3, [pc, #280]	@ (80092bc <USBD_CMPSIT_CDCDesc+0x478>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	2207      	movs	r2, #7
 80091a8:	701a      	strb	r2, [r3, #0]
 80091aa:	4b44      	ldr	r3, [pc, #272]	@ (80092bc <USBD_CMPSIT_CDCDesc+0x478>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	2205      	movs	r2, #5
 80091b0:	705a      	strb	r2, [r3, #1]
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 80091b8:	4b40      	ldr	r3, [pc, #256]	@ (80092bc <USBD_CMPSIT_CDCDesc+0x478>)
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	68f9      	ldr	r1, [r7, #12]
 80091be:	202c      	movs	r0, #44	@ 0x2c
 80091c0:	fb00 f202 	mul.w	r2, r0, r2
 80091c4:	440a      	add	r2, r1
 80091c6:	f502 723e 	add.w	r2, r2, #760	@ 0x2f8
 80091ca:	7812      	ldrb	r2, [r2, #0]
 80091cc:	709a      	strb	r2, [r3, #2]
 80091ce:	4b3b      	ldr	r3, [pc, #236]	@ (80092bc <USBD_CMPSIT_CDCDesc+0x478>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	2202      	movs	r2, #2
 80091d4:	70da      	strb	r2, [r3, #3]
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80091dc:	68fa      	ldr	r2, [r7, #12]
 80091de:	212c      	movs	r1, #44	@ 0x2c
 80091e0:	fb01 f303 	mul.w	r3, r1, r3
 80091e4:	4413      	add	r3, r2
 80091e6:	f503 7344 	add.w	r3, r3, #784	@ 0x310
 80091ea:	681a      	ldr	r2, [r3, #0]
 80091ec:	4b33      	ldr	r3, [pc, #204]	@ (80092bc <USBD_CMPSIT_CDCDesc+0x478>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	b292      	uxth	r2, r2
 80091f2:	809a      	strh	r2, [r3, #4]
 80091f4:	78fb      	ldrb	r3, [r7, #3]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d104      	bne.n	8009204 <USBD_CMPSIT_CDCDesc+0x3c0>
 80091fa:	4b30      	ldr	r3, [pc, #192]	@ (80092bc <USBD_CMPSIT_CDCDesc+0x478>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	2200      	movs	r2, #0
 8009200:	719a      	strb	r2, [r3, #6]
 8009202:	e003      	b.n	800920c <USBD_CMPSIT_CDCDesc+0x3c8>
 8009204:	4b2d      	ldr	r3, [pc, #180]	@ (80092bc <USBD_CMPSIT_CDCDesc+0x478>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	2200      	movs	r2, #0
 800920a:	719a      	strb	r2, [r3, #6]
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	1dda      	adds	r2, r3, #7
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	601a      	str	r2, [r3, #0]
                       (USBD_EP_TYPE_BULK), (pdev->tclasslist[pdev->classId].CurrPcktSze), (0U), (0U));

  /* Append Endpoint descriptor to Configuration descriptor */
  __USBD_CMPSIT_SET_EP((pdev->tclasslist[pdev->classId].Eps[1].add), \
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681a      	ldr	r2, [r3, #0]
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	4413      	add	r3, r2
 800921e:	461a      	mov	r2, r3
 8009220:	4b26      	ldr	r3, [pc, #152]	@ (80092bc <USBD_CMPSIT_CDCDesc+0x478>)
 8009222:	601a      	str	r2, [r3, #0]
 8009224:	4b25      	ldr	r3, [pc, #148]	@ (80092bc <USBD_CMPSIT_CDCDesc+0x478>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	2207      	movs	r2, #7
 800922a:	701a      	strb	r2, [r3, #0]
 800922c:	4b23      	ldr	r3, [pc, #140]	@ (80092bc <USBD_CMPSIT_CDCDesc+0x478>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	2205      	movs	r2, #5
 8009232:	705a      	strb	r2, [r3, #1]
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 800923a:	4b20      	ldr	r3, [pc, #128]	@ (80092bc <USBD_CMPSIT_CDCDesc+0x478>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	68f9      	ldr	r1, [r7, #12]
 8009240:	202c      	movs	r0, #44	@ 0x2c
 8009242:	fb00 f202 	mul.w	r2, r0, r2
 8009246:	440a      	add	r2, r1
 8009248:	f502 723f 	add.w	r2, r2, #764	@ 0x2fc
 800924c:	7812      	ldrb	r2, [r2, #0]
 800924e:	709a      	strb	r2, [r3, #2]
 8009250:	4b1a      	ldr	r3, [pc, #104]	@ (80092bc <USBD_CMPSIT_CDCDesc+0x478>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	2202      	movs	r2, #2
 8009256:	70da      	strb	r2, [r3, #3]
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800925e:	68fa      	ldr	r2, [r7, #12]
 8009260:	212c      	movs	r1, #44	@ 0x2c
 8009262:	fb01 f303 	mul.w	r3, r1, r3
 8009266:	4413      	add	r3, r2
 8009268:	f503 7344 	add.w	r3, r3, #784	@ 0x310
 800926c:	681a      	ldr	r2, [r3, #0]
 800926e:	4b13      	ldr	r3, [pc, #76]	@ (80092bc <USBD_CMPSIT_CDCDesc+0x478>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	b292      	uxth	r2, r2
 8009274:	809a      	strh	r2, [r3, #4]
 8009276:	78fb      	ldrb	r3, [r7, #3]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d104      	bne.n	8009286 <USBD_CMPSIT_CDCDesc+0x442>
 800927c:	4b0f      	ldr	r3, [pc, #60]	@ (80092bc <USBD_CMPSIT_CDCDesc+0x478>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	2200      	movs	r2, #0
 8009282:	719a      	strb	r2, [r3, #6]
 8009284:	e003      	b.n	800928e <USBD_CMPSIT_CDCDesc+0x44a>
 8009286:	4b0d      	ldr	r3, [pc, #52]	@ (80092bc <USBD_CMPSIT_CDCDesc+0x478>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	2200      	movs	r2, #0
 800928c:	719a      	strb	r2, [r3, #6]
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	1dda      	adds	r2, r3, #7
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	601a      	str	r2, [r3, #0]
                       (USBD_EP_TYPE_BULK), (pdev->tclasslist[pdev->classId].CurrPcktSze), (0U), (0U));

  /* Update Config Descriptor and IAD descriptor */
  ((USBD_ConfigDescTypeDef *)pConf)->bNumInterfaces += 2U;
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	791a      	ldrb	r2, [r3, #4]
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	3202      	adds	r2, #2
 80092a0:	b2d2      	uxtb	r2, r2
 80092a2:	711a      	strb	r2, [r3, #4]
  ((USBD_ConfigDescTypeDef *)pConf)->wTotalLength = (uint16_t)(*Sze);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681a      	ldr	r2, [r3, #0]
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	b292      	uxth	r2, r2
 80092ac:	805a      	strh	r2, [r3, #2]
}
 80092ae:	bf00      	nop
 80092b0:	3714      	adds	r7, #20
 80092b2:	46bd      	mov	sp, r7
 80092b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b8:	4770      	bx	lr
 80092ba:	bf00      	nop
 80092bc:	20000b84 	.word	0x20000b84
 80092c0:	20000b70 	.word	0x20000b70

080092c4 <USBD_CMPSIT_SetClassID>:
  * @param  Class: Class type, can be CLASS_TYPE_NONE if requested to find class from setup request
  * @param  Instance: Instance number of the class (0 if first/unique instance, >0 otherwise)
  * @retval The Class ID, The pdev->classId is set with the value of the selected class ID.
  */
uint32_t  USBD_CMPSIT_SetClassID(USBD_HandleTypeDef *pdev, USBD_CompositeClassTypeDef Class, uint32_t Instance)
{
 80092c4:	b480      	push	{r7}
 80092c6:	b087      	sub	sp, #28
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	60f8      	str	r0, [r7, #12]
 80092cc:	460b      	mov	r3, r1
 80092ce:	607a      	str	r2, [r7, #4]
 80092d0:	72fb      	strb	r3, [r7, #11]
  uint32_t idx;
  uint32_t inst = 0U;
 80092d2:	2300      	movs	r3, #0
 80092d4:	613b      	str	r3, [r7, #16]

  /* Unroll all already activated classes */
  for (idx = 0U; idx < pdev->NumClasses; idx++)
 80092d6:	2300      	movs	r3, #0
 80092d8:	617b      	str	r3, [r7, #20]
 80092da:	e026      	b.n	800932a <USBD_CMPSIT_SetClassID+0x66>
  {
    /* Check if the class correspond to the requested type and if it is active */
    if (((USBD_CompositeClassTypeDef)(pdev->tclasslist[idx].ClassType) == Class) &&
 80092dc:	68fa      	ldr	r2, [r7, #12]
 80092de:	697b      	ldr	r3, [r7, #20]
 80092e0:	212c      	movs	r1, #44	@ 0x2c
 80092e2:	fb01 f303 	mul.w	r3, r1, r3
 80092e6:	4413      	add	r3, r2
 80092e8:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 80092ec:	781b      	ldrb	r3, [r3, #0]
 80092ee:	7afa      	ldrb	r2, [r7, #11]
 80092f0:	429a      	cmp	r2, r3
 80092f2:	d117      	bne.n	8009324 <USBD_CMPSIT_SetClassID+0x60>
        ((pdev->tclasslist[idx].Active) == 1U))
 80092f4:	68fa      	ldr	r2, [r7, #12]
 80092f6:	697b      	ldr	r3, [r7, #20]
 80092f8:	212c      	movs	r1, #44	@ 0x2c
 80092fa:	fb01 f303 	mul.w	r3, r1, r3
 80092fe:	4413      	add	r3, r2
 8009300:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8009304:	681b      	ldr	r3, [r3, #0]
    if (((USBD_CompositeClassTypeDef)(pdev->tclasslist[idx].ClassType) == Class) &&
 8009306:	2b01      	cmp	r3, #1
 8009308:	d10c      	bne.n	8009324 <USBD_CMPSIT_SetClassID+0x60>
    {
      if (inst == Instance)
 800930a:	693a      	ldr	r2, [r7, #16]
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	429a      	cmp	r2, r3
 8009310:	d105      	bne.n	800931e <USBD_CMPSIT_SetClassID+0x5a>
      {
        /* Set the new class ID */
        pdev->classId = idx;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	697a      	ldr	r2, [r7, #20]
 8009316:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0

        /* Return the class ID value */
        return (idx);
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	e00c      	b.n	8009338 <USBD_CMPSIT_SetClassID+0x74>
      }
      else
      {
        /* Increment instance index and look for next instance */
        inst++;
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	3301      	adds	r3, #1
 8009322:	613b      	str	r3, [r7, #16]
  for (idx = 0U; idx < pdev->NumClasses; idx++)
 8009324:	697b      	ldr	r3, [r7, #20]
 8009326:	3301      	adds	r3, #1
 8009328:	617b      	str	r3, [r7, #20]
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	f8d3 32e4 	ldr.w	r3, [r3, #740]	@ 0x2e4
 8009330:	697a      	ldr	r2, [r7, #20]
 8009332:	429a      	cmp	r2, r3
 8009334:	d3d2      	bcc.n	80092dc <USBD_CMPSIT_SetClassID+0x18>
      }
    }
  }

  /* No class found, return 0xFF */
  return 0xFFU;
 8009336:	23ff      	movs	r3, #255	@ 0xff
}
 8009338:	4618      	mov	r0, r3
 800933a:	371c      	adds	r7, #28
 800933c:	46bd      	mov	sp, r7
 800933e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009342:	4770      	bx	lr

08009344 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b084      	sub	sp, #16
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
 800934c:	460b      	mov	r3, r1
 800934e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8009350:	2010      	movs	r0, #16
 8009352:	f000 fbad 	bl	8009ab0 <USBD_static_malloc>
 8009356:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d10a      	bne.n	8009374 <USBD_HID_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8009364:	687a      	ldr	r2, [r7, #4]
 8009366:	33b0      	adds	r3, #176	@ 0xb0
 8009368:	009b      	lsls	r3, r3, #2
 800936a:	4413      	add	r3, r2
 800936c:	2200      	movs	r2, #0
 800936e:	605a      	str	r2, [r3, #4]
    return (uint8_t)USBD_EMEM;
 8009370:	2302      	movs	r3, #2
 8009372:	e057      	b.n	8009424 <USBD_HID_Init+0xe0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800937a:	687a      	ldr	r2, [r7, #4]
 800937c:	33b0      	adds	r3, #176	@ 0xb0
 800937e:	009b      	lsls	r3, r3, #2
 8009380:	4413      	add	r3, r2
 8009382:	68fa      	ldr	r2, [r7, #12]
 8009384:	605a      	str	r2, [r3, #4]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800938c:	687a      	ldr	r2, [r7, #4]
 800938e:	33b0      	adds	r3, #176	@ 0xb0
 8009390:	009b      	lsls	r3, r3, #2
 8009392:	4413      	add	r3, r2
 8009394:	685a      	ldr	r2, [r3, #4]
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80093a2:	b2db      	uxtb	r3, r3
 80093a4:	2203      	movs	r2, #3
 80093a6:	2180      	movs	r1, #128	@ 0x80
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f001 f82d 	bl	800a408 <USBD_CoreGetEPAdd>
 80093ae:	4603      	mov	r3, r0
 80093b0:	461a      	mov	r2, r3
 80093b2:	4b1e      	ldr	r3, [pc, #120]	@ (800942c <USBD_HID_Init+0xe8>)
 80093b4:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	7c1b      	ldrb	r3, [r3, #16]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d10d      	bne.n	80093da <USBD_HID_Init+0x96>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 80093be:	4b1b      	ldr	r3, [pc, #108]	@ (800942c <USBD_HID_Init+0xe8>)
 80093c0:	781b      	ldrb	r3, [r3, #0]
 80093c2:	f003 020f 	and.w	r2, r3, #15
 80093c6:	6879      	ldr	r1, [r7, #4]
 80093c8:	4613      	mov	r3, r2
 80093ca:	009b      	lsls	r3, r3, #2
 80093cc:	4413      	add	r3, r2
 80093ce:	009b      	lsls	r3, r3, #2
 80093d0:	440b      	add	r3, r1
 80093d2:	3326      	adds	r3, #38	@ 0x26
 80093d4:	2207      	movs	r2, #7
 80093d6:	801a      	strh	r2, [r3, #0]
 80093d8:	e00c      	b.n	80093f4 <USBD_HID_Init+0xb0>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 80093da:	4b14      	ldr	r3, [pc, #80]	@ (800942c <USBD_HID_Init+0xe8>)
 80093dc:	781b      	ldrb	r3, [r3, #0]
 80093de:	f003 020f 	and.w	r2, r3, #15
 80093e2:	6879      	ldr	r1, [r7, #4]
 80093e4:	4613      	mov	r3, r2
 80093e6:	009b      	lsls	r3, r3, #2
 80093e8:	4413      	add	r3, r2
 80093ea:	009b      	lsls	r3, r3, #2
 80093ec:	440b      	add	r3, r1
 80093ee:	3326      	adds	r3, #38	@ 0x26
 80093f0:	220a      	movs	r2, #10
 80093f2:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80093f4:	4b0d      	ldr	r3, [pc, #52]	@ (800942c <USBD_HID_Init+0xe8>)
 80093f6:	7819      	ldrb	r1, [r3, #0]
 80093f8:	2304      	movs	r3, #4
 80093fa:	2203      	movs	r2, #3
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f000 fa5e 	bl	80098be <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8009402:	4b0a      	ldr	r3, [pc, #40]	@ (800942c <USBD_HID_Init+0xe8>)
 8009404:	781b      	ldrb	r3, [r3, #0]
 8009406:	f003 020f 	and.w	r2, r3, #15
 800940a:	6879      	ldr	r1, [r7, #4]
 800940c:	4613      	mov	r3, r2
 800940e:	009b      	lsls	r3, r3, #2
 8009410:	4413      	add	r3, r2
 8009412:	009b      	lsls	r3, r3, #2
 8009414:	440b      	add	r3, r1
 8009416:	3324      	adds	r3, #36	@ 0x24
 8009418:	2201      	movs	r2, #1
 800941a:	801a      	strh	r2, [r3, #0]

  hhid->state = USBD_HID_IDLE;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	2200      	movs	r2, #0
 8009420:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8009422:	2300      	movs	r3, #0
}
 8009424:	4618      	mov	r0, r3
 8009426:	3710      	adds	r7, #16
 8009428:	46bd      	mov	sp, r7
 800942a:	bd80      	pop	{r7, pc}
 800942c:	2000013e 	.word	0x2000013e

08009430 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b082      	sub	sp, #8
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
 8009438:	460b      	mov	r3, r1
 800943a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8009442:	b2db      	uxtb	r3, r3
 8009444:	2203      	movs	r2, #3
 8009446:	2180      	movs	r1, #128	@ 0x80
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	f000 ffdd 	bl	800a408 <USBD_CoreGetEPAdd>
 800944e:	4603      	mov	r3, r0
 8009450:	461a      	mov	r2, r3
 8009452:	4b22      	ldr	r3, [pc, #136]	@ (80094dc <USBD_HID_DeInit+0xac>)
 8009454:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8009456:	4b21      	ldr	r3, [pc, #132]	@ (80094dc <USBD_HID_DeInit+0xac>)
 8009458:	781b      	ldrb	r3, [r3, #0]
 800945a:	4619      	mov	r1, r3
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f000 fa4e 	bl	80098fe <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8009462:	4b1e      	ldr	r3, [pc, #120]	@ (80094dc <USBD_HID_DeInit+0xac>)
 8009464:	781b      	ldrb	r3, [r3, #0]
 8009466:	f003 020f 	and.w	r2, r3, #15
 800946a:	6879      	ldr	r1, [r7, #4]
 800946c:	4613      	mov	r3, r2
 800946e:	009b      	lsls	r3, r3, #2
 8009470:	4413      	add	r3, r2
 8009472:	009b      	lsls	r3, r3, #2
 8009474:	440b      	add	r3, r1
 8009476:	3324      	adds	r3, #36	@ 0x24
 8009478:	2200      	movs	r2, #0
 800947a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 800947c:	4b17      	ldr	r3, [pc, #92]	@ (80094dc <USBD_HID_DeInit+0xac>)
 800947e:	781b      	ldrb	r3, [r3, #0]
 8009480:	f003 020f 	and.w	r2, r3, #15
 8009484:	6879      	ldr	r1, [r7, #4]
 8009486:	4613      	mov	r3, r2
 8009488:	009b      	lsls	r3, r3, #2
 800948a:	4413      	add	r3, r2
 800948c:	009b      	lsls	r3, r3, #2
 800948e:	440b      	add	r3, r1
 8009490:	3326      	adds	r3, #38	@ 0x26
 8009492:	2200      	movs	r2, #0
 8009494:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800949c:	687a      	ldr	r2, [r7, #4]
 800949e:	33b0      	adds	r3, #176	@ 0xb0
 80094a0:	009b      	lsls	r3, r3, #2
 80094a2:	4413      	add	r3, r2
 80094a4:	685b      	ldr	r3, [r3, #4]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d013      	beq.n	80094d2 <USBD_HID_DeInit+0xa2>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80094b0:	687a      	ldr	r2, [r7, #4]
 80094b2:	33b0      	adds	r3, #176	@ 0xb0
 80094b4:	009b      	lsls	r3, r3, #2
 80094b6:	4413      	add	r3, r2
 80094b8:	685b      	ldr	r3, [r3, #4]
 80094ba:	4618      	mov	r0, r3
 80094bc:	f000 fb06 	bl	8009acc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80094c6:	687a      	ldr	r2, [r7, #4]
 80094c8:	33b0      	adds	r3, #176	@ 0xb0
 80094ca:	009b      	lsls	r3, r3, #2
 80094cc:	4413      	add	r3, r2
 80094ce:	2200      	movs	r2, #0
 80094d0:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)USBD_OK;
 80094d2:	2300      	movs	r3, #0
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	3708      	adds	r7, #8
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}
 80094dc:	2000013e 	.word	0x2000013e

080094e0 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b086      	sub	sp, #24
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
 80094e8:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80094f0:	687a      	ldr	r2, [r7, #4]
 80094f2:	33b0      	adds	r3, #176	@ 0xb0
 80094f4:	009b      	lsls	r3, r3, #2
 80094f6:	4413      	add	r3, r2
 80094f8:	685b      	ldr	r3, [r3, #4]
 80094fa:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80094fc:	2300      	movs	r3, #0
 80094fe:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8009500:	2300      	movs	r3, #0
 8009502:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d101      	bne.n	800950e <USBD_HID_Setup+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800950a:	2303      	movs	r3, #3
 800950c:	e0e7      	b.n	80096de <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	781b      	ldrb	r3, [r3, #0]
 8009512:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009516:	2b00      	cmp	r3, #0
 8009518:	d045      	beq.n	80095a6 <USBD_HID_Setup+0xc6>
 800951a:	2b20      	cmp	r3, #32
 800951c:	f040 80d7 	bne.w	80096ce <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	785b      	ldrb	r3, [r3, #1]
 8009524:	3b02      	subs	r3, #2
 8009526:	2b09      	cmp	r3, #9
 8009528:	d835      	bhi.n	8009596 <USBD_HID_Setup+0xb6>
 800952a:	a201      	add	r2, pc, #4	@ (adr r2, 8009530 <USBD_HID_Setup+0x50>)
 800952c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009530:	08009587 	.word	0x08009587
 8009534:	08009567 	.word	0x08009567
 8009538:	08009597 	.word	0x08009597
 800953c:	08009597 	.word	0x08009597
 8009540:	08009597 	.word	0x08009597
 8009544:	08009597 	.word	0x08009597
 8009548:	08009597 	.word	0x08009597
 800954c:	08009597 	.word	0x08009597
 8009550:	08009575 	.word	0x08009575
 8009554:	08009559 	.word	0x08009559
      {
        case USBD_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	885b      	ldrh	r3, [r3, #2]
 800955c:	b2db      	uxtb	r3, r3
 800955e:	461a      	mov	r2, r3
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	601a      	str	r2, [r3, #0]
          break;
 8009564:	e01e      	b.n	80095a4 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	2201      	movs	r2, #1
 800956a:	4619      	mov	r1, r3
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f001 ff4a 	bl	800b406 <USBD_CtlSendData>
          break;
 8009572:	e017      	b.n	80095a4 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	885b      	ldrh	r3, [r3, #2]
 8009578:	0a1b      	lsrs	r3, r3, #8
 800957a:	b29b      	uxth	r3, r3
 800957c:	b2db      	uxtb	r3, r3
 800957e:	461a      	mov	r2, r3
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	605a      	str	r2, [r3, #4]
          break;
 8009584:	e00e      	b.n	80095a4 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	3304      	adds	r3, #4
 800958a:	2201      	movs	r2, #1
 800958c:	4619      	mov	r1, r3
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	f001 ff39 	bl	800b406 <USBD_CtlSendData>
          break;
 8009594:	e006      	b.n	80095a4 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8009596:	6839      	ldr	r1, [r7, #0]
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f001 fdb4 	bl	800b106 <USBD_CtlError>
          ret = USBD_FAIL;
 800959e:	2303      	movs	r3, #3
 80095a0:	75fb      	strb	r3, [r7, #23]
          break;
 80095a2:	bf00      	nop
      }
      break;
 80095a4:	e09a      	b.n	80096dc <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	785b      	ldrb	r3, [r3, #1]
 80095aa:	2b0b      	cmp	r3, #11
 80095ac:	f200 8086 	bhi.w	80096bc <USBD_HID_Setup+0x1dc>
 80095b0:	a201      	add	r2, pc, #4	@ (adr r2, 80095b8 <USBD_HID_Setup+0xd8>)
 80095b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095b6:	bf00      	nop
 80095b8:	080095e9 	.word	0x080095e9
 80095bc:	080096cb 	.word	0x080096cb
 80095c0:	080096bd 	.word	0x080096bd
 80095c4:	080096bd 	.word	0x080096bd
 80095c8:	080096bd 	.word	0x080096bd
 80095cc:	080096bd 	.word	0x080096bd
 80095d0:	08009613 	.word	0x08009613
 80095d4:	080096bd 	.word	0x080096bd
 80095d8:	080096bd 	.word	0x080096bd
 80095dc:	080096bd 	.word	0x080096bd
 80095e0:	0800966b 	.word	0x0800966b
 80095e4:	08009695 	.word	0x08009695
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095ee:	b2db      	uxtb	r3, r3
 80095f0:	2b03      	cmp	r3, #3
 80095f2:	d107      	bne.n	8009604 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80095f4:	f107 030a 	add.w	r3, r7, #10
 80095f8:	2202      	movs	r2, #2
 80095fa:	4619      	mov	r1, r3
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f001 ff02 	bl	800b406 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009602:	e063      	b.n	80096cc <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8009604:	6839      	ldr	r1, [r7, #0]
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f001 fd7d 	bl	800b106 <USBD_CtlError>
            ret = USBD_FAIL;
 800960c:	2303      	movs	r3, #3
 800960e:	75fb      	strb	r3, [r7, #23]
          break;
 8009610:	e05c      	b.n	80096cc <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	885b      	ldrh	r3, [r3, #2]
 8009616:	0a1b      	lsrs	r3, r3, #8
 8009618:	b29b      	uxth	r3, r3
 800961a:	2b22      	cmp	r3, #34	@ 0x22
 800961c:	d108      	bne.n	8009630 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	88db      	ldrh	r3, [r3, #6]
 8009622:	2b4a      	cmp	r3, #74	@ 0x4a
 8009624:	bf28      	it	cs
 8009626:	234a      	movcs	r3, #74	@ 0x4a
 8009628:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 800962a:	4b2f      	ldr	r3, [pc, #188]	@ (80096e8 <USBD_HID_Setup+0x208>)
 800962c:	613b      	str	r3, [r7, #16]
 800962e:	e015      	b.n	800965c <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	885b      	ldrh	r3, [r3, #2]
 8009634:	0a1b      	lsrs	r3, r3, #8
 8009636:	b29b      	uxth	r3, r3
 8009638:	2b21      	cmp	r3, #33	@ 0x21
 800963a:	d108      	bne.n	800964e <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 800963c:	4b2b      	ldr	r3, [pc, #172]	@ (80096ec <USBD_HID_Setup+0x20c>)
 800963e:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	88db      	ldrh	r3, [r3, #6]
 8009644:	2b09      	cmp	r3, #9
 8009646:	bf28      	it	cs
 8009648:	2309      	movcs	r3, #9
 800964a:	82bb      	strh	r3, [r7, #20]
 800964c:	e006      	b.n	800965c <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800964e:	6839      	ldr	r1, [r7, #0]
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f001 fd58 	bl	800b106 <USBD_CtlError>
            ret = USBD_FAIL;
 8009656:	2303      	movs	r3, #3
 8009658:	75fb      	strb	r3, [r7, #23]
            break;
 800965a:	e037      	b.n	80096cc <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 800965c:	8abb      	ldrh	r3, [r7, #20]
 800965e:	461a      	mov	r2, r3
 8009660:	6939      	ldr	r1, [r7, #16]
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f001 fecf 	bl	800b406 <USBD_CtlSendData>
          break;
 8009668:	e030      	b.n	80096cc <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009670:	b2db      	uxtb	r3, r3
 8009672:	2b03      	cmp	r3, #3
 8009674:	d107      	bne.n	8009686 <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	3308      	adds	r3, #8
 800967a:	2201      	movs	r2, #1
 800967c:	4619      	mov	r1, r3
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f001 fec1 	bl	800b406 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009684:	e022      	b.n	80096cc <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8009686:	6839      	ldr	r1, [r7, #0]
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f001 fd3c 	bl	800b106 <USBD_CtlError>
            ret = USBD_FAIL;
 800968e:	2303      	movs	r3, #3
 8009690:	75fb      	strb	r3, [r7, #23]
          break;
 8009692:	e01b      	b.n	80096cc <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800969a:	b2db      	uxtb	r3, r3
 800969c:	2b03      	cmp	r3, #3
 800969e:	d106      	bne.n	80096ae <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	885b      	ldrh	r3, [r3, #2]
 80096a4:	b2db      	uxtb	r3, r3
 80096a6:	461a      	mov	r2, r3
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80096ac:	e00e      	b.n	80096cc <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80096ae:	6839      	ldr	r1, [r7, #0]
 80096b0:	6878      	ldr	r0, [r7, #4]
 80096b2:	f001 fd28 	bl	800b106 <USBD_CtlError>
            ret = USBD_FAIL;
 80096b6:	2303      	movs	r3, #3
 80096b8:	75fb      	strb	r3, [r7, #23]
          break;
 80096ba:	e007      	b.n	80096cc <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80096bc:	6839      	ldr	r1, [r7, #0]
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f001 fd21 	bl	800b106 <USBD_CtlError>
          ret = USBD_FAIL;
 80096c4:	2303      	movs	r3, #3
 80096c6:	75fb      	strb	r3, [r7, #23]
          break;
 80096c8:	e000      	b.n	80096cc <USBD_HID_Setup+0x1ec>
          break;
 80096ca:	bf00      	nop
      }
      break;
 80096cc:	e006      	b.n	80096dc <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 80096ce:	6839      	ldr	r1, [r7, #0]
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	f001 fd18 	bl	800b106 <USBD_CtlError>
      ret = USBD_FAIL;
 80096d6:	2303      	movs	r3, #3
 80096d8:	75fb      	strb	r3, [r7, #23]
      break;
 80096da:	bf00      	nop
  }

  return (uint8_t)ret;
 80096dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3718      	adds	r7, #24
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}
 80096e6:	bf00      	nop
 80096e8:	200000f4 	.word	0x200000f4
 80096ec:	200000e8 	.word	0x200000e8

080096f0 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80096f0:	b480      	push	{r7}
 80096f2:	b083      	sub	sp, #12
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
 80096f8:	460b      	mov	r3, r1
 80096fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8009702:	687a      	ldr	r2, [r7, #4]
 8009704:	33b0      	adds	r3, #176	@ 0xb0
 8009706:	009b      	lsls	r3, r3, #2
 8009708:	4413      	add	r3, r2
 800970a:	685b      	ldr	r3, [r3, #4]
 800970c:	2200      	movs	r2, #0
 800970e:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8009710:	2300      	movs	r3, #0
}
 8009712:	4618      	mov	r0, r3
 8009714:	370c      	adds	r7, #12
 8009716:	46bd      	mov	sp, r7
 8009718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971c:	4770      	bx	lr

0800971e <HAL_PCD_SetupStageCallback>:
extern PCD_HandleTypeDef hpcd_USB_DRD_FS;
/* Private function prototypes -----------------------------------------------*/
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status);
/* Private functions ---------------------------------------------------------*/
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 800971e:	b580      	push	{r7, lr}
 8009720:	b082      	sub	sp, #8
 8009722:	af00      	add	r7, sp, #0
 8009724:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f8d3 22dc 	ldr.w	r2, [r3, #732]	@ 0x2dc
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 8009732:	4619      	mov	r1, r3
 8009734:	4610      	mov	r0, r2
 8009736:	f000 fb56 	bl	8009de6 <USBD_LL_SetupStage>
}
 800973a:	bf00      	nop
 800973c:	3708      	adds	r7, #8
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}

08009742 <HAL_PCD_DataOutStageCallback>:
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8009742:	b580      	push	{r7, lr}
 8009744:	b082      	sub	sp, #8
 8009746:	af00      	add	r7, sp, #0
 8009748:	6078      	str	r0, [r7, #4]
 800974a:	460b      	mov	r3, r1
 800974c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f8d3 02dc 	ldr.w	r0, [r3, #732]	@ 0x2dc
 8009754:	78fa      	ldrb	r2, [r7, #3]
 8009756:	6879      	ldr	r1, [r7, #4]
 8009758:	4613      	mov	r3, r2
 800975a:	009b      	lsls	r3, r3, #2
 800975c:	4413      	add	r3, r2
 800975e:	00db      	lsls	r3, r3, #3
 8009760:	440b      	add	r3, r1
 8009762:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8009766:	681a      	ldr	r2, [r3, #0]
 8009768:	78fb      	ldrb	r3, [r7, #3]
 800976a:	4619      	mov	r1, r3
 800976c:	f000 fb90 	bl	8009e90 <USBD_LL_DataOutStage>
}
 8009770:	bf00      	nop
 8009772:	3708      	adds	r7, #8
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}

08009778 <HAL_PCD_DataInStageCallback>:
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b082      	sub	sp, #8
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
 8009780:	460b      	mov	r3, r1
 8009782:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f8d3 02dc 	ldr.w	r0, [r3, #732]	@ 0x2dc
 800978a:	78fa      	ldrb	r2, [r7, #3]
 800978c:	6879      	ldr	r1, [r7, #4]
 800978e:	4613      	mov	r3, r2
 8009790:	009b      	lsls	r3, r3, #2
 8009792:	4413      	add	r3, r2
 8009794:	00db      	lsls	r3, r3, #3
 8009796:	440b      	add	r3, r1
 8009798:	3328      	adds	r3, #40	@ 0x28
 800979a:	681a      	ldr	r2, [r3, #0]
 800979c:	78fb      	ldrb	r3, [r7, #3]
 800979e:	4619      	mov	r1, r3
 80097a0:	f000 fc29 	bl	8009ff6 <USBD_LL_DataInStage>
}
 80097a4:	bf00      	nop
 80097a6:	3708      	adds	r7, #8
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}

080097ac <HAL_PCD_SOFCallback>:
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b082      	sub	sp, #8
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 80097ba:	4618      	mov	r0, r3
 80097bc:	f000 fd4d 	bl	800a25a <USBD_LL_SOF>
}
 80097c0:	bf00      	nop
 80097c2:	3708      	adds	r7, #8
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bd80      	pop	{r7, pc}

080097c8 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b084      	sub	sp, #16
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80097d0:	2301      	movs	r3, #1
 80097d2:	73fb      	strb	r3, [r7, #15]
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	79db      	ldrb	r3, [r3, #7]
 80097d8:	2b02      	cmp	r3, #2
 80097da:	d001      	beq.n	80097e0 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80097dc:	f7f6 ffb2 	bl	8000744 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 80097e6:	7bfa      	ldrb	r2, [r7, #15]
 80097e8:	4611      	mov	r1, r2
 80097ea:	4618      	mov	r0, r3
 80097ec:	f000 fd25 	bl	800a23a <USBD_LL_SetSpeed>
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 80097f6:	4618      	mov	r0, r3
 80097f8:	f000 fcaf 	bl	800a15a <USBD_LL_Reset>
}
 80097fc:	bf00      	nop
 80097fe:	3710      	adds	r7, #16
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}

08009804 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b082      	sub	sp, #8
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
	/* Link the driver to the stack */
	pdev->pData  = &hpcd_USB_DRD_FS;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	4a20      	ldr	r2, [pc, #128]	@ (8009890 <USBD_LL_Init+0x8c>)
 8009810:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
	hpcd_USB_DRD_FS.pData = pdev;
 8009814:	4a1e      	ldr	r2, [pc, #120]	@ (8009890 <USBD_LL_Init+0x8c>)
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f8c2 32dc 	str.w	r3, [r2, #732]	@ 0x2dc
	/* Initialize LL Driver */
	MX_USB_PCD_Init();
 800981c:	f7f6 fe8a 	bl	8000534 <MX_USB_PCD_Init>
	/* Control Endpoints */
	HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x20);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8009826:	2320      	movs	r3, #32
 8009828:	2200      	movs	r2, #0
 800982a:	2100      	movs	r1, #0
 800982c:	f7f9 fff4 	bl	8003818 <HAL_PCDEx_PMAConfig>
	HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x60);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8009836:	2360      	movs	r3, #96	@ 0x60
 8009838:	2200      	movs	r2, #0
 800983a:	2180      	movs	r1, #128	@ 0x80
 800983c:	f7f9 ffec 	bl	8003818 <HAL_PCDEx_PMAConfig>
	/* HID Endpoints */
	HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , HID_EPIN_ADDR , PCD_SNG_BUF, 0xA0);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8009846:	23a0      	movs	r3, #160	@ 0xa0
 8009848:	2200      	movs	r2, #0
 800984a:	2181      	movs	r1, #129	@ 0x81
 800984c:	f7f9 ffe4 	bl	8003818 <HAL_PCDEx_PMAConfig>
	/* CDC Endpoints */
	HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_OUT_EP , PCD_SNG_BUF, 0xE0);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8009856:	23e0      	movs	r3, #224	@ 0xe0
 8009858:	2200      	movs	r2, #0
 800985a:	2101      	movs	r1, #1
 800985c:	f7f9 ffdc 	bl	8003818 <HAL_PCDEx_PMAConfig>
	HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_IN_EP , PCD_SNG_BUF, 0x120);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8009866:	f44f 7390 	mov.w	r3, #288	@ 0x120
 800986a:	2200      	movs	r2, #0
 800986c:	2182      	movs	r1, #130	@ 0x82
 800986e:	f7f9 ffd3 	bl	8003818 <HAL_PCDEx_PMAConfig>
	HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_CMD_EP , PCD_SNG_BUF, 0x140);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8009878:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800987c:	2200      	movs	r2, #0
 800987e:	2183      	movs	r1, #131	@ 0x83
 8009880:	f7f9 ffca 	bl	8003818 <HAL_PCDEx_PMAConfig>
	return USBD_OK;
 8009884:	2300      	movs	r3, #0
}
 8009886:	4618      	mov	r0, r3
 8009888:	3708      	adds	r7, #8
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}
 800988e:	bf00      	nop
 8009890:	2000026c 	.word	0x2000026c

08009894 <USBD_LL_Start>:
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_DeInit(pdev->pData);
	return USBD_Get_USB_Status(hal_status);
}
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b084      	sub	sp, #16
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_Start(pdev->pData);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80098a2:	4618      	mov	r0, r3
 80098a4:	f7f8 fc9c 	bl	80021e0 <HAL_PCD_Start>
 80098a8:	4603      	mov	r3, r0
 80098aa:	73fb      	strb	r3, [r7, #15]
	return  USBD_Get_USB_Status(hal_status);
 80098ac:	7bfb      	ldrb	r3, [r7, #15]
 80098ae:	4618      	mov	r0, r3
 80098b0:	f000 f916 	bl	8009ae0 <USBD_Get_USB_Status>
 80098b4:	4603      	mov	r3, r0
}
 80098b6:	4618      	mov	r0, r3
 80098b8:	3710      	adds	r7, #16
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}

080098be <USBD_LL_OpenEP>:
	hal_status = HAL_PCD_Stop(pdev->pData);
	return USBD_Get_USB_Status(hal_status);
}
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
		uint8_t ep_type, uint16_t ep_mps)
{
 80098be:	b580      	push	{r7, lr}
 80098c0:	b084      	sub	sp, #16
 80098c2:	af00      	add	r7, sp, #0
 80098c4:	6078      	str	r0, [r7, #4]
 80098c6:	4608      	mov	r0, r1
 80098c8:	4611      	mov	r1, r2
 80098ca:	461a      	mov	r2, r3
 80098cc:	4603      	mov	r3, r0
 80098ce:	70fb      	strb	r3, [r7, #3]
 80098d0:	460b      	mov	r3, r1
 80098d2:	70bb      	strb	r3, [r7, #2]
 80098d4:	4613      	mov	r3, r2
 80098d6:	803b      	strh	r3, [r7, #0]
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 80098de:	78bb      	ldrb	r3, [r7, #2]
 80098e0:	883a      	ldrh	r2, [r7, #0]
 80098e2:	78f9      	ldrb	r1, [r7, #3]
 80098e4:	f7f8 fdcb 	bl	800247e <HAL_PCD_EP_Open>
 80098e8:	4603      	mov	r3, r0
 80098ea:	73fb      	strb	r3, [r7, #15]
	return USBD_Get_USB_Status(hal_status);
 80098ec:	7bfb      	ldrb	r3, [r7, #15]
 80098ee:	4618      	mov	r0, r3
 80098f0:	f000 f8f6 	bl	8009ae0 <USBD_Get_USB_Status>
 80098f4:	4603      	mov	r3, r0
}
 80098f6:	4618      	mov	r0, r3
 80098f8:	3710      	adds	r7, #16
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}

080098fe <USBD_LL_CloseEP>:
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098fe:	b580      	push	{r7, lr}
 8009900:	b084      	sub	sp, #16
 8009902:	af00      	add	r7, sp, #0
 8009904:	6078      	str	r0, [r7, #4]
 8009906:	460b      	mov	r3, r1
 8009908:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009910:	78fa      	ldrb	r2, [r7, #3]
 8009912:	4611      	mov	r1, r2
 8009914:	4618      	mov	r0, r3
 8009916:	f7f8 fe13 	bl	8002540 <HAL_PCD_EP_Close>
 800991a:	4603      	mov	r3, r0
 800991c:	73fb      	strb	r3, [r7, #15]
	return USBD_Get_USB_Status(hal_status);
 800991e:	7bfb      	ldrb	r3, [r7, #15]
 8009920:	4618      	mov	r0, r3
 8009922:	f000 f8dd 	bl	8009ae0 <USBD_Get_USB_Status>
 8009926:	4603      	mov	r3, r0
}
 8009928:	4618      	mov	r0, r3
 800992a:	3710      	adds	r7, #16
 800992c:	46bd      	mov	sp, r7
 800992e:	bd80      	pop	{r7, pc}

08009930 <USBD_LL_StallEP>:
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
	return USBD_Get_USB_Status(hal_status);
}
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b084      	sub	sp, #16
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
 8009938:	460b      	mov	r3, r1
 800993a:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009942:	78fa      	ldrb	r2, [r7, #3]
 8009944:	4611      	mov	r1, r2
 8009946:	4618      	mov	r0, r3
 8009948:	f7f8 fec6 	bl	80026d8 <HAL_PCD_EP_SetStall>
 800994c:	4603      	mov	r3, r0
 800994e:	73fb      	strb	r3, [r7, #15]
	return USBD_Get_USB_Status(hal_status);
 8009950:	7bfb      	ldrb	r3, [r7, #15]
 8009952:	4618      	mov	r0, r3
 8009954:	f000 f8c4 	bl	8009ae0 <USBD_Get_USB_Status>
 8009958:	4603      	mov	r3, r0
}
 800995a:	4618      	mov	r0, r3
 800995c:	3710      	adds	r7, #16
 800995e:	46bd      	mov	sp, r7
 8009960:	bd80      	pop	{r7, pc}

08009962 <USBD_LL_ClearStallEP>:
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev,
		uint8_t ep_addr)
{
 8009962:	b580      	push	{r7, lr}
 8009964:	b084      	sub	sp, #16
 8009966:	af00      	add	r7, sp, #0
 8009968:	6078      	str	r0, [r7, #4]
 800996a:	460b      	mov	r3, r1
 800996c:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009974:	78fa      	ldrb	r2, [r7, #3]
 8009976:	4611      	mov	r1, r2
 8009978:	4618      	mov	r0, r3
 800997a:	f7f8 ff01 	bl	8002780 <HAL_PCD_EP_ClrStall>
 800997e:	4603      	mov	r3, r0
 8009980:	73fb      	strb	r3, [r7, #15]
	return USBD_Get_USB_Status(hal_status);
 8009982:	7bfb      	ldrb	r3, [r7, #15]
 8009984:	4618      	mov	r0, r3
 8009986:	f000 f8ab 	bl	8009ae0 <USBD_Get_USB_Status>
 800998a:	4603      	mov	r3, r0
}
 800998c:	4618      	mov	r0, r3
 800998e:	3710      	adds	r7, #16
 8009990:	46bd      	mov	sp, r7
 8009992:	bd80      	pop	{r7, pc}

08009994 <USBD_LL_IsStallEP>:
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009994:	b480      	push	{r7}
 8009996:	b085      	sub	sp, #20
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
 800999c:	460b      	mov	r3, r1
 800999e:	70fb      	strb	r3, [r7, #3]
	PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80099a6:	60fb      	str	r3, [r7, #12]
	if((ep_addr & 0x80) == 0x80)
 80099a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	da0b      	bge.n	80099c8 <USBD_LL_IsStallEP+0x34>
	{
		return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80099b0:	78fb      	ldrb	r3, [r7, #3]
 80099b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80099b6:	68f9      	ldr	r1, [r7, #12]
 80099b8:	4613      	mov	r3, r2
 80099ba:	009b      	lsls	r3, r3, #2
 80099bc:	4413      	add	r3, r2
 80099be:	00db      	lsls	r3, r3, #3
 80099c0:	440b      	add	r3, r1
 80099c2:	3316      	adds	r3, #22
 80099c4:	781b      	ldrb	r3, [r3, #0]
 80099c6:	e00b      	b.n	80099e0 <USBD_LL_IsStallEP+0x4c>
	}
	else
	{
		return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80099c8:	78fb      	ldrb	r3, [r7, #3]
 80099ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80099ce:	68f9      	ldr	r1, [r7, #12]
 80099d0:	4613      	mov	r3, r2
 80099d2:	009b      	lsls	r3, r3, #2
 80099d4:	4413      	add	r3, r2
 80099d6:	00db      	lsls	r3, r3, #3
 80099d8:	440b      	add	r3, r1
 80099da:	f503 73ab 	add.w	r3, r3, #342	@ 0x156
 80099de:	781b      	ldrb	r3, [r3, #0]
	}
}
 80099e0:	4618      	mov	r0, r3
 80099e2:	3714      	adds	r7, #20
 80099e4:	46bd      	mov	sp, r7
 80099e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ea:	4770      	bx	lr

080099ec <USBD_LL_SetUSBAddress>:
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev,
		uint8_t dev_addr)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b084      	sub	sp, #16
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
 80099f4:	460b      	mov	r3, r1
 80099f6:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80099fe:	78fa      	ldrb	r2, [r7, #3]
 8009a00:	4611      	mov	r1, r2
 8009a02:	4618      	mov	r0, r3
 8009a04:	f7f8 fd17 	bl	8002436 <HAL_PCD_SetAddress>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	73fb      	strb	r3, [r7, #15]
	return USBD_Get_USB_Status(hal_status);
 8009a0c:	7bfb      	ldrb	r3, [r7, #15]
 8009a0e:	4618      	mov	r0, r3
 8009a10:	f000 f866 	bl	8009ae0 <USBD_Get_USB_Status>
 8009a14:	4603      	mov	r3, r0
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3710      	adds	r7, #16
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}

08009a1e <USBD_LL_Transmit>:
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
		uint8_t *pbuf, uint32_t size)
{
 8009a1e:	b580      	push	{r7, lr}
 8009a20:	b086      	sub	sp, #24
 8009a22:	af00      	add	r7, sp, #0
 8009a24:	60f8      	str	r0, [r7, #12]
 8009a26:	607a      	str	r2, [r7, #4]
 8009a28:	603b      	str	r3, [r7, #0]
 8009a2a:	460b      	mov	r3, r1
 8009a2c:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8009a34:	7af9      	ldrb	r1, [r7, #11]
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	687a      	ldr	r2, [r7, #4]
 8009a3a:	f7f8 fe15 	bl	8002668 <HAL_PCD_EP_Transmit>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	75fb      	strb	r3, [r7, #23]
	return USBD_Get_USB_Status(hal_status);
 8009a42:	7dfb      	ldrb	r3, [r7, #23]
 8009a44:	4618      	mov	r0, r3
 8009a46:	f000 f84b 	bl	8009ae0 <USBD_Get_USB_Status>
 8009a4a:	4603      	mov	r3, r0
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	3718      	adds	r7, #24
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bd80      	pop	{r7, pc}

08009a54 <USBD_LL_PrepareReceive>:
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev,
		uint8_t ep_addr, uint8_t *pbuf,
		uint32_t size)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b086      	sub	sp, #24
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	60f8      	str	r0, [r7, #12]
 8009a5c:	607a      	str	r2, [r7, #4]
 8009a5e:	603b      	str	r3, [r7, #0]
 8009a60:	460b      	mov	r3, r1
 8009a62:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8009a6a:	7af9      	ldrb	r1, [r7, #11]
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	687a      	ldr	r2, [r7, #4]
 8009a70:	f7f8 fdb0 	bl	80025d4 <HAL_PCD_EP_Receive>
 8009a74:	4603      	mov	r3, r0
 8009a76:	75fb      	strb	r3, [r7, #23]
	return USBD_Get_USB_Status(hal_status);
 8009a78:	7dfb      	ldrb	r3, [r7, #23]
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f000 f830 	bl	8009ae0 <USBD_Get_USB_Status>
 8009a80:	4603      	mov	r3, r0
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	3718      	adds	r7, #24
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}

08009a8a <USBD_LL_GetRxDataSize>:
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a8a:	b580      	push	{r7, lr}
 8009a8c:	b082      	sub	sp, #8
 8009a8e:	af00      	add	r7, sp, #0
 8009a90:	6078      	str	r0, [r7, #4]
 8009a92:	460b      	mov	r3, r1
 8009a94:	70fb      	strb	r3, [r7, #3]
	return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009a9c:	78fa      	ldrb	r2, [r7, #3]
 8009a9e:	4611      	mov	r1, r2
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	f7f8 fdc9 	bl	8002638 <HAL_PCD_EP_GetRxCount>
 8009aa6:	4603      	mov	r3, r0
}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	3708      	adds	r7, #8
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bd80      	pop	{r7, pc}

08009ab0 <USBD_static_malloc>:
void *USBD_static_malloc(uint32_t size)
{
 8009ab0:	b480      	push	{r7}
 8009ab2:	b083      	sub	sp, #12
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
	UNUSED(size);
	static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef) / 4) + 1]; /* On 32-bit boundary */
	return mem;
 8009ab8:	4b03      	ldr	r3, [pc, #12]	@ (8009ac8 <USBD_static_malloc+0x18>)
}
 8009aba:	4618      	mov	r0, r3
 8009abc:	370c      	adds	r7, #12
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac4:	4770      	bx	lr
 8009ac6:	bf00      	nop
 8009ac8:	20000b88 	.word	0x20000b88

08009acc <USBD_static_free>:
void USBD_static_free(void *p)
{
 8009acc:	b480      	push	{r7}
 8009ace:	b083      	sub	sp, #12
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
	UNUSED(p);
}
 8009ad4:	bf00      	nop
 8009ad6:	370c      	adds	r7, #12
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ade:	4770      	bx	lr

08009ae0 <USBD_Get_USB_Status>:
{
     HAL_Delay(Delay);
}

USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009ae0:	b480      	push	{r7}
 8009ae2:	b085      	sub	sp, #20
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	71fb      	strb	r3, [r7, #7]
	USBD_StatusTypeDef usb_status = USBD_OK;
 8009aea:	2300      	movs	r3, #0
 8009aec:	73fb      	strb	r3, [r7, #15]
	switch (hal_status)
 8009aee:	79fb      	ldrb	r3, [r7, #7]
 8009af0:	2b03      	cmp	r3, #3
 8009af2:	d817      	bhi.n	8009b24 <USBD_Get_USB_Status+0x44>
 8009af4:	a201      	add	r2, pc, #4	@ (adr r2, 8009afc <USBD_Get_USB_Status+0x1c>)
 8009af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009afa:	bf00      	nop
 8009afc:	08009b0d 	.word	0x08009b0d
 8009b00:	08009b13 	.word	0x08009b13
 8009b04:	08009b19 	.word	0x08009b19
 8009b08:	08009b1f 	.word	0x08009b1f
	{
	case HAL_OK :
		usb_status = USBD_OK;
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	73fb      	strb	r3, [r7, #15]
		break;
 8009b10:	e00b      	b.n	8009b2a <USBD_Get_USB_Status+0x4a>
	case HAL_ERROR :
		usb_status = USBD_FAIL;
 8009b12:	2303      	movs	r3, #3
 8009b14:	73fb      	strb	r3, [r7, #15]
		break;
 8009b16:	e008      	b.n	8009b2a <USBD_Get_USB_Status+0x4a>
	case HAL_BUSY :
		usb_status = USBD_BUSY;
 8009b18:	2301      	movs	r3, #1
 8009b1a:	73fb      	strb	r3, [r7, #15]
		break;
 8009b1c:	e005      	b.n	8009b2a <USBD_Get_USB_Status+0x4a>
	case HAL_TIMEOUT :
		usb_status = USBD_FAIL;
 8009b1e:	2303      	movs	r3, #3
 8009b20:	73fb      	strb	r3, [r7, #15]
		break;
 8009b22:	e002      	b.n	8009b2a <USBD_Get_USB_Status+0x4a>
	default :
		usb_status = USBD_FAIL;
 8009b24:	2303      	movs	r3, #3
 8009b26:	73fb      	strb	r3, [r7, #15]
		break;
 8009b28:	bf00      	nop
	}
	return usb_status;
 8009b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	3714      	adds	r7, #20
 8009b30:	46bd      	mov	sp, r7
 8009b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b36:	4770      	bx	lr

08009b38 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b086      	sub	sp, #24
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	60f8      	str	r0, [r7, #12]
 8009b40:	60b9      	str	r1, [r7, #8]
 8009b42:	4613      	mov	r3, r2
 8009b44:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d10a      	bne.n	8009b62 <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 8009b4c:	4827      	ldr	r0, [pc, #156]	@ (8009bec <USBD_Init+0xb4>)
 8009b4e:	f001 fd9d 	bl	800b68c <iprintf>
 8009b52:	4827      	ldr	r0, [pc, #156]	@ (8009bf0 <USBD_Init+0xb8>)
 8009b54:	f001 fd9a 	bl	800b68c <iprintf>
 8009b58:	200a      	movs	r0, #10
 8009b5a:	f001 fda9 	bl	800b6b0 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009b5e:	2303      	movs	r3, #3
 8009b60:	e03f      	b.n	8009be2 <USBD_Init+0xaa>
  }

#ifdef USE_USBD_COMPOSITE
  /* Parse the table of classes in use */
  for (uint32_t i = 0; i < USBD_MAX_SUPPORTED_CLASS; i++)
 8009b62:	2300      	movs	r3, #0
 8009b64:	617b      	str	r3, [r7, #20]
 8009b66:	e021      	b.n	8009bac <USBD_Init+0x74>
  {
    /* Unlink previous class*/
    pdev->pClass[i] = NULL;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	697a      	ldr	r2, [r7, #20]
 8009b6c:	32ae      	adds	r2, #174	@ 0xae
 8009b6e:	2100      	movs	r1, #0
 8009b70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pUserData[i] = NULL;
 8009b74:	68fa      	ldr	r2, [r7, #12]
 8009b76:	697b      	ldr	r3, [r7, #20]
 8009b78:	33b2      	adds	r3, #178	@ 0xb2
 8009b7a:	009b      	lsls	r3, r3, #2
 8009b7c:	4413      	add	r3, r2
 8009b7e:	2200      	movs	r2, #0
 8009b80:	605a      	str	r2, [r3, #4]

    /* Set class as inactive */
    pdev->tclasslist[i].Active = 0;
 8009b82:	68fa      	ldr	r2, [r7, #12]
 8009b84:	697b      	ldr	r3, [r7, #20]
 8009b86:	212c      	movs	r1, #44	@ 0x2c
 8009b88:	fb01 f303 	mul.w	r3, r1, r3
 8009b8c:	4413      	add	r3, r2
 8009b8e:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8009b92:	2200      	movs	r2, #0
 8009b94:	601a      	str	r2, [r3, #0]
    pdev->NumClasses = 0;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	f8c3 22e4 	str.w	r2, [r3, #740]	@ 0x2e4
    pdev->classId = 0;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
  for (uint32_t i = 0; i < USBD_MAX_SUPPORTED_CLASS; i++)
 8009ba6:	697b      	ldr	r3, [r7, #20]
 8009ba8:	3301      	adds	r3, #1
 8009baa:	617b      	str	r3, [r7, #20]
 8009bac:	697b      	ldr	r3, [r7, #20]
 8009bae:	2b01      	cmp	r3, #1
 8009bb0:	d9da      	bls.n	8009b68 <USBD_Init+0x30>
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
  pdev->pUserData[0] = NULL;
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	f8c3 22dc 	str.w	r2, [r3, #732]	@ 0x2dc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009bba:	68bb      	ldr	r3, [r7, #8]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d003      	beq.n	8009bc8 <USBD_Init+0x90>
  {
    pdev->pDesc = pdesc;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	68ba      	ldr	r2, [r7, #8]
 8009bc4:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	2201      	movs	r2, #1
 8009bcc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	79fa      	ldrb	r2, [r7, #7]
 8009bd4:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009bd6:	68f8      	ldr	r0, [r7, #12]
 8009bd8:	f7ff fe14 	bl	8009804 <USBD_LL_Init>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	74fb      	strb	r3, [r7, #19]

  return ret;
 8009be0:	7cfb      	ldrb	r3, [r7, #19]
}
 8009be2:	4618      	mov	r0, r3
 8009be4:	3718      	adds	r7, #24
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bd80      	pop	{r7, pc}
 8009bea:	bf00      	nop
 8009bec:	0800c7d4 	.word	0x0800c7d4
 8009bf0:	0800c7dc 	.word	0x0800c7dc

08009bf4 <USBD_RegisterClassComposite>:
  * @param  EpAddr: Endpoint Address handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClassComposite(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass,
                                                USBD_CompositeClassTypeDef classtype, uint8_t *EpAddr)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b086      	sub	sp, #24
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	60f8      	str	r0, [r7, #12]
 8009bfc:	60b9      	str	r1, [r7, #8]
 8009bfe:	603b      	str	r3, [r7, #0]
 8009c00:	4613      	mov	r3, r2
 8009c02:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009c04:	2300      	movs	r3, #0
 8009c06:	75fb      	strb	r3, [r7, #23]
  uint16_t len = 0U;
 8009c08:	2300      	movs	r3, #0
 8009c0a:	82bb      	strh	r3, [r7, #20]

  if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) && (pdev->NumClasses < USBD_MAX_SUPPORTED_CLASS))
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8009c12:	2b01      	cmp	r3, #1
 8009c14:	d83d      	bhi.n	8009c92 <USBD_RegisterClassComposite+0x9e>
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	f8d3 32e4 	ldr.w	r3, [r3, #740]	@ 0x2e4
 8009c1c:	2b01      	cmp	r3, #1
 8009c1e:	d838      	bhi.n	8009c92 <USBD_RegisterClassComposite+0x9e>
  {
    if ((uint32_t)pclass != 0U)
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d02a      	beq.n	8009c7c <USBD_RegisterClassComposite+0x88>
    {
      /* Link the class to the USB Device handle */
      pdev->pClass[pdev->classId] = pclass;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	32ae      	adds	r2, #174	@ 0xae
 8009c30:	68b9      	ldr	r1, [r7, #8]
 8009c32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      ret = USBD_OK;
 8009c36:	2300      	movs	r3, #0
 8009c38:	75fb      	strb	r3, [r7, #23]

      pdev->tclasslist[pdev->classId].EpAdd = EpAddr;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8009c40:	68fa      	ldr	r2, [r7, #12]
 8009c42:	212c      	movs	r1, #44	@ 0x2c
 8009c44:	fb01 f303 	mul.w	r3, r1, r3
 8009c48:	4413      	add	r3, r2
 8009c4a:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8009c4e:	683a      	ldr	r2, [r7, #0]
 8009c50:	601a      	str	r2, [r3, #0]

      /* Call the composite class builder */
      (void)USBD_CMPSIT_AddClass(pdev, pclass, classtype, 0);
 8009c52:	79fa      	ldrb	r2, [r7, #7]
 8009c54:	2300      	movs	r3, #0
 8009c56:	68b9      	ldr	r1, [r7, #8]
 8009c58:	68f8      	ldr	r0, [r7, #12]
 8009c5a:	f7fe fd9d 	bl	8008798 <USBD_CMPSIT_AddClass>

      /* Increment the ClassId for the next occurrence */
      pdev->classId ++;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8009c64:	1c5a      	adds	r2, r3, #1
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
      pdev->NumClasses ++;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	f8d3 32e4 	ldr.w	r3, [r3, #740]	@ 0x2e4
 8009c72:	1c5a      	adds	r2, r3, #1
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	f8c3 22e4 	str.w	r2, [r3, #740]	@ 0x2e4
 8009c7a:	e00a      	b.n	8009c92 <USBD_RegisterClassComposite+0x9e>
    }
    else
    {
#if (USBD_DEBUG_LEVEL > 1U)
      USBD_ErrLog("Invalid Class handle");
 8009c7c:	480e      	ldr	r0, [pc, #56]	@ (8009cb8 <USBD_RegisterClassComposite+0xc4>)
 8009c7e:	f001 fd05 	bl	800b68c <iprintf>
 8009c82:	480e      	ldr	r0, [pc, #56]	@ (8009cbc <USBD_RegisterClassComposite+0xc8>)
 8009c84:	f001 fd02 	bl	800b68c <iprintf>
 8009c88:	200a      	movs	r0, #10
 8009c8a:	f001 fd11 	bl	800b6b0 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
      ret = USBD_FAIL;
 8009c8e:	2303      	movs	r3, #3
 8009c90:	75fb      	strb	r3, [r7, #23]
    }
  }

  if (ret == USBD_OK)
 8009c92:	7dfb      	ldrb	r3, [r7, #23]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d109      	bne.n	8009cac <USBD_RegisterClassComposite+0xb8>
  {
    /* Get Device Configuration Descriptor */
#ifdef USE_USB_HS
    pdev->pConfDesc = USBD_CMPSIT.GetHSConfigDescriptor(&len);
#else /* Default USE_USB_FS */
    pdev->pConfDesc = USBD_CMPSIT.GetFSConfigDescriptor(&len);
 8009c98:	4b09      	ldr	r3, [pc, #36]	@ (8009cc0 <USBD_RegisterClassComposite+0xcc>)
 8009c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c9c:	f107 0214 	add.w	r2, r7, #20
 8009ca0:	4610      	mov	r0, r2
 8009ca2:	4798      	blx	r3
 8009ca4:	4602      	mov	r2, r0
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	f8c3 22dc 	str.w	r2, [r3, #732]	@ 0x2dc
#endif /* USE_USB_FS */
  }

  return ret;
 8009cac:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cae:	4618      	mov	r0, r3
 8009cb0:	3718      	adds	r7, #24
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}
 8009cb6:	bf00      	nop
 8009cb8:	0800c7d4 	.word	0x0800c7d4
 8009cbc:	0800c7f4 	.word	0x0800c7f4
 8009cc0:	20000068 	.word	0x20000068

08009cc4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b082      	sub	sp, #8
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f7ff fddd 	bl	8009894 <USBD_LL_Start>
 8009cda:	4603      	mov	r3, r0
}
 8009cdc:	4618      	mov	r0, r3
 8009cde:	3708      	adds	r7, #8
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd80      	pop	{r7, pc}

08009ce4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009ce4:	b480      	push	{r7}
 8009ce6:	b083      	sub	sp, #12
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009cec:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009cee:	4618      	mov	r0, r3
 8009cf0:	370c      	adds	r7, #12
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf8:	4770      	bx	lr

08009cfa <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009cfa:	b580      	push	{r7, lr}
 8009cfc:	b084      	sub	sp, #16
 8009cfe:	af00      	add	r7, sp, #0
 8009d00:	6078      	str	r0, [r7, #4]
 8009d02:	460b      	mov	r3, r1
 8009d04:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d06:	2300      	movs	r3, #0
 8009d08:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Parse the table of classes in use */
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	60bb      	str	r3, [r7, #8]
 8009d0e:	e027      	b.n	8009d60 <USBD_SetClassConfig+0x66>
  {
    /* Check if current class is in use */
    if ((pdev->tclasslist[i].Active) == 1U)
 8009d10:	687a      	ldr	r2, [r7, #4]
 8009d12:	68bb      	ldr	r3, [r7, #8]
 8009d14:	212c      	movs	r1, #44	@ 0x2c
 8009d16:	fb01 f303 	mul.w	r3, r1, r3
 8009d1a:	4413      	add	r3, r2
 8009d1c:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	2b01      	cmp	r3, #1
 8009d24:	d119      	bne.n	8009d5a <USBD_SetClassConfig+0x60>
    {
      if (pdev->pClass[i] != NULL)
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	68ba      	ldr	r2, [r7, #8]
 8009d2a:	32ae      	adds	r2, #174	@ 0xae
 8009d2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d012      	beq.n	8009d5a <USBD_SetClassConfig+0x60>
      {
        pdev->classId = i;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	68ba      	ldr	r2, [r7, #8]
 8009d38:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
        /* Set configuration  and Start the Class*/
        if (pdev->pClass[i]->Init(pdev, cfgidx) != 0U)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	68ba      	ldr	r2, [r7, #8]
 8009d40:	32ae      	adds	r2, #174	@ 0xae
 8009d42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	78fa      	ldrb	r2, [r7, #3]
 8009d4a:	4611      	mov	r1, r2
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	4798      	blx	r3
 8009d50:	4603      	mov	r3, r0
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d001      	beq.n	8009d5a <USBD_SetClassConfig+0x60>
        {
          ret = USBD_FAIL;
 8009d56:	2303      	movs	r3, #3
 8009d58:	73fb      	strb	r3, [r7, #15]
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	3301      	adds	r3, #1
 8009d5e:	60bb      	str	r3, [r7, #8]
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	2b01      	cmp	r3, #1
 8009d64:	d9d4      	bls.n	8009d10 <USBD_SetClassConfig+0x16>
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	3710      	adds	r7, #16
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd80      	pop	{r7, pc}

08009d70 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b084      	sub	sp, #16
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
 8009d78:	460b      	mov	r3, r1
 8009d7a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Parse the table of classes in use */
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 8009d80:	2300      	movs	r3, #0
 8009d82:	60bb      	str	r3, [r7, #8]
 8009d84:	e027      	b.n	8009dd6 <USBD_ClrClassConfig+0x66>
  {
    /* Check if current class is in use */
    if ((pdev->tclasslist[i].Active) == 1U)
 8009d86:	687a      	ldr	r2, [r7, #4]
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	212c      	movs	r1, #44	@ 0x2c
 8009d8c:	fb01 f303 	mul.w	r3, r1, r3
 8009d90:	4413      	add	r3, r2
 8009d92:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	2b01      	cmp	r3, #1
 8009d9a:	d119      	bne.n	8009dd0 <USBD_ClrClassConfig+0x60>
    {
      if (pdev->pClass[i] != NULL)
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	68ba      	ldr	r2, [r7, #8]
 8009da0:	32ae      	adds	r2, #174	@ 0xae
 8009da2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d012      	beq.n	8009dd0 <USBD_ClrClassConfig+0x60>
      {
        pdev->classId = i;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	68ba      	ldr	r2, [r7, #8]
 8009dae:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
        /* Clear configuration  and De-initialize the Class process */
        if (pdev->pClass[i]->DeInit(pdev, cfgidx) != 0U)
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	68ba      	ldr	r2, [r7, #8]
 8009db6:	32ae      	adds	r2, #174	@ 0xae
 8009db8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dbc:	685b      	ldr	r3, [r3, #4]
 8009dbe:	78fa      	ldrb	r2, [r7, #3]
 8009dc0:	4611      	mov	r1, r2
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	4798      	blx	r3
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d001      	beq.n	8009dd0 <USBD_ClrClassConfig+0x60>
        {
          ret = USBD_FAIL;
 8009dcc:	2303      	movs	r3, #3
 8009dce:	73fb      	strb	r3, [r7, #15]
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	3301      	adds	r3, #1
 8009dd4:	60bb      	str	r3, [r7, #8]
 8009dd6:	68bb      	ldr	r3, [r7, #8]
 8009dd8:	2b01      	cmp	r3, #1
 8009dda:	d9d4      	bls.n	8009d86 <USBD_ClrClassConfig+0x16>
  {
    ret = USBD_FAIL;
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dde:	4618      	mov	r0, r3
 8009de0:	3710      	adds	r7, #16
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bd80      	pop	{r7, pc}

08009de6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009de6:	b580      	push	{r7, lr}
 8009de8:	b084      	sub	sp, #16
 8009dea:	af00      	add	r7, sp, #0
 8009dec:	6078      	str	r0, [r7, #4]
 8009dee:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009df6:	6839      	ldr	r1, [r7, #0]
 8009df8:	4618      	mov	r0, r3
 8009dfa:	f001 f94a 	bl	800b092 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2201      	movs	r2, #1
 8009e02:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8009e0c:	461a      	mov	r2, r3
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009e1a:	f003 031f 	and.w	r3, r3, #31
 8009e1e:	2b02      	cmp	r3, #2
 8009e20:	d01a      	beq.n	8009e58 <USBD_LL_SetupStage+0x72>
 8009e22:	2b02      	cmp	r3, #2
 8009e24:	d822      	bhi.n	8009e6c <USBD_LL_SetupStage+0x86>
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d002      	beq.n	8009e30 <USBD_LL_SetupStage+0x4a>
 8009e2a:	2b01      	cmp	r3, #1
 8009e2c:	d00a      	beq.n	8009e44 <USBD_LL_SetupStage+0x5e>
 8009e2e:	e01d      	b.n	8009e6c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009e36:	4619      	mov	r1, r3
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f000 fb67 	bl	800a50c <USBD_StdDevReq>
 8009e3e:	4603      	mov	r3, r0
 8009e40:	73fb      	strb	r3, [r7, #15]
      break;
 8009e42:	e020      	b.n	8009e86 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009e4a:	4619      	mov	r1, r3
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f000 fbcf 	bl	800a5f0 <USBD_StdItfReq>
 8009e52:	4603      	mov	r3, r0
 8009e54:	73fb      	strb	r3, [r7, #15]
      break;
 8009e56:	e016      	b.n	8009e86 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009e5e:	4619      	mov	r1, r3
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f000 fc31 	bl	800a6c8 <USBD_StdEPReq>
 8009e66:	4603      	mov	r3, r0
 8009e68:	73fb      	strb	r3, [r7, #15]
      break;
 8009e6a:	e00c      	b.n	8009e86 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009e72:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009e76:	b2db      	uxtb	r3, r3
 8009e78:	4619      	mov	r1, r3
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f7ff fd58 	bl	8009930 <USBD_LL_StallEP>
 8009e80:	4603      	mov	r3, r0
 8009e82:	73fb      	strb	r3, [r7, #15]
      break;
 8009e84:	bf00      	nop
  }

  return ret;
 8009e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	3710      	adds	r7, #16
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bd80      	pop	{r7, pc}

08009e90 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b086      	sub	sp, #24
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	60f8      	str	r0, [r7, #12]
 8009e98:	460b      	mov	r3, r1
 8009e9a:	607a      	str	r2, [r7, #4]
 8009e9c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009ea2:	7afb      	ldrb	r3, [r7, #11]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d16e      	bne.n	8009f86 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009eae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009eb6:	2b03      	cmp	r3, #3
 8009eb8:	f040 8098 	bne.w	8009fec <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009ebc:	693b      	ldr	r3, [r7, #16]
 8009ebe:	689a      	ldr	r2, [r3, #8]
 8009ec0:	693b      	ldr	r3, [r7, #16]
 8009ec2:	68db      	ldr	r3, [r3, #12]
 8009ec4:	429a      	cmp	r2, r3
 8009ec6:	d913      	bls.n	8009ef0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009ec8:	693b      	ldr	r3, [r7, #16]
 8009eca:	689a      	ldr	r2, [r3, #8]
 8009ecc:	693b      	ldr	r3, [r7, #16]
 8009ece:	68db      	ldr	r3, [r3, #12]
 8009ed0:	1ad2      	subs	r2, r2, r3
 8009ed2:	693b      	ldr	r3, [r7, #16]
 8009ed4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009ed6:	693b      	ldr	r3, [r7, #16]
 8009ed8:	68da      	ldr	r2, [r3, #12]
 8009eda:	693b      	ldr	r3, [r7, #16]
 8009edc:	689b      	ldr	r3, [r3, #8]
 8009ede:	4293      	cmp	r3, r2
 8009ee0:	bf28      	it	cs
 8009ee2:	4613      	movcs	r3, r2
 8009ee4:	461a      	mov	r2, r3
 8009ee6:	6879      	ldr	r1, [r7, #4]
 8009ee8:	68f8      	ldr	r0, [r7, #12]
 8009eea:	f001 fad5 	bl	800b498 <USBD_CtlContinueRx>
 8009eee:	e07d      	b.n	8009fec <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009ef6:	f003 031f 	and.w	r3, r3, #31
 8009efa:	2b02      	cmp	r3, #2
 8009efc:	d014      	beq.n	8009f28 <USBD_LL_DataOutStage+0x98>
 8009efe:	2b02      	cmp	r3, #2
 8009f00:	d81d      	bhi.n	8009f3e <USBD_LL_DataOutStage+0xae>
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d002      	beq.n	8009f0c <USBD_LL_DataOutStage+0x7c>
 8009f06:	2b01      	cmp	r3, #1
 8009f08:	d003      	beq.n	8009f12 <USBD_LL_DataOutStage+0x82>
 8009f0a:	e018      	b.n	8009f3e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	75bb      	strb	r3, [r7, #22]
            break;
 8009f10:	e018      	b.n	8009f44 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009f18:	b2db      	uxtb	r3, r3
 8009f1a:	4619      	mov	r1, r3
 8009f1c:	68f8      	ldr	r0, [r7, #12]
 8009f1e:	f000 f9da 	bl	800a2d6 <USBD_CoreFindIF>
 8009f22:	4603      	mov	r3, r0
 8009f24:	75bb      	strb	r3, [r7, #22]
            break;
 8009f26:	e00d      	b.n	8009f44 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009f2e:	b2db      	uxtb	r3, r3
 8009f30:	4619      	mov	r1, r3
 8009f32:	68f8      	ldr	r0, [r7, #12]
 8009f34:	f000 fa1b 	bl	800a36e <USBD_CoreFindEP>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	75bb      	strb	r3, [r7, #22]
            break;
 8009f3c:	e002      	b.n	8009f44 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009f3e:	2300      	movs	r3, #0
 8009f40:	75bb      	strb	r3, [r7, #22]
            break;
 8009f42:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009f44:	7dbb      	ldrb	r3, [r7, #22]
 8009f46:	2b01      	cmp	r3, #1
 8009f48:	d819      	bhi.n	8009f7e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f50:	b2db      	uxtb	r3, r3
 8009f52:	2b03      	cmp	r3, #3
 8009f54:	d113      	bne.n	8009f7e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009f56:	7dba      	ldrb	r2, [r7, #22]
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	32ae      	adds	r2, #174	@ 0xae
 8009f5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f60:	691b      	ldr	r3, [r3, #16]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d00b      	beq.n	8009f7e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009f66:	7dba      	ldrb	r2, [r7, #22]
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009f6e:	7dba      	ldrb	r2, [r7, #22]
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	32ae      	adds	r2, #174	@ 0xae
 8009f74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f78:	691b      	ldr	r3, [r3, #16]
 8009f7a:	68f8      	ldr	r0, [r7, #12]
 8009f7c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009f7e:	68f8      	ldr	r0, [r7, #12]
 8009f80:	f001 fa9b 	bl	800b4ba <USBD_CtlSendStatus>
 8009f84:	e032      	b.n	8009fec <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009f86:	7afb      	ldrb	r3, [r7, #11]
 8009f88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f8c:	b2db      	uxtb	r3, r3
 8009f8e:	4619      	mov	r1, r3
 8009f90:	68f8      	ldr	r0, [r7, #12]
 8009f92:	f000 f9ec 	bl	800a36e <USBD_CoreFindEP>
 8009f96:	4603      	mov	r3, r0
 8009f98:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009f9a:	7dbb      	ldrb	r3, [r7, #22]
 8009f9c:	2bff      	cmp	r3, #255	@ 0xff
 8009f9e:	d025      	beq.n	8009fec <USBD_LL_DataOutStage+0x15c>
 8009fa0:	7dbb      	ldrb	r3, [r7, #22]
 8009fa2:	2b01      	cmp	r3, #1
 8009fa4:	d822      	bhi.n	8009fec <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009fac:	b2db      	uxtb	r3, r3
 8009fae:	2b03      	cmp	r3, #3
 8009fb0:	d117      	bne.n	8009fe2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009fb2:	7dba      	ldrb	r2, [r7, #22]
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	32ae      	adds	r2, #174	@ 0xae
 8009fb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fbc:	699b      	ldr	r3, [r3, #24]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d00f      	beq.n	8009fe2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009fc2:	7dba      	ldrb	r2, [r7, #22]
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009fca:	7dba      	ldrb	r2, [r7, #22]
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	32ae      	adds	r2, #174	@ 0xae
 8009fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fd4:	699b      	ldr	r3, [r3, #24]
 8009fd6:	7afa      	ldrb	r2, [r7, #11]
 8009fd8:	4611      	mov	r1, r2
 8009fda:	68f8      	ldr	r0, [r7, #12]
 8009fdc:	4798      	blx	r3
 8009fde:	4603      	mov	r3, r0
 8009fe0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009fe2:	7dfb      	ldrb	r3, [r7, #23]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d001      	beq.n	8009fec <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009fe8:	7dfb      	ldrb	r3, [r7, #23]
 8009fea:	e000      	b.n	8009fee <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009fec:	2300      	movs	r3, #0
}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	3718      	adds	r7, #24
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd80      	pop	{r7, pc}

08009ff6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009ff6:	b580      	push	{r7, lr}
 8009ff8:	b086      	sub	sp, #24
 8009ffa:	af00      	add	r7, sp, #0
 8009ffc:	60f8      	str	r0, [r7, #12]
 8009ffe:	460b      	mov	r3, r1
 800a000:	607a      	str	r2, [r7, #4]
 800a002:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a004:	7afb      	ldrb	r3, [r7, #11]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d16f      	bne.n	800a0ea <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	3314      	adds	r3, #20
 800a00e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a016:	2b02      	cmp	r3, #2
 800a018:	d15a      	bne.n	800a0d0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a01a:	693b      	ldr	r3, [r7, #16]
 800a01c:	689a      	ldr	r2, [r3, #8]
 800a01e:	693b      	ldr	r3, [r7, #16]
 800a020:	68db      	ldr	r3, [r3, #12]
 800a022:	429a      	cmp	r2, r3
 800a024:	d914      	bls.n	800a050 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a026:	693b      	ldr	r3, [r7, #16]
 800a028:	689a      	ldr	r2, [r3, #8]
 800a02a:	693b      	ldr	r3, [r7, #16]
 800a02c:	68db      	ldr	r3, [r3, #12]
 800a02e:	1ad2      	subs	r2, r2, r3
 800a030:	693b      	ldr	r3, [r7, #16]
 800a032:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a034:	693b      	ldr	r3, [r7, #16]
 800a036:	689b      	ldr	r3, [r3, #8]
 800a038:	461a      	mov	r2, r3
 800a03a:	6879      	ldr	r1, [r7, #4]
 800a03c:	68f8      	ldr	r0, [r7, #12]
 800a03e:	f001 f9fd 	bl	800b43c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a042:	2300      	movs	r3, #0
 800a044:	2200      	movs	r2, #0
 800a046:	2100      	movs	r1, #0
 800a048:	68f8      	ldr	r0, [r7, #12]
 800a04a:	f7ff fd03 	bl	8009a54 <USBD_LL_PrepareReceive>
 800a04e:	e03f      	b.n	800a0d0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a050:	693b      	ldr	r3, [r7, #16]
 800a052:	68da      	ldr	r2, [r3, #12]
 800a054:	693b      	ldr	r3, [r7, #16]
 800a056:	689b      	ldr	r3, [r3, #8]
 800a058:	429a      	cmp	r2, r3
 800a05a:	d11c      	bne.n	800a096 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a05c:	693b      	ldr	r3, [r7, #16]
 800a05e:	685a      	ldr	r2, [r3, #4]
 800a060:	693b      	ldr	r3, [r7, #16]
 800a062:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a064:	429a      	cmp	r2, r3
 800a066:	d316      	bcc.n	800a096 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a068:	693b      	ldr	r3, [r7, #16]
 800a06a:	685a      	ldr	r2, [r3, #4]
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a072:	429a      	cmp	r2, r3
 800a074:	d20f      	bcs.n	800a096 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a076:	2200      	movs	r2, #0
 800a078:	2100      	movs	r1, #0
 800a07a:	68f8      	ldr	r0, [r7, #12]
 800a07c:	f001 f9de 	bl	800b43c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	2200      	movs	r2, #0
 800a084:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a088:	2300      	movs	r3, #0
 800a08a:	2200      	movs	r2, #0
 800a08c:	2100      	movs	r1, #0
 800a08e:	68f8      	ldr	r0, [r7, #12]
 800a090:	f7ff fce0 	bl	8009a54 <USBD_LL_PrepareReceive>
 800a094:	e01c      	b.n	800a0d0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a09c:	b2db      	uxtb	r3, r3
 800a09e:	2b03      	cmp	r3, #3
 800a0a0:	d10f      	bne.n	800a0c2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a0a8:	68db      	ldr	r3, [r3, #12]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d009      	beq.n	800a0c2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a0bc:	68db      	ldr	r3, [r3, #12]
 800a0be:	68f8      	ldr	r0, [r7, #12]
 800a0c0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a0c2:	2180      	movs	r1, #128	@ 0x80
 800a0c4:	68f8      	ldr	r0, [r7, #12]
 800a0c6:	f7ff fc33 	bl	8009930 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a0ca:	68f8      	ldr	r0, [r7, #12]
 800a0cc:	f001 fa08 	bl	800b4e0 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d03a      	beq.n	800a150 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a0da:	68f8      	ldr	r0, [r7, #12]
 800a0dc:	f7ff fe02 	bl	8009ce4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a0e8:	e032      	b.n	800a150 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a0ea:	7afb      	ldrb	r3, [r7, #11]
 800a0ec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a0f0:	b2db      	uxtb	r3, r3
 800a0f2:	4619      	mov	r1, r3
 800a0f4:	68f8      	ldr	r0, [r7, #12]
 800a0f6:	f000 f93a 	bl	800a36e <USBD_CoreFindEP>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a0fe:	7dfb      	ldrb	r3, [r7, #23]
 800a100:	2bff      	cmp	r3, #255	@ 0xff
 800a102:	d025      	beq.n	800a150 <USBD_LL_DataInStage+0x15a>
 800a104:	7dfb      	ldrb	r3, [r7, #23]
 800a106:	2b01      	cmp	r3, #1
 800a108:	d822      	bhi.n	800a150 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a110:	b2db      	uxtb	r3, r3
 800a112:	2b03      	cmp	r3, #3
 800a114:	d11c      	bne.n	800a150 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a116:	7dfa      	ldrb	r2, [r7, #23]
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	32ae      	adds	r2, #174	@ 0xae
 800a11c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a120:	695b      	ldr	r3, [r3, #20]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d014      	beq.n	800a150 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a126:	7dfa      	ldrb	r2, [r7, #23]
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a12e:	7dfa      	ldrb	r2, [r7, #23]
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	32ae      	adds	r2, #174	@ 0xae
 800a134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a138:	695b      	ldr	r3, [r3, #20]
 800a13a:	7afa      	ldrb	r2, [r7, #11]
 800a13c:	4611      	mov	r1, r2
 800a13e:	68f8      	ldr	r0, [r7, #12]
 800a140:	4798      	blx	r3
 800a142:	4603      	mov	r3, r0
 800a144:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a146:	7dbb      	ldrb	r3, [r7, #22]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d001      	beq.n	800a150 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a14c:	7dbb      	ldrb	r3, [r7, #22]
 800a14e:	e000      	b.n	800a152 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a150:	2300      	movs	r3, #0
}
 800a152:	4618      	mov	r0, r3
 800a154:	3718      	adds	r7, #24
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}

0800a15a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a15a:	b580      	push	{r7, lr}
 800a15c:	b084      	sub	sp, #16
 800a15e:	af00      	add	r7, sp, #0
 800a160:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a162:	2300      	movs	r3, #0
 800a164:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	2201      	movs	r2, #1
 800a16a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	2200      	movs	r2, #0
 800a172:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	2200      	movs	r2, #0
 800a17a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2200      	movs	r2, #0
 800a180:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2200      	movs	r2, #0
 800a188:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0

#ifdef USE_USBD_COMPOSITE
  /* Parse the table of classes in use */
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 800a18c:	2300      	movs	r3, #0
 800a18e:	60bb      	str	r3, [r7, #8]
 800a190:	e031      	b.n	800a1f6 <USBD_LL_Reset+0x9c>
  {
    /* Check if current class is in use */
    if ((pdev->tclasslist[i].Active) == 1U)
 800a192:	687a      	ldr	r2, [r7, #4]
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	212c      	movs	r1, #44	@ 0x2c
 800a198:	fb01 f303 	mul.w	r3, r1, r3
 800a19c:	4413      	add	r3, r2
 800a19e:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	2b01      	cmp	r3, #1
 800a1a6:	d123      	bne.n	800a1f0 <USBD_LL_Reset+0x96>
    {
      if (pdev->pClass[i] != NULL)
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	68ba      	ldr	r2, [r7, #8]
 800a1ac:	32ae      	adds	r2, #174	@ 0xae
 800a1ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d01c      	beq.n	800a1f0 <USBD_LL_Reset+0x96>
      {
        pdev->classId = i;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	68ba      	ldr	r2, [r7, #8]
 800a1ba:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
        /* Clear configuration  and De-initialize the Class process*/

        if (pdev->pClass[i]->DeInit != NULL)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	68ba      	ldr	r2, [r7, #8]
 800a1c2:	32ae      	adds	r2, #174	@ 0xae
 800a1c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1c8:	685b      	ldr	r3, [r3, #4]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d010      	beq.n	800a1f0 <USBD_LL_Reset+0x96>
        {
          if (pdev->pClass[i]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	68ba      	ldr	r2, [r7, #8]
 800a1d2:	32ae      	adds	r2, #174	@ 0xae
 800a1d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1d8:	685b      	ldr	r3, [r3, #4]
 800a1da:	687a      	ldr	r2, [r7, #4]
 800a1dc:	6852      	ldr	r2, [r2, #4]
 800a1de:	b2d2      	uxtb	r2, r2
 800a1e0:	4611      	mov	r1, r2
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	4798      	blx	r3
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d001      	beq.n	800a1f0 <USBD_LL_Reset+0x96>
          {
            ret = USBD_FAIL;
 800a1ec:	2303      	movs	r3, #3
 800a1ee:	73fb      	strb	r3, [r7, #15]
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 800a1f0:	68bb      	ldr	r3, [r7, #8]
 800a1f2:	3301      	adds	r3, #1
 800a1f4:	60bb      	str	r3, [r7, #8]
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	2b01      	cmp	r3, #1
 800a1fa:	d9ca      	bls.n	800a192 <USBD_LL_Reset+0x38>
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a1fc:	2340      	movs	r3, #64	@ 0x40
 800a1fe:	2200      	movs	r2, #0
 800a200:	2100      	movs	r1, #0
 800a202:	6878      	ldr	r0, [r7, #4]
 800a204:	f7ff fb5b 	bl	80098be <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2201      	movs	r2, #1
 800a20c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2240      	movs	r2, #64	@ 0x40
 800a214:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a218:	2340      	movs	r3, #64	@ 0x40
 800a21a:	2200      	movs	r2, #0
 800a21c:	2180      	movs	r1, #128	@ 0x80
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f7ff fb4d 	bl	80098be <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2201      	movs	r2, #1
 800a228:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2240      	movs	r2, #64	@ 0x40
 800a22e:	621a      	str	r2, [r3, #32]

  return ret;
 800a230:	7bfb      	ldrb	r3, [r7, #15]
}
 800a232:	4618      	mov	r0, r3
 800a234:	3710      	adds	r7, #16
 800a236:	46bd      	mov	sp, r7
 800a238:	bd80      	pop	{r7, pc}

0800a23a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a23a:	b480      	push	{r7}
 800a23c:	b083      	sub	sp, #12
 800a23e:	af00      	add	r7, sp, #0
 800a240:	6078      	str	r0, [r7, #4]
 800a242:	460b      	mov	r3, r1
 800a244:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	78fa      	ldrb	r2, [r7, #3]
 800a24a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a24c:	2300      	movs	r3, #0
}
 800a24e:	4618      	mov	r0, r3
 800a250:	370c      	adds	r7, #12
 800a252:	46bd      	mov	sp, r7
 800a254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a258:	4770      	bx	lr

0800a25a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a25a:	b580      	push	{r7, lr}
 800a25c:	b084      	sub	sp, #16
 800a25e:	af00      	add	r7, sp, #0
 800a260:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a268:	b2db      	uxtb	r3, r3
 800a26a:	2b03      	cmp	r3, #3
 800a26c:	d12e      	bne.n	800a2cc <USBD_LL_SOF+0x72>
  {
#ifdef USE_USBD_COMPOSITE
    /* Parse the table of classes in use */
    for (uint32_t i = 0; i < USBD_MAX_SUPPORTED_CLASS; i++)
 800a26e:	2300      	movs	r3, #0
 800a270:	60fb      	str	r3, [r7, #12]
 800a272:	e028      	b.n	800a2c6 <USBD_LL_SOF+0x6c>
    {
      /* Check if current class is in use */
      if ((pdev->tclasslist[i].Active) == 1U)
 800a274:	687a      	ldr	r2, [r7, #4]
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	212c      	movs	r1, #44	@ 0x2c
 800a27a:	fb01 f303 	mul.w	r3, r1, r3
 800a27e:	4413      	add	r3, r2
 800a280:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	2b01      	cmp	r3, #1
 800a288:	d11a      	bne.n	800a2c0 <USBD_LL_SOF+0x66>
      {
        if (pdev->pClass[i] != NULL)
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	68fa      	ldr	r2, [r7, #12]
 800a28e:	32ae      	adds	r2, #174	@ 0xae
 800a290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d013      	beq.n	800a2c0 <USBD_LL_SOF+0x66>
        {
          if (pdev->pClass[i]->SOF != NULL)
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	68fa      	ldr	r2, [r7, #12]
 800a29c:	32ae      	adds	r2, #174	@ 0xae
 800a29e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2a2:	69db      	ldr	r3, [r3, #28]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d00b      	beq.n	800a2c0 <USBD_LL_SOF+0x66>
          {
            pdev->classId = i;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	68fa      	ldr	r2, [r7, #12]
 800a2ac:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
            (void)pdev->pClass[i]->SOF(pdev);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	68fa      	ldr	r2, [r7, #12]
 800a2b4:	32ae      	adds	r2, #174	@ 0xae
 800a2b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2ba:	69db      	ldr	r3, [r3, #28]
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	4798      	blx	r3
    for (uint32_t i = 0; i < USBD_MAX_SUPPORTED_CLASS; i++)
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	3301      	adds	r3, #1
 800a2c4:	60fb      	str	r3, [r7, #12]
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	2b01      	cmp	r3, #1
 800a2ca:	d9d3      	bls.n	800a274 <USBD_LL_SOF+0x1a>
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a2cc:	2300      	movs	r3, #0
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	3710      	adds	r7, #16
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}

0800a2d6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a2d6:	b480      	push	{r7}
 800a2d8:	b085      	sub	sp, #20
 800a2da:	af00      	add	r7, sp, #0
 800a2dc:	6078      	str	r0, [r7, #4]
 800a2de:	460b      	mov	r3, r1
 800a2e0:	70fb      	strb	r3, [r7, #3]
#ifdef USE_USBD_COMPOSITE
  /* Parse the table of classes in use */
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	60fb      	str	r3, [r7, #12]
 800a2e6:	e038      	b.n	800a35a <USBD_CoreFindIF+0x84>
  {
    /* Check if current class is in use */
    if ((pdev->tclasslist[i].Active) == 1U)
 800a2e8:	687a      	ldr	r2, [r7, #4]
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	212c      	movs	r1, #44	@ 0x2c
 800a2ee:	fb01 f303 	mul.w	r3, r1, r3
 800a2f2:	4413      	add	r3, r2
 800a2f4:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	2b01      	cmp	r3, #1
 800a2fc:	d12a      	bne.n	800a354 <USBD_CoreFindIF+0x7e>
    {
      /* Parse all interfaces listed in the current class */
      for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 800a2fe:	2300      	movs	r3, #0
 800a300:	60bb      	str	r3, [r7, #8]
 800a302:	e01b      	b.n	800a33c <USBD_CoreFindIF+0x66>
      {
        /* Check if requested Interface matches the current class interface */
        if (pdev->tclasslist[i].Ifs[j] == index)
 800a304:	687a      	ldr	r2, [r7, #4]
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	212c      	movs	r1, #44	@ 0x2c
 800a30a:	fb01 f303 	mul.w	r3, r1, r3
 800a30e:	441a      	add	r2, r3
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	4413      	add	r3, r2
 800a314:	f503 7343 	add.w	r3, r3, #780	@ 0x30c
 800a318:	781b      	ldrb	r3, [r3, #0]
 800a31a:	78fa      	ldrb	r2, [r7, #3]
 800a31c:	429a      	cmp	r2, r3
 800a31e:	d10a      	bne.n	800a336 <USBD_CoreFindIF+0x60>
        {
          if (pdev->pClass[i]->Setup != NULL)
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	68fa      	ldr	r2, [r7, #12]
 800a324:	32ae      	adds	r2, #174	@ 0xae
 800a326:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a32a:	689b      	ldr	r3, [r3, #8]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d002      	beq.n	800a336 <USBD_CoreFindIF+0x60>
          {
            return (uint8_t)i;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	b2db      	uxtb	r3, r3
 800a334:	e015      	b.n	800a362 <USBD_CoreFindIF+0x8c>
      for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 800a336:	68bb      	ldr	r3, [r7, #8]
 800a338:	3301      	adds	r3, #1
 800a33a:	60bb      	str	r3, [r7, #8]
 800a33c:	687a      	ldr	r2, [r7, #4]
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	212c      	movs	r1, #44	@ 0x2c
 800a342:	fb01 f303 	mul.w	r3, r1, r3
 800a346:	4413      	add	r3, r2
 800a348:	f503 7342 	add.w	r3, r3, #776	@ 0x308
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	68ba      	ldr	r2, [r7, #8]
 800a350:	429a      	cmp	r2, r3
 800a352:	d3d7      	bcc.n	800a304 <USBD_CoreFindIF+0x2e>
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	3301      	adds	r3, #1
 800a358:	60fb      	str	r3, [r7, #12]
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	2b01      	cmp	r3, #1
 800a35e:	d9c3      	bls.n	800a2e8 <USBD_CoreFindIF+0x12>
        }
      }
    }
  }

  return 0xFFU;
 800a360:	23ff      	movs	r3, #255	@ 0xff
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 800a362:	4618      	mov	r0, r3
 800a364:	3714      	adds	r7, #20
 800a366:	46bd      	mov	sp, r7
 800a368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36c:	4770      	bx	lr

0800a36e <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a36e:	b480      	push	{r7}
 800a370:	b085      	sub	sp, #20
 800a372:	af00      	add	r7, sp, #0
 800a374:	6078      	str	r0, [r7, #4]
 800a376:	460b      	mov	r3, r1
 800a378:	70fb      	strb	r3, [r7, #3]
#ifdef USE_USBD_COMPOSITE
  /* Parse the table of classes in use */
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 800a37a:	2300      	movs	r3, #0
 800a37c:	60fb      	str	r3, [r7, #12]
 800a37e:	e039      	b.n	800a3f4 <USBD_CoreFindEP+0x86>
  {
    /* Check if current class is in use */
    if ((pdev->tclasslist[i].Active) == 1U)
 800a380:	687a      	ldr	r2, [r7, #4]
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	212c      	movs	r1, #44	@ 0x2c
 800a386:	fb01 f303 	mul.w	r3, r1, r3
 800a38a:	4413      	add	r3, r2
 800a38c:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	2b01      	cmp	r3, #1
 800a394:	d12b      	bne.n	800a3ee <USBD_CoreFindEP+0x80>
    {
      /* Parse all endpoints listed in the current class */
      for (uint32_t j = 0U; j < pdev->tclasslist[i].NumEps; j++)
 800a396:	2300      	movs	r3, #0
 800a398:	60bb      	str	r3, [r7, #8]
 800a39a:	e01c      	b.n	800a3d6 <USBD_CoreFindEP+0x68>
      {
        /* Check if requested endpoint matches the current class endpoint */
        if (pdev->tclasslist[i].Eps[j].add == index)
 800a39c:	6879      	ldr	r1, [r7, #4]
 800a39e:	68fa      	ldr	r2, [r7, #12]
 800a3a0:	4613      	mov	r3, r2
 800a3a2:	009b      	lsls	r3, r3, #2
 800a3a4:	4413      	add	r3, r2
 800a3a6:	005b      	lsls	r3, r3, #1
 800a3a8:	4413      	add	r3, r2
 800a3aa:	68ba      	ldr	r2, [r7, #8]
 800a3ac:	4413      	add	r3, r2
 800a3ae:	33be      	adds	r3, #190	@ 0xbe
 800a3b0:	f811 3023 	ldrb.w	r3, [r1, r3, lsl #2]
 800a3b4:	78fa      	ldrb	r2, [r7, #3]
 800a3b6:	429a      	cmp	r2, r3
 800a3b8:	d10a      	bne.n	800a3d0 <USBD_CoreFindEP+0x62>
        {
          if (pdev->pClass[i]->Setup != NULL)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	68fa      	ldr	r2, [r7, #12]
 800a3be:	32ae      	adds	r2, #174	@ 0xae
 800a3c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3c4:	689b      	ldr	r3, [r3, #8]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d002      	beq.n	800a3d0 <USBD_CoreFindEP+0x62>
          {
            return (uint8_t)i;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	b2db      	uxtb	r3, r3
 800a3ce:	e015      	b.n	800a3fc <USBD_CoreFindEP+0x8e>
      for (uint32_t j = 0U; j < pdev->tclasslist[i].NumEps; j++)
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	3301      	adds	r3, #1
 800a3d4:	60bb      	str	r3, [r7, #8]
 800a3d6:	687a      	ldr	r2, [r7, #4]
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	212c      	movs	r1, #44	@ 0x2c
 800a3dc:	fb01 f303 	mul.w	r3, r1, r3
 800a3e0:	4413      	add	r3, r2
 800a3e2:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	68ba      	ldr	r2, [r7, #8]
 800a3ea:	429a      	cmp	r2, r3
 800a3ec:	d3d6      	bcc.n	800a39c <USBD_CoreFindEP+0x2e>
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	3301      	adds	r3, #1
 800a3f2:	60fb      	str	r3, [r7, #12]
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	2b01      	cmp	r3, #1
 800a3f8:	d9c2      	bls.n	800a380 <USBD_CoreFindEP+0x12>
        }
      }
    }
  }

  return 0xFFU;
 800a3fa:	23ff      	movs	r3, #255	@ 0xff
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	3714      	adds	r7, #20
 800a400:	46bd      	mov	sp, r7
 800a402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a406:	4770      	bx	lr

0800a408 <USBD_CoreGetEPAdd>:
  * @param  ep_type: USBD_EP_TYPE_CTRL, USBD_EP_TYPE_ISOC, USBD_EP_TYPE_BULK or USBD_EP_TYPE_INTR
  * @param  ClassId: The Class ID
  * @retval Address of the selected endpoint or 0xFFU if no endpoint found.
  */
uint8_t USBD_CoreGetEPAdd(USBD_HandleTypeDef *pdev, uint8_t ep_dir, uint8_t ep_type, uint8_t ClassId)
{
 800a408:	b480      	push	{r7}
 800a40a:	b085      	sub	sp, #20
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
 800a410:	4608      	mov	r0, r1
 800a412:	4611      	mov	r1, r2
 800a414:	461a      	mov	r2, r3
 800a416:	4603      	mov	r3, r0
 800a418:	70fb      	strb	r3, [r7, #3]
 800a41a:	460b      	mov	r3, r1
 800a41c:	70bb      	strb	r3, [r7, #2]
 800a41e:	4613      	mov	r3, r2
 800a420:	707b      	strb	r3, [r7, #1]
  uint8_t idx;

  /* Find the EP address in the selected class table */
  for (idx = 0; idx < pdev->tclasslist[ClassId].NumEps; idx++)
 800a422:	2300      	movs	r3, #0
 800a424:	73fb      	strb	r3, [r7, #15]
 800a426:	e03f      	b.n	800a4a8 <USBD_CoreGetEPAdd+0xa0>
  {
    if (((pdev->tclasslist[ClassId].Eps[idx].add & USBD_EP_IN) == ep_dir) && \
 800a428:	787a      	ldrb	r2, [r7, #1]
 800a42a:	7bf8      	ldrb	r0, [r7, #15]
 800a42c:	6879      	ldr	r1, [r7, #4]
 800a42e:	4613      	mov	r3, r2
 800a430:	009b      	lsls	r3, r3, #2
 800a432:	4413      	add	r3, r2
 800a434:	005b      	lsls	r3, r3, #1
 800a436:	4413      	add	r3, r2
 800a438:	4403      	add	r3, r0
 800a43a:	33be      	adds	r3, #190	@ 0xbe
 800a43c:	f811 3023 	ldrb.w	r3, [r1, r3, lsl #2]
 800a440:	f003 0280 	and.w	r2, r3, #128	@ 0x80
 800a444:	78fb      	ldrb	r3, [r7, #3]
 800a446:	429a      	cmp	r2, r3
 800a448:	d12b      	bne.n	800a4a2 <USBD_CoreGetEPAdd+0x9a>
        (pdev->tclasslist[ClassId].Eps[idx].type == ep_type) && \
 800a44a:	787a      	ldrb	r2, [r7, #1]
 800a44c:	7bf8      	ldrb	r0, [r7, #15]
 800a44e:	6879      	ldr	r1, [r7, #4]
 800a450:	4613      	mov	r3, r2
 800a452:	009b      	lsls	r3, r3, #2
 800a454:	4413      	add	r3, r2
 800a456:	005b      	lsls	r3, r3, #1
 800a458:	4413      	add	r3, r2
 800a45a:	4403      	add	r3, r0
 800a45c:	33be      	adds	r3, #190	@ 0xbe
 800a45e:	009b      	lsls	r3, r3, #2
 800a460:	440b      	add	r3, r1
 800a462:	785b      	ldrb	r3, [r3, #1]
    if (((pdev->tclasslist[ClassId].Eps[idx].add & USBD_EP_IN) == ep_dir) && \
 800a464:	78ba      	ldrb	r2, [r7, #2]
 800a466:	429a      	cmp	r2, r3
 800a468:	d11b      	bne.n	800a4a2 <USBD_CoreGetEPAdd+0x9a>
        (pdev->tclasslist[ClassId].Eps[idx].is_used != 0U))
 800a46a:	787a      	ldrb	r2, [r7, #1]
 800a46c:	7bf8      	ldrb	r0, [r7, #15]
 800a46e:	6879      	ldr	r1, [r7, #4]
 800a470:	4613      	mov	r3, r2
 800a472:	009b      	lsls	r3, r3, #2
 800a474:	4413      	add	r3, r2
 800a476:	005b      	lsls	r3, r3, #1
 800a478:	4413      	add	r3, r2
 800a47a:	4403      	add	r3, r0
 800a47c:	33be      	adds	r3, #190	@ 0xbe
 800a47e:	009b      	lsls	r3, r3, #2
 800a480:	440b      	add	r3, r1
 800a482:	78db      	ldrb	r3, [r3, #3]
        (pdev->tclasslist[ClassId].Eps[idx].type == ep_type) && \
 800a484:	2b00      	cmp	r3, #0
 800a486:	d00c      	beq.n	800a4a2 <USBD_CoreGetEPAdd+0x9a>
    {
      return (pdev->tclasslist[ClassId].Eps[idx].add);
 800a488:	787a      	ldrb	r2, [r7, #1]
 800a48a:	7bf8      	ldrb	r0, [r7, #15]
 800a48c:	6879      	ldr	r1, [r7, #4]
 800a48e:	4613      	mov	r3, r2
 800a490:	009b      	lsls	r3, r3, #2
 800a492:	4413      	add	r3, r2
 800a494:	005b      	lsls	r3, r3, #1
 800a496:	4413      	add	r3, r2
 800a498:	4403      	add	r3, r0
 800a49a:	33be      	adds	r3, #190	@ 0xbe
 800a49c:	f811 3023 	ldrb.w	r3, [r1, r3, lsl #2]
 800a4a0:	e00f      	b.n	800a4c2 <USBD_CoreGetEPAdd+0xba>
  for (idx = 0; idx < pdev->tclasslist[ClassId].NumEps; idx++)
 800a4a2:	7bfb      	ldrb	r3, [r7, #15]
 800a4a4:	3301      	adds	r3, #1
 800a4a6:	73fb      	strb	r3, [r7, #15]
 800a4a8:	7bfa      	ldrb	r2, [r7, #15]
 800a4aa:	787b      	ldrb	r3, [r7, #1]
 800a4ac:	6879      	ldr	r1, [r7, #4]
 800a4ae:	202c      	movs	r0, #44	@ 0x2c
 800a4b0:	fb00 f303 	mul.w	r3, r0, r3
 800a4b4:	440b      	add	r3, r1
 800a4b6:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	429a      	cmp	r2, r3
 800a4be:	d3b3      	bcc.n	800a428 <USBD_CoreGetEPAdd+0x20>
    }
  }

  /* If reaching this point, then no endpoint was found */
  return 0xFFU;
 800a4c0:	23ff      	movs	r3, #255	@ 0xff
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3714      	adds	r7, #20
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4cc:	4770      	bx	lr

0800a4ce <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a4ce:	b480      	push	{r7}
 800a4d0:	b087      	sub	sp, #28
 800a4d2:	af00      	add	r7, sp, #0
 800a4d4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a4da:	697b      	ldr	r3, [r7, #20]
 800a4dc:	781b      	ldrb	r3, [r3, #0]
 800a4de:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a4e0:	697b      	ldr	r3, [r7, #20]
 800a4e2:	3301      	adds	r3, #1
 800a4e4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a4e6:	697b      	ldr	r3, [r7, #20]
 800a4e8:	781b      	ldrb	r3, [r3, #0]
 800a4ea:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a4ec:	8a3b      	ldrh	r3, [r7, #16]
 800a4ee:	021b      	lsls	r3, r3, #8
 800a4f0:	b21a      	sxth	r2, r3
 800a4f2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a4f6:	4313      	orrs	r3, r2
 800a4f8:	b21b      	sxth	r3, r3
 800a4fa:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a4fc:	89fb      	ldrh	r3, [r7, #14]
}
 800a4fe:	4618      	mov	r0, r3
 800a500:	371c      	adds	r7, #28
 800a502:	46bd      	mov	sp, r7
 800a504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a508:	4770      	bx	lr
	...

0800a50c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b084      	sub	sp, #16
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
 800a514:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a516:	2300      	movs	r3, #0
 800a518:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	781b      	ldrb	r3, [r3, #0]
 800a51e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a522:	2b40      	cmp	r3, #64	@ 0x40
 800a524:	d005      	beq.n	800a532 <USBD_StdDevReq+0x26>
 800a526:	2b40      	cmp	r3, #64	@ 0x40
 800a528:	d857      	bhi.n	800a5da <USBD_StdDevReq+0xce>
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d00f      	beq.n	800a54e <USBD_StdDevReq+0x42>
 800a52e:	2b20      	cmp	r3, #32
 800a530:	d153      	bne.n	800a5da <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	32ae      	adds	r2, #174	@ 0xae
 800a53c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a540:	689b      	ldr	r3, [r3, #8]
 800a542:	6839      	ldr	r1, [r7, #0]
 800a544:	6878      	ldr	r0, [r7, #4]
 800a546:	4798      	blx	r3
 800a548:	4603      	mov	r3, r0
 800a54a:	73fb      	strb	r3, [r7, #15]
      break;
 800a54c:	e04a      	b.n	800a5e4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a54e:	683b      	ldr	r3, [r7, #0]
 800a550:	785b      	ldrb	r3, [r3, #1]
 800a552:	2b09      	cmp	r3, #9
 800a554:	d83b      	bhi.n	800a5ce <USBD_StdDevReq+0xc2>
 800a556:	a201      	add	r2, pc, #4	@ (adr r2, 800a55c <USBD_StdDevReq+0x50>)
 800a558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a55c:	0800a5b1 	.word	0x0800a5b1
 800a560:	0800a5c5 	.word	0x0800a5c5
 800a564:	0800a5cf 	.word	0x0800a5cf
 800a568:	0800a5bb 	.word	0x0800a5bb
 800a56c:	0800a5cf 	.word	0x0800a5cf
 800a570:	0800a58f 	.word	0x0800a58f
 800a574:	0800a585 	.word	0x0800a585
 800a578:	0800a5cf 	.word	0x0800a5cf
 800a57c:	0800a5a7 	.word	0x0800a5a7
 800a580:	0800a599 	.word	0x0800a599
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a584:	6839      	ldr	r1, [r7, #0]
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	f000 fa3c 	bl	800aa04 <USBD_GetDescriptor>
          break;
 800a58c:	e024      	b.n	800a5d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a58e:	6839      	ldr	r1, [r7, #0]
 800a590:	6878      	ldr	r0, [r7, #4]
 800a592:	f000 fbdb 	bl	800ad4c <USBD_SetAddress>
          break;
 800a596:	e01f      	b.n	800a5d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a598:	6839      	ldr	r1, [r7, #0]
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	f000 fc1a 	bl	800add4 <USBD_SetConfig>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	73fb      	strb	r3, [r7, #15]
          break;
 800a5a4:	e018      	b.n	800a5d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a5a6:	6839      	ldr	r1, [r7, #0]
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	f000 fcbd 	bl	800af28 <USBD_GetConfig>
          break;
 800a5ae:	e013      	b.n	800a5d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a5b0:	6839      	ldr	r1, [r7, #0]
 800a5b2:	6878      	ldr	r0, [r7, #4]
 800a5b4:	f000 fcee 	bl	800af94 <USBD_GetStatus>
          break;
 800a5b8:	e00e      	b.n	800a5d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a5ba:	6839      	ldr	r1, [r7, #0]
 800a5bc:	6878      	ldr	r0, [r7, #4]
 800a5be:	f000 fd1d 	bl	800affc <USBD_SetFeature>
          break;
 800a5c2:	e009      	b.n	800a5d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a5c4:	6839      	ldr	r1, [r7, #0]
 800a5c6:	6878      	ldr	r0, [r7, #4]
 800a5c8:	f000 fd41 	bl	800b04e <USBD_ClrFeature>
          break;
 800a5cc:	e004      	b.n	800a5d8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a5ce:	6839      	ldr	r1, [r7, #0]
 800a5d0:	6878      	ldr	r0, [r7, #4]
 800a5d2:	f000 fd98 	bl	800b106 <USBD_CtlError>
          break;
 800a5d6:	bf00      	nop
      }
      break;
 800a5d8:	e004      	b.n	800a5e4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a5da:	6839      	ldr	r1, [r7, #0]
 800a5dc:	6878      	ldr	r0, [r7, #4]
 800a5de:	f000 fd92 	bl	800b106 <USBD_CtlError>
      break;
 800a5e2:	bf00      	nop
  }

  return ret;
 800a5e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	3710      	adds	r7, #16
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd80      	pop	{r7, pc}
 800a5ee:	bf00      	nop

0800a5f0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b084      	sub	sp, #16
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
 800a5f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	781b      	ldrb	r3, [r3, #0]
 800a602:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a606:	2b40      	cmp	r3, #64	@ 0x40
 800a608:	d005      	beq.n	800a616 <USBD_StdItfReq+0x26>
 800a60a:	2b40      	cmp	r3, #64	@ 0x40
 800a60c:	d852      	bhi.n	800a6b4 <USBD_StdItfReq+0xc4>
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d001      	beq.n	800a616 <USBD_StdItfReq+0x26>
 800a612:	2b20      	cmp	r3, #32
 800a614:	d14e      	bne.n	800a6b4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a61c:	b2db      	uxtb	r3, r3
 800a61e:	3b01      	subs	r3, #1
 800a620:	2b02      	cmp	r3, #2
 800a622:	d840      	bhi.n	800a6a6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	889b      	ldrh	r3, [r3, #4]
 800a628:	b2db      	uxtb	r3, r3
 800a62a:	2b01      	cmp	r3, #1
 800a62c:	d836      	bhi.n	800a69c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	889b      	ldrh	r3, [r3, #4]
 800a632:	b2db      	uxtb	r3, r3
 800a634:	4619      	mov	r1, r3
 800a636:	6878      	ldr	r0, [r7, #4]
 800a638:	f7ff fe4d 	bl	800a2d6 <USBD_CoreFindIF>
 800a63c:	4603      	mov	r3, r0
 800a63e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a640:	7bbb      	ldrb	r3, [r7, #14]
 800a642:	2bff      	cmp	r3, #255	@ 0xff
 800a644:	d01d      	beq.n	800a682 <USBD_StdItfReq+0x92>
 800a646:	7bbb      	ldrb	r3, [r7, #14]
 800a648:	2b01      	cmp	r3, #1
 800a64a:	d81a      	bhi.n	800a682 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a64c:	7bba      	ldrb	r2, [r7, #14]
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	32ae      	adds	r2, #174	@ 0xae
 800a652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a656:	689b      	ldr	r3, [r3, #8]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d00f      	beq.n	800a67c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a65c:	7bba      	ldrb	r2, [r7, #14]
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a664:	7bba      	ldrb	r2, [r7, #14]
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	32ae      	adds	r2, #174	@ 0xae
 800a66a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a66e:	689b      	ldr	r3, [r3, #8]
 800a670:	6839      	ldr	r1, [r7, #0]
 800a672:	6878      	ldr	r0, [r7, #4]
 800a674:	4798      	blx	r3
 800a676:	4603      	mov	r3, r0
 800a678:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a67a:	e004      	b.n	800a686 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a67c:	2303      	movs	r3, #3
 800a67e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a680:	e001      	b.n	800a686 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a682:	2303      	movs	r3, #3
 800a684:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	88db      	ldrh	r3, [r3, #6]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d110      	bne.n	800a6b0 <USBD_StdItfReq+0xc0>
 800a68e:	7bfb      	ldrb	r3, [r7, #15]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d10d      	bne.n	800a6b0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f000 ff10 	bl	800b4ba <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a69a:	e009      	b.n	800a6b0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a69c:	6839      	ldr	r1, [r7, #0]
 800a69e:	6878      	ldr	r0, [r7, #4]
 800a6a0:	f000 fd31 	bl	800b106 <USBD_CtlError>
          break;
 800a6a4:	e004      	b.n	800a6b0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a6a6:	6839      	ldr	r1, [r7, #0]
 800a6a8:	6878      	ldr	r0, [r7, #4]
 800a6aa:	f000 fd2c 	bl	800b106 <USBD_CtlError>
          break;
 800a6ae:	e000      	b.n	800a6b2 <USBD_StdItfReq+0xc2>
          break;
 800a6b0:	bf00      	nop
      }
      break;
 800a6b2:	e004      	b.n	800a6be <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a6b4:	6839      	ldr	r1, [r7, #0]
 800a6b6:	6878      	ldr	r0, [r7, #4]
 800a6b8:	f000 fd25 	bl	800b106 <USBD_CtlError>
      break;
 800a6bc:	bf00      	nop
  }

  return ret;
 800a6be:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	3710      	adds	r7, #16
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	bd80      	pop	{r7, pc}

0800a6c8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b084      	sub	sp, #16
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
 800a6d0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	889b      	ldrh	r3, [r3, #4]
 800a6da:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	781b      	ldrb	r3, [r3, #0]
 800a6e0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a6e4:	2b40      	cmp	r3, #64	@ 0x40
 800a6e6:	d007      	beq.n	800a6f8 <USBD_StdEPReq+0x30>
 800a6e8:	2b40      	cmp	r3, #64	@ 0x40
 800a6ea:	f200 817f 	bhi.w	800a9ec <USBD_StdEPReq+0x324>
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d02a      	beq.n	800a748 <USBD_StdEPReq+0x80>
 800a6f2:	2b20      	cmp	r3, #32
 800a6f4:	f040 817a 	bne.w	800a9ec <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a6f8:	7bbb      	ldrb	r3, [r7, #14]
 800a6fa:	4619      	mov	r1, r3
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f7ff fe36 	bl	800a36e <USBD_CoreFindEP>
 800a702:	4603      	mov	r3, r0
 800a704:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a706:	7b7b      	ldrb	r3, [r7, #13]
 800a708:	2bff      	cmp	r3, #255	@ 0xff
 800a70a:	f000 8174 	beq.w	800a9f6 <USBD_StdEPReq+0x32e>
 800a70e:	7b7b      	ldrb	r3, [r7, #13]
 800a710:	2b01      	cmp	r3, #1
 800a712:	f200 8170 	bhi.w	800a9f6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a716:	7b7a      	ldrb	r2, [r7, #13]
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a71e:	7b7a      	ldrb	r2, [r7, #13]
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	32ae      	adds	r2, #174	@ 0xae
 800a724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a728:	689b      	ldr	r3, [r3, #8]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	f000 8163 	beq.w	800a9f6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a730:	7b7a      	ldrb	r2, [r7, #13]
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	32ae      	adds	r2, #174	@ 0xae
 800a736:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a73a:	689b      	ldr	r3, [r3, #8]
 800a73c:	6839      	ldr	r1, [r7, #0]
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	4798      	blx	r3
 800a742:	4603      	mov	r3, r0
 800a744:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a746:	e156      	b.n	800a9f6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	785b      	ldrb	r3, [r3, #1]
 800a74c:	2b03      	cmp	r3, #3
 800a74e:	d008      	beq.n	800a762 <USBD_StdEPReq+0x9a>
 800a750:	2b03      	cmp	r3, #3
 800a752:	f300 8145 	bgt.w	800a9e0 <USBD_StdEPReq+0x318>
 800a756:	2b00      	cmp	r3, #0
 800a758:	f000 809b 	beq.w	800a892 <USBD_StdEPReq+0x1ca>
 800a75c:	2b01      	cmp	r3, #1
 800a75e:	d03c      	beq.n	800a7da <USBD_StdEPReq+0x112>
 800a760:	e13e      	b.n	800a9e0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a768:	b2db      	uxtb	r3, r3
 800a76a:	2b02      	cmp	r3, #2
 800a76c:	d002      	beq.n	800a774 <USBD_StdEPReq+0xac>
 800a76e:	2b03      	cmp	r3, #3
 800a770:	d016      	beq.n	800a7a0 <USBD_StdEPReq+0xd8>
 800a772:	e02c      	b.n	800a7ce <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a774:	7bbb      	ldrb	r3, [r7, #14]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d00d      	beq.n	800a796 <USBD_StdEPReq+0xce>
 800a77a:	7bbb      	ldrb	r3, [r7, #14]
 800a77c:	2b80      	cmp	r3, #128	@ 0x80
 800a77e:	d00a      	beq.n	800a796 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a780:	7bbb      	ldrb	r3, [r7, #14]
 800a782:	4619      	mov	r1, r3
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f7ff f8d3 	bl	8009930 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a78a:	2180      	movs	r1, #128	@ 0x80
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	f7ff f8cf 	bl	8009930 <USBD_LL_StallEP>
 800a792:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a794:	e020      	b.n	800a7d8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a796:	6839      	ldr	r1, [r7, #0]
 800a798:	6878      	ldr	r0, [r7, #4]
 800a79a:	f000 fcb4 	bl	800b106 <USBD_CtlError>
              break;
 800a79e:	e01b      	b.n	800a7d8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	885b      	ldrh	r3, [r3, #2]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d10e      	bne.n	800a7c6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a7a8:	7bbb      	ldrb	r3, [r7, #14]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d00b      	beq.n	800a7c6 <USBD_StdEPReq+0xfe>
 800a7ae:	7bbb      	ldrb	r3, [r7, #14]
 800a7b0:	2b80      	cmp	r3, #128	@ 0x80
 800a7b2:	d008      	beq.n	800a7c6 <USBD_StdEPReq+0xfe>
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	88db      	ldrh	r3, [r3, #6]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d104      	bne.n	800a7c6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a7bc:	7bbb      	ldrb	r3, [r7, #14]
 800a7be:	4619      	mov	r1, r3
 800a7c0:	6878      	ldr	r0, [r7, #4]
 800a7c2:	f7ff f8b5 	bl	8009930 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	f000 fe77 	bl	800b4ba <USBD_CtlSendStatus>

              break;
 800a7cc:	e004      	b.n	800a7d8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a7ce:	6839      	ldr	r1, [r7, #0]
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	f000 fc98 	bl	800b106 <USBD_CtlError>
              break;
 800a7d6:	bf00      	nop
          }
          break;
 800a7d8:	e107      	b.n	800a9ea <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a7e0:	b2db      	uxtb	r3, r3
 800a7e2:	2b02      	cmp	r3, #2
 800a7e4:	d002      	beq.n	800a7ec <USBD_StdEPReq+0x124>
 800a7e6:	2b03      	cmp	r3, #3
 800a7e8:	d016      	beq.n	800a818 <USBD_StdEPReq+0x150>
 800a7ea:	e04b      	b.n	800a884 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a7ec:	7bbb      	ldrb	r3, [r7, #14]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d00d      	beq.n	800a80e <USBD_StdEPReq+0x146>
 800a7f2:	7bbb      	ldrb	r3, [r7, #14]
 800a7f4:	2b80      	cmp	r3, #128	@ 0x80
 800a7f6:	d00a      	beq.n	800a80e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a7f8:	7bbb      	ldrb	r3, [r7, #14]
 800a7fa:	4619      	mov	r1, r3
 800a7fc:	6878      	ldr	r0, [r7, #4]
 800a7fe:	f7ff f897 	bl	8009930 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a802:	2180      	movs	r1, #128	@ 0x80
 800a804:	6878      	ldr	r0, [r7, #4]
 800a806:	f7ff f893 	bl	8009930 <USBD_LL_StallEP>
 800a80a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a80c:	e040      	b.n	800a890 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a80e:	6839      	ldr	r1, [r7, #0]
 800a810:	6878      	ldr	r0, [r7, #4]
 800a812:	f000 fc78 	bl	800b106 <USBD_CtlError>
              break;
 800a816:	e03b      	b.n	800a890 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	885b      	ldrh	r3, [r3, #2]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d136      	bne.n	800a88e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a820:	7bbb      	ldrb	r3, [r7, #14]
 800a822:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a826:	2b00      	cmp	r3, #0
 800a828:	d004      	beq.n	800a834 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a82a:	7bbb      	ldrb	r3, [r7, #14]
 800a82c:	4619      	mov	r1, r3
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f7ff f897 	bl	8009962 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a834:	6878      	ldr	r0, [r7, #4]
 800a836:	f000 fe40 	bl	800b4ba <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a83a:	7bbb      	ldrb	r3, [r7, #14]
 800a83c:	4619      	mov	r1, r3
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f7ff fd95 	bl	800a36e <USBD_CoreFindEP>
 800a844:	4603      	mov	r3, r0
 800a846:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a848:	7b7b      	ldrb	r3, [r7, #13]
 800a84a:	2bff      	cmp	r3, #255	@ 0xff
 800a84c:	d01f      	beq.n	800a88e <USBD_StdEPReq+0x1c6>
 800a84e:	7b7b      	ldrb	r3, [r7, #13]
 800a850:	2b01      	cmp	r3, #1
 800a852:	d81c      	bhi.n	800a88e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a854:	7b7a      	ldrb	r2, [r7, #13]
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a85c:	7b7a      	ldrb	r2, [r7, #13]
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	32ae      	adds	r2, #174	@ 0xae
 800a862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a866:	689b      	ldr	r3, [r3, #8]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d010      	beq.n	800a88e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a86c:	7b7a      	ldrb	r2, [r7, #13]
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	32ae      	adds	r2, #174	@ 0xae
 800a872:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a876:	689b      	ldr	r3, [r3, #8]
 800a878:	6839      	ldr	r1, [r7, #0]
 800a87a:	6878      	ldr	r0, [r7, #4]
 800a87c:	4798      	blx	r3
 800a87e:	4603      	mov	r3, r0
 800a880:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a882:	e004      	b.n	800a88e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a884:	6839      	ldr	r1, [r7, #0]
 800a886:	6878      	ldr	r0, [r7, #4]
 800a888:	f000 fc3d 	bl	800b106 <USBD_CtlError>
              break;
 800a88c:	e000      	b.n	800a890 <USBD_StdEPReq+0x1c8>
              break;
 800a88e:	bf00      	nop
          }
          break;
 800a890:	e0ab      	b.n	800a9ea <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a898:	b2db      	uxtb	r3, r3
 800a89a:	2b02      	cmp	r3, #2
 800a89c:	d002      	beq.n	800a8a4 <USBD_StdEPReq+0x1dc>
 800a89e:	2b03      	cmp	r3, #3
 800a8a0:	d032      	beq.n	800a908 <USBD_StdEPReq+0x240>
 800a8a2:	e097      	b.n	800a9d4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a8a4:	7bbb      	ldrb	r3, [r7, #14]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d007      	beq.n	800a8ba <USBD_StdEPReq+0x1f2>
 800a8aa:	7bbb      	ldrb	r3, [r7, #14]
 800a8ac:	2b80      	cmp	r3, #128	@ 0x80
 800a8ae:	d004      	beq.n	800a8ba <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a8b0:	6839      	ldr	r1, [r7, #0]
 800a8b2:	6878      	ldr	r0, [r7, #4]
 800a8b4:	f000 fc27 	bl	800b106 <USBD_CtlError>
                break;
 800a8b8:	e091      	b.n	800a9de <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a8ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	da0b      	bge.n	800a8da <USBD_StdEPReq+0x212>
 800a8c2:	7bbb      	ldrb	r3, [r7, #14]
 800a8c4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a8c8:	4613      	mov	r3, r2
 800a8ca:	009b      	lsls	r3, r3, #2
 800a8cc:	4413      	add	r3, r2
 800a8ce:	009b      	lsls	r3, r3, #2
 800a8d0:	3310      	adds	r3, #16
 800a8d2:	687a      	ldr	r2, [r7, #4]
 800a8d4:	4413      	add	r3, r2
 800a8d6:	3304      	adds	r3, #4
 800a8d8:	e00b      	b.n	800a8f2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a8da:	7bbb      	ldrb	r3, [r7, #14]
 800a8dc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a8e0:	4613      	mov	r3, r2
 800a8e2:	009b      	lsls	r3, r3, #2
 800a8e4:	4413      	add	r3, r2
 800a8e6:	009b      	lsls	r3, r3, #2
 800a8e8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a8ec:	687a      	ldr	r2, [r7, #4]
 800a8ee:	4413      	add	r3, r2
 800a8f0:	3304      	adds	r3, #4
 800a8f2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a8f4:	68bb      	ldr	r3, [r7, #8]
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a8fa:	68bb      	ldr	r3, [r7, #8]
 800a8fc:	2202      	movs	r2, #2
 800a8fe:	4619      	mov	r1, r3
 800a900:	6878      	ldr	r0, [r7, #4]
 800a902:	f000 fd80 	bl	800b406 <USBD_CtlSendData>
              break;
 800a906:	e06a      	b.n	800a9de <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a908:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	da11      	bge.n	800a934 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a910:	7bbb      	ldrb	r3, [r7, #14]
 800a912:	f003 020f 	and.w	r2, r3, #15
 800a916:	6879      	ldr	r1, [r7, #4]
 800a918:	4613      	mov	r3, r2
 800a91a:	009b      	lsls	r3, r3, #2
 800a91c:	4413      	add	r3, r2
 800a91e:	009b      	lsls	r3, r3, #2
 800a920:	440b      	add	r3, r1
 800a922:	3324      	adds	r3, #36	@ 0x24
 800a924:	881b      	ldrh	r3, [r3, #0]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d117      	bne.n	800a95a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a92a:	6839      	ldr	r1, [r7, #0]
 800a92c:	6878      	ldr	r0, [r7, #4]
 800a92e:	f000 fbea 	bl	800b106 <USBD_CtlError>
                  break;
 800a932:	e054      	b.n	800a9de <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a934:	7bbb      	ldrb	r3, [r7, #14]
 800a936:	f003 020f 	and.w	r2, r3, #15
 800a93a:	6879      	ldr	r1, [r7, #4]
 800a93c:	4613      	mov	r3, r2
 800a93e:	009b      	lsls	r3, r3, #2
 800a940:	4413      	add	r3, r2
 800a942:	009b      	lsls	r3, r3, #2
 800a944:	440b      	add	r3, r1
 800a946:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a94a:	881b      	ldrh	r3, [r3, #0]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d104      	bne.n	800a95a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a950:	6839      	ldr	r1, [r7, #0]
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f000 fbd7 	bl	800b106 <USBD_CtlError>
                  break;
 800a958:	e041      	b.n	800a9de <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a95a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	da0b      	bge.n	800a97a <USBD_StdEPReq+0x2b2>
 800a962:	7bbb      	ldrb	r3, [r7, #14]
 800a964:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a968:	4613      	mov	r3, r2
 800a96a:	009b      	lsls	r3, r3, #2
 800a96c:	4413      	add	r3, r2
 800a96e:	009b      	lsls	r3, r3, #2
 800a970:	3310      	adds	r3, #16
 800a972:	687a      	ldr	r2, [r7, #4]
 800a974:	4413      	add	r3, r2
 800a976:	3304      	adds	r3, #4
 800a978:	e00b      	b.n	800a992 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a97a:	7bbb      	ldrb	r3, [r7, #14]
 800a97c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a980:	4613      	mov	r3, r2
 800a982:	009b      	lsls	r3, r3, #2
 800a984:	4413      	add	r3, r2
 800a986:	009b      	lsls	r3, r3, #2
 800a988:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a98c:	687a      	ldr	r2, [r7, #4]
 800a98e:	4413      	add	r3, r2
 800a990:	3304      	adds	r3, #4
 800a992:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a994:	7bbb      	ldrb	r3, [r7, #14]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d002      	beq.n	800a9a0 <USBD_StdEPReq+0x2d8>
 800a99a:	7bbb      	ldrb	r3, [r7, #14]
 800a99c:	2b80      	cmp	r3, #128	@ 0x80
 800a99e:	d103      	bne.n	800a9a8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a9a0:	68bb      	ldr	r3, [r7, #8]
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	601a      	str	r2, [r3, #0]
 800a9a6:	e00e      	b.n	800a9c6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a9a8:	7bbb      	ldrb	r3, [r7, #14]
 800a9aa:	4619      	mov	r1, r3
 800a9ac:	6878      	ldr	r0, [r7, #4]
 800a9ae:	f7fe fff1 	bl	8009994 <USBD_LL_IsStallEP>
 800a9b2:	4603      	mov	r3, r0
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d003      	beq.n	800a9c0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a9b8:	68bb      	ldr	r3, [r7, #8]
 800a9ba:	2201      	movs	r2, #1
 800a9bc:	601a      	str	r2, [r3, #0]
 800a9be:	e002      	b.n	800a9c6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a9c0:	68bb      	ldr	r3, [r7, #8]
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a9c6:	68bb      	ldr	r3, [r7, #8]
 800a9c8:	2202      	movs	r2, #2
 800a9ca:	4619      	mov	r1, r3
 800a9cc:	6878      	ldr	r0, [r7, #4]
 800a9ce:	f000 fd1a 	bl	800b406 <USBD_CtlSendData>
              break;
 800a9d2:	e004      	b.n	800a9de <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a9d4:	6839      	ldr	r1, [r7, #0]
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f000 fb95 	bl	800b106 <USBD_CtlError>
              break;
 800a9dc:	bf00      	nop
          }
          break;
 800a9de:	e004      	b.n	800a9ea <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a9e0:	6839      	ldr	r1, [r7, #0]
 800a9e2:	6878      	ldr	r0, [r7, #4]
 800a9e4:	f000 fb8f 	bl	800b106 <USBD_CtlError>
          break;
 800a9e8:	bf00      	nop
      }
      break;
 800a9ea:	e005      	b.n	800a9f8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a9ec:	6839      	ldr	r1, [r7, #0]
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f000 fb89 	bl	800b106 <USBD_CtlError>
      break;
 800a9f4:	e000      	b.n	800a9f8 <USBD_StdEPReq+0x330>
      break;
 800a9f6:	bf00      	nop
  }

  return ret;
 800a9f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	3710      	adds	r7, #16
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	bd80      	pop	{r7, pc}
	...

0800aa04 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b084      	sub	sp, #16
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
 800aa0c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800aa12:	2300      	movs	r3, #0
 800aa14:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800aa16:	2300      	movs	r3, #0
 800aa18:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	885b      	ldrh	r3, [r3, #2]
 800aa1e:	0a1b      	lsrs	r3, r3, #8
 800aa20:	b29b      	uxth	r3, r3
 800aa22:	3b01      	subs	r3, #1
 800aa24:	2b06      	cmp	r3, #6
 800aa26:	f200 8163 	bhi.w	800acf0 <USBD_GetDescriptor+0x2ec>
 800aa2a:	a201      	add	r2, pc, #4	@ (adr r2, 800aa30 <USBD_GetDescriptor+0x2c>)
 800aa2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa30:	0800aa4d 	.word	0x0800aa4d
 800aa34:	0800aa65 	.word	0x0800aa65
 800aa38:	0800aadd 	.word	0x0800aadd
 800aa3c:	0800acf1 	.word	0x0800acf1
 800aa40:	0800acf1 	.word	0x0800acf1
 800aa44:	0800ac53 	.word	0x0800ac53
 800aa48:	0800ac9b 	.word	0x0800ac9b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	687a      	ldr	r2, [r7, #4]
 800aa56:	7c12      	ldrb	r2, [r2, #16]
 800aa58:	f107 0108 	add.w	r1, r7, #8
 800aa5c:	4610      	mov	r0, r2
 800aa5e:	4798      	blx	r3
 800aa60:	60f8      	str	r0, [r7, #12]
      break;
 800aa62:	e14d      	b.n	800ad00 <USBD_GetDescriptor+0x2fc>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	7c1b      	ldrb	r3, [r3, #16]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d11b      	bne.n	800aaa4 <USBD_GetDescriptor+0xa0>
      {
#ifdef USE_USBD_COMPOSITE
        if ((uint8_t)(pdev->NumClasses) > 0U)
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f8d3 32e4 	ldr.w	r3, [r3, #740]	@ 0x2e4
 800aa72:	b2db      	uxtb	r3, r3
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d007      	beq.n	800aa88 <USBD_GetDescriptor+0x84>
        {
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
 800aa78:	4b9c      	ldr	r3, [pc, #624]	@ (800acec <USBD_GetDescriptor+0x2e8>)
 800aa7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa7c:	f107 0208 	add.w	r2, r7, #8
 800aa80:	4610      	mov	r0, r2
 800aa82:	4798      	blx	r3
 800aa84:	60f8      	str	r0, [r7, #12]
 800aa86:	e008      	b.n	800aa9a <USBD_GetDescriptor+0x96>
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa90:	f107 0208 	add.w	r2, r7, #8
 800aa94:	4610      	mov	r0, r2
 800aa96:	4798      	blx	r3
 800aa98:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	3301      	adds	r3, #1
 800aa9e:	2202      	movs	r2, #2
 800aaa0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800aaa2:	e12d      	b.n	800ad00 <USBD_GetDescriptor+0x2fc>
        if ((uint8_t)(pdev->NumClasses) > 0U)
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f8d3 32e4 	ldr.w	r3, [r3, #740]	@ 0x2e4
 800aaaa:	b2db      	uxtb	r3, r3
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d007      	beq.n	800aac0 <USBD_GetDescriptor+0xbc>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetFSConfigDescriptor(&len);
 800aab0:	4b8e      	ldr	r3, [pc, #568]	@ (800acec <USBD_GetDescriptor+0x2e8>)
 800aab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aab4:	f107 0208 	add.w	r2, r7, #8
 800aab8:	4610      	mov	r0, r2
 800aaba:	4798      	blx	r3
 800aabc:	60f8      	str	r0, [r7, #12]
 800aabe:	e008      	b.n	800aad2 <USBD_GetDescriptor+0xce>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aac8:	f107 0208 	add.w	r2, r7, #8
 800aacc:	4610      	mov	r0, r2
 800aace:	4798      	blx	r3
 800aad0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	3301      	adds	r3, #1
 800aad6:	2202      	movs	r2, #2
 800aad8:	701a      	strb	r2, [r3, #0]
      break;
 800aada:	e111      	b.n	800ad00 <USBD_GetDescriptor+0x2fc>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	885b      	ldrh	r3, [r3, #2]
 800aae0:	b2db      	uxtb	r3, r3
 800aae2:	2b05      	cmp	r3, #5
 800aae4:	f200 80ac 	bhi.w	800ac40 <USBD_GetDescriptor+0x23c>
 800aae8:	a201      	add	r2, pc, #4	@ (adr r2, 800aaf0 <USBD_GetDescriptor+0xec>)
 800aaea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaee:	bf00      	nop
 800aaf0:	0800ab09 	.word	0x0800ab09
 800aaf4:	0800ab3d 	.word	0x0800ab3d
 800aaf8:	0800ab71 	.word	0x0800ab71
 800aafc:	0800aba5 	.word	0x0800aba5
 800ab00:	0800abd9 	.word	0x0800abd9
 800ab04:	0800ac0d 	.word	0x0800ac0d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab0e:	685b      	ldr	r3, [r3, #4]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d00b      	beq.n	800ab2c <USBD_GetDescriptor+0x128>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab1a:	685b      	ldr	r3, [r3, #4]
 800ab1c:	687a      	ldr	r2, [r7, #4]
 800ab1e:	7c12      	ldrb	r2, [r2, #16]
 800ab20:	f107 0108 	add.w	r1, r7, #8
 800ab24:	4610      	mov	r0, r2
 800ab26:	4798      	blx	r3
 800ab28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab2a:	e091      	b.n	800ac50 <USBD_GetDescriptor+0x24c>
            USBD_CtlError(pdev, req);
 800ab2c:	6839      	ldr	r1, [r7, #0]
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	f000 fae9 	bl	800b106 <USBD_CtlError>
            err++;
 800ab34:	7afb      	ldrb	r3, [r7, #11]
 800ab36:	3301      	adds	r3, #1
 800ab38:	72fb      	strb	r3, [r7, #11]
          break;
 800ab3a:	e089      	b.n	800ac50 <USBD_GetDescriptor+0x24c>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab42:	689b      	ldr	r3, [r3, #8]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d00b      	beq.n	800ab60 <USBD_GetDescriptor+0x15c>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab4e:	689b      	ldr	r3, [r3, #8]
 800ab50:	687a      	ldr	r2, [r7, #4]
 800ab52:	7c12      	ldrb	r2, [r2, #16]
 800ab54:	f107 0108 	add.w	r1, r7, #8
 800ab58:	4610      	mov	r0, r2
 800ab5a:	4798      	blx	r3
 800ab5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab5e:	e077      	b.n	800ac50 <USBD_GetDescriptor+0x24c>
            USBD_CtlError(pdev, req);
 800ab60:	6839      	ldr	r1, [r7, #0]
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	f000 facf 	bl	800b106 <USBD_CtlError>
            err++;
 800ab68:	7afb      	ldrb	r3, [r7, #11]
 800ab6a:	3301      	adds	r3, #1
 800ab6c:	72fb      	strb	r3, [r7, #11]
          break;
 800ab6e:	e06f      	b.n	800ac50 <USBD_GetDescriptor+0x24c>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab76:	68db      	ldr	r3, [r3, #12]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d00b      	beq.n	800ab94 <USBD_GetDescriptor+0x190>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab82:	68db      	ldr	r3, [r3, #12]
 800ab84:	687a      	ldr	r2, [r7, #4]
 800ab86:	7c12      	ldrb	r2, [r2, #16]
 800ab88:	f107 0108 	add.w	r1, r7, #8
 800ab8c:	4610      	mov	r0, r2
 800ab8e:	4798      	blx	r3
 800ab90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab92:	e05d      	b.n	800ac50 <USBD_GetDescriptor+0x24c>
            USBD_CtlError(pdev, req);
 800ab94:	6839      	ldr	r1, [r7, #0]
 800ab96:	6878      	ldr	r0, [r7, #4]
 800ab98:	f000 fab5 	bl	800b106 <USBD_CtlError>
            err++;
 800ab9c:	7afb      	ldrb	r3, [r7, #11]
 800ab9e:	3301      	adds	r3, #1
 800aba0:	72fb      	strb	r3, [r7, #11]
          break;
 800aba2:	e055      	b.n	800ac50 <USBD_GetDescriptor+0x24c>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800abaa:	691b      	ldr	r3, [r3, #16]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d00b      	beq.n	800abc8 <USBD_GetDescriptor+0x1c4>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800abb6:	691b      	ldr	r3, [r3, #16]
 800abb8:	687a      	ldr	r2, [r7, #4]
 800abba:	7c12      	ldrb	r2, [r2, #16]
 800abbc:	f107 0108 	add.w	r1, r7, #8
 800abc0:	4610      	mov	r0, r2
 800abc2:	4798      	blx	r3
 800abc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800abc6:	e043      	b.n	800ac50 <USBD_GetDescriptor+0x24c>
            USBD_CtlError(pdev, req);
 800abc8:	6839      	ldr	r1, [r7, #0]
 800abca:	6878      	ldr	r0, [r7, #4]
 800abcc:	f000 fa9b 	bl	800b106 <USBD_CtlError>
            err++;
 800abd0:	7afb      	ldrb	r3, [r7, #11]
 800abd2:	3301      	adds	r3, #1
 800abd4:	72fb      	strb	r3, [r7, #11]
          break;
 800abd6:	e03b      	b.n	800ac50 <USBD_GetDescriptor+0x24c>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800abde:	695b      	ldr	r3, [r3, #20]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d00b      	beq.n	800abfc <USBD_GetDescriptor+0x1f8>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800abea:	695b      	ldr	r3, [r3, #20]
 800abec:	687a      	ldr	r2, [r7, #4]
 800abee:	7c12      	ldrb	r2, [r2, #16]
 800abf0:	f107 0108 	add.w	r1, r7, #8
 800abf4:	4610      	mov	r0, r2
 800abf6:	4798      	blx	r3
 800abf8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800abfa:	e029      	b.n	800ac50 <USBD_GetDescriptor+0x24c>
            USBD_CtlError(pdev, req);
 800abfc:	6839      	ldr	r1, [r7, #0]
 800abfe:	6878      	ldr	r0, [r7, #4]
 800ac00:	f000 fa81 	bl	800b106 <USBD_CtlError>
            err++;
 800ac04:	7afb      	ldrb	r3, [r7, #11]
 800ac06:	3301      	adds	r3, #1
 800ac08:	72fb      	strb	r3, [r7, #11]
          break;
 800ac0a:	e021      	b.n	800ac50 <USBD_GetDescriptor+0x24c>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac12:	699b      	ldr	r3, [r3, #24]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d00b      	beq.n	800ac30 <USBD_GetDescriptor+0x22c>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac1e:	699b      	ldr	r3, [r3, #24]
 800ac20:	687a      	ldr	r2, [r7, #4]
 800ac22:	7c12      	ldrb	r2, [r2, #16]
 800ac24:	f107 0108 	add.w	r1, r7, #8
 800ac28:	4610      	mov	r0, r2
 800ac2a:	4798      	blx	r3
 800ac2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac2e:	e00f      	b.n	800ac50 <USBD_GetDescriptor+0x24c>
            USBD_CtlError(pdev, req);
 800ac30:	6839      	ldr	r1, [r7, #0]
 800ac32:	6878      	ldr	r0, [r7, #4]
 800ac34:	f000 fa67 	bl	800b106 <USBD_CtlError>
            err++;
 800ac38:	7afb      	ldrb	r3, [r7, #11]
 800ac3a:	3301      	adds	r3, #1
 800ac3c:	72fb      	strb	r3, [r7, #11]
          break;
 800ac3e:	e007      	b.n	800ac50 <USBD_GetDescriptor+0x24c>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ac40:	6839      	ldr	r1, [r7, #0]
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	f000 fa5f 	bl	800b106 <USBD_CtlError>
          err++;
 800ac48:	7afb      	ldrb	r3, [r7, #11]
 800ac4a:	3301      	adds	r3, #1
 800ac4c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ac4e:	bf00      	nop
      }
      break;
 800ac50:	e056      	b.n	800ad00 <USBD_GetDescriptor+0x2fc>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	7c1b      	ldrb	r3, [r3, #16]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d117      	bne.n	800ac8a <USBD_GetDescriptor+0x286>
      {
#ifdef USE_USBD_COMPOSITE
        if ((uint8_t)(pdev->NumClasses) > 0U)
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	f8d3 32e4 	ldr.w	r3, [r3, #740]	@ 0x2e4
 800ac60:	b2db      	uxtb	r3, r3
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d007      	beq.n	800ac76 <USBD_GetDescriptor+0x272>
        {
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
 800ac66:	4b21      	ldr	r3, [pc, #132]	@ (800acec <USBD_GetDescriptor+0x2e8>)
 800ac68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac6a:	f107 0208 	add.w	r2, r7, #8
 800ac6e:	4610      	mov	r0, r2
 800ac70:	4798      	blx	r3
 800ac72:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ac74:	e044      	b.n	800ad00 <USBD_GetDescriptor+0x2fc>
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac7e:	f107 0208 	add.w	r2, r7, #8
 800ac82:	4610      	mov	r0, r2
 800ac84:	4798      	blx	r3
 800ac86:	60f8      	str	r0, [r7, #12]
      break;
 800ac88:	e03a      	b.n	800ad00 <USBD_GetDescriptor+0x2fc>
        USBD_CtlError(pdev, req);
 800ac8a:	6839      	ldr	r1, [r7, #0]
 800ac8c:	6878      	ldr	r0, [r7, #4]
 800ac8e:	f000 fa3a 	bl	800b106 <USBD_CtlError>
        err++;
 800ac92:	7afb      	ldrb	r3, [r7, #11]
 800ac94:	3301      	adds	r3, #1
 800ac96:	72fb      	strb	r3, [r7, #11]
      break;
 800ac98:	e032      	b.n	800ad00 <USBD_GetDescriptor+0x2fc>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	7c1b      	ldrb	r3, [r3, #16]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d11b      	bne.n	800acda <USBD_GetDescriptor+0x2d6>
      {
#ifdef USE_USBD_COMPOSITE
        if ((uint8_t)(pdev->NumClasses) > 0U)
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	f8d3 32e4 	ldr.w	r3, [r3, #740]	@ 0x2e4
 800aca8:	b2db      	uxtb	r3, r3
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d007      	beq.n	800acbe <USBD_GetDescriptor+0x2ba>
        {
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
 800acae:	4b0f      	ldr	r3, [pc, #60]	@ (800acec <USBD_GetDescriptor+0x2e8>)
 800acb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800acb2:	f107 0208 	add.w	r2, r7, #8
 800acb6:	4610      	mov	r0, r2
 800acb8:	4798      	blx	r3
 800acba:	60f8      	str	r0, [r7, #12]
 800acbc:	e008      	b.n	800acd0 <USBD_GetDescriptor+0x2cc>
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800acc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800acc6:	f107 0208 	add.w	r2, r7, #8
 800acca:	4610      	mov	r0, r2
 800accc:	4798      	blx	r3
 800acce:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	3301      	adds	r3, #1
 800acd4:	2207      	movs	r2, #7
 800acd6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800acd8:	e012      	b.n	800ad00 <USBD_GetDescriptor+0x2fc>
        USBD_CtlError(pdev, req);
 800acda:	6839      	ldr	r1, [r7, #0]
 800acdc:	6878      	ldr	r0, [r7, #4]
 800acde:	f000 fa12 	bl	800b106 <USBD_CtlError>
        err++;
 800ace2:	7afb      	ldrb	r3, [r7, #11]
 800ace4:	3301      	adds	r3, #1
 800ace6:	72fb      	strb	r3, [r7, #11]
      break;
 800ace8:	e00a      	b.n	800ad00 <USBD_GetDescriptor+0x2fc>
 800acea:	bf00      	nop
 800acec:	20000068 	.word	0x20000068

    default:
      USBD_CtlError(pdev, req);
 800acf0:	6839      	ldr	r1, [r7, #0]
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	f000 fa07 	bl	800b106 <USBD_CtlError>
      err++;
 800acf8:	7afb      	ldrb	r3, [r7, #11]
 800acfa:	3301      	adds	r3, #1
 800acfc:	72fb      	strb	r3, [r7, #11]
      break;
 800acfe:	bf00      	nop
  }

  if (err != 0U)
 800ad00:	7afb      	ldrb	r3, [r7, #11]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d11e      	bne.n	800ad44 <USBD_GetDescriptor+0x340>
  {
    return;
  }

  if (req->wLength != 0U)
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	88db      	ldrh	r3, [r3, #6]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d016      	beq.n	800ad3c <USBD_GetDescriptor+0x338>
  {
    if (len != 0U)
 800ad0e:	893b      	ldrh	r3, [r7, #8]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d00e      	beq.n	800ad32 <USBD_GetDescriptor+0x32e>
    {
      len = MIN(len, req->wLength);
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	88da      	ldrh	r2, [r3, #6]
 800ad18:	893b      	ldrh	r3, [r7, #8]
 800ad1a:	4293      	cmp	r3, r2
 800ad1c:	bf28      	it	cs
 800ad1e:	4613      	movcs	r3, r2
 800ad20:	b29b      	uxth	r3, r3
 800ad22:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ad24:	893b      	ldrh	r3, [r7, #8]
 800ad26:	461a      	mov	r2, r3
 800ad28:	68f9      	ldr	r1, [r7, #12]
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f000 fb6b 	bl	800b406 <USBD_CtlSendData>
 800ad30:	e009      	b.n	800ad46 <USBD_GetDescriptor+0x342>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ad32:	6839      	ldr	r1, [r7, #0]
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	f000 f9e6 	bl	800b106 <USBD_CtlError>
 800ad3a:	e004      	b.n	800ad46 <USBD_GetDescriptor+0x342>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	f000 fbbc 	bl	800b4ba <USBD_CtlSendStatus>
 800ad42:	e000      	b.n	800ad46 <USBD_GetDescriptor+0x342>
    return;
 800ad44:	bf00      	nop
  }
}
 800ad46:	3710      	adds	r7, #16
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}

0800ad4c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b084      	sub	sp, #16
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
 800ad54:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	889b      	ldrh	r3, [r3, #4]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d131      	bne.n	800adc2 <USBD_SetAddress+0x76>
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	88db      	ldrh	r3, [r3, #6]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d12d      	bne.n	800adc2 <USBD_SetAddress+0x76>
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	885b      	ldrh	r3, [r3, #2]
 800ad6a:	2b7f      	cmp	r3, #127	@ 0x7f
 800ad6c:	d829      	bhi.n	800adc2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	885b      	ldrh	r3, [r3, #2]
 800ad72:	b2db      	uxtb	r3, r3
 800ad74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad78:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad80:	b2db      	uxtb	r3, r3
 800ad82:	2b03      	cmp	r3, #3
 800ad84:	d104      	bne.n	800ad90 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ad86:	6839      	ldr	r1, [r7, #0]
 800ad88:	6878      	ldr	r0, [r7, #4]
 800ad8a:	f000 f9bc 	bl	800b106 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad8e:	e01d      	b.n	800adcc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	7bfa      	ldrb	r2, [r7, #15]
 800ad94:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ad98:	7bfb      	ldrb	r3, [r7, #15]
 800ad9a:	4619      	mov	r1, r3
 800ad9c:	6878      	ldr	r0, [r7, #4]
 800ad9e:	f7fe fe25 	bl	80099ec <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ada2:	6878      	ldr	r0, [r7, #4]
 800ada4:	f000 fb89 	bl	800b4ba <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ada8:	7bfb      	ldrb	r3, [r7, #15]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d004      	beq.n	800adb8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	2202      	movs	r2, #2
 800adb2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800adb6:	e009      	b.n	800adcc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2201      	movs	r2, #1
 800adbc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800adc0:	e004      	b.n	800adcc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800adc2:	6839      	ldr	r1, [r7, #0]
 800adc4:	6878      	ldr	r0, [r7, #4]
 800adc6:	f000 f99e 	bl	800b106 <USBD_CtlError>
  }
}
 800adca:	bf00      	nop
 800adcc:	bf00      	nop
 800adce:	3710      	adds	r7, #16
 800add0:	46bd      	mov	sp, r7
 800add2:	bd80      	pop	{r7, pc}

0800add4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b084      	sub	sp, #16
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
 800addc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800adde:	2300      	movs	r3, #0
 800ade0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ade2:	683b      	ldr	r3, [r7, #0]
 800ade4:	885b      	ldrh	r3, [r3, #2]
 800ade6:	b2da      	uxtb	r2, r3
 800ade8:	4b4e      	ldr	r3, [pc, #312]	@ (800af24 <USBD_SetConfig+0x150>)
 800adea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800adec:	4b4d      	ldr	r3, [pc, #308]	@ (800af24 <USBD_SetConfig+0x150>)
 800adee:	781b      	ldrb	r3, [r3, #0]
 800adf0:	2b01      	cmp	r3, #1
 800adf2:	d905      	bls.n	800ae00 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800adf4:	6839      	ldr	r1, [r7, #0]
 800adf6:	6878      	ldr	r0, [r7, #4]
 800adf8:	f000 f985 	bl	800b106 <USBD_CtlError>
    return USBD_FAIL;
 800adfc:	2303      	movs	r3, #3
 800adfe:	e08c      	b.n	800af1a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae06:	b2db      	uxtb	r3, r3
 800ae08:	2b02      	cmp	r3, #2
 800ae0a:	d002      	beq.n	800ae12 <USBD_SetConfig+0x3e>
 800ae0c:	2b03      	cmp	r3, #3
 800ae0e:	d029      	beq.n	800ae64 <USBD_SetConfig+0x90>
 800ae10:	e075      	b.n	800aefe <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ae12:	4b44      	ldr	r3, [pc, #272]	@ (800af24 <USBD_SetConfig+0x150>)
 800ae14:	781b      	ldrb	r3, [r3, #0]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d020      	beq.n	800ae5c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800ae1a:	4b42      	ldr	r3, [pc, #264]	@ (800af24 <USBD_SetConfig+0x150>)
 800ae1c:	781b      	ldrb	r3, [r3, #0]
 800ae1e:	461a      	mov	r2, r3
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ae24:	4b3f      	ldr	r3, [pc, #252]	@ (800af24 <USBD_SetConfig+0x150>)
 800ae26:	781b      	ldrb	r3, [r3, #0]
 800ae28:	4619      	mov	r1, r3
 800ae2a:	6878      	ldr	r0, [r7, #4]
 800ae2c:	f7fe ff65 	bl	8009cfa <USBD_SetClassConfig>
 800ae30:	4603      	mov	r3, r0
 800ae32:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ae34:	7bfb      	ldrb	r3, [r7, #15]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d008      	beq.n	800ae4c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800ae3a:	6839      	ldr	r1, [r7, #0]
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f000 f962 	bl	800b106 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2202      	movs	r2, #2
 800ae46:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ae4a:	e065      	b.n	800af18 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ae4c:	6878      	ldr	r0, [r7, #4]
 800ae4e:	f000 fb34 	bl	800b4ba <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	2203      	movs	r2, #3
 800ae56:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ae5a:	e05d      	b.n	800af18 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ae5c:	6878      	ldr	r0, [r7, #4]
 800ae5e:	f000 fb2c 	bl	800b4ba <USBD_CtlSendStatus>
      break;
 800ae62:	e059      	b.n	800af18 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ae64:	4b2f      	ldr	r3, [pc, #188]	@ (800af24 <USBD_SetConfig+0x150>)
 800ae66:	781b      	ldrb	r3, [r3, #0]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d112      	bne.n	800ae92 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	2202      	movs	r2, #2
 800ae70:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800ae74:	4b2b      	ldr	r3, [pc, #172]	@ (800af24 <USBD_SetConfig+0x150>)
 800ae76:	781b      	ldrb	r3, [r3, #0]
 800ae78:	461a      	mov	r2, r3
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ae7e:	4b29      	ldr	r3, [pc, #164]	@ (800af24 <USBD_SetConfig+0x150>)
 800ae80:	781b      	ldrb	r3, [r3, #0]
 800ae82:	4619      	mov	r1, r3
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	f7fe ff73 	bl	8009d70 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ae8a:	6878      	ldr	r0, [r7, #4]
 800ae8c:	f000 fb15 	bl	800b4ba <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ae90:	e042      	b.n	800af18 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800ae92:	4b24      	ldr	r3, [pc, #144]	@ (800af24 <USBD_SetConfig+0x150>)
 800ae94:	781b      	ldrb	r3, [r3, #0]
 800ae96:	461a      	mov	r2, r3
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	685b      	ldr	r3, [r3, #4]
 800ae9c:	429a      	cmp	r2, r3
 800ae9e:	d02a      	beq.n	800aef6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	685b      	ldr	r3, [r3, #4]
 800aea4:	b2db      	uxtb	r3, r3
 800aea6:	4619      	mov	r1, r3
 800aea8:	6878      	ldr	r0, [r7, #4]
 800aeaa:	f7fe ff61 	bl	8009d70 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800aeae:	4b1d      	ldr	r3, [pc, #116]	@ (800af24 <USBD_SetConfig+0x150>)
 800aeb0:	781b      	ldrb	r3, [r3, #0]
 800aeb2:	461a      	mov	r2, r3
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800aeb8:	4b1a      	ldr	r3, [pc, #104]	@ (800af24 <USBD_SetConfig+0x150>)
 800aeba:	781b      	ldrb	r3, [r3, #0]
 800aebc:	4619      	mov	r1, r3
 800aebe:	6878      	ldr	r0, [r7, #4]
 800aec0:	f7fe ff1b 	bl	8009cfa <USBD_SetClassConfig>
 800aec4:	4603      	mov	r3, r0
 800aec6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800aec8:	7bfb      	ldrb	r3, [r7, #15]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d00f      	beq.n	800aeee <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800aece:	6839      	ldr	r1, [r7, #0]
 800aed0:	6878      	ldr	r0, [r7, #4]
 800aed2:	f000 f918 	bl	800b106 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	685b      	ldr	r3, [r3, #4]
 800aeda:	b2db      	uxtb	r3, r3
 800aedc:	4619      	mov	r1, r3
 800aede:	6878      	ldr	r0, [r7, #4]
 800aee0:	f7fe ff46 	bl	8009d70 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2202      	movs	r2, #2
 800aee8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800aeec:	e014      	b.n	800af18 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800aeee:	6878      	ldr	r0, [r7, #4]
 800aef0:	f000 fae3 	bl	800b4ba <USBD_CtlSendStatus>
      break;
 800aef4:	e010      	b.n	800af18 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	f000 fadf 	bl	800b4ba <USBD_CtlSendStatus>
      break;
 800aefc:	e00c      	b.n	800af18 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800aefe:	6839      	ldr	r1, [r7, #0]
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f000 f900 	bl	800b106 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800af06:	4b07      	ldr	r3, [pc, #28]	@ (800af24 <USBD_SetConfig+0x150>)
 800af08:	781b      	ldrb	r3, [r3, #0]
 800af0a:	4619      	mov	r1, r3
 800af0c:	6878      	ldr	r0, [r7, #4]
 800af0e:	f7fe ff2f 	bl	8009d70 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800af12:	2303      	movs	r3, #3
 800af14:	73fb      	strb	r3, [r7, #15]
      break;
 800af16:	bf00      	nop
  }

  return ret;
 800af18:	7bfb      	ldrb	r3, [r7, #15]
}
 800af1a:	4618      	mov	r0, r3
 800af1c:	3710      	adds	r7, #16
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}
 800af22:	bf00      	nop
 800af24:	20000b9c 	.word	0x20000b9c

0800af28 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b082      	sub	sp, #8
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
 800af30:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	88db      	ldrh	r3, [r3, #6]
 800af36:	2b01      	cmp	r3, #1
 800af38:	d004      	beq.n	800af44 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800af3a:	6839      	ldr	r1, [r7, #0]
 800af3c:	6878      	ldr	r0, [r7, #4]
 800af3e:	f000 f8e2 	bl	800b106 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800af42:	e023      	b.n	800af8c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af4a:	b2db      	uxtb	r3, r3
 800af4c:	2b02      	cmp	r3, #2
 800af4e:	dc02      	bgt.n	800af56 <USBD_GetConfig+0x2e>
 800af50:	2b00      	cmp	r3, #0
 800af52:	dc03      	bgt.n	800af5c <USBD_GetConfig+0x34>
 800af54:	e015      	b.n	800af82 <USBD_GetConfig+0x5a>
 800af56:	2b03      	cmp	r3, #3
 800af58:	d00b      	beq.n	800af72 <USBD_GetConfig+0x4a>
 800af5a:	e012      	b.n	800af82 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2200      	movs	r2, #0
 800af60:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	3308      	adds	r3, #8
 800af66:	2201      	movs	r2, #1
 800af68:	4619      	mov	r1, r3
 800af6a:	6878      	ldr	r0, [r7, #4]
 800af6c:	f000 fa4b 	bl	800b406 <USBD_CtlSendData>
        break;
 800af70:	e00c      	b.n	800af8c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	3304      	adds	r3, #4
 800af76:	2201      	movs	r2, #1
 800af78:	4619      	mov	r1, r3
 800af7a:	6878      	ldr	r0, [r7, #4]
 800af7c:	f000 fa43 	bl	800b406 <USBD_CtlSendData>
        break;
 800af80:	e004      	b.n	800af8c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800af82:	6839      	ldr	r1, [r7, #0]
 800af84:	6878      	ldr	r0, [r7, #4]
 800af86:	f000 f8be 	bl	800b106 <USBD_CtlError>
        break;
 800af8a:	bf00      	nop
}
 800af8c:	bf00      	nop
 800af8e:	3708      	adds	r7, #8
 800af90:	46bd      	mov	sp, r7
 800af92:	bd80      	pop	{r7, pc}

0800af94 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b082      	sub	sp, #8
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
 800af9c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800afa4:	b2db      	uxtb	r3, r3
 800afa6:	3b01      	subs	r3, #1
 800afa8:	2b02      	cmp	r3, #2
 800afaa:	d81e      	bhi.n	800afea <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800afac:	683b      	ldr	r3, [r7, #0]
 800afae:	88db      	ldrh	r3, [r3, #6]
 800afb0:	2b02      	cmp	r3, #2
 800afb2:	d004      	beq.n	800afbe <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800afb4:	6839      	ldr	r1, [r7, #0]
 800afb6:	6878      	ldr	r0, [r7, #4]
 800afb8:	f000 f8a5 	bl	800b106 <USBD_CtlError>
        break;
 800afbc:	e01a      	b.n	800aff4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	2201      	movs	r2, #1
 800afc2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d005      	beq.n	800afda <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	68db      	ldr	r3, [r3, #12]
 800afd2:	f043 0202 	orr.w	r2, r3, #2
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	330c      	adds	r3, #12
 800afde:	2202      	movs	r2, #2
 800afe0:	4619      	mov	r1, r3
 800afe2:	6878      	ldr	r0, [r7, #4]
 800afe4:	f000 fa0f 	bl	800b406 <USBD_CtlSendData>
      break;
 800afe8:	e004      	b.n	800aff4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800afea:	6839      	ldr	r1, [r7, #0]
 800afec:	6878      	ldr	r0, [r7, #4]
 800afee:	f000 f88a 	bl	800b106 <USBD_CtlError>
      break;
 800aff2:	bf00      	nop
  }
}
 800aff4:	bf00      	nop
 800aff6:	3708      	adds	r7, #8
 800aff8:	46bd      	mov	sp, r7
 800affa:	bd80      	pop	{r7, pc}

0800affc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b082      	sub	sp, #8
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
 800b004:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	885b      	ldrh	r3, [r3, #2]
 800b00a:	2b01      	cmp	r3, #1
 800b00c:	d107      	bne.n	800b01e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2201      	movs	r2, #1
 800b012:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b016:	6878      	ldr	r0, [r7, #4]
 800b018:	f000 fa4f 	bl	800b4ba <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b01c:	e013      	b.n	800b046 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	885b      	ldrh	r3, [r3, #2]
 800b022:	2b02      	cmp	r3, #2
 800b024:	d10b      	bne.n	800b03e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	889b      	ldrh	r3, [r3, #4]
 800b02a:	0a1b      	lsrs	r3, r3, #8
 800b02c:	b29b      	uxth	r3, r3
 800b02e:	b2da      	uxtb	r2, r3
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f000 fa3f 	bl	800b4ba <USBD_CtlSendStatus>
}
 800b03c:	e003      	b.n	800b046 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b03e:	6839      	ldr	r1, [r7, #0]
 800b040:	6878      	ldr	r0, [r7, #4]
 800b042:	f000 f860 	bl	800b106 <USBD_CtlError>
}
 800b046:	bf00      	nop
 800b048:	3708      	adds	r7, #8
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd80      	pop	{r7, pc}

0800b04e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b04e:	b580      	push	{r7, lr}
 800b050:	b082      	sub	sp, #8
 800b052:	af00      	add	r7, sp, #0
 800b054:	6078      	str	r0, [r7, #4]
 800b056:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b05e:	b2db      	uxtb	r3, r3
 800b060:	3b01      	subs	r3, #1
 800b062:	2b02      	cmp	r3, #2
 800b064:	d80b      	bhi.n	800b07e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	885b      	ldrh	r3, [r3, #2]
 800b06a:	2b01      	cmp	r3, #1
 800b06c:	d10c      	bne.n	800b088 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	2200      	movs	r2, #0
 800b072:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b076:	6878      	ldr	r0, [r7, #4]
 800b078:	f000 fa1f 	bl	800b4ba <USBD_CtlSendStatus>
      }
      break;
 800b07c:	e004      	b.n	800b088 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b07e:	6839      	ldr	r1, [r7, #0]
 800b080:	6878      	ldr	r0, [r7, #4]
 800b082:	f000 f840 	bl	800b106 <USBD_CtlError>
      break;
 800b086:	e000      	b.n	800b08a <USBD_ClrFeature+0x3c>
      break;
 800b088:	bf00      	nop
  }
}
 800b08a:	bf00      	nop
 800b08c:	3708      	adds	r7, #8
 800b08e:	46bd      	mov	sp, r7
 800b090:	bd80      	pop	{r7, pc}

0800b092 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b092:	b580      	push	{r7, lr}
 800b094:	b084      	sub	sp, #16
 800b096:	af00      	add	r7, sp, #0
 800b098:	6078      	str	r0, [r7, #4]
 800b09a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	781a      	ldrb	r2, [r3, #0]
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	3301      	adds	r3, #1
 800b0ac:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	781a      	ldrb	r2, [r3, #0]
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	3301      	adds	r3, #1
 800b0ba:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b0bc:	68f8      	ldr	r0, [r7, #12]
 800b0be:	f7ff fa06 	bl	800a4ce <SWAPBYTE>
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	461a      	mov	r2, r3
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	3301      	adds	r3, #1
 800b0ce:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	3301      	adds	r3, #1
 800b0d4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b0d6:	68f8      	ldr	r0, [r7, #12]
 800b0d8:	f7ff f9f9 	bl	800a4ce <SWAPBYTE>
 800b0dc:	4603      	mov	r3, r0
 800b0de:	461a      	mov	r2, r3
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	3301      	adds	r3, #1
 800b0e8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	3301      	adds	r3, #1
 800b0ee:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b0f0:	68f8      	ldr	r0, [r7, #12]
 800b0f2:	f7ff f9ec 	bl	800a4ce <SWAPBYTE>
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	461a      	mov	r2, r3
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	80da      	strh	r2, [r3, #6]
}
 800b0fe:	bf00      	nop
 800b100:	3710      	adds	r7, #16
 800b102:	46bd      	mov	sp, r7
 800b104:	bd80      	pop	{r7, pc}

0800b106 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b106:	b580      	push	{r7, lr}
 800b108:	b082      	sub	sp, #8
 800b10a:	af00      	add	r7, sp, #0
 800b10c:	6078      	str	r0, [r7, #4]
 800b10e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b110:	2180      	movs	r1, #128	@ 0x80
 800b112:	6878      	ldr	r0, [r7, #4]
 800b114:	f7fe fc0c 	bl	8009930 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b118:	2100      	movs	r1, #0
 800b11a:	6878      	ldr	r0, [r7, #4]
 800b11c:	f7fe fc08 	bl	8009930 <USBD_LL_StallEP>
}
 800b120:	bf00      	nop
 800b122:	3708      	adds	r7, #8
 800b124:	46bd      	mov	sp, r7
 800b126:	bd80      	pop	{r7, pc}

0800b128 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b086      	sub	sp, #24
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	60f8      	str	r0, [r7, #12]
 800b130:	60b9      	str	r1, [r7, #8]
 800b132:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b134:	2300      	movs	r3, #0
 800b136:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d036      	beq.n	800b1ac <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b142:	6938      	ldr	r0, [r7, #16]
 800b144:	f000 f836 	bl	800b1b4 <USBD_GetLen>
 800b148:	4603      	mov	r3, r0
 800b14a:	3301      	adds	r3, #1
 800b14c:	b29b      	uxth	r3, r3
 800b14e:	005b      	lsls	r3, r3, #1
 800b150:	b29a      	uxth	r2, r3
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b156:	7dfb      	ldrb	r3, [r7, #23]
 800b158:	68ba      	ldr	r2, [r7, #8]
 800b15a:	4413      	add	r3, r2
 800b15c:	687a      	ldr	r2, [r7, #4]
 800b15e:	7812      	ldrb	r2, [r2, #0]
 800b160:	701a      	strb	r2, [r3, #0]
  idx++;
 800b162:	7dfb      	ldrb	r3, [r7, #23]
 800b164:	3301      	adds	r3, #1
 800b166:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b168:	7dfb      	ldrb	r3, [r7, #23]
 800b16a:	68ba      	ldr	r2, [r7, #8]
 800b16c:	4413      	add	r3, r2
 800b16e:	2203      	movs	r2, #3
 800b170:	701a      	strb	r2, [r3, #0]
  idx++;
 800b172:	7dfb      	ldrb	r3, [r7, #23]
 800b174:	3301      	adds	r3, #1
 800b176:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b178:	e013      	b.n	800b1a2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b17a:	7dfb      	ldrb	r3, [r7, #23]
 800b17c:	68ba      	ldr	r2, [r7, #8]
 800b17e:	4413      	add	r3, r2
 800b180:	693a      	ldr	r2, [r7, #16]
 800b182:	7812      	ldrb	r2, [r2, #0]
 800b184:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b186:	693b      	ldr	r3, [r7, #16]
 800b188:	3301      	adds	r3, #1
 800b18a:	613b      	str	r3, [r7, #16]
    idx++;
 800b18c:	7dfb      	ldrb	r3, [r7, #23]
 800b18e:	3301      	adds	r3, #1
 800b190:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b192:	7dfb      	ldrb	r3, [r7, #23]
 800b194:	68ba      	ldr	r2, [r7, #8]
 800b196:	4413      	add	r3, r2
 800b198:	2200      	movs	r2, #0
 800b19a:	701a      	strb	r2, [r3, #0]
    idx++;
 800b19c:	7dfb      	ldrb	r3, [r7, #23]
 800b19e:	3301      	adds	r3, #1
 800b1a0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b1a2:	693b      	ldr	r3, [r7, #16]
 800b1a4:	781b      	ldrb	r3, [r3, #0]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d1e7      	bne.n	800b17a <USBD_GetString+0x52>
 800b1aa:	e000      	b.n	800b1ae <USBD_GetString+0x86>
    return;
 800b1ac:	bf00      	nop
  }
}
 800b1ae:	3718      	adds	r7, #24
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	bd80      	pop	{r7, pc}

0800b1b4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b1b4:	b480      	push	{r7}
 800b1b6:	b085      	sub	sp, #20
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b1bc:	2300      	movs	r3, #0
 800b1be:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b1c4:	e005      	b.n	800b1d2 <USBD_GetLen+0x1e>
  {
    len++;
 800b1c6:	7bfb      	ldrb	r3, [r7, #15]
 800b1c8:	3301      	adds	r3, #1
 800b1ca:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b1cc:	68bb      	ldr	r3, [r7, #8]
 800b1ce:	3301      	adds	r3, #1
 800b1d0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b1d2:	68bb      	ldr	r3, [r7, #8]
 800b1d4:	781b      	ldrb	r3, [r3, #0]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d1f5      	bne.n	800b1c6 <USBD_GetLen+0x12>
  }

  return len;
 800b1da:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1dc:	4618      	mov	r0, r3
 800b1de:	3714      	adds	r7, #20
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e6:	4770      	bx	lr

0800b1e8 <USBD_Class_DeviceDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b1e8:	b480      	push	{r7}
 800b1ea:	b083      	sub	sp, #12
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	6039      	str	r1, [r7, #0]
 800b1f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = sizeof(USBD_DeviceDesc);
 800b1f4:	683b      	ldr	r3, [r7, #0]
 800b1f6:	2212      	movs	r2, #18
 800b1f8:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)USBD_DeviceDesc;
 800b1fa:	4b03      	ldr	r3, [pc, #12]	@ (800b208 <USBD_Class_DeviceDescriptor+0x20>)
}
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	370c      	adds	r7, #12
 800b200:	46bd      	mov	sp, r7
 800b202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b206:	4770      	bx	lr
 800b208:	2000015c 	.word	0x2000015c

0800b20c <USBD_Class_LangIDStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b20c:	b480      	push	{r7}
 800b20e:	b083      	sub	sp, #12
 800b210:	af00      	add	r7, sp, #0
 800b212:	4603      	mov	r3, r0
 800b214:	6039      	str	r1, [r7, #0]
 800b216:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = sizeof(USBD_LangIDDesc);
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	2204      	movs	r2, #4
 800b21c:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)USBD_LangIDDesc;
 800b21e:	4b03      	ldr	r3, [pc, #12]	@ (800b22c <USBD_Class_LangIDStrDescriptor+0x20>)
}
 800b220:	4618      	mov	r0, r3
 800b222:	370c      	adds	r7, #12
 800b224:	46bd      	mov	sp, r7
 800b226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22a:	4770      	bx	lr
 800b22c:	20000170 	.word	0x20000170

0800b230 <USBD_Class_ProductStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b230:	b580      	push	{r7, lr}
 800b232:	b082      	sub	sp, #8
 800b234:	af00      	add	r7, sp, #0
 800b236:	4603      	mov	r3, r0
 800b238:	6039      	str	r1, [r7, #0]
 800b23a:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 800b23c:	79fb      	ldrb	r3, [r7, #7]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d105      	bne.n	800b24e <USBD_Class_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_HS_STRING, USBD_StrDesc, length);
 800b242:	683a      	ldr	r2, [r7, #0]
 800b244:	4907      	ldr	r1, [pc, #28]	@ (800b264 <USBD_Class_ProductStrDescriptor+0x34>)
 800b246:	4808      	ldr	r0, [pc, #32]	@ (800b268 <USBD_Class_ProductStrDescriptor+0x38>)
 800b248:	f7ff ff6e 	bl	800b128 <USBD_GetString>
 800b24c:	e004      	b.n	800b258 <USBD_Class_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);
 800b24e:	683a      	ldr	r2, [r7, #0]
 800b250:	4904      	ldr	r1, [pc, #16]	@ (800b264 <USBD_Class_ProductStrDescriptor+0x34>)
 800b252:	4806      	ldr	r0, [pc, #24]	@ (800b26c <USBD_Class_ProductStrDescriptor+0x3c>)
 800b254:	f7ff ff68 	bl	800b128 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b258:	4b02      	ldr	r3, [pc, #8]	@ (800b264 <USBD_Class_ProductStrDescriptor+0x34>)
}
 800b25a:	4618      	mov	r0, r3
 800b25c:	3708      	adds	r7, #8
 800b25e:	46bd      	mov	sp, r7
 800b260:	bd80      	pop	{r7, pc}
 800b262:	bf00      	nop
 800b264:	20000ba0 	.word	0x20000ba0
 800b268:	0800c84c 	.word	0x0800c84c
 800b26c:	0800c870 	.word	0x0800c870

0800b270 <USBD_Class_ManufacturerStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b082      	sub	sp, #8
 800b274:	af00      	add	r7, sp, #0
 800b276:	4603      	mov	r3, r0
 800b278:	6039      	str	r1, [r7, #0]
 800b27a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b27c:	683a      	ldr	r2, [r7, #0]
 800b27e:	4904      	ldr	r1, [pc, #16]	@ (800b290 <USBD_Class_ManufacturerStrDescriptor+0x20>)
 800b280:	4804      	ldr	r0, [pc, #16]	@ (800b294 <USBD_Class_ManufacturerStrDescriptor+0x24>)
 800b282:	f7ff ff51 	bl	800b128 <USBD_GetString>
  return USBD_StrDesc;
 800b286:	4b02      	ldr	r3, [pc, #8]	@ (800b290 <USBD_Class_ManufacturerStrDescriptor+0x20>)
}
 800b288:	4618      	mov	r0, r3
 800b28a:	3708      	adds	r7, #8
 800b28c:	46bd      	mov	sp, r7
 800b28e:	bd80      	pop	{r7, pc}
 800b290:	20000ba0 	.word	0x20000ba0
 800b294:	0800c894 	.word	0x0800c894

0800b298 <USBD_Class_SerialStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b082      	sub	sp, #8
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	4603      	mov	r3, r0
 800b2a0:	6039      	str	r1, [r7, #0]
 800b2a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = USB_SIZ_STRING_SERIAL;
 800b2a4:	683b      	ldr	r3, [r7, #0]
 800b2a6:	221a      	movs	r2, #26
 800b2a8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique ID*/
  Get_SerialNum();
 800b2aa:	f000 f843 	bl	800b334 <Get_SerialNum>

  return (uint8_t *)USBD_StringSerial;
 800b2ae:	4b02      	ldr	r3, [pc, #8]	@ (800b2b8 <USBD_Class_SerialStrDescriptor+0x20>)
}
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	3708      	adds	r7, #8
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	bd80      	pop	{r7, pc}
 800b2b8:	20000174 	.word	0x20000174

0800b2bc <USBD_Class_ConfigStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b082      	sub	sp, #8
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	6039      	str	r1, [r7, #0]
 800b2c6:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 800b2c8:	79fb      	ldrb	r3, [r7, #7]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d105      	bne.n	800b2da <USBD_Class_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_HS_STRING, USBD_StrDesc, length);
 800b2ce:	683a      	ldr	r2, [r7, #0]
 800b2d0:	4907      	ldr	r1, [pc, #28]	@ (800b2f0 <USBD_Class_ConfigStrDescriptor+0x34>)
 800b2d2:	4808      	ldr	r0, [pc, #32]	@ (800b2f4 <USBD_Class_ConfigStrDescriptor+0x38>)
 800b2d4:	f7ff ff28 	bl	800b128 <USBD_GetString>
 800b2d8:	e004      	b.n	800b2e4 <USBD_Class_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length);
 800b2da:	683a      	ldr	r2, [r7, #0]
 800b2dc:	4904      	ldr	r1, [pc, #16]	@ (800b2f0 <USBD_Class_ConfigStrDescriptor+0x34>)
 800b2de:	4805      	ldr	r0, [pc, #20]	@ (800b2f4 <USBD_Class_ConfigStrDescriptor+0x38>)
 800b2e0:	f7ff ff22 	bl	800b128 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b2e4:	4b02      	ldr	r3, [pc, #8]	@ (800b2f0 <USBD_Class_ConfigStrDescriptor+0x34>)
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	3708      	adds	r7, #8
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}
 800b2ee:	bf00      	nop
 800b2f0:	20000ba0 	.word	0x20000ba0
 800b2f4:	0800c8a8 	.word	0x0800c8a8

0800b2f8 <USBD_Class_InterfaceStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b082      	sub	sp, #8
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	4603      	mov	r3, r0
 800b300:	6039      	str	r1, [r7, #0]
 800b302:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 800b304:	79fb      	ldrb	r3, [r7, #7]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d105      	bne.n	800b316 <USBD_Class_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_HS_STRING, USBD_StrDesc, length);
 800b30a:	683a      	ldr	r2, [r7, #0]
 800b30c:	4907      	ldr	r1, [pc, #28]	@ (800b32c <USBD_Class_InterfaceStrDescriptor+0x34>)
 800b30e:	4808      	ldr	r0, [pc, #32]	@ (800b330 <USBD_Class_InterfaceStrDescriptor+0x38>)
 800b310:	f7ff ff0a 	bl	800b128 <USBD_GetString>
 800b314:	e004      	b.n	800b320 <USBD_Class_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 800b316:	683a      	ldr	r2, [r7, #0]
 800b318:	4904      	ldr	r1, [pc, #16]	@ (800b32c <USBD_Class_InterfaceStrDescriptor+0x34>)
 800b31a:	4805      	ldr	r0, [pc, #20]	@ (800b330 <USBD_Class_InterfaceStrDescriptor+0x38>)
 800b31c:	f7ff ff04 	bl	800b128 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b320:	4b02      	ldr	r3, [pc, #8]	@ (800b32c <USBD_Class_InterfaceStrDescriptor+0x34>)
}
 800b322:	4618      	mov	r0, r3
 800b324:	3708      	adds	r7, #8
 800b326:	46bd      	mov	sp, r7
 800b328:	bd80      	pop	{r7, pc}
 800b32a:	bf00      	nop
 800b32c:	20000ba0 	.word	0x20000ba0
 800b330:	0800c8c8 	.word	0x0800c8c8

0800b334 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b084      	sub	sp, #16
 800b338:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *)DEVICE_ID1;
 800b33a:	4b0f      	ldr	r3, [pc, #60]	@ (800b378 <Get_SerialNum+0x44>)
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *)DEVICE_ID2;
 800b340:	4b0e      	ldr	r3, [pc, #56]	@ (800b37c <Get_SerialNum+0x48>)
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *)DEVICE_ID3;
 800b346:	4b0e      	ldr	r3, [pc, #56]	@ (800b380 <Get_SerialNum+0x4c>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b34c:	68fa      	ldr	r2, [r7, #12]
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	4413      	add	r3, r2
 800b352:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0U)
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d009      	beq.n	800b36e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8U);
 800b35a:	2208      	movs	r2, #8
 800b35c:	4909      	ldr	r1, [pc, #36]	@ (800b384 <Get_SerialNum+0x50>)
 800b35e:	68f8      	ldr	r0, [r7, #12]
 800b360:	f000 f814 	bl	800b38c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4U);
 800b364:	2204      	movs	r2, #4
 800b366:	4908      	ldr	r1, [pc, #32]	@ (800b388 <Get_SerialNum+0x54>)
 800b368:	68b8      	ldr	r0, [r7, #8]
 800b36a:	f000 f80f 	bl	800b38c <IntToUnicode>
  }
}
 800b36e:	bf00      	nop
 800b370:	3710      	adds	r7, #16
 800b372:	46bd      	mov	sp, r7
 800b374:	bd80      	pop	{r7, pc}
 800b376:	bf00      	nop
 800b378:	08fff800 	.word	0x08fff800
 800b37c:	08fff804 	.word	0x08fff804
 800b380:	08fff808 	.word	0x08fff808
 800b384:	20000176 	.word	0x20000176
 800b388:	20000186 	.word	0x20000186

0800b38c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t *pbuf, uint8_t len)
{
 800b38c:	b480      	push	{r7}
 800b38e:	b087      	sub	sp, #28
 800b390:	af00      	add	r7, sp, #0
 800b392:	60f8      	str	r0, [r7, #12]
 800b394:	60b9      	str	r1, [r7, #8]
 800b396:	4613      	mov	r3, r2
 800b398:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0U;
 800b39a:	2300      	movs	r3, #0
 800b39c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0U ; idx < len ; idx ++)
 800b39e:	2300      	movs	r3, #0
 800b3a0:	75fb      	strb	r3, [r7, #23]
 800b3a2:	e025      	b.n	800b3f0 <IntToUnicode+0x64>
  {
    if (((value >> 28)) < 0xAU)
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	0f1b      	lsrs	r3, r3, #28
 800b3a8:	2b09      	cmp	r3, #9
 800b3aa:	d80a      	bhi.n	800b3c2 <IntToUnicode+0x36>
    {
      pbuf[ 2U * idx] = (value >> 28) + '0';
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	0f1b      	lsrs	r3, r3, #28
 800b3b0:	b2da      	uxtb	r2, r3
 800b3b2:	7dfb      	ldrb	r3, [r7, #23]
 800b3b4:	005b      	lsls	r3, r3, #1
 800b3b6:	68b9      	ldr	r1, [r7, #8]
 800b3b8:	440b      	add	r3, r1
 800b3ba:	3230      	adds	r2, #48	@ 0x30
 800b3bc:	b2d2      	uxtb	r2, r2
 800b3be:	701a      	strb	r2, [r3, #0]
 800b3c0:	e009      	b.n	800b3d6 <IntToUnicode+0x4a>
    }
    else
    {
      pbuf[2U * idx] = (value >> 28) + 'A' - 10U;
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	0f1b      	lsrs	r3, r3, #28
 800b3c6:	b2da      	uxtb	r2, r3
 800b3c8:	7dfb      	ldrb	r3, [r7, #23]
 800b3ca:	005b      	lsls	r3, r3, #1
 800b3cc:	68b9      	ldr	r1, [r7, #8]
 800b3ce:	440b      	add	r3, r1
 800b3d0:	3237      	adds	r2, #55	@ 0x37
 800b3d2:	b2d2      	uxtb	r2, r2
 800b3d4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	011b      	lsls	r3, r3, #4
 800b3da:	60fb      	str	r3, [r7, #12]

    pbuf[2U * idx + 1] = 0U;
 800b3dc:	7dfb      	ldrb	r3, [r7, #23]
 800b3de:	005b      	lsls	r3, r3, #1
 800b3e0:	3301      	adds	r3, #1
 800b3e2:	68ba      	ldr	r2, [r7, #8]
 800b3e4:	4413      	add	r3, r2
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	701a      	strb	r2, [r3, #0]
  for (idx = 0U ; idx < len ; idx ++)
 800b3ea:	7dfb      	ldrb	r3, [r7, #23]
 800b3ec:	3301      	adds	r3, #1
 800b3ee:	75fb      	strb	r3, [r7, #23]
 800b3f0:	7dfa      	ldrb	r2, [r7, #23]
 800b3f2:	79fb      	ldrb	r3, [r7, #7]
 800b3f4:	429a      	cmp	r2, r3
 800b3f6:	d3d5      	bcc.n	800b3a4 <IntToUnicode+0x18>
  }
}
 800b3f8:	bf00      	nop
 800b3fa:	bf00      	nop
 800b3fc:	371c      	adds	r7, #28
 800b3fe:	46bd      	mov	sp, r7
 800b400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b404:	4770      	bx	lr

0800b406 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b406:	b580      	push	{r7, lr}
 800b408:	b084      	sub	sp, #16
 800b40a:	af00      	add	r7, sp, #0
 800b40c:	60f8      	str	r0, [r7, #12]
 800b40e:	60b9      	str	r1, [r7, #8]
 800b410:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	2202      	movs	r2, #2
 800b416:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	687a      	ldr	r2, [r7, #4]
 800b41e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	687a      	ldr	r2, [r7, #4]
 800b424:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	68ba      	ldr	r2, [r7, #8]
 800b42a:	2100      	movs	r1, #0
 800b42c:	68f8      	ldr	r0, [r7, #12]
 800b42e:	f7fe faf6 	bl	8009a1e <USBD_LL_Transmit>

  return USBD_OK;
 800b432:	2300      	movs	r3, #0
}
 800b434:	4618      	mov	r0, r3
 800b436:	3710      	adds	r7, #16
 800b438:	46bd      	mov	sp, r7
 800b43a:	bd80      	pop	{r7, pc}

0800b43c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b084      	sub	sp, #16
 800b440:	af00      	add	r7, sp, #0
 800b442:	60f8      	str	r0, [r7, #12]
 800b444:	60b9      	str	r1, [r7, #8]
 800b446:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	68ba      	ldr	r2, [r7, #8]
 800b44c:	2100      	movs	r1, #0
 800b44e:	68f8      	ldr	r0, [r7, #12]
 800b450:	f7fe fae5 	bl	8009a1e <USBD_LL_Transmit>

  return USBD_OK;
 800b454:	2300      	movs	r3, #0
}
 800b456:	4618      	mov	r0, r3
 800b458:	3710      	adds	r7, #16
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bd80      	pop	{r7, pc}

0800b45e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b45e:	b580      	push	{r7, lr}
 800b460:	b084      	sub	sp, #16
 800b462:	af00      	add	r7, sp, #0
 800b464:	60f8      	str	r0, [r7, #12]
 800b466:	60b9      	str	r1, [r7, #8]
 800b468:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	2203      	movs	r2, #3
 800b46e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	687a      	ldr	r2, [r7, #4]
 800b476:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	687a      	ldr	r2, [r7, #4]
 800b47e:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	68ba      	ldr	r2, [r7, #8]
 800b486:	2100      	movs	r1, #0
 800b488:	68f8      	ldr	r0, [r7, #12]
 800b48a:	f7fe fae3 	bl	8009a54 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b48e:	2300      	movs	r3, #0
}
 800b490:	4618      	mov	r0, r3
 800b492:	3710      	adds	r7, #16
 800b494:	46bd      	mov	sp, r7
 800b496:	bd80      	pop	{r7, pc}

0800b498 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b084      	sub	sp, #16
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	60f8      	str	r0, [r7, #12]
 800b4a0:	60b9      	str	r1, [r7, #8]
 800b4a2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	68ba      	ldr	r2, [r7, #8]
 800b4a8:	2100      	movs	r1, #0
 800b4aa:	68f8      	ldr	r0, [r7, #12]
 800b4ac:	f7fe fad2 	bl	8009a54 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b4b0:	2300      	movs	r3, #0
}
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	3710      	adds	r7, #16
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	bd80      	pop	{r7, pc}

0800b4ba <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b4ba:	b580      	push	{r7, lr}
 800b4bc:	b082      	sub	sp, #8
 800b4be:	af00      	add	r7, sp, #0
 800b4c0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	2204      	movs	r2, #4
 800b4c6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	2100      	movs	r1, #0
 800b4d0:	6878      	ldr	r0, [r7, #4]
 800b4d2:	f7fe faa4 	bl	8009a1e <USBD_LL_Transmit>

  return USBD_OK;
 800b4d6:	2300      	movs	r3, #0
}
 800b4d8:	4618      	mov	r0, r3
 800b4da:	3708      	adds	r7, #8
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	bd80      	pop	{r7, pc}

0800b4e0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b082      	sub	sp, #8
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2205      	movs	r2, #5
 800b4ec:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	2100      	movs	r1, #0
 800b4f6:	6878      	ldr	r0, [r7, #4]
 800b4f8:	f7fe faac 	bl	8009a54 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b4fc:	2300      	movs	r3, #0
}
 800b4fe:	4618      	mov	r0, r3
 800b500:	3708      	adds	r7, #8
 800b502:	46bd      	mov	sp, r7
 800b504:	bd80      	pop	{r7, pc}
	...

0800b508 <std>:
 800b508:	2300      	movs	r3, #0
 800b50a:	b510      	push	{r4, lr}
 800b50c:	4604      	mov	r4, r0
 800b50e:	6083      	str	r3, [r0, #8]
 800b510:	8181      	strh	r1, [r0, #12]
 800b512:	4619      	mov	r1, r3
 800b514:	6643      	str	r3, [r0, #100]	@ 0x64
 800b516:	81c2      	strh	r2, [r0, #14]
 800b518:	2208      	movs	r2, #8
 800b51a:	6183      	str	r3, [r0, #24]
 800b51c:	e9c0 3300 	strd	r3, r3, [r0]
 800b520:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b524:	305c      	adds	r0, #92	@ 0x5c
 800b526:	f000 f92e 	bl	800b786 <memset>
 800b52a:	4b0d      	ldr	r3, [pc, #52]	@ (800b560 <std+0x58>)
 800b52c:	6224      	str	r4, [r4, #32]
 800b52e:	6263      	str	r3, [r4, #36]	@ 0x24
 800b530:	4b0c      	ldr	r3, [pc, #48]	@ (800b564 <std+0x5c>)
 800b532:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b534:	4b0c      	ldr	r3, [pc, #48]	@ (800b568 <std+0x60>)
 800b536:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b538:	4b0c      	ldr	r3, [pc, #48]	@ (800b56c <std+0x64>)
 800b53a:	6323      	str	r3, [r4, #48]	@ 0x30
 800b53c:	4b0c      	ldr	r3, [pc, #48]	@ (800b570 <std+0x68>)
 800b53e:	429c      	cmp	r4, r3
 800b540:	d006      	beq.n	800b550 <std+0x48>
 800b542:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b546:	4294      	cmp	r4, r2
 800b548:	d002      	beq.n	800b550 <std+0x48>
 800b54a:	33d0      	adds	r3, #208	@ 0xd0
 800b54c:	429c      	cmp	r4, r3
 800b54e:	d105      	bne.n	800b55c <std+0x54>
 800b550:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b558:	f000 b98e 	b.w	800b878 <__retarget_lock_init_recursive>
 800b55c:	bd10      	pop	{r4, pc}
 800b55e:	bf00      	nop
 800b560:	0800b701 	.word	0x0800b701
 800b564:	0800b723 	.word	0x0800b723
 800b568:	0800b75b 	.word	0x0800b75b
 800b56c:	0800b77f 	.word	0x0800b77f
 800b570:	20000ca0 	.word	0x20000ca0

0800b574 <stdio_exit_handler>:
 800b574:	4a02      	ldr	r2, [pc, #8]	@ (800b580 <stdio_exit_handler+0xc>)
 800b576:	4903      	ldr	r1, [pc, #12]	@ (800b584 <stdio_exit_handler+0x10>)
 800b578:	4803      	ldr	r0, [pc, #12]	@ (800b588 <stdio_exit_handler+0x14>)
 800b57a:	f000 b869 	b.w	800b650 <_fwalk_sglue>
 800b57e:	bf00      	nop
 800b580:	20000190 	.word	0x20000190
 800b584:	0800c3d1 	.word	0x0800c3d1
 800b588:	200001a0 	.word	0x200001a0

0800b58c <cleanup_stdio>:
 800b58c:	6841      	ldr	r1, [r0, #4]
 800b58e:	4b0c      	ldr	r3, [pc, #48]	@ (800b5c0 <cleanup_stdio+0x34>)
 800b590:	4299      	cmp	r1, r3
 800b592:	b510      	push	{r4, lr}
 800b594:	4604      	mov	r4, r0
 800b596:	d001      	beq.n	800b59c <cleanup_stdio+0x10>
 800b598:	f000 ff1a 	bl	800c3d0 <_fflush_r>
 800b59c:	68a1      	ldr	r1, [r4, #8]
 800b59e:	4b09      	ldr	r3, [pc, #36]	@ (800b5c4 <cleanup_stdio+0x38>)
 800b5a0:	4299      	cmp	r1, r3
 800b5a2:	d002      	beq.n	800b5aa <cleanup_stdio+0x1e>
 800b5a4:	4620      	mov	r0, r4
 800b5a6:	f000 ff13 	bl	800c3d0 <_fflush_r>
 800b5aa:	68e1      	ldr	r1, [r4, #12]
 800b5ac:	4b06      	ldr	r3, [pc, #24]	@ (800b5c8 <cleanup_stdio+0x3c>)
 800b5ae:	4299      	cmp	r1, r3
 800b5b0:	d004      	beq.n	800b5bc <cleanup_stdio+0x30>
 800b5b2:	4620      	mov	r0, r4
 800b5b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b5b8:	f000 bf0a 	b.w	800c3d0 <_fflush_r>
 800b5bc:	bd10      	pop	{r4, pc}
 800b5be:	bf00      	nop
 800b5c0:	20000ca0 	.word	0x20000ca0
 800b5c4:	20000d08 	.word	0x20000d08
 800b5c8:	20000d70 	.word	0x20000d70

0800b5cc <global_stdio_init.part.0>:
 800b5cc:	b510      	push	{r4, lr}
 800b5ce:	4b0b      	ldr	r3, [pc, #44]	@ (800b5fc <global_stdio_init.part.0+0x30>)
 800b5d0:	2104      	movs	r1, #4
 800b5d2:	4c0b      	ldr	r4, [pc, #44]	@ (800b600 <global_stdio_init.part.0+0x34>)
 800b5d4:	4a0b      	ldr	r2, [pc, #44]	@ (800b604 <global_stdio_init.part.0+0x38>)
 800b5d6:	4620      	mov	r0, r4
 800b5d8:	601a      	str	r2, [r3, #0]
 800b5da:	2200      	movs	r2, #0
 800b5dc:	f7ff ff94 	bl	800b508 <std>
 800b5e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b5e4:	2201      	movs	r2, #1
 800b5e6:	2109      	movs	r1, #9
 800b5e8:	f7ff ff8e 	bl	800b508 <std>
 800b5ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b5f0:	2202      	movs	r2, #2
 800b5f2:	2112      	movs	r1, #18
 800b5f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b5f8:	f7ff bf86 	b.w	800b508 <std>
 800b5fc:	20000dd8 	.word	0x20000dd8
 800b600:	20000ca0 	.word	0x20000ca0
 800b604:	0800b575 	.word	0x0800b575

0800b608 <__sfp_lock_acquire>:
 800b608:	4801      	ldr	r0, [pc, #4]	@ (800b610 <__sfp_lock_acquire+0x8>)
 800b60a:	f000 b936 	b.w	800b87a <__retarget_lock_acquire_recursive>
 800b60e:	bf00      	nop
 800b610:	20000de1 	.word	0x20000de1

0800b614 <__sfp_lock_release>:
 800b614:	4801      	ldr	r0, [pc, #4]	@ (800b61c <__sfp_lock_release+0x8>)
 800b616:	f000 b931 	b.w	800b87c <__retarget_lock_release_recursive>
 800b61a:	bf00      	nop
 800b61c:	20000de1 	.word	0x20000de1

0800b620 <__sinit>:
 800b620:	b510      	push	{r4, lr}
 800b622:	4604      	mov	r4, r0
 800b624:	f7ff fff0 	bl	800b608 <__sfp_lock_acquire>
 800b628:	6a23      	ldr	r3, [r4, #32]
 800b62a:	b11b      	cbz	r3, 800b634 <__sinit+0x14>
 800b62c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b630:	f7ff bff0 	b.w	800b614 <__sfp_lock_release>
 800b634:	4b04      	ldr	r3, [pc, #16]	@ (800b648 <__sinit+0x28>)
 800b636:	6223      	str	r3, [r4, #32]
 800b638:	4b04      	ldr	r3, [pc, #16]	@ (800b64c <__sinit+0x2c>)
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d1f5      	bne.n	800b62c <__sinit+0xc>
 800b640:	f7ff ffc4 	bl	800b5cc <global_stdio_init.part.0>
 800b644:	e7f2      	b.n	800b62c <__sinit+0xc>
 800b646:	bf00      	nop
 800b648:	0800b58d 	.word	0x0800b58d
 800b64c:	20000dd8 	.word	0x20000dd8

0800b650 <_fwalk_sglue>:
 800b650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b654:	4607      	mov	r7, r0
 800b656:	4688      	mov	r8, r1
 800b658:	4614      	mov	r4, r2
 800b65a:	2600      	movs	r6, #0
 800b65c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b660:	f1b9 0901 	subs.w	r9, r9, #1
 800b664:	d505      	bpl.n	800b672 <_fwalk_sglue+0x22>
 800b666:	6824      	ldr	r4, [r4, #0]
 800b668:	2c00      	cmp	r4, #0
 800b66a:	d1f7      	bne.n	800b65c <_fwalk_sglue+0xc>
 800b66c:	4630      	mov	r0, r6
 800b66e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b672:	89ab      	ldrh	r3, [r5, #12]
 800b674:	2b01      	cmp	r3, #1
 800b676:	d907      	bls.n	800b688 <_fwalk_sglue+0x38>
 800b678:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b67c:	3301      	adds	r3, #1
 800b67e:	d003      	beq.n	800b688 <_fwalk_sglue+0x38>
 800b680:	4629      	mov	r1, r5
 800b682:	4638      	mov	r0, r7
 800b684:	47c0      	blx	r8
 800b686:	4306      	orrs	r6, r0
 800b688:	3568      	adds	r5, #104	@ 0x68
 800b68a:	e7e9      	b.n	800b660 <_fwalk_sglue+0x10>

0800b68c <iprintf>:
 800b68c:	b40f      	push	{r0, r1, r2, r3}
 800b68e:	b507      	push	{r0, r1, r2, lr}
 800b690:	4906      	ldr	r1, [pc, #24]	@ (800b6ac <iprintf+0x20>)
 800b692:	ab04      	add	r3, sp, #16
 800b694:	6808      	ldr	r0, [r1, #0]
 800b696:	f853 2b04 	ldr.w	r2, [r3], #4
 800b69a:	6881      	ldr	r1, [r0, #8]
 800b69c:	9301      	str	r3, [sp, #4]
 800b69e:	f000 fb69 	bl	800bd74 <_vfiprintf_r>
 800b6a2:	b003      	add	sp, #12
 800b6a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b6a8:	b004      	add	sp, #16
 800b6aa:	4770      	bx	lr
 800b6ac:	2000019c 	.word	0x2000019c

0800b6b0 <putchar>:
 800b6b0:	4b02      	ldr	r3, [pc, #8]	@ (800b6bc <putchar+0xc>)
 800b6b2:	4601      	mov	r1, r0
 800b6b4:	6818      	ldr	r0, [r3, #0]
 800b6b6:	6882      	ldr	r2, [r0, #8]
 800b6b8:	f000 beb2 	b.w	800c420 <_putc_r>
 800b6bc:	2000019c 	.word	0x2000019c

0800b6c0 <siprintf>:
 800b6c0:	b40e      	push	{r1, r2, r3}
 800b6c2:	b500      	push	{lr}
 800b6c4:	b09c      	sub	sp, #112	@ 0x70
 800b6c6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b6ca:	ab1d      	add	r3, sp, #116	@ 0x74
 800b6cc:	9002      	str	r0, [sp, #8]
 800b6ce:	9006      	str	r0, [sp, #24]
 800b6d0:	9107      	str	r1, [sp, #28]
 800b6d2:	9104      	str	r1, [sp, #16]
 800b6d4:	4808      	ldr	r0, [pc, #32]	@ (800b6f8 <siprintf+0x38>)
 800b6d6:	4909      	ldr	r1, [pc, #36]	@ (800b6fc <siprintf+0x3c>)
 800b6d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6dc:	9105      	str	r1, [sp, #20]
 800b6de:	a902      	add	r1, sp, #8
 800b6e0:	6800      	ldr	r0, [r0, #0]
 800b6e2:	9301      	str	r3, [sp, #4]
 800b6e4:	f000 fa20 	bl	800bb28 <_svfiprintf_r>
 800b6e8:	9b02      	ldr	r3, [sp, #8]
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	701a      	strb	r2, [r3, #0]
 800b6ee:	b01c      	add	sp, #112	@ 0x70
 800b6f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b6f4:	b003      	add	sp, #12
 800b6f6:	4770      	bx	lr
 800b6f8:	2000019c 	.word	0x2000019c
 800b6fc:	ffff0208 	.word	0xffff0208

0800b700 <__sread>:
 800b700:	b510      	push	{r4, lr}
 800b702:	460c      	mov	r4, r1
 800b704:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b708:	f000 f868 	bl	800b7dc <_read_r>
 800b70c:	2800      	cmp	r0, #0
 800b70e:	bfab      	itete	ge
 800b710:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b712:	89a3      	ldrhlt	r3, [r4, #12]
 800b714:	181b      	addge	r3, r3, r0
 800b716:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b71a:	bfac      	ite	ge
 800b71c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b71e:	81a3      	strhlt	r3, [r4, #12]
 800b720:	bd10      	pop	{r4, pc}

0800b722 <__swrite>:
 800b722:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b726:	461f      	mov	r7, r3
 800b728:	898b      	ldrh	r3, [r1, #12]
 800b72a:	4605      	mov	r5, r0
 800b72c:	460c      	mov	r4, r1
 800b72e:	05db      	lsls	r3, r3, #23
 800b730:	4616      	mov	r6, r2
 800b732:	d505      	bpl.n	800b740 <__swrite+0x1e>
 800b734:	2302      	movs	r3, #2
 800b736:	2200      	movs	r2, #0
 800b738:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b73c:	f000 f83c 	bl	800b7b8 <_lseek_r>
 800b740:	89a3      	ldrh	r3, [r4, #12]
 800b742:	4632      	mov	r2, r6
 800b744:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b748:	4628      	mov	r0, r5
 800b74a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b74e:	81a3      	strh	r3, [r4, #12]
 800b750:	463b      	mov	r3, r7
 800b752:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b756:	f000 b853 	b.w	800b800 <_write_r>

0800b75a <__sseek>:
 800b75a:	b510      	push	{r4, lr}
 800b75c:	460c      	mov	r4, r1
 800b75e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b762:	f000 f829 	bl	800b7b8 <_lseek_r>
 800b766:	1c43      	adds	r3, r0, #1
 800b768:	89a3      	ldrh	r3, [r4, #12]
 800b76a:	bf15      	itete	ne
 800b76c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b76e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b772:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b776:	81a3      	strheq	r3, [r4, #12]
 800b778:	bf18      	it	ne
 800b77a:	81a3      	strhne	r3, [r4, #12]
 800b77c:	bd10      	pop	{r4, pc}

0800b77e <__sclose>:
 800b77e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b782:	f000 b809 	b.w	800b798 <_close_r>

0800b786 <memset>:
 800b786:	4402      	add	r2, r0
 800b788:	4603      	mov	r3, r0
 800b78a:	4293      	cmp	r3, r2
 800b78c:	d100      	bne.n	800b790 <memset+0xa>
 800b78e:	4770      	bx	lr
 800b790:	f803 1b01 	strb.w	r1, [r3], #1
 800b794:	e7f9      	b.n	800b78a <memset+0x4>
	...

0800b798 <_close_r>:
 800b798:	b538      	push	{r3, r4, r5, lr}
 800b79a:	2300      	movs	r3, #0
 800b79c:	4d05      	ldr	r5, [pc, #20]	@ (800b7b4 <_close_r+0x1c>)
 800b79e:	4604      	mov	r4, r0
 800b7a0:	4608      	mov	r0, r1
 800b7a2:	602b      	str	r3, [r5, #0]
 800b7a4:	f7f5 f90f 	bl	80009c6 <_close>
 800b7a8:	1c43      	adds	r3, r0, #1
 800b7aa:	d102      	bne.n	800b7b2 <_close_r+0x1a>
 800b7ac:	682b      	ldr	r3, [r5, #0]
 800b7ae:	b103      	cbz	r3, 800b7b2 <_close_r+0x1a>
 800b7b0:	6023      	str	r3, [r4, #0]
 800b7b2:	bd38      	pop	{r3, r4, r5, pc}
 800b7b4:	20000ddc 	.word	0x20000ddc

0800b7b8 <_lseek_r>:
 800b7b8:	b538      	push	{r3, r4, r5, lr}
 800b7ba:	4604      	mov	r4, r0
 800b7bc:	4d06      	ldr	r5, [pc, #24]	@ (800b7d8 <_lseek_r+0x20>)
 800b7be:	4608      	mov	r0, r1
 800b7c0:	4611      	mov	r1, r2
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	602a      	str	r2, [r5, #0]
 800b7c6:	461a      	mov	r2, r3
 800b7c8:	f7f5 f924 	bl	8000a14 <_lseek>
 800b7cc:	1c43      	adds	r3, r0, #1
 800b7ce:	d102      	bne.n	800b7d6 <_lseek_r+0x1e>
 800b7d0:	682b      	ldr	r3, [r5, #0]
 800b7d2:	b103      	cbz	r3, 800b7d6 <_lseek_r+0x1e>
 800b7d4:	6023      	str	r3, [r4, #0]
 800b7d6:	bd38      	pop	{r3, r4, r5, pc}
 800b7d8:	20000ddc 	.word	0x20000ddc

0800b7dc <_read_r>:
 800b7dc:	b538      	push	{r3, r4, r5, lr}
 800b7de:	4604      	mov	r4, r0
 800b7e0:	4d06      	ldr	r5, [pc, #24]	@ (800b7fc <_read_r+0x20>)
 800b7e2:	4608      	mov	r0, r1
 800b7e4:	4611      	mov	r1, r2
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	602a      	str	r2, [r5, #0]
 800b7ea:	461a      	mov	r2, r3
 800b7ec:	f7f5 f8b2 	bl	8000954 <_read>
 800b7f0:	1c43      	adds	r3, r0, #1
 800b7f2:	d102      	bne.n	800b7fa <_read_r+0x1e>
 800b7f4:	682b      	ldr	r3, [r5, #0]
 800b7f6:	b103      	cbz	r3, 800b7fa <_read_r+0x1e>
 800b7f8:	6023      	str	r3, [r4, #0]
 800b7fa:	bd38      	pop	{r3, r4, r5, pc}
 800b7fc:	20000ddc 	.word	0x20000ddc

0800b800 <_write_r>:
 800b800:	b538      	push	{r3, r4, r5, lr}
 800b802:	4604      	mov	r4, r0
 800b804:	4d06      	ldr	r5, [pc, #24]	@ (800b820 <_write_r+0x20>)
 800b806:	4608      	mov	r0, r1
 800b808:	4611      	mov	r1, r2
 800b80a:	2200      	movs	r2, #0
 800b80c:	602a      	str	r2, [r5, #0]
 800b80e:	461a      	mov	r2, r3
 800b810:	f7f5 f8bd 	bl	800098e <_write>
 800b814:	1c43      	adds	r3, r0, #1
 800b816:	d102      	bne.n	800b81e <_write_r+0x1e>
 800b818:	682b      	ldr	r3, [r5, #0]
 800b81a:	b103      	cbz	r3, 800b81e <_write_r+0x1e>
 800b81c:	6023      	str	r3, [r4, #0]
 800b81e:	bd38      	pop	{r3, r4, r5, pc}
 800b820:	20000ddc 	.word	0x20000ddc

0800b824 <__errno>:
 800b824:	4b01      	ldr	r3, [pc, #4]	@ (800b82c <__errno+0x8>)
 800b826:	6818      	ldr	r0, [r3, #0]
 800b828:	4770      	bx	lr
 800b82a:	bf00      	nop
 800b82c:	2000019c 	.word	0x2000019c

0800b830 <__libc_init_array>:
 800b830:	b570      	push	{r4, r5, r6, lr}
 800b832:	4d0d      	ldr	r5, [pc, #52]	@ (800b868 <__libc_init_array+0x38>)
 800b834:	2600      	movs	r6, #0
 800b836:	4c0d      	ldr	r4, [pc, #52]	@ (800b86c <__libc_init_array+0x3c>)
 800b838:	1b64      	subs	r4, r4, r5
 800b83a:	10a4      	asrs	r4, r4, #2
 800b83c:	42a6      	cmp	r6, r4
 800b83e:	d109      	bne.n	800b854 <__libc_init_array+0x24>
 800b840:	4d0b      	ldr	r5, [pc, #44]	@ (800b870 <__libc_init_array+0x40>)
 800b842:	2600      	movs	r6, #0
 800b844:	4c0b      	ldr	r4, [pc, #44]	@ (800b874 <__libc_init_array+0x44>)
 800b846:	f000 ffb1 	bl	800c7ac <_init>
 800b84a:	1b64      	subs	r4, r4, r5
 800b84c:	10a4      	asrs	r4, r4, #2
 800b84e:	42a6      	cmp	r6, r4
 800b850:	d105      	bne.n	800b85e <__libc_init_array+0x2e>
 800b852:	bd70      	pop	{r4, r5, r6, pc}
 800b854:	f855 3b04 	ldr.w	r3, [r5], #4
 800b858:	3601      	adds	r6, #1
 800b85a:	4798      	blx	r3
 800b85c:	e7ee      	b.n	800b83c <__libc_init_array+0xc>
 800b85e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b862:	3601      	adds	r6, #1
 800b864:	4798      	blx	r3
 800b866:	e7f2      	b.n	800b84e <__libc_init_array+0x1e>
 800b868:	0800c93c 	.word	0x0800c93c
 800b86c:	0800c93c 	.word	0x0800c93c
 800b870:	0800c93c 	.word	0x0800c93c
 800b874:	0800c940 	.word	0x0800c940

0800b878 <__retarget_lock_init_recursive>:
 800b878:	4770      	bx	lr

0800b87a <__retarget_lock_acquire_recursive>:
 800b87a:	4770      	bx	lr

0800b87c <__retarget_lock_release_recursive>:
 800b87c:	4770      	bx	lr
	...

0800b880 <_free_r>:
 800b880:	b538      	push	{r3, r4, r5, lr}
 800b882:	4605      	mov	r5, r0
 800b884:	2900      	cmp	r1, #0
 800b886:	d041      	beq.n	800b90c <_free_r+0x8c>
 800b888:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b88c:	1f0c      	subs	r4, r1, #4
 800b88e:	2b00      	cmp	r3, #0
 800b890:	bfb8      	it	lt
 800b892:	18e4      	addlt	r4, r4, r3
 800b894:	f000 f8e0 	bl	800ba58 <__malloc_lock>
 800b898:	4a1d      	ldr	r2, [pc, #116]	@ (800b910 <_free_r+0x90>)
 800b89a:	6813      	ldr	r3, [r2, #0]
 800b89c:	b933      	cbnz	r3, 800b8ac <_free_r+0x2c>
 800b89e:	6063      	str	r3, [r4, #4]
 800b8a0:	6014      	str	r4, [r2, #0]
 800b8a2:	4628      	mov	r0, r5
 800b8a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b8a8:	f000 b8dc 	b.w	800ba64 <__malloc_unlock>
 800b8ac:	42a3      	cmp	r3, r4
 800b8ae:	d908      	bls.n	800b8c2 <_free_r+0x42>
 800b8b0:	6820      	ldr	r0, [r4, #0]
 800b8b2:	1821      	adds	r1, r4, r0
 800b8b4:	428b      	cmp	r3, r1
 800b8b6:	bf01      	itttt	eq
 800b8b8:	6819      	ldreq	r1, [r3, #0]
 800b8ba:	685b      	ldreq	r3, [r3, #4]
 800b8bc:	1809      	addeq	r1, r1, r0
 800b8be:	6021      	streq	r1, [r4, #0]
 800b8c0:	e7ed      	b.n	800b89e <_free_r+0x1e>
 800b8c2:	461a      	mov	r2, r3
 800b8c4:	685b      	ldr	r3, [r3, #4]
 800b8c6:	b10b      	cbz	r3, 800b8cc <_free_r+0x4c>
 800b8c8:	42a3      	cmp	r3, r4
 800b8ca:	d9fa      	bls.n	800b8c2 <_free_r+0x42>
 800b8cc:	6811      	ldr	r1, [r2, #0]
 800b8ce:	1850      	adds	r0, r2, r1
 800b8d0:	42a0      	cmp	r0, r4
 800b8d2:	d10b      	bne.n	800b8ec <_free_r+0x6c>
 800b8d4:	6820      	ldr	r0, [r4, #0]
 800b8d6:	4401      	add	r1, r0
 800b8d8:	1850      	adds	r0, r2, r1
 800b8da:	6011      	str	r1, [r2, #0]
 800b8dc:	4283      	cmp	r3, r0
 800b8de:	d1e0      	bne.n	800b8a2 <_free_r+0x22>
 800b8e0:	6818      	ldr	r0, [r3, #0]
 800b8e2:	685b      	ldr	r3, [r3, #4]
 800b8e4:	4408      	add	r0, r1
 800b8e6:	6053      	str	r3, [r2, #4]
 800b8e8:	6010      	str	r0, [r2, #0]
 800b8ea:	e7da      	b.n	800b8a2 <_free_r+0x22>
 800b8ec:	d902      	bls.n	800b8f4 <_free_r+0x74>
 800b8ee:	230c      	movs	r3, #12
 800b8f0:	602b      	str	r3, [r5, #0]
 800b8f2:	e7d6      	b.n	800b8a2 <_free_r+0x22>
 800b8f4:	6820      	ldr	r0, [r4, #0]
 800b8f6:	1821      	adds	r1, r4, r0
 800b8f8:	428b      	cmp	r3, r1
 800b8fa:	bf02      	ittt	eq
 800b8fc:	6819      	ldreq	r1, [r3, #0]
 800b8fe:	685b      	ldreq	r3, [r3, #4]
 800b900:	1809      	addeq	r1, r1, r0
 800b902:	6063      	str	r3, [r4, #4]
 800b904:	bf08      	it	eq
 800b906:	6021      	streq	r1, [r4, #0]
 800b908:	6054      	str	r4, [r2, #4]
 800b90a:	e7ca      	b.n	800b8a2 <_free_r+0x22>
 800b90c:	bd38      	pop	{r3, r4, r5, pc}
 800b90e:	bf00      	nop
 800b910:	20000de8 	.word	0x20000de8

0800b914 <sbrk_aligned>:
 800b914:	b570      	push	{r4, r5, r6, lr}
 800b916:	4e0f      	ldr	r6, [pc, #60]	@ (800b954 <sbrk_aligned+0x40>)
 800b918:	460c      	mov	r4, r1
 800b91a:	4605      	mov	r5, r0
 800b91c:	6831      	ldr	r1, [r6, #0]
 800b91e:	b911      	cbnz	r1, 800b926 <sbrk_aligned+0x12>
 800b920:	f000 fe60 	bl	800c5e4 <_sbrk_r>
 800b924:	6030      	str	r0, [r6, #0]
 800b926:	4621      	mov	r1, r4
 800b928:	4628      	mov	r0, r5
 800b92a:	f000 fe5b 	bl	800c5e4 <_sbrk_r>
 800b92e:	1c43      	adds	r3, r0, #1
 800b930:	d103      	bne.n	800b93a <sbrk_aligned+0x26>
 800b932:	f04f 34ff 	mov.w	r4, #4294967295
 800b936:	4620      	mov	r0, r4
 800b938:	bd70      	pop	{r4, r5, r6, pc}
 800b93a:	1cc4      	adds	r4, r0, #3
 800b93c:	f024 0403 	bic.w	r4, r4, #3
 800b940:	42a0      	cmp	r0, r4
 800b942:	d0f8      	beq.n	800b936 <sbrk_aligned+0x22>
 800b944:	1a21      	subs	r1, r4, r0
 800b946:	4628      	mov	r0, r5
 800b948:	f000 fe4c 	bl	800c5e4 <_sbrk_r>
 800b94c:	3001      	adds	r0, #1
 800b94e:	d1f2      	bne.n	800b936 <sbrk_aligned+0x22>
 800b950:	e7ef      	b.n	800b932 <sbrk_aligned+0x1e>
 800b952:	bf00      	nop
 800b954:	20000de4 	.word	0x20000de4

0800b958 <_malloc_r>:
 800b958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b95c:	1ccd      	adds	r5, r1, #3
 800b95e:	4606      	mov	r6, r0
 800b960:	f025 0503 	bic.w	r5, r5, #3
 800b964:	3508      	adds	r5, #8
 800b966:	2d0c      	cmp	r5, #12
 800b968:	bf38      	it	cc
 800b96a:	250c      	movcc	r5, #12
 800b96c:	2d00      	cmp	r5, #0
 800b96e:	db01      	blt.n	800b974 <_malloc_r+0x1c>
 800b970:	42a9      	cmp	r1, r5
 800b972:	d904      	bls.n	800b97e <_malloc_r+0x26>
 800b974:	230c      	movs	r3, #12
 800b976:	6033      	str	r3, [r6, #0]
 800b978:	2000      	movs	r0, #0
 800b97a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b97e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ba54 <_malloc_r+0xfc>
 800b982:	f000 f869 	bl	800ba58 <__malloc_lock>
 800b986:	f8d8 3000 	ldr.w	r3, [r8]
 800b98a:	461c      	mov	r4, r3
 800b98c:	bb44      	cbnz	r4, 800b9e0 <_malloc_r+0x88>
 800b98e:	4629      	mov	r1, r5
 800b990:	4630      	mov	r0, r6
 800b992:	f7ff ffbf 	bl	800b914 <sbrk_aligned>
 800b996:	1c43      	adds	r3, r0, #1
 800b998:	4604      	mov	r4, r0
 800b99a:	d158      	bne.n	800ba4e <_malloc_r+0xf6>
 800b99c:	f8d8 4000 	ldr.w	r4, [r8]
 800b9a0:	4627      	mov	r7, r4
 800b9a2:	2f00      	cmp	r7, #0
 800b9a4:	d143      	bne.n	800ba2e <_malloc_r+0xd6>
 800b9a6:	2c00      	cmp	r4, #0
 800b9a8:	d04b      	beq.n	800ba42 <_malloc_r+0xea>
 800b9aa:	6823      	ldr	r3, [r4, #0]
 800b9ac:	4639      	mov	r1, r7
 800b9ae:	4630      	mov	r0, r6
 800b9b0:	eb04 0903 	add.w	r9, r4, r3
 800b9b4:	f000 fe16 	bl	800c5e4 <_sbrk_r>
 800b9b8:	4581      	cmp	r9, r0
 800b9ba:	d142      	bne.n	800ba42 <_malloc_r+0xea>
 800b9bc:	6821      	ldr	r1, [r4, #0]
 800b9be:	4630      	mov	r0, r6
 800b9c0:	1a6d      	subs	r5, r5, r1
 800b9c2:	4629      	mov	r1, r5
 800b9c4:	f7ff ffa6 	bl	800b914 <sbrk_aligned>
 800b9c8:	3001      	adds	r0, #1
 800b9ca:	d03a      	beq.n	800ba42 <_malloc_r+0xea>
 800b9cc:	6823      	ldr	r3, [r4, #0]
 800b9ce:	442b      	add	r3, r5
 800b9d0:	6023      	str	r3, [r4, #0]
 800b9d2:	f8d8 3000 	ldr.w	r3, [r8]
 800b9d6:	685a      	ldr	r2, [r3, #4]
 800b9d8:	bb62      	cbnz	r2, 800ba34 <_malloc_r+0xdc>
 800b9da:	f8c8 7000 	str.w	r7, [r8]
 800b9de:	e00f      	b.n	800ba00 <_malloc_r+0xa8>
 800b9e0:	6822      	ldr	r2, [r4, #0]
 800b9e2:	1b52      	subs	r2, r2, r5
 800b9e4:	d420      	bmi.n	800ba28 <_malloc_r+0xd0>
 800b9e6:	2a0b      	cmp	r2, #11
 800b9e8:	d917      	bls.n	800ba1a <_malloc_r+0xc2>
 800b9ea:	1961      	adds	r1, r4, r5
 800b9ec:	42a3      	cmp	r3, r4
 800b9ee:	6025      	str	r5, [r4, #0]
 800b9f0:	bf18      	it	ne
 800b9f2:	6059      	strne	r1, [r3, #4]
 800b9f4:	6863      	ldr	r3, [r4, #4]
 800b9f6:	bf08      	it	eq
 800b9f8:	f8c8 1000 	streq.w	r1, [r8]
 800b9fc:	5162      	str	r2, [r4, r5]
 800b9fe:	604b      	str	r3, [r1, #4]
 800ba00:	4630      	mov	r0, r6
 800ba02:	f000 f82f 	bl	800ba64 <__malloc_unlock>
 800ba06:	f104 000b 	add.w	r0, r4, #11
 800ba0a:	1d23      	adds	r3, r4, #4
 800ba0c:	f020 0007 	bic.w	r0, r0, #7
 800ba10:	1ac2      	subs	r2, r0, r3
 800ba12:	bf1c      	itt	ne
 800ba14:	1a1b      	subne	r3, r3, r0
 800ba16:	50a3      	strne	r3, [r4, r2]
 800ba18:	e7af      	b.n	800b97a <_malloc_r+0x22>
 800ba1a:	6862      	ldr	r2, [r4, #4]
 800ba1c:	42a3      	cmp	r3, r4
 800ba1e:	bf0c      	ite	eq
 800ba20:	f8c8 2000 	streq.w	r2, [r8]
 800ba24:	605a      	strne	r2, [r3, #4]
 800ba26:	e7eb      	b.n	800ba00 <_malloc_r+0xa8>
 800ba28:	4623      	mov	r3, r4
 800ba2a:	6864      	ldr	r4, [r4, #4]
 800ba2c:	e7ae      	b.n	800b98c <_malloc_r+0x34>
 800ba2e:	463c      	mov	r4, r7
 800ba30:	687f      	ldr	r7, [r7, #4]
 800ba32:	e7b6      	b.n	800b9a2 <_malloc_r+0x4a>
 800ba34:	461a      	mov	r2, r3
 800ba36:	685b      	ldr	r3, [r3, #4]
 800ba38:	42a3      	cmp	r3, r4
 800ba3a:	d1fb      	bne.n	800ba34 <_malloc_r+0xdc>
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	6053      	str	r3, [r2, #4]
 800ba40:	e7de      	b.n	800ba00 <_malloc_r+0xa8>
 800ba42:	230c      	movs	r3, #12
 800ba44:	4630      	mov	r0, r6
 800ba46:	6033      	str	r3, [r6, #0]
 800ba48:	f000 f80c 	bl	800ba64 <__malloc_unlock>
 800ba4c:	e794      	b.n	800b978 <_malloc_r+0x20>
 800ba4e:	6005      	str	r5, [r0, #0]
 800ba50:	e7d6      	b.n	800ba00 <_malloc_r+0xa8>
 800ba52:	bf00      	nop
 800ba54:	20000de8 	.word	0x20000de8

0800ba58 <__malloc_lock>:
 800ba58:	4801      	ldr	r0, [pc, #4]	@ (800ba60 <__malloc_lock+0x8>)
 800ba5a:	f7ff bf0e 	b.w	800b87a <__retarget_lock_acquire_recursive>
 800ba5e:	bf00      	nop
 800ba60:	20000de0 	.word	0x20000de0

0800ba64 <__malloc_unlock>:
 800ba64:	4801      	ldr	r0, [pc, #4]	@ (800ba6c <__malloc_unlock+0x8>)
 800ba66:	f7ff bf09 	b.w	800b87c <__retarget_lock_release_recursive>
 800ba6a:	bf00      	nop
 800ba6c:	20000de0 	.word	0x20000de0

0800ba70 <__ssputs_r>:
 800ba70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba74:	461f      	mov	r7, r3
 800ba76:	688e      	ldr	r6, [r1, #8]
 800ba78:	4682      	mov	sl, r0
 800ba7a:	460c      	mov	r4, r1
 800ba7c:	42be      	cmp	r6, r7
 800ba7e:	4690      	mov	r8, r2
 800ba80:	680b      	ldr	r3, [r1, #0]
 800ba82:	d82d      	bhi.n	800bae0 <__ssputs_r+0x70>
 800ba84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ba88:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ba8c:	d026      	beq.n	800badc <__ssputs_r+0x6c>
 800ba8e:	6965      	ldr	r5, [r4, #20]
 800ba90:	6909      	ldr	r1, [r1, #16]
 800ba92:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ba96:	eba3 0901 	sub.w	r9, r3, r1
 800ba9a:	1c7b      	adds	r3, r7, #1
 800ba9c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800baa0:	444b      	add	r3, r9
 800baa2:	106d      	asrs	r5, r5, #1
 800baa4:	429d      	cmp	r5, r3
 800baa6:	bf38      	it	cc
 800baa8:	461d      	movcc	r5, r3
 800baaa:	0553      	lsls	r3, r2, #21
 800baac:	d527      	bpl.n	800bafe <__ssputs_r+0x8e>
 800baae:	4629      	mov	r1, r5
 800bab0:	f7ff ff52 	bl	800b958 <_malloc_r>
 800bab4:	4606      	mov	r6, r0
 800bab6:	b360      	cbz	r0, 800bb12 <__ssputs_r+0xa2>
 800bab8:	464a      	mov	r2, r9
 800baba:	6921      	ldr	r1, [r4, #16]
 800babc:	f000 fdb0 	bl	800c620 <memcpy>
 800bac0:	89a3      	ldrh	r3, [r4, #12]
 800bac2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bac6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800baca:	81a3      	strh	r3, [r4, #12]
 800bacc:	6126      	str	r6, [r4, #16]
 800bace:	444e      	add	r6, r9
 800bad0:	6165      	str	r5, [r4, #20]
 800bad2:	eba5 0509 	sub.w	r5, r5, r9
 800bad6:	6026      	str	r6, [r4, #0]
 800bad8:	463e      	mov	r6, r7
 800bada:	60a5      	str	r5, [r4, #8]
 800badc:	42be      	cmp	r6, r7
 800bade:	d900      	bls.n	800bae2 <__ssputs_r+0x72>
 800bae0:	463e      	mov	r6, r7
 800bae2:	4632      	mov	r2, r6
 800bae4:	4641      	mov	r1, r8
 800bae6:	6820      	ldr	r0, [r4, #0]
 800bae8:	f000 fd62 	bl	800c5b0 <memmove>
 800baec:	68a3      	ldr	r3, [r4, #8]
 800baee:	2000      	movs	r0, #0
 800baf0:	1b9b      	subs	r3, r3, r6
 800baf2:	60a3      	str	r3, [r4, #8]
 800baf4:	6823      	ldr	r3, [r4, #0]
 800baf6:	4433      	add	r3, r6
 800baf8:	6023      	str	r3, [r4, #0]
 800bafa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bafe:	462a      	mov	r2, r5
 800bb00:	f000 fd9b 	bl	800c63a <_realloc_r>
 800bb04:	4606      	mov	r6, r0
 800bb06:	2800      	cmp	r0, #0
 800bb08:	d1e0      	bne.n	800bacc <__ssputs_r+0x5c>
 800bb0a:	6921      	ldr	r1, [r4, #16]
 800bb0c:	4650      	mov	r0, sl
 800bb0e:	f7ff feb7 	bl	800b880 <_free_r>
 800bb12:	230c      	movs	r3, #12
 800bb14:	f04f 30ff 	mov.w	r0, #4294967295
 800bb18:	f8ca 3000 	str.w	r3, [sl]
 800bb1c:	89a3      	ldrh	r3, [r4, #12]
 800bb1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bb22:	81a3      	strh	r3, [r4, #12]
 800bb24:	e7e9      	b.n	800bafa <__ssputs_r+0x8a>
	...

0800bb28 <_svfiprintf_r>:
 800bb28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb2c:	4698      	mov	r8, r3
 800bb2e:	898b      	ldrh	r3, [r1, #12]
 800bb30:	b09d      	sub	sp, #116	@ 0x74
 800bb32:	4607      	mov	r7, r0
 800bb34:	061b      	lsls	r3, r3, #24
 800bb36:	460d      	mov	r5, r1
 800bb38:	4614      	mov	r4, r2
 800bb3a:	d510      	bpl.n	800bb5e <_svfiprintf_r+0x36>
 800bb3c:	690b      	ldr	r3, [r1, #16]
 800bb3e:	b973      	cbnz	r3, 800bb5e <_svfiprintf_r+0x36>
 800bb40:	2140      	movs	r1, #64	@ 0x40
 800bb42:	f7ff ff09 	bl	800b958 <_malloc_r>
 800bb46:	6028      	str	r0, [r5, #0]
 800bb48:	6128      	str	r0, [r5, #16]
 800bb4a:	b930      	cbnz	r0, 800bb5a <_svfiprintf_r+0x32>
 800bb4c:	230c      	movs	r3, #12
 800bb4e:	603b      	str	r3, [r7, #0]
 800bb50:	f04f 30ff 	mov.w	r0, #4294967295
 800bb54:	b01d      	add	sp, #116	@ 0x74
 800bb56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb5a:	2340      	movs	r3, #64	@ 0x40
 800bb5c:	616b      	str	r3, [r5, #20]
 800bb5e:	2300      	movs	r3, #0
 800bb60:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb64:	f04f 0901 	mov.w	r9, #1
 800bb68:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800bd0c <_svfiprintf_r+0x1e4>
 800bb6c:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb6e:	2320      	movs	r3, #32
 800bb70:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bb74:	2330      	movs	r3, #48	@ 0x30
 800bb76:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bb7a:	4623      	mov	r3, r4
 800bb7c:	469a      	mov	sl, r3
 800bb7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb82:	b10a      	cbz	r2, 800bb88 <_svfiprintf_r+0x60>
 800bb84:	2a25      	cmp	r2, #37	@ 0x25
 800bb86:	d1f9      	bne.n	800bb7c <_svfiprintf_r+0x54>
 800bb88:	ebba 0b04 	subs.w	fp, sl, r4
 800bb8c:	d00b      	beq.n	800bba6 <_svfiprintf_r+0x7e>
 800bb8e:	465b      	mov	r3, fp
 800bb90:	4622      	mov	r2, r4
 800bb92:	4629      	mov	r1, r5
 800bb94:	4638      	mov	r0, r7
 800bb96:	f7ff ff6b 	bl	800ba70 <__ssputs_r>
 800bb9a:	3001      	adds	r0, #1
 800bb9c:	f000 80a7 	beq.w	800bcee <_svfiprintf_r+0x1c6>
 800bba0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bba2:	445a      	add	r2, fp
 800bba4:	9209      	str	r2, [sp, #36]	@ 0x24
 800bba6:	f89a 3000 	ldrb.w	r3, [sl]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	f000 809f 	beq.w	800bcee <_svfiprintf_r+0x1c6>
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	f04f 32ff 	mov.w	r2, #4294967295
 800bbb6:	f10a 0a01 	add.w	sl, sl, #1
 800bbba:	9304      	str	r3, [sp, #16]
 800bbbc:	9307      	str	r3, [sp, #28]
 800bbbe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bbc2:	931a      	str	r3, [sp, #104]	@ 0x68
 800bbc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bbc8:	4654      	mov	r4, sl
 800bbca:	2205      	movs	r2, #5
 800bbcc:	484f      	ldr	r0, [pc, #316]	@ (800bd0c <_svfiprintf_r+0x1e4>)
 800bbce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbd2:	f000 fd17 	bl	800c604 <memchr>
 800bbd6:	9a04      	ldr	r2, [sp, #16]
 800bbd8:	b9d8      	cbnz	r0, 800bc12 <_svfiprintf_r+0xea>
 800bbda:	06d0      	lsls	r0, r2, #27
 800bbdc:	bf44      	itt	mi
 800bbde:	2320      	movmi	r3, #32
 800bbe0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bbe4:	0711      	lsls	r1, r2, #28
 800bbe6:	bf44      	itt	mi
 800bbe8:	232b      	movmi	r3, #43	@ 0x2b
 800bbea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bbee:	f89a 3000 	ldrb.w	r3, [sl]
 800bbf2:	2b2a      	cmp	r3, #42	@ 0x2a
 800bbf4:	d015      	beq.n	800bc22 <_svfiprintf_r+0xfa>
 800bbf6:	9a07      	ldr	r2, [sp, #28]
 800bbf8:	4654      	mov	r4, sl
 800bbfa:	2000      	movs	r0, #0
 800bbfc:	f04f 0c0a 	mov.w	ip, #10
 800bc00:	4621      	mov	r1, r4
 800bc02:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc06:	3b30      	subs	r3, #48	@ 0x30
 800bc08:	2b09      	cmp	r3, #9
 800bc0a:	d94b      	bls.n	800bca4 <_svfiprintf_r+0x17c>
 800bc0c:	b1b0      	cbz	r0, 800bc3c <_svfiprintf_r+0x114>
 800bc0e:	9207      	str	r2, [sp, #28]
 800bc10:	e014      	b.n	800bc3c <_svfiprintf_r+0x114>
 800bc12:	eba0 0308 	sub.w	r3, r0, r8
 800bc16:	46a2      	mov	sl, r4
 800bc18:	fa09 f303 	lsl.w	r3, r9, r3
 800bc1c:	4313      	orrs	r3, r2
 800bc1e:	9304      	str	r3, [sp, #16]
 800bc20:	e7d2      	b.n	800bbc8 <_svfiprintf_r+0xa0>
 800bc22:	9b03      	ldr	r3, [sp, #12]
 800bc24:	1d19      	adds	r1, r3, #4
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	9103      	str	r1, [sp, #12]
 800bc2c:	bfbb      	ittet	lt
 800bc2e:	425b      	neglt	r3, r3
 800bc30:	f042 0202 	orrlt.w	r2, r2, #2
 800bc34:	9307      	strge	r3, [sp, #28]
 800bc36:	9307      	strlt	r3, [sp, #28]
 800bc38:	bfb8      	it	lt
 800bc3a:	9204      	strlt	r2, [sp, #16]
 800bc3c:	7823      	ldrb	r3, [r4, #0]
 800bc3e:	2b2e      	cmp	r3, #46	@ 0x2e
 800bc40:	d10a      	bne.n	800bc58 <_svfiprintf_r+0x130>
 800bc42:	7863      	ldrb	r3, [r4, #1]
 800bc44:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc46:	d132      	bne.n	800bcae <_svfiprintf_r+0x186>
 800bc48:	9b03      	ldr	r3, [sp, #12]
 800bc4a:	3402      	adds	r4, #2
 800bc4c:	1d1a      	adds	r2, r3, #4
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bc54:	9203      	str	r2, [sp, #12]
 800bc56:	9305      	str	r3, [sp, #20]
 800bc58:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bd1c <_svfiprintf_r+0x1f4>
 800bc5c:	2203      	movs	r2, #3
 800bc5e:	7821      	ldrb	r1, [r4, #0]
 800bc60:	4650      	mov	r0, sl
 800bc62:	f000 fccf 	bl	800c604 <memchr>
 800bc66:	b138      	cbz	r0, 800bc78 <_svfiprintf_r+0x150>
 800bc68:	eba0 000a 	sub.w	r0, r0, sl
 800bc6c:	2240      	movs	r2, #64	@ 0x40
 800bc6e:	9b04      	ldr	r3, [sp, #16]
 800bc70:	3401      	adds	r4, #1
 800bc72:	4082      	lsls	r2, r0
 800bc74:	4313      	orrs	r3, r2
 800bc76:	9304      	str	r3, [sp, #16]
 800bc78:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc7c:	2206      	movs	r2, #6
 800bc7e:	4824      	ldr	r0, [pc, #144]	@ (800bd10 <_svfiprintf_r+0x1e8>)
 800bc80:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bc84:	f000 fcbe 	bl	800c604 <memchr>
 800bc88:	2800      	cmp	r0, #0
 800bc8a:	d036      	beq.n	800bcfa <_svfiprintf_r+0x1d2>
 800bc8c:	4b21      	ldr	r3, [pc, #132]	@ (800bd14 <_svfiprintf_r+0x1ec>)
 800bc8e:	bb1b      	cbnz	r3, 800bcd8 <_svfiprintf_r+0x1b0>
 800bc90:	9b03      	ldr	r3, [sp, #12]
 800bc92:	3307      	adds	r3, #7
 800bc94:	f023 0307 	bic.w	r3, r3, #7
 800bc98:	3308      	adds	r3, #8
 800bc9a:	9303      	str	r3, [sp, #12]
 800bc9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc9e:	4433      	add	r3, r6
 800bca0:	9309      	str	r3, [sp, #36]	@ 0x24
 800bca2:	e76a      	b.n	800bb7a <_svfiprintf_r+0x52>
 800bca4:	fb0c 3202 	mla	r2, ip, r2, r3
 800bca8:	460c      	mov	r4, r1
 800bcaa:	2001      	movs	r0, #1
 800bcac:	e7a8      	b.n	800bc00 <_svfiprintf_r+0xd8>
 800bcae:	2300      	movs	r3, #0
 800bcb0:	3401      	adds	r4, #1
 800bcb2:	f04f 0c0a 	mov.w	ip, #10
 800bcb6:	4619      	mov	r1, r3
 800bcb8:	9305      	str	r3, [sp, #20]
 800bcba:	4620      	mov	r0, r4
 800bcbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bcc0:	3a30      	subs	r2, #48	@ 0x30
 800bcc2:	2a09      	cmp	r2, #9
 800bcc4:	d903      	bls.n	800bcce <_svfiprintf_r+0x1a6>
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d0c6      	beq.n	800bc58 <_svfiprintf_r+0x130>
 800bcca:	9105      	str	r1, [sp, #20]
 800bccc:	e7c4      	b.n	800bc58 <_svfiprintf_r+0x130>
 800bcce:	fb0c 2101 	mla	r1, ip, r1, r2
 800bcd2:	4604      	mov	r4, r0
 800bcd4:	2301      	movs	r3, #1
 800bcd6:	e7f0      	b.n	800bcba <_svfiprintf_r+0x192>
 800bcd8:	ab03      	add	r3, sp, #12
 800bcda:	462a      	mov	r2, r5
 800bcdc:	a904      	add	r1, sp, #16
 800bcde:	4638      	mov	r0, r7
 800bce0:	9300      	str	r3, [sp, #0]
 800bce2:	4b0d      	ldr	r3, [pc, #52]	@ (800bd18 <_svfiprintf_r+0x1f0>)
 800bce4:	f3af 8000 	nop.w
 800bce8:	1c42      	adds	r2, r0, #1
 800bcea:	4606      	mov	r6, r0
 800bcec:	d1d6      	bne.n	800bc9c <_svfiprintf_r+0x174>
 800bcee:	89ab      	ldrh	r3, [r5, #12]
 800bcf0:	065b      	lsls	r3, r3, #25
 800bcf2:	f53f af2d 	bmi.w	800bb50 <_svfiprintf_r+0x28>
 800bcf6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bcf8:	e72c      	b.n	800bb54 <_svfiprintf_r+0x2c>
 800bcfa:	ab03      	add	r3, sp, #12
 800bcfc:	462a      	mov	r2, r5
 800bcfe:	a904      	add	r1, sp, #16
 800bd00:	4638      	mov	r0, r7
 800bd02:	9300      	str	r3, [sp, #0]
 800bd04:	4b04      	ldr	r3, [pc, #16]	@ (800bd18 <_svfiprintf_r+0x1f0>)
 800bd06:	f000 f9bf 	bl	800c088 <_printf_i>
 800bd0a:	e7ed      	b.n	800bce8 <_svfiprintf_r+0x1c0>
 800bd0c:	0800c908 	.word	0x0800c908
 800bd10:	0800c912 	.word	0x0800c912
 800bd14:	00000000 	.word	0x00000000
 800bd18:	0800ba71 	.word	0x0800ba71
 800bd1c:	0800c90e 	.word	0x0800c90e

0800bd20 <__sfputc_r>:
 800bd20:	6893      	ldr	r3, [r2, #8]
 800bd22:	3b01      	subs	r3, #1
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	6093      	str	r3, [r2, #8]
 800bd28:	b410      	push	{r4}
 800bd2a:	da08      	bge.n	800bd3e <__sfputc_r+0x1e>
 800bd2c:	6994      	ldr	r4, [r2, #24]
 800bd2e:	42a3      	cmp	r3, r4
 800bd30:	db01      	blt.n	800bd36 <__sfputc_r+0x16>
 800bd32:	290a      	cmp	r1, #10
 800bd34:	d103      	bne.n	800bd3e <__sfputc_r+0x1e>
 800bd36:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd3a:	f000 bba5 	b.w	800c488 <__swbuf_r>
 800bd3e:	6813      	ldr	r3, [r2, #0]
 800bd40:	1c58      	adds	r0, r3, #1
 800bd42:	6010      	str	r0, [r2, #0]
 800bd44:	4608      	mov	r0, r1
 800bd46:	7019      	strb	r1, [r3, #0]
 800bd48:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd4c:	4770      	bx	lr

0800bd4e <__sfputs_r>:
 800bd4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd50:	4606      	mov	r6, r0
 800bd52:	460f      	mov	r7, r1
 800bd54:	4614      	mov	r4, r2
 800bd56:	18d5      	adds	r5, r2, r3
 800bd58:	42ac      	cmp	r4, r5
 800bd5a:	d101      	bne.n	800bd60 <__sfputs_r+0x12>
 800bd5c:	2000      	movs	r0, #0
 800bd5e:	e007      	b.n	800bd70 <__sfputs_r+0x22>
 800bd60:	463a      	mov	r2, r7
 800bd62:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd66:	4630      	mov	r0, r6
 800bd68:	f7ff ffda 	bl	800bd20 <__sfputc_r>
 800bd6c:	1c43      	adds	r3, r0, #1
 800bd6e:	d1f3      	bne.n	800bd58 <__sfputs_r+0xa>
 800bd70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bd74 <_vfiprintf_r>:
 800bd74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd78:	460d      	mov	r5, r1
 800bd7a:	b09d      	sub	sp, #116	@ 0x74
 800bd7c:	4614      	mov	r4, r2
 800bd7e:	4698      	mov	r8, r3
 800bd80:	4606      	mov	r6, r0
 800bd82:	b118      	cbz	r0, 800bd8c <_vfiprintf_r+0x18>
 800bd84:	6a03      	ldr	r3, [r0, #32]
 800bd86:	b90b      	cbnz	r3, 800bd8c <_vfiprintf_r+0x18>
 800bd88:	f7ff fc4a 	bl	800b620 <__sinit>
 800bd8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bd8e:	07d9      	lsls	r1, r3, #31
 800bd90:	d405      	bmi.n	800bd9e <_vfiprintf_r+0x2a>
 800bd92:	89ab      	ldrh	r3, [r5, #12]
 800bd94:	059a      	lsls	r2, r3, #22
 800bd96:	d402      	bmi.n	800bd9e <_vfiprintf_r+0x2a>
 800bd98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bd9a:	f7ff fd6e 	bl	800b87a <__retarget_lock_acquire_recursive>
 800bd9e:	89ab      	ldrh	r3, [r5, #12]
 800bda0:	071b      	lsls	r3, r3, #28
 800bda2:	d501      	bpl.n	800bda8 <_vfiprintf_r+0x34>
 800bda4:	692b      	ldr	r3, [r5, #16]
 800bda6:	b99b      	cbnz	r3, 800bdd0 <_vfiprintf_r+0x5c>
 800bda8:	4629      	mov	r1, r5
 800bdaa:	4630      	mov	r0, r6
 800bdac:	f000 fbaa 	bl	800c504 <__swsetup_r>
 800bdb0:	b170      	cbz	r0, 800bdd0 <_vfiprintf_r+0x5c>
 800bdb2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bdb4:	07dc      	lsls	r4, r3, #31
 800bdb6:	d504      	bpl.n	800bdc2 <_vfiprintf_r+0x4e>
 800bdb8:	f04f 30ff 	mov.w	r0, #4294967295
 800bdbc:	b01d      	add	sp, #116	@ 0x74
 800bdbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdc2:	89ab      	ldrh	r3, [r5, #12]
 800bdc4:	0598      	lsls	r0, r3, #22
 800bdc6:	d4f7      	bmi.n	800bdb8 <_vfiprintf_r+0x44>
 800bdc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bdca:	f7ff fd57 	bl	800b87c <__retarget_lock_release_recursive>
 800bdce:	e7f3      	b.n	800bdb8 <_vfiprintf_r+0x44>
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	f8cd 800c 	str.w	r8, [sp, #12]
 800bdd6:	f04f 0901 	mov.w	r9, #1
 800bdda:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800bf90 <_vfiprintf_r+0x21c>
 800bdde:	9309      	str	r3, [sp, #36]	@ 0x24
 800bde0:	2320      	movs	r3, #32
 800bde2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bde6:	2330      	movs	r3, #48	@ 0x30
 800bde8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bdec:	4623      	mov	r3, r4
 800bdee:	469a      	mov	sl, r3
 800bdf0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bdf4:	b10a      	cbz	r2, 800bdfa <_vfiprintf_r+0x86>
 800bdf6:	2a25      	cmp	r2, #37	@ 0x25
 800bdf8:	d1f9      	bne.n	800bdee <_vfiprintf_r+0x7a>
 800bdfa:	ebba 0b04 	subs.w	fp, sl, r4
 800bdfe:	d00b      	beq.n	800be18 <_vfiprintf_r+0xa4>
 800be00:	465b      	mov	r3, fp
 800be02:	4622      	mov	r2, r4
 800be04:	4629      	mov	r1, r5
 800be06:	4630      	mov	r0, r6
 800be08:	f7ff ffa1 	bl	800bd4e <__sfputs_r>
 800be0c:	3001      	adds	r0, #1
 800be0e:	f000 80a7 	beq.w	800bf60 <_vfiprintf_r+0x1ec>
 800be12:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800be14:	445a      	add	r2, fp
 800be16:	9209      	str	r2, [sp, #36]	@ 0x24
 800be18:	f89a 3000 	ldrb.w	r3, [sl]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	f000 809f 	beq.w	800bf60 <_vfiprintf_r+0x1ec>
 800be22:	2300      	movs	r3, #0
 800be24:	f04f 32ff 	mov.w	r2, #4294967295
 800be28:	f10a 0a01 	add.w	sl, sl, #1
 800be2c:	9304      	str	r3, [sp, #16]
 800be2e:	9307      	str	r3, [sp, #28]
 800be30:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800be34:	931a      	str	r3, [sp, #104]	@ 0x68
 800be36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be3a:	4654      	mov	r4, sl
 800be3c:	2205      	movs	r2, #5
 800be3e:	4854      	ldr	r0, [pc, #336]	@ (800bf90 <_vfiprintf_r+0x21c>)
 800be40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be44:	f000 fbde 	bl	800c604 <memchr>
 800be48:	9a04      	ldr	r2, [sp, #16]
 800be4a:	b9d8      	cbnz	r0, 800be84 <_vfiprintf_r+0x110>
 800be4c:	06d1      	lsls	r1, r2, #27
 800be4e:	bf44      	itt	mi
 800be50:	2320      	movmi	r3, #32
 800be52:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800be56:	0713      	lsls	r3, r2, #28
 800be58:	bf44      	itt	mi
 800be5a:	232b      	movmi	r3, #43	@ 0x2b
 800be5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800be60:	f89a 3000 	ldrb.w	r3, [sl]
 800be64:	2b2a      	cmp	r3, #42	@ 0x2a
 800be66:	d015      	beq.n	800be94 <_vfiprintf_r+0x120>
 800be68:	9a07      	ldr	r2, [sp, #28]
 800be6a:	4654      	mov	r4, sl
 800be6c:	2000      	movs	r0, #0
 800be6e:	f04f 0c0a 	mov.w	ip, #10
 800be72:	4621      	mov	r1, r4
 800be74:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be78:	3b30      	subs	r3, #48	@ 0x30
 800be7a:	2b09      	cmp	r3, #9
 800be7c:	d94b      	bls.n	800bf16 <_vfiprintf_r+0x1a2>
 800be7e:	b1b0      	cbz	r0, 800beae <_vfiprintf_r+0x13a>
 800be80:	9207      	str	r2, [sp, #28]
 800be82:	e014      	b.n	800beae <_vfiprintf_r+0x13a>
 800be84:	eba0 0308 	sub.w	r3, r0, r8
 800be88:	46a2      	mov	sl, r4
 800be8a:	fa09 f303 	lsl.w	r3, r9, r3
 800be8e:	4313      	orrs	r3, r2
 800be90:	9304      	str	r3, [sp, #16]
 800be92:	e7d2      	b.n	800be3a <_vfiprintf_r+0xc6>
 800be94:	9b03      	ldr	r3, [sp, #12]
 800be96:	1d19      	adds	r1, r3, #4
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	9103      	str	r1, [sp, #12]
 800be9e:	bfbb      	ittet	lt
 800bea0:	425b      	neglt	r3, r3
 800bea2:	f042 0202 	orrlt.w	r2, r2, #2
 800bea6:	9307      	strge	r3, [sp, #28]
 800bea8:	9307      	strlt	r3, [sp, #28]
 800beaa:	bfb8      	it	lt
 800beac:	9204      	strlt	r2, [sp, #16]
 800beae:	7823      	ldrb	r3, [r4, #0]
 800beb0:	2b2e      	cmp	r3, #46	@ 0x2e
 800beb2:	d10a      	bne.n	800beca <_vfiprintf_r+0x156>
 800beb4:	7863      	ldrb	r3, [r4, #1]
 800beb6:	2b2a      	cmp	r3, #42	@ 0x2a
 800beb8:	d132      	bne.n	800bf20 <_vfiprintf_r+0x1ac>
 800beba:	9b03      	ldr	r3, [sp, #12]
 800bebc:	3402      	adds	r4, #2
 800bebe:	1d1a      	adds	r2, r3, #4
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bec6:	9203      	str	r2, [sp, #12]
 800bec8:	9305      	str	r3, [sp, #20]
 800beca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bfa0 <_vfiprintf_r+0x22c>
 800bece:	2203      	movs	r2, #3
 800bed0:	7821      	ldrb	r1, [r4, #0]
 800bed2:	4650      	mov	r0, sl
 800bed4:	f000 fb96 	bl	800c604 <memchr>
 800bed8:	b138      	cbz	r0, 800beea <_vfiprintf_r+0x176>
 800beda:	eba0 000a 	sub.w	r0, r0, sl
 800bede:	2240      	movs	r2, #64	@ 0x40
 800bee0:	9b04      	ldr	r3, [sp, #16]
 800bee2:	3401      	adds	r4, #1
 800bee4:	4082      	lsls	r2, r0
 800bee6:	4313      	orrs	r3, r2
 800bee8:	9304      	str	r3, [sp, #16]
 800beea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800beee:	2206      	movs	r2, #6
 800bef0:	4828      	ldr	r0, [pc, #160]	@ (800bf94 <_vfiprintf_r+0x220>)
 800bef2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bef6:	f000 fb85 	bl	800c604 <memchr>
 800befa:	2800      	cmp	r0, #0
 800befc:	d03f      	beq.n	800bf7e <_vfiprintf_r+0x20a>
 800befe:	4b26      	ldr	r3, [pc, #152]	@ (800bf98 <_vfiprintf_r+0x224>)
 800bf00:	bb1b      	cbnz	r3, 800bf4a <_vfiprintf_r+0x1d6>
 800bf02:	9b03      	ldr	r3, [sp, #12]
 800bf04:	3307      	adds	r3, #7
 800bf06:	f023 0307 	bic.w	r3, r3, #7
 800bf0a:	3308      	adds	r3, #8
 800bf0c:	9303      	str	r3, [sp, #12]
 800bf0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf10:	443b      	add	r3, r7
 800bf12:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf14:	e76a      	b.n	800bdec <_vfiprintf_r+0x78>
 800bf16:	fb0c 3202 	mla	r2, ip, r2, r3
 800bf1a:	460c      	mov	r4, r1
 800bf1c:	2001      	movs	r0, #1
 800bf1e:	e7a8      	b.n	800be72 <_vfiprintf_r+0xfe>
 800bf20:	2300      	movs	r3, #0
 800bf22:	3401      	adds	r4, #1
 800bf24:	f04f 0c0a 	mov.w	ip, #10
 800bf28:	4619      	mov	r1, r3
 800bf2a:	9305      	str	r3, [sp, #20]
 800bf2c:	4620      	mov	r0, r4
 800bf2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf32:	3a30      	subs	r2, #48	@ 0x30
 800bf34:	2a09      	cmp	r2, #9
 800bf36:	d903      	bls.n	800bf40 <_vfiprintf_r+0x1cc>
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d0c6      	beq.n	800beca <_vfiprintf_r+0x156>
 800bf3c:	9105      	str	r1, [sp, #20]
 800bf3e:	e7c4      	b.n	800beca <_vfiprintf_r+0x156>
 800bf40:	fb0c 2101 	mla	r1, ip, r1, r2
 800bf44:	4604      	mov	r4, r0
 800bf46:	2301      	movs	r3, #1
 800bf48:	e7f0      	b.n	800bf2c <_vfiprintf_r+0x1b8>
 800bf4a:	ab03      	add	r3, sp, #12
 800bf4c:	462a      	mov	r2, r5
 800bf4e:	a904      	add	r1, sp, #16
 800bf50:	4630      	mov	r0, r6
 800bf52:	9300      	str	r3, [sp, #0]
 800bf54:	4b11      	ldr	r3, [pc, #68]	@ (800bf9c <_vfiprintf_r+0x228>)
 800bf56:	f3af 8000 	nop.w
 800bf5a:	4607      	mov	r7, r0
 800bf5c:	1c78      	adds	r0, r7, #1
 800bf5e:	d1d6      	bne.n	800bf0e <_vfiprintf_r+0x19a>
 800bf60:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bf62:	07d9      	lsls	r1, r3, #31
 800bf64:	d405      	bmi.n	800bf72 <_vfiprintf_r+0x1fe>
 800bf66:	89ab      	ldrh	r3, [r5, #12]
 800bf68:	059a      	lsls	r2, r3, #22
 800bf6a:	d402      	bmi.n	800bf72 <_vfiprintf_r+0x1fe>
 800bf6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bf6e:	f7ff fc85 	bl	800b87c <__retarget_lock_release_recursive>
 800bf72:	89ab      	ldrh	r3, [r5, #12]
 800bf74:	065b      	lsls	r3, r3, #25
 800bf76:	f53f af1f 	bmi.w	800bdb8 <_vfiprintf_r+0x44>
 800bf7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bf7c:	e71e      	b.n	800bdbc <_vfiprintf_r+0x48>
 800bf7e:	ab03      	add	r3, sp, #12
 800bf80:	462a      	mov	r2, r5
 800bf82:	a904      	add	r1, sp, #16
 800bf84:	4630      	mov	r0, r6
 800bf86:	9300      	str	r3, [sp, #0]
 800bf88:	4b04      	ldr	r3, [pc, #16]	@ (800bf9c <_vfiprintf_r+0x228>)
 800bf8a:	f000 f87d 	bl	800c088 <_printf_i>
 800bf8e:	e7e4      	b.n	800bf5a <_vfiprintf_r+0x1e6>
 800bf90:	0800c908 	.word	0x0800c908
 800bf94:	0800c912 	.word	0x0800c912
 800bf98:	00000000 	.word	0x00000000
 800bf9c:	0800bd4f 	.word	0x0800bd4f
 800bfa0:	0800c90e 	.word	0x0800c90e

0800bfa4 <_printf_common>:
 800bfa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfa8:	4616      	mov	r6, r2
 800bfaa:	4698      	mov	r8, r3
 800bfac:	688a      	ldr	r2, [r1, #8]
 800bfae:	4607      	mov	r7, r0
 800bfb0:	690b      	ldr	r3, [r1, #16]
 800bfb2:	460c      	mov	r4, r1
 800bfb4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bfb8:	4293      	cmp	r3, r2
 800bfba:	bfb8      	it	lt
 800bfbc:	4613      	movlt	r3, r2
 800bfbe:	6033      	str	r3, [r6, #0]
 800bfc0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bfc4:	b10a      	cbz	r2, 800bfca <_printf_common+0x26>
 800bfc6:	3301      	adds	r3, #1
 800bfc8:	6033      	str	r3, [r6, #0]
 800bfca:	6823      	ldr	r3, [r4, #0]
 800bfcc:	0699      	lsls	r1, r3, #26
 800bfce:	bf42      	ittt	mi
 800bfd0:	6833      	ldrmi	r3, [r6, #0]
 800bfd2:	3302      	addmi	r3, #2
 800bfd4:	6033      	strmi	r3, [r6, #0]
 800bfd6:	6825      	ldr	r5, [r4, #0]
 800bfd8:	f015 0506 	ands.w	r5, r5, #6
 800bfdc:	d106      	bne.n	800bfec <_printf_common+0x48>
 800bfde:	f104 0a19 	add.w	sl, r4, #25
 800bfe2:	68e3      	ldr	r3, [r4, #12]
 800bfe4:	6832      	ldr	r2, [r6, #0]
 800bfe6:	1a9b      	subs	r3, r3, r2
 800bfe8:	42ab      	cmp	r3, r5
 800bfea:	dc2b      	bgt.n	800c044 <_printf_common+0xa0>
 800bfec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bff0:	6822      	ldr	r2, [r4, #0]
 800bff2:	3b00      	subs	r3, #0
 800bff4:	bf18      	it	ne
 800bff6:	2301      	movne	r3, #1
 800bff8:	0692      	lsls	r2, r2, #26
 800bffa:	d430      	bmi.n	800c05e <_printf_common+0xba>
 800bffc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c000:	4641      	mov	r1, r8
 800c002:	4638      	mov	r0, r7
 800c004:	47c8      	blx	r9
 800c006:	3001      	adds	r0, #1
 800c008:	d023      	beq.n	800c052 <_printf_common+0xae>
 800c00a:	6823      	ldr	r3, [r4, #0]
 800c00c:	341a      	adds	r4, #26
 800c00e:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800c012:	f003 0306 	and.w	r3, r3, #6
 800c016:	2b04      	cmp	r3, #4
 800c018:	bf0a      	itet	eq
 800c01a:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800c01e:	2500      	movne	r5, #0
 800c020:	6833      	ldreq	r3, [r6, #0]
 800c022:	f04f 0600 	mov.w	r6, #0
 800c026:	bf08      	it	eq
 800c028:	1aed      	subeq	r5, r5, r3
 800c02a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800c02e:	bf08      	it	eq
 800c030:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c034:	4293      	cmp	r3, r2
 800c036:	bfc4      	itt	gt
 800c038:	1a9b      	subgt	r3, r3, r2
 800c03a:	18ed      	addgt	r5, r5, r3
 800c03c:	42b5      	cmp	r5, r6
 800c03e:	d11a      	bne.n	800c076 <_printf_common+0xd2>
 800c040:	2000      	movs	r0, #0
 800c042:	e008      	b.n	800c056 <_printf_common+0xb2>
 800c044:	2301      	movs	r3, #1
 800c046:	4652      	mov	r2, sl
 800c048:	4641      	mov	r1, r8
 800c04a:	4638      	mov	r0, r7
 800c04c:	47c8      	blx	r9
 800c04e:	3001      	adds	r0, #1
 800c050:	d103      	bne.n	800c05a <_printf_common+0xb6>
 800c052:	f04f 30ff 	mov.w	r0, #4294967295
 800c056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c05a:	3501      	adds	r5, #1
 800c05c:	e7c1      	b.n	800bfe2 <_printf_common+0x3e>
 800c05e:	18e1      	adds	r1, r4, r3
 800c060:	1c5a      	adds	r2, r3, #1
 800c062:	2030      	movs	r0, #48	@ 0x30
 800c064:	3302      	adds	r3, #2
 800c066:	4422      	add	r2, r4
 800c068:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c06c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c070:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c074:	e7c2      	b.n	800bffc <_printf_common+0x58>
 800c076:	2301      	movs	r3, #1
 800c078:	4622      	mov	r2, r4
 800c07a:	4641      	mov	r1, r8
 800c07c:	4638      	mov	r0, r7
 800c07e:	47c8      	blx	r9
 800c080:	3001      	adds	r0, #1
 800c082:	d0e6      	beq.n	800c052 <_printf_common+0xae>
 800c084:	3601      	adds	r6, #1
 800c086:	e7d9      	b.n	800c03c <_printf_common+0x98>

0800c088 <_printf_i>:
 800c088:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c08c:	7e0f      	ldrb	r7, [r1, #24]
 800c08e:	4691      	mov	r9, r2
 800c090:	4680      	mov	r8, r0
 800c092:	460c      	mov	r4, r1
 800c094:	2f78      	cmp	r7, #120	@ 0x78
 800c096:	469a      	mov	sl, r3
 800c098:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c09a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c09e:	d807      	bhi.n	800c0b0 <_printf_i+0x28>
 800c0a0:	2f62      	cmp	r7, #98	@ 0x62
 800c0a2:	d80a      	bhi.n	800c0ba <_printf_i+0x32>
 800c0a4:	2f00      	cmp	r7, #0
 800c0a6:	f000 80d2 	beq.w	800c24e <_printf_i+0x1c6>
 800c0aa:	2f58      	cmp	r7, #88	@ 0x58
 800c0ac:	f000 80b9 	beq.w	800c222 <_printf_i+0x19a>
 800c0b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c0b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c0b8:	e03a      	b.n	800c130 <_printf_i+0xa8>
 800c0ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c0be:	2b15      	cmp	r3, #21
 800c0c0:	d8f6      	bhi.n	800c0b0 <_printf_i+0x28>
 800c0c2:	a101      	add	r1, pc, #4	@ (adr r1, 800c0c8 <_printf_i+0x40>)
 800c0c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c0c8:	0800c121 	.word	0x0800c121
 800c0cc:	0800c135 	.word	0x0800c135
 800c0d0:	0800c0b1 	.word	0x0800c0b1
 800c0d4:	0800c0b1 	.word	0x0800c0b1
 800c0d8:	0800c0b1 	.word	0x0800c0b1
 800c0dc:	0800c0b1 	.word	0x0800c0b1
 800c0e0:	0800c135 	.word	0x0800c135
 800c0e4:	0800c0b1 	.word	0x0800c0b1
 800c0e8:	0800c0b1 	.word	0x0800c0b1
 800c0ec:	0800c0b1 	.word	0x0800c0b1
 800c0f0:	0800c0b1 	.word	0x0800c0b1
 800c0f4:	0800c235 	.word	0x0800c235
 800c0f8:	0800c15f 	.word	0x0800c15f
 800c0fc:	0800c1ef 	.word	0x0800c1ef
 800c100:	0800c0b1 	.word	0x0800c0b1
 800c104:	0800c0b1 	.word	0x0800c0b1
 800c108:	0800c257 	.word	0x0800c257
 800c10c:	0800c0b1 	.word	0x0800c0b1
 800c110:	0800c15f 	.word	0x0800c15f
 800c114:	0800c0b1 	.word	0x0800c0b1
 800c118:	0800c0b1 	.word	0x0800c0b1
 800c11c:	0800c1f7 	.word	0x0800c1f7
 800c120:	6833      	ldr	r3, [r6, #0]
 800c122:	1d1a      	adds	r2, r3, #4
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	6032      	str	r2, [r6, #0]
 800c128:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c12c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c130:	2301      	movs	r3, #1
 800c132:	e09d      	b.n	800c270 <_printf_i+0x1e8>
 800c134:	6833      	ldr	r3, [r6, #0]
 800c136:	6820      	ldr	r0, [r4, #0]
 800c138:	1d19      	adds	r1, r3, #4
 800c13a:	6031      	str	r1, [r6, #0]
 800c13c:	0606      	lsls	r6, r0, #24
 800c13e:	d501      	bpl.n	800c144 <_printf_i+0xbc>
 800c140:	681d      	ldr	r5, [r3, #0]
 800c142:	e003      	b.n	800c14c <_printf_i+0xc4>
 800c144:	0645      	lsls	r5, r0, #25
 800c146:	d5fb      	bpl.n	800c140 <_printf_i+0xb8>
 800c148:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c14c:	2d00      	cmp	r5, #0
 800c14e:	da03      	bge.n	800c158 <_printf_i+0xd0>
 800c150:	232d      	movs	r3, #45	@ 0x2d
 800c152:	426d      	negs	r5, r5
 800c154:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c158:	4859      	ldr	r0, [pc, #356]	@ (800c2c0 <_printf_i+0x238>)
 800c15a:	230a      	movs	r3, #10
 800c15c:	e011      	b.n	800c182 <_printf_i+0xfa>
 800c15e:	6821      	ldr	r1, [r4, #0]
 800c160:	6833      	ldr	r3, [r6, #0]
 800c162:	0608      	lsls	r0, r1, #24
 800c164:	f853 5b04 	ldr.w	r5, [r3], #4
 800c168:	d402      	bmi.n	800c170 <_printf_i+0xe8>
 800c16a:	0649      	lsls	r1, r1, #25
 800c16c:	bf48      	it	mi
 800c16e:	b2ad      	uxthmi	r5, r5
 800c170:	2f6f      	cmp	r7, #111	@ 0x6f
 800c172:	6033      	str	r3, [r6, #0]
 800c174:	4852      	ldr	r0, [pc, #328]	@ (800c2c0 <_printf_i+0x238>)
 800c176:	bf14      	ite	ne
 800c178:	230a      	movne	r3, #10
 800c17a:	2308      	moveq	r3, #8
 800c17c:	2100      	movs	r1, #0
 800c17e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c182:	6866      	ldr	r6, [r4, #4]
 800c184:	2e00      	cmp	r6, #0
 800c186:	60a6      	str	r6, [r4, #8]
 800c188:	bfa2      	ittt	ge
 800c18a:	6821      	ldrge	r1, [r4, #0]
 800c18c:	f021 0104 	bicge.w	r1, r1, #4
 800c190:	6021      	strge	r1, [r4, #0]
 800c192:	b90d      	cbnz	r5, 800c198 <_printf_i+0x110>
 800c194:	2e00      	cmp	r6, #0
 800c196:	d04b      	beq.n	800c230 <_printf_i+0x1a8>
 800c198:	4616      	mov	r6, r2
 800c19a:	fbb5 f1f3 	udiv	r1, r5, r3
 800c19e:	fb03 5711 	mls	r7, r3, r1, r5
 800c1a2:	5dc7      	ldrb	r7, [r0, r7]
 800c1a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c1a8:	462f      	mov	r7, r5
 800c1aa:	460d      	mov	r5, r1
 800c1ac:	42bb      	cmp	r3, r7
 800c1ae:	d9f4      	bls.n	800c19a <_printf_i+0x112>
 800c1b0:	2b08      	cmp	r3, #8
 800c1b2:	d10b      	bne.n	800c1cc <_printf_i+0x144>
 800c1b4:	6823      	ldr	r3, [r4, #0]
 800c1b6:	07df      	lsls	r7, r3, #31
 800c1b8:	d508      	bpl.n	800c1cc <_printf_i+0x144>
 800c1ba:	6923      	ldr	r3, [r4, #16]
 800c1bc:	6861      	ldr	r1, [r4, #4]
 800c1be:	4299      	cmp	r1, r3
 800c1c0:	bfde      	ittt	le
 800c1c2:	2330      	movle	r3, #48	@ 0x30
 800c1c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c1c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c1cc:	1b92      	subs	r2, r2, r6
 800c1ce:	6122      	str	r2, [r4, #16]
 800c1d0:	464b      	mov	r3, r9
 800c1d2:	aa03      	add	r2, sp, #12
 800c1d4:	4621      	mov	r1, r4
 800c1d6:	4640      	mov	r0, r8
 800c1d8:	f8cd a000 	str.w	sl, [sp]
 800c1dc:	f7ff fee2 	bl	800bfa4 <_printf_common>
 800c1e0:	3001      	adds	r0, #1
 800c1e2:	d14a      	bne.n	800c27a <_printf_i+0x1f2>
 800c1e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c1e8:	b004      	add	sp, #16
 800c1ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1ee:	6823      	ldr	r3, [r4, #0]
 800c1f0:	f043 0320 	orr.w	r3, r3, #32
 800c1f4:	6023      	str	r3, [r4, #0]
 800c1f6:	2778      	movs	r7, #120	@ 0x78
 800c1f8:	4832      	ldr	r0, [pc, #200]	@ (800c2c4 <_printf_i+0x23c>)
 800c1fa:	6823      	ldr	r3, [r4, #0]
 800c1fc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c200:	061f      	lsls	r7, r3, #24
 800c202:	6831      	ldr	r1, [r6, #0]
 800c204:	f851 5b04 	ldr.w	r5, [r1], #4
 800c208:	d402      	bmi.n	800c210 <_printf_i+0x188>
 800c20a:	065f      	lsls	r7, r3, #25
 800c20c:	bf48      	it	mi
 800c20e:	b2ad      	uxthmi	r5, r5
 800c210:	6031      	str	r1, [r6, #0]
 800c212:	07d9      	lsls	r1, r3, #31
 800c214:	bf44      	itt	mi
 800c216:	f043 0320 	orrmi.w	r3, r3, #32
 800c21a:	6023      	strmi	r3, [r4, #0]
 800c21c:	b11d      	cbz	r5, 800c226 <_printf_i+0x19e>
 800c21e:	2310      	movs	r3, #16
 800c220:	e7ac      	b.n	800c17c <_printf_i+0xf4>
 800c222:	4827      	ldr	r0, [pc, #156]	@ (800c2c0 <_printf_i+0x238>)
 800c224:	e7e9      	b.n	800c1fa <_printf_i+0x172>
 800c226:	6823      	ldr	r3, [r4, #0]
 800c228:	f023 0320 	bic.w	r3, r3, #32
 800c22c:	6023      	str	r3, [r4, #0]
 800c22e:	e7f6      	b.n	800c21e <_printf_i+0x196>
 800c230:	4616      	mov	r6, r2
 800c232:	e7bd      	b.n	800c1b0 <_printf_i+0x128>
 800c234:	6833      	ldr	r3, [r6, #0]
 800c236:	6825      	ldr	r5, [r4, #0]
 800c238:	1d18      	adds	r0, r3, #4
 800c23a:	6961      	ldr	r1, [r4, #20]
 800c23c:	6030      	str	r0, [r6, #0]
 800c23e:	062e      	lsls	r6, r5, #24
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	d501      	bpl.n	800c248 <_printf_i+0x1c0>
 800c244:	6019      	str	r1, [r3, #0]
 800c246:	e002      	b.n	800c24e <_printf_i+0x1c6>
 800c248:	0668      	lsls	r0, r5, #25
 800c24a:	d5fb      	bpl.n	800c244 <_printf_i+0x1bc>
 800c24c:	8019      	strh	r1, [r3, #0]
 800c24e:	2300      	movs	r3, #0
 800c250:	4616      	mov	r6, r2
 800c252:	6123      	str	r3, [r4, #16]
 800c254:	e7bc      	b.n	800c1d0 <_printf_i+0x148>
 800c256:	6833      	ldr	r3, [r6, #0]
 800c258:	2100      	movs	r1, #0
 800c25a:	1d1a      	adds	r2, r3, #4
 800c25c:	6032      	str	r2, [r6, #0]
 800c25e:	681e      	ldr	r6, [r3, #0]
 800c260:	6862      	ldr	r2, [r4, #4]
 800c262:	4630      	mov	r0, r6
 800c264:	f000 f9ce 	bl	800c604 <memchr>
 800c268:	b108      	cbz	r0, 800c26e <_printf_i+0x1e6>
 800c26a:	1b80      	subs	r0, r0, r6
 800c26c:	6060      	str	r0, [r4, #4]
 800c26e:	6863      	ldr	r3, [r4, #4]
 800c270:	6123      	str	r3, [r4, #16]
 800c272:	2300      	movs	r3, #0
 800c274:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c278:	e7aa      	b.n	800c1d0 <_printf_i+0x148>
 800c27a:	6923      	ldr	r3, [r4, #16]
 800c27c:	4632      	mov	r2, r6
 800c27e:	4649      	mov	r1, r9
 800c280:	4640      	mov	r0, r8
 800c282:	47d0      	blx	sl
 800c284:	3001      	adds	r0, #1
 800c286:	d0ad      	beq.n	800c1e4 <_printf_i+0x15c>
 800c288:	6823      	ldr	r3, [r4, #0]
 800c28a:	079b      	lsls	r3, r3, #30
 800c28c:	d413      	bmi.n	800c2b6 <_printf_i+0x22e>
 800c28e:	68e0      	ldr	r0, [r4, #12]
 800c290:	9b03      	ldr	r3, [sp, #12]
 800c292:	4298      	cmp	r0, r3
 800c294:	bfb8      	it	lt
 800c296:	4618      	movlt	r0, r3
 800c298:	e7a6      	b.n	800c1e8 <_printf_i+0x160>
 800c29a:	2301      	movs	r3, #1
 800c29c:	4632      	mov	r2, r6
 800c29e:	4649      	mov	r1, r9
 800c2a0:	4640      	mov	r0, r8
 800c2a2:	47d0      	blx	sl
 800c2a4:	3001      	adds	r0, #1
 800c2a6:	d09d      	beq.n	800c1e4 <_printf_i+0x15c>
 800c2a8:	3501      	adds	r5, #1
 800c2aa:	68e3      	ldr	r3, [r4, #12]
 800c2ac:	9903      	ldr	r1, [sp, #12]
 800c2ae:	1a5b      	subs	r3, r3, r1
 800c2b0:	42ab      	cmp	r3, r5
 800c2b2:	dcf2      	bgt.n	800c29a <_printf_i+0x212>
 800c2b4:	e7eb      	b.n	800c28e <_printf_i+0x206>
 800c2b6:	2500      	movs	r5, #0
 800c2b8:	f104 0619 	add.w	r6, r4, #25
 800c2bc:	e7f5      	b.n	800c2aa <_printf_i+0x222>
 800c2be:	bf00      	nop
 800c2c0:	0800c919 	.word	0x0800c919
 800c2c4:	0800c92a 	.word	0x0800c92a

0800c2c8 <__sflush_r>:
 800c2c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c2cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2d0:	0716      	lsls	r6, r2, #28
 800c2d2:	4605      	mov	r5, r0
 800c2d4:	460c      	mov	r4, r1
 800c2d6:	d454      	bmi.n	800c382 <__sflush_r+0xba>
 800c2d8:	684b      	ldr	r3, [r1, #4]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	dc02      	bgt.n	800c2e4 <__sflush_r+0x1c>
 800c2de:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	dd48      	ble.n	800c376 <__sflush_r+0xae>
 800c2e4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c2e6:	2e00      	cmp	r6, #0
 800c2e8:	d045      	beq.n	800c376 <__sflush_r+0xae>
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c2f0:	682f      	ldr	r7, [r5, #0]
 800c2f2:	6a21      	ldr	r1, [r4, #32]
 800c2f4:	602b      	str	r3, [r5, #0]
 800c2f6:	d030      	beq.n	800c35a <__sflush_r+0x92>
 800c2f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c2fa:	89a3      	ldrh	r3, [r4, #12]
 800c2fc:	0759      	lsls	r1, r3, #29
 800c2fe:	d505      	bpl.n	800c30c <__sflush_r+0x44>
 800c300:	6863      	ldr	r3, [r4, #4]
 800c302:	1ad2      	subs	r2, r2, r3
 800c304:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c306:	b10b      	cbz	r3, 800c30c <__sflush_r+0x44>
 800c308:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c30a:	1ad2      	subs	r2, r2, r3
 800c30c:	2300      	movs	r3, #0
 800c30e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c310:	6a21      	ldr	r1, [r4, #32]
 800c312:	4628      	mov	r0, r5
 800c314:	47b0      	blx	r6
 800c316:	1c43      	adds	r3, r0, #1
 800c318:	89a3      	ldrh	r3, [r4, #12]
 800c31a:	d106      	bne.n	800c32a <__sflush_r+0x62>
 800c31c:	6829      	ldr	r1, [r5, #0]
 800c31e:	291d      	cmp	r1, #29
 800c320:	d82b      	bhi.n	800c37a <__sflush_r+0xb2>
 800c322:	4a2a      	ldr	r2, [pc, #168]	@ (800c3cc <__sflush_r+0x104>)
 800c324:	410a      	asrs	r2, r1
 800c326:	07d6      	lsls	r6, r2, #31
 800c328:	d427      	bmi.n	800c37a <__sflush_r+0xb2>
 800c32a:	2200      	movs	r2, #0
 800c32c:	04d9      	lsls	r1, r3, #19
 800c32e:	6062      	str	r2, [r4, #4]
 800c330:	6922      	ldr	r2, [r4, #16]
 800c332:	6022      	str	r2, [r4, #0]
 800c334:	d504      	bpl.n	800c340 <__sflush_r+0x78>
 800c336:	1c42      	adds	r2, r0, #1
 800c338:	d101      	bne.n	800c33e <__sflush_r+0x76>
 800c33a:	682b      	ldr	r3, [r5, #0]
 800c33c:	b903      	cbnz	r3, 800c340 <__sflush_r+0x78>
 800c33e:	6560      	str	r0, [r4, #84]	@ 0x54
 800c340:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c342:	602f      	str	r7, [r5, #0]
 800c344:	b1b9      	cbz	r1, 800c376 <__sflush_r+0xae>
 800c346:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c34a:	4299      	cmp	r1, r3
 800c34c:	d002      	beq.n	800c354 <__sflush_r+0x8c>
 800c34e:	4628      	mov	r0, r5
 800c350:	f7ff fa96 	bl	800b880 <_free_r>
 800c354:	2300      	movs	r3, #0
 800c356:	6363      	str	r3, [r4, #52]	@ 0x34
 800c358:	e00d      	b.n	800c376 <__sflush_r+0xae>
 800c35a:	2301      	movs	r3, #1
 800c35c:	4628      	mov	r0, r5
 800c35e:	47b0      	blx	r6
 800c360:	4602      	mov	r2, r0
 800c362:	1c50      	adds	r0, r2, #1
 800c364:	d1c9      	bne.n	800c2fa <__sflush_r+0x32>
 800c366:	682b      	ldr	r3, [r5, #0]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d0c6      	beq.n	800c2fa <__sflush_r+0x32>
 800c36c:	2b1d      	cmp	r3, #29
 800c36e:	d001      	beq.n	800c374 <__sflush_r+0xac>
 800c370:	2b16      	cmp	r3, #22
 800c372:	d11d      	bne.n	800c3b0 <__sflush_r+0xe8>
 800c374:	602f      	str	r7, [r5, #0]
 800c376:	2000      	movs	r0, #0
 800c378:	e021      	b.n	800c3be <__sflush_r+0xf6>
 800c37a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c37e:	b21b      	sxth	r3, r3
 800c380:	e01a      	b.n	800c3b8 <__sflush_r+0xf0>
 800c382:	690f      	ldr	r7, [r1, #16]
 800c384:	2f00      	cmp	r7, #0
 800c386:	d0f6      	beq.n	800c376 <__sflush_r+0xae>
 800c388:	0793      	lsls	r3, r2, #30
 800c38a:	680e      	ldr	r6, [r1, #0]
 800c38c:	600f      	str	r7, [r1, #0]
 800c38e:	bf0c      	ite	eq
 800c390:	694b      	ldreq	r3, [r1, #20]
 800c392:	2300      	movne	r3, #0
 800c394:	eba6 0807 	sub.w	r8, r6, r7
 800c398:	608b      	str	r3, [r1, #8]
 800c39a:	f1b8 0f00 	cmp.w	r8, #0
 800c39e:	ddea      	ble.n	800c376 <__sflush_r+0xae>
 800c3a0:	4643      	mov	r3, r8
 800c3a2:	463a      	mov	r2, r7
 800c3a4:	6a21      	ldr	r1, [r4, #32]
 800c3a6:	4628      	mov	r0, r5
 800c3a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c3aa:	47b0      	blx	r6
 800c3ac:	2800      	cmp	r0, #0
 800c3ae:	dc08      	bgt.n	800c3c2 <__sflush_r+0xfa>
 800c3b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c3b8:	f04f 30ff 	mov.w	r0, #4294967295
 800c3bc:	81a3      	strh	r3, [r4, #12]
 800c3be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3c2:	4407      	add	r7, r0
 800c3c4:	eba8 0800 	sub.w	r8, r8, r0
 800c3c8:	e7e7      	b.n	800c39a <__sflush_r+0xd2>
 800c3ca:	bf00      	nop
 800c3cc:	dfbffffe 	.word	0xdfbffffe

0800c3d0 <_fflush_r>:
 800c3d0:	b538      	push	{r3, r4, r5, lr}
 800c3d2:	690b      	ldr	r3, [r1, #16]
 800c3d4:	4605      	mov	r5, r0
 800c3d6:	460c      	mov	r4, r1
 800c3d8:	b913      	cbnz	r3, 800c3e0 <_fflush_r+0x10>
 800c3da:	2500      	movs	r5, #0
 800c3dc:	4628      	mov	r0, r5
 800c3de:	bd38      	pop	{r3, r4, r5, pc}
 800c3e0:	b118      	cbz	r0, 800c3ea <_fflush_r+0x1a>
 800c3e2:	6a03      	ldr	r3, [r0, #32]
 800c3e4:	b90b      	cbnz	r3, 800c3ea <_fflush_r+0x1a>
 800c3e6:	f7ff f91b 	bl	800b620 <__sinit>
 800c3ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d0f3      	beq.n	800c3da <_fflush_r+0xa>
 800c3f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c3f4:	07d0      	lsls	r0, r2, #31
 800c3f6:	d404      	bmi.n	800c402 <_fflush_r+0x32>
 800c3f8:	0599      	lsls	r1, r3, #22
 800c3fa:	d402      	bmi.n	800c402 <_fflush_r+0x32>
 800c3fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c3fe:	f7ff fa3c 	bl	800b87a <__retarget_lock_acquire_recursive>
 800c402:	4628      	mov	r0, r5
 800c404:	4621      	mov	r1, r4
 800c406:	f7ff ff5f 	bl	800c2c8 <__sflush_r>
 800c40a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c40c:	4605      	mov	r5, r0
 800c40e:	07da      	lsls	r2, r3, #31
 800c410:	d4e4      	bmi.n	800c3dc <_fflush_r+0xc>
 800c412:	89a3      	ldrh	r3, [r4, #12]
 800c414:	059b      	lsls	r3, r3, #22
 800c416:	d4e1      	bmi.n	800c3dc <_fflush_r+0xc>
 800c418:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c41a:	f7ff fa2f 	bl	800b87c <__retarget_lock_release_recursive>
 800c41e:	e7dd      	b.n	800c3dc <_fflush_r+0xc>

0800c420 <_putc_r>:
 800c420:	b570      	push	{r4, r5, r6, lr}
 800c422:	460d      	mov	r5, r1
 800c424:	4614      	mov	r4, r2
 800c426:	4606      	mov	r6, r0
 800c428:	b118      	cbz	r0, 800c432 <_putc_r+0x12>
 800c42a:	6a03      	ldr	r3, [r0, #32]
 800c42c:	b90b      	cbnz	r3, 800c432 <_putc_r+0x12>
 800c42e:	f7ff f8f7 	bl	800b620 <__sinit>
 800c432:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c434:	07d8      	lsls	r0, r3, #31
 800c436:	d405      	bmi.n	800c444 <_putc_r+0x24>
 800c438:	89a3      	ldrh	r3, [r4, #12]
 800c43a:	0599      	lsls	r1, r3, #22
 800c43c:	d402      	bmi.n	800c444 <_putc_r+0x24>
 800c43e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c440:	f7ff fa1b 	bl	800b87a <__retarget_lock_acquire_recursive>
 800c444:	68a3      	ldr	r3, [r4, #8]
 800c446:	3b01      	subs	r3, #1
 800c448:	2b00      	cmp	r3, #0
 800c44a:	60a3      	str	r3, [r4, #8]
 800c44c:	da05      	bge.n	800c45a <_putc_r+0x3a>
 800c44e:	69a2      	ldr	r2, [r4, #24]
 800c450:	4293      	cmp	r3, r2
 800c452:	db12      	blt.n	800c47a <_putc_r+0x5a>
 800c454:	b2eb      	uxtb	r3, r5
 800c456:	2b0a      	cmp	r3, #10
 800c458:	d00f      	beq.n	800c47a <_putc_r+0x5a>
 800c45a:	6823      	ldr	r3, [r4, #0]
 800c45c:	1c5a      	adds	r2, r3, #1
 800c45e:	6022      	str	r2, [r4, #0]
 800c460:	701d      	strb	r5, [r3, #0]
 800c462:	b2ed      	uxtb	r5, r5
 800c464:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c466:	07da      	lsls	r2, r3, #31
 800c468:	d405      	bmi.n	800c476 <_putc_r+0x56>
 800c46a:	89a3      	ldrh	r3, [r4, #12]
 800c46c:	059b      	lsls	r3, r3, #22
 800c46e:	d402      	bmi.n	800c476 <_putc_r+0x56>
 800c470:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c472:	f7ff fa03 	bl	800b87c <__retarget_lock_release_recursive>
 800c476:	4628      	mov	r0, r5
 800c478:	bd70      	pop	{r4, r5, r6, pc}
 800c47a:	4629      	mov	r1, r5
 800c47c:	4622      	mov	r2, r4
 800c47e:	4630      	mov	r0, r6
 800c480:	f000 f802 	bl	800c488 <__swbuf_r>
 800c484:	4605      	mov	r5, r0
 800c486:	e7ed      	b.n	800c464 <_putc_r+0x44>

0800c488 <__swbuf_r>:
 800c488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c48a:	460e      	mov	r6, r1
 800c48c:	4614      	mov	r4, r2
 800c48e:	4605      	mov	r5, r0
 800c490:	b118      	cbz	r0, 800c49a <__swbuf_r+0x12>
 800c492:	6a03      	ldr	r3, [r0, #32]
 800c494:	b90b      	cbnz	r3, 800c49a <__swbuf_r+0x12>
 800c496:	f7ff f8c3 	bl	800b620 <__sinit>
 800c49a:	69a3      	ldr	r3, [r4, #24]
 800c49c:	60a3      	str	r3, [r4, #8]
 800c49e:	89a3      	ldrh	r3, [r4, #12]
 800c4a0:	071a      	lsls	r2, r3, #28
 800c4a2:	d501      	bpl.n	800c4a8 <__swbuf_r+0x20>
 800c4a4:	6923      	ldr	r3, [r4, #16]
 800c4a6:	b943      	cbnz	r3, 800c4ba <__swbuf_r+0x32>
 800c4a8:	4621      	mov	r1, r4
 800c4aa:	4628      	mov	r0, r5
 800c4ac:	f000 f82a 	bl	800c504 <__swsetup_r>
 800c4b0:	b118      	cbz	r0, 800c4ba <__swbuf_r+0x32>
 800c4b2:	f04f 37ff 	mov.w	r7, #4294967295
 800c4b6:	4638      	mov	r0, r7
 800c4b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c4ba:	6823      	ldr	r3, [r4, #0]
 800c4bc:	b2f6      	uxtb	r6, r6
 800c4be:	6922      	ldr	r2, [r4, #16]
 800c4c0:	4637      	mov	r7, r6
 800c4c2:	1a98      	subs	r0, r3, r2
 800c4c4:	6963      	ldr	r3, [r4, #20]
 800c4c6:	4283      	cmp	r3, r0
 800c4c8:	dc05      	bgt.n	800c4d6 <__swbuf_r+0x4e>
 800c4ca:	4621      	mov	r1, r4
 800c4cc:	4628      	mov	r0, r5
 800c4ce:	f7ff ff7f 	bl	800c3d0 <_fflush_r>
 800c4d2:	2800      	cmp	r0, #0
 800c4d4:	d1ed      	bne.n	800c4b2 <__swbuf_r+0x2a>
 800c4d6:	68a3      	ldr	r3, [r4, #8]
 800c4d8:	3b01      	subs	r3, #1
 800c4da:	60a3      	str	r3, [r4, #8]
 800c4dc:	6823      	ldr	r3, [r4, #0]
 800c4de:	1c5a      	adds	r2, r3, #1
 800c4e0:	6022      	str	r2, [r4, #0]
 800c4e2:	701e      	strb	r6, [r3, #0]
 800c4e4:	1c43      	adds	r3, r0, #1
 800c4e6:	6962      	ldr	r2, [r4, #20]
 800c4e8:	429a      	cmp	r2, r3
 800c4ea:	d004      	beq.n	800c4f6 <__swbuf_r+0x6e>
 800c4ec:	89a3      	ldrh	r3, [r4, #12]
 800c4ee:	07db      	lsls	r3, r3, #31
 800c4f0:	d5e1      	bpl.n	800c4b6 <__swbuf_r+0x2e>
 800c4f2:	2e0a      	cmp	r6, #10
 800c4f4:	d1df      	bne.n	800c4b6 <__swbuf_r+0x2e>
 800c4f6:	4621      	mov	r1, r4
 800c4f8:	4628      	mov	r0, r5
 800c4fa:	f7ff ff69 	bl	800c3d0 <_fflush_r>
 800c4fe:	2800      	cmp	r0, #0
 800c500:	d0d9      	beq.n	800c4b6 <__swbuf_r+0x2e>
 800c502:	e7d6      	b.n	800c4b2 <__swbuf_r+0x2a>

0800c504 <__swsetup_r>:
 800c504:	b538      	push	{r3, r4, r5, lr}
 800c506:	4b29      	ldr	r3, [pc, #164]	@ (800c5ac <__swsetup_r+0xa8>)
 800c508:	4605      	mov	r5, r0
 800c50a:	460c      	mov	r4, r1
 800c50c:	6818      	ldr	r0, [r3, #0]
 800c50e:	b118      	cbz	r0, 800c518 <__swsetup_r+0x14>
 800c510:	6a03      	ldr	r3, [r0, #32]
 800c512:	b90b      	cbnz	r3, 800c518 <__swsetup_r+0x14>
 800c514:	f7ff f884 	bl	800b620 <__sinit>
 800c518:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c51c:	0719      	lsls	r1, r3, #28
 800c51e:	d422      	bmi.n	800c566 <__swsetup_r+0x62>
 800c520:	06da      	lsls	r2, r3, #27
 800c522:	d407      	bmi.n	800c534 <__swsetup_r+0x30>
 800c524:	2209      	movs	r2, #9
 800c526:	602a      	str	r2, [r5, #0]
 800c528:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c52c:	f04f 30ff 	mov.w	r0, #4294967295
 800c530:	81a3      	strh	r3, [r4, #12]
 800c532:	e033      	b.n	800c59c <__swsetup_r+0x98>
 800c534:	0758      	lsls	r0, r3, #29
 800c536:	d512      	bpl.n	800c55e <__swsetup_r+0x5a>
 800c538:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c53a:	b141      	cbz	r1, 800c54e <__swsetup_r+0x4a>
 800c53c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c540:	4299      	cmp	r1, r3
 800c542:	d002      	beq.n	800c54a <__swsetup_r+0x46>
 800c544:	4628      	mov	r0, r5
 800c546:	f7ff f99b 	bl	800b880 <_free_r>
 800c54a:	2300      	movs	r3, #0
 800c54c:	6363      	str	r3, [r4, #52]	@ 0x34
 800c54e:	89a3      	ldrh	r3, [r4, #12]
 800c550:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c554:	81a3      	strh	r3, [r4, #12]
 800c556:	2300      	movs	r3, #0
 800c558:	6063      	str	r3, [r4, #4]
 800c55a:	6923      	ldr	r3, [r4, #16]
 800c55c:	6023      	str	r3, [r4, #0]
 800c55e:	89a3      	ldrh	r3, [r4, #12]
 800c560:	f043 0308 	orr.w	r3, r3, #8
 800c564:	81a3      	strh	r3, [r4, #12]
 800c566:	6923      	ldr	r3, [r4, #16]
 800c568:	b94b      	cbnz	r3, 800c57e <__swsetup_r+0x7a>
 800c56a:	89a3      	ldrh	r3, [r4, #12]
 800c56c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c570:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c574:	d003      	beq.n	800c57e <__swsetup_r+0x7a>
 800c576:	4621      	mov	r1, r4
 800c578:	4628      	mov	r0, r5
 800c57a:	f000 f8b1 	bl	800c6e0 <__smakebuf_r>
 800c57e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c582:	f013 0201 	ands.w	r2, r3, #1
 800c586:	d00a      	beq.n	800c59e <__swsetup_r+0x9a>
 800c588:	2200      	movs	r2, #0
 800c58a:	60a2      	str	r2, [r4, #8]
 800c58c:	6962      	ldr	r2, [r4, #20]
 800c58e:	4252      	negs	r2, r2
 800c590:	61a2      	str	r2, [r4, #24]
 800c592:	6922      	ldr	r2, [r4, #16]
 800c594:	b942      	cbnz	r2, 800c5a8 <__swsetup_r+0xa4>
 800c596:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c59a:	d1c5      	bne.n	800c528 <__swsetup_r+0x24>
 800c59c:	bd38      	pop	{r3, r4, r5, pc}
 800c59e:	0799      	lsls	r1, r3, #30
 800c5a0:	bf58      	it	pl
 800c5a2:	6962      	ldrpl	r2, [r4, #20]
 800c5a4:	60a2      	str	r2, [r4, #8]
 800c5a6:	e7f4      	b.n	800c592 <__swsetup_r+0x8e>
 800c5a8:	2000      	movs	r0, #0
 800c5aa:	e7f7      	b.n	800c59c <__swsetup_r+0x98>
 800c5ac:	2000019c 	.word	0x2000019c

0800c5b0 <memmove>:
 800c5b0:	4288      	cmp	r0, r1
 800c5b2:	b510      	push	{r4, lr}
 800c5b4:	eb01 0402 	add.w	r4, r1, r2
 800c5b8:	d902      	bls.n	800c5c0 <memmove+0x10>
 800c5ba:	4284      	cmp	r4, r0
 800c5bc:	4623      	mov	r3, r4
 800c5be:	d807      	bhi.n	800c5d0 <memmove+0x20>
 800c5c0:	1e43      	subs	r3, r0, #1
 800c5c2:	42a1      	cmp	r1, r4
 800c5c4:	d008      	beq.n	800c5d8 <memmove+0x28>
 800c5c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c5ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c5ce:	e7f8      	b.n	800c5c2 <memmove+0x12>
 800c5d0:	4402      	add	r2, r0
 800c5d2:	4601      	mov	r1, r0
 800c5d4:	428a      	cmp	r2, r1
 800c5d6:	d100      	bne.n	800c5da <memmove+0x2a>
 800c5d8:	bd10      	pop	{r4, pc}
 800c5da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c5de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c5e2:	e7f7      	b.n	800c5d4 <memmove+0x24>

0800c5e4 <_sbrk_r>:
 800c5e4:	b538      	push	{r3, r4, r5, lr}
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	4d05      	ldr	r5, [pc, #20]	@ (800c600 <_sbrk_r+0x1c>)
 800c5ea:	4604      	mov	r4, r0
 800c5ec:	4608      	mov	r0, r1
 800c5ee:	602b      	str	r3, [r5, #0]
 800c5f0:	f7f4 fa1e 	bl	8000a30 <_sbrk>
 800c5f4:	1c43      	adds	r3, r0, #1
 800c5f6:	d102      	bne.n	800c5fe <_sbrk_r+0x1a>
 800c5f8:	682b      	ldr	r3, [r5, #0]
 800c5fa:	b103      	cbz	r3, 800c5fe <_sbrk_r+0x1a>
 800c5fc:	6023      	str	r3, [r4, #0]
 800c5fe:	bd38      	pop	{r3, r4, r5, pc}
 800c600:	20000ddc 	.word	0x20000ddc

0800c604 <memchr>:
 800c604:	b2c9      	uxtb	r1, r1
 800c606:	4603      	mov	r3, r0
 800c608:	4402      	add	r2, r0
 800c60a:	b510      	push	{r4, lr}
 800c60c:	4293      	cmp	r3, r2
 800c60e:	4618      	mov	r0, r3
 800c610:	d101      	bne.n	800c616 <memchr+0x12>
 800c612:	2000      	movs	r0, #0
 800c614:	e003      	b.n	800c61e <memchr+0x1a>
 800c616:	7804      	ldrb	r4, [r0, #0]
 800c618:	3301      	adds	r3, #1
 800c61a:	428c      	cmp	r4, r1
 800c61c:	d1f6      	bne.n	800c60c <memchr+0x8>
 800c61e:	bd10      	pop	{r4, pc}

0800c620 <memcpy>:
 800c620:	440a      	add	r2, r1
 800c622:	1e43      	subs	r3, r0, #1
 800c624:	4291      	cmp	r1, r2
 800c626:	d100      	bne.n	800c62a <memcpy+0xa>
 800c628:	4770      	bx	lr
 800c62a:	b510      	push	{r4, lr}
 800c62c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c630:	4291      	cmp	r1, r2
 800c632:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c636:	d1f9      	bne.n	800c62c <memcpy+0xc>
 800c638:	bd10      	pop	{r4, pc}

0800c63a <_realloc_r>:
 800c63a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c63e:	4680      	mov	r8, r0
 800c640:	4615      	mov	r5, r2
 800c642:	460c      	mov	r4, r1
 800c644:	b921      	cbnz	r1, 800c650 <_realloc_r+0x16>
 800c646:	4611      	mov	r1, r2
 800c648:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c64c:	f7ff b984 	b.w	800b958 <_malloc_r>
 800c650:	b92a      	cbnz	r2, 800c65e <_realloc_r+0x24>
 800c652:	f7ff f915 	bl	800b880 <_free_r>
 800c656:	2400      	movs	r4, #0
 800c658:	4620      	mov	r0, r4
 800c65a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c65e:	f000 f89d 	bl	800c79c <_malloc_usable_size_r>
 800c662:	4285      	cmp	r5, r0
 800c664:	4606      	mov	r6, r0
 800c666:	d802      	bhi.n	800c66e <_realloc_r+0x34>
 800c668:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c66c:	d8f4      	bhi.n	800c658 <_realloc_r+0x1e>
 800c66e:	4629      	mov	r1, r5
 800c670:	4640      	mov	r0, r8
 800c672:	f7ff f971 	bl	800b958 <_malloc_r>
 800c676:	4607      	mov	r7, r0
 800c678:	2800      	cmp	r0, #0
 800c67a:	d0ec      	beq.n	800c656 <_realloc_r+0x1c>
 800c67c:	42b5      	cmp	r5, r6
 800c67e:	462a      	mov	r2, r5
 800c680:	4621      	mov	r1, r4
 800c682:	bf28      	it	cs
 800c684:	4632      	movcs	r2, r6
 800c686:	f7ff ffcb 	bl	800c620 <memcpy>
 800c68a:	4621      	mov	r1, r4
 800c68c:	4640      	mov	r0, r8
 800c68e:	463c      	mov	r4, r7
 800c690:	f7ff f8f6 	bl	800b880 <_free_r>
 800c694:	e7e0      	b.n	800c658 <_realloc_r+0x1e>

0800c696 <__swhatbuf_r>:
 800c696:	b570      	push	{r4, r5, r6, lr}
 800c698:	460c      	mov	r4, r1
 800c69a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c69e:	b096      	sub	sp, #88	@ 0x58
 800c6a0:	4615      	mov	r5, r2
 800c6a2:	2900      	cmp	r1, #0
 800c6a4:	461e      	mov	r6, r3
 800c6a6:	da0c      	bge.n	800c6c2 <__swhatbuf_r+0x2c>
 800c6a8:	89a3      	ldrh	r3, [r4, #12]
 800c6aa:	2100      	movs	r1, #0
 800c6ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c6b0:	bf14      	ite	ne
 800c6b2:	2340      	movne	r3, #64	@ 0x40
 800c6b4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c6b8:	2000      	movs	r0, #0
 800c6ba:	6031      	str	r1, [r6, #0]
 800c6bc:	602b      	str	r3, [r5, #0]
 800c6be:	b016      	add	sp, #88	@ 0x58
 800c6c0:	bd70      	pop	{r4, r5, r6, pc}
 800c6c2:	466a      	mov	r2, sp
 800c6c4:	f000 f848 	bl	800c758 <_fstat_r>
 800c6c8:	2800      	cmp	r0, #0
 800c6ca:	dbed      	blt.n	800c6a8 <__swhatbuf_r+0x12>
 800c6cc:	9901      	ldr	r1, [sp, #4]
 800c6ce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c6d2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c6d6:	4259      	negs	r1, r3
 800c6d8:	4159      	adcs	r1, r3
 800c6da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c6de:	e7eb      	b.n	800c6b8 <__swhatbuf_r+0x22>

0800c6e0 <__smakebuf_r>:
 800c6e0:	898b      	ldrh	r3, [r1, #12]
 800c6e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c6e4:	079d      	lsls	r5, r3, #30
 800c6e6:	4606      	mov	r6, r0
 800c6e8:	460c      	mov	r4, r1
 800c6ea:	d507      	bpl.n	800c6fc <__smakebuf_r+0x1c>
 800c6ec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c6f0:	6023      	str	r3, [r4, #0]
 800c6f2:	6123      	str	r3, [r4, #16]
 800c6f4:	2301      	movs	r3, #1
 800c6f6:	6163      	str	r3, [r4, #20]
 800c6f8:	b003      	add	sp, #12
 800c6fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6fc:	ab01      	add	r3, sp, #4
 800c6fe:	466a      	mov	r2, sp
 800c700:	f7ff ffc9 	bl	800c696 <__swhatbuf_r>
 800c704:	9f00      	ldr	r7, [sp, #0]
 800c706:	4605      	mov	r5, r0
 800c708:	4630      	mov	r0, r6
 800c70a:	4639      	mov	r1, r7
 800c70c:	f7ff f924 	bl	800b958 <_malloc_r>
 800c710:	b948      	cbnz	r0, 800c726 <__smakebuf_r+0x46>
 800c712:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c716:	059a      	lsls	r2, r3, #22
 800c718:	d4ee      	bmi.n	800c6f8 <__smakebuf_r+0x18>
 800c71a:	f023 0303 	bic.w	r3, r3, #3
 800c71e:	f043 0302 	orr.w	r3, r3, #2
 800c722:	81a3      	strh	r3, [r4, #12]
 800c724:	e7e2      	b.n	800c6ec <__smakebuf_r+0xc>
 800c726:	89a3      	ldrh	r3, [r4, #12]
 800c728:	6020      	str	r0, [r4, #0]
 800c72a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c72e:	81a3      	strh	r3, [r4, #12]
 800c730:	9b01      	ldr	r3, [sp, #4]
 800c732:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c736:	b15b      	cbz	r3, 800c750 <__smakebuf_r+0x70>
 800c738:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c73c:	4630      	mov	r0, r6
 800c73e:	f000 f81d 	bl	800c77c <_isatty_r>
 800c742:	b128      	cbz	r0, 800c750 <__smakebuf_r+0x70>
 800c744:	89a3      	ldrh	r3, [r4, #12]
 800c746:	f023 0303 	bic.w	r3, r3, #3
 800c74a:	f043 0301 	orr.w	r3, r3, #1
 800c74e:	81a3      	strh	r3, [r4, #12]
 800c750:	89a3      	ldrh	r3, [r4, #12]
 800c752:	431d      	orrs	r5, r3
 800c754:	81a5      	strh	r5, [r4, #12]
 800c756:	e7cf      	b.n	800c6f8 <__smakebuf_r+0x18>

0800c758 <_fstat_r>:
 800c758:	b538      	push	{r3, r4, r5, lr}
 800c75a:	2300      	movs	r3, #0
 800c75c:	4d06      	ldr	r5, [pc, #24]	@ (800c778 <_fstat_r+0x20>)
 800c75e:	4604      	mov	r4, r0
 800c760:	4608      	mov	r0, r1
 800c762:	4611      	mov	r1, r2
 800c764:	602b      	str	r3, [r5, #0]
 800c766:	f7f4 f93a 	bl	80009de <_fstat>
 800c76a:	1c43      	adds	r3, r0, #1
 800c76c:	d102      	bne.n	800c774 <_fstat_r+0x1c>
 800c76e:	682b      	ldr	r3, [r5, #0]
 800c770:	b103      	cbz	r3, 800c774 <_fstat_r+0x1c>
 800c772:	6023      	str	r3, [r4, #0]
 800c774:	bd38      	pop	{r3, r4, r5, pc}
 800c776:	bf00      	nop
 800c778:	20000ddc 	.word	0x20000ddc

0800c77c <_isatty_r>:
 800c77c:	b538      	push	{r3, r4, r5, lr}
 800c77e:	2300      	movs	r3, #0
 800c780:	4d05      	ldr	r5, [pc, #20]	@ (800c798 <_isatty_r+0x1c>)
 800c782:	4604      	mov	r4, r0
 800c784:	4608      	mov	r0, r1
 800c786:	602b      	str	r3, [r5, #0]
 800c788:	f7f4 f939 	bl	80009fe <_isatty>
 800c78c:	1c43      	adds	r3, r0, #1
 800c78e:	d102      	bne.n	800c796 <_isatty_r+0x1a>
 800c790:	682b      	ldr	r3, [r5, #0]
 800c792:	b103      	cbz	r3, 800c796 <_isatty_r+0x1a>
 800c794:	6023      	str	r3, [r4, #0]
 800c796:	bd38      	pop	{r3, r4, r5, pc}
 800c798:	20000ddc 	.word	0x20000ddc

0800c79c <_malloc_usable_size_r>:
 800c79c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c7a0:	1f18      	subs	r0, r3, #4
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	bfbc      	itt	lt
 800c7a6:	580b      	ldrlt	r3, [r1, r0]
 800c7a8:	18c0      	addlt	r0, r0, r3
 800c7aa:	4770      	bx	lr

0800c7ac <_init>:
 800c7ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7ae:	bf00      	nop
 800c7b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7b2:	bc08      	pop	{r3}
 800c7b4:	469e      	mov	lr, r3
 800c7b6:	4770      	bx	lr

0800c7b8 <_fini>:
 800c7b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7ba:	bf00      	nop
 800c7bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7be:	bc08      	pop	{r3}
 800c7c0:	469e      	mov	lr, r3
 800c7c2:	4770      	bx	lr
