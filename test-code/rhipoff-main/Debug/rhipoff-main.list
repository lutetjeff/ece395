
rhipoff-main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000254  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cac0  08000254  08000254  00001254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  0800cd14  0800cd14  0000dd14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ce30  0800ce30  0000e1d4  2**0
                  CONTENTS
  4 .ARM          00000000  0800ce30  0800ce30  0000e1d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ce30  0800ce30  0000e1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ce30  0800ce30  0000de30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ce34  0800ce34  0000de34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800ce38  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c48  200001d4  0800d00c  0000e1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000d04  20000e1c  0800d00c  0000ee1c  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000e1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017eb0  00000000  00000000  0000e20a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a34  00000000  00000000  000260ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001270  00000000  00000000  00029af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000db9  00000000  00000000  0002ad60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e327  00000000  00000000  0002bb19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000182af  00000000  00000000  00059e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001108a7  00000000  00000000  000720ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00182996  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054a8  00000000  00000000  001829dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00187e84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000254 <__do_global_dtors_aux>:
 8000254:	b510      	push	{r4, lr}
 8000256:	4c05      	ldr	r4, [pc, #20]	@ (800026c <__do_global_dtors_aux+0x18>)
 8000258:	7823      	ldrb	r3, [r4, #0]
 800025a:	b933      	cbnz	r3, 800026a <__do_global_dtors_aux+0x16>
 800025c:	4b04      	ldr	r3, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x1c>)
 800025e:	b113      	cbz	r3, 8000266 <__do_global_dtors_aux+0x12>
 8000260:	4804      	ldr	r0, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x20>)
 8000262:	f3af 8000 	nop.w
 8000266:	2301      	movs	r3, #1
 8000268:	7023      	strb	r3, [r4, #0]
 800026a:	bd10      	pop	{r4, pc}
 800026c:	200001d4 	.word	0x200001d4
 8000270:	00000000 	.word	0x00000000
 8000274:	0800ccfc 	.word	0x0800ccfc

08000278 <frame_dummy>:
 8000278:	b508      	push	{r3, lr}
 800027a:	4b03      	ldr	r3, [pc, #12]	@ (8000288 <frame_dummy+0x10>)
 800027c:	b11b      	cbz	r3, 8000286 <frame_dummy+0xe>
 800027e:	4903      	ldr	r1, [pc, #12]	@ (800028c <frame_dummy+0x14>)
 8000280:	4803      	ldr	r0, [pc, #12]	@ (8000290 <frame_dummy+0x18>)
 8000282:	f3af 8000 	nop.w
 8000286:	bd08      	pop	{r3, pc}
 8000288:	00000000 	.word	0x00000000
 800028c:	200001d8 	.word	0x200001d8
 8000290:	0800ccfc 	.word	0x0800ccfc

08000294 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b082      	sub	sp, #8
 8000298:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800029a:	f000 fce1 	bl	8000c60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800029e:	f000 f8c9 	bl	8000434 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002a2:	f000 f9b5 	bl	8000610 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 80002a6:	f000 f93b 	bl	8000520 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  /* Initialize the USB Device Library */
  if(USBD_Init(&hUsbDeviceFS, &Class_Desc, 0) != USBD_OK)
 80002aa:	2200      	movs	r2, #0
 80002ac:	494f      	ldr	r1, [pc, #316]	@ (80003ec <main+0x158>)
 80002ae:	4850      	ldr	r0, [pc, #320]	@ (80003f0 <main+0x15c>)
 80002b0:	f009 feec 	bl	800a08c <USBD_Init>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <main+0x2a>
  	Error_Handler();
 80002ba:	f000 fa7f 	bl	80007bc <Error_Handler>
  /* Register the CHID Class */
  CHID_InstID = hUsbDeviceFS.classId;
 80002be:	4b4c      	ldr	r3, [pc, #304]	@ (80003f0 <main+0x15c>)
 80002c0:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80002c4:	b2da      	uxtb	r2, r3
 80002c6:	4b4b      	ldr	r3, [pc, #300]	@ (80003f4 <main+0x160>)
 80002c8:	701a      	strb	r2, [r3, #0]
  if(USBD_RegisterClassComposite(&hUsbDeviceFS, USBD_CUSTOM_HID_CLASS, CLASS_TYPE_CHID, CUSTOM_HID_EpAdd_Inst) != USBD_OK)
 80002ca:	4b4b      	ldr	r3, [pc, #300]	@ (80003f8 <main+0x164>)
 80002cc:	2205      	movs	r2, #5
 80002ce:	494b      	ldr	r1, [pc, #300]	@ (80003fc <main+0x168>)
 80002d0:	4847      	ldr	r0, [pc, #284]	@ (80003f0 <main+0x15c>)
 80002d2:	f009 ff39 	bl	800a148 <USBD_RegisterClassComposite>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d001      	beq.n	80002e0 <main+0x4c>
  	Error_Handler();
 80002dc:	f000 fa6e 	bl	80007bc <Error_Handler>
    /* Register CDC Class First Instance */
  CDC_InstID = hUsbDeviceFS.classId;
 80002e0:	4b43      	ldr	r3, [pc, #268]	@ (80003f0 <main+0x15c>)
 80002e2:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80002e6:	b2da      	uxtb	r2, r3
 80002e8:	4b45      	ldr	r3, [pc, #276]	@ (8000400 <main+0x16c>)
 80002ea:	701a      	strb	r2, [r3, #0]
  if(USBD_RegisterClassComposite(&hUsbDeviceFS, USBD_CDC_CLASS, CLASS_TYPE_CDC, CDC_EpAdd_Inst) != USBD_OK)
 80002ec:	4b45      	ldr	r3, [pc, #276]	@ (8000404 <main+0x170>)
 80002ee:	2202      	movs	r2, #2
 80002f0:	4945      	ldr	r1, [pc, #276]	@ (8000408 <main+0x174>)
 80002f2:	483f      	ldr	r0, [pc, #252]	@ (80003f0 <main+0x15c>)
 80002f4:	f009 ff28 	bl	800a148 <USBD_RegisterClassComposite>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <main+0x6e>
  	Error_Handler();
 80002fe:	f000 fa5d 	bl	80007bc <Error_Handler>
/* Store Instance Class ID */
  if (USBD_CMPSIT_SetClassID(&hUsbDeviceFS, CLASS_TYPE_CHID, 0) != 0xFF)
 8000302:	2200      	movs	r2, #0
 8000304:	2105      	movs	r1, #5
 8000306:	483a      	ldr	r0, [pc, #232]	@ (80003f0 <main+0x15c>)
 8000308:	f009 f924 	bl	8009554 <USBD_CMPSIT_SetClassID>
 800030c:	4603      	mov	r3, r0
 800030e:	2bff      	cmp	r3, #255	@ 0xff
 8000310:	d003      	beq.n	800031a <main+0x86>
  {
    USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_template_fops);
 8000312:	493e      	ldr	r1, [pc, #248]	@ (800040c <main+0x178>)
 8000314:	4836      	ldr	r0, [pc, #216]	@ (80003f0 <main+0x15c>)
 8000316:	f009 fc6a 	bl	8009bee <USBD_CUSTOM_HID_RegisterInterface>
  }
  if (USBD_CMPSIT_SetClassID(&hUsbDeviceFS, CLASS_TYPE_CDC, 0) != 0xFF)
 800031a:	2200      	movs	r2, #0
 800031c:	2102      	movs	r1, #2
 800031e:	4834      	ldr	r0, [pc, #208]	@ (80003f0 <main+0x15c>)
 8000320:	f009 f918 	bl	8009554 <USBD_CMPSIT_SetClassID>
 8000324:	4603      	mov	r3, r0
 8000326:	2bff      	cmp	r3, #255	@ 0xff
 8000328:	d003      	beq.n	8000332 <main+0x9e>
  {
  	USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_CDC_Template_fops);
 800032a:	4939      	ldr	r1, [pc, #228]	@ (8000410 <main+0x17c>)
 800032c:	4830      	ldr	r0, [pc, #192]	@ (80003f0 <main+0x15c>)
 800032e:	f008 f94d 	bl	80085cc <USBD_CDC_RegisterInterface>
  }
  /* Add CHID Interface Class */
  USBD_Start(&hUsbDeviceFS);
 8000332:	482f      	ldr	r0, [pc, #188]	@ (80003f0 <main+0x15c>)
 8000334:	f009 ff70 	bl	800a218 <USBD_Start>

  FDCAN_Config(); // need to set up the FD CAN peripheral with our parameters.
 8000338:	f000 f9c4 	bl	80006c4 <FDCAN_Config>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  		USBD_CDC_TransmitPacket(&hUsbDeviceFS, CDC_InstID);
 800033c:	4b30      	ldr	r3, [pc, #192]	@ (8000400 <main+0x16c>)
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	4619      	mov	r1, r3
 8000342:	482b      	ldr	r0, [pc, #172]	@ (80003f0 <main+0x15c>)
 8000344:	f008 f99c 	bl	8008680 <USBD_CDC_TransmitPacket>
  		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000348:	2201      	movs	r2, #1
 800034a:	2101      	movs	r1, #1
 800034c:	4831      	ldr	r0, [pc, #196]	@ (8000414 <main+0x180>)
 800034e:	f001 fef7 	bl	8002140 <HAL_GPIO_WritePin>
  		if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &Tx_Header, txData) != HAL_OK) // not useful rn
 8000352:	4a31      	ldr	r2, [pc, #196]	@ (8000418 <main+0x184>)
 8000354:	4931      	ldr	r1, [pc, #196]	@ (800041c <main+0x188>)
 8000356:	4832      	ldr	r0, [pc, #200]	@ (8000420 <main+0x18c>)
 8000358:	f001 f901 	bl	800155e <HAL_FDCAN_AddMessageToTxFifoQ>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d001      	beq.n	8000366 <main+0xd2>
  		{
  			Error_Handler();
 8000362:	f000 fa2b 	bl	80007bc <Error_Handler>
  		}
  		HAL_Delay(50);
 8000366:	2032      	movs	r0, #50	@ 0x32
 8000368:	f000 fd38 	bl	8000ddc <HAL_Delay>

  	    sprintf(buffer, "%d %d %d %d\r\n", rxData[0], rxData[1], rxData[2], rxData[3]);
 800036c:	4b2d      	ldr	r3, [pc, #180]	@ (8000424 <main+0x190>)
 800036e:	781b      	ldrb	r3, [r3, #0]
 8000370:	4619      	mov	r1, r3
 8000372:	4b2c      	ldr	r3, [pc, #176]	@ (8000424 <main+0x190>)
 8000374:	785b      	ldrb	r3, [r3, #1]
 8000376:	4618      	mov	r0, r3
 8000378:	4b2a      	ldr	r3, [pc, #168]	@ (8000424 <main+0x190>)
 800037a:	789b      	ldrb	r3, [r3, #2]
 800037c:	461a      	mov	r2, r3
 800037e:	4b29      	ldr	r3, [pc, #164]	@ (8000424 <main+0x190>)
 8000380:	78db      	ldrb	r3, [r3, #3]
 8000382:	9301      	str	r3, [sp, #4]
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	4603      	mov	r3, r0
 8000388:	460a      	mov	r2, r1
 800038a:	4927      	ldr	r1, [pc, #156]	@ (8000428 <main+0x194>)
 800038c:	4827      	ldr	r0, [pc, #156]	@ (800042c <main+0x198>)
 800038e:	f00b fc3f 	bl	800bc10 <siprintf>
  	    	buttons[0] = ((rxData[0] > 75) + 2*(rxData[1] > 75) + 4*(rxData[2] > 75) + 8*(rxData[3] > 75));
 8000392:	4b24      	ldr	r3, [pc, #144]	@ (8000424 <main+0x190>)
 8000394:	781b      	ldrb	r3, [r3, #0]
 8000396:	2b4b      	cmp	r3, #75	@ 0x4b
 8000398:	bf8c      	ite	hi
 800039a:	2301      	movhi	r3, #1
 800039c:	2300      	movls	r3, #0
 800039e:	b2db      	uxtb	r3, r3
 80003a0:	461a      	mov	r2, r3
 80003a2:	4b20      	ldr	r3, [pc, #128]	@ (8000424 <main+0x190>)
 80003a4:	785b      	ldrb	r3, [r3, #1]
 80003a6:	2b4b      	cmp	r3, #75	@ 0x4b
 80003a8:	d901      	bls.n	80003ae <main+0x11a>
 80003aa:	2302      	movs	r3, #2
 80003ac:	e000      	b.n	80003b0 <main+0x11c>
 80003ae:	2300      	movs	r3, #0
 80003b0:	4413      	add	r3, r2
 80003b2:	b2db      	uxtb	r3, r3
 80003b4:	4a1b      	ldr	r2, [pc, #108]	@ (8000424 <main+0x190>)
 80003b6:	7892      	ldrb	r2, [r2, #2]
 80003b8:	2a4b      	cmp	r2, #75	@ 0x4b
 80003ba:	d901      	bls.n	80003c0 <main+0x12c>
 80003bc:	2204      	movs	r2, #4
 80003be:	e000      	b.n	80003c2 <main+0x12e>
 80003c0:	2200      	movs	r2, #0
 80003c2:	4413      	add	r3, r2
 80003c4:	b2db      	uxtb	r3, r3
 80003c6:	4a17      	ldr	r2, [pc, #92]	@ (8000424 <main+0x190>)
 80003c8:	78d2      	ldrb	r2, [r2, #3]
 80003ca:	2a4b      	cmp	r2, #75	@ 0x4b
 80003cc:	d901      	bls.n	80003d2 <main+0x13e>
 80003ce:	2208      	movs	r2, #8
 80003d0:	e000      	b.n	80003d4 <main+0x140>
 80003d2:	2200      	movs	r2, #0
 80003d4:	4413      	add	r3, r2
 80003d6:	b2da      	uxtb	r2, r3
 80003d8:	4b15      	ldr	r3, [pc, #84]	@ (8000430 <main+0x19c>)
 80003da:	701a      	strb	r2, [r3, #0]
  	    USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, buttons, sizeof(buttons), CHID_InstID);
 80003dc:	4b05      	ldr	r3, [pc, #20]	@ (80003f4 <main+0x160>)
 80003de:	781b      	ldrb	r3, [r3, #0]
 80003e0:	2202      	movs	r2, #2
 80003e2:	4913      	ldr	r1, [pc, #76]	@ (8000430 <main+0x19c>)
 80003e4:	4802      	ldr	r0, [pc, #8]	@ (80003f0 <main+0x15c>)
 80003e6:	f009 fb6f 	bl	8009ac8 <USBD_CUSTOM_HID_SendReport>
  		USBD_CDC_TransmitPacket(&hUsbDeviceFS, CDC_InstID);
 80003ea:	e7a7      	b.n	800033c <main+0xa8>
 80003ec:	20000128 	.word	0x20000128
 80003f0:	20000534 	.word	0x20000534
 80003f4:	20000874 	.word	0x20000874
 80003f8:	20000004 	.word	0x20000004
 80003fc:	200000b4 	.word	0x200000b4
 8000400:	20000875 	.word	0x20000875
 8000404:	20000000 	.word	0x20000000
 8000408:	20000014 	.word	0x20000014
 800040c:	20000118 	.word	0x20000118
 8000410:	20000050 	.word	0x20000050
 8000414:	42020000 	.word	0x42020000
 8000418:	200008cc 	.word	0x200008cc
 800041c:	200008a8 	.word	0x200008a8
 8000420:	200001f0 	.word	0x200001f0
 8000424:	200008a0 	.word	0x200008a0
 8000428:	0800cd14 	.word	0x0800cd14
 800042c:	200008d0 	.word	0x200008d0
 8000430:	200009d0 	.word	0x200009d0

08000434 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b09c      	sub	sp, #112	@ 0x70
 8000438:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800043a:	f107 0320 	add.w	r3, r7, #32
 800043e:	2250      	movs	r2, #80	@ 0x50
 8000440:	2100      	movs	r1, #0
 8000442:	4618      	mov	r0, r3
 8000444:	f00b fc47 	bl	800bcd6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000448:	f107 0308 	add.w	r3, r7, #8
 800044c:	2200      	movs	r2, #0
 800044e:	601a      	str	r2, [r3, #0]
 8000450:	605a      	str	r2, [r3, #4]
 8000452:	609a      	str	r2, [r3, #8]
 8000454:	60da      	str	r2, [r3, #12]
 8000456:	611a      	str	r2, [r3, #16]
 8000458:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800045a:	4b2f      	ldr	r3, [pc, #188]	@ (8000518 <SystemClock_Config+0xe4>)
 800045c:	691b      	ldr	r3, [r3, #16]
 800045e:	4a2e      	ldr	r2, [pc, #184]	@ (8000518 <SystemClock_Config+0xe4>)
 8000460:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000464:	6113      	str	r3, [r2, #16]
 8000466:	4b2c      	ldr	r3, [pc, #176]	@ (8000518 <SystemClock_Config+0xe4>)
 8000468:	691b      	ldr	r3, [r3, #16]
 800046a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800046e:	607b      	str	r3, [r7, #4]
 8000470:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000472:	bf00      	nop
 8000474:	4b28      	ldr	r3, [pc, #160]	@ (8000518 <SystemClock_Config+0xe4>)
 8000476:	695b      	ldr	r3, [r3, #20]
 8000478:	f003 0308 	and.w	r3, r3, #8
 800047c:	2b08      	cmp	r3, #8
 800047e:	d1f9      	bne.n	8000474 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_CSI;
 8000480:	2330      	movs	r3, #48	@ 0x30
 8000482:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000484:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000488:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 800048a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800048e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 8000490:	2320      	movs	r3, #32
 8000492:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000494:	2302      	movs	r3, #2
 8000496:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_CSI;
 8000498:	2302      	movs	r3, #2
 800049a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800049c:	2301      	movs	r3, #1
 800049e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 80004a0:	2378      	movs	r3, #120	@ 0x78
 80004a2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80004a4:	2302      	movs	r3, #2
 80004a6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80004a8:	2302      	movs	r3, #2
 80004aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80004ac:	2302      	movs	r3, #2
 80004ae:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_2;
 80004b0:	2308      	movs	r3, #8
 80004b2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 80004b4:	2300      	movs	r3, #0
 80004b6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80004b8:	2300      	movs	r3, #0
 80004ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004bc:	f107 0320 	add.w	r3, r7, #32
 80004c0:	4618      	mov	r0, r3
 80004c2:	f003 fb29 	bl	8003b18 <HAL_RCC_OscConfig>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d001      	beq.n	80004d0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80004cc:	f000 f976 	bl	80007bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004d0:	231f      	movs	r3, #31
 80004d2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004d4:	2303      	movs	r3, #3
 80004d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004d8:	2300      	movs	r3, #0
 80004da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004dc:	2300      	movs	r3, #0
 80004de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004e0:	2300      	movs	r3, #0
 80004e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80004e4:	2300      	movs	r3, #0
 80004e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80004e8:	f107 0308 	add.w	r3, r7, #8
 80004ec:	2105      	movs	r1, #5
 80004ee:	4618      	mov	r0, r3
 80004f0:	f003 ff4a 	bl	8004388 <HAL_RCC_ClockConfig>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d001      	beq.n	80004fe <SystemClock_Config+0xca>
  {
    Error_Handler();
 80004fa:	f000 f95f 	bl	80007bc <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 80004fe:	4b07      	ldr	r3, [pc, #28]	@ (800051c <SystemClock_Config+0xe8>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000506:	4a05      	ldr	r2, [pc, #20]	@ (800051c <SystemClock_Config+0xe8>)
 8000508:	f043 0320 	orr.w	r3, r3, #32
 800050c:	6013      	str	r3, [r2, #0]
}
 800050e:	bf00      	nop
 8000510:	3770      	adds	r7, #112	@ 0x70
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	44020800 	.word	0x44020800
 800051c:	40022000 	.word	0x40022000

08000520 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000524:	4b1f      	ldr	r3, [pc, #124]	@ (80005a4 <MX_FDCAN1_Init+0x84>)
 8000526:	4a20      	ldr	r2, [pc, #128]	@ (80005a8 <MX_FDCAN1_Init+0x88>)
 8000528:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800052a:	4b1e      	ldr	r3, [pc, #120]	@ (80005a4 <MX_FDCAN1_Init+0x84>)
 800052c:	2200      	movs	r2, #0
 800052e:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000530:	4b1c      	ldr	r3, [pc, #112]	@ (80005a4 <MX_FDCAN1_Init+0x84>)
 8000532:	2200      	movs	r2, #0
 8000534:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000536:	4b1b      	ldr	r3, [pc, #108]	@ (80005a4 <MX_FDCAN1_Init+0x84>)
 8000538:	2200      	movs	r2, #0
 800053a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800053c:	4b19      	ldr	r3, [pc, #100]	@ (80005a4 <MX_FDCAN1_Init+0x84>)
 800053e:	2200      	movs	r2, #0
 8000540:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000542:	4b18      	ldr	r3, [pc, #96]	@ (80005a4 <MX_FDCAN1_Init+0x84>)
 8000544:	2200      	movs	r2, #0
 8000546:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000548:	4b16      	ldr	r3, [pc, #88]	@ (80005a4 <MX_FDCAN1_Init+0x84>)
 800054a:	2200      	movs	r2, #0
 800054c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 15;
 800054e:	4b15      	ldr	r3, [pc, #84]	@ (80005a4 <MX_FDCAN1_Init+0x84>)
 8000550:	220f      	movs	r2, #15
 8000552:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 2;
 8000554:	4b13      	ldr	r3, [pc, #76]	@ (80005a4 <MX_FDCAN1_Init+0x84>)
 8000556:	2202      	movs	r2, #2
 8000558:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 800055a:	4b12      	ldr	r3, [pc, #72]	@ (80005a4 <MX_FDCAN1_Init+0x84>)
 800055c:	220d      	movs	r2, #13
 800055e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000560:	4b10      	ldr	r3, [pc, #64]	@ (80005a4 <MX_FDCAN1_Init+0x84>)
 8000562:	2202      	movs	r2, #2
 8000564:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 15;
 8000566:	4b0f      	ldr	r3, [pc, #60]	@ (80005a4 <MX_FDCAN1_Init+0x84>)
 8000568:	220f      	movs	r2, #15
 800056a:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 2;
 800056c:	4b0d      	ldr	r3, [pc, #52]	@ (80005a4 <MX_FDCAN1_Init+0x84>)
 800056e:	2202      	movs	r2, #2
 8000570:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 13;
 8000572:	4b0c      	ldr	r3, [pc, #48]	@ (80005a4 <MX_FDCAN1_Init+0x84>)
 8000574:	220d      	movs	r2, #13
 8000576:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 8000578:	4b0a      	ldr	r3, [pc, #40]	@ (80005a4 <MX_FDCAN1_Init+0x84>)
 800057a:	2202      	movs	r2, #2
 800057c:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 800057e:	4b09      	ldr	r3, [pc, #36]	@ (80005a4 <MX_FDCAN1_Init+0x84>)
 8000580:	2201      	movs	r2, #1
 8000582:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000584:	4b07      	ldr	r3, [pc, #28]	@ (80005a4 <MX_FDCAN1_Init+0x84>)
 8000586:	2200      	movs	r2, #0
 8000588:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800058a:	4b06      	ldr	r3, [pc, #24]	@ (80005a4 <MX_FDCAN1_Init+0x84>)
 800058c:	2200      	movs	r2, #0
 800058e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000590:	4804      	ldr	r0, [pc, #16]	@ (80005a4 <MX_FDCAN1_Init+0x84>)
 8000592:	f000 fdd7 	bl	8001144 <HAL_FDCAN_Init>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 800059c:	f000 f90e 	bl	80007bc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80005a0:	bf00      	nop
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	200001f0 	.word	0x200001f0
 80005a8:	4000a400 	.word	0x4000a400

080005ac <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
void MX_USB_PCD_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 80005b0:	4b15      	ldr	r3, [pc, #84]	@ (8000608 <MX_USB_PCD_Init+0x5c>)
 80005b2:	4a16      	ldr	r2, [pc, #88]	@ (800060c <MX_USB_PCD_Init+0x60>)
 80005b4:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 80005b6:	4b14      	ldr	r3, [pc, #80]	@ (8000608 <MX_USB_PCD_Init+0x5c>)
 80005b8:	2208      	movs	r2, #8
 80005ba:	711a      	strb	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 80005bc:	4b12      	ldr	r3, [pc, #72]	@ (8000608 <MX_USB_PCD_Init+0x5c>)
 80005be:	2202      	movs	r2, #2
 80005c0:	71da      	strb	r2, [r3, #7]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80005c2:	4b11      	ldr	r3, [pc, #68]	@ (8000608 <MX_USB_PCD_Init+0x5c>)
 80005c4:	2202      	movs	r2, #2
 80005c6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 80005c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000608 <MX_USB_PCD_Init+0x5c>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 80005ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000608 <MX_USB_PCD_Init+0x5c>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 80005d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000608 <MX_USB_PCD_Init+0x5c>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 80005da:	4b0b      	ldr	r3, [pc, #44]	@ (8000608 <MX_USB_PCD_Init+0x5c>)
 80005dc:	2200      	movs	r2, #0
 80005de:	735a      	strb	r2, [r3, #13]
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 80005e0:	4b09      	ldr	r3, [pc, #36]	@ (8000608 <MX_USB_PCD_Init+0x5c>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	739a      	strb	r2, [r3, #14]
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 80005e6:	4b08      	ldr	r3, [pc, #32]	@ (8000608 <MX_USB_PCD_Init+0x5c>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	73da      	strb	r2, [r3, #15]
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 80005ec:	4b06      	ldr	r3, [pc, #24]	@ (8000608 <MX_USB_PCD_Init+0x5c>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 80005f2:	4805      	ldr	r0, [pc, #20]	@ (8000608 <MX_USB_PCD_Init+0x5c>)
 80005f4:	f001 fe1f 	bl	8002236 <HAL_PCD_Init>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <MX_USB_PCD_Init+0x56>
  {
    Error_Handler();
 80005fe:	f000 f8dd 	bl	80007bc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000602:	bf00      	nop
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	20000254 	.word	0x20000254
 800060c:	40016000 	.word	0x40016000

08000610 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b088      	sub	sp, #32
 8000614:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000616:	f107 030c 	add.w	r3, r7, #12
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	605a      	str	r2, [r3, #4]
 8000620:	609a      	str	r2, [r3, #8]
 8000622:	60da      	str	r2, [r3, #12]
 8000624:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000626:	4b24      	ldr	r3, [pc, #144]	@ (80006b8 <MX_GPIO_Init+0xa8>)
 8000628:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800062c:	4a22      	ldr	r2, [pc, #136]	@ (80006b8 <MX_GPIO_Init+0xa8>)
 800062e:	f043 0301 	orr.w	r3, r3, #1
 8000632:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000636:	4b20      	ldr	r3, [pc, #128]	@ (80006b8 <MX_GPIO_Init+0xa8>)
 8000638:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800063c:	f003 0301 	and.w	r3, r3, #1
 8000640:	60bb      	str	r3, [r7, #8]
 8000642:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000644:	4b1c      	ldr	r3, [pc, #112]	@ (80006b8 <MX_GPIO_Init+0xa8>)
 8000646:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800064a:	4a1b      	ldr	r2, [pc, #108]	@ (80006b8 <MX_GPIO_Init+0xa8>)
 800064c:	f043 0302 	orr.w	r3, r3, #2
 8000650:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000654:	4b18      	ldr	r3, [pc, #96]	@ (80006b8 <MX_GPIO_Init+0xa8>)
 8000656:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800065a:	f003 0302 	and.w	r3, r3, #2
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000662:	2200      	movs	r2, #0
 8000664:	21ff      	movs	r1, #255	@ 0xff
 8000666:	4815      	ldr	r0, [pc, #84]	@ (80006bc <MX_GPIO_Init+0xac>)
 8000668:	f001 fd6a 	bl	8002140 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 800066c:	2200      	movs	r2, #0
 800066e:	210f      	movs	r1, #15
 8000670:	4813      	ldr	r0, [pc, #76]	@ (80006c0 <MX_GPIO_Init+0xb0>)
 8000672:	f001 fd65 	bl	8002140 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000676:	23ff      	movs	r3, #255	@ 0xff
 8000678:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067a:	2301      	movs	r3, #1
 800067c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067e:	2300      	movs	r3, #0
 8000680:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000682:	2300      	movs	r3, #0
 8000684:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000686:	f107 030c 	add.w	r3, r7, #12
 800068a:	4619      	mov	r1, r3
 800068c:	480b      	ldr	r0, [pc, #44]	@ (80006bc <MX_GPIO_Init+0xac>)
 800068e:	f001 fc05 	bl	8001e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000692:	230f      	movs	r3, #15
 8000694:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000696:	2301      	movs	r3, #1
 8000698:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069a:	2300      	movs	r3, #0
 800069c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069e:	2300      	movs	r3, #0
 80006a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a2:	f107 030c 	add.w	r3, r7, #12
 80006a6:	4619      	mov	r1, r3
 80006a8:	4805      	ldr	r0, [pc, #20]	@ (80006c0 <MX_GPIO_Init+0xb0>)
 80006aa:	f001 fbf7 	bl	8001e9c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006ae:	bf00      	nop
 80006b0:	3720      	adds	r7, #32
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	44020c00 	.word	0x44020c00
 80006bc:	42020000 	.word	0x42020000
 80006c0:	42020400 	.word	0x42020400

080006c4 <FDCAN_Config>:

/* USER CODE BEGIN 4 */
static void FDCAN_Config(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b088      	sub	sp, #32
 80006c8:	af02      	add	r7, sp, #8
	FDCAN_FilterTypeDef filter;

	filter.IdType = FDCAN_STANDARD_ID;
 80006ca:	2300      	movs	r3, #0
 80006cc:	603b      	str	r3, [r7, #0]
	filter.FilterIndex = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	607b      	str	r3, [r7, #4]
	filter.FilterType = FDCAN_FILTER_RANGE;
 80006d2:	2300      	movs	r3, #0
 80006d4:	60bb      	str	r3, [r7, #8]
	filter.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80006d6:	2301      	movs	r3, #1
 80006d8:	60fb      	str	r3, [r7, #12]
	filter.FilterID1 = 0x0;
 80006da:	2300      	movs	r3, #0
 80006dc:	613b      	str	r3, [r7, #16]
	filter.FilterID2 = 0x7FF;
 80006de:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80006e2:	617b      	str	r3, [r7, #20]

	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &filter) != HAL_OK)
 80006e4:	463b      	mov	r3, r7
 80006e6:	4619      	mov	r1, r3
 80006e8:	4823      	ldr	r0, [pc, #140]	@ (8000778 <FDCAN_Config+0xb4>)
 80006ea:	f000 fe85 	bl	80013f8 <HAL_FDCAN_ConfigFilter>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <FDCAN_Config+0x34>
	  {
	    Error_Handler();
 80006f4:	f000 f862 	bl	80007bc <Error_Handler>
	  }

	if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 80006f8:	2300      	movs	r3, #0
 80006fa:	9300      	str	r3, [sp, #0]
 80006fc:	2300      	movs	r3, #0
 80006fe:	2202      	movs	r2, #2
 8000700:	2102      	movs	r1, #2
 8000702:	481d      	ldr	r0, [pc, #116]	@ (8000778 <FDCAN_Config+0xb4>)
 8000704:	f000 fed2 	bl	80014ac <HAL_FDCAN_ConfigGlobalFilter>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <FDCAN_Config+0x4e>
	  {
	    Error_Handler();
 800070e:	f000 f855 	bl	80007bc <Error_Handler>
	  }

	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 8000712:	4819      	ldr	r0, [pc, #100]	@ (8000778 <FDCAN_Config+0xb4>)
 8000714:	f000 fefb 	bl	800150e <HAL_FDCAN_Start>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <FDCAN_Config+0x5e>
	  {
	    Error_Handler();
 800071e:	f000 f84d 	bl	80007bc <Error_Handler>
	  }

	  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000722:	2200      	movs	r2, #0
 8000724:	2101      	movs	r1, #1
 8000726:	4814      	ldr	r0, [pc, #80]	@ (8000778 <FDCAN_Config+0xb4>)
 8000728:	f001 f866 	bl	80017f8 <HAL_FDCAN_ActivateNotification>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <FDCAN_Config+0x72>
	  {
	    Error_Handler();
 8000732:	f000 f843 	bl	80007bc <Error_Handler>
	  }

	  Tx_Header.Identifier = 0x23D;
 8000736:	4b11      	ldr	r3, [pc, #68]	@ (800077c <FDCAN_Config+0xb8>)
 8000738:	f240 223d 	movw	r2, #573	@ 0x23d
 800073c:	601a      	str	r2, [r3, #0]
	  Tx_Header.IdType = FDCAN_STANDARD_ID;
 800073e:	4b0f      	ldr	r3, [pc, #60]	@ (800077c <FDCAN_Config+0xb8>)
 8000740:	2200      	movs	r2, #0
 8000742:	605a      	str	r2, [r3, #4]
	  Tx_Header.TxFrameType = FDCAN_DATA_FRAME;
 8000744:	4b0d      	ldr	r3, [pc, #52]	@ (800077c <FDCAN_Config+0xb8>)
 8000746:	2200      	movs	r2, #0
 8000748:	609a      	str	r2, [r3, #8]
	  Tx_Header.DataLength = FDCAN_DLC_BYTES_4;
 800074a:	4b0c      	ldr	r3, [pc, #48]	@ (800077c <FDCAN_Config+0xb8>)
 800074c:	2204      	movs	r2, #4
 800074e:	60da      	str	r2, [r3, #12]
	  Tx_Header.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000750:	4b0a      	ldr	r3, [pc, #40]	@ (800077c <FDCAN_Config+0xb8>)
 8000752:	2200      	movs	r2, #0
 8000754:	611a      	str	r2, [r3, #16]
	  Tx_Header.BitRateSwitch = FDCAN_BRS_OFF;
 8000756:	4b09      	ldr	r3, [pc, #36]	@ (800077c <FDCAN_Config+0xb8>)
 8000758:	2200      	movs	r2, #0
 800075a:	615a      	str	r2, [r3, #20]
	  Tx_Header.FDFormat = FDCAN_CLASSIC_CAN;
 800075c:	4b07      	ldr	r3, [pc, #28]	@ (800077c <FDCAN_Config+0xb8>)
 800075e:	2200      	movs	r2, #0
 8000760:	619a      	str	r2, [r3, #24]
	  Tx_Header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000762:	4b06      	ldr	r3, [pc, #24]	@ (800077c <FDCAN_Config+0xb8>)
 8000764:	2200      	movs	r2, #0
 8000766:	61da      	str	r2, [r3, #28]
	  Tx_Header.MessageMarker = 0;
 8000768:	4b04      	ldr	r3, [pc, #16]	@ (800077c <FDCAN_Config+0xb8>)
 800076a:	2200      	movs	r2, #0
 800076c:	621a      	str	r2, [r3, #32]
}
 800076e:	bf00      	nop
 8000770:	3718      	adds	r7, #24
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	200001f0 	.word	0x200001f0
 800077c:	200008a8 	.word	0x200008a8

08000780 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	6039      	str	r1, [r7, #0]
	if (RxFifo0ITs == FDCAN_IT_RX_FIFO0_NEW_MESSAGE) // we have a new message!
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	2b01      	cmp	r3, #1
 800078e:	d10a      	bne.n	80007a6 <HAL_FDCAN_RxFifo0Callback+0x26>
	{
		if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &Rx_Header, rxData) != HAL_OK)
 8000790:	4b07      	ldr	r3, [pc, #28]	@ (80007b0 <HAL_FDCAN_RxFifo0Callback+0x30>)
 8000792:	4a08      	ldr	r2, [pc, #32]	@ (80007b4 <HAL_FDCAN_RxFifo0Callback+0x34>)
 8000794:	2140      	movs	r1, #64	@ 0x40
 8000796:	4808      	ldr	r0, [pc, #32]	@ (80007b8 <HAL_FDCAN_RxFifo0Callback+0x38>)
 8000798:	f000 ff26 	bl	80015e8 <HAL_FDCAN_GetRxMessage>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <HAL_FDCAN_RxFifo0Callback+0x26>
		{
			Error_Handler();
 80007a2:	f000 f80b 	bl	80007bc <Error_Handler>
		}
	}
}
 80007a6:	bf00      	nop
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	200008a0 	.word	0x200008a0
 80007b4:	20000878 	.word	0x20000878
 80007b8:	200001f0 	.word	0x200001f0

080007bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c0:	b672      	cpsid	i
}
 80007c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c4:	bf00      	nop
 80007c6:	e7fd      	b.n	80007c4 <Error_Handler+0x8>

080007c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
	...

080007d8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b0be      	sub	sp, #248	@ 0xf8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]
 80007ec:	60da      	str	r2, [r3, #12]
 80007ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007f0:	f107 0310 	add.w	r3, r7, #16
 80007f4:	22d0      	movs	r2, #208	@ 0xd0
 80007f6:	2100      	movs	r1, #0
 80007f8:	4618      	mov	r0, r3
 80007fa:	f00b fa6c 	bl	800bcd6 <memset>
  if(hfdcan->Instance==FDCAN1)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4a2b      	ldr	r2, [pc, #172]	@ (80008b0 <HAL_FDCAN_MspInit+0xd8>)
 8000804:	4293      	cmp	r3, r2
 8000806:	d14f      	bne.n	80008a8 <HAL_FDCAN_MspInit+0xd0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000808:	f04f 0200 	mov.w	r2, #0
 800080c:	f04f 0304 	mov.w	r3, #4
 8000810:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL1Q;
 8000814:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000818:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800081c:	f107 0310 	add.w	r3, r7, #16
 8000820:	4618      	mov	r0, r3
 8000822:	f004 f8b1 	bl	8004988 <HAL_RCCEx_PeriphCLKConfig>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 800082c:	f7ff ffc6 	bl	80007bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000830:	4b20      	ldr	r3, [pc, #128]	@ (80008b4 <HAL_FDCAN_MspInit+0xdc>)
 8000832:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000836:	4a1f      	ldr	r2, [pc, #124]	@ (80008b4 <HAL_FDCAN_MspInit+0xdc>)
 8000838:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800083c:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 8000840:	4b1c      	ldr	r3, [pc, #112]	@ (80008b4 <HAL_FDCAN_MspInit+0xdc>)
 8000842:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000846:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800084e:	4b19      	ldr	r3, [pc, #100]	@ (80008b4 <HAL_FDCAN_MspInit+0xdc>)
 8000850:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000854:	4a17      	ldr	r2, [pc, #92]	@ (80008b4 <HAL_FDCAN_MspInit+0xdc>)
 8000856:	f043 0302 	orr.w	r3, r3, #2
 800085a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800085e:	4b15      	ldr	r3, [pc, #84]	@ (80008b4 <HAL_FDCAN_MspInit+0xdc>)
 8000860:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000864:	f003 0302 	and.w	r3, r3, #2
 8000868:	60bb      	str	r3, [r7, #8]
 800086a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB7     ------> FDCAN1_TX
    PB8     ------> FDCAN1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800086c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000870:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000874:	2302      	movs	r3, #2
 8000876:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000880:	2300      	movs	r3, #0
 8000882:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000886:	2309      	movs	r3, #9
 8000888:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800088c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000890:	4619      	mov	r1, r3
 8000892:	4809      	ldr	r0, [pc, #36]	@ (80008b8 <HAL_FDCAN_MspInit+0xe0>)
 8000894:	f001 fb02 	bl	8001e9c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000898:	2200      	movs	r2, #0
 800089a:	2100      	movs	r1, #0
 800089c:	2027      	movs	r0, #39	@ 0x27
 800089e:	f000 fb79 	bl	8000f94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80008a2:	2027      	movs	r0, #39	@ 0x27
 80008a4:	f000 fb90 	bl	8000fc8 <HAL_NVIC_EnableIRQ>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 80008a8:	bf00      	nop
 80008aa:	37f8      	adds	r7, #248	@ 0xf8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	4000a400 	.word	0x4000a400
 80008b4:	44020c00 	.word	0x44020c00
 80008b8:	42020400 	.word	0x42020400

080008bc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b0b8      	sub	sp, #224	@ 0xe0
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008c4:	f107 0310 	add.w	r3, r7, #16
 80008c8:	22d0      	movs	r2, #208	@ 0xd0
 80008ca:	2100      	movs	r1, #0
 80008cc:	4618      	mov	r0, r3
 80008ce:	f00b fa02 	bl	800bcd6 <memset>
  if(hpcd->Instance==USB_DRD_FS)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4a19      	ldr	r2, [pc, #100]	@ (800093c <HAL_PCD_MspInit+0x80>)
 80008d8:	4293      	cmp	r3, r2
 80008da:	d12b      	bne.n	8000934 <HAL_PCD_MspInit+0x78>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80008dc:	f04f 0200 	mov.w	r2, #0
 80008e0:	f04f 0310 	mov.w	r3, #16
 80008e4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80008e8:	2330      	movs	r3, #48	@ 0x30
 80008ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008ee:	f107 0310 	add.w	r3, r7, #16
 80008f2:	4618      	mov	r0, r3
 80008f4:	f004 f848 	bl	8004988 <HAL_RCCEx_PeriphCLKConfig>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <HAL_PCD_MspInit+0x46>
    {
      Error_Handler();
 80008fe:	f7ff ff5d 	bl	80007bc <Error_Handler>
    }

  /* Enable VDDUSB */
  HAL_PWREx_EnableVddUSB();
 8000902:	f003 f8f9 	bl	8003af8 <HAL_PWREx_EnableVddUSB>
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000906:	4b0e      	ldr	r3, [pc, #56]	@ (8000940 <HAL_PCD_MspInit+0x84>)
 8000908:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800090c:	4a0c      	ldr	r2, [pc, #48]	@ (8000940 <HAL_PCD_MspInit+0x84>)
 800090e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000912:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000916:	4b0a      	ldr	r3, [pc, #40]	@ (8000940 <HAL_PCD_MspInit+0x84>)
 8000918:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800091c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000920:	60fb      	str	r3, [r7, #12]
 8000922:	68fb      	ldr	r3, [r7, #12]
    /* USB_DRD_FS interrupt Init */
    HAL_NVIC_SetPriority(USB_DRD_FS_IRQn, 0, 0);
 8000924:	2200      	movs	r2, #0
 8000926:	2100      	movs	r1, #0
 8000928:	204a      	movs	r0, #74	@ 0x4a
 800092a:	f000 fb33 	bl	8000f94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_DRD_FS_IRQn);
 800092e:	204a      	movs	r0, #74	@ 0x4a
 8000930:	f000 fb4a 	bl	8000fc8 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_DRD_FS_MspInit 1 */

  }

}
 8000934:	bf00      	nop
 8000936:	37e0      	adds	r7, #224	@ 0xe0
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40016000 	.word	0x40016000
 8000940:	44020c00 	.word	0x44020c00

08000944 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000948:	bf00      	nop
 800094a:	e7fd      	b.n	8000948 <NMI_Handler+0x4>

0800094c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000950:	bf00      	nop
 8000952:	e7fd      	b.n	8000950 <HardFault_Handler+0x4>

08000954 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000958:	bf00      	nop
 800095a:	e7fd      	b.n	8000958 <MemManage_Handler+0x4>

0800095c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000960:	bf00      	nop
 8000962:	e7fd      	b.n	8000960 <BusFault_Handler+0x4>

08000964 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000968:	bf00      	nop
 800096a:	e7fd      	b.n	8000968 <UsageFault_Handler+0x4>

0800096c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr

0800097a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800097a:	b480      	push	{r7}
 800097c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800097e:	bf00      	nop
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr

08000988 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr

08000996 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000996:	b580      	push	{r7, lr}
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800099a:	f000 f9ff 	bl	8000d9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
	...

080009a4 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80009a8:	4802      	ldr	r0, [pc, #8]	@ (80009b4 <FDCAN1_IT0_IRQHandler+0x10>)
 80009aa:	f001 f80b 	bl	80019c4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	200001f0 	.word	0x200001f0

080009b8 <USB_DRD_FS_IRQHandler>:

/**
  * @brief This function handles USB FS global interrupt.
  */
void USB_DRD_FS_IRQHandler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DRD_FS_IRQn 0 */

  /* USER CODE END USB_DRD_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_DRD_FS);
 80009bc:	4802      	ldr	r0, [pc, #8]	@ (80009c8 <USB_DRD_FS_IRQHandler+0x10>)
 80009be:	f001 fd2d 	bl	800241c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_DRD_FS_IRQn 1 */

  /* USER CODE END USB_DRD_FS_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	20000254 	.word	0x20000254

080009cc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b086      	sub	sp, #24
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	60f8      	str	r0, [r7, #12]
 80009d4:	60b9      	str	r1, [r7, #8]
 80009d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009d8:	2300      	movs	r3, #0
 80009da:	617b      	str	r3, [r7, #20]
 80009dc:	e00a      	b.n	80009f4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009de:	f3af 8000 	nop.w
 80009e2:	4601      	mov	r1, r0
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	1c5a      	adds	r2, r3, #1
 80009e8:	60ba      	str	r2, [r7, #8]
 80009ea:	b2ca      	uxtb	r2, r1
 80009ec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	3301      	adds	r3, #1
 80009f2:	617b      	str	r3, [r7, #20]
 80009f4:	697a      	ldr	r2, [r7, #20]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	429a      	cmp	r2, r3
 80009fa:	dbf0      	blt.n	80009de <_read+0x12>
  }

  return len;
 80009fc:	687b      	ldr	r3, [r7, #4]
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3718      	adds	r7, #24
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}

08000a06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a06:	b580      	push	{r7, lr}
 8000a08:	b086      	sub	sp, #24
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	60f8      	str	r0, [r7, #12]
 8000a0e:	60b9      	str	r1, [r7, #8]
 8000a10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a12:	2300      	movs	r3, #0
 8000a14:	617b      	str	r3, [r7, #20]
 8000a16:	e009      	b.n	8000a2c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	1c5a      	adds	r2, r3, #1
 8000a1c:	60ba      	str	r2, [r7, #8]
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	4618      	mov	r0, r3
 8000a22:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	3301      	adds	r3, #1
 8000a2a:	617b      	str	r3, [r7, #20]
 8000a2c:	697a      	ldr	r2, [r7, #20]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	429a      	cmp	r2, r3
 8000a32:	dbf1      	blt.n	8000a18 <_write+0x12>
  }
  return len;
 8000a34:	687b      	ldr	r3, [r7, #4]
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3718      	adds	r7, #24
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <_close>:

int _close(int file)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	b083      	sub	sp, #12
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr

08000a56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a56:	b480      	push	{r7}
 8000a58:	b083      	sub	sp, #12
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
 8000a5e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a66:	605a      	str	r2, [r3, #4]
  return 0;
 8000a68:	2300      	movs	r3, #0
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr

08000a76 <_isatty>:

int _isatty(int file)
{
 8000a76:	b480      	push	{r7}
 8000a78:	b083      	sub	sp, #12
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a7e:	2301      	movs	r3, #1
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr

08000a8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b085      	sub	sp, #20
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	60f8      	str	r0, [r7, #12]
 8000a94:	60b9      	str	r1, [r7, #8]
 8000a96:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a98:	2300      	movs	r3, #0
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3714      	adds	r7, #20
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
	...

08000aa8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b086      	sub	sp, #24
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ab0:	4a14      	ldr	r2, [pc, #80]	@ (8000b04 <_sbrk+0x5c>)
 8000ab2:	4b15      	ldr	r3, [pc, #84]	@ (8000b08 <_sbrk+0x60>)
 8000ab4:	1ad3      	subs	r3, r2, r3
 8000ab6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000abc:	4b13      	ldr	r3, [pc, #76]	@ (8000b0c <_sbrk+0x64>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d102      	bne.n	8000aca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ac4:	4b11      	ldr	r3, [pc, #68]	@ (8000b0c <_sbrk+0x64>)
 8000ac6:	4a12      	ldr	r2, [pc, #72]	@ (8000b10 <_sbrk+0x68>)
 8000ac8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aca:	4b10      	ldr	r3, [pc, #64]	@ (8000b0c <_sbrk+0x64>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	693a      	ldr	r2, [r7, #16]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d207      	bcs.n	8000ae8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ad8:	f00b f94c 	bl	800bd74 <__errno>
 8000adc:	4603      	mov	r3, r0
 8000ade:	220c      	movs	r2, #12
 8000ae0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae6:	e009      	b.n	8000afc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ae8:	4b08      	ldr	r3, [pc, #32]	@ (8000b0c <_sbrk+0x64>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aee:	4b07      	ldr	r3, [pc, #28]	@ (8000b0c <_sbrk+0x64>)
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	4413      	add	r3, r2
 8000af6:	4a05      	ldr	r2, [pc, #20]	@ (8000b0c <_sbrk+0x64>)
 8000af8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000afa:	68fb      	ldr	r3, [r7, #12]
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	3718      	adds	r7, #24
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20044000 	.word	0x20044000
 8000b08:	00000700 	.word	0x00000700
 8000b0c:	200009d4 	.word	0x200009d4
 8000b10:	20000e20 	.word	0x20000e20

08000b14 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b1a:	4b35      	ldr	r3, [pc, #212]	@ (8000bf0 <SystemInit+0xdc>)
 8000b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b20:	4a33      	ldr	r2, [pc, #204]	@ (8000bf0 <SystemInit+0xdc>)
 8000b22:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b26:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8000b2a:	4b32      	ldr	r3, [pc, #200]	@ (8000bf4 <SystemInit+0xe0>)
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000b30:	4b30      	ldr	r3, [pc, #192]	@ (8000bf4 <SystemInit+0xe0>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000b36:	4b2f      	ldr	r3, [pc, #188]	@ (8000bf4 <SystemInit+0xe0>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8000b3c:	4b2d      	ldr	r3, [pc, #180]	@ (8000bf4 <SystemInit+0xe0>)
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	492c      	ldr	r1, [pc, #176]	@ (8000bf4 <SystemInit+0xe0>)
 8000b42:	4b2d      	ldr	r3, [pc, #180]	@ (8000bf8 <SystemInit+0xe4>)
 8000b44:	4013      	ands	r3, r2
 8000b46:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8000b48:	4b2a      	ldr	r3, [pc, #168]	@ (8000bf4 <SystemInit+0xe0>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8000b4e:	4b29      	ldr	r3, [pc, #164]	@ (8000bf4 <SystemInit+0xe0>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8000b54:	4b27      	ldr	r3, [pc, #156]	@ (8000bf4 <SystemInit+0xe0>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8000b5a:	4b26      	ldr	r3, [pc, #152]	@ (8000bf4 <SystemInit+0xe0>)
 8000b5c:	4a27      	ldr	r2, [pc, #156]	@ (8000bfc <SystemInit+0xe8>)
 8000b5e:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8000b60:	4b24      	ldr	r3, [pc, #144]	@ (8000bf4 <SystemInit+0xe0>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8000b66:	4b23      	ldr	r3, [pc, #140]	@ (8000bf4 <SystemInit+0xe0>)
 8000b68:	4a24      	ldr	r2, [pc, #144]	@ (8000bfc <SystemInit+0xe8>)
 8000b6a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8000b6c:	4b21      	ldr	r3, [pc, #132]	@ (8000bf4 <SystemInit+0xe0>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8000b72:	4b20      	ldr	r3, [pc, #128]	@ (8000bf4 <SystemInit+0xe0>)
 8000b74:	4a21      	ldr	r2, [pc, #132]	@ (8000bfc <SystemInit+0xe8>)
 8000b76:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8000b78:	4b1e      	ldr	r3, [pc, #120]	@ (8000bf4 <SystemInit+0xe0>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000b7e:	4b1d      	ldr	r3, [pc, #116]	@ (8000bf4 <SystemInit+0xe0>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4a1c      	ldr	r2, [pc, #112]	@ (8000bf4 <SystemInit+0xe0>)
 8000b84:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b88:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000b8a:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf4 <SystemInit+0xe0>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b90:	4b17      	ldr	r3, [pc, #92]	@ (8000bf0 <SystemInit+0xdc>)
 8000b92:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000b96:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8000b98:	4b19      	ldr	r3, [pc, #100]	@ (8000c00 <SystemInit+0xec>)
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8000ba0:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8000ba8:	d003      	beq.n	8000bb2 <SystemInit+0x9e>
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8000bb0:	d117      	bne.n	8000be2 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8000bb2:	4b13      	ldr	r3, [pc, #76]	@ (8000c00 <SystemInit+0xec>)
 8000bb4:	69db      	ldr	r3, [r3, #28]
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d005      	beq.n	8000bca <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8000bbe:	4b10      	ldr	r3, [pc, #64]	@ (8000c00 <SystemInit+0xec>)
 8000bc0:	4a10      	ldr	r2, [pc, #64]	@ (8000c04 <SystemInit+0xf0>)
 8000bc2:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8000bc4:	4b0e      	ldr	r3, [pc, #56]	@ (8000c00 <SystemInit+0xec>)
 8000bc6:	4a10      	ldr	r2, [pc, #64]	@ (8000c08 <SystemInit+0xf4>)
 8000bc8:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8000bca:	4b0d      	ldr	r3, [pc, #52]	@ (8000c00 <SystemInit+0xec>)
 8000bcc:	69db      	ldr	r3, [r3, #28]
 8000bce:	4a0c      	ldr	r2, [pc, #48]	@ (8000c00 <SystemInit+0xec>)
 8000bd0:	f043 0302 	orr.w	r3, r3, #2
 8000bd4:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8000bd6:	4b0a      	ldr	r3, [pc, #40]	@ (8000c00 <SystemInit+0xec>)
 8000bd8:	69db      	ldr	r3, [r3, #28]
 8000bda:	4a09      	ldr	r2, [pc, #36]	@ (8000c00 <SystemInit+0xec>)
 8000bdc:	f043 0301 	orr.w	r3, r3, #1
 8000be0:	61d3      	str	r3, [r2, #28]
  }
}
 8000be2:	bf00      	nop
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	e000ed00 	.word	0xe000ed00
 8000bf4:	44020c00 	.word	0x44020c00
 8000bf8:	eae2eae3 	.word	0xeae2eae3
 8000bfc:	01010280 	.word	0x01010280
 8000c00:	40022000 	.word	0x40022000
 8000c04:	08192a3b 	.word	0x08192a3b
 8000c08:	4c5d6e7f 	.word	0x4c5d6e7f

08000c0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c0c:	480d      	ldr	r0, [pc, #52]	@ (8000c44 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c0e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c10:	f7ff ff80 	bl	8000b14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c14:	480c      	ldr	r0, [pc, #48]	@ (8000c48 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c16:	490d      	ldr	r1, [pc, #52]	@ (8000c4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c18:	4a0d      	ldr	r2, [pc, #52]	@ (8000c50 <LoopForever+0xe>)
  movs r3, #0
 8000c1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c1c:	e002      	b.n	8000c24 <LoopCopyDataInit>

08000c1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c22:	3304      	adds	r3, #4

08000c24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c28:	d3f9      	bcc.n	8000c1e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c2c:	4c0a      	ldr	r4, [pc, #40]	@ (8000c58 <LoopForever+0x16>)
  movs r3, #0
 8000c2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c30:	e001      	b.n	8000c36 <LoopFillZerobss>

08000c32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c34:	3204      	adds	r2, #4

08000c36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c38:	d3fb      	bcc.n	8000c32 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c3a:	f00b f8a1 	bl	800bd80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c3e:	f7ff fb29 	bl	8000294 <main>

08000c42 <LoopForever>:

LoopForever:
    b LoopForever
 8000c42:	e7fe      	b.n	8000c42 <LoopForever>
  ldr   r0, =_estack
 8000c44:	20044000 	.word	0x20044000
  ldr r0, =_sdata
 8000c48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c4c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8000c50:	0800ce38 	.word	0x0800ce38
  ldr r2, =_sbss
 8000c54:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8000c58:	20000e1c 	.word	0x20000e1c

08000c5c <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c5c:	e7fe      	b.n	8000c5c <ADC1_IRQHandler>
	...

08000c60 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c64:	2003      	movs	r0, #3
 8000c66:	f000 f98a 	bl	8000f7e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000c6a:	f003 fd45 	bl	80046f8 <HAL_RCC_GetSysClockFreq>
 8000c6e:	4602      	mov	r2, r0
 8000c70:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca4 <HAL_Init+0x44>)
 8000c72:	6a1b      	ldr	r3, [r3, #32]
 8000c74:	f003 030f 	and.w	r3, r3, #15
 8000c78:	490b      	ldr	r1, [pc, #44]	@ (8000ca8 <HAL_Init+0x48>)
 8000c7a:	5ccb      	ldrb	r3, [r1, r3]
 8000c7c:	fa22 f303 	lsr.w	r3, r2, r3
 8000c80:	4a0a      	ldr	r2, [pc, #40]	@ (8000cac <HAL_Init+0x4c>)
 8000c82:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000c84:	2004      	movs	r0, #4
 8000c86:	f000 f9cf 	bl	8001028 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c8a:	200f      	movs	r0, #15
 8000c8c:	f000 f810 	bl	8000cb0 <HAL_InitTick>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8000c96:	2301      	movs	r3, #1
 8000c98:	e002      	b.n	8000ca0 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000c9a:	f7ff fd95 	bl	80007c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c9e:	2300      	movs	r3, #0
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	44020c00 	.word	0x44020c00
 8000ca8:	0800cddc 	.word	0x0800cddc
 8000cac:	20000008 	.word	0x20000008

08000cb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000cbc:	4b33      	ldr	r3, [pc, #204]	@ (8000d8c <HAL_InitTick+0xdc>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d101      	bne.n	8000cc8 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	e05c      	b.n	8000d82 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8000cc8:	4b31      	ldr	r3, [pc, #196]	@ (8000d90 <HAL_InitTick+0xe0>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f003 0304 	and.w	r3, r3, #4
 8000cd0:	2b04      	cmp	r3, #4
 8000cd2:	d10c      	bne.n	8000cee <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8000cd4:	4b2f      	ldr	r3, [pc, #188]	@ (8000d94 <HAL_InitTick+0xe4>)
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	4b2c      	ldr	r3, [pc, #176]	@ (8000d8c <HAL_InitTick+0xdc>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	4619      	mov	r1, r3
 8000cde:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ce2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	e037      	b.n	8000d5e <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8000cee:	f000 f9f3 	bl	80010d8 <HAL_SYSTICK_GetCLKSourceConfig>
 8000cf2:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	2b02      	cmp	r3, #2
 8000cf8:	d023      	beq.n	8000d42 <HAL_InitTick+0x92>
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	2b02      	cmp	r3, #2
 8000cfe:	d82d      	bhi.n	8000d5c <HAL_InitTick+0xac>
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d003      	beq.n	8000d0e <HAL_InitTick+0x5e>
 8000d06:	68bb      	ldr	r3, [r7, #8]
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d00d      	beq.n	8000d28 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8000d0c:	e026      	b.n	8000d5c <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8000d0e:	4b21      	ldr	r3, [pc, #132]	@ (8000d94 <HAL_InitTick+0xe4>)
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	4b1e      	ldr	r3, [pc, #120]	@ (8000d8c <HAL_InitTick+0xdc>)
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	4619      	mov	r1, r3
 8000d18:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8000d1c:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d24:	60fb      	str	r3, [r7, #12]
        break;
 8000d26:	e01a      	b.n	8000d5e <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000d28:	4b18      	ldr	r3, [pc, #96]	@ (8000d8c <HAL_InitTick+0xdc>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d32:	fbb3 f3f2 	udiv	r3, r3, r2
 8000d36:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d3e:	60fb      	str	r3, [r7, #12]
        break;
 8000d40:	e00d      	b.n	8000d5e <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000d42:	4b12      	ldr	r3, [pc, #72]	@ (8000d8c <HAL_InitTick+0xdc>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	461a      	mov	r2, r3
 8000d48:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8000d50:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d58:	60fb      	str	r3, [r7, #12]
        break;
 8000d5a:	e000      	b.n	8000d5e <HAL_InitTick+0xae>
        break;
 8000d5c:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8000d5e:	68f8      	ldr	r0, [r7, #12]
 8000d60:	f000 f940 	bl	8000fe4 <HAL_SYSTICK_Config>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e009      	b.n	8000d82 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	6879      	ldr	r1, [r7, #4]
 8000d72:	f04f 30ff 	mov.w	r0, #4294967295
 8000d76:	f000 f90d 	bl	8000f94 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8000d7a:	4a07      	ldr	r2, [pc, #28]	@ (8000d98 <HAL_InitTick+0xe8>)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000d80:	2300      	movs	r3, #0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3710      	adds	r7, #16
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20000010 	.word	0x20000010
 8000d90:	e000e010 	.word	0xe000e010
 8000d94:	20000008 	.word	0x20000008
 8000d98:	2000000c 	.word	0x2000000c

08000d9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000da0:	4b06      	ldr	r3, [pc, #24]	@ (8000dbc <HAL_IncTick+0x20>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	461a      	mov	r2, r3
 8000da6:	4b06      	ldr	r3, [pc, #24]	@ (8000dc0 <HAL_IncTick+0x24>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4413      	add	r3, r2
 8000dac:	4a04      	ldr	r2, [pc, #16]	@ (8000dc0 <HAL_IncTick+0x24>)
 8000dae:	6013      	str	r3, [r2, #0]
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	20000010 	.word	0x20000010
 8000dc0:	200009d8 	.word	0x200009d8

08000dc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc8:	4b03      	ldr	r3, [pc, #12]	@ (8000dd8 <HAL_GetTick+0x14>)
 8000dca:	681b      	ldr	r3, [r3, #0]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	200009d8 	.word	0x200009d8

08000ddc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000de4:	f7ff ffee 	bl	8000dc4 <HAL_GetTick>
 8000de8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000df4:	d005      	beq.n	8000e02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000df6:	4b0a      	ldr	r3, [pc, #40]	@ (8000e20 <HAL_Delay+0x44>)
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	4413      	add	r3, r2
 8000e00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e02:	bf00      	nop
 8000e04:	f7ff ffde 	bl	8000dc4 <HAL_GetTick>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	68fa      	ldr	r2, [r7, #12]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d8f7      	bhi.n	8000e04 <HAL_Delay+0x28>
  {
  }
}
 8000e14:	bf00      	nop
 8000e16:	bf00      	nop
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	20000010 	.word	0x20000010

08000e24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b085      	sub	sp, #20
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f003 0307 	and.w	r3, r3, #7
 8000e32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e34:	4b0c      	ldr	r3, [pc, #48]	@ (8000e68 <__NVIC_SetPriorityGrouping+0x44>)
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e3a:	68ba      	ldr	r2, [r7, #8]
 8000e3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e40:	4013      	ands	r3, r2
 8000e42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e4c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e56:	4a04      	ldr	r2, [pc, #16]	@ (8000e68 <__NVIC_SetPriorityGrouping+0x44>)
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	60d3      	str	r3, [r2, #12]
}
 8000e5c:	bf00      	nop
 8000e5e:	3714      	adds	r7, #20
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e70:	4b04      	ldr	r3, [pc, #16]	@ (8000e84 <__NVIC_GetPriorityGrouping+0x18>)
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	0a1b      	lsrs	r3, r3, #8
 8000e76:	f003 0307 	and.w	r3, r3, #7
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000e92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	db0b      	blt.n	8000eb2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e9a:	88fb      	ldrh	r3, [r7, #6]
 8000e9c:	f003 021f 	and.w	r2, r3, #31
 8000ea0:	4907      	ldr	r1, [pc, #28]	@ (8000ec0 <__NVIC_EnableIRQ+0x38>)
 8000ea2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ea6:	095b      	lsrs	r3, r3, #5
 8000ea8:	2001      	movs	r0, #1
 8000eaa:	fa00 f202 	lsl.w	r2, r0, r2
 8000eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000eb2:	bf00      	nop
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	e000e100 	.word	0xe000e100

08000ec4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	6039      	str	r1, [r7, #0]
 8000ece:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000ed0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	db0a      	blt.n	8000eee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	b2da      	uxtb	r2, r3
 8000edc:	490c      	ldr	r1, [pc, #48]	@ (8000f10 <__NVIC_SetPriority+0x4c>)
 8000ede:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ee2:	0112      	lsls	r2, r2, #4
 8000ee4:	b2d2      	uxtb	r2, r2
 8000ee6:	440b      	add	r3, r1
 8000ee8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eec:	e00a      	b.n	8000f04 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	b2da      	uxtb	r2, r3
 8000ef2:	4908      	ldr	r1, [pc, #32]	@ (8000f14 <__NVIC_SetPriority+0x50>)
 8000ef4:	88fb      	ldrh	r3, [r7, #6]
 8000ef6:	f003 030f 	and.w	r3, r3, #15
 8000efa:	3b04      	subs	r3, #4
 8000efc:	0112      	lsls	r2, r2, #4
 8000efe:	b2d2      	uxtb	r2, r2
 8000f00:	440b      	add	r3, r1
 8000f02:	761a      	strb	r2, [r3, #24]
}
 8000f04:	bf00      	nop
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	e000e100 	.word	0xe000e100
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b089      	sub	sp, #36	@ 0x24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	f003 0307 	and.w	r3, r3, #7
 8000f2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	f1c3 0307 	rsb	r3, r3, #7
 8000f32:	2b04      	cmp	r3, #4
 8000f34:	bf28      	it	cs
 8000f36:	2304      	movcs	r3, #4
 8000f38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	3304      	adds	r3, #4
 8000f3e:	2b06      	cmp	r3, #6
 8000f40:	d902      	bls.n	8000f48 <NVIC_EncodePriority+0x30>
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	3b03      	subs	r3, #3
 8000f46:	e000      	b.n	8000f4a <NVIC_EncodePriority+0x32>
 8000f48:	2300      	movs	r3, #0
 8000f4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f50:	69bb      	ldr	r3, [r7, #24]
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	43da      	mvns	r2, r3
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	401a      	ands	r2, r3
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f60:	f04f 31ff 	mov.w	r1, #4294967295
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6a:	43d9      	mvns	r1, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f70:	4313      	orrs	r3, r2
         );
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3724      	adds	r7, #36	@ 0x24
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b082      	sub	sp, #8
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f7ff ff4c 	bl	8000e24 <__NVIC_SetPriorityGrouping>
}
 8000f8c:	bf00      	nop
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	60b9      	str	r1, [r7, #8]
 8000f9e:	607a      	str	r2, [r7, #4]
 8000fa0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fa2:	f7ff ff63 	bl	8000e6c <__NVIC_GetPriorityGrouping>
 8000fa6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fa8:	687a      	ldr	r2, [r7, #4]
 8000faa:	68b9      	ldr	r1, [r7, #8]
 8000fac:	6978      	ldr	r0, [r7, #20]
 8000fae:	f7ff ffb3 	bl	8000f18 <NVIC_EncodePriority>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000fb8:	4611      	mov	r1, r2
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f7ff ff82 	bl	8000ec4 <__NVIC_SetPriority>
}
 8000fc0:	bf00      	nop
 8000fc2:	3718      	adds	r7, #24
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff ff56 	bl	8000e88 <__NVIC_EnableIRQ>
}
 8000fdc:	bf00      	nop
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ff4:	d301      	bcc.n	8000ffa <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e00d      	b.n	8001016 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8000ffa:	4a0a      	ldr	r2, [pc, #40]	@ (8001024 <HAL_SYSTICK_Config+0x40>)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3b01      	subs	r3, #1
 8001000:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8001002:	4b08      	ldr	r3, [pc, #32]	@ (8001024 <HAL_SYSTICK_Config+0x40>)
 8001004:	2200      	movs	r2, #0
 8001006:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8001008:	4b06      	ldr	r3, [pc, #24]	@ (8001024 <HAL_SYSTICK_Config+0x40>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a05      	ldr	r2, [pc, #20]	@ (8001024 <HAL_SYSTICK_Config+0x40>)
 800100e:	f043 0303 	orr.w	r3, r3, #3
 8001012:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8001014:	2300      	movs	r3, #0
}
 8001016:	4618      	mov	r0, r3
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	e000e010 	.word	0xe000e010

08001028 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2b04      	cmp	r3, #4
 8001034:	d844      	bhi.n	80010c0 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001036:	a201      	add	r2, pc, #4	@ (adr r2, 800103c <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800103c:	0800105f 	.word	0x0800105f
 8001040:	0800107d 	.word	0x0800107d
 8001044:	0800109f 	.word	0x0800109f
 8001048:	080010c1 	.word	0x080010c1
 800104c:	08001051 	.word	0x08001051
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001050:	4b1f      	ldr	r3, [pc, #124]	@ (80010d0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a1e      	ldr	r2, [pc, #120]	@ (80010d0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001056:	f043 0304 	orr.w	r3, r3, #4
 800105a:	6013      	str	r3, [r2, #0]
      break;
 800105c:	e031      	b.n	80010c2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800105e:	4b1c      	ldr	r3, [pc, #112]	@ (80010d0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a1b      	ldr	r2, [pc, #108]	@ (80010d0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001064:	f023 0304 	bic.w	r3, r3, #4
 8001068:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 800106a:	4b1a      	ldr	r3, [pc, #104]	@ (80010d4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800106c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001070:	4a18      	ldr	r2, [pc, #96]	@ (80010d4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001072:	f023 030c 	bic.w	r3, r3, #12
 8001076:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800107a:	e022      	b.n	80010c2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800107c:	4b14      	ldr	r3, [pc, #80]	@ (80010d0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a13      	ldr	r2, [pc, #76]	@ (80010d0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001082:	f023 0304 	bic.w	r3, r3, #4
 8001086:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8001088:	4b12      	ldr	r3, [pc, #72]	@ (80010d4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800108a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800108e:	f023 030c 	bic.w	r3, r3, #12
 8001092:	4a10      	ldr	r2, [pc, #64]	@ (80010d4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001094:	f043 0304 	orr.w	r3, r3, #4
 8001098:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800109c:	e011      	b.n	80010c2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800109e:	4b0c      	ldr	r3, [pc, #48]	@ (80010d0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a0b      	ldr	r2, [pc, #44]	@ (80010d0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80010a4:	f023 0304 	bic.w	r3, r3, #4
 80010a8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 80010aa:	4b0a      	ldr	r3, [pc, #40]	@ (80010d4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80010ac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80010b0:	f023 030c 	bic.w	r3, r3, #12
 80010b4:	4a07      	ldr	r2, [pc, #28]	@ (80010d4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80010b6:	f043 0308 	orr.w	r3, r3, #8
 80010ba:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80010be:	e000      	b.n	80010c2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80010c0:	bf00      	nop
  }
}
 80010c2:	bf00      	nop
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	e000e010 	.word	0xe000e010
 80010d4:	44020c00 	.word	0x44020c00

080010d8 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80010de:	4b17      	ldr	r3, [pc, #92]	@ (800113c <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f003 0304 	and.w	r3, r3, #4
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d002      	beq.n	80010f0 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 80010ea:	2304      	movs	r3, #4
 80010ec:	607b      	str	r3, [r7, #4]
 80010ee:	e01e      	b.n	800112e <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 80010f0:	4b13      	ldr	r3, [pc, #76]	@ (8001140 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 80010f2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80010f6:	f003 030c 	and.w	r3, r3, #12
 80010fa:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	2b08      	cmp	r3, #8
 8001100:	d00f      	beq.n	8001122 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	2b08      	cmp	r3, #8
 8001106:	d80f      	bhi.n	8001128 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d003      	beq.n	8001116 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	2b04      	cmp	r3, #4
 8001112:	d003      	beq.n	800111c <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8001114:	e008      	b.n	8001128 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001116:	2300      	movs	r3, #0
 8001118:	607b      	str	r3, [r7, #4]
        break;
 800111a:	e008      	b.n	800112e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 800111c:	2301      	movs	r3, #1
 800111e:	607b      	str	r3, [r7, #4]
        break;
 8001120:	e005      	b.n	800112e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8001122:	2302      	movs	r3, #2
 8001124:	607b      	str	r3, [r7, #4]
        break;
 8001126:	e002      	b.n	800112e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001128:	2300      	movs	r3, #0
 800112a:	607b      	str	r3, [r7, #4]
        break;
 800112c:	bf00      	nop
    }
  }
  return systick_source;
 800112e:	687b      	ldr	r3, [r7, #4]
}
 8001130:	4618      	mov	r0, r3
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	e000e010 	.word	0xe000e010
 8001140:	44020c00 	.word	0x44020c00

08001144 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d101      	bne.n	8001156 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	e147      	b.n	80013e6 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800115c:	b2db      	uxtb	r3, r3
 800115e:	2b00      	cmp	r3, #0
 8001160:	d106      	bne.n	8001170 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2200      	movs	r2, #0
 8001166:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f7ff fb34 	bl	80007d8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	699a      	ldr	r2, [r3, #24]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f022 0210 	bic.w	r2, r2, #16
 800117e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001180:	f7ff fe20 	bl	8000dc4 <HAL_GetTick>
 8001184:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001186:	e012      	b.n	80011ae <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001188:	f7ff fe1c 	bl	8000dc4 <HAL_GetTick>
 800118c:	4602      	mov	r2, r0
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	2b0a      	cmp	r3, #10
 8001194:	d90b      	bls.n	80011ae <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800119a:	f043 0201 	orr.w	r2, r3, #1
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2203      	movs	r2, #3
 80011a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e11b      	b.n	80013e6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	f003 0308 	and.w	r3, r3, #8
 80011b8:	2b08      	cmp	r3, #8
 80011ba:	d0e5      	beq.n	8001188 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	699a      	ldr	r2, [r3, #24]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f042 0201 	orr.w	r2, r2, #1
 80011ca:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011cc:	f7ff fdfa 	bl	8000dc4 <HAL_GetTick>
 80011d0:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80011d2:	e012      	b.n	80011fa <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80011d4:	f7ff fdf6 	bl	8000dc4 <HAL_GetTick>
 80011d8:	4602      	mov	r2, r0
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	2b0a      	cmp	r3, #10
 80011e0:	d90b      	bls.n	80011fa <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011e6:	f043 0201 	orr.w	r2, r3, #1
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2203      	movs	r2, #3
 80011f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e0f5      	b.n	80013e6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	699b      	ldr	r3, [r3, #24]
 8001200:	f003 0301 	and.w	r3, r3, #1
 8001204:	2b00      	cmp	r3, #0
 8001206:	d0e5      	beq.n	80011d4 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	699a      	ldr	r2, [r3, #24]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f042 0202 	orr.w	r2, r2, #2
 8001216:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a74      	ldr	r2, [pc, #464]	@ (80013f0 <HAL_FDCAN_Init+0x2ac>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d103      	bne.n	800122a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8001222:	4a74      	ldr	r2, [pc, #464]	@ (80013f4 <HAL_FDCAN_Init+0x2b0>)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	7c1b      	ldrb	r3, [r3, #16]
 800122e:	2b01      	cmp	r3, #1
 8001230:	d108      	bne.n	8001244 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	699a      	ldr	r2, [r3, #24]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001240:	619a      	str	r2, [r3, #24]
 8001242:	e007      	b.n	8001254 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	699a      	ldr	r2, [r3, #24]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001252:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	7c5b      	ldrb	r3, [r3, #17]
 8001258:	2b01      	cmp	r3, #1
 800125a:	d108      	bne.n	800126e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	699a      	ldr	r2, [r3, #24]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800126a:	619a      	str	r2, [r3, #24]
 800126c:	e007      	b.n	800127e <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	699a      	ldr	r2, [r3, #24]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800127c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	7c9b      	ldrb	r3, [r3, #18]
 8001282:	2b01      	cmp	r3, #1
 8001284:	d108      	bne.n	8001298 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	699a      	ldr	r2, [r3, #24]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001294:	619a      	str	r2, [r3, #24]
 8001296:	e007      	b.n	80012a8 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	699a      	ldr	r2, [r3, #24]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80012a6:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	699b      	ldr	r3, [r3, #24]
 80012ae:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	689a      	ldr	r2, [r3, #8]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	430a      	orrs	r2, r1
 80012bc:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	699a      	ldr	r2, [r3, #24]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80012cc:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	691a      	ldr	r2, [r3, #16]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f022 0210 	bic.w	r2, r2, #16
 80012dc:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	68db      	ldr	r3, [r3, #12]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d108      	bne.n	80012f8 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	699a      	ldr	r2, [r3, #24]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f042 0204 	orr.w	r2, r2, #4
 80012f4:	619a      	str	r2, [r3, #24]
 80012f6:	e02c      	b.n	8001352 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d028      	beq.n	8001352 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	2b02      	cmp	r3, #2
 8001306:	d01c      	beq.n	8001342 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	699a      	ldr	r2, [r3, #24]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001316:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	691a      	ldr	r2, [r3, #16]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f042 0210 	orr.w	r2, r2, #16
 8001326:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	2b03      	cmp	r3, #3
 800132e:	d110      	bne.n	8001352 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	699a      	ldr	r2, [r3, #24]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f042 0220 	orr.w	r2, r2, #32
 800133e:	619a      	str	r2, [r3, #24]
 8001340:	e007      	b.n	8001352 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	699a      	ldr	r2, [r3, #24]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f042 0220 	orr.w	r2, r2, #32
 8001350:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	699b      	ldr	r3, [r3, #24]
 8001356:	3b01      	subs	r3, #1
 8001358:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	69db      	ldr	r3, [r3, #28]
 800135e:	3b01      	subs	r3, #1
 8001360:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001362:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6a1b      	ldr	r3, [r3, #32]
 8001368:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800136a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	695b      	ldr	r3, [r3, #20]
 8001372:	3b01      	subs	r3, #1
 8001374:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800137a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800137c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001386:	d115      	bne.n	80013b4 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800138c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001392:	3b01      	subs	r3, #1
 8001394:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001396:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139c:	3b01      	subs	r3, #1
 800139e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80013a0:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013a8:	3b01      	subs	r3, #1
 80013aa:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80013b0:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80013b2:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	430a      	orrs	r2, r1
 80013c6:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f000 fc88 	bl	8001ce0 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2200      	movs	r2, #0
 80013d4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2200      	movs	r2, #0
 80013da:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2201      	movs	r2, #1
 80013e0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 80013e4:	2300      	movs	r3, #0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	4000a400 	.word	0x4000a400
 80013f4:	4000a500 	.word	0x4000a500

080013f8 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b087      	sub	sp, #28
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001408:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800140a:	7dfb      	ldrb	r3, [r7, #23]
 800140c:	2b01      	cmp	r3, #1
 800140e:	d002      	beq.n	8001416 <HAL_FDCAN_ConfigFilter+0x1e>
 8001410:	7dfb      	ldrb	r3, [r7, #23]
 8001412:	2b02      	cmp	r3, #2
 8001414:	d13d      	bne.n	8001492 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d119      	bne.n	8001452 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800142a:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	691b      	ldr	r3, [r3, #16]
 8001430:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8001432:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001438:	4313      	orrs	r3, r2
 800143a:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	4413      	add	r3, r2
 8001448:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	693a      	ldr	r2, [r7, #16]
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	e01d      	b.n	800148e <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	68db      	ldr	r3, [r3, #12]
 8001456:	075a      	lsls	r2, r3, #29
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	691b      	ldr	r3, [r3, #16]
 800145c:	4313      	orrs	r3, r2
 800145e:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	079a      	lsls	r2, r3, #30
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	695b      	ldr	r3, [r3, #20]
 800146a:	4313      	orrs	r3, r2
 800146c:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	00db      	lsls	r3, r3, #3
 8001478:	4413      	add	r3, r2
 800147a:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	3304      	adds	r3, #4
 8001486:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	68fa      	ldr	r2, [r7, #12]
 800148c:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800148e:	2300      	movs	r3, #0
 8001490:	e006      	b.n	80014a0 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001496:	f043 0202 	orr.w	r2, r3, #2
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
  }
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	371c      	adds	r7, #28
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	607a      	str	r2, [r7, #4]
 80014b8:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d116      	bne.n	80014f4 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80014ce:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	011a      	lsls	r2, r3, #4
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	431a      	orrs	r2, r3
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	431a      	orrs	r2, r3
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	431a      	orrs	r2, r3
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	430a      	orrs	r2, r1
 80014ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 80014f0:	2300      	movs	r3, #0
 80014f2:	e006      	b.n	8001502 <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014f8:	f043 0204 	orr.w	r2, r3, #4
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001500:	2301      	movs	r3, #1
  }
}
 8001502:	4618      	mov	r0, r3
 8001504:	3714      	adds	r7, #20
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800150e:	b480      	push	{r7}
 8001510:	b083      	sub	sp, #12
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800151c:	b2db      	uxtb	r3, r3
 800151e:	2b01      	cmp	r3, #1
 8001520:	d110      	bne.n	8001544 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2202      	movs	r2, #2
 8001526:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	699a      	ldr	r2, [r3, #24]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f022 0201 	bic.w	r2, r2, #1
 8001538:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2200      	movs	r2, #0
 800153e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8001540:	2300      	movs	r3, #0
 8001542:	e006      	b.n	8001552 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001548:	f043 0204 	orr.w	r2, r3, #4
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
  }
}
 8001552:	4618      	mov	r0, r3
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr

0800155e <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	b086      	sub	sp, #24
 8001562:	af00      	add	r7, sp, #0
 8001564:	60f8      	str	r0, [r7, #12]
 8001566:	60b9      	str	r1, [r7, #8]
 8001568:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001570:	b2db      	uxtb	r3, r3
 8001572:	2b02      	cmp	r3, #2
 8001574:	d12c      	bne.n	80015d0 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800157e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d007      	beq.n	8001596 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800158a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e023      	b.n	80015de <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800159e:	0c1b      	lsrs	r3, r3, #16
 80015a0:	f003 0303 	and.w	r3, r3, #3
 80015a4:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	687a      	ldr	r2, [r7, #4]
 80015aa:	68b9      	ldr	r1, [r7, #8]
 80015ac:	68f8      	ldr	r0, [r7, #12]
 80015ae:	f000 fbf9 	bl	8001da4 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2101      	movs	r1, #1
 80015b8:	697a      	ldr	r2, [r7, #20]
 80015ba:	fa01 f202 	lsl.w	r2, r1, r2
 80015be:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80015c2:	2201      	movs	r2, #1
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	409a      	lsls	r2, r3
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 80015cc:	2300      	movs	r3, #0
 80015ce:	e006      	b.n	80015de <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015d4:	f043 0208 	orr.w	r2, r3, #8
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
  }
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3718      	adds	r7, #24
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
	...

080015e8 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b08b      	sub	sp, #44	@ 0x2c
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
 80015f4:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80015f6:	2300      	movs	r3, #0
 80015f8:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001600:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8001602:	7efb      	ldrb	r3, [r7, #27]
 8001604:	2b02      	cmp	r3, #2
 8001606:	f040 80e8 	bne.w	80017da <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	2b40      	cmp	r3, #64	@ 0x40
 800160e:	d137      	bne.n	8001680 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001618:	f003 030f 	and.w	r3, r3, #15
 800161c:	2b00      	cmp	r3, #0
 800161e:	d107      	bne.n	8001630 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001624:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e0db      	b.n	80017e8 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001638:	0e1b      	lsrs	r3, r3, #24
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	2b01      	cmp	r3, #1
 8001640:	d10a      	bne.n	8001658 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800164a:	0a5b      	lsrs	r3, r3, #9
 800164c:	f003 0301 	and.w	r3, r3, #1
 8001650:	2b01      	cmp	r3, #1
 8001652:	d101      	bne.n	8001658 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001654:	2301      	movs	r3, #1
 8001656:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001660:	0a1b      	lsrs	r3, r3, #8
 8001662:	f003 0303 	and.w	r3, r3, #3
 8001666:	69fa      	ldr	r2, [r7, #28]
 8001668:	4413      	add	r3, r2
 800166a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8001670:	69fa      	ldr	r2, [r7, #28]
 8001672:	4613      	mov	r3, r2
 8001674:	00db      	lsls	r3, r3, #3
 8001676:	4413      	add	r3, r2
 8001678:	00db      	lsls	r3, r3, #3
 800167a:	440b      	add	r3, r1
 800167c:	627b      	str	r3, [r7, #36]	@ 0x24
 800167e:	e036      	b.n	80016ee <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001688:	f003 030f 	and.w	r3, r3, #15
 800168c:	2b00      	cmp	r3, #0
 800168e:	d107      	bne.n	80016a0 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001694:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e0a3      	b.n	80017e8 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80016a8:	0e1b      	lsrs	r3, r3, #24
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d10a      	bne.n	80016c8 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80016ba:	0a1b      	lsrs	r3, r3, #8
 80016bc:	f003 0301 	and.w	r3, r3, #1
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d101      	bne.n	80016c8 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80016c4:	2301      	movs	r3, #1
 80016c6:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80016d0:	0a1b      	lsrs	r3, r3, #8
 80016d2:	f003 0303 	and.w	r3, r3, #3
 80016d6:	69fa      	ldr	r2, [r7, #28]
 80016d8:	4413      	add	r3, r2
 80016da:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80016e0:	69fa      	ldr	r2, [r7, #28]
 80016e2:	4613      	mov	r3, r2
 80016e4:	00db      	lsls	r3, r3, #3
 80016e6:	4413      	add	r3, r2
 80016e8:	00db      	lsls	r3, r3, #3
 80016ea:	440b      	add	r3, r1
 80016ec:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80016ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d107      	bne.n	8001712 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8001702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	0c9b      	lsrs	r3, r3, #18
 8001708:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	e005      	b.n	800171e <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800171e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800172a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001738:	3304      	adds	r3, #4
 800173a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800173c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	b29a      	uxth	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8001746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	0c1b      	lsrs	r3, r3, #16
 800174c:	f003 020f 	and.w	r2, r3, #15
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800176c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	0e1b      	lsrs	r3, r3, #24
 8001772:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800177a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	0fda      	lsrs	r2, r3, #31
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001786:	3304      	adds	r3, #4
 8001788:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800178a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800178c:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800178e:	2300      	movs	r3, #0
 8001790:	623b      	str	r3, [r7, #32]
 8001792:	e00a      	b.n	80017aa <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001794:	697a      	ldr	r2, [r7, #20]
 8001796:	6a3b      	ldr	r3, [r7, #32]
 8001798:	441a      	add	r2, r3
 800179a:	6839      	ldr	r1, [r7, #0]
 800179c:	6a3b      	ldr	r3, [r7, #32]
 800179e:	440b      	add	r3, r1
 80017a0:	7812      	ldrb	r2, [r2, #0]
 80017a2:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80017a4:	6a3b      	ldr	r3, [r7, #32]
 80017a6:	3301      	adds	r3, #1
 80017a8:	623b      	str	r3, [r7, #32]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	68db      	ldr	r3, [r3, #12]
 80017ae:	4a11      	ldr	r2, [pc, #68]	@ (80017f4 <HAL_FDCAN_GetRxMessage+0x20c>)
 80017b0:	5cd3      	ldrb	r3, [r2, r3]
 80017b2:	461a      	mov	r2, r3
 80017b4:	6a3b      	ldr	r3, [r7, #32]
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d3ec      	bcc.n	8001794 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	2b40      	cmp	r3, #64	@ 0x40
 80017be:	d105      	bne.n	80017cc <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	69fa      	ldr	r2, [r7, #28]
 80017c6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 80017ca:	e004      	b.n	80017d6 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	69fa      	ldr	r2, [r7, #28]
 80017d2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 80017d6:	2300      	movs	r3, #0
 80017d8:	e006      	b.n	80017e8 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017de:	f043 0208 	orr.w	r2, r3, #8
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
  }
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	372c      	adds	r7, #44	@ 0x2c
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	0800cdec 	.word	0x0800cdec

080017f8 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b087      	sub	sp, #28
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800180a:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800180c:	7dfb      	ldrb	r3, [r7, #23]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d003      	beq.n	800181a <HAL_FDCAN_ActivateNotification+0x22>
 8001812:	7dfb      	ldrb	r3, [r7, #23]
 8001814:	2b02      	cmp	r3, #2
 8001816:	f040 80c8 	bne.w	80019aa <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001820:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	f003 0307 	and.w	r3, r3, #7
 8001828:	2b00      	cmp	r3, #0
 800182a:	d004      	beq.n	8001836 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	2b00      	cmp	r3, #0
 8001834:	d03b      	beq.n	80018ae <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 800183c:	2b00      	cmp	r3, #0
 800183e:	d004      	beq.n	800184a <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	2b00      	cmp	r3, #0
 8001848:	d031      	beq.n	80018ae <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001850:	2b00      	cmp	r3, #0
 8001852:	d004      	beq.n	800185e <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	f003 0304 	and.w	r3, r3, #4
 800185a:	2b00      	cmp	r3, #0
 800185c:	d027      	beq.n	80018ae <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001864:	2b00      	cmp	r3, #0
 8001866:	d004      	beq.n	8001872 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	f003 0308 	and.w	r3, r3, #8
 800186e:	2b00      	cmp	r3, #0
 8001870:	d01d      	beq.n	80018ae <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001878:	2b00      	cmp	r3, #0
 800187a:	d004      	beq.n	8001886 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	f003 0310 	and.w	r3, r3, #16
 8001882:	2b00      	cmp	r3, #0
 8001884:	d013      	beq.n	80018ae <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800188c:	2b00      	cmp	r3, #0
 800188e:	d004      	beq.n	800189a <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	f003 0320 	and.w	r3, r3, #32
 8001896:	2b00      	cmp	r3, #0
 8001898:	d009      	beq.n	80018ae <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d00c      	beq.n	80018be <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d107      	bne.n	80018be <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f042 0201 	orr.w	r2, r2, #1
 80018bc:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	f003 0307 	and.w	r3, r3, #7
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d004      	beq.n	80018d2 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d13b      	bne.n	800194a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d004      	beq.n	80018e6 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d131      	bne.n	800194a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d004      	beq.n	80018fa <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	f003 0304 	and.w	r3, r3, #4
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d127      	bne.n	800194a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001900:	2b00      	cmp	r3, #0
 8001902:	d004      	beq.n	800190e <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	f003 0308 	and.w	r3, r3, #8
 800190a:	2b00      	cmp	r3, #0
 800190c:	d11d      	bne.n	800194a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001914:	2b00      	cmp	r3, #0
 8001916:	d004      	beq.n	8001922 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	f003 0310 	and.w	r3, r3, #16
 800191e:	2b00      	cmp	r3, #0
 8001920:	d113      	bne.n	800194a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001928:	2b00      	cmp	r3, #0
 800192a:	d004      	beq.n	8001936 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	f003 0320 	and.w	r3, r3, #32
 8001932:	2b00      	cmp	r3, #0
 8001934:	d109      	bne.n	800194a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800193c:	2b00      	cmp	r3, #0
 800193e:	d00c      	beq.n	800195a <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001946:	2b00      	cmp	r3, #0
 8001948:	d007      	beq.n	800195a <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f042 0202 	orr.w	r2, r2, #2
 8001958:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001960:	2b00      	cmp	r3, #0
 8001962:	d009      	beq.n	8001978 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	430a      	orrs	r2, r1
 8001974:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800197e:	2b00      	cmp	r3, #0
 8001980:	d009      	beq.n	8001996 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	430a      	orrs	r2, r1
 8001992:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	68ba      	ldr	r2, [r7, #8]
 80019a2:	430a      	orrs	r2, r1
 80019a4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 80019a6:	2300      	movs	r3, #0
 80019a8:	e006      	b.n	80019b8 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019ae:	f043 0202 	orr.w	r2, r3, #2
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
  }
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	371c      	adds	r7, #28
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b08c      	sub	sp, #48	@ 0x30
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80019d2:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 80019d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80019e0:	4013      	ands	r3, r2
 80019e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80019f8:	4013      	ands	r3, r2
 80019fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a02:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001a06:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a10:	4013      	ands	r3, r2
 8001a12:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a1a:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8001a1e:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a26:	6a3a      	ldr	r2, [r7, #32]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a32:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001a36:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a3e:	69fa      	ldr	r2, [r7, #28]
 8001a40:	4013      	ands	r3, r2
 8001a42:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a4a:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a52:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d00b      	beq.n	8001a76 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d006      	beq.n	8001a76 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2240      	movs	r2, #64	@ 0x40
 8001a6e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f000 f916 	bl	8001ca2 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d019      	beq.n	8001ab4 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d014      	beq.n	8001ab4 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001a92:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001aaa:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001aac:	6939      	ldr	r1, [r7, #16]
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f000 f8d8 	bl	8001c64 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001ab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d007      	beq.n	8001aca <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ac0:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001ac2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f000 f8a2 	bl	8001c0e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001aca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d007      	beq.n	8001ae0 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001ad6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001ad8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7fe fe50 	bl	8000780 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d007      	beq.n	8001af6 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001aec:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001aee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f000 f897 	bl	8001c24 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d00c      	beq.n	8001b1a <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d007      	beq.n	8001b1a <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b12:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f000 f890 	bl	8001c3a <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d018      	beq.n	8001b56 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d013      	beq.n	8001b56 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001b36:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001b40:	68fa      	ldr	r2, [r7, #12]
 8001b42:	4013      	ands	r3, r2
 8001b44:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2280      	movs	r2, #128	@ 0x80
 8001b4c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001b4e:	68f9      	ldr	r1, [r7, #12]
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f000 f87c 	bl	8001c4e <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d00c      	beq.n	8001b7a <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d007      	beq.n	8001b7a <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b72:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f000 f880 	bl	8001c7a <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d00c      	beq.n	8001b9e <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d007      	beq.n	8001b9e <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001b96:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f000 f878 	bl	8001c8e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d00f      	beq.n	8001bc8 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d00a      	beq.n	8001bc8 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001bba:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bc0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d007      	beq.n	8001bde <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	69fa      	ldr	r2, [r7, #28]
 8001bd4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001bd6:	69f9      	ldr	r1, [r7, #28]
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f000 f876 	bl	8001cca <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001bde:	6a3b      	ldr	r3, [r7, #32]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d009      	beq.n	8001bf8 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	6a3a      	ldr	r2, [r7, #32]
 8001bea:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001bf0:	6a3b      	ldr	r3, [r7, #32]
 8001bf2:	431a      	orrs	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d002      	beq.n	8001c06 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f000 f858 	bl	8001cb6 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001c06:	bf00      	nop
 8001c08:	3730      	adds	r7, #48	@ 0x30
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b083      	sub	sp, #12
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
 8001c16:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001c2e:	bf00      	nop
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr

08001c3a <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	b083      	sub	sp, #12
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001c42:	bf00      	nop
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr

08001c4e <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	b083      	sub	sp, #12
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
 8001c56:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001c58:	bf00      	nop
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001c6e:	bf00      	nop
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr

08001c7a <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	b083      	sub	sp, #12
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001c82:	bf00      	nop
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	b083      	sub	sp, #12
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001c96:	bf00      	nop
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr

08001ca2 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	b083      	sub	sp, #12
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	b083      	sub	sp, #12
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001cbe:	bf00      	nop
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr

08001cca <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	b083      	sub	sp, #12
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
 8001cd2:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001cd4:	bf00      	nop
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001ce8:	4b2c      	ldr	r3, [pc, #176]	@ (8001d9c <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 8001cea:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a2b      	ldr	r2, [pc, #172]	@ (8001da0 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d103      	bne.n	8001cfe <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001cfc:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	68ba      	ldr	r2, [r7, #8]
 8001d02:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001d0c:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d14:	041a      	lsls	r2, r3, #16
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	430a      	orrs	r2, r1
 8001d1c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001d32:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d3a:	061a      	lsls	r2, r3, #24
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	430a      	orrs	r2, r1
 8001d42:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	60fb      	str	r3, [r7, #12]
 8001d72:	e005      	b.n	8001d80 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2200      	movs	r2, #0
 8001d78:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	3304      	adds	r3, #4
 8001d7e:	60fb      	str	r3, [r7, #12]
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001d86:	68fa      	ldr	r2, [r7, #12]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d3f3      	bcc.n	8001d74 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 8001d8c:	bf00      	nop
 8001d8e:	bf00      	nop
 8001d90:	3714      	adds	r7, #20
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	4000ac00 	.word	0x4000ac00
 8001da0:	4000a800 	.word	0x4000a800

08001da4 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b089      	sub	sp, #36	@ 0x24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	607a      	str	r2, [r7, #4]
 8001db0:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d10a      	bne.n	8001dd0 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8001dc2:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	61fb      	str	r3, [r7, #28]
 8001dce:	e00a      	b.n	8001de6 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8001dd8:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8001dde:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001de0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001de4:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	6a1b      	ldr	r3, [r3, #32]
 8001dea:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001df0:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8001df6:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8001dfc:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001e04:	4313      	orrs	r3, r2
 8001e06:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001e0c:	683a      	ldr	r2, [r7, #0]
 8001e0e:	4613      	mov	r3, r2
 8001e10:	00db      	lsls	r3, r3, #3
 8001e12:	4413      	add	r3, r2
 8001e14:	00db      	lsls	r3, r3, #3
 8001e16:	440b      	add	r3, r1
 8001e18:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	69fa      	ldr	r2, [r7, #28]
 8001e1e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	3304      	adds	r3, #4
 8001e24:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	3304      	adds	r3, #4
 8001e30:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8001e32:	2300      	movs	r3, #0
 8001e34:	617b      	str	r3, [r7, #20]
 8001e36:	e020      	b.n	8001e7a <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	3303      	adds	r3, #3
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	4413      	add	r3, r2
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	3302      	adds	r3, #2
 8001e48:	6879      	ldr	r1, [r7, #4]
 8001e4a:	440b      	add	r3, r1
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001e50:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	3301      	adds	r3, #1
 8001e56:	6879      	ldr	r1, [r7, #4]
 8001e58:	440b      	add	r3, r1
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001e5e:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8001e60:	6879      	ldr	r1, [r7, #4]
 8001e62:	697a      	ldr	r2, [r7, #20]
 8001e64:	440a      	add	r2, r1
 8001e66:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001e68:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	3304      	adds	r3, #4
 8001e72:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	3304      	adds	r3, #4
 8001e78:	617b      	str	r3, [r7, #20]
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	4a06      	ldr	r2, [pc, #24]	@ (8001e98 <FDCAN_CopyMessageToRAM+0xf4>)
 8001e80:	5cd3      	ldrb	r3, [r2, r3]
 8001e82:	461a      	mov	r2, r3
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d3d6      	bcc.n	8001e38 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8001e8a:	bf00      	nop
 8001e8c:	bf00      	nop
 8001e8e:	3724      	adds	r7, #36	@ 0x24
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr
 8001e98:	0800cdec 	.word	0x0800cdec

08001e9c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b087      	sub	sp, #28
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001eaa:	e136      	b.n	800211a <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	2101      	movs	r1, #1
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb8:	4013      	ands	r3, r2
 8001eba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f000 8128 	beq.w	8002114 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d003      	beq.n	8001ed4 <HAL_GPIO_Init+0x38>
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	2b12      	cmp	r3, #18
 8001ed2:	d125      	bne.n	8001f20 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	08da      	lsrs	r2, r3, #3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	3208      	adds	r2, #8
 8001edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ee0:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	f003 0307 	and.w	r3, r3, #7
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	220f      	movs	r2, #15
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	697a      	ldr	r2, [r7, #20]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	691b      	ldr	r3, [r3, #16]
 8001efc:	f003 020f 	and.w	r2, r3, #15
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	f003 0307 	and.w	r3, r3, #7
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	697a      	ldr	r2, [r7, #20]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	08da      	lsrs	r2, r3, #3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	3208      	adds	r2, #8
 8001f1a:	6979      	ldr	r1, [r7, #20]
 8001f1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	2203      	movs	r2, #3
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	43db      	mvns	r3, r3
 8001f32:	697a      	ldr	r2, [r7, #20]
 8001f34:	4013      	ands	r3, r2
 8001f36:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f003 0203 	and.w	r2, r3, #3
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	697a      	ldr	r2, [r7, #20]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	697a      	ldr	r2, [r7, #20]
 8001f52:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d00b      	beq.n	8001f74 <HAL_GPIO_Init+0xd8>
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d007      	beq.n	8001f74 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f68:	2b11      	cmp	r3, #17
 8001f6a:	d003      	beq.n	8001f74 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	2b12      	cmp	r3, #18
 8001f72:	d130      	bne.n	8001fd6 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	2203      	movs	r2, #3
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	43db      	mvns	r3, r3
 8001f86:	697a      	ldr	r2, [r7, #20]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	68da      	ldr	r2, [r3, #12]
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	697a      	ldr	r2, [r7, #20]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	697a      	ldr	r2, [r7, #20]
 8001fa2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001faa:	2201      	movs	r2, #1
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	43db      	mvns	r3, r3
 8001fb4:	697a      	ldr	r2, [r7, #20]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	091b      	lsrs	r3, r3, #4
 8001fc0:	f003 0201 	and.w	r2, r3, #1
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	697a      	ldr	r2, [r7, #20]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	697a      	ldr	r2, [r7, #20]
 8001fd4:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	2b03      	cmp	r3, #3
 8001fdc:	d017      	beq.n	800200e <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	2203      	movs	r2, #3
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	43db      	mvns	r3, r3
 8001ff0:	697a      	ldr	r2, [r7, #20]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	689a      	ldr	r2, [r3, #8]
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	697a      	ldr	r2, [r7, #20]
 8002004:	4313      	orrs	r3, r2
 8002006:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	697a      	ldr	r2, [r7, #20]
 800200c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d07c      	beq.n	8002114 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800201a:	4a47      	ldr	r2, [pc, #284]	@ (8002138 <HAL_GPIO_Init+0x29c>)
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	089b      	lsrs	r3, r3, #2
 8002020:	3318      	adds	r3, #24
 8002022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002026:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	f003 0303 	and.w	r3, r3, #3
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	220f      	movs	r2, #15
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	43db      	mvns	r3, r3
 8002038:	697a      	ldr	r2, [r7, #20]
 800203a:	4013      	ands	r3, r2
 800203c:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	0a9a      	lsrs	r2, r3, #10
 8002042:	4b3e      	ldr	r3, [pc, #248]	@ (800213c <HAL_GPIO_Init+0x2a0>)
 8002044:	4013      	ands	r3, r2
 8002046:	693a      	ldr	r2, [r7, #16]
 8002048:	f002 0203 	and.w	r2, r2, #3
 800204c:	00d2      	lsls	r2, r2, #3
 800204e:	4093      	lsls	r3, r2
 8002050:	697a      	ldr	r2, [r7, #20]
 8002052:	4313      	orrs	r3, r2
 8002054:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002056:	4938      	ldr	r1, [pc, #224]	@ (8002138 <HAL_GPIO_Init+0x29c>)
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	089b      	lsrs	r3, r3, #2
 800205c:	3318      	adds	r3, #24
 800205e:	697a      	ldr	r2, [r7, #20]
 8002060:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002064:	4b34      	ldr	r3, [pc, #208]	@ (8002138 <HAL_GPIO_Init+0x29c>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	43db      	mvns	r3, r3
 800206e:	697a      	ldr	r2, [r7, #20]
 8002070:	4013      	ands	r3, r2
 8002072:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d003      	beq.n	8002088 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8002080:	697a      	ldr	r2, [r7, #20]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	4313      	orrs	r3, r2
 8002086:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8002088:	4a2b      	ldr	r2, [pc, #172]	@ (8002138 <HAL_GPIO_Init+0x29c>)
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800208e:	4b2a      	ldr	r3, [pc, #168]	@ (8002138 <HAL_GPIO_Init+0x29c>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	43db      	mvns	r3, r3
 8002098:	697a      	ldr	r2, [r7, #20]
 800209a:	4013      	ands	r3, r2
 800209c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d003      	beq.n	80020b2 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 80020aa:	697a      	ldr	r2, [r7, #20]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80020b2:	4a21      	ldr	r2, [pc, #132]	@ (8002138 <HAL_GPIO_Init+0x29c>)
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80020b8:	4b1f      	ldr	r3, [pc, #124]	@ (8002138 <HAL_GPIO_Init+0x29c>)
 80020ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80020be:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	43db      	mvns	r3, r3
 80020c4:	697a      	ldr	r2, [r7, #20]
 80020c6:	4013      	ands	r3, r2
 80020c8:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d003      	beq.n	80020de <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 80020d6:	697a      	ldr	r2, [r7, #20]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	4313      	orrs	r3, r2
 80020dc:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80020de:	4a16      	ldr	r2, [pc, #88]	@ (8002138 <HAL_GPIO_Init+0x29c>)
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80020e6:	4b14      	ldr	r3, [pc, #80]	@ (8002138 <HAL_GPIO_Init+0x29c>)
 80020e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80020ec:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	43db      	mvns	r3, r3
 80020f2:	697a      	ldr	r2, [r7, #20]
 80020f4:	4013      	ands	r3, r2
 80020f6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d003      	beq.n	800210c <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8002104:	697a      	ldr	r2, [r7, #20]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	4313      	orrs	r3, r2
 800210a:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 800210c:	4a0a      	ldr	r2, [pc, #40]	@ (8002138 <HAL_GPIO_Init+0x29c>)
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	3301      	adds	r3, #1
 8002118:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	fa22 f303 	lsr.w	r3, r2, r3
 8002124:	2b00      	cmp	r3, #0
 8002126:	f47f aec1 	bne.w	8001eac <HAL_GPIO_Init+0x10>
  }
}
 800212a:	bf00      	nop
 800212c:	bf00      	nop
 800212e:	371c      	adds	r7, #28
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr
 8002138:	44022000 	.word	0x44022000
 800213c:	002f7f7f 	.word	0x002f7f7f

08002140 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	460b      	mov	r3, r1
 800214a:	807b      	strh	r3, [r7, #2]
 800214c:	4613      	mov	r3, r2
 800214e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002150:	787b      	ldrb	r3, [r7, #1]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d003      	beq.n	800215e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002156:	887a      	ldrh	r2, [r7, #2]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800215c:	e002      	b.n	8002164 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800215e:	887a      	ldrh	r2, [r7, #2]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002164:	bf00      	nop
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <PCD_GET_EP_RX_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_RX_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	460b      	mov	r3, r1
 800217a:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 800217c:	230a      	movs	r3, #10
 800217e:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8002180:	e002      	b.n	8002188 <PCD_GET_EP_RX_CNT+0x18>
  {
    count--;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	3b01      	subs	r3, #1
 8002186:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d1f9      	bne.n	8002182 <PCD_GET_EP_RX_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_RX_CNT((Instance), (bEpNum));
 800218e:	887b      	ldrh	r3, [r7, #2]
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002196:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	0c1b      	lsrs	r3, r3, #16
 800219e:	b29b      	uxth	r3, r3
 80021a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021a4:	b29b      	uxth	r3, r3
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3714      	adds	r7, #20
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr

080021b2 <PCD_GET_EP_DBUF0_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF0_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 80021b2:	b480      	push	{r7}
 80021b4:	b085      	sub	sp, #20
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
 80021ba:	460b      	mov	r3, r1
 80021bc:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 80021be:	230a      	movs	r3, #10
 80021c0:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 80021c2:	e002      	b.n	80021ca <PCD_GET_EP_DBUF0_CNT+0x18>
  {
    count--;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	3b01      	subs	r3, #1
 80021c8:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d1f9      	bne.n	80021c4 <PCD_GET_EP_DBUF0_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF0_CNT((Instance), (bEpNum));
 80021d0:	887b      	ldrh	r3, [r7, #2]
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80021d8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	0c1b      	lsrs	r3, r3, #16
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021e6:	b29b      	uxth	r3, r3
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3714      	adds	r7, #20
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <PCD_GET_EP_DBUF1_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF1_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	460b      	mov	r3, r1
 80021fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8002200:	230a      	movs	r3, #10
 8002202:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8002204:	e002      	b.n	800220c <PCD_GET_EP_DBUF1_CNT+0x18>
  {
    count--;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	3b01      	subs	r3, #1
 800220a:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d1f9      	bne.n	8002206 <PCD_GET_EP_DBUF1_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF1_CNT((Instance), (bEpNum));
 8002212:	887b      	ldrh	r3, [r7, #2]
 8002214:	00db      	lsls	r3, r3, #3
 8002216:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800221a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	0c1b      	lsrs	r3, r3, #16
 8002222:	b29b      	uxth	r3, r3
 8002224:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002228:	b29b      	uxth	r3, r3
}
 800222a:	4618      	mov	r0, r3
 800222c:	3714      	adds	r7, #20
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr

08002236 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b086      	sub	sp, #24
 800223a:	af02      	add	r7, sp, #8
 800223c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d101      	bne.n	8002248 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e0c3      	b.n	80023d0 <HAL_PCD_Init+0x19a>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f893 3295 	ldrb.w	r3, [r3, #661]	@ 0x295
 800224e:	b2db      	uxtb	r3, r3
 8002250:	2b00      	cmp	r3, #0
 8002252:	d106      	bne.n	8002262 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f7fe fb2d 	bl	80008bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2203      	movs	r2, #3
 8002266:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4618      	mov	r0, r3
 8002270:	f003 fe8e 	bl	8005f90 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002274:	2300      	movs	r3, #0
 8002276:	73fb      	strb	r3, [r7, #15]
 8002278:	e03f      	b.n	80022fa <HAL_PCD_Init+0xc4>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800227a:	7bfa      	ldrb	r2, [r7, #15]
 800227c:	6879      	ldr	r1, [r7, #4]
 800227e:	4613      	mov	r3, r2
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	4413      	add	r3, r2
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	440b      	add	r3, r1
 8002288:	3315      	adds	r3, #21
 800228a:	2201      	movs	r2, #1
 800228c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800228e:	7bfa      	ldrb	r2, [r7, #15]
 8002290:	6879      	ldr	r1, [r7, #4]
 8002292:	4613      	mov	r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	4413      	add	r3, r2
 8002298:	00db      	lsls	r3, r3, #3
 800229a:	440b      	add	r3, r1
 800229c:	3314      	adds	r3, #20
 800229e:	7bfa      	ldrb	r2, [r7, #15]
 80022a0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022a2:	7bfa      	ldrb	r2, [r7, #15]
 80022a4:	6879      	ldr	r1, [r7, #4]
 80022a6:	4613      	mov	r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	4413      	add	r3, r2
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	440b      	add	r3, r1
 80022b0:	3317      	adds	r3, #23
 80022b2:	2200      	movs	r2, #0
 80022b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80022b6:	7bfa      	ldrb	r2, [r7, #15]
 80022b8:	6879      	ldr	r1, [r7, #4]
 80022ba:	4613      	mov	r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	4413      	add	r3, r2
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	440b      	add	r3, r1
 80022c4:	3324      	adds	r3, #36	@ 0x24
 80022c6:	2200      	movs	r2, #0
 80022c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80022ca:	7bfa      	ldrb	r2, [r7, #15]
 80022cc:	6879      	ldr	r1, [r7, #4]
 80022ce:	4613      	mov	r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	4413      	add	r3, r2
 80022d4:	00db      	lsls	r3, r3, #3
 80022d6:	440b      	add	r3, r1
 80022d8:	3328      	adds	r3, #40	@ 0x28
 80022da:	2200      	movs	r2, #0
 80022dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80022de:	7bfb      	ldrb	r3, [r7, #15]
 80022e0:	6879      	ldr	r1, [r7, #4]
 80022e2:	1c5a      	adds	r2, r3, #1
 80022e4:	4613      	mov	r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	4413      	add	r3, r2
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	440b      	add	r3, r1
 80022ee:	3304      	adds	r3, #4
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022f4:	7bfb      	ldrb	r3, [r7, #15]
 80022f6:	3301      	adds	r3, #1
 80022f8:	73fb      	strb	r3, [r7, #15]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	791b      	ldrb	r3, [r3, #4]
 80022fe:	7bfa      	ldrb	r2, [r7, #15]
 8002300:	429a      	cmp	r2, r3
 8002302:	d3ba      	bcc.n	800227a <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002304:	2300      	movs	r3, #0
 8002306:	73fb      	strb	r3, [r7, #15]
 8002308:	e044      	b.n	8002394 <HAL_PCD_Init+0x15e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800230a:	7bfa      	ldrb	r2, [r7, #15]
 800230c:	6879      	ldr	r1, [r7, #4]
 800230e:	4613      	mov	r3, r2
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	4413      	add	r3, r2
 8002314:	00db      	lsls	r3, r3, #3
 8002316:	440b      	add	r3, r1
 8002318:	f203 1355 	addw	r3, r3, #341	@ 0x155
 800231c:	2200      	movs	r2, #0
 800231e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002320:	7bfa      	ldrb	r2, [r7, #15]
 8002322:	6879      	ldr	r1, [r7, #4]
 8002324:	4613      	mov	r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	4413      	add	r3, r2
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	440b      	add	r3, r1
 800232e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8002332:	7bfa      	ldrb	r2, [r7, #15]
 8002334:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002336:	7bfa      	ldrb	r2, [r7, #15]
 8002338:	6879      	ldr	r1, [r7, #4]
 800233a:	4613      	mov	r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	4413      	add	r3, r2
 8002340:	00db      	lsls	r3, r3, #3
 8002342:	440b      	add	r3, r1
 8002344:	f203 1357 	addw	r3, r3, #343	@ 0x157
 8002348:	2200      	movs	r2, #0
 800234a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800234c:	7bfa      	ldrb	r2, [r7, #15]
 800234e:	6879      	ldr	r1, [r7, #4]
 8002350:	4613      	mov	r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	4413      	add	r3, r2
 8002356:	00db      	lsls	r3, r3, #3
 8002358:	440b      	add	r3, r1
 800235a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800235e:	2200      	movs	r2, #0
 8002360:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002362:	7bfa      	ldrb	r2, [r7, #15]
 8002364:	6879      	ldr	r1, [r7, #4]
 8002366:	4613      	mov	r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	4413      	add	r3, r2
 800236c:	00db      	lsls	r3, r3, #3
 800236e:	440b      	add	r3, r1
 8002370:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002378:	7bfa      	ldrb	r2, [r7, #15]
 800237a:	6879      	ldr	r1, [r7, #4]
 800237c:	4613      	mov	r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	4413      	add	r3, r2
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	440b      	add	r3, r1
 8002386:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800238a:	2200      	movs	r2, #0
 800238c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800238e:	7bfb      	ldrb	r3, [r7, #15]
 8002390:	3301      	adds	r3, #1
 8002392:	73fb      	strb	r3, [r7, #15]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	791b      	ldrb	r3, [r3, #4]
 8002398:	7bfa      	ldrb	r2, [r7, #15]
 800239a:	429a      	cmp	r2, r3
 800239c:	d3b5      	bcc.n	800230a <HAL_PCD_Init+0xd4>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6818      	ldr	r0, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	7c1a      	ldrb	r2, [r3, #16]
 80023a6:	f88d 2000 	strb.w	r2, [sp]
 80023aa:	3304      	adds	r3, #4
 80023ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023ae:	f003 fe27 	bl	8006000 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	7b1b      	ldrb	r3, [r3, #12]
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d102      	bne.n	80023ce <HAL_PCD_Init+0x198>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f001 fb66 	bl	8003a9a <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3710      	adds	r7, #16
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d101      	bne.n	80023ee <HAL_PCD_Start+0x16>
 80023ea:	2302      	movs	r3, #2
 80023ec:	e012      	b.n	8002414 <HAL_PCD_Start+0x3c>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2201      	movs	r2, #1
 80023f2:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  __HAL_PCD_ENABLE(hpcd);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f003 fdb4 	bl	8005f68 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4618      	mov	r0, r3
 8002406:	f005 fc60 	bl	8007cca <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8002412:	2300      	movs	r3, #0
}
 8002414:	4618      	mov	r0, r3
 8002416:	3708      	adds	r7, #8
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4618      	mov	r0, r3
 800242a:	f005 fc5f 	bl	8007cec <USB_ReadInterrupts>
 800242e:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d003      	beq.n	8002442 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f000 faf2 	bl	8002a24 <PCD_EP_ISR_Handler>

    return;
 8002440:	e0de      	b.n	8002600 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002448:	2b00      	cmp	r3, #0
 800244a:	d010      	beq.n	800246e <HAL_PCD_IRQHandler+0x52>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	f64f 33ff 	movw	r3, #64511	@ 0xfbff
 800245a:	400b      	ands	r3, r1
 800245c:	6453      	str	r3, [r2, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f007 fc53 	bl	8009d0a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002464:	2100      	movs	r1, #0
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f000 f8e1 	bl	800262e <HAL_PCD_SetAddress>

    return;
 800246c:	e0c8      	b.n	8002600 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d009      	beq.n	800248c <HAL_PCD_IRQHandler+0x70>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	f64b 73ff 	movw	r3, #49151	@ 0xbfff
 8002486:	400b      	ands	r3, r1
 8002488:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 800248a:	e0b9      	b.n	8002600 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d009      	beq.n	80024aa <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	f64d 73ff 	movw	r3, #57343	@ 0xdfff
 80024a4:	400b      	ands	r3, r1
 80024a6:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 80024a8:	e0aa      	b.n	8002600 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d029      	beq.n	8002508 <HAL_PCD_IRQHandler+0xec>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPRDY);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f022 0204 	bic.w	r2, r2, #4
 80024c2:	641a      	str	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPEN);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f022 0208 	bic.w	r2, r2, #8
 80024d2:	641a      	str	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d107      	bne.n	80024ee <HAL_PCD_IRQHandler+0xd2>
    {
      hpcd->LPM_State = LPM_L0;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80024e6:	2100      	movs	r1, #0
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f001 faf8 	bl	8003ade <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f000 f893 	bl	800261a <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8002502:	400b      	ands	r3, r1
 8002504:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8002506:	e07b      	b.n	8002600 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800250e:	2b00      	cmp	r3, #0
 8002510:	d01c      	beq.n	800254c <HAL_PCD_IRQHandler+0x130>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f042 0208 	orr.w	r2, r2, #8
 8002520:	641a      	str	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	f24f 73ff 	movw	r3, #63487	@ 0xf7ff
 8002530:	400b      	ands	r3, r1
 8002532:	6453      	str	r3, [r2, #68]	@ 0x44

    hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f042 0204 	orr.w	r2, r2, #4
 8002542:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f000 f85e 	bl	8002606 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800254a:	e059      	b.n	8002600 <HAL_PCD_IRQHandler+0x1e4>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002552:	2b00      	cmp	r3, #0
 8002554:	d033      	beq.n	80025be <HAL_PCD_IRQHandler+0x1a2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	f64f 737f 	movw	r3, #65407	@ 0xff7f
 8002564:	400b      	ands	r3, r1
 8002566:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 800256e:	2b00      	cmp	r3, #0
 8002570:	d121      	bne.n	80025b6 <HAL_PCD_IRQHandler+0x19a>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f042 0204 	orr.w	r2, r2, #4
 8002580:	641a      	str	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f042 0208 	orr.w	r2, r2, #8
 8002590:	641a      	str	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2201      	movs	r2, #1
 8002596:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025a0:	089b      	lsrs	r3, r3, #2
 80025a2:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80025ac:	2101      	movs	r1, #1
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f001 fa95 	bl	8003ade <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80025b4:	e024      	b.n	8002600 <HAL_PCD_IRQHandler+0x1e4>
      HAL_PCD_SuspendCallback(hpcd);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 f825 	bl	8002606 <HAL_PCD_SuspendCallback>
    return;
 80025bc:	e020      	b.n	8002600 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d00c      	beq.n	80025e2 <HAL_PCD_IRQHandler+0x1c6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	f64f 53ff 	movw	r3, #65023	@ 0xfdff
 80025d6:	400b      	ands	r3, r1
 80025d8:	6453      	str	r3, [r2, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f007 fb87 	bl	8009cee <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80025e0:	e00e      	b.n	8002600 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d009      	beq.n	8002600 <HAL_PCD_IRQHandler+0x1e4>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 80025fa:	400b      	ands	r3, r1
 80025fc:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 80025fe:	bf00      	nop
  }
}
 8002600:	3710      	adds	r7, #16
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8002606:	b480      	push	{r7}
 8002608:	b083      	sub	sp, #12
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 800260e:	bf00      	nop
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr

0800261a <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 800261a:	b480      	push	{r7}
 800261c:	b083      	sub	sp, #12
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8002622:	bf00      	nop
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr

0800262e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800262e:	b580      	push	{r7, lr}
 8002630:	b082      	sub	sp, #8
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
 8002636:	460b      	mov	r3, r1
 8002638:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8002640:	2b01      	cmp	r3, #1
 8002642:	d101      	bne.n	8002648 <HAL_PCD_SetAddress+0x1a>
 8002644:	2302      	movs	r3, #2
 8002646:	e012      	b.n	800266e <HAL_PCD_SetAddress+0x40>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  hpcd->USB_Address = address;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	78fa      	ldrb	r2, [r7, #3]
 8002654:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	78fa      	ldrb	r2, [r7, #3]
 800265c:	4611      	mov	r1, r2
 800265e:	4618      	mov	r0, r3
 8002660:	f005 fb20 	bl	8007ca4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b084      	sub	sp, #16
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
 800267e:	4608      	mov	r0, r1
 8002680:	4611      	mov	r1, r2
 8002682:	461a      	mov	r2, r3
 8002684:	4603      	mov	r3, r0
 8002686:	70fb      	strb	r3, [r7, #3]
 8002688:	460b      	mov	r3, r1
 800268a:	803b      	strh	r3, [r7, #0]
 800268c:	4613      	mov	r3, r2
 800268e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002690:	2300      	movs	r3, #0
 8002692:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002694:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002698:	2b00      	cmp	r3, #0
 800269a:	da0f      	bge.n	80026bc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800269c:	78fb      	ldrb	r3, [r7, #3]
 800269e:	f003 0207 	and.w	r2, r3, #7
 80026a2:	4613      	mov	r3, r2
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	4413      	add	r3, r2
 80026a8:	00db      	lsls	r3, r3, #3
 80026aa:	3310      	adds	r3, #16
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	4413      	add	r3, r2
 80026b0:	3304      	adds	r3, #4
 80026b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2201      	movs	r2, #1
 80026b8:	705a      	strb	r2, [r3, #1]
 80026ba:	e00f      	b.n	80026dc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026bc:	78fb      	ldrb	r3, [r7, #3]
 80026be:	f003 0207 	and.w	r2, r3, #7
 80026c2:	4613      	mov	r3, r2
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	4413      	add	r3, r2
 80026c8:	00db      	lsls	r3, r3, #3
 80026ca:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	4413      	add	r3, r2
 80026d2:	3304      	adds	r3, #4
 80026d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80026dc:	78fb      	ldrb	r3, [r7, #3]
 80026de:	f003 0307 	and.w	r3, r3, #7
 80026e2:	b2da      	uxtb	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80026e8:	883b      	ldrh	r3, [r7, #0]
 80026ea:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	78ba      	ldrb	r2, [r7, #2]
 80026f6:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80026f8:	78bb      	ldrb	r3, [r7, #2]
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d102      	bne.n	8002704 <HAL_PCD_EP_Open+0x8e>
  {
    ep->data_pid_start = 0U;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2200      	movs	r2, #0
 8002702:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 800270a:	2b01      	cmp	r3, #1
 800270c:	d101      	bne.n	8002712 <HAL_PCD_EP_Open+0x9c>
 800270e:	2302      	movs	r3, #2
 8002710:	e00e      	b.n	8002730 <HAL_PCD_EP_Open+0xba>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2201      	movs	r2, #1
 8002716:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68f9      	ldr	r1, [r7, #12]
 8002720:	4618      	mov	r0, r3
 8002722:	f003 fc91 	bl	8006048 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return ret;
 800272e:	7afb      	ldrb	r3, [r7, #11]
}
 8002730:	4618      	mov	r0, r3
 8002732:	3710      	adds	r7, #16
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	460b      	mov	r3, r1
 8002742:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002744:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002748:	2b00      	cmp	r3, #0
 800274a:	da0f      	bge.n	800276c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800274c:	78fb      	ldrb	r3, [r7, #3]
 800274e:	f003 0207 	and.w	r2, r3, #7
 8002752:	4613      	mov	r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	4413      	add	r3, r2
 8002758:	00db      	lsls	r3, r3, #3
 800275a:	3310      	adds	r3, #16
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	4413      	add	r3, r2
 8002760:	3304      	adds	r3, #4
 8002762:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2201      	movs	r2, #1
 8002768:	705a      	strb	r2, [r3, #1]
 800276a:	e00f      	b.n	800278c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800276c:	78fb      	ldrb	r3, [r7, #3]
 800276e:	f003 0207 	and.w	r2, r3, #7
 8002772:	4613      	mov	r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	4413      	add	r3, r2
 8002778:	00db      	lsls	r3, r3, #3
 800277a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	4413      	add	r3, r2
 8002782:	3304      	adds	r3, #4
 8002784:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2200      	movs	r2, #0
 800278a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800278c:	78fb      	ldrb	r3, [r7, #3]
 800278e:	f003 0307 	and.w	r3, r3, #7
 8002792:	b2da      	uxtb	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d101      	bne.n	80027a6 <HAL_PCD_EP_Close+0x6e>
 80027a2:	2302      	movs	r3, #2
 80027a4:	e00e      	b.n	80027c4 <HAL_PCD_EP_Close+0x8c>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2201      	movs	r2, #1
 80027aa:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68f9      	ldr	r1, [r7, #12]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f003 ffa7 	bl	8006708 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  return HAL_OK;
 80027c2:	2300      	movs	r3, #0
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3710      	adds	r7, #16
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b086      	sub	sp, #24
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	607a      	str	r2, [r7, #4]
 80027d6:	603b      	str	r3, [r7, #0]
 80027d8:	460b      	mov	r3, r1
 80027da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027dc:	7afb      	ldrb	r3, [r7, #11]
 80027de:	f003 0207 	and.w	r2, r3, #7
 80027e2:	4613      	mov	r3, r2
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	4413      	add	r3, r2
 80027e8:	00db      	lsls	r3, r3, #3
 80027ea:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80027ee:	68fa      	ldr	r2, [r7, #12]
 80027f0:	4413      	add	r3, r2
 80027f2:	3304      	adds	r3, #4
 80027f4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	683a      	ldr	r2, [r7, #0]
 8002800:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	2200      	movs	r2, #0
 8002806:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	2200      	movs	r2, #0
 800280c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800280e:	7afb      	ldrb	r3, [r7, #11]
 8002810:	f003 0307 	and.w	r3, r3, #7
 8002814:	b2da      	uxtb	r2, r3
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	6979      	ldr	r1, [r7, #20]
 8002820:	4618      	mov	r0, r3
 8002822:	f004 f8fb 	bl	8006a1c <USB_EPStartXfer>

  return HAL_OK;
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	3718      	adds	r7, #24
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	460b      	mov	r3, r1
 800283a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800283c:	78fb      	ldrb	r3, [r7, #3]
 800283e:	f003 0207 	and.w	r2, r3, #7
 8002842:	6879      	ldr	r1, [r7, #4]
 8002844:	4613      	mov	r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	4413      	add	r3, r2
 800284a:	00db      	lsls	r3, r3, #3
 800284c:	440b      	add	r3, r1
 800284e:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 8002852:	681b      	ldr	r3, [r3, #0]
}
 8002854:	4618      	mov	r0, r3
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	607a      	str	r2, [r7, #4]
 800286a:	603b      	str	r3, [r7, #0]
 800286c:	460b      	mov	r3, r1
 800286e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002870:	7afb      	ldrb	r3, [r7, #11]
 8002872:	f003 0207 	and.w	r2, r3, #7
 8002876:	4613      	mov	r3, r2
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	4413      	add	r3, r2
 800287c:	00db      	lsls	r3, r3, #3
 800287e:	3310      	adds	r3, #16
 8002880:	68fa      	ldr	r2, [r7, #12]
 8002882:	4413      	add	r3, r2
 8002884:	3304      	adds	r3, #4
 8002886:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	683a      	ldr	r2, [r7, #0]
 8002892:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	683a      	ldr	r2, [r7, #0]
 80028a0:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	2200      	movs	r2, #0
 80028a6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	2201      	movs	r2, #1
 80028ac:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028ae:	7afb      	ldrb	r3, [r7, #11]
 80028b0:	f003 0307 	and.w	r3, r3, #7
 80028b4:	b2da      	uxtb	r2, r3
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	6979      	ldr	r1, [r7, #20]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f004 f8ab 	bl	8006a1c <USB_EPStartXfer>

  return HAL_OK;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3718      	adds	r7, #24
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	460b      	mov	r3, r1
 80028da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80028dc:	78fb      	ldrb	r3, [r7, #3]
 80028de:	f003 0307 	and.w	r3, r3, #7
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	7912      	ldrb	r2, [r2, #4]
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d901      	bls.n	80028ee <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e040      	b.n	8002970 <HAL_PCD_EP_SetStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80028ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	da0f      	bge.n	8002916 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028f6:	78fb      	ldrb	r3, [r7, #3]
 80028f8:	f003 0207 	and.w	r2, r3, #7
 80028fc:	4613      	mov	r3, r2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	4413      	add	r3, r2
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	3310      	adds	r3, #16
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	4413      	add	r3, r2
 800290a:	3304      	adds	r3, #4
 800290c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2201      	movs	r2, #1
 8002912:	705a      	strb	r2, [r3, #1]
 8002914:	e00d      	b.n	8002932 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002916:	78fa      	ldrb	r2, [r7, #3]
 8002918:	4613      	mov	r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	4413      	add	r3, r2
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	4413      	add	r3, r2
 8002928:	3304      	adds	r3, #4
 800292a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2200      	movs	r2, #0
 8002930:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2201      	movs	r2, #1
 8002936:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002938:	78fb      	ldrb	r3, [r7, #3]
 800293a:	f003 0307 	and.w	r3, r3, #7
 800293e:	b2da      	uxtb	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 800294a:	2b01      	cmp	r3, #1
 800294c:	d101      	bne.n	8002952 <HAL_PCD_EP_SetStall+0x82>
 800294e:	2302      	movs	r3, #2
 8002950:	e00e      	b.n	8002970 <HAL_PCD_EP_SetStall+0xa0>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2201      	movs	r2, #1
 8002956:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	68f9      	ldr	r1, [r7, #12]
 8002960:	4618      	mov	r0, r3
 8002962:	f005 f8c5 	bl	8007af0 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	3710      	adds	r7, #16
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	460b      	mov	r3, r1
 8002982:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002984:	78fb      	ldrb	r3, [r7, #3]
 8002986:	f003 030f 	and.w	r3, r3, #15
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	7912      	ldrb	r2, [r2, #4]
 800298e:	4293      	cmp	r3, r2
 8002990:	d901      	bls.n	8002996 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e042      	b.n	8002a1c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002996:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800299a:	2b00      	cmp	r3, #0
 800299c:	da0f      	bge.n	80029be <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800299e:	78fb      	ldrb	r3, [r7, #3]
 80029a0:	f003 0207 	and.w	r2, r3, #7
 80029a4:	4613      	mov	r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	4413      	add	r3, r2
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	3310      	adds	r3, #16
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	4413      	add	r3, r2
 80029b2:	3304      	adds	r3, #4
 80029b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2201      	movs	r2, #1
 80029ba:	705a      	strb	r2, [r3, #1]
 80029bc:	e00f      	b.n	80029de <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029be:	78fb      	ldrb	r3, [r7, #3]
 80029c0:	f003 0207 	and.w	r2, r3, #7
 80029c4:	4613      	mov	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	4413      	add	r3, r2
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	4413      	add	r3, r2
 80029d4:	3304      	adds	r3, #4
 80029d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2200      	movs	r2, #0
 80029dc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2200      	movs	r2, #0
 80029e2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029e4:	78fb      	ldrb	r3, [r7, #3]
 80029e6:	f003 0307 	and.w	r3, r3, #7
 80029ea:	b2da      	uxtb	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d101      	bne.n	80029fe <HAL_PCD_EP_ClrStall+0x86>
 80029fa:	2302      	movs	r3, #2
 80029fc:	e00e      	b.n	8002a1c <HAL_PCD_EP_ClrStall+0xa4>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2201      	movs	r2, #1
 8002a02:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68f9      	ldr	r1, [r7, #12]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f005 f8b5 	bl	8007b7c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3710      	adds	r7, #16
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b08e      	sub	sp, #56	@ 0x38
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002a2c:	e326      	b.n	800307c <PCD_EP_ISR_Handler+0x658>
  {
    wIstr = (uint16_t)hpcd->Instance->ISTR;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a34:	847b      	strh	r3, [r7, #34]	@ 0x22

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_IDN);
 8002a36:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	f003 030f 	and.w	r3, r3, #15
 8002a3e:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

    if (epindex == 0U)
 8002a42:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	f040 8124 	bne.w	8002c94 <PCD_EP_ISR_Handler+0x270>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002a4c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002a4e:	f003 0310 	and.w	r3, r3, #16
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d13e      	bne.n	8002ad4 <PCD_EP_ISR_Handler+0xb0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	4b89      	ldr	r3, [pc, #548]	@ (8002c84 <PCD_EP_ISR_Handler+0x260>)
 8002a5e:	4013      	ands	r3, r2
 8002a60:	60bb      	str	r3, [r7, #8]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	68ba      	ldr	r2, [r7, #8]
 8002a68:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a6c:	601a      	str	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	3314      	adds	r3, #20
 8002a72:	637b      	str	r3, [r7, #52]	@ 0x34

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002a74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	00db      	lsls	r3, r3, #3
 8002a7a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002a7e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	0c1b      	lsrs	r3, r3, #16
 8002a86:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002a8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a8c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002a8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a90:	695a      	ldr	r2, [r3, #20]
 8002a92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a94:	69db      	ldr	r3, [r3, #28]
 8002a96:	441a      	add	r2, r3
 8002a98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a9a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f007 f90b 	bl	8009cba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	7c5b      	ldrb	r3, [r3, #17]
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	f000 82e6 	beq.w	800307c <PCD_EP_ISR_Handler+0x658>
 8002ab0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f040 82e1 	bne.w	800307c <PCD_EP_ISR_Handler+0x658>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	7c5b      	ldrb	r3, [r3, #17]
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002ac4:	b2da      	uxtb	r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	64da      	str	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	745a      	strb	r2, [r3, #17]
 8002ad2:	e2d3      	b.n	800307c <PCD_EP_ISR_Handler+0x658>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8002ada:	637b      	str	r3, [r7, #52]	@ 0x34
        wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	867b      	strh	r3, [r7, #50]	@ 0x32

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002ae4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002ae6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d027      	beq.n	8002b3e <PCD_EP_ISR_Handler+0x11a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	4619      	mov	r1, r3
 8002af8:	4610      	mov	r0, r2
 8002afa:	f7ff fb39 	bl	8002170 <PCD_GET_EP_RX_CNT>
 8002afe:	4603      	mov	r3, r0
 8002b00:	461a      	mov	r2, r3
 8002b02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b04:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6818      	ldr	r0, [r3, #0]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f503 7127 	add.w	r1, r3, #668	@ 0x29c
 8002b10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b12:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002b14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b16:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	f005 f956 	bl	8007dca <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	4b58      	ldr	r3, [pc, #352]	@ (8002c88 <PCD_EP_ISR_Handler+0x264>)
 8002b26:	4013      	ands	r3, r2
 8002b28:	60fb      	str	r3, [r7, #12]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002b34:	601a      	str	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f007 f892 	bl	8009c60 <HAL_PCD_SetupStageCallback>
 8002b3c:	e29e      	b.n	800307c <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_VTRX) != 0U)
 8002b3e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	f280 829a 	bge.w	800307c <PCD_EP_ISR_Handler+0x658>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	4b4e      	ldr	r3, [pc, #312]	@ (8002c88 <PCD_EP_ISR_Handler+0x264>)
 8002b50:	4013      	ands	r3, r2
 8002b52:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b5a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002b5e:	601a      	str	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	4619      	mov	r1, r3
 8002b6a:	4610      	mov	r0, r2
 8002b6c:	f7ff fb00 	bl	8002170 <PCD_GET_EP_RX_CNT>
 8002b70:	4603      	mov	r3, r0
 8002b72:	461a      	mov	r2, r3
 8002b74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b76:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002b78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b7a:	69db      	ldr	r3, [r3, #28]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d019      	beq.n	8002bb4 <PCD_EP_ISR_Handler+0x190>
 8002b80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b82:	695b      	ldr	r3, [r3, #20]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d015      	beq.n	8002bb4 <PCD_EP_ISR_Handler+0x190>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6818      	ldr	r0, [r3, #0]
 8002b8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b8e:	6959      	ldr	r1, [r3, #20]
 8002b90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b92:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002b94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b96:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	f005 f916 	bl	8007dca <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002b9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ba0:	695a      	ldr	r2, [r3, #20]
 8002ba2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ba4:	69db      	ldr	r3, [r3, #28]
 8002ba6:	441a      	add	r2, r3
 8002ba8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002baa:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002bac:	2100      	movs	r1, #0
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f007 f868 	bl	8009c84 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	867b      	strh	r3, [r7, #50]	@ 0x32

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002bbc:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002bbe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	f040 825a 	bne.w	800307c <PCD_EP_ISR_Handler+0x658>
 8002bc8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002bca:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002bce:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002bd2:	f000 8253 	beq.w	800307c <PCD_EP_ISR_Handler+0x658>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002bd6:	4b2d      	ldr	r3, [pc, #180]	@ (8002c8c <PCD_EP_ISR_Handler+0x268>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	4a2c      	ldr	r2, [pc, #176]	@ (8002c8c <PCD_EP_ISR_Handler+0x268>)
 8002bdc:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8002be0:	6053      	str	r3, [r2, #4]
 8002be2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d106      	bne.n	8002bf8 <PCD_EP_ISR_Handler+0x1d4>
 8002bea:	4b28      	ldr	r3, [pc, #160]	@ (8002c8c <PCD_EP_ISR_Handler+0x268>)
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	4a27      	ldr	r2, [pc, #156]	@ (8002c8c <PCD_EP_ISR_Handler+0x268>)
 8002bf0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002bf4:	6053      	str	r3, [r2, #4]
 8002bf6:	e02e      	b.n	8002c56 <PCD_EP_ISR_Handler+0x232>
 8002bf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bfa:	691b      	ldr	r3, [r3, #16]
 8002bfc:	2b3e      	cmp	r3, #62	@ 0x3e
 8002bfe:	d814      	bhi.n	8002c2a <PCD_EP_ISR_Handler+0x206>
 8002c00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	085b      	lsrs	r3, r3, #1
 8002c06:	617b      	str	r3, [r7, #20]
 8002c08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	f003 0301 	and.w	r3, r3, #1
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d002      	beq.n	8002c1a <PCD_EP_ISR_Handler+0x1f6>
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	3301      	adds	r3, #1
 8002c18:	617b      	str	r3, [r7, #20]
 8002c1a:	4b1c      	ldr	r3, [pc, #112]	@ (8002c8c <PCD_EP_ISR_Handler+0x268>)
 8002c1c:	685a      	ldr	r2, [r3, #4]
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	069b      	lsls	r3, r3, #26
 8002c22:	491a      	ldr	r1, [pc, #104]	@ (8002c8c <PCD_EP_ISR_Handler+0x268>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	604b      	str	r3, [r1, #4]
 8002c28:	e015      	b.n	8002c56 <PCD_EP_ISR_Handler+0x232>
 8002c2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	095b      	lsrs	r3, r3, #5
 8002c30:	617b      	str	r3, [r7, #20]
 8002c32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	f003 031f 	and.w	r3, r3, #31
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d102      	bne.n	8002c44 <PCD_EP_ISR_Handler+0x220>
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	3b01      	subs	r3, #1
 8002c42:	617b      	str	r3, [r7, #20]
 8002c44:	4b11      	ldr	r3, [pc, #68]	@ (8002c8c <PCD_EP_ISR_Handler+0x268>)
 8002c46:	685a      	ldr	r2, [r3, #4]
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	069b      	lsls	r3, r3, #26
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	4a0f      	ldr	r2, [pc, #60]	@ (8002c8c <PCD_EP_ISR_Handler+0x268>)
 8002c50:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002c54:	6053      	str	r3, [r2, #4]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	4b0c      	ldr	r3, [pc, #48]	@ (8002c90 <PCD_EP_ISR_Handler+0x26c>)
 8002c5e:	4013      	ands	r3, r2
 8002c60:	613b      	str	r3, [r7, #16]
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002c68:	613b      	str	r3, [r7, #16]
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002c70:	613b      	str	r3, [r7, #16]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c80:	6013      	str	r3, [r2, #0]
 8002c82:	e1fb      	b.n	800307c <PCD_EP_ISR_Handler+0x658>
 8002c84:	07ff8f0f 	.word	0x07ff8f0f
 8002c88:	07ff0f8f 	.word	0x07ff0f8f
 8002c8c:	40016400 	.word	0x40016400
 8002c90:	07ffbf8f 	.word	0x07ffbf8f
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	461a      	mov	r2, r3
 8002c9a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	4413      	add	r3, r2
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	867b      	strh	r3, [r7, #50]	@ 0x32

      if ((wEPVal & USB_EP_VTRX) != 0U)
 8002ca6:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	f280 80bd 	bge.w	8002e2a <PCD_EP_ISR_Handler+0x406>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	4413      	add	r3, r2
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	4b9e      	ldr	r3, [pc, #632]	@ (8002f3c <PCD_EP_ISR_Handler+0x518>)
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	61fb      	str	r3, [r7, #28]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	461a      	mov	r2, r3
 8002ccc:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	4413      	add	r3, r2
 8002cd4:	69fa      	ldr	r2, [r7, #28]
 8002cd6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002cda:	601a      	str	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002cdc:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	4413      	add	r3, r2
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	4413      	add	r3, r2
 8002cf0:	3304      	adds	r3, #4
 8002cf2:	637b      	str	r3, [r7, #52]	@ 0x34

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002cf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cf6:	7b1b      	ldrb	r3, [r3, #12]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d116      	bne.n	8002d2a <PCD_EP_ISR_Handler+0x306>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	4619      	mov	r1, r3
 8002d06:	4610      	mov	r0, r2
 8002d08:	f7ff fa32 	bl	8002170 <PCD_GET_EP_RX_CNT>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	84bb      	strh	r3, [r7, #36]	@ 0x24

          if (count != 0U)
 8002d10:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d067      	beq.n	8002de6 <PCD_EP_ISR_Handler+0x3c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6818      	ldr	r0, [r3, #0]
 8002d1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d1c:	6959      	ldr	r1, [r3, #20]
 8002d1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d20:	88da      	ldrh	r2, [r3, #6]
 8002d22:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002d24:	f005 f851 	bl	8007dca <USB_ReadPMA>
 8002d28:	e05d      	b.n	8002de6 <PCD_EP_ISR_Handler+0x3c2>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002d2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d2c:	78db      	ldrb	r3, [r3, #3]
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d108      	bne.n	8002d44 <PCD_EP_ISR_Handler+0x320>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002d32:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002d34:	461a      	mov	r2, r3
 8002d36:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f000 f9ad 	bl	8003098 <HAL_PCD_EP_DB_Receive>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8002d42:	e050      	b.n	8002de6 <PCD_EP_ISR_Handler+0x3c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	461a      	mov	r2, r3
 8002d4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	4413      	add	r3, r2
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	4b7a      	ldr	r3, [pc, #488]	@ (8002f40 <PCD_EP_ISR_Handler+0x51c>)
 8002d56:	4013      	ands	r3, r2
 8002d58:	61bb      	str	r3, [r7, #24]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	461a      	mov	r2, r3
 8002d60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	441a      	add	r2, r3
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d6e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002d72:	6013      	str	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	461a      	mov	r2, r3
 8002d7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	4413      	add	r3, r2
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d016      	beq.n	8002dba <PCD_EP_ISR_Handler+0x396>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	4619      	mov	r1, r3
 8002d96:	4610      	mov	r0, r2
 8002d98:	f7ff fa0b 	bl	80021b2 <PCD_GET_EP_DBUF0_CNT>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	84bb      	strh	r3, [r7, #36]	@ 0x24

              if (count != 0U)
 8002da0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d01f      	beq.n	8002de6 <PCD_EP_ISR_Handler+0x3c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6818      	ldr	r0, [r3, #0]
 8002daa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dac:	6959      	ldr	r1, [r3, #20]
 8002dae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002db0:	891a      	ldrh	r2, [r3, #8]
 8002db2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002db4:	f005 f809 	bl	8007dca <USB_ReadPMA>
 8002db8:	e015      	b.n	8002de6 <PCD_EP_ISR_Handler+0x3c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	4610      	mov	r0, r2
 8002dc6:	f7ff fa15 	bl	80021f4 <PCD_GET_EP_DBUF1_CNT>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	84bb      	strh	r3, [r7, #36]	@ 0x24

              if (count != 0U)
 8002dce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d008      	beq.n	8002de6 <PCD_EP_ISR_Handler+0x3c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6818      	ldr	r0, [r3, #0]
 8002dd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dda:	6959      	ldr	r1, [r3, #20]
 8002ddc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dde:	895a      	ldrh	r2, [r3, #10]
 8002de0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002de2:	f004 fff2 	bl	8007dca <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002de6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002de8:	69da      	ldr	r2, [r3, #28]
 8002dea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002dec:	441a      	add	r2, r3
 8002dee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002df0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002df2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002df4:	695a      	ldr	r2, [r3, #20]
 8002df6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002df8:	441a      	add	r2, r3
 8002dfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dfc:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002dfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d004      	beq.n	8002e10 <PCD_EP_ISR_Handler+0x3ec>
 8002e06:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002e08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d206      	bcs.n	8002e1e <PCD_EP_ISR_Handler+0x3fa>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002e10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	4619      	mov	r1, r3
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f006 ff34 	bl	8009c84 <HAL_PCD_DataOutStageCallback>
 8002e1c:	e005      	b.n	8002e2a <PCD_EP_ISR_Handler+0x406>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002e24:	4618      	mov	r0, r3
 8002e26:	f003 fdf9 	bl	8006a1c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_VTTX) != 0U)
 8002e2a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002e2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	f000 8123 	beq.w	800307c <PCD_EP_ISR_Handler+0x658>
      {
        ep = &hpcd->IN_ep[epindex];
 8002e36:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	4413      	add	r3, r2
 8002e40:	00db      	lsls	r3, r3, #3
 8002e42:	3310      	adds	r3, #16
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	4413      	add	r3, r2
 8002e48:	3304      	adds	r3, #4
 8002e4a:	637b      	str	r3, [r7, #52]	@ 0x34

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	461a      	mov	r2, r3
 8002e52:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	4413      	add	r3, r2
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	4b39      	ldr	r3, [pc, #228]	@ (8002f44 <PCD_EP_ISR_Handler+0x520>)
 8002e5e:	4013      	ands	r3, r2
 8002e60:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	461a      	mov	r2, r3
 8002e68:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	4413      	add	r3, r2
 8002e70:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e72:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e76:	601a      	str	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002e78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e7a:	78db      	ldrb	r3, [r3, #3]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	f040 80b8 	bne.w	8002ff2 <PCD_EP_ISR_Handler+0x5ce>
        {
          ep->xfer_len = 0U;
 8002e82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e84:	2200      	movs	r2, #0
 8002e86:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002e88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e8a:	7b1b      	ldrb	r3, [r3, #12]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	f000 80a9 	beq.w	8002fe4 <PCD_EP_ISR_Handler+0x5c0>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002e92:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002e94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d055      	beq.n	8002f48 <PCD_EP_ISR_Handler+0x524>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e9e:	785b      	ldrb	r3, [r3, #1]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d124      	bne.n	8002eee <PCD_EP_ISR_Handler+0x4ca>
 8002ea4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	00db      	lsls	r3, r3, #3
 8002eaa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002eae:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	00db      	lsls	r3, r3, #3
 8002eba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002ebe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002ec2:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8002ec6:	601a      	str	r2, [r3, #0]
 8002ec8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	00db      	lsls	r3, r3, #3
 8002ece:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002ed2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	00db      	lsls	r3, r3, #3
 8002ede:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002ee2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002ee6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002eea:	601a      	str	r2, [r3, #0]
 8002eec:	e07a      	b.n	8002fe4 <PCD_EP_ISR_Handler+0x5c0>
 8002eee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ef0:	785b      	ldrb	r3, [r3, #1]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d176      	bne.n	8002fe4 <PCD_EP_ISR_Handler+0x5c0>
 8002ef6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002f00:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	00db      	lsls	r3, r3, #3
 8002f0c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002f10:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002f14:	b292      	uxth	r2, r2
 8002f16:	601a      	str	r2, [r3, #0]
 8002f18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	00db      	lsls	r3, r3, #3
 8002f1e:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8002f22:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8002f26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	00db      	lsls	r3, r3, #3
 8002f2c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002f30:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002f34:	6812      	ldr	r2, [r2, #0]
 8002f36:	601a      	str	r2, [r3, #0]
 8002f38:	e054      	b.n	8002fe4 <PCD_EP_ISR_Handler+0x5c0>
 8002f3a:	bf00      	nop
 8002f3c:	07ff0f8f 	.word	0x07ff0f8f
 8002f40:	07ff8f8f 	.word	0x07ff8f8f
 8002f44:	07ff8f0f 	.word	0x07ff8f0f
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f4a:	785b      	ldrb	r3, [r3, #1]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d124      	bne.n	8002f9a <PCD_EP_ISR_Handler+0x576>
 8002f50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	00db      	lsls	r3, r3, #3
 8002f56:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002f5a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002f5e:	685a      	ldr	r2, [r3, #4]
 8002f60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	00db      	lsls	r3, r3, #3
 8002f66:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002f6a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002f6e:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8002f72:	605a      	str	r2, [r3, #4]
 8002f74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	00db      	lsls	r3, r3, #3
 8002f7a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002f7e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002f82:	685a      	ldr	r2, [r3, #4]
 8002f84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	00db      	lsls	r3, r3, #3
 8002f8a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002f8e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002f92:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002f96:	605a      	str	r2, [r3, #4]
 8002f98:	e024      	b.n	8002fe4 <PCD_EP_ISR_Handler+0x5c0>
 8002f9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f9c:	785b      	ldrb	r3, [r3, #1]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d120      	bne.n	8002fe4 <PCD_EP_ISR_Handler+0x5c0>
 8002fa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002fac:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002fb0:	685a      	ldr	r2, [r3, #4]
 8002fb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	00db      	lsls	r3, r3, #3
 8002fb8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002fbc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002fc0:	b292      	uxth	r2, r2
 8002fc2:	605a      	str	r2, [r3, #4]
 8002fc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	00db      	lsls	r3, r3, #3
 8002fca:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8002fce:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8002fd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	00db      	lsls	r3, r3, #3
 8002fd8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002fdc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002fe0:	6852      	ldr	r2, [r2, #4]
 8002fe2:	605a      	str	r2, [r3, #4]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002fe4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	4619      	mov	r1, r3
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f006 fe65 	bl	8009cba <HAL_PCD_DataInStageCallback>
 8002ff0:	e044      	b.n	800307c <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002ff2:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002ff4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d139      	bne.n	8003070 <PCD_EP_ISR_Handler+0x64c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002ffc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	00db      	lsls	r3, r3, #3
 8003002:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003006:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	0c1b      	lsrs	r3, r3, #16
 800300e:	b29b      	uxth	r3, r3
 8003010:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003014:	84fb      	strh	r3, [r7, #38]	@ 0x26

            if (ep->xfer_len > TxPctSize)
 8003016:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003018:	699a      	ldr	r2, [r3, #24]
 800301a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800301c:	429a      	cmp	r2, r3
 800301e:	d906      	bls.n	800302e <PCD_EP_ISR_Handler+0x60a>
            {
              ep->xfer_len -= TxPctSize;
 8003020:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003022:	699a      	ldr	r2, [r3, #24]
 8003024:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003026:	1ad2      	subs	r2, r2, r3
 8003028:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800302a:	619a      	str	r2, [r3, #24]
 800302c:	e002      	b.n	8003034 <PCD_EP_ISR_Handler+0x610>
            }
            else
            {
              ep->xfer_len = 0U;
 800302e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003030:	2200      	movs	r2, #0
 8003032:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003034:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003036:	699b      	ldr	r3, [r3, #24]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d106      	bne.n	800304a <PCD_EP_ISR_Handler+0x626>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800303c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	4619      	mov	r1, r3
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f006 fe39 	bl	8009cba <HAL_PCD_DataInStageCallback>
 8003048:	e018      	b.n	800307c <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800304a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800304c:	695a      	ldr	r2, [r3, #20]
 800304e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003050:	441a      	add	r2, r3
 8003052:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003054:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003056:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003058:	69da      	ldr	r2, [r3, #28]
 800305a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800305c:	441a      	add	r2, r3
 800305e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003060:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003068:	4618      	mov	r0, r3
 800306a:	f003 fcd7 	bl	8006a1c <USB_EPStartXfer>
 800306e:	e005      	b.n	800307c <PCD_EP_ISR_Handler+0x658>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003070:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003072:	461a      	mov	r2, r3
 8003074:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 f8e8 	bl	800324c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003082:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003086:	2b00      	cmp	r3, #0
 8003088:	f47f acd1 	bne.w	8002a2e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3738      	adds	r7, #56	@ 0x38
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop

08003098 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b08a      	sub	sp, #40	@ 0x28
 800309c:	af00      	add	r7, sp, #0
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	60b9      	str	r1, [r7, #8]
 80030a2:	4613      	mov	r3, r2
 80030a4:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80030a6:	88fb      	ldrh	r3, [r7, #6]
 80030a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d062      	beq.n	8003176 <HAL_PCD_EP_DB_Receive+0xde>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	4619      	mov	r1, r3
 80030ba:	4610      	mov	r0, r2
 80030bc:	f7ff f879 	bl	80021b2 <PCD_GET_EP_DBUF0_CNT>
 80030c0:	4603      	mov	r3, r0
 80030c2:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	699a      	ldr	r2, [r3, #24]
 80030c8:	8bfb      	ldrh	r3, [r7, #30]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d306      	bcc.n	80030dc <HAL_PCD_EP_DB_Receive+0x44>
    {
      ep->xfer_len -= count;
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	699a      	ldr	r2, [r3, #24]
 80030d2:	8bfb      	ldrh	r3, [r7, #30]
 80030d4:	1ad2      	subs	r2, r2, r3
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	619a      	str	r2, [r3, #24]
 80030da:	e002      	b.n	80030e2 <HAL_PCD_EP_DB_Receive+0x4a>
    }
    else
    {
      ep->xfer_len = 0U;
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	2200      	movs	r2, #0
 80030e0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d11b      	bne.n	8003122 <HAL_PCD_EP_DB_Receive+0x8a>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	461a      	mov	r2, r3
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	4413      	add	r3, r2
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	4b52      	ldr	r3, [pc, #328]	@ (8003244 <HAL_PCD_EP_DB_Receive+0x1ac>)
 80030fc:	4013      	ands	r3, r2
 80030fe:	61bb      	str	r3, [r7, #24]
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003106:	61bb      	str	r3, [r7, #24]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	461a      	mov	r2, r3
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	441a      	add	r2, r3
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800311c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003120:	6013      	str	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003122:	88fb      	ldrh	r3, [r7, #6]
 8003124:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003128:	2b00      	cmp	r3, #0
 800312a:	d017      	beq.n	800315c <HAL_PCD_EP_DB_Receive+0xc4>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	461a      	mov	r2, r3
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	4413      	add	r3, r2
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	4b42      	ldr	r3, [pc, #264]	@ (8003248 <HAL_PCD_EP_DB_Receive+0x1b0>)
 800313e:	4013      	ands	r3, r2
 8003140:	617b      	str	r3, [r7, #20]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	461a      	mov	r2, r3
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	441a      	add	r2, r3
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003156:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800315a:	6013      	str	r3, [r2, #0]
    }

    if (count != 0U)
 800315c:	8bfb      	ldrh	r3, [r7, #30]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d06b      	beq.n	800323a <HAL_PCD_EP_DB_Receive+0x1a2>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6818      	ldr	r0, [r3, #0]
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	6959      	ldr	r1, [r3, #20]
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	891a      	ldrh	r2, [r3, #8]
 800316e:	8bfb      	ldrh	r3, [r7, #30]
 8003170:	f004 fe2b 	bl	8007dca <USB_ReadPMA>
 8003174:	e061      	b.n	800323a <HAL_PCD_EP_DB_Receive+0x1a2>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	4619      	mov	r1, r3
 8003180:	4610      	mov	r0, r2
 8003182:	f7ff f837 	bl	80021f4 <PCD_GET_EP_DBUF1_CNT>
 8003186:	4603      	mov	r3, r0
 8003188:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	699a      	ldr	r2, [r3, #24]
 800318e:	8bfb      	ldrh	r3, [r7, #30]
 8003190:	429a      	cmp	r2, r3
 8003192:	d306      	bcc.n	80031a2 <HAL_PCD_EP_DB_Receive+0x10a>
    {
      ep->xfer_len -= count;
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	699a      	ldr	r2, [r3, #24]
 8003198:	8bfb      	ldrh	r3, [r7, #30]
 800319a:	1ad2      	subs	r2, r2, r3
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	619a      	str	r2, [r3, #24]
 80031a0:	e002      	b.n	80031a8 <HAL_PCD_EP_DB_Receive+0x110>
    }
    else
    {
      ep->xfer_len = 0U;
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	2200      	movs	r2, #0
 80031a6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d11b      	bne.n	80031e8 <HAL_PCD_EP_DB_Receive+0x150>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	461a      	mov	r2, r3
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	4413      	add	r3, r2
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	4b20      	ldr	r3, [pc, #128]	@ (8003244 <HAL_PCD_EP_DB_Receive+0x1ac>)
 80031c2:	4013      	ands	r3, r2
 80031c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80031c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80031cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	461a      	mov	r2, r3
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	441a      	add	r2, r3
 80031dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80031e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031e6:	6013      	str	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80031e8:	88fb      	ldrh	r3, [r7, #6]
 80031ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d117      	bne.n	8003222 <HAL_PCD_EP_DB_Receive+0x18a>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	461a      	mov	r2, r3
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	4413      	add	r3, r2
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	4b11      	ldr	r3, [pc, #68]	@ (8003248 <HAL_PCD_EP_DB_Receive+0x1b0>)
 8003204:	4013      	ands	r3, r2
 8003206:	623b      	str	r3, [r7, #32]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	461a      	mov	r2, r3
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	441a      	add	r2, r3
 8003216:	6a3b      	ldr	r3, [r7, #32]
 8003218:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800321c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003220:	6013      	str	r3, [r2, #0]
    }

    if (count != 0U)
 8003222:	8bfb      	ldrh	r3, [r7, #30]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d008      	beq.n	800323a <HAL_PCD_EP_DB_Receive+0x1a2>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6818      	ldr	r0, [r3, #0]
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	6959      	ldr	r1, [r3, #20]
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	895a      	ldrh	r2, [r3, #10]
 8003234:	8bfb      	ldrh	r3, [r7, #30]
 8003236:	f004 fdc8 	bl	8007dca <USB_ReadPMA>
    }
  }

  return count;
 800323a:	8bfb      	ldrh	r3, [r7, #30]
}
 800323c:	4618      	mov	r0, r3
 800323e:	3728      	adds	r7, #40	@ 0x28
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}
 8003244:	07ffbf8f 	.word	0x07ffbf8f
 8003248:	07ff8f8f 	.word	0x07ff8f8f

0800324c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b08e      	sub	sp, #56	@ 0x38
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	4613      	mov	r3, r2
 8003258:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800325a:	88fb      	ldrh	r3, [r7, #6]
 800325c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003260:	2b00      	cmp	r3, #0
 8003262:	f000 81d5 	beq.w	8003610 <HAL_PCD_EP_DB_Transmit+0x3c4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	4619      	mov	r1, r3
 8003270:	4610      	mov	r0, r2
 8003272:	f7fe ff9e 	bl	80021b2 <PCD_GET_EP_DBUF0_CNT>
 8003276:	4603      	mov	r3, r0
 8003278:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len > TxPctSize)
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	699a      	ldr	r2, [r3, #24]
 800327e:	8bfb      	ldrh	r3, [r7, #30]
 8003280:	429a      	cmp	r2, r3
 8003282:	d906      	bls.n	8003292 <HAL_PCD_EP_DB_Transmit+0x46>
    {
      ep->xfer_len -= TxPctSize;
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	699a      	ldr	r2, [r3, #24]
 8003288:	8bfb      	ldrh	r3, [r7, #30]
 800328a:	1ad2      	subs	r2, r2, r3
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	619a      	str	r2, [r3, #24]
 8003290:	e002      	b.n	8003298 <HAL_PCD_EP_DB_Transmit+0x4c>
    }
    else
    {
      ep->xfer_len = 0U;
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	2200      	movs	r2, #0
 8003296:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	2b00      	cmp	r3, #0
 800329e:	f040 80c1 	bne.w	8003424 <HAL_PCD_EP_DB_Transmit+0x1d8>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	785b      	ldrb	r3, [r3, #1]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d124      	bne.n	80032f4 <HAL_PCD_EP_DB_Transmit+0xa8>
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	00db      	lsls	r3, r3, #3
 80032b0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80032b4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	00db      	lsls	r3, r3, #3
 80032c0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80032c4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80032c8:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80032cc:	601a      	str	r2, [r3, #0]
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	00db      	lsls	r3, r3, #3
 80032d4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80032d8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	00db      	lsls	r3, r3, #3
 80032e4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80032e8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80032ec:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80032f0:	601a      	str	r2, [r3, #0]
 80032f2:	e024      	b.n	800333e <HAL_PCD_EP_DB_Transmit+0xf2>
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	785b      	ldrb	r3, [r3, #1]
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d120      	bne.n	800333e <HAL_PCD_EP_DB_Transmit+0xf2>
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	00db      	lsls	r3, r3, #3
 8003302:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003306:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	00db      	lsls	r3, r3, #3
 8003312:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003316:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800331a:	b292      	uxth	r2, r2
 800331c:	601a      	str	r2, [r3, #0]
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	00db      	lsls	r3, r3, #3
 8003324:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8003328:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	00db      	lsls	r3, r3, #3
 8003332:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003336:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800333a:	6812      	ldr	r2, [r2, #0]
 800333c:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	785b      	ldrb	r3, [r3, #1]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d124      	bne.n	8003390 <HAL_PCD_EP_DB_Transmit+0x144>
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	00db      	lsls	r3, r3, #3
 800334c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003350:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003354:	685a      	ldr	r2, [r3, #4]
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	00db      	lsls	r3, r3, #3
 800335c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003360:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003364:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8003368:	605a      	str	r2, [r3, #4]
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	00db      	lsls	r3, r3, #3
 8003370:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003374:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003378:	685a      	ldr	r2, [r3, #4]
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	00db      	lsls	r3, r3, #3
 8003380:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003384:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003388:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800338c:	605a      	str	r2, [r3, #4]
 800338e:	e024      	b.n	80033da <HAL_PCD_EP_DB_Transmit+0x18e>
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	785b      	ldrb	r3, [r3, #1]
 8003394:	2b01      	cmp	r3, #1
 8003396:	d120      	bne.n	80033da <HAL_PCD_EP_DB_Transmit+0x18e>
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	00db      	lsls	r3, r3, #3
 800339e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80033a2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80033a6:	685a      	ldr	r2, [r3, #4]
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	00db      	lsls	r3, r3, #3
 80033ae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80033b2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80033b6:	b292      	uxth	r2, r2
 80033b8:	605a      	str	r2, [r3, #4]
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	00db      	lsls	r3, r3, #3
 80033c0:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 80033c4:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	00db      	lsls	r3, r3, #3
 80033ce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80033d2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80033d6:	6852      	ldr	r2, [r2, #4]
 80033d8:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	4619      	mov	r1, r3
 80033e0:	68f8      	ldr	r0, [r7, #12]
 80033e2:	f006 fc6a 	bl	8009cba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80033e6:	88fb      	ldrh	r3, [r7, #6]
 80033e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	f000 82e5 	beq.w	80039bc <HAL_PCD_EP_DB_Transmit+0x770>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	461a      	mov	r2, r3
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	4413      	add	r3, r2
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	4b8e      	ldr	r3, [pc, #568]	@ (800363c <HAL_PCD_EP_DB_Transmit+0x3f0>)
 8003404:	4013      	ands	r3, r2
 8003406:	637b      	str	r3, [r7, #52]	@ 0x34
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	461a      	mov	r2, r3
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	441a      	add	r2, r3
 8003416:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003418:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800341c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003420:	6013      	str	r3, [r2, #0]
 8003422:	e2cb      	b.n	80039bc <HAL_PCD_EP_DB_Transmit+0x770>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003424:	88fb      	ldrh	r3, [r7, #6]
 8003426:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d017      	beq.n	800345e <HAL_PCD_EP_DB_Transmit+0x212>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	461a      	mov	r2, r3
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	4413      	add	r3, r2
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	4b7f      	ldr	r3, [pc, #508]	@ (800363c <HAL_PCD_EP_DB_Transmit+0x3f0>)
 8003440:	4013      	ands	r3, r2
 8003442:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	461a      	mov	r2, r3
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	441a      	add	r2, r3
 8003452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003454:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003458:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800345c:	6013      	str	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003464:	2b01      	cmp	r3, #1
 8003466:	f040 82a9 	bne.w	80039bc <HAL_PCD_EP_DB_Transmit+0x770>
      {
        ep->xfer_buff += TxPctSize;
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	695a      	ldr	r2, [r3, #20]
 800346e:	8bfb      	ldrh	r3, [r7, #30]
 8003470:	441a      	add	r2, r3
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	69da      	ldr	r2, [r3, #28]
 800347a:	8bfb      	ldrh	r3, [r7, #30]
 800347c:	441a      	add	r2, r3
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	6a1a      	ldr	r2, [r3, #32]
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	429a      	cmp	r2, r3
 800348c:	d309      	bcc.n	80034a2 <HAL_PCD_EP_DB_Transmit+0x256>
        {
          len = ep->maxpacket;
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	6a1a      	ldr	r2, [r3, #32]
 8003498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800349a:	1ad2      	subs	r2, r2, r3
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	621a      	str	r2, [r3, #32]
 80034a0:	e014      	b.n	80034cc <HAL_PCD_EP_DB_Transmit+0x280>
        }
        else if (ep->xfer_len_db == 0U)
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	6a1b      	ldr	r3, [r3, #32]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d106      	bne.n	80034b8 <HAL_PCD_EP_DB_Transmit+0x26c>
        {
          len = TxPctSize;
 80034aa:	8bfb      	ldrh	r3, [r7, #30]
 80034ac:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80034b6:	e009      	b.n	80034cc <HAL_PCD_EP_DB_Transmit+0x280>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	6a1b      	ldr	r3, [r3, #32]
 80034c4:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	2200      	movs	r2, #0
 80034ca:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	785b      	ldrb	r3, [r3, #1]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d16a      	bne.n	80035aa <HAL_PCD_EP_DB_Transmit+0x35e>
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	00db      	lsls	r3, r3, #3
 80034da:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80034de:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	00db      	lsls	r3, r3, #3
 80034ea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80034ee:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80034f2:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80034f6:	601a      	str	r2, [r3, #0]
 80034f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d112      	bne.n	8003524 <HAL_PCD_EP_DB_Transmit+0x2d8>
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	00db      	lsls	r3, r3, #3
 8003504:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003508:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	00db      	lsls	r3, r3, #3
 8003514:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003518:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800351c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003520:	601a      	str	r2, [r3, #0]
 8003522:	e06a      	b.n	80035fa <HAL_PCD_EP_DB_Transmit+0x3ae>
 8003524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003526:	2b3e      	cmp	r3, #62	@ 0x3e
 8003528:	d81e      	bhi.n	8003568 <HAL_PCD_EP_DB_Transmit+0x31c>
 800352a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800352c:	085b      	lsrs	r3, r3, #1
 800352e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	2b00      	cmp	r3, #0
 8003538:	d002      	beq.n	8003540 <HAL_PCD_EP_DB_Transmit+0x2f4>
 800353a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800353c:	3301      	adds	r3, #1
 800353e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	00db      	lsls	r3, r3, #3
 8003546:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800354a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800354e:	6819      	ldr	r1, [r3, #0]
 8003550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003552:	069a      	lsls	r2, r3, #26
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	00db      	lsls	r3, r3, #3
 800355a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800355e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003562:	430a      	orrs	r2, r1
 8003564:	601a      	str	r2, [r3, #0]
 8003566:	e048      	b.n	80035fa <HAL_PCD_EP_DB_Transmit+0x3ae>
 8003568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800356a:	095b      	lsrs	r3, r3, #5
 800356c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800356e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003570:	f003 031f 	and.w	r3, r3, #31
 8003574:	2b00      	cmp	r3, #0
 8003576:	d102      	bne.n	800357e <HAL_PCD_EP_DB_Transmit+0x332>
 8003578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800357a:	3b01      	subs	r3, #1
 800357c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	00db      	lsls	r3, r3, #3
 8003584:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003588:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003590:	069b      	lsls	r3, r3, #26
 8003592:	431a      	orrs	r2, r3
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	00db      	lsls	r3, r3, #3
 800359a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800359e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80035a2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80035a6:	601a      	str	r2, [r3, #0]
 80035a8:	e027      	b.n	80035fa <HAL_PCD_EP_DB_Transmit+0x3ae>
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	785b      	ldrb	r3, [r3, #1]
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d123      	bne.n	80035fa <HAL_PCD_EP_DB_Transmit+0x3ae>
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	00db      	lsls	r3, r3, #3
 80035b8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80035bc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	00db      	lsls	r3, r3, #3
 80035c8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80035cc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80035d0:	b292      	uxth	r2, r2
 80035d2:	601a      	str	r2, [r3, #0]
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	00db      	lsls	r3, r3, #3
 80035da:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80035de:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80035e2:	6819      	ldr	r1, [r3, #0]
 80035e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e6:	041a      	lsls	r2, r3, #16
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	00db      	lsls	r3, r3, #3
 80035ee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80035f2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80035f6:	430a      	orrs	r2, r1
 80035f8:	601a      	str	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6818      	ldr	r0, [r3, #0]
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	6959      	ldr	r1, [r3, #20]
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	891a      	ldrh	r2, [r3, #8]
 8003606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003608:	b29b      	uxth	r3, r3
 800360a:	f004 fb7d 	bl	8007d08 <USB_WritePMA>
 800360e:	e1d5      	b.n	80039bc <HAL_PCD_EP_DB_Transmit+0x770>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	4619      	mov	r1, r3
 800361a:	4610      	mov	r0, r2
 800361c:	f7fe fdea 	bl	80021f4 <PCD_GET_EP_DBUF1_CNT>
 8003620:	4603      	mov	r3, r0
 8003622:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= TxPctSize)
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	699a      	ldr	r2, [r3, #24]
 8003628:	8bfb      	ldrh	r3, [r7, #30]
 800362a:	429a      	cmp	r2, r3
 800362c:	d308      	bcc.n	8003640 <HAL_PCD_EP_DB_Transmit+0x3f4>
    {
      ep->xfer_len -= TxPctSize;
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	699a      	ldr	r2, [r3, #24]
 8003632:	8bfb      	ldrh	r3, [r7, #30]
 8003634:	1ad2      	subs	r2, r2, r3
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	619a      	str	r2, [r3, #24]
 800363a:	e004      	b.n	8003646 <HAL_PCD_EP_DB_Transmit+0x3fa>
 800363c:	07ff8f8f 	.word	0x07ff8f8f
    }
    else
    {
      ep->xfer_len = 0U;
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	2200      	movs	r2, #0
 8003644:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	2b00      	cmp	r3, #0
 800364c:	f040 80c1 	bne.w	80037d2 <HAL_PCD_EP_DB_Transmit+0x586>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	785b      	ldrb	r3, [r3, #1]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d124      	bne.n	80036a2 <HAL_PCD_EP_DB_Transmit+0x456>
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	00db      	lsls	r3, r3, #3
 800365e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003662:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	00db      	lsls	r3, r3, #3
 800366e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003672:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003676:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800367a:	601a      	str	r2, [r3, #0]
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	00db      	lsls	r3, r3, #3
 8003682:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003686:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	00db      	lsls	r3, r3, #3
 8003692:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003696:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800369a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800369e:	601a      	str	r2, [r3, #0]
 80036a0:	e024      	b.n	80036ec <HAL_PCD_EP_DB_Transmit+0x4a0>
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	785b      	ldrb	r3, [r3, #1]
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d120      	bne.n	80036ec <HAL_PCD_EP_DB_Transmit+0x4a0>
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	00db      	lsls	r3, r3, #3
 80036b0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80036b4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	00db      	lsls	r3, r3, #3
 80036c0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80036c4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80036c8:	b292      	uxth	r2, r2
 80036ca:	601a      	str	r2, [r3, #0]
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	00db      	lsls	r3, r3, #3
 80036d2:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 80036d6:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	00db      	lsls	r3, r3, #3
 80036e0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80036e4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80036e8:	6812      	ldr	r2, [r2, #0]
 80036ea:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	785b      	ldrb	r3, [r3, #1]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d124      	bne.n	800373e <HAL_PCD_EP_DB_Transmit+0x4f2>
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	00db      	lsls	r3, r3, #3
 80036fa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80036fe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003702:	685a      	ldr	r2, [r3, #4]
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	00db      	lsls	r3, r3, #3
 800370a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800370e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003712:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8003716:	605a      	str	r2, [r3, #4]
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	00db      	lsls	r3, r3, #3
 800371e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003722:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003726:	685a      	ldr	r2, [r3, #4]
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	00db      	lsls	r3, r3, #3
 800372e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003732:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003736:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800373a:	605a      	str	r2, [r3, #4]
 800373c:	e024      	b.n	8003788 <HAL_PCD_EP_DB_Transmit+0x53c>
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	785b      	ldrb	r3, [r3, #1]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d120      	bne.n	8003788 <HAL_PCD_EP_DB_Transmit+0x53c>
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	00db      	lsls	r3, r3, #3
 800374c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003750:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003754:	685a      	ldr	r2, [r3, #4]
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	00db      	lsls	r3, r3, #3
 800375c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003760:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003764:	b292      	uxth	r2, r2
 8003766:	605a      	str	r2, [r3, #4]
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	00db      	lsls	r3, r3, #3
 800376e:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8003772:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	00db      	lsls	r3, r3, #3
 800377c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003780:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003784:	6852      	ldr	r2, [r2, #4]
 8003786:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	4619      	mov	r1, r3
 800378e:	68f8      	ldr	r0, [r7, #12]
 8003790:	f006 fa93 	bl	8009cba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003794:	88fb      	ldrh	r3, [r7, #6]
 8003796:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800379a:	2b00      	cmp	r3, #0
 800379c:	f040 810e 	bne.w	80039bc <HAL_PCD_EP_DB_Transmit+0x770>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	461a      	mov	r2, r3
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	4413      	add	r3, r2
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	4b95      	ldr	r3, [pc, #596]	@ (8003a08 <HAL_PCD_EP_DB_Transmit+0x7bc>)
 80037b2:	4013      	ands	r3, r2
 80037b4:	623b      	str	r3, [r7, #32]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	461a      	mov	r2, r3
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	441a      	add	r2, r3
 80037c4:	6a3b      	ldr	r3, [r7, #32]
 80037c6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80037ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80037ce:	6013      	str	r3, [r2, #0]
 80037d0:	e0f4      	b.n	80039bc <HAL_PCD_EP_DB_Transmit+0x770>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80037d2:	88fb      	ldrh	r3, [r7, #6]
 80037d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d117      	bne.n	800380c <HAL_PCD_EP_DB_Transmit+0x5c0>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	461a      	mov	r2, r3
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	4413      	add	r3, r2
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	4b86      	ldr	r3, [pc, #536]	@ (8003a08 <HAL_PCD_EP_DB_Transmit+0x7bc>)
 80037ee:	4013      	ands	r3, r2
 80037f0:	617b      	str	r3, [r7, #20]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	461a      	mov	r2, r3
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	441a      	add	r2, r3
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003806:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800380a:	6013      	str	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003812:	2b01      	cmp	r3, #1
 8003814:	f040 80d2 	bne.w	80039bc <HAL_PCD_EP_DB_Transmit+0x770>
      {
        ep->xfer_buff += TxPctSize;
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	695a      	ldr	r2, [r3, #20]
 800381c:	8bfb      	ldrh	r3, [r7, #30]
 800381e:	441a      	add	r2, r3
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	69da      	ldr	r2, [r3, #28]
 8003828:	8bfb      	ldrh	r3, [r7, #30]
 800382a:	441a      	add	r2, r3
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	6a1a      	ldr	r2, [r3, #32]
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	429a      	cmp	r2, r3
 800383a:	d309      	bcc.n	8003850 <HAL_PCD_EP_DB_Transmit+0x604>
        {
          len = ep->maxpacket;
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	691b      	ldr	r3, [r3, #16]
 8003840:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	6a1a      	ldr	r2, [r3, #32]
 8003846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003848:	1ad2      	subs	r2, r2, r3
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	621a      	str	r2, [r3, #32]
 800384e:	e014      	b.n	800387a <HAL_PCD_EP_DB_Transmit+0x62e>
        }
        else if (ep->xfer_len_db == 0U)
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	6a1b      	ldr	r3, [r3, #32]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d106      	bne.n	8003866 <HAL_PCD_EP_DB_Transmit+0x61a>
        {
          len = TxPctSize;
 8003858:	8bfb      	ldrh	r3, [r7, #30]
 800385a:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003864:	e009      	b.n	800387a <HAL_PCD_EP_DB_Transmit+0x62e>
        }
        else
        {
          len = ep->xfer_len_db;
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	6a1b      	ldr	r3, [r3, #32]
 800386a:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	2200      	movs	r2, #0
 8003870:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	785b      	ldrb	r3, [r3, #1]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d16a      	bne.n	8003958 <HAL_PCD_EP_DB_Transmit+0x70c>
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	00db      	lsls	r3, r3, #3
 8003888:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800388c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003890:	685a      	ldr	r2, [r3, #4]
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	00db      	lsls	r3, r3, #3
 8003898:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800389c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80038a0:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80038a4:	605a      	str	r2, [r3, #4]
 80038a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d112      	bne.n	80038d2 <HAL_PCD_EP_DB_Transmit+0x686>
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	00db      	lsls	r3, r3, #3
 80038b2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80038b6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80038ba:	685a      	ldr	r2, [r3, #4]
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	00db      	lsls	r3, r3, #3
 80038c2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80038c6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80038ca:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80038ce:	605a      	str	r2, [r3, #4]
 80038d0:	e06a      	b.n	80039a8 <HAL_PCD_EP_DB_Transmit+0x75c>
 80038d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d4:	2b3e      	cmp	r3, #62	@ 0x3e
 80038d6:	d81e      	bhi.n	8003916 <HAL_PCD_EP_DB_Transmit+0x6ca>
 80038d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038da:	085b      	lsrs	r3, r3, #1
 80038dc:	61bb      	str	r3, [r7, #24]
 80038de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e0:	f003 0301 	and.w	r3, r3, #1
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d002      	beq.n	80038ee <HAL_PCD_EP_DB_Transmit+0x6a2>
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	3301      	adds	r3, #1
 80038ec:	61bb      	str	r3, [r7, #24]
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	00db      	lsls	r3, r3, #3
 80038f4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80038f8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80038fc:	6859      	ldr	r1, [r3, #4]
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	069a      	lsls	r2, r3, #26
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	00db      	lsls	r3, r3, #3
 8003908:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800390c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003910:	430a      	orrs	r2, r1
 8003912:	605a      	str	r2, [r3, #4]
 8003914:	e048      	b.n	80039a8 <HAL_PCD_EP_DB_Transmit+0x75c>
 8003916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003918:	095b      	lsrs	r3, r3, #5
 800391a:	61bb      	str	r3, [r7, #24]
 800391c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800391e:	f003 031f 	and.w	r3, r3, #31
 8003922:	2b00      	cmp	r3, #0
 8003924:	d102      	bne.n	800392c <HAL_PCD_EP_DB_Transmit+0x6e0>
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	3b01      	subs	r3, #1
 800392a:	61bb      	str	r3, [r7, #24]
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	00db      	lsls	r3, r3, #3
 8003932:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003936:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800393a:	685a      	ldr	r2, [r3, #4]
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	069b      	lsls	r3, r3, #26
 8003940:	431a      	orrs	r2, r3
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	00db      	lsls	r3, r3, #3
 8003948:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800394c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003950:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003954:	605a      	str	r2, [r3, #4]
 8003956:	e027      	b.n	80039a8 <HAL_PCD_EP_DB_Transmit+0x75c>
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	785b      	ldrb	r3, [r3, #1]
 800395c:	2b01      	cmp	r3, #1
 800395e:	d123      	bne.n	80039a8 <HAL_PCD_EP_DB_Transmit+0x75c>
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	00db      	lsls	r3, r3, #3
 8003966:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800396a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800396e:	685a      	ldr	r2, [r3, #4]
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	00db      	lsls	r3, r3, #3
 8003976:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800397a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800397e:	b292      	uxth	r2, r2
 8003980:	605a      	str	r2, [r3, #4]
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	00db      	lsls	r3, r3, #3
 8003988:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800398c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003990:	6859      	ldr	r1, [r3, #4]
 8003992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003994:	041a      	lsls	r2, r3, #16
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	00db      	lsls	r3, r3, #3
 800399c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80039a0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80039a4:	430a      	orrs	r2, r1
 80039a6:	605a      	str	r2, [r3, #4]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6818      	ldr	r0, [r3, #0]
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	6959      	ldr	r1, [r3, #20]
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	895a      	ldrh	r2, [r3, #10]
 80039b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	f004 f9a6 	bl	8007d08 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	461a      	mov	r2, r3
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	4413      	add	r3, r2
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	4b0f      	ldr	r3, [pc, #60]	@ (8003a0c <HAL_PCD_EP_DB_Transmit+0x7c0>)
 80039ce:	4013      	ands	r3, r2
 80039d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80039d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039d4:	f083 0310 	eor.w	r3, r3, #16
 80039d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80039da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039dc:	f083 0320 	eor.w	r3, r3, #32
 80039e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	461a      	mov	r2, r3
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	441a      	add	r2, r3
 80039f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80039f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039fa:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3738      	adds	r7, #56	@ 0x38
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	07ff8f8f 	.word	0x07ff8f8f
 8003a0c:	07ff8fbf 	.word	0x07ff8fbf

08003a10 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b087      	sub	sp, #28
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	607b      	str	r3, [r7, #4]
 8003a1a:	460b      	mov	r3, r1
 8003a1c:	817b      	strh	r3, [r7, #10]
 8003a1e:	4613      	mov	r3, r2
 8003a20:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003a22:	897b      	ldrh	r3, [r7, #10]
 8003a24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d00c      	beq.n	8003a48 <HAL_PCDEx_PMAConfig+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a2e:	897b      	ldrh	r3, [r7, #10]
 8003a30:	f003 0207 	and.w	r2, r3, #7
 8003a34:	4613      	mov	r3, r2
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	4413      	add	r3, r2
 8003a3a:	00db      	lsls	r3, r3, #3
 8003a3c:	3310      	adds	r3, #16
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	4413      	add	r3, r2
 8003a42:	3304      	adds	r3, #4
 8003a44:	617b      	str	r3, [r7, #20]
 8003a46:	e00a      	b.n	8003a5e <HAL_PCDEx_PMAConfig+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003a48:	897a      	ldrh	r2, [r7, #10]
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	4413      	add	r3, r2
 8003a50:	00db      	lsls	r3, r3, #3
 8003a52:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	4413      	add	r3, r2
 8003a5a:	3304      	adds	r3, #4
 8003a5c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003a5e:	893b      	ldrh	r3, [r7, #8]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d107      	bne.n	8003a74 <HAL_PCDEx_PMAConfig+0x64>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	2200      	movs	r2, #0
 8003a68:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	b29a      	uxth	r2, r3
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	80da      	strh	r2, [r3, #6]
 8003a72:	e00b      	b.n	8003a8c <HAL_PCDEx_PMAConfig+0x7c>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	2201      	movs	r2, #1
 8003a78:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	b29a      	uxth	r2, r3
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	0c1b      	lsrs	r3, r3, #16
 8003a86:	b29a      	uxth	r2, r3
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	371c      	adds	r7, #28
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr

08003a9a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003a9a:	b480      	push	{r7}
 8003a9c:	b085      	sub	sp, #20
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
  hpcd->LPM_State = LPM_L0;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003abc:	f043 0201 	orr.w	r2, r3, #1
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	655a      	str	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ac8:	f043 0202 	orr.w	r2, r3, #2
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	655a      	str	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3714      	adds	r7, #20
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr

08003ade <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003ade:	b480      	push	{r7}
 8003ae0:	b083      	sub	sp, #12
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
 8003ae6:	460b      	mov	r3, r1
 8003ae8:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003aea:	bf00      	nop
 8003aec:	370c      	adds	r7, #12
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
	...

08003af8 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003af8:	b480      	push	{r7}
 8003afa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->USBSCR, PWR_USBSCR_USB33SV);
 8003afc:	4b05      	ldr	r3, [pc, #20]	@ (8003b14 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003afe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b00:	4a04      	ldr	r2, [pc, #16]	@ (8003b14 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003b02:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003b06:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003b08:	bf00      	nop
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	44020800 	.word	0x44020800

08003b18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b088      	sub	sp, #32
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d102      	bne.n	8003b2c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	f000 bc28 	b.w	800437c <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b2c:	4b94      	ldr	r3, [pc, #592]	@ (8003d80 <HAL_RCC_OscConfig+0x268>)
 8003b2e:	69db      	ldr	r3, [r3, #28]
 8003b30:	f003 0318 	and.w	r3, r3, #24
 8003b34:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8003b36:	4b92      	ldr	r3, [pc, #584]	@ (8003d80 <HAL_RCC_OscConfig+0x268>)
 8003b38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b3a:	f003 0303 	and.w	r3, r3, #3
 8003b3e:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0310 	and.w	r3, r3, #16
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d05b      	beq.n	8003c04 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	2b08      	cmp	r3, #8
 8003b50:	d005      	beq.n	8003b5e <HAL_RCC_OscConfig+0x46>
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	2b18      	cmp	r3, #24
 8003b56:	d114      	bne.n	8003b82 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d111      	bne.n	8003b82 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	69db      	ldr	r3, [r3, #28]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d102      	bne.n	8003b6c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	f000 bc08 	b.w	800437c <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8003b6c:	4b84      	ldr	r3, [pc, #528]	@ (8003d80 <HAL_RCC_OscConfig+0x268>)
 8003b6e:	699b      	ldr	r3, [r3, #24]
 8003b70:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a1b      	ldr	r3, [r3, #32]
 8003b78:	041b      	lsls	r3, r3, #16
 8003b7a:	4981      	ldr	r1, [pc, #516]	@ (8003d80 <HAL_RCC_OscConfig+0x268>)
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8003b80:	e040      	b.n	8003c04 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	69db      	ldr	r3, [r3, #28]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d023      	beq.n	8003bd2 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003b8a:	4b7d      	ldr	r3, [pc, #500]	@ (8003d80 <HAL_RCC_OscConfig+0x268>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a7c      	ldr	r2, [pc, #496]	@ (8003d80 <HAL_RCC_OscConfig+0x268>)
 8003b90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b96:	f7fd f915 	bl	8000dc4 <HAL_GetTick>
 8003b9a:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003b9c:	e008      	b.n	8003bb0 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8003b9e:	f7fd f911 	bl	8000dc4 <HAL_GetTick>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d901      	bls.n	8003bb0 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8003bac:	2303      	movs	r3, #3
 8003bae:	e3e5      	b.n	800437c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003bb0:	4b73      	ldr	r3, [pc, #460]	@ (8003d80 <HAL_RCC_OscConfig+0x268>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d0f0      	beq.n	8003b9e <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8003bbc:	4b70      	ldr	r3, [pc, #448]	@ (8003d80 <HAL_RCC_OscConfig+0x268>)
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a1b      	ldr	r3, [r3, #32]
 8003bc8:	041b      	lsls	r3, r3, #16
 8003bca:	496d      	ldr	r1, [pc, #436]	@ (8003d80 <HAL_RCC_OscConfig+0x268>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	618b      	str	r3, [r1, #24]
 8003bd0:	e018      	b.n	8003c04 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003bd2:	4b6b      	ldr	r3, [pc, #428]	@ (8003d80 <HAL_RCC_OscConfig+0x268>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a6a      	ldr	r2, [pc, #424]	@ (8003d80 <HAL_RCC_OscConfig+0x268>)
 8003bd8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003bdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bde:	f7fd f8f1 	bl	8000dc4 <HAL_GetTick>
 8003be2:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003be4:	e008      	b.n	8003bf8 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8003be6:	f7fd f8ed 	bl	8000dc4 <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d901      	bls.n	8003bf8 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e3c1      	b.n	800437c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003bf8:	4b61      	ldr	r3, [pc, #388]	@ (8003d80 <HAL_RCC_OscConfig+0x268>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d1f0      	bne.n	8003be6 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0301 	and.w	r3, r3, #1
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	f000 80a0 	beq.w	8003d52 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	2b10      	cmp	r3, #16
 8003c16:	d005      	beq.n	8003c24 <HAL_RCC_OscConfig+0x10c>
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	2b18      	cmp	r3, #24
 8003c1c:	d109      	bne.n	8003c32 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	2b03      	cmp	r3, #3
 8003c22:	d106      	bne.n	8003c32 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	f040 8092 	bne.w	8003d52 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e3a4      	b.n	800437c <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c3a:	d106      	bne.n	8003c4a <HAL_RCC_OscConfig+0x132>
 8003c3c:	4b50      	ldr	r3, [pc, #320]	@ (8003d80 <HAL_RCC_OscConfig+0x268>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a4f      	ldr	r2, [pc, #316]	@ (8003d80 <HAL_RCC_OscConfig+0x268>)
 8003c42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c46:	6013      	str	r3, [r2, #0]
 8003c48:	e058      	b.n	8003cfc <HAL_RCC_OscConfig+0x1e4>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d112      	bne.n	8003c78 <HAL_RCC_OscConfig+0x160>
 8003c52:	4b4b      	ldr	r3, [pc, #300]	@ (8003d80 <HAL_RCC_OscConfig+0x268>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a4a      	ldr	r2, [pc, #296]	@ (8003d80 <HAL_RCC_OscConfig+0x268>)
 8003c58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c5c:	6013      	str	r3, [r2, #0]
 8003c5e:	4b48      	ldr	r3, [pc, #288]	@ (8003d80 <HAL_RCC_OscConfig+0x268>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a47      	ldr	r2, [pc, #284]	@ (8003d80 <HAL_RCC_OscConfig+0x268>)
 8003c64:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003c68:	6013      	str	r3, [r2, #0]
 8003c6a:	4b45      	ldr	r3, [pc, #276]	@ (8003d80 <HAL_RCC_OscConfig+0x268>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a44      	ldr	r2, [pc, #272]	@ (8003d80 <HAL_RCC_OscConfig+0x268>)
 8003c70:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c74:	6013      	str	r3, [r2, #0]
 8003c76:	e041      	b.n	8003cfc <HAL_RCC_OscConfig+0x1e4>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c80:	d112      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x190>
 8003c82:	4b3f      	ldr	r3, [pc, #252]	@ (8003d80 <HAL_RCC_OscConfig+0x268>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a3e      	ldr	r2, [pc, #248]	@ (8003d80 <HAL_RCC_OscConfig+0x268>)
 8003c88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c8c:	6013      	str	r3, [r2, #0]
 8003c8e:	4b3c      	ldr	r3, [pc, #240]	@ (8003d80 <HAL_RCC_OscConfig+0x268>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a3b      	ldr	r2, [pc, #236]	@ (8003d80 <HAL_RCC_OscConfig+0x268>)
 8003c94:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003c98:	6013      	str	r3, [r2, #0]
 8003c9a:	4b39      	ldr	r3, [pc, #228]	@ (8003d80 <HAL_RCC_OscConfig+0x268>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a38      	ldr	r2, [pc, #224]	@ (8003d80 <HAL_RCC_OscConfig+0x268>)
 8003ca0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ca4:	6013      	str	r3, [r2, #0]
 8003ca6:	e029      	b.n	8003cfc <HAL_RCC_OscConfig+0x1e4>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8003cb0:	d112      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x1c0>
 8003cb2:	4b33      	ldr	r3, [pc, #204]	@ (8003d80 <HAL_RCC_OscConfig+0x268>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a32      	ldr	r2, [pc, #200]	@ (8003d80 <HAL_RCC_OscConfig+0x268>)
 8003cb8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003cbc:	6013      	str	r3, [r2, #0]
 8003cbe:	4b30      	ldr	r3, [pc, #192]	@ (8003d80 <HAL_RCC_OscConfig+0x268>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a2f      	ldr	r2, [pc, #188]	@ (8003d80 <HAL_RCC_OscConfig+0x268>)
 8003cc4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003cc8:	6013      	str	r3, [r2, #0]
 8003cca:	4b2d      	ldr	r3, [pc, #180]	@ (8003d80 <HAL_RCC_OscConfig+0x268>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a2c      	ldr	r2, [pc, #176]	@ (8003d80 <HAL_RCC_OscConfig+0x268>)
 8003cd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cd4:	6013      	str	r3, [r2, #0]
 8003cd6:	e011      	b.n	8003cfc <HAL_RCC_OscConfig+0x1e4>
 8003cd8:	4b29      	ldr	r3, [pc, #164]	@ (8003d80 <HAL_RCC_OscConfig+0x268>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a28      	ldr	r2, [pc, #160]	@ (8003d80 <HAL_RCC_OscConfig+0x268>)
 8003cde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ce2:	6013      	str	r3, [r2, #0]
 8003ce4:	4b26      	ldr	r3, [pc, #152]	@ (8003d80 <HAL_RCC_OscConfig+0x268>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a25      	ldr	r2, [pc, #148]	@ (8003d80 <HAL_RCC_OscConfig+0x268>)
 8003cea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003cee:	6013      	str	r3, [r2, #0]
 8003cf0:	4b23      	ldr	r3, [pc, #140]	@ (8003d80 <HAL_RCC_OscConfig+0x268>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a22      	ldr	r2, [pc, #136]	@ (8003d80 <HAL_RCC_OscConfig+0x268>)
 8003cf6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003cfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d013      	beq.n	8003d2c <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d04:	f7fd f85e 	bl	8000dc4 <HAL_GetTick>
 8003d08:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d0a:	e008      	b.n	8003d1e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003d0c:	f7fd f85a 	bl	8000dc4 <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	2b64      	cmp	r3, #100	@ 0x64
 8003d18:	d901      	bls.n	8003d1e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e32e      	b.n	800437c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d1e:	4b18      	ldr	r3, [pc, #96]	@ (8003d80 <HAL_RCC_OscConfig+0x268>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d0f0      	beq.n	8003d0c <HAL_RCC_OscConfig+0x1f4>
 8003d2a:	e012      	b.n	8003d52 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d2c:	f7fd f84a 	bl	8000dc4 <HAL_GetTick>
 8003d30:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d32:	e008      	b.n	8003d46 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003d34:	f7fd f846 	bl	8000dc4 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b64      	cmp	r3, #100	@ 0x64
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e31a      	b.n	800437c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d46:	4b0e      	ldr	r3, [pc, #56]	@ (8003d80 <HAL_RCC_OscConfig+0x268>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d1f0      	bne.n	8003d34 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	f000 809a 	beq.w	8003e94 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d005      	beq.n	8003d72 <HAL_RCC_OscConfig+0x25a>
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	2b18      	cmp	r3, #24
 8003d6a:	d149      	bne.n	8003e00 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d146      	bne.n	8003e00 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d104      	bne.n	8003d84 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e2fe      	b.n	800437c <HAL_RCC_OscConfig+0x864>
 8003d7e:	bf00      	nop
 8003d80:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d11c      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8003d8a:	4b9a      	ldr	r3, [pc, #616]	@ (8003ff4 <HAL_RCC_OscConfig+0x4dc>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0218 	and.w	r2, r3, #24
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d014      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8003d9a:	4b96      	ldr	r3, [pc, #600]	@ (8003ff4 <HAL_RCC_OscConfig+0x4dc>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f023 0218 	bic.w	r2, r3, #24
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	4993      	ldr	r1, [pc, #588]	@ (8003ff4 <HAL_RCC_OscConfig+0x4dc>)
 8003da8:	4313      	orrs	r3, r2
 8003daa:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8003dac:	f000 fdd0 	bl	8004950 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003db0:	4b91      	ldr	r3, [pc, #580]	@ (8003ff8 <HAL_RCC_OscConfig+0x4e0>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7fc ff7b 	bl	8000cb0 <HAL_InitTick>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d001      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e2db      	b.n	800437c <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc4:	f7fc fffe 	bl	8000dc4 <HAL_GetTick>
 8003dc8:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003dca:	e008      	b.n	8003dde <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003dcc:	f7fc fffa 	bl	8000dc4 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d901      	bls.n	8003dde <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e2ce      	b.n	800437c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003dde:	4b85      	ldr	r3, [pc, #532]	@ (8003ff4 <HAL_RCC_OscConfig+0x4dc>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d0f0      	beq.n	8003dcc <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8003dea:	4b82      	ldr	r3, [pc, #520]	@ (8003ff4 <HAL_RCC_OscConfig+0x4dc>)
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	041b      	lsls	r3, r3, #16
 8003df8:	497e      	ldr	r1, [pc, #504]	@ (8003ff4 <HAL_RCC_OscConfig+0x4dc>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8003dfe:	e049      	b.n	8003e94 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d02c      	beq.n	8003e62 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8003e08:	4b7a      	ldr	r3, [pc, #488]	@ (8003ff4 <HAL_RCC_OscConfig+0x4dc>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f023 0218 	bic.w	r2, r3, #24
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	4977      	ldr	r1, [pc, #476]	@ (8003ff4 <HAL_RCC_OscConfig+0x4dc>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8003e1a:	4b76      	ldr	r3, [pc, #472]	@ (8003ff4 <HAL_RCC_OscConfig+0x4dc>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a75      	ldr	r2, [pc, #468]	@ (8003ff4 <HAL_RCC_OscConfig+0x4dc>)
 8003e20:	f043 0301 	orr.w	r3, r3, #1
 8003e24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e26:	f7fc ffcd 	bl	8000dc4 <HAL_GetTick>
 8003e2a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e2c:	e008      	b.n	8003e40 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003e2e:	f7fc ffc9 	bl	8000dc4 <HAL_GetTick>
 8003e32:	4602      	mov	r2, r0
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	d901      	bls.n	8003e40 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e29d      	b.n	800437c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e40:	4b6c      	ldr	r3, [pc, #432]	@ (8003ff4 <HAL_RCC_OscConfig+0x4dc>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0302 	and.w	r3, r3, #2
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d0f0      	beq.n	8003e2e <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8003e4c:	4b69      	ldr	r3, [pc, #420]	@ (8003ff4 <HAL_RCC_OscConfig+0x4dc>)
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	695b      	ldr	r3, [r3, #20]
 8003e58:	041b      	lsls	r3, r3, #16
 8003e5a:	4966      	ldr	r1, [pc, #408]	@ (8003ff4 <HAL_RCC_OscConfig+0x4dc>)
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	610b      	str	r3, [r1, #16]
 8003e60:	e018      	b.n	8003e94 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e62:	4b64      	ldr	r3, [pc, #400]	@ (8003ff4 <HAL_RCC_OscConfig+0x4dc>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a63      	ldr	r2, [pc, #396]	@ (8003ff4 <HAL_RCC_OscConfig+0x4dc>)
 8003e68:	f023 0301 	bic.w	r3, r3, #1
 8003e6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e6e:	f7fc ffa9 	bl	8000dc4 <HAL_GetTick>
 8003e72:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e74:	e008      	b.n	8003e88 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003e76:	f7fc ffa5 	bl	8000dc4 <HAL_GetTick>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	2b02      	cmp	r3, #2
 8003e82:	d901      	bls.n	8003e88 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	e279      	b.n	800437c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e88:	4b5a      	ldr	r3, [pc, #360]	@ (8003ff4 <HAL_RCC_OscConfig+0x4dc>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0302 	and.w	r3, r3, #2
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1f0      	bne.n	8003e76 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0308 	and.w	r3, r3, #8
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d03c      	beq.n	8003f1a <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	699b      	ldr	r3, [r3, #24]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d01c      	beq.n	8003ee2 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ea8:	4b52      	ldr	r3, [pc, #328]	@ (8003ff4 <HAL_RCC_OscConfig+0x4dc>)
 8003eaa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003eae:	4a51      	ldr	r2, [pc, #324]	@ (8003ff4 <HAL_RCC_OscConfig+0x4dc>)
 8003eb0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003eb4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eb8:	f7fc ff84 	bl	8000dc4 <HAL_GetTick>
 8003ebc:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003ebe:	e008      	b.n	8003ed2 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003ec0:	f7fc ff80 	bl	8000dc4 <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d901      	bls.n	8003ed2 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e254      	b.n	800437c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003ed2:	4b48      	ldr	r3, [pc, #288]	@ (8003ff4 <HAL_RCC_OscConfig+0x4dc>)
 8003ed4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ed8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d0ef      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x3a8>
 8003ee0:	e01b      	b.n	8003f1a <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ee2:	4b44      	ldr	r3, [pc, #272]	@ (8003ff4 <HAL_RCC_OscConfig+0x4dc>)
 8003ee4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ee8:	4a42      	ldr	r2, [pc, #264]	@ (8003ff4 <HAL_RCC_OscConfig+0x4dc>)
 8003eea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003eee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ef2:	f7fc ff67 	bl	8000dc4 <HAL_GetTick>
 8003ef6:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003ef8:	e008      	b.n	8003f0c <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003efa:	f7fc ff63 	bl	8000dc4 <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d901      	bls.n	8003f0c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e237      	b.n	800437c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003f0c:	4b39      	ldr	r3, [pc, #228]	@ (8003ff4 <HAL_RCC_OscConfig+0x4dc>)
 8003f0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f12:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1ef      	bne.n	8003efa <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0304 	and.w	r3, r3, #4
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	f000 80d2 	beq.w	80040cc <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003f28:	4b34      	ldr	r3, [pc, #208]	@ (8003ffc <HAL_RCC_OscConfig+0x4e4>)
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f2c:	f003 0301 	and.w	r3, r3, #1
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d118      	bne.n	8003f66 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8003f34:	4b31      	ldr	r3, [pc, #196]	@ (8003ffc <HAL_RCC_OscConfig+0x4e4>)
 8003f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f38:	4a30      	ldr	r2, [pc, #192]	@ (8003ffc <HAL_RCC_OscConfig+0x4e4>)
 8003f3a:	f043 0301 	orr.w	r3, r3, #1
 8003f3e:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f40:	f7fc ff40 	bl	8000dc4 <HAL_GetTick>
 8003f44:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003f46:	e008      	b.n	8003f5a <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f48:	f7fc ff3c 	bl	8000dc4 <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d901      	bls.n	8003f5a <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e210      	b.n	800437c <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003f5a:	4b28      	ldr	r3, [pc, #160]	@ (8003ffc <HAL_RCC_OscConfig+0x4e4>)
 8003f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f5e:	f003 0301 	and.w	r3, r3, #1
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d0f0      	beq.n	8003f48 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d108      	bne.n	8003f80 <HAL_RCC_OscConfig+0x468>
 8003f6e:	4b21      	ldr	r3, [pc, #132]	@ (8003ff4 <HAL_RCC_OscConfig+0x4dc>)
 8003f70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f74:	4a1f      	ldr	r2, [pc, #124]	@ (8003ff4 <HAL_RCC_OscConfig+0x4dc>)
 8003f76:	f043 0301 	orr.w	r3, r3, #1
 8003f7a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003f7e:	e074      	b.n	800406a <HAL_RCC_OscConfig+0x552>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d118      	bne.n	8003fba <HAL_RCC_OscConfig+0x4a2>
 8003f88:	4b1a      	ldr	r3, [pc, #104]	@ (8003ff4 <HAL_RCC_OscConfig+0x4dc>)
 8003f8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f8e:	4a19      	ldr	r2, [pc, #100]	@ (8003ff4 <HAL_RCC_OscConfig+0x4dc>)
 8003f90:	f023 0301 	bic.w	r3, r3, #1
 8003f94:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003f98:	4b16      	ldr	r3, [pc, #88]	@ (8003ff4 <HAL_RCC_OscConfig+0x4dc>)
 8003f9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f9e:	4a15      	ldr	r2, [pc, #84]	@ (8003ff4 <HAL_RCC_OscConfig+0x4dc>)
 8003fa0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003fa4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003fa8:	4b12      	ldr	r3, [pc, #72]	@ (8003ff4 <HAL_RCC_OscConfig+0x4dc>)
 8003faa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003fae:	4a11      	ldr	r2, [pc, #68]	@ (8003ff4 <HAL_RCC_OscConfig+0x4dc>)
 8003fb0:	f023 0304 	bic.w	r3, r3, #4
 8003fb4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003fb8:	e057      	b.n	800406a <HAL_RCC_OscConfig+0x552>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	2b05      	cmp	r3, #5
 8003fc0:	d11e      	bne.n	8004000 <HAL_RCC_OscConfig+0x4e8>
 8003fc2:	4b0c      	ldr	r3, [pc, #48]	@ (8003ff4 <HAL_RCC_OscConfig+0x4dc>)
 8003fc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003fc8:	4a0a      	ldr	r2, [pc, #40]	@ (8003ff4 <HAL_RCC_OscConfig+0x4dc>)
 8003fca:	f043 0304 	orr.w	r3, r3, #4
 8003fce:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003fd2:	4b08      	ldr	r3, [pc, #32]	@ (8003ff4 <HAL_RCC_OscConfig+0x4dc>)
 8003fd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003fd8:	4a06      	ldr	r2, [pc, #24]	@ (8003ff4 <HAL_RCC_OscConfig+0x4dc>)
 8003fda:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003fde:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003fe2:	4b04      	ldr	r3, [pc, #16]	@ (8003ff4 <HAL_RCC_OscConfig+0x4dc>)
 8003fe4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003fe8:	4a02      	ldr	r2, [pc, #8]	@ (8003ff4 <HAL_RCC_OscConfig+0x4dc>)
 8003fea:	f043 0301 	orr.w	r3, r3, #1
 8003fee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003ff2:	e03a      	b.n	800406a <HAL_RCC_OscConfig+0x552>
 8003ff4:	44020c00 	.word	0x44020c00
 8003ff8:	2000000c 	.word	0x2000000c
 8003ffc:	44020800 	.word	0x44020800
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	2b85      	cmp	r3, #133	@ 0x85
 8004006:	d118      	bne.n	800403a <HAL_RCC_OscConfig+0x522>
 8004008:	4ba2      	ldr	r3, [pc, #648]	@ (8004294 <HAL_RCC_OscConfig+0x77c>)
 800400a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800400e:	4aa1      	ldr	r2, [pc, #644]	@ (8004294 <HAL_RCC_OscConfig+0x77c>)
 8004010:	f043 0304 	orr.w	r3, r3, #4
 8004014:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004018:	4b9e      	ldr	r3, [pc, #632]	@ (8004294 <HAL_RCC_OscConfig+0x77c>)
 800401a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800401e:	4a9d      	ldr	r2, [pc, #628]	@ (8004294 <HAL_RCC_OscConfig+0x77c>)
 8004020:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004024:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004028:	4b9a      	ldr	r3, [pc, #616]	@ (8004294 <HAL_RCC_OscConfig+0x77c>)
 800402a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800402e:	4a99      	ldr	r2, [pc, #612]	@ (8004294 <HAL_RCC_OscConfig+0x77c>)
 8004030:	f043 0301 	orr.w	r3, r3, #1
 8004034:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004038:	e017      	b.n	800406a <HAL_RCC_OscConfig+0x552>
 800403a:	4b96      	ldr	r3, [pc, #600]	@ (8004294 <HAL_RCC_OscConfig+0x77c>)
 800403c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004040:	4a94      	ldr	r2, [pc, #592]	@ (8004294 <HAL_RCC_OscConfig+0x77c>)
 8004042:	f023 0301 	bic.w	r3, r3, #1
 8004046:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800404a:	4b92      	ldr	r3, [pc, #584]	@ (8004294 <HAL_RCC_OscConfig+0x77c>)
 800404c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004050:	4a90      	ldr	r2, [pc, #576]	@ (8004294 <HAL_RCC_OscConfig+0x77c>)
 8004052:	f023 0304 	bic.w	r3, r3, #4
 8004056:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800405a:	4b8e      	ldr	r3, [pc, #568]	@ (8004294 <HAL_RCC_OscConfig+0x77c>)
 800405c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004060:	4a8c      	ldr	r2, [pc, #560]	@ (8004294 <HAL_RCC_OscConfig+0x77c>)
 8004062:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004066:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d016      	beq.n	80040a0 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004072:	f7fc fea7 	bl	8000dc4 <HAL_GetTick>
 8004076:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004078:	e00a      	b.n	8004090 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800407a:	f7fc fea3 	bl	8000dc4 <HAL_GetTick>
 800407e:	4602      	mov	r2, r0
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004088:	4293      	cmp	r3, r2
 800408a:	d901      	bls.n	8004090 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	e175      	b.n	800437c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004090:	4b80      	ldr	r3, [pc, #512]	@ (8004294 <HAL_RCC_OscConfig+0x77c>)
 8004092:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004096:	f003 0302 	and.w	r3, r3, #2
 800409a:	2b00      	cmp	r3, #0
 800409c:	d0ed      	beq.n	800407a <HAL_RCC_OscConfig+0x562>
 800409e:	e015      	b.n	80040cc <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040a0:	f7fc fe90 	bl	8000dc4 <HAL_GetTick>
 80040a4:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040a6:	e00a      	b.n	80040be <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040a8:	f7fc fe8c 	bl	8000dc4 <HAL_GetTick>
 80040ac:	4602      	mov	r2, r0
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d901      	bls.n	80040be <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e15e      	b.n	800437c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040be:	4b75      	ldr	r3, [pc, #468]	@ (8004294 <HAL_RCC_OscConfig+0x77c>)
 80040c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80040c4:	f003 0302 	and.w	r3, r3, #2
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d1ed      	bne.n	80040a8 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0320 	and.w	r3, r3, #32
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d036      	beq.n	8004146 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d019      	beq.n	8004114 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80040e0:	4b6c      	ldr	r3, [pc, #432]	@ (8004294 <HAL_RCC_OscConfig+0x77c>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a6b      	ldr	r2, [pc, #428]	@ (8004294 <HAL_RCC_OscConfig+0x77c>)
 80040e6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80040ea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ec:	f7fc fe6a 	bl	8000dc4 <HAL_GetTick>
 80040f0:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80040f2:	e008      	b.n	8004106 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80040f4:	f7fc fe66 	bl	8000dc4 <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d901      	bls.n	8004106 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e13a      	b.n	800437c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004106:	4b63      	ldr	r3, [pc, #396]	@ (8004294 <HAL_RCC_OscConfig+0x77c>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d0f0      	beq.n	80040f4 <HAL_RCC_OscConfig+0x5dc>
 8004112:	e018      	b.n	8004146 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004114:	4b5f      	ldr	r3, [pc, #380]	@ (8004294 <HAL_RCC_OscConfig+0x77c>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a5e      	ldr	r2, [pc, #376]	@ (8004294 <HAL_RCC_OscConfig+0x77c>)
 800411a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800411e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004120:	f7fc fe50 	bl	8000dc4 <HAL_GetTick>
 8004124:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004126:	e008      	b.n	800413a <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8004128:	f7fc fe4c 	bl	8000dc4 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	2b02      	cmp	r3, #2
 8004134:	d901      	bls.n	800413a <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e120      	b.n	800437c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800413a:	4b56      	ldr	r3, [pc, #344]	@ (8004294 <HAL_RCC_OscConfig+0x77c>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1f0      	bne.n	8004128 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800414a:	2b00      	cmp	r3, #0
 800414c:	f000 8115 	beq.w	800437a <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	2b18      	cmp	r3, #24
 8004154:	f000 80af 	beq.w	80042b6 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800415c:	2b02      	cmp	r3, #2
 800415e:	f040 8086 	bne.w	800426e <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8004162:	4b4c      	ldr	r3, [pc, #304]	@ (8004294 <HAL_RCC_OscConfig+0x77c>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a4b      	ldr	r2, [pc, #300]	@ (8004294 <HAL_RCC_OscConfig+0x77c>)
 8004168:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800416c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800416e:	f7fc fe29 	bl	8000dc4 <HAL_GetTick>
 8004172:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004174:	e008      	b.n	8004188 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8004176:	f7fc fe25 	bl	8000dc4 <HAL_GetTick>
 800417a:	4602      	mov	r2, r0
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	2b02      	cmp	r3, #2
 8004182:	d901      	bls.n	8004188 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e0f9      	b.n	800437c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004188:	4b42      	ldr	r3, [pc, #264]	@ (8004294 <HAL_RCC_OscConfig+0x77c>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d1f0      	bne.n	8004176 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8004194:	4b3f      	ldr	r3, [pc, #252]	@ (8004294 <HAL_RCC_OscConfig+0x77c>)
 8004196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004198:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800419c:	f023 0303 	bic.w	r3, r3, #3
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80041a8:	0212      	lsls	r2, r2, #8
 80041aa:	430a      	orrs	r2, r1
 80041ac:	4939      	ldr	r1, [pc, #228]	@ (8004294 <HAL_RCC_OscConfig+0x77c>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	628b      	str	r3, [r1, #40]	@ 0x28
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041b6:	3b01      	subs	r3, #1
 80041b8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041c0:	3b01      	subs	r3, #1
 80041c2:	025b      	lsls	r3, r3, #9
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	431a      	orrs	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041cc:	3b01      	subs	r3, #1
 80041ce:	041b      	lsls	r3, r3, #16
 80041d0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80041d4:	431a      	orrs	r2, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041da:	3b01      	subs	r3, #1
 80041dc:	061b      	lsls	r3, r3, #24
 80041de:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80041e2:	492c      	ldr	r1, [pc, #176]	@ (8004294 <HAL_RCC_OscConfig+0x77c>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80041e8:	4b2a      	ldr	r3, [pc, #168]	@ (8004294 <HAL_RCC_OscConfig+0x77c>)
 80041ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ec:	4a29      	ldr	r2, [pc, #164]	@ (8004294 <HAL_RCC_OscConfig+0x77c>)
 80041ee:	f023 0310 	bic.w	r3, r3, #16
 80041f2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041f8:	4a26      	ldr	r2, [pc, #152]	@ (8004294 <HAL_RCC_OscConfig+0x77c>)
 80041fa:	00db      	lsls	r3, r3, #3
 80041fc:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80041fe:	4b25      	ldr	r3, [pc, #148]	@ (8004294 <HAL_RCC_OscConfig+0x77c>)
 8004200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004202:	4a24      	ldr	r2, [pc, #144]	@ (8004294 <HAL_RCC_OscConfig+0x77c>)
 8004204:	f043 0310 	orr.w	r3, r3, #16
 8004208:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 800420a:	4b22      	ldr	r3, [pc, #136]	@ (8004294 <HAL_RCC_OscConfig+0x77c>)
 800420c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800420e:	f023 020c 	bic.w	r2, r3, #12
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004216:	491f      	ldr	r1, [pc, #124]	@ (8004294 <HAL_RCC_OscConfig+0x77c>)
 8004218:	4313      	orrs	r3, r2
 800421a:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 800421c:	4b1d      	ldr	r3, [pc, #116]	@ (8004294 <HAL_RCC_OscConfig+0x77c>)
 800421e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004220:	f023 0220 	bic.w	r2, r3, #32
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004228:	491a      	ldr	r1, [pc, #104]	@ (8004294 <HAL_RCC_OscConfig+0x77c>)
 800422a:	4313      	orrs	r3, r2
 800422c:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 800422e:	4b19      	ldr	r3, [pc, #100]	@ (8004294 <HAL_RCC_OscConfig+0x77c>)
 8004230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004232:	4a18      	ldr	r2, [pc, #96]	@ (8004294 <HAL_RCC_OscConfig+0x77c>)
 8004234:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004238:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 800423a:	4b16      	ldr	r3, [pc, #88]	@ (8004294 <HAL_RCC_OscConfig+0x77c>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a15      	ldr	r2, [pc, #84]	@ (8004294 <HAL_RCC_OscConfig+0x77c>)
 8004240:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004244:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004246:	f7fc fdbd 	bl	8000dc4 <HAL_GetTick>
 800424a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800424c:	e008      	b.n	8004260 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800424e:	f7fc fdb9 	bl	8000dc4 <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	2b02      	cmp	r3, #2
 800425a:	d901      	bls.n	8004260 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e08d      	b.n	800437c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004260:	4b0c      	ldr	r3, [pc, #48]	@ (8004294 <HAL_RCC_OscConfig+0x77c>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d0f0      	beq.n	800424e <HAL_RCC_OscConfig+0x736>
 800426c:	e085      	b.n	800437a <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800426e:	4b09      	ldr	r3, [pc, #36]	@ (8004294 <HAL_RCC_OscConfig+0x77c>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a08      	ldr	r2, [pc, #32]	@ (8004294 <HAL_RCC_OscConfig+0x77c>)
 8004274:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004278:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800427a:	f7fc fda3 	bl	8000dc4 <HAL_GetTick>
 800427e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004280:	e00a      	b.n	8004298 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8004282:	f7fc fd9f 	bl	8000dc4 <HAL_GetTick>
 8004286:	4602      	mov	r2, r0
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	2b02      	cmp	r3, #2
 800428e:	d903      	bls.n	8004298 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8004290:	2303      	movs	r3, #3
 8004292:	e073      	b.n	800437c <HAL_RCC_OscConfig+0x864>
 8004294:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004298:	4b3a      	ldr	r3, [pc, #232]	@ (8004384 <HAL_RCC_OscConfig+0x86c>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1ee      	bne.n	8004282 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80042a4:	4b37      	ldr	r3, [pc, #220]	@ (8004384 <HAL_RCC_OscConfig+0x86c>)
 80042a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042a8:	4a36      	ldr	r2, [pc, #216]	@ (8004384 <HAL_RCC_OscConfig+0x86c>)
 80042aa:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80042ae:	f023 0303 	bic.w	r3, r3, #3
 80042b2:	6293      	str	r3, [r2, #40]	@ 0x28
 80042b4:	e061      	b.n	800437a <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80042b6:	4b33      	ldr	r3, [pc, #204]	@ (8004384 <HAL_RCC_OscConfig+0x86c>)
 80042b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ba:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80042bc:	4b31      	ldr	r3, [pc, #196]	@ (8004384 <HAL_RCC_OscConfig+0x86c>)
 80042be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042c0:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d031      	beq.n	800432e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	f003 0203 	and.w	r2, r3, #3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d12a      	bne.n	800432e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	0a1b      	lsrs	r3, r3, #8
 80042dc:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d122      	bne.n	800432e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042f2:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d11a      	bne.n	800432e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	0a5b      	lsrs	r3, r3, #9
 80042fc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004304:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8004306:	429a      	cmp	r2, r3
 8004308:	d111      	bne.n	800432e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	0c1b      	lsrs	r3, r3, #16
 800430e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004316:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8004318:	429a      	cmp	r2, r3
 800431a:	d108      	bne.n	800432e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	0e1b      	lsrs	r3, r3, #24
 8004320:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004328:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800432a:	429a      	cmp	r2, r3
 800432c:	d001      	beq.n	8004332 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e024      	b.n	800437c <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004332:	4b14      	ldr	r3, [pc, #80]	@ (8004384 <HAL_RCC_OscConfig+0x86c>)
 8004334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004336:	08db      	lsrs	r3, r3, #3
 8004338:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004340:	429a      	cmp	r2, r3
 8004342:	d01a      	beq.n	800437a <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8004344:	4b0f      	ldr	r3, [pc, #60]	@ (8004384 <HAL_RCC_OscConfig+0x86c>)
 8004346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004348:	4a0e      	ldr	r2, [pc, #56]	@ (8004384 <HAL_RCC_OscConfig+0x86c>)
 800434a:	f023 0310 	bic.w	r3, r3, #16
 800434e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004350:	f7fc fd38 	bl	8000dc4 <HAL_GetTick>
 8004354:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8004356:	bf00      	nop
 8004358:	f7fc fd34 	bl	8000dc4 <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	4293      	cmp	r3, r2
 8004362:	d0f9      	beq.n	8004358 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004368:	4a06      	ldr	r2, [pc, #24]	@ (8004384 <HAL_RCC_OscConfig+0x86c>)
 800436a:	00db      	lsls	r3, r3, #3
 800436c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800436e:	4b05      	ldr	r3, [pc, #20]	@ (8004384 <HAL_RCC_OscConfig+0x86c>)
 8004370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004372:	4a04      	ldr	r2, [pc, #16]	@ (8004384 <HAL_RCC_OscConfig+0x86c>)
 8004374:	f043 0310 	orr.w	r3, r3, #16
 8004378:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 800437a:	2300      	movs	r3, #0
}
 800437c:	4618      	mov	r0, r3
 800437e:	3720      	adds	r7, #32
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	44020c00 	.word	0x44020c00

08004388 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d101      	bne.n	800439c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e19e      	b.n	80046da <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800439c:	4b83      	ldr	r3, [pc, #524]	@ (80045ac <HAL_RCC_ClockConfig+0x224>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 030f 	and.w	r3, r3, #15
 80043a4:	683a      	ldr	r2, [r7, #0]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d910      	bls.n	80043cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043aa:	4b80      	ldr	r3, [pc, #512]	@ (80045ac <HAL_RCC_ClockConfig+0x224>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f023 020f 	bic.w	r2, r3, #15
 80043b2:	497e      	ldr	r1, [pc, #504]	@ (80045ac <HAL_RCC_ClockConfig+0x224>)
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ba:	4b7c      	ldr	r3, [pc, #496]	@ (80045ac <HAL_RCC_ClockConfig+0x224>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 030f 	and.w	r3, r3, #15
 80043c2:	683a      	ldr	r2, [r7, #0]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d001      	beq.n	80043cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e186      	b.n	80046da <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0310 	and.w	r3, r3, #16
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d012      	beq.n	80043fe <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	695a      	ldr	r2, [r3, #20]
 80043dc:	4b74      	ldr	r3, [pc, #464]	@ (80045b0 <HAL_RCC_ClockConfig+0x228>)
 80043de:	6a1b      	ldr	r3, [r3, #32]
 80043e0:	0a1b      	lsrs	r3, r3, #8
 80043e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d909      	bls.n	80043fe <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80043ea:	4b71      	ldr	r3, [pc, #452]	@ (80045b0 <HAL_RCC_ClockConfig+0x228>)
 80043ec:	6a1b      	ldr	r3, [r3, #32]
 80043ee:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	021b      	lsls	r3, r3, #8
 80043f8:	496d      	ldr	r1, [pc, #436]	@ (80045b0 <HAL_RCC_ClockConfig+0x228>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0308 	and.w	r3, r3, #8
 8004406:	2b00      	cmp	r3, #0
 8004408:	d012      	beq.n	8004430 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	691a      	ldr	r2, [r3, #16]
 800440e:	4b68      	ldr	r3, [pc, #416]	@ (80045b0 <HAL_RCC_ClockConfig+0x228>)
 8004410:	6a1b      	ldr	r3, [r3, #32]
 8004412:	091b      	lsrs	r3, r3, #4
 8004414:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004418:	429a      	cmp	r2, r3
 800441a:	d909      	bls.n	8004430 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800441c:	4b64      	ldr	r3, [pc, #400]	@ (80045b0 <HAL_RCC_ClockConfig+0x228>)
 800441e:	6a1b      	ldr	r3, [r3, #32]
 8004420:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	691b      	ldr	r3, [r3, #16]
 8004428:	011b      	lsls	r3, r3, #4
 800442a:	4961      	ldr	r1, [pc, #388]	@ (80045b0 <HAL_RCC_ClockConfig+0x228>)
 800442c:	4313      	orrs	r3, r2
 800442e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0304 	and.w	r3, r3, #4
 8004438:	2b00      	cmp	r3, #0
 800443a:	d010      	beq.n	800445e <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	68da      	ldr	r2, [r3, #12]
 8004440:	4b5b      	ldr	r3, [pc, #364]	@ (80045b0 <HAL_RCC_ClockConfig+0x228>)
 8004442:	6a1b      	ldr	r3, [r3, #32]
 8004444:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004448:	429a      	cmp	r2, r3
 800444a:	d908      	bls.n	800445e <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800444c:	4b58      	ldr	r3, [pc, #352]	@ (80045b0 <HAL_RCC_ClockConfig+0x228>)
 800444e:	6a1b      	ldr	r3, [r3, #32]
 8004450:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	4955      	ldr	r1, [pc, #340]	@ (80045b0 <HAL_RCC_ClockConfig+0x228>)
 800445a:	4313      	orrs	r3, r2
 800445c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0302 	and.w	r3, r3, #2
 8004466:	2b00      	cmp	r3, #0
 8004468:	d010      	beq.n	800448c <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	689a      	ldr	r2, [r3, #8]
 800446e:	4b50      	ldr	r3, [pc, #320]	@ (80045b0 <HAL_RCC_ClockConfig+0x228>)
 8004470:	6a1b      	ldr	r3, [r3, #32]
 8004472:	f003 030f 	and.w	r3, r3, #15
 8004476:	429a      	cmp	r2, r3
 8004478:	d908      	bls.n	800448c <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 800447a:	4b4d      	ldr	r3, [pc, #308]	@ (80045b0 <HAL_RCC_ClockConfig+0x228>)
 800447c:	6a1b      	ldr	r3, [r3, #32]
 800447e:	f023 020f 	bic.w	r2, r3, #15
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	494a      	ldr	r1, [pc, #296]	@ (80045b0 <HAL_RCC_ClockConfig+0x228>)
 8004488:	4313      	orrs	r3, r2
 800448a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0301 	and.w	r3, r3, #1
 8004494:	2b00      	cmp	r3, #0
 8004496:	f000 8093 	beq.w	80045c0 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	2b03      	cmp	r3, #3
 80044a0:	d107      	bne.n	80044b2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80044a2:	4b43      	ldr	r3, [pc, #268]	@ (80045b0 <HAL_RCC_ClockConfig+0x228>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d121      	bne.n	80044f2 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e113      	b.n	80046da <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d107      	bne.n	80044ca <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044ba:	4b3d      	ldr	r3, [pc, #244]	@ (80045b0 <HAL_RCC_ClockConfig+0x228>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d115      	bne.n	80044f2 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e107      	b.n	80046da <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d107      	bne.n	80044e2 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80044d2:	4b37      	ldr	r3, [pc, #220]	@ (80045b0 <HAL_RCC_ClockConfig+0x228>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d109      	bne.n	80044f2 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e0fb      	b.n	80046da <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044e2:	4b33      	ldr	r3, [pc, #204]	@ (80045b0 <HAL_RCC_ClockConfig+0x228>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0302 	and.w	r3, r3, #2
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d101      	bne.n	80044f2 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e0f3      	b.n	80046da <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 80044f2:	4b2f      	ldr	r3, [pc, #188]	@ (80045b0 <HAL_RCC_ClockConfig+0x228>)
 80044f4:	69db      	ldr	r3, [r3, #28]
 80044f6:	f023 0203 	bic.w	r2, r3, #3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	492c      	ldr	r1, [pc, #176]	@ (80045b0 <HAL_RCC_ClockConfig+0x228>)
 8004500:	4313      	orrs	r3, r2
 8004502:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004504:	f7fc fc5e 	bl	8000dc4 <HAL_GetTick>
 8004508:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	2b03      	cmp	r3, #3
 8004510:	d112      	bne.n	8004538 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004512:	e00a      	b.n	800452a <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004514:	f7fc fc56 	bl	8000dc4 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004522:	4293      	cmp	r3, r2
 8004524:	d901      	bls.n	800452a <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e0d7      	b.n	80046da <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800452a:	4b21      	ldr	r3, [pc, #132]	@ (80045b0 <HAL_RCC_ClockConfig+0x228>)
 800452c:	69db      	ldr	r3, [r3, #28]
 800452e:	f003 0318 	and.w	r3, r3, #24
 8004532:	2b18      	cmp	r3, #24
 8004534:	d1ee      	bne.n	8004514 <HAL_RCC_ClockConfig+0x18c>
 8004536:	e043      	b.n	80045c0 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	2b02      	cmp	r3, #2
 800453e:	d112      	bne.n	8004566 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004540:	e00a      	b.n	8004558 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004542:	f7fc fc3f 	bl	8000dc4 <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004550:	4293      	cmp	r3, r2
 8004552:	d901      	bls.n	8004558 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004554:	2303      	movs	r3, #3
 8004556:	e0c0      	b.n	80046da <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004558:	4b15      	ldr	r3, [pc, #84]	@ (80045b0 <HAL_RCC_ClockConfig+0x228>)
 800455a:	69db      	ldr	r3, [r3, #28]
 800455c:	f003 0318 	and.w	r3, r3, #24
 8004560:	2b10      	cmp	r3, #16
 8004562:	d1ee      	bne.n	8004542 <HAL_RCC_ClockConfig+0x1ba>
 8004564:	e02c      	b.n	80045c0 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	2b01      	cmp	r3, #1
 800456c:	d122      	bne.n	80045b4 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800456e:	e00a      	b.n	8004586 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004570:	f7fc fc28 	bl	8000dc4 <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800457e:	4293      	cmp	r3, r2
 8004580:	d901      	bls.n	8004586 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e0a9      	b.n	80046da <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8004586:	4b0a      	ldr	r3, [pc, #40]	@ (80045b0 <HAL_RCC_ClockConfig+0x228>)
 8004588:	69db      	ldr	r3, [r3, #28]
 800458a:	f003 0318 	and.w	r3, r3, #24
 800458e:	2b08      	cmp	r3, #8
 8004590:	d1ee      	bne.n	8004570 <HAL_RCC_ClockConfig+0x1e8>
 8004592:	e015      	b.n	80045c0 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004594:	f7fc fc16 	bl	8000dc4 <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d906      	bls.n	80045b4 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e097      	b.n	80046da <HAL_RCC_ClockConfig+0x352>
 80045aa:	bf00      	nop
 80045ac:	40022000 	.word	0x40022000
 80045b0:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80045b4:	4b4b      	ldr	r3, [pc, #300]	@ (80046e4 <HAL_RCC_ClockConfig+0x35c>)
 80045b6:	69db      	ldr	r3, [r3, #28]
 80045b8:	f003 0318 	and.w	r3, r3, #24
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d1e9      	bne.n	8004594 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0302 	and.w	r3, r3, #2
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d010      	beq.n	80045ee <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	689a      	ldr	r2, [r3, #8]
 80045d0:	4b44      	ldr	r3, [pc, #272]	@ (80046e4 <HAL_RCC_ClockConfig+0x35c>)
 80045d2:	6a1b      	ldr	r3, [r3, #32]
 80045d4:	f003 030f 	and.w	r3, r3, #15
 80045d8:	429a      	cmp	r2, r3
 80045da:	d208      	bcs.n	80045ee <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80045dc:	4b41      	ldr	r3, [pc, #260]	@ (80046e4 <HAL_RCC_ClockConfig+0x35c>)
 80045de:	6a1b      	ldr	r3, [r3, #32]
 80045e0:	f023 020f 	bic.w	r2, r3, #15
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	493e      	ldr	r1, [pc, #248]	@ (80046e4 <HAL_RCC_ClockConfig+0x35c>)
 80045ea:	4313      	orrs	r3, r2
 80045ec:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045ee:	4b3e      	ldr	r3, [pc, #248]	@ (80046e8 <HAL_RCC_ClockConfig+0x360>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 030f 	and.w	r3, r3, #15
 80045f6:	683a      	ldr	r2, [r7, #0]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d210      	bcs.n	800461e <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045fc:	4b3a      	ldr	r3, [pc, #232]	@ (80046e8 <HAL_RCC_ClockConfig+0x360>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f023 020f 	bic.w	r2, r3, #15
 8004604:	4938      	ldr	r1, [pc, #224]	@ (80046e8 <HAL_RCC_ClockConfig+0x360>)
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	4313      	orrs	r3, r2
 800460a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800460c:	4b36      	ldr	r3, [pc, #216]	@ (80046e8 <HAL_RCC_ClockConfig+0x360>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 030f 	and.w	r3, r3, #15
 8004614:	683a      	ldr	r2, [r7, #0]
 8004616:	429a      	cmp	r2, r3
 8004618:	d001      	beq.n	800461e <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e05d      	b.n	80046da <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0304 	and.w	r3, r3, #4
 8004626:	2b00      	cmp	r3, #0
 8004628:	d010      	beq.n	800464c <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	68da      	ldr	r2, [r3, #12]
 800462e:	4b2d      	ldr	r3, [pc, #180]	@ (80046e4 <HAL_RCC_ClockConfig+0x35c>)
 8004630:	6a1b      	ldr	r3, [r3, #32]
 8004632:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004636:	429a      	cmp	r2, r3
 8004638:	d208      	bcs.n	800464c <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800463a:	4b2a      	ldr	r3, [pc, #168]	@ (80046e4 <HAL_RCC_ClockConfig+0x35c>)
 800463c:	6a1b      	ldr	r3, [r3, #32]
 800463e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	4927      	ldr	r1, [pc, #156]	@ (80046e4 <HAL_RCC_ClockConfig+0x35c>)
 8004648:	4313      	orrs	r3, r2
 800464a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0308 	and.w	r3, r3, #8
 8004654:	2b00      	cmp	r3, #0
 8004656:	d012      	beq.n	800467e <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	691a      	ldr	r2, [r3, #16]
 800465c:	4b21      	ldr	r3, [pc, #132]	@ (80046e4 <HAL_RCC_ClockConfig+0x35c>)
 800465e:	6a1b      	ldr	r3, [r3, #32]
 8004660:	091b      	lsrs	r3, r3, #4
 8004662:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004666:	429a      	cmp	r2, r3
 8004668:	d209      	bcs.n	800467e <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800466a:	4b1e      	ldr	r3, [pc, #120]	@ (80046e4 <HAL_RCC_ClockConfig+0x35c>)
 800466c:	6a1b      	ldr	r3, [r3, #32]
 800466e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	011b      	lsls	r3, r3, #4
 8004678:	491a      	ldr	r1, [pc, #104]	@ (80046e4 <HAL_RCC_ClockConfig+0x35c>)
 800467a:	4313      	orrs	r3, r2
 800467c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0310 	and.w	r3, r3, #16
 8004686:	2b00      	cmp	r3, #0
 8004688:	d012      	beq.n	80046b0 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	695a      	ldr	r2, [r3, #20]
 800468e:	4b15      	ldr	r3, [pc, #84]	@ (80046e4 <HAL_RCC_ClockConfig+0x35c>)
 8004690:	6a1b      	ldr	r3, [r3, #32]
 8004692:	0a1b      	lsrs	r3, r3, #8
 8004694:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004698:	429a      	cmp	r2, r3
 800469a:	d209      	bcs.n	80046b0 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 800469c:	4b11      	ldr	r3, [pc, #68]	@ (80046e4 <HAL_RCC_ClockConfig+0x35c>)
 800469e:	6a1b      	ldr	r3, [r3, #32]
 80046a0:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	695b      	ldr	r3, [r3, #20]
 80046a8:	021b      	lsls	r3, r3, #8
 80046aa:	490e      	ldr	r1, [pc, #56]	@ (80046e4 <HAL_RCC_ClockConfig+0x35c>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80046b0:	f000 f822 	bl	80046f8 <HAL_RCC_GetSysClockFreq>
 80046b4:	4602      	mov	r2, r0
 80046b6:	4b0b      	ldr	r3, [pc, #44]	@ (80046e4 <HAL_RCC_ClockConfig+0x35c>)
 80046b8:	6a1b      	ldr	r3, [r3, #32]
 80046ba:	f003 030f 	and.w	r3, r3, #15
 80046be:	490b      	ldr	r1, [pc, #44]	@ (80046ec <HAL_RCC_ClockConfig+0x364>)
 80046c0:	5ccb      	ldrb	r3, [r1, r3]
 80046c2:	fa22 f303 	lsr.w	r3, r2, r3
 80046c6:	4a0a      	ldr	r2, [pc, #40]	@ (80046f0 <HAL_RCC_ClockConfig+0x368>)
 80046c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80046ca:	4b0a      	ldr	r3, [pc, #40]	@ (80046f4 <HAL_RCC_ClockConfig+0x36c>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4618      	mov	r0, r3
 80046d0:	f7fc faee 	bl	8000cb0 <HAL_InitTick>
 80046d4:	4603      	mov	r3, r0
 80046d6:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 80046d8:	7afb      	ldrb	r3, [r7, #11]
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3710      	adds	r7, #16
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	44020c00 	.word	0x44020c00
 80046e8:	40022000 	.word	0x40022000
 80046ec:	0800cddc 	.word	0x0800cddc
 80046f0:	20000008 	.word	0x20000008
 80046f4:	2000000c 	.word	0x2000000c

080046f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b089      	sub	sp, #36	@ 0x24
 80046fc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 80046fe:	4b8c      	ldr	r3, [pc, #560]	@ (8004930 <HAL_RCC_GetSysClockFreq+0x238>)
 8004700:	69db      	ldr	r3, [r3, #28]
 8004702:	f003 0318 	and.w	r3, r3, #24
 8004706:	2b08      	cmp	r3, #8
 8004708:	d102      	bne.n	8004710 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800470a:	4b8a      	ldr	r3, [pc, #552]	@ (8004934 <HAL_RCC_GetSysClockFreq+0x23c>)
 800470c:	61fb      	str	r3, [r7, #28]
 800470e:	e107      	b.n	8004920 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004710:	4b87      	ldr	r3, [pc, #540]	@ (8004930 <HAL_RCC_GetSysClockFreq+0x238>)
 8004712:	69db      	ldr	r3, [r3, #28]
 8004714:	f003 0318 	and.w	r3, r3, #24
 8004718:	2b00      	cmp	r3, #0
 800471a:	d112      	bne.n	8004742 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800471c:	4b84      	ldr	r3, [pc, #528]	@ (8004930 <HAL_RCC_GetSysClockFreq+0x238>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0320 	and.w	r3, r3, #32
 8004724:	2b00      	cmp	r3, #0
 8004726:	d009      	beq.n	800473c <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004728:	4b81      	ldr	r3, [pc, #516]	@ (8004930 <HAL_RCC_GetSysClockFreq+0x238>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	08db      	lsrs	r3, r3, #3
 800472e:	f003 0303 	and.w	r3, r3, #3
 8004732:	4a81      	ldr	r2, [pc, #516]	@ (8004938 <HAL_RCC_GetSysClockFreq+0x240>)
 8004734:	fa22 f303 	lsr.w	r3, r2, r3
 8004738:	61fb      	str	r3, [r7, #28]
 800473a:	e0f1      	b.n	8004920 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 800473c:	4b7e      	ldr	r3, [pc, #504]	@ (8004938 <HAL_RCC_GetSysClockFreq+0x240>)
 800473e:	61fb      	str	r3, [r7, #28]
 8004740:	e0ee      	b.n	8004920 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004742:	4b7b      	ldr	r3, [pc, #492]	@ (8004930 <HAL_RCC_GetSysClockFreq+0x238>)
 8004744:	69db      	ldr	r3, [r3, #28]
 8004746:	f003 0318 	and.w	r3, r3, #24
 800474a:	2b10      	cmp	r3, #16
 800474c:	d102      	bne.n	8004754 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800474e:	4b7b      	ldr	r3, [pc, #492]	@ (800493c <HAL_RCC_GetSysClockFreq+0x244>)
 8004750:	61fb      	str	r3, [r7, #28]
 8004752:	e0e5      	b.n	8004920 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004754:	4b76      	ldr	r3, [pc, #472]	@ (8004930 <HAL_RCC_GetSysClockFreq+0x238>)
 8004756:	69db      	ldr	r3, [r3, #28]
 8004758:	f003 0318 	and.w	r3, r3, #24
 800475c:	2b18      	cmp	r3, #24
 800475e:	f040 80dd 	bne.w	800491c <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004762:	4b73      	ldr	r3, [pc, #460]	@ (8004930 <HAL_RCC_GetSysClockFreq+0x238>)
 8004764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004766:	f003 0303 	and.w	r3, r3, #3
 800476a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 800476c:	4b70      	ldr	r3, [pc, #448]	@ (8004930 <HAL_RCC_GetSysClockFreq+0x238>)
 800476e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004770:	0a1b      	lsrs	r3, r3, #8
 8004772:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004776:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004778:	4b6d      	ldr	r3, [pc, #436]	@ (8004930 <HAL_RCC_GetSysClockFreq+0x238>)
 800477a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800477c:	091b      	lsrs	r3, r3, #4
 800477e:	f003 0301 	and.w	r3, r3, #1
 8004782:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8004784:	4b6a      	ldr	r3, [pc, #424]	@ (8004930 <HAL_RCC_GetSysClockFreq+0x238>)
 8004786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8004788:	08db      	lsrs	r3, r3, #3
 800478a:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800478e:	68fa      	ldr	r2, [r7, #12]
 8004790:	fb02 f303 	mul.w	r3, r2, r3
 8004794:	ee07 3a90 	vmov	s15, r3
 8004798:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800479c:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	f000 80b7 	beq.w	8004916 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d003      	beq.n	80047b6 <HAL_RCC_GetSysClockFreq+0xbe>
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	2b03      	cmp	r3, #3
 80047b2:	d056      	beq.n	8004862 <HAL_RCC_GetSysClockFreq+0x16a>
 80047b4:	e077      	b.n	80048a6 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80047b6:	4b5e      	ldr	r3, [pc, #376]	@ (8004930 <HAL_RCC_GetSysClockFreq+0x238>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 0320 	and.w	r3, r3, #32
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d02d      	beq.n	800481e <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80047c2:	4b5b      	ldr	r3, [pc, #364]	@ (8004930 <HAL_RCC_GetSysClockFreq+0x238>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	08db      	lsrs	r3, r3, #3
 80047c8:	f003 0303 	and.w	r3, r3, #3
 80047cc:	4a5a      	ldr	r2, [pc, #360]	@ (8004938 <HAL_RCC_GetSysClockFreq+0x240>)
 80047ce:	fa22 f303 	lsr.w	r3, r2, r3
 80047d2:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	ee07 3a90 	vmov	s15, r3
 80047da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	ee07 3a90 	vmov	s15, r3
 80047e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047ec:	4b50      	ldr	r3, [pc, #320]	@ (8004930 <HAL_RCC_GetSysClockFreq+0x238>)
 80047ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047f4:	ee07 3a90 	vmov	s15, r3
 80047f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80047fc:	ed97 6a02 	vldr	s12, [r7, #8]
 8004800:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8004940 <HAL_RCC_GetSysClockFreq+0x248>
 8004804:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004808:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 800480c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004810:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004814:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004818:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 800481c:	e065      	b.n	80048ea <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	ee07 3a90 	vmov	s15, r3
 8004824:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004828:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8004944 <HAL_RCC_GetSysClockFreq+0x24c>
 800482c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004830:	4b3f      	ldr	r3, [pc, #252]	@ (8004930 <HAL_RCC_GetSysClockFreq+0x238>)
 8004832:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004834:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004838:	ee07 3a90 	vmov	s15, r3
 800483c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8004840:	ed97 6a02 	vldr	s12, [r7, #8]
 8004844:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8004940 <HAL_RCC_GetSysClockFreq+0x248>
 8004848:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800484c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8004850:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004854:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004858:	ee67 7a27 	vmul.f32	s15, s14, s15
 800485c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8004860:	e043      	b.n	80048ea <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	ee07 3a90 	vmov	s15, r3
 8004868:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800486c:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8004948 <HAL_RCC_GetSysClockFreq+0x250>
 8004870:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004874:	4b2e      	ldr	r3, [pc, #184]	@ (8004930 <HAL_RCC_GetSysClockFreq+0x238>)
 8004876:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004878:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800487c:	ee07 3a90 	vmov	s15, r3
 8004880:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004884:	ed97 6a02 	vldr	s12, [r7, #8]
 8004888:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8004940 <HAL_RCC_GetSysClockFreq+0x248>
 800488c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004890:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004894:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004898:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800489c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048a0:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 80048a4:	e021      	b.n	80048ea <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	ee07 3a90 	vmov	s15, r3
 80048ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048b0:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800494c <HAL_RCC_GetSysClockFreq+0x254>
 80048b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048b8:	4b1d      	ldr	r3, [pc, #116]	@ (8004930 <HAL_RCC_GetSysClockFreq+0x238>)
 80048ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048c0:	ee07 3a90 	vmov	s15, r3
 80048c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80048c8:	ed97 6a02 	vldr	s12, [r7, #8]
 80048cc:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8004940 <HAL_RCC_GetSysClockFreq+0x248>
 80048d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80048d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80048d8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80048e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048e4:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80048e8:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 80048ea:	4b11      	ldr	r3, [pc, #68]	@ (8004930 <HAL_RCC_GetSysClockFreq+0x238>)
 80048ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048ee:	0a5b      	lsrs	r3, r3, #9
 80048f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80048f4:	3301      	adds	r3, #1
 80048f6:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	ee07 3a90 	vmov	s15, r3
 80048fe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004902:	edd7 6a06 	vldr	s13, [r7, #24]
 8004906:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800490a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800490e:	ee17 3a90 	vmov	r3, s15
 8004912:	61fb      	str	r3, [r7, #28]
 8004914:	e004      	b.n	8004920 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8004916:	2300      	movs	r3, #0
 8004918:	61fb      	str	r3, [r7, #28]
 800491a:	e001      	b.n	8004920 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 800491c:	4b06      	ldr	r3, [pc, #24]	@ (8004938 <HAL_RCC_GetSysClockFreq+0x240>)
 800491e:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8004920:	69fb      	ldr	r3, [r7, #28]
}
 8004922:	4618      	mov	r0, r3
 8004924:	3724      	adds	r7, #36	@ 0x24
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr
 800492e:	bf00      	nop
 8004930:	44020c00 	.word	0x44020c00
 8004934:	003d0900 	.word	0x003d0900
 8004938:	03d09000 	.word	0x03d09000
 800493c:	017d7840 	.word	0x017d7840
 8004940:	46000000 	.word	0x46000000
 8004944:	4c742400 	.word	0x4c742400
 8004948:	4bbebc20 	.word	0x4bbebc20
 800494c:	4a742400 	.word	0x4a742400

08004950 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004954:	f7ff fed0 	bl	80046f8 <HAL_RCC_GetSysClockFreq>
 8004958:	4602      	mov	r2, r0
 800495a:	4b08      	ldr	r3, [pc, #32]	@ (800497c <HAL_RCC_GetHCLKFreq+0x2c>)
 800495c:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800495e:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004962:	4907      	ldr	r1, [pc, #28]	@ (8004980 <HAL_RCC_GetHCLKFreq+0x30>)
 8004964:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8004966:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800496a:	fa22 f303 	lsr.w	r3, r2, r3
 800496e:	4a05      	ldr	r2, [pc, #20]	@ (8004984 <HAL_RCC_GetHCLKFreq+0x34>)
 8004970:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8004972:	4b04      	ldr	r3, [pc, #16]	@ (8004984 <HAL_RCC_GetHCLKFreq+0x34>)
 8004974:	681b      	ldr	r3, [r3, #0]
}
 8004976:	4618      	mov	r0, r3
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	44020c00 	.word	0x44020c00
 8004980:	0800cddc 	.word	0x0800cddc
 8004984:	20000008 	.word	0x20000008

08004988 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8004988:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800498c:	b0ba      	sub	sp, #232	@ 0xe8
 800498e:	af00      	add	r7, sp, #0
 8004990:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004994:	2300      	movs	r3, #0
 8004996:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800499a:	2300      	movs	r3, #0
 800499c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80049a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80049a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049a8:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 80049ac:	2500      	movs	r5, #0
 80049ae:	ea54 0305 	orrs.w	r3, r4, r5
 80049b2:	d00b      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 80049b4:	4bcd      	ldr	r3, [pc, #820]	@ (8004cec <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80049b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80049ba:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 80049be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80049c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049c4:	4ac9      	ldr	r2, [pc, #804]	@ (8004cec <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80049c6:	430b      	orrs	r3, r1
 80049c8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80049cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80049d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d4:	f002 0801 	and.w	r8, r2, #1
 80049d8:	f04f 0900 	mov.w	r9, #0
 80049dc:	ea58 0309 	orrs.w	r3, r8, r9
 80049e0:	d042      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 80049e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80049e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049e8:	2b05      	cmp	r3, #5
 80049ea:	d823      	bhi.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0xac>
 80049ec:	a201      	add	r2, pc, #4	@ (adr r2, 80049f4 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 80049ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f2:	bf00      	nop
 80049f4:	08004a3d 	.word	0x08004a3d
 80049f8:	08004a0d 	.word	0x08004a0d
 80049fc:	08004a21 	.word	0x08004a21
 8004a00:	08004a3d 	.word	0x08004a3d
 8004a04:	08004a3d 	.word	0x08004a3d
 8004a08:	08004a3d 	.word	0x08004a3d
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004a0c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a10:	3308      	adds	r3, #8
 8004a12:	4618      	mov	r0, r3
 8004a14:	f001 f978 	bl	8005d08 <RCCEx_PLL2_Config>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 8004a1e:	e00e      	b.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004a20:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a24:	3330      	adds	r3, #48	@ 0x30
 8004a26:	4618      	mov	r0, r3
 8004a28:	f001 fa06 	bl	8005e38 <RCCEx_PLL3_Config>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 8004a32:	e004      	b.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004a3a:	e000      	b.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8004a3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a3e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d10c      	bne.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8004a46:	4ba9      	ldr	r3, [pc, #676]	@ (8004cec <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004a48:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004a4c:	f023 0107 	bic.w	r1, r3, #7
 8004a50:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a56:	4aa5      	ldr	r2, [pc, #660]	@ (8004cec <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004a58:	430b      	orrs	r3, r1
 8004a5a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004a5e:	e003      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a60:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004a64:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a68:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a70:	f002 0a02 	and.w	sl, r2, #2
 8004a74:	f04f 0b00 	mov.w	fp, #0
 8004a78:	ea5a 030b 	orrs.w	r3, sl, fp
 8004a7c:	f000 8088 	beq.w	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8004a80:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a86:	2b28      	cmp	r3, #40	@ 0x28
 8004a88:	d868      	bhi.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8004a8a:	a201      	add	r2, pc, #4	@ (adr r2, 8004a90 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8004a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a90:	08004b65 	.word	0x08004b65
 8004a94:	08004b5d 	.word	0x08004b5d
 8004a98:	08004b5d 	.word	0x08004b5d
 8004a9c:	08004b5d 	.word	0x08004b5d
 8004aa0:	08004b5d 	.word	0x08004b5d
 8004aa4:	08004b5d 	.word	0x08004b5d
 8004aa8:	08004b5d 	.word	0x08004b5d
 8004aac:	08004b5d 	.word	0x08004b5d
 8004ab0:	08004b35 	.word	0x08004b35
 8004ab4:	08004b5d 	.word	0x08004b5d
 8004ab8:	08004b5d 	.word	0x08004b5d
 8004abc:	08004b5d 	.word	0x08004b5d
 8004ac0:	08004b5d 	.word	0x08004b5d
 8004ac4:	08004b5d 	.word	0x08004b5d
 8004ac8:	08004b5d 	.word	0x08004b5d
 8004acc:	08004b5d 	.word	0x08004b5d
 8004ad0:	08004b49 	.word	0x08004b49
 8004ad4:	08004b5d 	.word	0x08004b5d
 8004ad8:	08004b5d 	.word	0x08004b5d
 8004adc:	08004b5d 	.word	0x08004b5d
 8004ae0:	08004b5d 	.word	0x08004b5d
 8004ae4:	08004b5d 	.word	0x08004b5d
 8004ae8:	08004b5d 	.word	0x08004b5d
 8004aec:	08004b5d 	.word	0x08004b5d
 8004af0:	08004b65 	.word	0x08004b65
 8004af4:	08004b5d 	.word	0x08004b5d
 8004af8:	08004b5d 	.word	0x08004b5d
 8004afc:	08004b5d 	.word	0x08004b5d
 8004b00:	08004b5d 	.word	0x08004b5d
 8004b04:	08004b5d 	.word	0x08004b5d
 8004b08:	08004b5d 	.word	0x08004b5d
 8004b0c:	08004b5d 	.word	0x08004b5d
 8004b10:	08004b65 	.word	0x08004b65
 8004b14:	08004b5d 	.word	0x08004b5d
 8004b18:	08004b5d 	.word	0x08004b5d
 8004b1c:	08004b5d 	.word	0x08004b5d
 8004b20:	08004b5d 	.word	0x08004b5d
 8004b24:	08004b5d 	.word	0x08004b5d
 8004b28:	08004b5d 	.word	0x08004b5d
 8004b2c:	08004b5d 	.word	0x08004b5d
 8004b30:	08004b65 	.word	0x08004b65
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004b34:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b38:	3308      	adds	r3, #8
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f001 f8e4 	bl	8005d08 <RCCEx_PLL2_Config>
 8004b40:	4603      	mov	r3, r0
 8004b42:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 8004b46:	e00e      	b.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004b48:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b4c:	3330      	adds	r3, #48	@ 0x30
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f001 f972 	bl	8005e38 <RCCEx_PLL3_Config>
 8004b54:	4603      	mov	r3, r0
 8004b56:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 8004b5a:	e004      	b.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004b62:	e000      	b.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8004b64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b66:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d10c      	bne.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8004b6e:	4b5f      	ldr	r3, [pc, #380]	@ (8004cec <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004b70:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004b74:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004b78:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b7e:	4a5b      	ldr	r2, [pc, #364]	@ (8004cec <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004b80:	430b      	orrs	r3, r1
 8004b82:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004b86:	e003      	b.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b88:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004b8c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b98:	f002 0304 	and.w	r3, r2, #4
 8004b9c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004ba6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004baa:	460b      	mov	r3, r1
 8004bac:	4313      	orrs	r3, r2
 8004bae:	d04e      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8004bb0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004bb4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004bb6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004bba:	d02c      	beq.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8004bbc:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004bc0:	d825      	bhi.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004bc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bc6:	d028      	beq.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004bc8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bcc:	d81f      	bhi.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004bce:	2bc0      	cmp	r3, #192	@ 0xc0
 8004bd0:	d025      	beq.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x296>
 8004bd2:	2bc0      	cmp	r3, #192	@ 0xc0
 8004bd4:	d81b      	bhi.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004bd6:	2b80      	cmp	r3, #128	@ 0x80
 8004bd8:	d00f      	beq.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x272>
 8004bda:	2b80      	cmp	r3, #128	@ 0x80
 8004bdc:	d817      	bhi.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d01f      	beq.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8004be2:	2b40      	cmp	r3, #64	@ 0x40
 8004be4:	d113      	bne.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004be6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004bea:	3308      	adds	r3, #8
 8004bec:	4618      	mov	r0, r3
 8004bee:	f001 f88b 	bl	8005d08 <RCCEx_PLL2_Config>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 8004bf8:	e014      	b.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004bfa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004bfe:	3330      	adds	r3, #48	@ 0x30
 8004c00:	4618      	mov	r0, r3
 8004c02:	f001 f919 	bl	8005e38 <RCCEx_PLL3_Config>
 8004c06:	4603      	mov	r3, r0
 8004c08:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 8004c0c:	e00a      	b.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004c14:	e006      	b.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004c16:	bf00      	nop
 8004c18:	e004      	b.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004c1a:	bf00      	nop
 8004c1c:	e002      	b.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004c1e:	bf00      	nop
 8004c20:	e000      	b.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004c22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c24:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d10c      	bne.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8004c2c:	4b2f      	ldr	r3, [pc, #188]	@ (8004cec <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004c2e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004c32:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004c36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c3c:	4a2b      	ldr	r2, [pc, #172]	@ (8004cec <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004c3e:	430b      	orrs	r3, r1
 8004c40:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004c44:	e003      	b.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c46:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004c4a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c56:	f002 0308 	and.w	r3, r2, #8
 8004c5a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004c5e:	2300      	movs	r3, #0
 8004c60:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004c64:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004c68:	460b      	mov	r3, r1
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	d056      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8004c6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c72:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004c74:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004c78:	d031      	beq.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x356>
 8004c7a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004c7e:	d82a      	bhi.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004c80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c84:	d02d      	beq.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004c86:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c8a:	d824      	bhi.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004c8c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004c90:	d029      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8004c92:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004c96:	d81e      	bhi.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004c98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c9c:	d011      	beq.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8004c9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ca2:	d818      	bhi.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d023      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004ca8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cac:	d113      	bne.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004cae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004cb2:	3308      	adds	r3, #8
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f001 f827 	bl	8005d08 <RCCEx_PLL2_Config>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 8004cc0:	e017      	b.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004cc2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004cc6:	3330      	adds	r3, #48	@ 0x30
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f001 f8b5 	bl	8005e38 <RCCEx_PLL3_Config>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 8004cd4:	e00d      	b.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004cdc:	e009      	b.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8004cde:	bf00      	nop
 8004ce0:	e007      	b.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8004ce2:	bf00      	nop
 8004ce4:	e005      	b.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8004ce6:	bf00      	nop
 8004ce8:	e003      	b.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8004cea:	bf00      	nop
 8004cec:	44020c00 	.word	0x44020c00
        break;
 8004cf0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cf2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d10c      	bne.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8004cfa:	4bb9      	ldr	r3, [pc, #740]	@ (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004cfc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004d00:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8004d04:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d08:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d0a:	4ab5      	ldr	r2, [pc, #724]	@ (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004d0c:	430b      	orrs	r3, r1
 8004d0e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004d12:	e003      	b.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d14:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004d18:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d1c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d24:	f002 0310 	and.w	r3, r2, #16
 8004d28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004d32:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004d36:	460b      	mov	r3, r1
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	d053      	beq.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8004d3c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d42:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004d46:	d031      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x424>
 8004d48:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004d4c:	d82a      	bhi.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004d4e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d52:	d02d      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8004d54:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d58:	d824      	bhi.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004d5a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004d5e:	d029      	beq.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8004d60:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004d64:	d81e      	bhi.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004d66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d6a:	d011      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8004d6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d70:	d818      	bhi.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d020      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8004d76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d7a:	d113      	bne.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004d7c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d80:	3308      	adds	r3, #8
 8004d82:	4618      	mov	r0, r3
 8004d84:	f000 ffc0 	bl	8005d08 <RCCEx_PLL2_Config>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 8004d8e:	e014      	b.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004d90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d94:	3330      	adds	r3, #48	@ 0x30
 8004d96:	4618      	mov	r0, r3
 8004d98:	f001 f84e 	bl	8005e38 <RCCEx_PLL3_Config>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 8004da2:	e00a      	b.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004daa:	e006      	b.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004dac:	bf00      	nop
 8004dae:	e004      	b.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004db0:	bf00      	nop
 8004db2:	e002      	b.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004db4:	bf00      	nop
 8004db6:	e000      	b.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004db8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dba:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d10c      	bne.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8004dc2:	4b87      	ldr	r3, [pc, #540]	@ (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004dc4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004dc8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004dcc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004dd0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004dd2:	4a83      	ldr	r2, [pc, #524]	@ (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004dd4:	430b      	orrs	r3, r1
 8004dd6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004dda:	e003      	b.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ddc:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004de0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004de4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dec:	f002 0320 	and.w	r3, r2, #32
 8004df0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004df4:	2300      	movs	r3, #0
 8004df6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004dfa:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004dfe:	460b      	mov	r3, r1
 8004e00:	4313      	orrs	r3, r2
 8004e02:	d053      	beq.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8004e04:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e0a:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8004e0e:	d031      	beq.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8004e10:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8004e14:	d82a      	bhi.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004e16:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e1a:	d02d      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004e1c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e20:	d824      	bhi.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004e22:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8004e26:	d029      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8004e28:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8004e2c:	d81e      	bhi.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004e2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e32:	d011      	beq.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8004e34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e38:	d818      	bhi.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d020      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8004e3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e42:	d113      	bne.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004e44:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e48:	3308      	adds	r3, #8
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f000 ff5c 	bl	8005d08 <RCCEx_PLL2_Config>
 8004e50:	4603      	mov	r3, r0
 8004e52:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 8004e56:	e014      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004e58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e5c:	3330      	adds	r3, #48	@ 0x30
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f000 ffea 	bl	8005e38 <RCCEx_PLL3_Config>
 8004e64:	4603      	mov	r3, r0
 8004e66:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 8004e6a:	e00a      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004e72:	e006      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004e74:	bf00      	nop
 8004e76:	e004      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004e78:	bf00      	nop
 8004e7a:	e002      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004e7c:	bf00      	nop
 8004e7e:	e000      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004e80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e82:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d10c      	bne.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8004e8a:	4b55      	ldr	r3, [pc, #340]	@ (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004e8c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004e90:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8004e94:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e9a:	4a51      	ldr	r2, [pc, #324]	@ (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004e9c:	430b      	orrs	r3, r1
 8004e9e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004ea2:	e003      	b.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ea4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004ea8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004eac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb4:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004eb8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004ec2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	d053      	beq.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8004ecc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ed0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ed2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004ed6:	d031      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8004ed8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004edc:	d82a      	bhi.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004ede:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004ee2:	d02d      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8004ee4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004ee8:	d824      	bhi.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004eea:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004eee:	d029      	beq.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004ef0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004ef4:	d81e      	bhi.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004ef6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004efa:	d011      	beq.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8004efc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004f00:	d818      	bhi.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d020      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004f06:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004f0a:	d113      	bne.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004f0c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f10:	3308      	adds	r3, #8
 8004f12:	4618      	mov	r0, r3
 8004f14:	f000 fef8 	bl	8005d08 <RCCEx_PLL2_Config>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8004f1e:	e014      	b.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x5c2>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004f20:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f24:	3330      	adds	r3, #48	@ 0x30
 8004f26:	4618      	mov	r0, r3
 8004f28:	f000 ff86 	bl	8005e38 <RCCEx_PLL3_Config>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8004f32:	e00a      	b.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004f3a:	e006      	b.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004f3c:	bf00      	nop
 8004f3e:	e004      	b.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004f40:	bf00      	nop
 8004f42:	e002      	b.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004f44:	bf00      	nop
 8004f46:	e000      	b.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004f48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f4a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d10c      	bne.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8004f52:	4b23      	ldr	r3, [pc, #140]	@ (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004f54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f58:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004f5c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f62:	4a1f      	ldr	r2, [pc, #124]	@ (8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004f64:	430b      	orrs	r3, r1
 8004f66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004f6a:	e003      	b.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f6c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004f70:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f74:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f7c:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004f80:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004f84:	2300      	movs	r3, #0
 8004f86:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004f8a:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004f8e:	460b      	mov	r3, r1
 8004f90:	4313      	orrs	r3, r2
 8004f92:	d03d      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x688>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8004f94:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f98:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004f9a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004f9e:	d01b      	beq.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8004fa0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004fa4:	d814      	bhi.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x648>
 8004fa6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004faa:	d017      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x654>
 8004fac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004fb0:	d80e      	bhi.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x648>
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d016      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8004fb6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fba:	d109      	bne.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x648>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004fbc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004fc0:	3330      	adds	r3, #48	@ 0x30
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f000 ff38 	bl	8005e38 <RCCEx_PLL3_Config>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8004fce:	e00a      	b.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x65e>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004fd6:	e006      	b.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 8004fd8:	bf00      	nop
 8004fda:	e004      	b.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 8004fdc:	bf00      	nop
 8004fde:	e002      	b.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x65e>
 8004fe0:	44020c00 	.word	0x44020c00
        break;
 8004fe4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fe6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d10c      	bne.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x680>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004fee:	4b99      	ldr	r3, [pc, #612]	@ (8005254 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004ff0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004ff4:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004ff8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ffc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ffe:	4a95      	ldr	r2, [pc, #596]	@ (8005254 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005000:	430b      	orrs	r3, r1
 8005002:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005006:	e003      	b.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x688>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005008:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800500c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005010:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005018:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800501c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005020:	2300      	movs	r3, #0
 8005022:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005026:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800502a:	460b      	mov	r3, r1
 800502c:	4313      	orrs	r3, r2
 800502e:	d03b      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x720>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8005030:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005034:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005036:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800503a:	d01b      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
 800503c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005040:	d814      	bhi.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 8005042:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005046:	d017      	beq.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 8005048:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800504c:	d80e      	bhi.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 800504e:	2b00      	cmp	r3, #0
 8005050:	d014      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 8005052:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005056:	d109      	bne.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x6e4>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005058:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800505c:	3330      	adds	r3, #48	@ 0x30
 800505e:	4618      	mov	r0, r3
 8005060:	f000 feea 	bl	8005e38 <RCCEx_PLL3_Config>
 8005064:	4603      	mov	r3, r0
 8005066:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 800506a:	e008      	b.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x6f6>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005072:	e004      	b.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8005074:	bf00      	nop
 8005076:	e002      	b.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8005078:	bf00      	nop
 800507a:	e000      	b.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 800507c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800507e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005082:	2b00      	cmp	r3, #0
 8005084:	d10c      	bne.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x718>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8005086:	4b73      	ldr	r3, [pc, #460]	@ (8005254 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005088:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800508c:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8005090:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005094:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005096:	4a6f      	ldr	r2, [pc, #444]	@ (8005254 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005098:	430b      	orrs	r3, r1
 800509a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800509e:	e003      	b.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050a0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80050a4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80050a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80050b4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80050b8:	2300      	movs	r3, #0
 80050ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80050be:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80050c2:	460b      	mov	r3, r1
 80050c4:	4313      	orrs	r3, r2
 80050c6:	d03d      	beq.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 80050c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050d0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80050d4:	d01b      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x786>
 80050d6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80050da:	d814      	bhi.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 80050dc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80050e0:	d017      	beq.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x78a>
 80050e2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80050e6:	d80e      	bhi.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d014      	beq.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x78e>
 80050ec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80050f0:	d109      	bne.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x77e>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80050f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050f6:	3330      	adds	r3, #48	@ 0x30
 80050f8:	4618      	mov	r0, r3
 80050fa:	f000 fe9d 	bl	8005e38 <RCCEx_PLL3_Config>
 80050fe:	4603      	mov	r3, r0
 8005100:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* I2C3 clock source config set later after clock selection check */
        break;
 8005104:	e008      	b.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x790>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800510c:	e004      	b.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 800510e:	bf00      	nop
 8005110:	e002      	b.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8005112:	bf00      	nop
 8005114:	e000      	b.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8005116:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005118:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800511c:	2b00      	cmp	r3, #0
 800511e:	d10d      	bne.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8005120:	4b4c      	ldr	r3, [pc, #304]	@ (8005254 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005122:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005126:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800512a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800512e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005132:	4a48      	ldr	r2, [pc, #288]	@ (8005254 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005134:	430b      	orrs	r3, r1
 8005136:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800513a:	e003      	b.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800513c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005140:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8005144:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800514c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005150:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005154:	2300      	movs	r3, #0
 8005156:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800515a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800515e:	460b      	mov	r3, r1
 8005160:	4313      	orrs	r3, r2
 8005162:	d035      	beq.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x848>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8005164:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005168:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800516c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005170:	d015      	beq.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x816>
 8005172:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005176:	d80e      	bhi.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x80e>
 8005178:	2b00      	cmp	r3, #0
 800517a:	d012      	beq.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 800517c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005180:	d109      	bne.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005182:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005186:	3330      	adds	r3, #48	@ 0x30
 8005188:	4618      	mov	r0, r3
 800518a:	f000 fe55 	bl	8005e38 <RCCEx_PLL3_Config>
 800518e:	4603      	mov	r3, r0
 8005190:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8005194:	e006      	b.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800519c:	e002      	b.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 800519e:	bf00      	nop
 80051a0:	e000      	b.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 80051a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051a4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d10d      	bne.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 80051ac:	4b29      	ldr	r3, [pc, #164]	@ (8005254 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80051ae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80051b2:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 80051b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80051ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051be:	4a25      	ldr	r2, [pc, #148]	@ (8005254 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80051c0:	430b      	orrs	r3, r1
 80051c2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80051c6:	e003      	b.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x848>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051c8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80051cc:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 80051d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80051d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d8:	2100      	movs	r1, #0
 80051da:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 80051de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80051e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80051e6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80051ea:	460b      	mov	r3, r1
 80051ec:	4313      	orrs	r3, r2
 80051ee:	d037      	beq.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 80051f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80051f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80051fc:	d015      	beq.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 80051fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005202:	d80e      	bhi.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x89a>
 8005204:	2b00      	cmp	r3, #0
 8005206:	d012      	beq.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 8005208:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800520c:	d109      	bne.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x89a>
        break;

#if defined(RCC_I3C2CLKSOURCE_PLL3R)
      case RCC_I3C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800520e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005212:	3330      	adds	r3, #48	@ 0x30
 8005214:	4618      	mov	r0, r3
 8005216:	f000 fe0f 	bl	8005e38 <RCCEx_PLL3_Config>
 800521a:	4603      	mov	r3, r0
 800521c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 8005220:	e006      	b.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005228:	e002      	b.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 800522a:	bf00      	nop
 800522c:	e000      	b.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 800522e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005230:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005234:	2b00      	cmp	r3, #0
 8005236:	d10f      	bne.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x8d0>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 8005238:	4b06      	ldr	r3, [pc, #24]	@ (8005254 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800523a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800523e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8005242:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005246:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800524a:	4a02      	ldr	r2, [pc, #8]	@ (8005254 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800524c:	430b      	orrs	r3, r1
 800524e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005252:	e005      	b.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 8005254:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005258:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800525c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005260:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005268:	2100      	movs	r1, #0
 800526a:	67b9      	str	r1, [r7, #120]	@ 0x78
 800526c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005270:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005272:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005276:	460b      	mov	r3, r1
 8005278:	4313      	orrs	r3, r2
 800527a:	d00e      	beq.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x912>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 800527c:	4bb8      	ldr	r3, [pc, #736]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800527e:	69db      	ldr	r3, [r3, #28]
 8005280:	4ab7      	ldr	r2, [pc, #732]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005282:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005286:	61d3      	str	r3, [r2, #28]
 8005288:	4bb5      	ldr	r3, [pc, #724]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800528a:	69d9      	ldr	r1, [r3, #28]
 800528c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005290:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8005294:	4ab2      	ldr	r2, [pc, #712]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005296:	430b      	orrs	r3, r1
 8005298:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800529a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800529e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80052a6:	673b      	str	r3, [r7, #112]	@ 0x70
 80052a8:	2300      	movs	r3, #0
 80052aa:	677b      	str	r3, [r7, #116]	@ 0x74
 80052ac:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80052b0:	460b      	mov	r3, r1
 80052b2:	4313      	orrs	r3, r2
 80052b4:	d055      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x9da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 80052b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80052ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80052be:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80052c2:	d031      	beq.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 80052c4:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80052c8:	d82a      	bhi.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x998>
 80052ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052ce:	d02d      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x9a4>
 80052d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052d4:	d824      	bhi.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x998>
 80052d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80052da:	d029      	beq.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
 80052dc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80052e0:	d81e      	bhi.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x998>
 80052e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052e6:	d011      	beq.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x984>
 80052e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052ec:	d818      	bhi.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x998>
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d020      	beq.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
 80052f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052f6:	d113      	bne.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x998>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80052f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80052fc:	3308      	adds	r3, #8
 80052fe:	4618      	mov	r0, r3
 8005300:	f000 fd02 	bl	8005d08 <RCCEx_PLL2_Config>
 8005304:	4603      	mov	r3, r0
 8005306:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800530a:	e014      	b.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x9ae>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800530c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005310:	3330      	adds	r3, #48	@ 0x30
 8005312:	4618      	mov	r0, r3
 8005314:	f000 fd90 	bl	8005e38 <RCCEx_PLL3_Config>
 8005318:	4603      	mov	r3, r0
 800531a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800531e:	e00a      	b.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005326:	e006      	b.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8005328:	bf00      	nop
 800532a:	e004      	b.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 800532c:	bf00      	nop
 800532e:	e002      	b.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8005330:	bf00      	nop
 8005332:	e000      	b.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8005334:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005336:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800533a:	2b00      	cmp	r3, #0
 800533c:	d10d      	bne.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x9d2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800533e:	4b88      	ldr	r3, [pc, #544]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005340:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005344:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8005348:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800534c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005350:	4a83      	ldr	r2, [pc, #524]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005352:	430b      	orrs	r3, r1
 8005354:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005358:	e003      	b.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x9da>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800535a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800535e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005362:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800536a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800536e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005370:	2300      	movs	r3, #0
 8005372:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005374:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005378:	460b      	mov	r3, r1
 800537a:	4313      	orrs	r3, r2
 800537c:	d055      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 800537e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005382:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005386:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800538a:	d031      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0xa68>
 800538c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005390:	d82a      	bhi.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8005392:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005396:	d02d      	beq.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
 8005398:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800539c:	d824      	bhi.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 800539e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80053a2:	d029      	beq.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80053a4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80053a8:	d81e      	bhi.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 80053aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053ae:	d011      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 80053b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053b4:	d818      	bhi.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d020      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80053ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053be:	d113      	bne.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80053c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053c4:	3308      	adds	r3, #8
 80053c6:	4618      	mov	r0, r3
 80053c8:	f000 fc9e 	bl	8005d08 <RCCEx_PLL2_Config>
 80053cc:	4603      	mov	r3, r0
 80053ce:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80053d2:	e014      	b.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0xa76>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80053d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053d8:	3330      	adds	r3, #48	@ 0x30
 80053da:	4618      	mov	r0, r3
 80053dc:	f000 fd2c 	bl	8005e38 <RCCEx_PLL3_Config>
 80053e0:	4603      	mov	r3, r0
 80053e2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80053e6:	e00a      	b.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0xa76>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80053ee:	e006      	b.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 80053f0:	bf00      	nop
 80053f2:	e004      	b.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 80053f4:	bf00      	nop
 80053f6:	e002      	b.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 80053f8:	bf00      	nop
 80053fa:	e000      	b.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 80053fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053fe:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005402:	2b00      	cmp	r3, #0
 8005404:	d10d      	bne.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0xa9a>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8005406:	4b56      	ldr	r3, [pc, #344]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005408:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800540c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005410:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005414:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005418:	4a51      	ldr	r2, [pc, #324]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800541a:	430b      	orrs	r3, r1
 800541c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005420:	e003      	b.n	800542a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005422:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005426:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800542a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800542e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005432:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005436:	663b      	str	r3, [r7, #96]	@ 0x60
 8005438:	2300      	movs	r3, #0
 800543a:	667b      	str	r3, [r7, #100]	@ 0x64
 800543c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005440:	460b      	mov	r3, r1
 8005442:	4313      	orrs	r3, r2
 8005444:	d032      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0xb24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8005446:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800544a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800544e:	2b05      	cmp	r3, #5
 8005450:	d80f      	bhi.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0xaea>
 8005452:	2b03      	cmp	r3, #3
 8005454:	d211      	bcs.n	800547a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 8005456:	2b01      	cmp	r3, #1
 8005458:	d911      	bls.n	800547e <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 800545a:	2b02      	cmp	r3, #2
 800545c:	d109      	bne.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0xaea>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800545e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005462:	3308      	adds	r3, #8
 8005464:	4618      	mov	r0, r3
 8005466:	f000 fc4f 	bl	8005d08 <RCCEx_PLL2_Config>
 800546a:	4603      	mov	r3, r0
 800546c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005470:	e006      	b.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005478:	e002      	b.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 800547a:	bf00      	nop
 800547c:	e000      	b.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 800547e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005480:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005484:	2b00      	cmp	r3, #0
 8005486:	d10d      	bne.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8005488:	4b35      	ldr	r3, [pc, #212]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800548a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800548e:	f023 0107 	bic.w	r1, r3, #7
 8005492:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005496:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800549a:	4a31      	ldr	r2, [pc, #196]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800549c:	430b      	orrs	r3, r1
 800549e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80054a2:	e003      	b.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0xb24>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054a4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80054a8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 80054ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80054b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b4:	2100      	movs	r1, #0
 80054b6:	65b9      	str	r1, [r7, #88]	@ 0x58
 80054b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80054bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80054be:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80054c2:	460b      	mov	r3, r1
 80054c4:	4313      	orrs	r3, r2
 80054c6:	d024      	beq.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 80054c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80054cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d005      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0xb58>
 80054d4:	2b08      	cmp	r3, #8
 80054d6:	d005      	beq.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80054de:	e002      	b.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 80054e0:	bf00      	nop
 80054e2:	e000      	b.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 80054e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054e6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d10d      	bne.n	800550a <HAL_RCCEx_PeriphCLKConfig+0xb82>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 80054ee:	4b1c      	ldr	r3, [pc, #112]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80054f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80054f4:	f023 0108 	bic.w	r1, r3, #8
 80054f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80054fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005500:	4a17      	ldr	r2, [pc, #92]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005502:	430b      	orrs	r3, r1
 8005504:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005508:	e003      	b.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800550a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800550e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005512:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800551a:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800551e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005520:	2300      	movs	r3, #0
 8005522:	657b      	str	r3, [r7, #84]	@ 0x54
 8005524:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005528:	460b      	mov	r3, r1
 800552a:	4313      	orrs	r3, r2
 800552c:	f000 80b9 	beq.w	80056a2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8005530:	4b0c      	ldr	r3, [pc, #48]	@ (8005564 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 8005532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005534:	4a0b      	ldr	r2, [pc, #44]	@ (8005564 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 8005536:	f043 0301 	orr.w	r3, r3, #1
 800553a:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800553c:	f7fb fc42 	bl	8000dc4 <HAL_GetTick>
 8005540:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005544:	e010      	b.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005546:	f7fb fc3d 	bl	8000dc4 <HAL_GetTick>
 800554a:	4602      	mov	r2, r0
 800554c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	2b02      	cmp	r3, #2
 8005554:	d908      	bls.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
      {
        ret = HAL_TIMEOUT;
 8005556:	2303      	movs	r3, #3
 8005558:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800555c:	e00a      	b.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0xbec>
 800555e:	bf00      	nop
 8005560:	44020c00 	.word	0x44020c00
 8005564:	44020800 	.word	0x44020800
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005568:	4bba      	ldr	r3, [pc, #744]	@ (8005854 <HAL_RCCEx_PeriphCLKConfig+0xecc>)
 800556a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800556c:	f003 0301 	and.w	r3, r3, #1
 8005570:	2b00      	cmp	r3, #0
 8005572:	d0e8      	beq.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0xbbe>
      }
    }

    if (ret == HAL_OK)
 8005574:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005578:	2b00      	cmp	r3, #0
 800557a:	f040 808e 	bne.w	800569a <HAL_RCCEx_PeriphCLKConfig+0xd12>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800557e:	4bb6      	ldr	r3, [pc, #728]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005580:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005584:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005588:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800558c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005590:	2b00      	cmp	r3, #0
 8005592:	d023      	beq.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8005594:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005598:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 800559c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d01b      	beq.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0xc54>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80055a4:	4bac      	ldr	r3, [pc, #688]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80055a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80055aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80055b2:	4ba9      	ldr	r3, [pc, #676]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80055b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80055b8:	4aa7      	ldr	r2, [pc, #668]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80055ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055be:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80055c2:	4ba5      	ldr	r3, [pc, #660]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80055c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80055c8:	4aa3      	ldr	r2, [pc, #652]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80055ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055ce:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80055d2:	4aa1      	ldr	r2, [pc, #644]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80055d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055d8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80055dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055e0:	f003 0301 	and.w	r3, r3, #1
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d019      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0xc94>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055e8:	f7fb fbec 	bl	8000dc4 <HAL_GetTick>
 80055ec:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055f0:	e00d      	b.n	800560e <HAL_RCCEx_PeriphCLKConfig+0xc86>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055f2:	f7fb fbe7 	bl	8000dc4 <HAL_GetTick>
 80055f6:	4602      	mov	r2, r0
 80055f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80055fc:	1ad2      	subs	r2, r2, r3
 80055fe:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005602:	429a      	cmp	r2, r3
 8005604:	d903      	bls.n	800560e <HAL_RCCEx_PeriphCLKConfig+0xc86>
          {
            ret = HAL_TIMEOUT;
 8005606:	2303      	movs	r3, #3
 8005608:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 800560c:	e006      	b.n	800561c <HAL_RCCEx_PeriphCLKConfig+0xc94>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800560e:	4b92      	ldr	r3, [pc, #584]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005610:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005614:	f003 0302 	and.w	r3, r3, #2
 8005618:	2b00      	cmp	r3, #0
 800561a:	d0ea      	beq.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
          }
        }
      }

      if (ret == HAL_OK)
 800561c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005620:	2b00      	cmp	r3, #0
 8005622:	d135      	bne.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8005624:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005628:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800562c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005630:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005634:	d110      	bne.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0xcd0>
 8005636:	4b88      	ldr	r3, [pc, #544]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005638:	69db      	ldr	r3, [r3, #28]
 800563a:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800563e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005642:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005646:	091b      	lsrs	r3, r3, #4
 8005648:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800564c:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8005650:	4a81      	ldr	r2, [pc, #516]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005652:	430b      	orrs	r3, r1
 8005654:	61d3      	str	r3, [r2, #28]
 8005656:	e005      	b.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8005658:	4b7f      	ldr	r3, [pc, #508]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800565a:	69db      	ldr	r3, [r3, #28]
 800565c:	4a7e      	ldr	r2, [pc, #504]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800565e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005662:	61d3      	str	r3, [r2, #28]
 8005664:	4b7c      	ldr	r3, [pc, #496]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005666:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800566a:	4a7b      	ldr	r2, [pc, #492]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800566c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005670:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005674:	4b78      	ldr	r3, [pc, #480]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005676:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 800567a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800567e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005682:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005686:	4a74      	ldr	r2, [pc, #464]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005688:	430b      	orrs	r3, r1
 800568a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800568e:	e008      	b.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005690:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005694:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 8005698:	e003      	b.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800569a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800569e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80056a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056aa:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80056ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056b0:	2300      	movs	r3, #0
 80056b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056b4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80056b8:	460b      	mov	r3, r1
 80056ba:	4313      	orrs	r3, r2
 80056bc:	d035      	beq.n	800572a <HAL_RCCEx_PeriphCLKConfig+0xda2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80056be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80056c6:	2b30      	cmp	r3, #48	@ 0x30
 80056c8:	d014      	beq.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
 80056ca:	2b30      	cmp	r3, #48	@ 0x30
 80056cc:	d80e      	bhi.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0xd64>
 80056ce:	2b20      	cmp	r3, #32
 80056d0:	d012      	beq.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0xd70>
 80056d2:	2b20      	cmp	r3, #32
 80056d4:	d80a      	bhi.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0xd64>
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d010      	beq.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0xd74>
 80056da:	2b10      	cmp	r3, #16
 80056dc:	d106      	bne.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0xd64>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056de:	4b5e      	ldr	r3, [pc, #376]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80056e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056e2:	4a5d      	ldr	r2, [pc, #372]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80056e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056e8:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 80056ea:	e008      	b.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0xd76>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80056f2:	e004      	b.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 80056f4:	bf00      	nop
 80056f6:	e002      	b.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 80056f8:	bf00      	nop
 80056fa:	e000      	b.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 80056fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056fe:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005702:	2b00      	cmp	r3, #0
 8005704:	d10d      	bne.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8005706:	4b54      	ldr	r3, [pc, #336]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005708:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800570c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005710:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005714:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005718:	4a4f      	ldr	r2, [pc, #316]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800571a:	430b      	orrs	r3, r1
 800571c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005720:	e003      	b.n	800572a <HAL_RCCEx_PeriphCLKConfig+0xda2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005722:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005726:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800572a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800572e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005732:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005736:	643b      	str	r3, [r7, #64]	@ 0x40
 8005738:	2300      	movs	r3, #0
 800573a:	647b      	str	r3, [r7, #68]	@ 0x44
 800573c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005740:	460b      	mov	r3, r1
 8005742:	4313      	orrs	r3, r2
 8005744:	d033      	beq.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8005746:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800574a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800574e:	2b00      	cmp	r3, #0
 8005750:	d002      	beq.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
 8005752:	2b40      	cmp	r3, #64	@ 0x40
 8005754:	d007      	beq.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005756:	e010      	b.n	800577a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005758:	4b3f      	ldr	r3, [pc, #252]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800575a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800575c:	4a3e      	ldr	r2, [pc, #248]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800575e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005762:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8005764:	e00d      	b.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005766:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800576a:	3308      	adds	r3, #8
 800576c:	4618      	mov	r0, r3
 800576e:	f000 facb 	bl	8005d08 <RCCEx_PLL2_Config>
 8005772:	4603      	mov	r3, r0
 8005774:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8005778:	e003      	b.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      default:
        ret = HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005780:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005782:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005786:	2b00      	cmp	r3, #0
 8005788:	d10d      	bne.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 800578a:	4b33      	ldr	r3, [pc, #204]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800578c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005790:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8005794:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005798:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800579c:	4a2e      	ldr	r2, [pc, #184]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800579e:	430b      	orrs	r3, r1
 80057a0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80057a4:	e003      	b.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0xe26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057a6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80057aa:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80057ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80057b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b6:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80057ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 80057bc:	2300      	movs	r3, #0
 80057be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80057c0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80057c4:	460b      	mov	r3, r1
 80057c6:	4313      	orrs	r3, r2
 80057c8:	d04c      	beq.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0xedc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 80057ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80057ce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80057d2:	2b04      	cmp	r3, #4
 80057d4:	d827      	bhi.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 80057d6:	a201      	add	r2, pc, #4	@ (adr r2, 80057dc <HAL_RCCEx_PeriphCLKConfig+0xe54>)
 80057d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057dc:	080057f1 	.word	0x080057f1
 80057e0:	080057ff 	.word	0x080057ff
 80057e4:	08005813 	.word	0x08005813
 80057e8:	0800582f 	.word	0x0800582f
 80057ec:	0800582f 	.word	0x0800582f
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057f0:	4b19      	ldr	r3, [pc, #100]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80057f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057f4:	4a18      	ldr	r2, [pc, #96]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80057f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057fa:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80057fc:	e018      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0xea8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80057fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005802:	3308      	adds	r3, #8
 8005804:	4618      	mov	r0, r3
 8005806:	f000 fa7f 	bl	8005d08 <RCCEx_PLL2_Config>
 800580a:	4603      	mov	r3, r0
 800580c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005810:	e00e      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0xea8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005812:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005816:	3330      	adds	r3, #48	@ 0x30
 8005818:	4618      	mov	r0, r3
 800581a:	f000 fb0d 	bl	8005e38 <RCCEx_PLL3_Config>
 800581e:	4603      	mov	r3, r0
 8005820:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005824:	e004      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0xea8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800582c:	e000      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0xea8>
        break;
 800582e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005830:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005834:	2b00      	cmp	r3, #0
 8005836:	d111      	bne.n	800585c <HAL_RCCEx_PeriphCLKConfig+0xed4>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005838:	4b07      	ldr	r3, [pc, #28]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800583a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800583e:	f023 0107 	bic.w	r1, r3, #7
 8005842:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005846:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800584a:	4a03      	ldr	r2, [pc, #12]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800584c:	430b      	orrs	r3, r1
 800584e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005852:	e007      	b.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0xedc>
 8005854:	44020800 	.word	0x44020800
 8005858:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800585c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005860:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8005864:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800586c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005870:	633b      	str	r3, [r7, #48]	@ 0x30
 8005872:	2300      	movs	r3, #0
 8005874:	637b      	str	r3, [r7, #52]	@ 0x34
 8005876:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800587a:	460b      	mov	r3, r1
 800587c:	4313      	orrs	r3, r2
 800587e:	f000 8081 	beq.w	8005984 <HAL_RCCEx_PeriphCLKConfig+0xffc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8005882:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005886:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800588a:	2b20      	cmp	r3, #32
 800588c:	d85f      	bhi.n	800594e <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 800588e:	a201      	add	r2, pc, #4	@ (adr r2, 8005894 <HAL_RCCEx_PeriphCLKConfig+0xf0c>)
 8005890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005894:	08005919 	.word	0x08005919
 8005898:	0800594f 	.word	0x0800594f
 800589c:	0800594f 	.word	0x0800594f
 80058a0:	0800594f 	.word	0x0800594f
 80058a4:	0800594f 	.word	0x0800594f
 80058a8:	0800594f 	.word	0x0800594f
 80058ac:	0800594f 	.word	0x0800594f
 80058b0:	0800594f 	.word	0x0800594f
 80058b4:	08005927 	.word	0x08005927
 80058b8:	0800594f 	.word	0x0800594f
 80058bc:	0800594f 	.word	0x0800594f
 80058c0:	0800594f 	.word	0x0800594f
 80058c4:	0800594f 	.word	0x0800594f
 80058c8:	0800594f 	.word	0x0800594f
 80058cc:	0800594f 	.word	0x0800594f
 80058d0:	0800594f 	.word	0x0800594f
 80058d4:	0800593b 	.word	0x0800593b
 80058d8:	0800594f 	.word	0x0800594f
 80058dc:	0800594f 	.word	0x0800594f
 80058e0:	0800594f 	.word	0x0800594f
 80058e4:	0800594f 	.word	0x0800594f
 80058e8:	0800594f 	.word	0x0800594f
 80058ec:	0800594f 	.word	0x0800594f
 80058f0:	0800594f 	.word	0x0800594f
 80058f4:	08005957 	.word	0x08005957
 80058f8:	0800594f 	.word	0x0800594f
 80058fc:	0800594f 	.word	0x0800594f
 8005900:	0800594f 	.word	0x0800594f
 8005904:	0800594f 	.word	0x0800594f
 8005908:	0800594f 	.word	0x0800594f
 800590c:	0800594f 	.word	0x0800594f
 8005910:	0800594f 	.word	0x0800594f
 8005914:	08005957 	.word	0x08005957
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005918:	4bb9      	ldr	r3, [pc, #740]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800591a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800591c:	4ab8      	ldr	r2, [pc, #736]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800591e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005922:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005924:	e018      	b.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0xfd0>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005926:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800592a:	3308      	adds	r3, #8
 800592c:	4618      	mov	r0, r3
 800592e:	f000 f9eb 	bl	8005d08 <RCCEx_PLL2_Config>
 8005932:	4603      	mov	r3, r0
 8005934:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005938:	e00e      	b.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0xfd0>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800593a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800593e:	3330      	adds	r3, #48	@ 0x30
 8005940:	4618      	mov	r0, r3
 8005942:	f000 fa79 	bl	8005e38 <RCCEx_PLL3_Config>
 8005946:	4603      	mov	r3, r0
 8005948:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800594c:	e004      	b.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005954:	e000      	b.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        break;
 8005956:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005958:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800595c:	2b00      	cmp	r3, #0
 800595e:	d10d      	bne.n	800597c <HAL_RCCEx_PeriphCLKConfig+0xff4>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8005960:	4ba7      	ldr	r3, [pc, #668]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005962:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005966:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800596a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800596e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005972:	4aa3      	ldr	r2, [pc, #652]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005974:	430b      	orrs	r3, r1
 8005976:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800597a:	e003      	b.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0xffc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800597c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005980:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8005984:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800598c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005990:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005992:	2300      	movs	r3, #0
 8005994:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005996:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800599a:	460b      	mov	r3, r1
 800599c:	4313      	orrs	r3, r2
 800599e:	d04e      	beq.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x10b6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 80059a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80059a4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80059a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059ac:	d02e      	beq.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80059ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059b2:	d827      	bhi.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80059b4:	2bc0      	cmp	r3, #192	@ 0xc0
 80059b6:	d02b      	beq.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x1088>
 80059b8:	2bc0      	cmp	r3, #192	@ 0xc0
 80059ba:	d823      	bhi.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80059bc:	2b80      	cmp	r3, #128	@ 0x80
 80059be:	d017      	beq.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x1068>
 80059c0:	2b80      	cmp	r3, #128	@ 0x80
 80059c2:	d81f      	bhi.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d002      	beq.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x1046>
 80059c8:	2b40      	cmp	r3, #64	@ 0x40
 80059ca:	d007      	beq.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x1054>
 80059cc:	e01a      	b.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059ce:	4b8c      	ldr	r3, [pc, #560]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80059d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059d2:	4a8b      	ldr	r2, [pc, #556]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80059d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059d8:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80059da:	e01a      	b.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x108a>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80059dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80059e0:	3308      	adds	r3, #8
 80059e2:	4618      	mov	r0, r3
 80059e4:	f000 f990 	bl	8005d08 <RCCEx_PLL2_Config>
 80059e8:	4603      	mov	r3, r0
 80059ea:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80059ee:	e010      	b.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x108a>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80059f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80059f4:	3330      	adds	r3, #48	@ 0x30
 80059f6:	4618      	mov	r0, r3
 80059f8:	f000 fa1e 	bl	8005e38 <RCCEx_PLL3_Config>
 80059fc:	4603      	mov	r3, r0
 80059fe:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8005a02:	e006      	b.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x108a>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005a0a:	e002      	b.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 8005a0c:	bf00      	nop
 8005a0e:	e000      	b.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 8005a10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a12:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d10d      	bne.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8005a1a:	4b79      	ldr	r3, [pc, #484]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005a1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005a20:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 8005a24:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a28:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005a2c:	4974      	ldr	r1, [pc, #464]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005a34:	e003      	b.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x10b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a36:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005a3a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8005a3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a46:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005a4a:	623b      	str	r3, [r7, #32]
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a50:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005a54:	460b      	mov	r3, r1
 8005a56:	4313      	orrs	r3, r2
 8005a58:	d055      	beq.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x117e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8005a5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a5e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005a62:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005a66:	d031      	beq.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x1144>
 8005a68:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005a6c:	d82a      	bhi.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8005a6e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a72:	d02d      	beq.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
 8005a74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a78:	d824      	bhi.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8005a7a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005a7e:	d029      	beq.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x114c>
 8005a80:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005a84:	d81e      	bhi.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8005a86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a8a:	d011      	beq.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x1128>
 8005a8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a90:	d818      	bhi.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d020      	beq.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x1150>
 8005a96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a9a:	d113      	bne.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x113c>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005a9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005aa0:	3308      	adds	r3, #8
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f000 f930 	bl	8005d08 <RCCEx_PLL2_Config>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8005aae:	e014      	b.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x1152>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005ab0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005ab4:	3330      	adds	r3, #48	@ 0x30
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f000 f9be 	bl	8005e38 <RCCEx_PLL3_Config>
 8005abc:	4603      	mov	r3, r0
 8005abe:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8005ac2:	e00a      	b.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x1152>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005aca:	e006      	b.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8005acc:	bf00      	nop
 8005ace:	e004      	b.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8005ad0:	bf00      	nop
 8005ad2:	e002      	b.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8005ad4:	bf00      	nop
 8005ad6:	e000      	b.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8005ad8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ada:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d10d      	bne.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x1176>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8005ae2:	4b47      	ldr	r3, [pc, #284]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005ae4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005ae8:	f423 6260 	bic.w	r2, r3, #3584	@ 0xe00
 8005aec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005af0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005af4:	4942      	ldr	r1, [pc, #264]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005af6:	4313      	orrs	r3, r2
 8005af8:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005afc:	e003      	b.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x117e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005afe:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005b02:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005b06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b0e:	2100      	movs	r1, #0
 8005b10:	61b9      	str	r1, [r7, #24]
 8005b12:	f003 0302 	and.w	r3, r3, #2
 8005b16:	61fb      	str	r3, [r7, #28]
 8005b18:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005b1c:	460b      	mov	r3, r1
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	d03c      	beq.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8005b22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b26:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005b2a:	2b03      	cmp	r3, #3
 8005b2c:	d81b      	bhi.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x11de>
 8005b2e:	a201      	add	r2, pc, #4	@ (adr r2, 8005b34 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
 8005b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b34:	08005b6f 	.word	0x08005b6f
 8005b38:	08005b45 	.word	0x08005b45
 8005b3c:	08005b53 	.word	0x08005b53
 8005b40:	08005b6f 	.word	0x08005b6f
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b44:	4b2e      	ldr	r3, [pc, #184]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b48:	4a2d      	ldr	r2, [pc, #180]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005b4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b4e:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005b50:	e00e      	b.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x11e8>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005b52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b56:	3308      	adds	r3, #8
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f000 f8d5 	bl	8005d08 <RCCEx_PLL2_Config>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8005b64:	e004      	b.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005b6c:	e000      	b.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
        break;
 8005b6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b70:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d10d      	bne.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x120c>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8005b78:	4b21      	ldr	r3, [pc, #132]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005b7a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005b7e:	f023 0203 	bic.w	r2, r3, #3
 8005b82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b86:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005b8a:	491d      	ldr	r1, [pc, #116]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8005b92:	e003      	b.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x1214>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b94:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005b98:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005b9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba4:	2100      	movs	r1, #0
 8005ba6:	6139      	str	r1, [r7, #16]
 8005ba8:	f003 0304 	and.w	r3, r3, #4
 8005bac:	617b      	str	r3, [r7, #20]
 8005bae:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005bb2:	460b      	mov	r3, r1
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	d03c      	beq.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x12aa>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8005bb8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005bbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005bc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bc4:	d00e      	beq.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8005bc6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bca:	d815      	bhi.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x1270>
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d019      	beq.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x127c>
 8005bd0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bd4:	d110      	bne.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x1270>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bd6:	4b0a      	ldr	r3, [pc, #40]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005bd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bda:	4a09      	ldr	r2, [pc, #36]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005bdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005be0:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005be2:	e010      	b.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x127e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005be4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005be8:	3308      	adds	r3, #8
 8005bea:	4618      	mov	r0, r3
 8005bec:	f000 f88c 	bl	8005d08 <RCCEx_PLL2_Config>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005bf6:	e006      	b.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x127e>

      default:
        ret = HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005bfe:	e002      	b.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x127e>
 8005c00:	44020c00 	.word	0x44020c00
        break;
 8005c04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c06:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d10d      	bne.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x12a2>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8005c0e:	4b3d      	ldr	r3, [pc, #244]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005c10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005c14:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005c18:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c20:	4938      	ldr	r1, [pc, #224]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005c22:	4313      	orrs	r3, r2
 8005c24:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8005c28:	e003      	b.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x12aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c2a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005c2e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005c32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c3a:	2100      	movs	r1, #0
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	f003 0310 	and.w	r3, r3, #16
 8005c42:	60fb      	str	r3, [r7, #12]
 8005c44:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005c48:	460b      	mov	r3, r1
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	d038      	beq.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x1338>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8005c4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c52:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005c56:	2b30      	cmp	r3, #48	@ 0x30
 8005c58:	d01b      	beq.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x130a>
 8005c5a:	2b30      	cmp	r3, #48	@ 0x30
 8005c5c:	d815      	bhi.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x1302>
 8005c5e:	2b10      	cmp	r3, #16
 8005c60:	d002      	beq.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
 8005c62:	2b20      	cmp	r3, #32
 8005c64:	d007      	beq.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x12ee>
 8005c66:	e010      	b.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x1302>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c68:	4b26      	ldr	r3, [pc, #152]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c6c:	4a25      	ldr	r2, [pc, #148]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005c6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c72:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8005c74:	e00e      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x130c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005c76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c7a:	3330      	adds	r3, #48	@ 0x30
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f000 f8db 	bl	8005e38 <RCCEx_PLL3_Config>
 8005c82:	4603      	mov	r3, r0
 8005c84:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8005c88:	e004      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x130c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005c90:	e000      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x130c>
        break;
 8005c92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c94:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d10d      	bne.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x1330>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8005c9c:	4b19      	ldr	r3, [pc, #100]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005c9e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005ca2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005ca6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005caa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005cae:	4915      	ldr	r1, [pc, #84]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8005cb6:	e003      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x1338>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cb8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005cbc:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005cc0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc8:	2100      	movs	r1, #0
 8005cca:	6039      	str	r1, [r7, #0]
 8005ccc:	f003 0308 	and.w	r3, r3, #8
 8005cd0:	607b      	str	r3, [r7, #4]
 8005cd2:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005cd6:	460b      	mov	r3, r1
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	d00c      	beq.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x136e>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8005cdc:	4b09      	ldr	r3, [pc, #36]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005cde:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005ce2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005ce6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005cea:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005cee:	4905      	ldr	r1, [pc, #20]	@ (8005d04 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 8005cf6:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	37e8      	adds	r7, #232	@ 0xe8
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d04:	44020c00 	.word	0x44020c00

08005d08 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b084      	sub	sp, #16
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8005d10:	4b48      	ldr	r3, [pc, #288]	@ (8005e34 <RCCEx_PLL2_Config+0x12c>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a47      	ldr	r2, [pc, #284]	@ (8005e34 <RCCEx_PLL2_Config+0x12c>)
 8005d16:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005d1a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005d1c:	f7fb f852 	bl	8000dc4 <HAL_GetTick>
 8005d20:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005d22:	e008      	b.n	8005d36 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005d24:	f7fb f84e 	bl	8000dc4 <HAL_GetTick>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	1ad3      	subs	r3, r2, r3
 8005d2e:	2b02      	cmp	r3, #2
 8005d30:	d901      	bls.n	8005d36 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005d32:	2303      	movs	r3, #3
 8005d34:	e07a      	b.n	8005e2c <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005d36:	4b3f      	ldr	r3, [pc, #252]	@ (8005e34 <RCCEx_PLL2_Config+0x12c>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d1f0      	bne.n	8005d24 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8005d42:	4b3c      	ldr	r3, [pc, #240]	@ (8005e34 <RCCEx_PLL2_Config+0x12c>)
 8005d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d46:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005d4a:	f023 0303 	bic.w	r3, r3, #3
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	6811      	ldr	r1, [r2, #0]
 8005d52:	687a      	ldr	r2, [r7, #4]
 8005d54:	6852      	ldr	r2, [r2, #4]
 8005d56:	0212      	lsls	r2, r2, #8
 8005d58:	430a      	orrs	r2, r1
 8005d5a:	4936      	ldr	r1, [pc, #216]	@ (8005e34 <RCCEx_PLL2_Config+0x12c>)
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	3b01      	subs	r3, #1
 8005d66:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	68db      	ldr	r3, [r3, #12]
 8005d6e:	3b01      	subs	r3, #1
 8005d70:	025b      	lsls	r3, r3, #9
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	431a      	orrs	r2, r3
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	691b      	ldr	r3, [r3, #16]
 8005d7a:	3b01      	subs	r3, #1
 8005d7c:	041b      	lsls	r3, r3, #16
 8005d7e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005d82:	431a      	orrs	r2, r3
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	695b      	ldr	r3, [r3, #20]
 8005d88:	3b01      	subs	r3, #1
 8005d8a:	061b      	lsls	r3, r3, #24
 8005d8c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005d90:	4928      	ldr	r1, [pc, #160]	@ (8005e34 <RCCEx_PLL2_Config+0x12c>)
 8005d92:	4313      	orrs	r3, r2
 8005d94:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8005d96:	4b27      	ldr	r3, [pc, #156]	@ (8005e34 <RCCEx_PLL2_Config+0x12c>)
 8005d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d9a:	f023 020c 	bic.w	r2, r3, #12
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	699b      	ldr	r3, [r3, #24]
 8005da2:	4924      	ldr	r1, [pc, #144]	@ (8005e34 <RCCEx_PLL2_Config+0x12c>)
 8005da4:	4313      	orrs	r3, r2
 8005da6:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8005da8:	4b22      	ldr	r3, [pc, #136]	@ (8005e34 <RCCEx_PLL2_Config+0x12c>)
 8005daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dac:	f023 0220 	bic.w	r2, r3, #32
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	69db      	ldr	r3, [r3, #28]
 8005db4:	491f      	ldr	r1, [pc, #124]	@ (8005e34 <RCCEx_PLL2_Config+0x12c>)
 8005db6:	4313      	orrs	r3, r2
 8005db8:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8005dba:	4b1e      	ldr	r3, [pc, #120]	@ (8005e34 <RCCEx_PLL2_Config+0x12c>)
 8005dbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dc2:	491c      	ldr	r1, [pc, #112]	@ (8005e34 <RCCEx_PLL2_Config+0x12c>)
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8005dc8:	4b1a      	ldr	r3, [pc, #104]	@ (8005e34 <RCCEx_PLL2_Config+0x12c>)
 8005dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dcc:	4a19      	ldr	r2, [pc, #100]	@ (8005e34 <RCCEx_PLL2_Config+0x12c>)
 8005dce:	f023 0310 	bic.w	r3, r3, #16
 8005dd2:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8005dd4:	4b17      	ldr	r3, [pc, #92]	@ (8005e34 <RCCEx_PLL2_Config+0x12c>)
 8005dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dd8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005ddc:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	6a12      	ldr	r2, [r2, #32]
 8005de4:	00d2      	lsls	r2, r2, #3
 8005de6:	4913      	ldr	r1, [pc, #76]	@ (8005e34 <RCCEx_PLL2_Config+0x12c>)
 8005de8:	4313      	orrs	r3, r2
 8005dea:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8005dec:	4b11      	ldr	r3, [pc, #68]	@ (8005e34 <RCCEx_PLL2_Config+0x12c>)
 8005dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005df0:	4a10      	ldr	r2, [pc, #64]	@ (8005e34 <RCCEx_PLL2_Config+0x12c>)
 8005df2:	f043 0310 	orr.w	r3, r3, #16
 8005df6:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8005df8:	4b0e      	ldr	r3, [pc, #56]	@ (8005e34 <RCCEx_PLL2_Config+0x12c>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a0d      	ldr	r2, [pc, #52]	@ (8005e34 <RCCEx_PLL2_Config+0x12c>)
 8005dfe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005e02:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005e04:	f7fa ffde 	bl	8000dc4 <HAL_GetTick>
 8005e08:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005e0a:	e008      	b.n	8005e1e <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005e0c:	f7fa ffda 	bl	8000dc4 <HAL_GetTick>
 8005e10:	4602      	mov	r2, r0
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	1ad3      	subs	r3, r2, r3
 8005e16:	2b02      	cmp	r3, #2
 8005e18:	d901      	bls.n	8005e1e <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8005e1a:	2303      	movs	r3, #3
 8005e1c:	e006      	b.n	8005e2c <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005e1e:	4b05      	ldr	r3, [pc, #20]	@ (8005e34 <RCCEx_PLL2_Config+0x12c>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d0f0      	beq.n	8005e0c <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8005e2a:	2300      	movs	r3, #0

}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3710      	adds	r7, #16
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}
 8005e34:	44020c00 	.word	0x44020c00

08005e38 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b084      	sub	sp, #16
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8005e40:	4b48      	ldr	r3, [pc, #288]	@ (8005f64 <RCCEx_PLL3_Config+0x12c>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a47      	ldr	r2, [pc, #284]	@ (8005f64 <RCCEx_PLL3_Config+0x12c>)
 8005e46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e4a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005e4c:	f7fa ffba 	bl	8000dc4 <HAL_GetTick>
 8005e50:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005e52:	e008      	b.n	8005e66 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005e54:	f7fa ffb6 	bl	8000dc4 <HAL_GetTick>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	1ad3      	subs	r3, r2, r3
 8005e5e:	2b02      	cmp	r3, #2
 8005e60:	d901      	bls.n	8005e66 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005e62:	2303      	movs	r3, #3
 8005e64:	e07a      	b.n	8005f5c <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005e66:	4b3f      	ldr	r3, [pc, #252]	@ (8005f64 <RCCEx_PLL3_Config+0x12c>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d1f0      	bne.n	8005e54 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8005e72:	4b3c      	ldr	r3, [pc, #240]	@ (8005f64 <RCCEx_PLL3_Config+0x12c>)
 8005e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e76:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005e7a:	f023 0303 	bic.w	r3, r3, #3
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	6811      	ldr	r1, [r2, #0]
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	6852      	ldr	r2, [r2, #4]
 8005e86:	0212      	lsls	r2, r2, #8
 8005e88:	430a      	orrs	r2, r1
 8005e8a:	4936      	ldr	r1, [pc, #216]	@ (8005f64 <RCCEx_PLL3_Config+0x12c>)
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	630b      	str	r3, [r1, #48]	@ 0x30
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	3b01      	subs	r3, #1
 8005e96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	3b01      	subs	r3, #1
 8005ea0:	025b      	lsls	r3, r3, #9
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	431a      	orrs	r2, r3
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	691b      	ldr	r3, [r3, #16]
 8005eaa:	3b01      	subs	r3, #1
 8005eac:	041b      	lsls	r3, r3, #16
 8005eae:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005eb2:	431a      	orrs	r2, r3
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	695b      	ldr	r3, [r3, #20]
 8005eb8:	3b01      	subs	r3, #1
 8005eba:	061b      	lsls	r3, r3, #24
 8005ebc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005ec0:	4928      	ldr	r1, [pc, #160]	@ (8005f64 <RCCEx_PLL3_Config+0x12c>)
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005ec6:	4b27      	ldr	r3, [pc, #156]	@ (8005f64 <RCCEx_PLL3_Config+0x12c>)
 8005ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eca:	f023 020c 	bic.w	r2, r3, #12
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	699b      	ldr	r3, [r3, #24]
 8005ed2:	4924      	ldr	r1, [pc, #144]	@ (8005f64 <RCCEx_PLL3_Config+0x12c>)
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8005ed8:	4b22      	ldr	r3, [pc, #136]	@ (8005f64 <RCCEx_PLL3_Config+0x12c>)
 8005eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005edc:	f023 0220 	bic.w	r2, r3, #32
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	69db      	ldr	r3, [r3, #28]
 8005ee4:	491f      	ldr	r1, [pc, #124]	@ (8005f64 <RCCEx_PLL3_Config+0x12c>)
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8005eea:	4b1e      	ldr	r3, [pc, #120]	@ (8005f64 <RCCEx_PLL3_Config+0x12c>)
 8005eec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ef2:	491c      	ldr	r1, [pc, #112]	@ (8005f64 <RCCEx_PLL3_Config+0x12c>)
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8005ef8:	4b1a      	ldr	r3, [pc, #104]	@ (8005f64 <RCCEx_PLL3_Config+0x12c>)
 8005efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005efc:	4a19      	ldr	r2, [pc, #100]	@ (8005f64 <RCCEx_PLL3_Config+0x12c>)
 8005efe:	f023 0310 	bic.w	r3, r3, #16
 8005f02:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8005f04:	4b17      	ldr	r3, [pc, #92]	@ (8005f64 <RCCEx_PLL3_Config+0x12c>)
 8005f06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f08:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f0c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	6a12      	ldr	r2, [r2, #32]
 8005f14:	00d2      	lsls	r2, r2, #3
 8005f16:	4913      	ldr	r1, [pc, #76]	@ (8005f64 <RCCEx_PLL3_Config+0x12c>)
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8005f1c:	4b11      	ldr	r3, [pc, #68]	@ (8005f64 <RCCEx_PLL3_Config+0x12c>)
 8005f1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f20:	4a10      	ldr	r2, [pc, #64]	@ (8005f64 <RCCEx_PLL3_Config+0x12c>)
 8005f22:	f043 0310 	orr.w	r3, r3, #16
 8005f26:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8005f28:	4b0e      	ldr	r3, [pc, #56]	@ (8005f64 <RCCEx_PLL3_Config+0x12c>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a0d      	ldr	r2, [pc, #52]	@ (8005f64 <RCCEx_PLL3_Config+0x12c>)
 8005f2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f32:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005f34:	f7fa ff46 	bl	8000dc4 <HAL_GetTick>
 8005f38:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005f3a:	e008      	b.n	8005f4e <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005f3c:	f7fa ff42 	bl	8000dc4 <HAL_GetTick>
 8005f40:	4602      	mov	r2, r0
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	1ad3      	subs	r3, r2, r3
 8005f46:	2b02      	cmp	r3, #2
 8005f48:	d901      	bls.n	8005f4e <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 8005f4a:	2303      	movs	r3, #3
 8005f4c:	e006      	b.n	8005f5c <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005f4e:	4b05      	ldr	r3, [pc, #20]	@ (8005f64 <RCCEx_PLL3_Config+0x12c>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d0f0      	beq.n	8005f3c <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 8005f5a:	2300      	movs	r3, #0
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3710      	adds	r7, #16
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	44020c00 	.word	0x44020c00

08005f68 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_DRD_TypeDef *USBx)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b085      	sub	sp, #20
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2200      	movs	r2, #0
 8005f74:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005f76:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8005f7a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = winterruptmask;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	68fa      	ldr	r2, [r7, #12]
 8005f80:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005f82:	2300      	movs	r3, #0
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3714      	adds	r7, #20
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b085      	sub	sp, #20
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005f98:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8005f9c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	43db      	mvns	r3, r3
 8005fa6:	401a      	ands	r2, r3
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005fac:	2300      	movs	r3, #0
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3714      	adds	r7, #20
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr

08005fba <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 8005fba:	b480      	push	{r7}
 8005fbc:	b083      	sub	sp, #12
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
 8005fc2:	460b      	mov	r3, r1
 8005fc4:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 8005fc6:	78fb      	ldrb	r3, [r7, #3]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d106      	bne.n	8005fda <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fd0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	641a      	str	r2, [r3, #64]	@ 0x40
 8005fd8:	e00b      	b.n	8005ff2 <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 8005fda:	78fb      	ldrb	r3, [r7, #3]
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d106      	bne.n	8005fee <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fe4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	641a      	str	r2, [r3, #64]	@ 0x40
 8005fec:	e001      	b.n	8005ff2 <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e000      	b.n	8005ff4 <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 8005ff2:	2300      	movs	r3, #0
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	370c      	adds	r7, #12
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 8006000:	b084      	sub	sp, #16
 8006002:	b580      	push	{r7, lr}
 8006004:	b084      	sub	sp, #16
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]
 800600a:	f107 001c 	add.w	r0, r7, #28
 800600e:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2201      	movs	r2, #1
 8006016:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800601c:	f023 0201 	bic.w	r2, r3, #1
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 8006024:	2100      	movs	r1, #0
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f7ff ffc7 	bl	8005fba <USB_SetCurrentMode>
 800602c:	4603      	mov	r3, r0
 800602e:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 8006036:	7bfb      	ldrb	r3, [r7, #15]
}
 8006038:	4618      	mov	r0, r3
 800603a:	3710      	adds	r7, #16
 800603c:	46bd      	mov	sp, r7
 800603e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006042:	b004      	add	sp, #16
 8006044:	4770      	bx	lr
	...

08006048 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8006048:	b480      	push	{r7}
 800604a:	b09f      	sub	sp, #124	@ 0x7c
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006052:	2300      	movs	r3, #0
 8006054:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  uint32_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	4413      	add	r3, r2
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	4ba0      	ldr	r3, [pc, #640]	@ (80062e8 <USB_ActivateEndpoint+0x2a0>)
 8006066:	4013      	ands	r3, r2
 8006068:	673b      	str	r3, [r7, #112]	@ 0x70

  /* initialize Endpoint */
  switch (ep->type)
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	78db      	ldrb	r3, [r3, #3]
 800606e:	2b03      	cmp	r3, #3
 8006070:	d819      	bhi.n	80060a6 <USB_ActivateEndpoint+0x5e>
 8006072:	a201      	add	r2, pc, #4	@ (adr r2, 8006078 <USB_ActivateEndpoint+0x30>)
 8006074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006078:	08006089 	.word	0x08006089
 800607c:	0800609d 	.word	0x0800609d
 8006080:	080060af 	.word	0x080060af
 8006084:	08006093 	.word	0x08006093
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006088:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800608a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800608e:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 8006090:	e00e      	b.n	80060b0 <USB_ActivateEndpoint+0x68>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006092:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006094:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8006098:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800609a:	e009      	b.n	80060b0 <USB_ActivateEndpoint+0x68>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800609c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800609e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80060a2:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 80060a4:	e004      	b.n	80060b0 <USB_ActivateEndpoint+0x68>

    default:
      ret = HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      break;
 80060ac:	e000      	b.n	80060b0 <USB_ActivateEndpoint+0x68>
      break;
 80060ae:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_VTRX | USB_EP_VTTX));
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	441a      	add	r2, r3
 80060ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80060bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060c4:	6013      	str	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	009b      	lsls	r3, r3, #2
 80060ce:	4413      	add	r3, r2
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	4b86      	ldr	r3, [pc, #536]	@ (80062ec <USB_ActivateEndpoint+0x2a4>)
 80060d4:	4013      	ands	r3, r2
 80060d6:	683a      	ldr	r2, [r7, #0]
 80060d8:	7812      	ldrb	r2, [r2, #0]
 80060da:	4313      	orrs	r3, r2
 80060dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	781b      	ldrb	r3, [r3, #0]
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	441a      	add	r2, r3
 80060e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80060ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060f2:	6013      	str	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	7b1b      	ldrb	r3, [r3, #12]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	f040 8177 	bne.w	80063ec <USB_ActivateEndpoint+0x3a4>
  {
    if (ep->is_in != 0U)
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	785b      	ldrb	r3, [r3, #1]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d079      	beq.n	80061fa <USB_ActivateEndpoint+0x1b2>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	00db      	lsls	r3, r3, #3
 800610c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006110:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	781b      	ldrb	r3, [r3, #0]
 800611a:	00db      	lsls	r3, r3, #3
 800611c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006120:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006124:	0c12      	lsrs	r2, r2, #16
 8006126:	0412      	lsls	r2, r2, #16
 8006128:	601a      	str	r2, [r3, #0]
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	781b      	ldrb	r3, [r3, #0]
 800612e:	00db      	lsls	r3, r3, #3
 8006130:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006134:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006138:	6819      	ldr	r1, [r3, #0]
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	88db      	ldrh	r3, [r3, #6]
 800613e:	089b      	lsrs	r3, r3, #2
 8006140:	b29b      	uxth	r3, r3
 8006142:	009a      	lsls	r2, r3, #2
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	00db      	lsls	r3, r3, #3
 800614a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800614e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006152:	430a      	orrs	r2, r1
 8006154:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	4413      	add	r3, r2
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	61bb      	str	r3, [r7, #24]
 8006164:	69bb      	ldr	r3, [r7, #24]
 8006166:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800616a:	2b00      	cmp	r3, #0
 800616c:	d013      	beq.n	8006196 <USB_ActivateEndpoint+0x14e>
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	4413      	add	r3, r2
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	4b5c      	ldr	r3, [pc, #368]	@ (80062ec <USB_ActivateEndpoint+0x2a4>)
 800617c:	4013      	ands	r3, r2
 800617e:	617b      	str	r3, [r7, #20]
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	441a      	add	r2, r3
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006190:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006194:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	78db      	ldrb	r3, [r3, #3]
 800619a:	2b01      	cmp	r3, #1
 800619c:	d018      	beq.n	80061d0 <USB_ActivateEndpoint+0x188>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	4413      	add	r3, r2
 80061a8:	681a      	ldr	r2, [r3, #0]
 80061aa:	4b51      	ldr	r3, [pc, #324]	@ (80062f0 <USB_ActivateEndpoint+0x2a8>)
 80061ac:	4013      	ands	r3, r2
 80061ae:	60fb      	str	r3, [r7, #12]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f083 0320 	eor.w	r3, r3, #32
 80061b6:	60fb      	str	r3, [r7, #12]
 80061b8:	687a      	ldr	r2, [r7, #4]
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	441a      	add	r2, r3
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061cc:	6013      	str	r3, [r2, #0]
 80061ce:	e28c      	b.n	80066ea <USB_ActivateEndpoint+0x6a2>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	781b      	ldrb	r3, [r3, #0]
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	4413      	add	r3, r2
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	4b44      	ldr	r3, [pc, #272]	@ (80062f0 <USB_ActivateEndpoint+0x2a8>)
 80061de:	4013      	ands	r3, r2
 80061e0:	613b      	str	r3, [r7, #16]
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	009b      	lsls	r3, r3, #2
 80061ea:	441a      	add	r2, r3
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061f6:	6013      	str	r3, [r2, #0]
 80061f8:	e277      	b.n	80066ea <USB_ActivateEndpoint+0x6a2>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	00db      	lsls	r3, r3, #3
 8006200:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006204:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006208:	685a      	ldr	r2, [r3, #4]
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	00db      	lsls	r3, r3, #3
 8006210:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006214:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006218:	0c12      	lsrs	r2, r2, #16
 800621a:	0412      	lsls	r2, r2, #16
 800621c:	605a      	str	r2, [r3, #4]
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	00db      	lsls	r3, r3, #3
 8006224:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006228:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800622c:	6859      	ldr	r1, [r3, #4]
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	88db      	ldrh	r3, [r3, #6]
 8006232:	089b      	lsrs	r3, r3, #2
 8006234:	b29b      	uxth	r3, r3
 8006236:	009a      	lsls	r2, r3, #2
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	00db      	lsls	r3, r3, #3
 800623e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006242:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006246:	430a      	orrs	r2, r1
 8006248:	605a      	str	r2, [r3, #4]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	00db      	lsls	r3, r3, #3
 8006250:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006254:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006258:	685a      	ldr	r2, [r3, #4]
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	00db      	lsls	r3, r3, #3
 8006260:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006264:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006268:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800626c:	605a      	str	r2, [r3, #4]
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	691b      	ldr	r3, [r3, #16]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d112      	bne.n	800629c <USB_ActivateEndpoint+0x254>
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	00db      	lsls	r3, r3, #3
 800627c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006280:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006284:	685a      	ldr	r2, [r3, #4]
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	781b      	ldrb	r3, [r3, #0]
 800628a:	00db      	lsls	r3, r3, #3
 800628c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006290:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006294:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006298:	605a      	str	r2, [r3, #4]
 800629a:	e04d      	b.n	8006338 <USB_ActivateEndpoint+0x2f0>
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	691b      	ldr	r3, [r3, #16]
 80062a0:	2b3e      	cmp	r3, #62	@ 0x3e
 80062a2:	d827      	bhi.n	80062f4 <USB_ActivateEndpoint+0x2ac>
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	691b      	ldr	r3, [r3, #16]
 80062a8:	085b      	lsrs	r3, r3, #1
 80062aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	691b      	ldr	r3, [r3, #16]
 80062b0:	f003 0301 	and.w	r3, r3, #1
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d002      	beq.n	80062be <USB_ActivateEndpoint+0x276>
 80062b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80062ba:	3301      	adds	r3, #1
 80062bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	00db      	lsls	r3, r3, #3
 80062c4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80062c8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80062cc:	6859      	ldr	r1, [r3, #4]
 80062ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80062d0:	069a      	lsls	r2, r3, #26
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	00db      	lsls	r3, r3, #3
 80062d8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80062dc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80062e0:	430a      	orrs	r2, r1
 80062e2:	605a      	str	r2, [r3, #4]
 80062e4:	e028      	b.n	8006338 <USB_ActivateEndpoint+0x2f0>
 80062e6:	bf00      	nop
 80062e8:	07ff898f 	.word	0x07ff898f
 80062ec:	07ff8f8f 	.word	0x07ff8f8f
 80062f0:	07ff8fbf 	.word	0x07ff8fbf
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	691b      	ldr	r3, [r3, #16]
 80062f8:	095b      	lsrs	r3, r3, #5
 80062fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	691b      	ldr	r3, [r3, #16]
 8006300:	f003 031f 	and.w	r3, r3, #31
 8006304:	2b00      	cmp	r3, #0
 8006306:	d102      	bne.n	800630e <USB_ActivateEndpoint+0x2c6>
 8006308:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800630a:	3b01      	subs	r3, #1
 800630c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	00db      	lsls	r3, r3, #3
 8006314:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006318:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800631c:	685a      	ldr	r2, [r3, #4]
 800631e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006320:	069b      	lsls	r3, r3, #26
 8006322:	431a      	orrs	r2, r3
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	00db      	lsls	r3, r3, #3
 800632a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800632e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006332:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006336:	605a      	str	r2, [r3, #4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	4413      	add	r3, r2
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006348:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800634c:	2b00      	cmp	r3, #0
 800634e:	d013      	beq.n	8006378 <USB_ActivateEndpoint+0x330>
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	4413      	add	r3, r2
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	4b9c      	ldr	r3, [pc, #624]	@ (80065d0 <USB_ActivateEndpoint+0x588>)
 800635e:	4013      	ands	r3, r2
 8006360:	627b      	str	r3, [r7, #36]	@ 0x24
 8006362:	687a      	ldr	r2, [r7, #4]
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	781b      	ldrb	r3, [r3, #0]
 8006368:	009b      	lsls	r3, r3, #2
 800636a:	441a      	add	r2, r3
 800636c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800636e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006372:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006376:	6013      	str	r3, [r2, #0]

      if (ep->num == 0U)
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	781b      	ldrb	r3, [r3, #0]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d11c      	bne.n	80063ba <USB_ActivateEndpoint+0x372>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	009b      	lsls	r3, r3, #2
 8006388:	4413      	add	r3, r2
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	4b91      	ldr	r3, [pc, #580]	@ (80065d4 <USB_ActivateEndpoint+0x58c>)
 800638e:	4013      	ands	r3, r2
 8006390:	61fb      	str	r3, [r7, #28]
 8006392:	69fb      	ldr	r3, [r7, #28]
 8006394:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006398:	61fb      	str	r3, [r7, #28]
 800639a:	69fb      	ldr	r3, [r7, #28]
 800639c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80063a0:	61fb      	str	r3, [r7, #28]
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	441a      	add	r2, r3
 80063ac:	69fb      	ldr	r3, [r7, #28]
 80063ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063b6:	6013      	str	r3, [r2, #0]
 80063b8:	e197      	b.n	80066ea <USB_ActivateEndpoint+0x6a2>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	4413      	add	r3, r2
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	4b83      	ldr	r3, [pc, #524]	@ (80065d4 <USB_ActivateEndpoint+0x58c>)
 80063c8:	4013      	ands	r3, r2
 80063ca:	623b      	str	r3, [r7, #32]
 80063cc:	6a3b      	ldr	r3, [r7, #32]
 80063ce:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80063d2:	623b      	str	r3, [r7, #32]
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	441a      	add	r2, r3
 80063de:	6a3b      	ldr	r3, [r7, #32]
 80063e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063e8:	6013      	str	r3, [r2, #0]
 80063ea:	e17e      	b.n	80066ea <USB_ActivateEndpoint+0x6a2>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	78db      	ldrb	r3, [r3, #3]
 80063f0:	2b02      	cmp	r3, #2
 80063f2:	d114      	bne.n	800641e <USB_ActivateEndpoint+0x3d6>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	781b      	ldrb	r3, [r3, #0]
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	4413      	add	r3, r2
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	4b73      	ldr	r3, [pc, #460]	@ (80065d0 <USB_ActivateEndpoint+0x588>)
 8006402:	4013      	ands	r3, r2
 8006404:	663b      	str	r3, [r7, #96]	@ 0x60
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	441a      	add	r2, r3
 8006410:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006412:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006416:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800641a:	6013      	str	r3, [r2, #0]
 800641c:	e013      	b.n	8006446 <USB_ActivateEndpoint+0x3fe>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800641e:	687a      	ldr	r2, [r7, #4]
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	009b      	lsls	r3, r3, #2
 8006426:	4413      	add	r3, r2
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	4b6b      	ldr	r3, [pc, #428]	@ (80065d8 <USB_ActivateEndpoint+0x590>)
 800642c:	4013      	ands	r3, r2
 800642e:	667b      	str	r3, [r7, #100]	@ 0x64
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	009b      	lsls	r3, r3, #2
 8006438:	441a      	add	r2, r3
 800643a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800643c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006440:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006444:	6013      	str	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	00db      	lsls	r3, r3, #3
 800644c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006450:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	781b      	ldrb	r3, [r3, #0]
 800645a:	00db      	lsls	r3, r3, #3
 800645c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006460:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006464:	0c12      	lsrs	r2, r2, #16
 8006466:	0412      	lsls	r2, r2, #16
 8006468:	601a      	str	r2, [r3, #0]
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	00db      	lsls	r3, r3, #3
 8006470:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006474:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006478:	6819      	ldr	r1, [r3, #0]
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	891b      	ldrh	r3, [r3, #8]
 800647e:	089b      	lsrs	r3, r3, #2
 8006480:	b29b      	uxth	r3, r3
 8006482:	009a      	lsls	r2, r3, #2
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	00db      	lsls	r3, r3, #3
 800648a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800648e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006492:	430a      	orrs	r2, r1
 8006494:	601a      	str	r2, [r3, #0]
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	00db      	lsls	r3, r3, #3
 800649c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80064a0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80064a4:	685a      	ldr	r2, [r3, #4]
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	00db      	lsls	r3, r3, #3
 80064ac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80064b0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80064b4:	0c12      	lsrs	r2, r2, #16
 80064b6:	0412      	lsls	r2, r2, #16
 80064b8:	605a      	str	r2, [r3, #4]
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	00db      	lsls	r3, r3, #3
 80064c0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80064c4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80064c8:	6859      	ldr	r1, [r3, #4]
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	895b      	ldrh	r3, [r3, #10]
 80064ce:	089b      	lsrs	r3, r3, #2
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	009a      	lsls	r2, r3, #2
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	00db      	lsls	r3, r3, #3
 80064da:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80064de:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80064e2:	430a      	orrs	r2, r1
 80064e4:	605a      	str	r2, [r3, #4]

    if (ep->is_in == 0U)
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	785b      	ldrb	r3, [r3, #1]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d178      	bne.n	80065e0 <USB_ActivateEndpoint+0x598>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	4413      	add	r3, r2
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	643b      	str	r3, [r7, #64]	@ 0x40
 80064fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80064fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006502:	2b00      	cmp	r3, #0
 8006504:	d013      	beq.n	800652e <USB_ActivateEndpoint+0x4e6>
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	4413      	add	r3, r2
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	4b2f      	ldr	r3, [pc, #188]	@ (80065d0 <USB_ActivateEndpoint+0x588>)
 8006514:	4013      	ands	r3, r2
 8006516:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	441a      	add	r2, r3
 8006522:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006524:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006528:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800652c:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	009b      	lsls	r3, r3, #2
 8006536:	4413      	add	r3, r2
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800653c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800653e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006542:	2b00      	cmp	r3, #0
 8006544:	d013      	beq.n	800656e <USB_ActivateEndpoint+0x526>
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	4413      	add	r3, r2
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	4b1f      	ldr	r3, [pc, #124]	@ (80065d0 <USB_ActivateEndpoint+0x588>)
 8006554:	4013      	ands	r3, r2
 8006556:	637b      	str	r3, [r7, #52]	@ 0x34
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	781b      	ldrb	r3, [r3, #0]
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	441a      	add	r2, r3
 8006562:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006564:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006568:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800656c:	6013      	str	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800656e:	687a      	ldr	r2, [r7, #4]
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	781b      	ldrb	r3, [r3, #0]
 8006574:	009b      	lsls	r3, r3, #2
 8006576:	4413      	add	r3, r2
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	4b16      	ldr	r3, [pc, #88]	@ (80065d4 <USB_ActivateEndpoint+0x58c>)
 800657c:	4013      	ands	r3, r2
 800657e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006582:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006586:	633b      	str	r3, [r7, #48]	@ 0x30
 8006588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800658a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800658e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006590:	687a      	ldr	r2, [r7, #4]
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	781b      	ldrb	r3, [r3, #0]
 8006596:	009b      	lsls	r3, r3, #2
 8006598:	441a      	add	r2, r3
 800659a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800659c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065a4:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	4413      	add	r3, r2
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	4b0a      	ldr	r3, [pc, #40]	@ (80065dc <USB_ActivateEndpoint+0x594>)
 80065b4:	4013      	ands	r3, r2
 80065b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	441a      	add	r2, r3
 80065c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065cc:	6013      	str	r3, [r2, #0]
 80065ce:	e08c      	b.n	80066ea <USB_ActivateEndpoint+0x6a2>
 80065d0:	07ff8f8f 	.word	0x07ff8f8f
 80065d4:	07ffbf8f 	.word	0x07ffbf8f
 80065d8:	07ff8e8f 	.word	0x07ff8e8f
 80065dc:	07ff8fbf 	.word	0x07ff8fbf
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	4413      	add	r3, r2
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80065ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80065f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d013      	beq.n	8006620 <USB_ActivateEndpoint+0x5d8>
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	009b      	lsls	r3, r3, #2
 8006600:	4413      	add	r3, r2
 8006602:	681a      	ldr	r2, [r3, #0]
 8006604:	4b3d      	ldr	r3, [pc, #244]	@ (80066fc <USB_ActivateEndpoint+0x6b4>)
 8006606:	4013      	ands	r3, r2
 8006608:	65bb      	str	r3, [r7, #88]	@ 0x58
 800660a:	687a      	ldr	r2, [r7, #4]
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	441a      	add	r2, r3
 8006614:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006616:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800661a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800661e:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006620:	687a      	ldr	r2, [r7, #4]
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	4413      	add	r3, r2
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	657b      	str	r3, [r7, #84]	@ 0x54
 800662e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006630:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006634:	2b00      	cmp	r3, #0
 8006636:	d013      	beq.n	8006660 <USB_ActivateEndpoint+0x618>
 8006638:	687a      	ldr	r2, [r7, #4]
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	781b      	ldrb	r3, [r3, #0]
 800663e:	009b      	lsls	r3, r3, #2
 8006640:	4413      	add	r3, r2
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	4b2d      	ldr	r3, [pc, #180]	@ (80066fc <USB_ActivateEndpoint+0x6b4>)
 8006646:	4013      	ands	r3, r2
 8006648:	653b      	str	r3, [r7, #80]	@ 0x50
 800664a:	687a      	ldr	r2, [r7, #4]
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	009b      	lsls	r3, r3, #2
 8006652:	441a      	add	r2, r3
 8006654:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006656:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800665a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800665e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	78db      	ldrb	r3, [r3, #3]
 8006664:	2b01      	cmp	r3, #1
 8006666:	d018      	beq.n	800669a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006668:	687a      	ldr	r2, [r7, #4]
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	009b      	lsls	r3, r3, #2
 8006670:	4413      	add	r3, r2
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	4b22      	ldr	r3, [pc, #136]	@ (8006700 <USB_ActivateEndpoint+0x6b8>)
 8006676:	4013      	ands	r3, r2
 8006678:	64bb      	str	r3, [r7, #72]	@ 0x48
 800667a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800667c:	f083 0320 	eor.w	r3, r3, #32
 8006680:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	009b      	lsls	r3, r3, #2
 800668a:	441a      	add	r2, r3
 800668c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800668e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006692:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006696:	6013      	str	r3, [r2, #0]
 8006698:	e013      	b.n	80066c2 <USB_ActivateEndpoint+0x67a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	009b      	lsls	r3, r3, #2
 80066a2:	4413      	add	r3, r2
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	4b16      	ldr	r3, [pc, #88]	@ (8006700 <USB_ActivateEndpoint+0x6b8>)
 80066a8:	4013      	ands	r3, r2
 80066aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066ac:	687a      	ldr	r2, [r7, #4]
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	441a      	add	r2, r3
 80066b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066c0:	6013      	str	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	4413      	add	r3, r2
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	4b0d      	ldr	r3, [pc, #52]	@ (8006704 <USB_ActivateEndpoint+0x6bc>)
 80066d0:	4013      	ands	r3, r2
 80066d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	009b      	lsls	r3, r3, #2
 80066dc:	441a      	add	r2, r3
 80066de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066e8:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80066ea:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	377c      	adds	r7, #124	@ 0x7c
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr
 80066fa:	bf00      	nop
 80066fc:	07ff8f8f 	.word	0x07ff8f8f
 8006700:	07ff8fbf 	.word	0x07ff8fbf
 8006704:	07ffbf8f 	.word	0x07ffbf8f

08006708 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8006708:	b480      	push	{r7}
 800670a:	b097      	sub	sp, #92	@ 0x5c
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	7b1b      	ldrb	r3, [r3, #12]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d16d      	bne.n	80067f6 <USB_DeactivateEndpoint+0xee>
  {
    if (ep->is_in != 0U)
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	785b      	ldrb	r3, [r3, #1]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d034      	beq.n	800678c <USB_DeactivateEndpoint+0x84>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	009b      	lsls	r3, r3, #2
 800672a:	4413      	add	r3, r2
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	613b      	str	r3, [r7, #16]
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006736:	2b00      	cmp	r3, #0
 8006738:	d013      	beq.n	8006762 <USB_DeactivateEndpoint+0x5a>
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	781b      	ldrb	r3, [r3, #0]
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	4413      	add	r3, r2
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	4b6d      	ldr	r3, [pc, #436]	@ (80068fc <USB_DeactivateEndpoint+0x1f4>)
 8006748:	4013      	ands	r3, r2
 800674a:	60fb      	str	r3, [r7, #12]
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	781b      	ldrb	r3, [r3, #0]
 8006752:	009b      	lsls	r3, r3, #2
 8006754:	441a      	add	r2, r3
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800675c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006760:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	781b      	ldrb	r3, [r3, #0]
 8006768:	009b      	lsls	r3, r3, #2
 800676a:	4413      	add	r3, r2
 800676c:	681a      	ldr	r2, [r3, #0]
 800676e:	4b64      	ldr	r3, [pc, #400]	@ (8006900 <USB_DeactivateEndpoint+0x1f8>)
 8006770:	4013      	ands	r3, r2
 8006772:	60bb      	str	r3, [r7, #8]
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	009b      	lsls	r3, r3, #2
 800677c:	441a      	add	r2, r3
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006784:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006788:	6013      	str	r3, [r2, #0]
 800678a:	e139      	b.n	8006a00 <USB_DeactivateEndpoint+0x2f8>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	4413      	add	r3, r2
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	61fb      	str	r3, [r7, #28]
 800679a:	69fb      	ldr	r3, [r7, #28]
 800679c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d013      	beq.n	80067cc <USB_DeactivateEndpoint+0xc4>
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	009b      	lsls	r3, r3, #2
 80067ac:	4413      	add	r3, r2
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	4b52      	ldr	r3, [pc, #328]	@ (80068fc <USB_DeactivateEndpoint+0x1f4>)
 80067b2:	4013      	ands	r3, r2
 80067b4:	61bb      	str	r3, [r7, #24]
 80067b6:	687a      	ldr	r2, [r7, #4]
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	441a      	add	r2, r3
 80067c0:	69bb      	ldr	r3, [r7, #24]
 80067c2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80067c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067ca:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80067cc:	687a      	ldr	r2, [r7, #4]
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	009b      	lsls	r3, r3, #2
 80067d4:	4413      	add	r3, r2
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	4b4a      	ldr	r3, [pc, #296]	@ (8006904 <USB_DeactivateEndpoint+0x1fc>)
 80067da:	4013      	ands	r3, r2
 80067dc:	617b      	str	r3, [r7, #20]
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	441a      	add	r2, r3
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067f2:	6013      	str	r3, [r2, #0]
 80067f4:	e104      	b.n	8006a00 <USB_DeactivateEndpoint+0x2f8>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	785b      	ldrb	r3, [r3, #1]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	f040 8084 	bne.w	8006908 <USB_DeactivateEndpoint+0x200>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	781b      	ldrb	r3, [r3, #0]
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	4413      	add	r3, r2
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800680e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006810:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006814:	2b00      	cmp	r3, #0
 8006816:	d013      	beq.n	8006840 <USB_DeactivateEndpoint+0x138>
 8006818:	687a      	ldr	r2, [r7, #4]
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	4413      	add	r3, r2
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	4b35      	ldr	r3, [pc, #212]	@ (80068fc <USB_DeactivateEndpoint+0x1f4>)
 8006826:	4013      	ands	r3, r2
 8006828:	637b      	str	r3, [r7, #52]	@ 0x34
 800682a:	687a      	ldr	r2, [r7, #4]
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	441a      	add	r2, r3
 8006834:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006836:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800683a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800683e:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	009b      	lsls	r3, r3, #2
 8006848:	4413      	add	r3, r2
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	633b      	str	r3, [r7, #48]	@ 0x30
 800684e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006850:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006854:	2b00      	cmp	r3, #0
 8006856:	d013      	beq.n	8006880 <USB_DeactivateEndpoint+0x178>
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	781b      	ldrb	r3, [r3, #0]
 800685e:	009b      	lsls	r3, r3, #2
 8006860:	4413      	add	r3, r2
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	4b25      	ldr	r3, [pc, #148]	@ (80068fc <USB_DeactivateEndpoint+0x1f4>)
 8006866:	4013      	ands	r3, r2
 8006868:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	009b      	lsls	r3, r3, #2
 8006872:	441a      	add	r2, r3
 8006874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006876:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800687a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800687e:	6013      	str	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	4413      	add	r3, r2
 800688a:	681a      	ldr	r2, [r3, #0]
 800688c:	4b1b      	ldr	r3, [pc, #108]	@ (80068fc <USB_DeactivateEndpoint+0x1f4>)
 800688e:	4013      	ands	r3, r2
 8006890:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	441a      	add	r2, r3
 800689c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800689e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068a2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80068a6:	6013      	str	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	009b      	lsls	r3, r3, #2
 80068b0:	4413      	add	r3, r2
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	4b13      	ldr	r3, [pc, #76]	@ (8006904 <USB_DeactivateEndpoint+0x1fc>)
 80068b6:	4013      	ands	r3, r2
 80068b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	441a      	add	r2, r3
 80068c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068ce:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	4413      	add	r3, r2
 80068da:	681a      	ldr	r2, [r3, #0]
 80068dc:	4b08      	ldr	r3, [pc, #32]	@ (8006900 <USB_DeactivateEndpoint+0x1f8>)
 80068de:	4013      	ands	r3, r2
 80068e0:	623b      	str	r3, [r7, #32]
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	009b      	lsls	r3, r3, #2
 80068ea:	441a      	add	r2, r3
 80068ec:	6a3b      	ldr	r3, [r7, #32]
 80068ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068f6:	6013      	str	r3, [r2, #0]
 80068f8:	e082      	b.n	8006a00 <USB_DeactivateEndpoint+0x2f8>
 80068fa:	bf00      	nop
 80068fc:	07ff8f8f 	.word	0x07ff8f8f
 8006900:	07ff8fbf 	.word	0x07ff8fbf
 8006904:	07ffbf8f 	.word	0x07ffbf8f
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	4413      	add	r3, r2
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	657b      	str	r3, [r7, #84]	@ 0x54
 8006916:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006918:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800691c:	2b00      	cmp	r3, #0
 800691e:	d013      	beq.n	8006948 <USB_DeactivateEndpoint+0x240>
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	781b      	ldrb	r3, [r3, #0]
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	4413      	add	r3, r2
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	4b38      	ldr	r3, [pc, #224]	@ (8006a10 <USB_DeactivateEndpoint+0x308>)
 800692e:	4013      	ands	r3, r2
 8006930:	653b      	str	r3, [r7, #80]	@ 0x50
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	441a      	add	r2, r3
 800693c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800693e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006942:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006946:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	4413      	add	r3, r2
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006956:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006958:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800695c:	2b00      	cmp	r3, #0
 800695e:	d013      	beq.n	8006988 <USB_DeactivateEndpoint+0x280>
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	4413      	add	r3, r2
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	4b28      	ldr	r3, [pc, #160]	@ (8006a10 <USB_DeactivateEndpoint+0x308>)
 800696e:	4013      	ands	r3, r2
 8006970:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	781b      	ldrb	r3, [r3, #0]
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	441a      	add	r2, r3
 800697c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800697e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006982:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006986:	6013      	str	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	009b      	lsls	r3, r3, #2
 8006990:	4413      	add	r3, r2
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	4b1e      	ldr	r3, [pc, #120]	@ (8006a10 <USB_DeactivateEndpoint+0x308>)
 8006996:	4013      	ands	r3, r2
 8006998:	647b      	str	r3, [r7, #68]	@ 0x44
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	009b      	lsls	r3, r3, #2
 80069a2:	441a      	add	r2, r3
 80069a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069a6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80069aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069ae:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	781b      	ldrb	r3, [r3, #0]
 80069b6:	009b      	lsls	r3, r3, #2
 80069b8:	4413      	add	r3, r2
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	4b15      	ldr	r3, [pc, #84]	@ (8006a14 <USB_DeactivateEndpoint+0x30c>)
 80069be:	4013      	ands	r3, r2
 80069c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	009b      	lsls	r3, r3, #2
 80069ca:	441a      	add	r2, r3
 80069cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80069ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069d6:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	4413      	add	r3, r2
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	4b0c      	ldr	r3, [pc, #48]	@ (8006a18 <USB_DeactivateEndpoint+0x310>)
 80069e6:	4013      	ands	r3, r2
 80069e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	441a      	add	r2, r3
 80069f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069fe:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006a00:	2300      	movs	r3, #0
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	375c      	adds	r7, #92	@ 0x5c
 8006a06:	46bd      	mov	sp, r7
 8006a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0c:	4770      	bx	lr
 8006a0e:	bf00      	nop
 8006a10:	07ff8f8f 	.word	0x07ff8f8f
 8006a14:	07ff8fbf 	.word	0x07ff8fbf
 8006a18:	07ffbf8f 	.word	0x07ffbf8f

08006a1c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b096      	sub	sp, #88	@ 0x58
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	785b      	ldrb	r3, [r3, #1]
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	f040 84ed 	bne.w	800740a <USB_EPStartXfer+0x9ee>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	699a      	ldr	r2, [r3, #24]
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	691b      	ldr	r3, [r3, #16]
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d903      	bls.n	8006a44 <USB_EPStartXfer+0x28>
    {
      len = ep->maxpacket;
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	691b      	ldr	r3, [r3, #16]
 8006a40:	657b      	str	r3, [r7, #84]	@ 0x54
 8006a42:	e002      	b.n	8006a4a <USB_EPStartXfer+0x2e>
    }
    else
    {
      len = ep->xfer_len;
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	699b      	ldr	r3, [r3, #24]
 8006a48:	657b      	str	r3, [r7, #84]	@ 0x54
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	7b1b      	ldrb	r3, [r3, #12]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d12e      	bne.n	8006ab0 <USB_EPStartXfer+0x94>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	6959      	ldr	r1, [r3, #20]
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	88da      	ldrh	r2, [r3, #6]
 8006a5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f001 f952 	bl	8007d08 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	781b      	ldrb	r3, [r3, #0]
 8006a68:	00db      	lsls	r3, r3, #3
 8006a6a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006a6e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006a72:	681a      	ldr	r2, [r3, #0]
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	00db      	lsls	r3, r3, #3
 8006a7a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006a7e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006a82:	b292      	uxth	r2, r2
 8006a84:	601a      	str	r2, [r3, #0]
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	00db      	lsls	r3, r3, #3
 8006a8c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006a90:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006a94:	6819      	ldr	r1, [r3, #0]
 8006a96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a98:	041a      	lsls	r2, r3, #16
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	00db      	lsls	r3, r3, #3
 8006aa0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006aa4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006aa8:	430a      	orrs	r2, r1
 8006aaa:	601a      	str	r2, [r3, #0]
 8006aac:	f000 bc90 	b.w	80073d0 <USB_EPStartXfer+0x9b4>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	78db      	ldrb	r3, [r3, #3]
 8006ab4:	2b02      	cmp	r3, #2
 8006ab6:	f040 8332 	bne.w	800711e <USB_EPStartXfer+0x702>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	6a1a      	ldr	r2, [r3, #32]
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	691b      	ldr	r3, [r3, #16]
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	f240 82e4 	bls.w	8007090 <USB_EPStartXfer+0x674>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006ac8:	687a      	ldr	r2, [r7, #4]
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	781b      	ldrb	r3, [r3, #0]
 8006ace:	009b      	lsls	r3, r3, #2
 8006ad0:	4413      	add	r3, r2
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	4ba4      	ldr	r3, [pc, #656]	@ (8006d68 <USB_EPStartXfer+0x34c>)
 8006ad6:	4013      	ands	r3, r2
 8006ad8:	613b      	str	r3, [r7, #16]
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	441a      	add	r2, r3
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006aea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006aee:	6013      	str	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	6a1a      	ldr	r2, [r3, #32]
 8006af4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006af6:	1ad2      	subs	r2, r2, r3
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006afc:	687a      	ldr	r2, [r7, #4]
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	4413      	add	r3, r2
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	f000 8161 	beq.w	8006dd4 <USB_EPStartXfer+0x3b8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	785b      	ldrb	r3, [r3, #1]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d16a      	bne.n	8006bf0 <USB_EPStartXfer+0x1d4>
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	00db      	lsls	r3, r3, #3
 8006b20:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006b24:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006b28:	685a      	ldr	r2, [r3, #4]
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	781b      	ldrb	r3, [r3, #0]
 8006b2e:	00db      	lsls	r3, r3, #3
 8006b30:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006b34:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006b38:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8006b3c:	605a      	str	r2, [r3, #4]
 8006b3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d112      	bne.n	8006b6a <USB_EPStartXfer+0x14e>
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	00db      	lsls	r3, r3, #3
 8006b4a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006b4e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006b52:	685a      	ldr	r2, [r3, #4]
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	00db      	lsls	r3, r3, #3
 8006b5a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006b5e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006b62:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006b66:	605a      	str	r2, [r3, #4]
 8006b68:	e06a      	b.n	8006c40 <USB_EPStartXfer+0x224>
 8006b6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b6c:	2b3e      	cmp	r3, #62	@ 0x3e
 8006b6e:	d81e      	bhi.n	8006bae <USB_EPStartXfer+0x192>
 8006b70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b72:	085b      	lsrs	r3, r3, #1
 8006b74:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b78:	f003 0301 	and.w	r3, r3, #1
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d002      	beq.n	8006b86 <USB_EPStartXfer+0x16a>
 8006b80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b82:	3301      	adds	r3, #1
 8006b84:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	00db      	lsls	r3, r3, #3
 8006b8c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006b90:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006b94:	6859      	ldr	r1, [r3, #4]
 8006b96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b98:	069a      	lsls	r2, r3, #26
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	00db      	lsls	r3, r3, #3
 8006ba0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006ba4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006ba8:	430a      	orrs	r2, r1
 8006baa:	605a      	str	r2, [r3, #4]
 8006bac:	e048      	b.n	8006c40 <USB_EPStartXfer+0x224>
 8006bae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006bb0:	095b      	lsrs	r3, r3, #5
 8006bb2:	653b      	str	r3, [r7, #80]	@ 0x50
 8006bb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006bb6:	f003 031f 	and.w	r3, r3, #31
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d102      	bne.n	8006bc4 <USB_EPStartXfer+0x1a8>
 8006bbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006bc0:	3b01      	subs	r3, #1
 8006bc2:	653b      	str	r3, [r7, #80]	@ 0x50
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	00db      	lsls	r3, r3, #3
 8006bca:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006bce:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006bd2:	685a      	ldr	r2, [r3, #4]
 8006bd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006bd6:	069b      	lsls	r3, r3, #26
 8006bd8:	431a      	orrs	r2, r3
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	00db      	lsls	r3, r3, #3
 8006be0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006be4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006be8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006bec:	605a      	str	r2, [r3, #4]
 8006bee:	e027      	b.n	8006c40 <USB_EPStartXfer+0x224>
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	785b      	ldrb	r3, [r3, #1]
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d123      	bne.n	8006c40 <USB_EPStartXfer+0x224>
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	781b      	ldrb	r3, [r3, #0]
 8006bfc:	00db      	lsls	r3, r3, #3
 8006bfe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006c02:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006c06:	685a      	ldr	r2, [r3, #4]
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	00db      	lsls	r3, r3, #3
 8006c0e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006c12:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006c16:	b292      	uxth	r2, r2
 8006c18:	605a      	str	r2, [r3, #4]
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	00db      	lsls	r3, r3, #3
 8006c20:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006c24:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006c28:	6859      	ldr	r1, [r3, #4]
 8006c2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c2c:	041a      	lsls	r2, r3, #16
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	781b      	ldrb	r3, [r3, #0]
 8006c32:	00db      	lsls	r3, r3, #3
 8006c34:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006c38:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006c3c:	430a      	orrs	r2, r1
 8006c3e:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	895b      	ldrh	r3, [r3, #10]
 8006c44:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	6959      	ldr	r1, [r3, #20]
 8006c4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	8b7a      	ldrh	r2, [r7, #26]
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f001 f859 	bl	8007d08 <USB_WritePMA>
            ep->xfer_buff += len;
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	695a      	ldr	r2, [r3, #20]
 8006c5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c5c:	441a      	add	r2, r3
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	6a1a      	ldr	r2, [r3, #32]
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	691b      	ldr	r3, [r3, #16]
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d906      	bls.n	8006c7c <USB_EPStartXfer+0x260>
            {
              ep->xfer_len_db -= len;
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	6a1a      	ldr	r2, [r3, #32]
 8006c72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c74:	1ad2      	subs	r2, r2, r3
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	621a      	str	r2, [r3, #32]
 8006c7a:	e005      	b.n	8006c88 <USB_EPStartXfer+0x26c>
            }
            else
            {
              len = ep->xfer_len_db;
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	6a1b      	ldr	r3, [r3, #32]
 8006c80:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	2200      	movs	r2, #0
 8006c86:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	785b      	ldrb	r3, [r3, #1]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d16d      	bne.n	8006d6c <USB_EPStartXfer+0x350>
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	00db      	lsls	r3, r3, #3
 8006c96:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006c9a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	00db      	lsls	r3, r3, #3
 8006ca6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006caa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006cae:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8006cb2:	601a      	str	r2, [r3, #0]
 8006cb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d112      	bne.n	8006ce0 <USB_EPStartXfer+0x2c4>
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	00db      	lsls	r3, r3, #3
 8006cc0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006cc4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	781b      	ldrb	r3, [r3, #0]
 8006cce:	00db      	lsls	r3, r3, #3
 8006cd0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006cd4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006cd8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006cdc:	601a      	str	r2, [r3, #0]
 8006cde:	e06d      	b.n	8006dbc <USB_EPStartXfer+0x3a0>
 8006ce0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ce2:	2b3e      	cmp	r3, #62	@ 0x3e
 8006ce4:	d81e      	bhi.n	8006d24 <USB_EPStartXfer+0x308>
 8006ce6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ce8:	085b      	lsrs	r3, r3, #1
 8006cea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006cec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006cee:	f003 0301 	and.w	r3, r3, #1
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d002      	beq.n	8006cfc <USB_EPStartXfer+0x2e0>
 8006cf6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006cf8:	3301      	adds	r3, #1
 8006cfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	00db      	lsls	r3, r3, #3
 8006d02:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006d06:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006d0a:	6819      	ldr	r1, [r3, #0]
 8006d0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d0e:	069a      	lsls	r2, r3, #26
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	781b      	ldrb	r3, [r3, #0]
 8006d14:	00db      	lsls	r3, r3, #3
 8006d16:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006d1a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006d1e:	430a      	orrs	r2, r1
 8006d20:	601a      	str	r2, [r3, #0]
 8006d22:	e04b      	b.n	8006dbc <USB_EPStartXfer+0x3a0>
 8006d24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d26:	095b      	lsrs	r3, r3, #5
 8006d28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d2c:	f003 031f 	and.w	r3, r3, #31
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d102      	bne.n	8006d3a <USB_EPStartXfer+0x31e>
 8006d34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d36:	3b01      	subs	r3, #1
 8006d38:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	781b      	ldrb	r3, [r3, #0]
 8006d3e:	00db      	lsls	r3, r3, #3
 8006d40:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006d44:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d4c:	069b      	lsls	r3, r3, #26
 8006d4e:	431a      	orrs	r2, r3
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	00db      	lsls	r3, r3, #3
 8006d56:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006d5a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006d5e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006d62:	601a      	str	r2, [r3, #0]
 8006d64:	e02a      	b.n	8006dbc <USB_EPStartXfer+0x3a0>
 8006d66:	bf00      	nop
 8006d68:	07ff8f8f 	.word	0x07ff8f8f
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	785b      	ldrb	r3, [r3, #1]
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d123      	bne.n	8006dbc <USB_EPStartXfer+0x3a0>
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	781b      	ldrb	r3, [r3, #0]
 8006d78:	00db      	lsls	r3, r3, #3
 8006d7a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006d7e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006d82:	681a      	ldr	r2, [r3, #0]
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	00db      	lsls	r3, r3, #3
 8006d8a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006d8e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006d92:	b292      	uxth	r2, r2
 8006d94:	601a      	str	r2, [r3, #0]
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	00db      	lsls	r3, r3, #3
 8006d9c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006da0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006da4:	6819      	ldr	r1, [r3, #0]
 8006da6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006da8:	041a      	lsls	r2, r3, #16
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	781b      	ldrb	r3, [r3, #0]
 8006dae:	00db      	lsls	r3, r3, #3
 8006db0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006db4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006db8:	430a      	orrs	r2, r1
 8006dba:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	891b      	ldrh	r3, [r3, #8]
 8006dc0:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	6959      	ldr	r1, [r3, #20]
 8006dc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	8b7a      	ldrh	r2, [r7, #26]
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 ff9b 	bl	8007d08 <USB_WritePMA>
 8006dd2:	e2fd      	b.n	80073d0 <USB_EPStartXfer+0x9b4>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	785b      	ldrb	r3, [r3, #1]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d16a      	bne.n	8006eb2 <USB_EPStartXfer+0x496>
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	00db      	lsls	r3, r3, #3
 8006de2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006de6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	00db      	lsls	r3, r3, #3
 8006df2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006df6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006dfa:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8006dfe:	601a      	str	r2, [r3, #0]
 8006e00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d112      	bne.n	8006e2c <USB_EPStartXfer+0x410>
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	781b      	ldrb	r3, [r3, #0]
 8006e0a:	00db      	lsls	r3, r3, #3
 8006e0c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006e10:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006e14:	681a      	ldr	r2, [r3, #0]
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	00db      	lsls	r3, r3, #3
 8006e1c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006e20:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006e24:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006e28:	601a      	str	r2, [r3, #0]
 8006e2a:	e06a      	b.n	8006f02 <USB_EPStartXfer+0x4e6>
 8006e2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e2e:	2b3e      	cmp	r3, #62	@ 0x3e
 8006e30:	d81e      	bhi.n	8006e70 <USB_EPStartXfer+0x454>
 8006e32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e34:	085b      	lsrs	r3, r3, #1
 8006e36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e3a:	f003 0301 	and.w	r3, r3, #1
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d002      	beq.n	8006e48 <USB_EPStartXfer+0x42c>
 8006e42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e44:	3301      	adds	r3, #1
 8006e46:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	781b      	ldrb	r3, [r3, #0]
 8006e4c:	00db      	lsls	r3, r3, #3
 8006e4e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006e52:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006e56:	6819      	ldr	r1, [r3, #0]
 8006e58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e5a:	069a      	lsls	r2, r3, #26
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	00db      	lsls	r3, r3, #3
 8006e62:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006e66:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006e6a:	430a      	orrs	r2, r1
 8006e6c:	601a      	str	r2, [r3, #0]
 8006e6e:	e048      	b.n	8006f02 <USB_EPStartXfer+0x4e6>
 8006e70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e72:	095b      	lsrs	r3, r3, #5
 8006e74:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e78:	f003 031f 	and.w	r3, r3, #31
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d102      	bne.n	8006e86 <USB_EPStartXfer+0x46a>
 8006e80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e82:	3b01      	subs	r3, #1
 8006e84:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	00db      	lsls	r3, r3, #3
 8006e8c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006e90:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e98:	069b      	lsls	r3, r3, #26
 8006e9a:	431a      	orrs	r2, r3
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	00db      	lsls	r3, r3, #3
 8006ea2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006ea6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006eaa:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006eae:	601a      	str	r2, [r3, #0]
 8006eb0:	e027      	b.n	8006f02 <USB_EPStartXfer+0x4e6>
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	785b      	ldrb	r3, [r3, #1]
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d123      	bne.n	8006f02 <USB_EPStartXfer+0x4e6>
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	00db      	lsls	r3, r3, #3
 8006ec0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006ec4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006ec8:	681a      	ldr	r2, [r3, #0]
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	00db      	lsls	r3, r3, #3
 8006ed0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006ed4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006ed8:	b292      	uxth	r2, r2
 8006eda:	601a      	str	r2, [r3, #0]
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	00db      	lsls	r3, r3, #3
 8006ee2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006ee6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006eea:	6819      	ldr	r1, [r3, #0]
 8006eec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006eee:	041a      	lsls	r2, r3, #16
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	781b      	ldrb	r3, [r3, #0]
 8006ef4:	00db      	lsls	r3, r3, #3
 8006ef6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006efa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006efe:	430a      	orrs	r2, r1
 8006f00:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	891b      	ldrh	r3, [r3, #8]
 8006f06:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	6959      	ldr	r1, [r3, #20]
 8006f0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	8b7a      	ldrh	r2, [r7, #26]
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 fef8 	bl	8007d08 <USB_WritePMA>
            ep->xfer_buff += len;
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	695a      	ldr	r2, [r3, #20]
 8006f1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f1e:	441a      	add	r2, r3
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	6a1a      	ldr	r2, [r3, #32]
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	691b      	ldr	r3, [r3, #16]
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d906      	bls.n	8006f3e <USB_EPStartXfer+0x522>
            {
              ep->xfer_len_db -= len;
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	6a1a      	ldr	r2, [r3, #32]
 8006f34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f36:	1ad2      	subs	r2, r2, r3
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	621a      	str	r2, [r3, #32]
 8006f3c:	e005      	b.n	8006f4a <USB_EPStartXfer+0x52e>
            }
            else
            {
              len = ep->xfer_len_db;
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	6a1b      	ldr	r3, [r3, #32]
 8006f42:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	2200      	movs	r2, #0
 8006f48:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	785b      	ldrb	r3, [r3, #1]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d16a      	bne.n	8007028 <USB_EPStartXfer+0x60c>
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	781b      	ldrb	r3, [r3, #0]
 8006f56:	00db      	lsls	r3, r3, #3
 8006f58:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006f5c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006f60:	685a      	ldr	r2, [r3, #4]
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	781b      	ldrb	r3, [r3, #0]
 8006f66:	00db      	lsls	r3, r3, #3
 8006f68:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006f6c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006f70:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8006f74:	605a      	str	r2, [r3, #4]
 8006f76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d112      	bne.n	8006fa2 <USB_EPStartXfer+0x586>
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	00db      	lsls	r3, r3, #3
 8006f82:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006f86:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006f8a:	685a      	ldr	r2, [r3, #4]
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	781b      	ldrb	r3, [r3, #0]
 8006f90:	00db      	lsls	r3, r3, #3
 8006f92:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006f96:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006f9a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006f9e:	605a      	str	r2, [r3, #4]
 8006fa0:	e06a      	b.n	8007078 <USB_EPStartXfer+0x65c>
 8006fa2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006fa4:	2b3e      	cmp	r3, #62	@ 0x3e
 8006fa6:	d81e      	bhi.n	8006fe6 <USB_EPStartXfer+0x5ca>
 8006fa8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006faa:	085b      	lsrs	r3, r3, #1
 8006fac:	647b      	str	r3, [r7, #68]	@ 0x44
 8006fae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006fb0:	f003 0301 	and.w	r3, r3, #1
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d002      	beq.n	8006fbe <USB_EPStartXfer+0x5a2>
 8006fb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006fba:	3301      	adds	r3, #1
 8006fbc:	647b      	str	r3, [r7, #68]	@ 0x44
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	781b      	ldrb	r3, [r3, #0]
 8006fc2:	00db      	lsls	r3, r3, #3
 8006fc4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006fc8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006fcc:	6859      	ldr	r1, [r3, #4]
 8006fce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006fd0:	069a      	lsls	r2, r3, #26
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	781b      	ldrb	r3, [r3, #0]
 8006fd6:	00db      	lsls	r3, r3, #3
 8006fd8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006fdc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006fe0:	430a      	orrs	r2, r1
 8006fe2:	605a      	str	r2, [r3, #4]
 8006fe4:	e048      	b.n	8007078 <USB_EPStartXfer+0x65c>
 8006fe6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006fe8:	095b      	lsrs	r3, r3, #5
 8006fea:	647b      	str	r3, [r7, #68]	@ 0x44
 8006fec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006fee:	f003 031f 	and.w	r3, r3, #31
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d102      	bne.n	8006ffc <USB_EPStartXfer+0x5e0>
 8006ff6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ff8:	3b01      	subs	r3, #1
 8006ffa:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	781b      	ldrb	r3, [r3, #0]
 8007000:	00db      	lsls	r3, r3, #3
 8007002:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007006:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800700a:	685a      	ldr	r2, [r3, #4]
 800700c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800700e:	069b      	lsls	r3, r3, #26
 8007010:	431a      	orrs	r2, r3
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	00db      	lsls	r3, r3, #3
 8007018:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800701c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007020:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8007024:	605a      	str	r2, [r3, #4]
 8007026:	e027      	b.n	8007078 <USB_EPStartXfer+0x65c>
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	785b      	ldrb	r3, [r3, #1]
 800702c:	2b01      	cmp	r3, #1
 800702e:	d123      	bne.n	8007078 <USB_EPStartXfer+0x65c>
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	781b      	ldrb	r3, [r3, #0]
 8007034:	00db      	lsls	r3, r3, #3
 8007036:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800703a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800703e:	685a      	ldr	r2, [r3, #4]
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	00db      	lsls	r3, r3, #3
 8007046:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800704a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800704e:	b292      	uxth	r2, r2
 8007050:	605a      	str	r2, [r3, #4]
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	781b      	ldrb	r3, [r3, #0]
 8007056:	00db      	lsls	r3, r3, #3
 8007058:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800705c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007060:	6859      	ldr	r1, [r3, #4]
 8007062:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007064:	041a      	lsls	r2, r3, #16
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	781b      	ldrb	r3, [r3, #0]
 800706a:	00db      	lsls	r3, r3, #3
 800706c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007070:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007074:	430a      	orrs	r2, r1
 8007076:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	895b      	ldrh	r3, [r3, #10]
 800707c:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	6959      	ldr	r1, [r3, #20]
 8007082:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007084:	b29b      	uxth	r3, r3
 8007086:	8b7a      	ldrh	r2, [r7, #26]
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f000 fe3d 	bl	8007d08 <USB_WritePMA>
 800708e:	e19f      	b.n	80073d0 <USB_EPStartXfer+0x9b4>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	6a1b      	ldr	r3, [r3, #32]
 8007094:	657b      	str	r3, [r7, #84]	@ 0x54

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007096:	687a      	ldr	r2, [r7, #4]
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	781b      	ldrb	r3, [r3, #0]
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	4413      	add	r3, r2
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	4ba0      	ldr	r3, [pc, #640]	@ (8007324 <USB_EPStartXfer+0x908>)
 80070a4:	4013      	ands	r3, r2
 80070a6:	617b      	str	r3, [r7, #20]
 80070a8:	687a      	ldr	r2, [r7, #4]
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	009b      	lsls	r3, r3, #2
 80070b0:	441a      	add	r2, r3
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80070b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070bc:	6013      	str	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	781b      	ldrb	r3, [r3, #0]
 80070c2:	00db      	lsls	r3, r3, #3
 80070c4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80070c8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80070cc:	681a      	ldr	r2, [r3, #0]
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	781b      	ldrb	r3, [r3, #0]
 80070d2:	00db      	lsls	r3, r3, #3
 80070d4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80070d8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80070dc:	b292      	uxth	r2, r2
 80070de:	601a      	str	r2, [r3, #0]
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	781b      	ldrb	r3, [r3, #0]
 80070e4:	00db      	lsls	r3, r3, #3
 80070e6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80070ea:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80070ee:	6819      	ldr	r1, [r3, #0]
 80070f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070f2:	041a      	lsls	r2, r3, #16
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	781b      	ldrb	r3, [r3, #0]
 80070f8:	00db      	lsls	r3, r3, #3
 80070fa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80070fe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007102:	430a      	orrs	r2, r1
 8007104:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	891b      	ldrh	r3, [r3, #8]
 800710a:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	6959      	ldr	r1, [r3, #20]
 8007110:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007112:	b29b      	uxth	r3, r3
 8007114:	8b7a      	ldrh	r2, [r7, #26]
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f000 fdf6 	bl	8007d08 <USB_WritePMA>
 800711c:	e158      	b.n	80073d0 <USB_EPStartXfer+0x9b4>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	6a1a      	ldr	r2, [r3, #32]
 8007122:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007124:	1ad2      	subs	r2, r2, r3
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800712a:	687a      	ldr	r2, [r7, #4]
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	009b      	lsls	r3, r3, #2
 8007132:	4413      	add	r3, r2
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800713a:	2b00      	cmp	r3, #0
 800713c:	f000 80a3 	beq.w	8007286 <USB_EPStartXfer+0x86a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	785b      	ldrb	r3, [r3, #1]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d16a      	bne.n	800721e <USB_EPStartXfer+0x802>
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	781b      	ldrb	r3, [r3, #0]
 800714c:	00db      	lsls	r3, r3, #3
 800714e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007152:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007156:	685a      	ldr	r2, [r3, #4]
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	781b      	ldrb	r3, [r3, #0]
 800715c:	00db      	lsls	r3, r3, #3
 800715e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007162:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007166:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800716a:	605a      	str	r2, [r3, #4]
 800716c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800716e:	2b00      	cmp	r3, #0
 8007170:	d112      	bne.n	8007198 <USB_EPStartXfer+0x77c>
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	00db      	lsls	r3, r3, #3
 8007178:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800717c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007180:	685a      	ldr	r2, [r3, #4]
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	781b      	ldrb	r3, [r3, #0]
 8007186:	00db      	lsls	r3, r3, #3
 8007188:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800718c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007190:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8007194:	605a      	str	r2, [r3, #4]
 8007196:	e06a      	b.n	800726e <USB_EPStartXfer+0x852>
 8007198:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800719a:	2b3e      	cmp	r3, #62	@ 0x3e
 800719c:	d81e      	bhi.n	80071dc <USB_EPStartXfer+0x7c0>
 800719e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80071a0:	085b      	lsrs	r3, r3, #1
 80071a2:	643b      	str	r3, [r7, #64]	@ 0x40
 80071a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80071a6:	f003 0301 	and.w	r3, r3, #1
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d002      	beq.n	80071b4 <USB_EPStartXfer+0x798>
 80071ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071b0:	3301      	adds	r3, #1
 80071b2:	643b      	str	r3, [r7, #64]	@ 0x40
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	00db      	lsls	r3, r3, #3
 80071ba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80071be:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80071c2:	6859      	ldr	r1, [r3, #4]
 80071c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071c6:	069a      	lsls	r2, r3, #26
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	781b      	ldrb	r3, [r3, #0]
 80071cc:	00db      	lsls	r3, r3, #3
 80071ce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80071d2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80071d6:	430a      	orrs	r2, r1
 80071d8:	605a      	str	r2, [r3, #4]
 80071da:	e048      	b.n	800726e <USB_EPStartXfer+0x852>
 80071dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80071de:	095b      	lsrs	r3, r3, #5
 80071e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80071e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80071e4:	f003 031f 	and.w	r3, r3, #31
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d102      	bne.n	80071f2 <USB_EPStartXfer+0x7d6>
 80071ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071ee:	3b01      	subs	r3, #1
 80071f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	781b      	ldrb	r3, [r3, #0]
 80071f6:	00db      	lsls	r3, r3, #3
 80071f8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80071fc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007200:	685a      	ldr	r2, [r3, #4]
 8007202:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007204:	069b      	lsls	r3, r3, #26
 8007206:	431a      	orrs	r2, r3
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	781b      	ldrb	r3, [r3, #0]
 800720c:	00db      	lsls	r3, r3, #3
 800720e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007212:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007216:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800721a:	605a      	str	r2, [r3, #4]
 800721c:	e027      	b.n	800726e <USB_EPStartXfer+0x852>
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	785b      	ldrb	r3, [r3, #1]
 8007222:	2b01      	cmp	r3, #1
 8007224:	d123      	bne.n	800726e <USB_EPStartXfer+0x852>
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	781b      	ldrb	r3, [r3, #0]
 800722a:	00db      	lsls	r3, r3, #3
 800722c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007230:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007234:	685a      	ldr	r2, [r3, #4]
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	781b      	ldrb	r3, [r3, #0]
 800723a:	00db      	lsls	r3, r3, #3
 800723c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007240:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007244:	b292      	uxth	r2, r2
 8007246:	605a      	str	r2, [r3, #4]
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	781b      	ldrb	r3, [r3, #0]
 800724c:	00db      	lsls	r3, r3, #3
 800724e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007252:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007256:	6859      	ldr	r1, [r3, #4]
 8007258:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800725a:	041a      	lsls	r2, r3, #16
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	00db      	lsls	r3, r3, #3
 8007262:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007266:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800726a:	430a      	orrs	r2, r1
 800726c:	605a      	str	r2, [r3, #4]
          pmabuffer = ep->pmaaddr1;
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	895b      	ldrh	r3, [r3, #10]
 8007272:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	6959      	ldr	r1, [r3, #20]
 8007278:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800727a:	b29b      	uxth	r3, r3
 800727c:	8b7a      	ldrh	r2, [r7, #26]
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 fd42 	bl	8007d08 <USB_WritePMA>
 8007284:	e0a4      	b.n	80073d0 <USB_EPStartXfer+0x9b4>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	785b      	ldrb	r3, [r3, #1]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d16d      	bne.n	800736a <USB_EPStartXfer+0x94e>
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	781b      	ldrb	r3, [r3, #0]
 8007292:	00db      	lsls	r3, r3, #3
 8007294:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007298:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	781b      	ldrb	r3, [r3, #0]
 80072a2:	00db      	lsls	r3, r3, #3
 80072a4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80072a8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80072ac:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80072b0:	601a      	str	r2, [r3, #0]
 80072b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d112      	bne.n	80072de <USB_EPStartXfer+0x8c2>
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	00db      	lsls	r3, r3, #3
 80072be:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80072c2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80072c6:	681a      	ldr	r2, [r3, #0]
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	781b      	ldrb	r3, [r3, #0]
 80072cc:	00db      	lsls	r3, r3, #3
 80072ce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80072d2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80072d6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80072da:	601a      	str	r2, [r3, #0]
 80072dc:	e06d      	b.n	80073ba <USB_EPStartXfer+0x99e>
 80072de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072e0:	2b3e      	cmp	r3, #62	@ 0x3e
 80072e2:	d821      	bhi.n	8007328 <USB_EPStartXfer+0x90c>
 80072e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072e6:	085b      	lsrs	r3, r3, #1
 80072e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80072ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072ec:	f003 0301 	and.w	r3, r3, #1
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d002      	beq.n	80072fa <USB_EPStartXfer+0x8de>
 80072f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072f6:	3301      	adds	r3, #1
 80072f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	781b      	ldrb	r3, [r3, #0]
 80072fe:	00db      	lsls	r3, r3, #3
 8007300:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007304:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007308:	6819      	ldr	r1, [r3, #0]
 800730a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800730c:	069a      	lsls	r2, r3, #26
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	781b      	ldrb	r3, [r3, #0]
 8007312:	00db      	lsls	r3, r3, #3
 8007314:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007318:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800731c:	430a      	orrs	r2, r1
 800731e:	601a      	str	r2, [r3, #0]
 8007320:	e04b      	b.n	80073ba <USB_EPStartXfer+0x99e>
 8007322:	bf00      	nop
 8007324:	07ff8e8f 	.word	0x07ff8e8f
 8007328:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800732a:	095b      	lsrs	r3, r3, #5
 800732c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800732e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007330:	f003 031f 	and.w	r3, r3, #31
 8007334:	2b00      	cmp	r3, #0
 8007336:	d102      	bne.n	800733e <USB_EPStartXfer+0x922>
 8007338:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800733a:	3b01      	subs	r3, #1
 800733c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	781b      	ldrb	r3, [r3, #0]
 8007342:	00db      	lsls	r3, r3, #3
 8007344:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007348:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800734c:	681a      	ldr	r2, [r3, #0]
 800734e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007350:	069b      	lsls	r3, r3, #26
 8007352:	431a      	orrs	r2, r3
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	781b      	ldrb	r3, [r3, #0]
 8007358:	00db      	lsls	r3, r3, #3
 800735a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800735e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007362:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8007366:	601a      	str	r2, [r3, #0]
 8007368:	e027      	b.n	80073ba <USB_EPStartXfer+0x99e>
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	785b      	ldrb	r3, [r3, #1]
 800736e:	2b01      	cmp	r3, #1
 8007370:	d123      	bne.n	80073ba <USB_EPStartXfer+0x99e>
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	781b      	ldrb	r3, [r3, #0]
 8007376:	00db      	lsls	r3, r3, #3
 8007378:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800737c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	00db      	lsls	r3, r3, #3
 8007388:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800738c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007390:	b292      	uxth	r2, r2
 8007392:	601a      	str	r2, [r3, #0]
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	781b      	ldrb	r3, [r3, #0]
 8007398:	00db      	lsls	r3, r3, #3
 800739a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800739e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80073a2:	6819      	ldr	r1, [r3, #0]
 80073a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80073a6:	041a      	lsls	r2, r3, #16
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	781b      	ldrb	r3, [r3, #0]
 80073ac:	00db      	lsls	r3, r3, #3
 80073ae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80073b2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80073b6:	430a      	orrs	r2, r1
 80073b8:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	891b      	ldrh	r3, [r3, #8]
 80073be:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	6959      	ldr	r1, [r3, #20]
 80073c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	8b7a      	ldrh	r2, [r7, #26]
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f000 fc9c 	bl	8007d08 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80073d0:	687a      	ldr	r2, [r7, #4]
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	781b      	ldrb	r3, [r3, #0]
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	4413      	add	r3, r2
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	4b8b      	ldr	r3, [pc, #556]	@ (800760c <USB_EPStartXfer+0xbf0>)
 80073de:	4013      	ands	r3, r2
 80073e0:	60fb      	str	r3, [r7, #12]
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f083 0310 	eor.w	r3, r3, #16
 80073e8:	60fb      	str	r3, [r7, #12]
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	f083 0320 	eor.w	r3, r3, #32
 80073f0:	60fb      	str	r3, [r7, #12]
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	781b      	ldrb	r3, [r3, #0]
 80073f8:	009b      	lsls	r3, r3, #2
 80073fa:	441a      	add	r2, r3
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007402:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007406:	6013      	str	r3, [r2, #0]
 8007408:	e36b      	b.n	8007ae2 <USB_EPStartXfer+0x10c6>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	7b1b      	ldrb	r3, [r3, #12]
 800740e:	2b00      	cmp	r3, #0
 8007410:	f040 8081 	bne.w	8007516 <USB_EPStartXfer+0xafa>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	699a      	ldr	r2, [r3, #24]
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	691b      	ldr	r3, [r3, #16]
 800741c:	429a      	cmp	r2, r3
 800741e:	d909      	bls.n	8007434 <USB_EPStartXfer+0xa18>
      {
        len = ep->maxpacket;
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	691b      	ldr	r3, [r3, #16]
 8007424:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len -= len;
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	699a      	ldr	r2, [r3, #24]
 800742a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800742c:	1ad2      	subs	r2, r2, r3
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	619a      	str	r2, [r3, #24]
 8007432:	e005      	b.n	8007440 <USB_EPStartXfer+0xa24>
      }
      else
      {
        len = ep->xfer_len;
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	699b      	ldr	r3, [r3, #24]
 8007438:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len = 0U;
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	2200      	movs	r2, #0
 800743e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	781b      	ldrb	r3, [r3, #0]
 8007444:	00db      	lsls	r3, r3, #3
 8007446:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800744a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800744e:	685a      	ldr	r2, [r3, #4]
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	00db      	lsls	r3, r3, #3
 8007456:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800745a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800745e:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8007462:	605a      	str	r2, [r3, #4]
 8007464:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007466:	2b00      	cmp	r3, #0
 8007468:	d112      	bne.n	8007490 <USB_EPStartXfer+0xa74>
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	781b      	ldrb	r3, [r3, #0]
 800746e:	00db      	lsls	r3, r3, #3
 8007470:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007474:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007478:	685a      	ldr	r2, [r3, #4]
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	781b      	ldrb	r3, [r3, #0]
 800747e:	00db      	lsls	r3, r3, #3
 8007480:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007484:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007488:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800748c:	605a      	str	r2, [r3, #4]
 800748e:	e30c      	b.n	8007aaa <USB_EPStartXfer+0x108e>
 8007490:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007492:	2b3e      	cmp	r3, #62	@ 0x3e
 8007494:	d81e      	bhi.n	80074d4 <USB_EPStartXfer+0xab8>
 8007496:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007498:	085b      	lsrs	r3, r3, #1
 800749a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800749c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800749e:	f003 0301 	and.w	r3, r3, #1
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d002      	beq.n	80074ac <USB_EPStartXfer+0xa90>
 80074a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074a8:	3301      	adds	r3, #1
 80074aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	00db      	lsls	r3, r3, #3
 80074b2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80074b6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80074ba:	6859      	ldr	r1, [r3, #4]
 80074bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074be:	069a      	lsls	r2, r3, #26
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	00db      	lsls	r3, r3, #3
 80074c6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80074ca:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80074ce:	430a      	orrs	r2, r1
 80074d0:	605a      	str	r2, [r3, #4]
 80074d2:	e2ea      	b.n	8007aaa <USB_EPStartXfer+0x108e>
 80074d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074d6:	095b      	lsrs	r3, r3, #5
 80074d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80074da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074dc:	f003 031f 	and.w	r3, r3, #31
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d102      	bne.n	80074ea <USB_EPStartXfer+0xace>
 80074e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074e6:	3b01      	subs	r3, #1
 80074e8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	781b      	ldrb	r3, [r3, #0]
 80074ee:	00db      	lsls	r3, r3, #3
 80074f0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80074f4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80074f8:	685a      	ldr	r2, [r3, #4]
 80074fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074fc:	069b      	lsls	r3, r3, #26
 80074fe:	431a      	orrs	r2, r3
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	00db      	lsls	r3, r3, #3
 8007506:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800750a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800750e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8007512:	605a      	str	r2, [r3, #4]
 8007514:	e2c9      	b.n	8007aaa <USB_EPStartXfer+0x108e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	78db      	ldrb	r3, [r3, #3]
 800751a:	2b02      	cmp	r3, #2
 800751c:	f040 8176 	bne.w	800780c <USB_EPStartXfer+0xdf0>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	785b      	ldrb	r3, [r3, #1]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d173      	bne.n	8007610 <USB_EPStartXfer+0xbf4>
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	00db      	lsls	r3, r3, #3
 800752e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007532:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007536:	681a      	ldr	r2, [r3, #0]
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	781b      	ldrb	r3, [r3, #0]
 800753c:	00db      	lsls	r3, r3, #3
 800753e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007542:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007546:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800754a:	601a      	str	r2, [r3, #0]
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	691b      	ldr	r3, [r3, #16]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d112      	bne.n	800757a <USB_EPStartXfer+0xb5e>
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	781b      	ldrb	r3, [r3, #0]
 8007558:	00db      	lsls	r3, r3, #3
 800755a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800755e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007562:	681a      	ldr	r2, [r3, #0]
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	781b      	ldrb	r3, [r3, #0]
 8007568:	00db      	lsls	r3, r3, #3
 800756a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800756e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007572:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8007576:	601a      	str	r2, [r3, #0]
 8007578:	e073      	b.n	8007662 <USB_EPStartXfer+0xc46>
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	691b      	ldr	r3, [r3, #16]
 800757e:	2b3e      	cmp	r3, #62	@ 0x3e
 8007580:	d820      	bhi.n	80075c4 <USB_EPStartXfer+0xba8>
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	691b      	ldr	r3, [r3, #16]
 8007586:	085b      	lsrs	r3, r3, #1
 8007588:	637b      	str	r3, [r7, #52]	@ 0x34
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	691b      	ldr	r3, [r3, #16]
 800758e:	f003 0301 	and.w	r3, r3, #1
 8007592:	2b00      	cmp	r3, #0
 8007594:	d002      	beq.n	800759c <USB_EPStartXfer+0xb80>
 8007596:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007598:	3301      	adds	r3, #1
 800759a:	637b      	str	r3, [r7, #52]	@ 0x34
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	781b      	ldrb	r3, [r3, #0]
 80075a0:	00db      	lsls	r3, r3, #3
 80075a2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80075a6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80075aa:	6819      	ldr	r1, [r3, #0]
 80075ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075ae:	069a      	lsls	r2, r3, #26
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	781b      	ldrb	r3, [r3, #0]
 80075b4:	00db      	lsls	r3, r3, #3
 80075b6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80075ba:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80075be:	430a      	orrs	r2, r1
 80075c0:	601a      	str	r2, [r3, #0]
 80075c2:	e04e      	b.n	8007662 <USB_EPStartXfer+0xc46>
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	691b      	ldr	r3, [r3, #16]
 80075c8:	095b      	lsrs	r3, r3, #5
 80075ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	691b      	ldr	r3, [r3, #16]
 80075d0:	f003 031f 	and.w	r3, r3, #31
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d102      	bne.n	80075de <USB_EPStartXfer+0xbc2>
 80075d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075da:	3b01      	subs	r3, #1
 80075dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	00db      	lsls	r3, r3, #3
 80075e4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80075e8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80075ec:	681a      	ldr	r2, [r3, #0]
 80075ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075f0:	069b      	lsls	r3, r3, #26
 80075f2:	431a      	orrs	r2, r3
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	00db      	lsls	r3, r3, #3
 80075fa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80075fe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007602:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8007606:	601a      	str	r2, [r3, #0]
 8007608:	e02b      	b.n	8007662 <USB_EPStartXfer+0xc46>
 800760a:	bf00      	nop
 800760c:	07ff8fbf 	.word	0x07ff8fbf
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	785b      	ldrb	r3, [r3, #1]
 8007614:	2b01      	cmp	r3, #1
 8007616:	d124      	bne.n	8007662 <USB_EPStartXfer+0xc46>
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	00db      	lsls	r3, r3, #3
 800761e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007622:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007626:	681a      	ldr	r2, [r3, #0]
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	00db      	lsls	r3, r3, #3
 800762e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007632:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007636:	b292      	uxth	r2, r2
 8007638:	601a      	str	r2, [r3, #0]
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	781b      	ldrb	r3, [r3, #0]
 800763e:	00db      	lsls	r3, r3, #3
 8007640:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007644:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007648:	6819      	ldr	r1, [r3, #0]
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	691b      	ldr	r3, [r3, #16]
 800764e:	041a      	lsls	r2, r3, #16
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	781b      	ldrb	r3, [r3, #0]
 8007654:	00db      	lsls	r3, r3, #3
 8007656:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800765a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800765e:	430a      	orrs	r2, r1
 8007660:	601a      	str	r2, [r3, #0]
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	785b      	ldrb	r3, [r3, #1]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d170      	bne.n	800774c <USB_EPStartXfer+0xd30>
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	781b      	ldrb	r3, [r3, #0]
 800766e:	00db      	lsls	r3, r3, #3
 8007670:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007674:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007678:	685a      	ldr	r2, [r3, #4]
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	00db      	lsls	r3, r3, #3
 8007680:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007684:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007688:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800768c:	605a      	str	r2, [r3, #4]
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	691b      	ldr	r3, [r3, #16]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d112      	bne.n	80076bc <USB_EPStartXfer+0xca0>
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	781b      	ldrb	r3, [r3, #0]
 800769a:	00db      	lsls	r3, r3, #3
 800769c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80076a0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80076a4:	685a      	ldr	r2, [r3, #4]
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	00db      	lsls	r3, r3, #3
 80076ac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80076b0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80076b4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80076b8:	605a      	str	r2, [r3, #4]
 80076ba:	e070      	b.n	800779e <USB_EPStartXfer+0xd82>
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	691b      	ldr	r3, [r3, #16]
 80076c0:	2b3e      	cmp	r3, #62	@ 0x3e
 80076c2:	d820      	bhi.n	8007706 <USB_EPStartXfer+0xcea>
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	691b      	ldr	r3, [r3, #16]
 80076c8:	085b      	lsrs	r3, r3, #1
 80076ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	691b      	ldr	r3, [r3, #16]
 80076d0:	f003 0301 	and.w	r3, r3, #1
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d002      	beq.n	80076de <USB_EPStartXfer+0xcc2>
 80076d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076da:	3301      	adds	r3, #1
 80076dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	781b      	ldrb	r3, [r3, #0]
 80076e2:	00db      	lsls	r3, r3, #3
 80076e4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80076e8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80076ec:	6859      	ldr	r1, [r3, #4]
 80076ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076f0:	069a      	lsls	r2, r3, #26
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	781b      	ldrb	r3, [r3, #0]
 80076f6:	00db      	lsls	r3, r3, #3
 80076f8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80076fc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007700:	430a      	orrs	r2, r1
 8007702:	605a      	str	r2, [r3, #4]
 8007704:	e04b      	b.n	800779e <USB_EPStartXfer+0xd82>
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	691b      	ldr	r3, [r3, #16]
 800770a:	095b      	lsrs	r3, r3, #5
 800770c:	633b      	str	r3, [r7, #48]	@ 0x30
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	691b      	ldr	r3, [r3, #16]
 8007712:	f003 031f 	and.w	r3, r3, #31
 8007716:	2b00      	cmp	r3, #0
 8007718:	d102      	bne.n	8007720 <USB_EPStartXfer+0xd04>
 800771a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800771c:	3b01      	subs	r3, #1
 800771e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	781b      	ldrb	r3, [r3, #0]
 8007724:	00db      	lsls	r3, r3, #3
 8007726:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800772a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800772e:	685a      	ldr	r2, [r3, #4]
 8007730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007732:	069b      	lsls	r3, r3, #26
 8007734:	431a      	orrs	r2, r3
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	00db      	lsls	r3, r3, #3
 800773c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007740:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007744:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8007748:	605a      	str	r2, [r3, #4]
 800774a:	e028      	b.n	800779e <USB_EPStartXfer+0xd82>
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	785b      	ldrb	r3, [r3, #1]
 8007750:	2b01      	cmp	r3, #1
 8007752:	d124      	bne.n	800779e <USB_EPStartXfer+0xd82>
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	00db      	lsls	r3, r3, #3
 800775a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800775e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007762:	685a      	ldr	r2, [r3, #4]
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	781b      	ldrb	r3, [r3, #0]
 8007768:	00db      	lsls	r3, r3, #3
 800776a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800776e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007772:	b292      	uxth	r2, r2
 8007774:	605a      	str	r2, [r3, #4]
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	781b      	ldrb	r3, [r3, #0]
 800777a:	00db      	lsls	r3, r3, #3
 800777c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007780:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007784:	6859      	ldr	r1, [r3, #4]
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	691b      	ldr	r3, [r3, #16]
 800778a:	041a      	lsls	r2, r3, #16
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	781b      	ldrb	r3, [r3, #0]
 8007790:	00db      	lsls	r3, r3, #3
 8007792:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007796:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800779a:	430a      	orrs	r2, r1
 800779c:	605a      	str	r2, [r3, #4]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	69db      	ldr	r3, [r3, #28]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	f000 8181 	beq.w	8007aaa <USB_EPStartXfer+0x108e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(USBx, ep->num);
 80077a8:	687a      	ldr	r2, [r7, #4]
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	781b      	ldrb	r3, [r3, #0]
 80077ae:	009b      	lsls	r3, r3, #2
 80077b0:	4413      	add	r3, r2
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	84fb      	strh	r3, [r7, #38]	@ 0x26

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80077b6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80077b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d004      	beq.n	80077ca <USB_EPStartXfer+0xdae>
 80077c0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80077c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d10b      	bne.n	80077e2 <USB_EPStartXfer+0xdc6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80077ca:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80077cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	f040 816a 	bne.w	8007aaa <USB_EPStartXfer+0x108e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80077d6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80077d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077dc:	2b00      	cmp	r3, #0
 80077de:	f040 8164 	bne.w	8007aaa <USB_EPStartXfer+0x108e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80077e2:	687a      	ldr	r2, [r7, #4]
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	781b      	ldrb	r3, [r3, #0]
 80077e8:	009b      	lsls	r3, r3, #2
 80077ea:	4413      	add	r3, r2
 80077ec:	681a      	ldr	r2, [r3, #0]
 80077ee:	4b98      	ldr	r3, [pc, #608]	@ (8007a50 <USB_EPStartXfer+0x1034>)
 80077f0:	4013      	ands	r3, r2
 80077f2:	623b      	str	r3, [r7, #32]
 80077f4:	687a      	ldr	r2, [r7, #4]
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	009b      	lsls	r3, r3, #2
 80077fc:	441a      	add	r2, r3
 80077fe:	6a3b      	ldr	r3, [r7, #32]
 8007800:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007804:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007808:	6013      	str	r3, [r2, #0]
 800780a:	e14e      	b.n	8007aaa <USB_EPStartXfer+0x108e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	78db      	ldrb	r3, [r3, #3]
 8007810:	2b01      	cmp	r3, #1
 8007812:	f040 8148 	bne.w	8007aa6 <USB_EPStartXfer+0x108a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	699a      	ldr	r2, [r3, #24]
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	691b      	ldr	r3, [r3, #16]
 800781e:	429a      	cmp	r2, r3
 8007820:	d909      	bls.n	8007836 <USB_EPStartXfer+0xe1a>
        {
          len = ep->maxpacket;
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	691b      	ldr	r3, [r3, #16]
 8007826:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len -= len;
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	699a      	ldr	r2, [r3, #24]
 800782c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800782e:	1ad2      	subs	r2, r2, r3
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	619a      	str	r2, [r3, #24]
 8007834:	e005      	b.n	8007842 <USB_EPStartXfer+0xe26>
        }
        else
        {
          len = ep->xfer_len;
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	699b      	ldr	r3, [r3, #24]
 800783a:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len = 0U;
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	2200      	movs	r2, #0
 8007840:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	785b      	ldrb	r3, [r3, #1]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d16a      	bne.n	8007920 <USB_EPStartXfer+0xf04>
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	781b      	ldrb	r3, [r3, #0]
 800784e:	00db      	lsls	r3, r3, #3
 8007850:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007854:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007858:	681a      	ldr	r2, [r3, #0]
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	781b      	ldrb	r3, [r3, #0]
 800785e:	00db      	lsls	r3, r3, #3
 8007860:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007864:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007868:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800786c:	601a      	str	r2, [r3, #0]
 800786e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007870:	2b00      	cmp	r3, #0
 8007872:	d112      	bne.n	800789a <USB_EPStartXfer+0xe7e>
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	781b      	ldrb	r3, [r3, #0]
 8007878:	00db      	lsls	r3, r3, #3
 800787a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800787e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007882:	681a      	ldr	r2, [r3, #0]
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	781b      	ldrb	r3, [r3, #0]
 8007888:	00db      	lsls	r3, r3, #3
 800788a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800788e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007892:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8007896:	601a      	str	r2, [r3, #0]
 8007898:	e06a      	b.n	8007970 <USB_EPStartXfer+0xf54>
 800789a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800789c:	2b3e      	cmp	r3, #62	@ 0x3e
 800789e:	d81e      	bhi.n	80078de <USB_EPStartXfer+0xec2>
 80078a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078a2:	085b      	lsrs	r3, r3, #1
 80078a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80078a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078a8:	f003 0301 	and.w	r3, r3, #1
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d002      	beq.n	80078b6 <USB_EPStartXfer+0xe9a>
 80078b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078b2:	3301      	adds	r3, #1
 80078b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	781b      	ldrb	r3, [r3, #0]
 80078ba:	00db      	lsls	r3, r3, #3
 80078bc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80078c0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80078c4:	6819      	ldr	r1, [r3, #0]
 80078c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078c8:	069a      	lsls	r2, r3, #26
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	781b      	ldrb	r3, [r3, #0]
 80078ce:	00db      	lsls	r3, r3, #3
 80078d0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80078d4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80078d8:	430a      	orrs	r2, r1
 80078da:	601a      	str	r2, [r3, #0]
 80078dc:	e048      	b.n	8007970 <USB_EPStartXfer+0xf54>
 80078de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078e0:	095b      	lsrs	r3, r3, #5
 80078e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80078e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078e6:	f003 031f 	and.w	r3, r3, #31
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d102      	bne.n	80078f4 <USB_EPStartXfer+0xed8>
 80078ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078f0:	3b01      	subs	r3, #1
 80078f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	00db      	lsls	r3, r3, #3
 80078fa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80078fe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007902:	681a      	ldr	r2, [r3, #0]
 8007904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007906:	069b      	lsls	r3, r3, #26
 8007908:	431a      	orrs	r2, r3
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	781b      	ldrb	r3, [r3, #0]
 800790e:	00db      	lsls	r3, r3, #3
 8007910:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007914:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007918:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800791c:	601a      	str	r2, [r3, #0]
 800791e:	e027      	b.n	8007970 <USB_EPStartXfer+0xf54>
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	785b      	ldrb	r3, [r3, #1]
 8007924:	2b01      	cmp	r3, #1
 8007926:	d123      	bne.n	8007970 <USB_EPStartXfer+0xf54>
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	781b      	ldrb	r3, [r3, #0]
 800792c:	00db      	lsls	r3, r3, #3
 800792e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007932:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007936:	681a      	ldr	r2, [r3, #0]
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	781b      	ldrb	r3, [r3, #0]
 800793c:	00db      	lsls	r3, r3, #3
 800793e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007942:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007946:	b292      	uxth	r2, r2
 8007948:	601a      	str	r2, [r3, #0]
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	781b      	ldrb	r3, [r3, #0]
 800794e:	00db      	lsls	r3, r3, #3
 8007950:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007954:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007958:	6819      	ldr	r1, [r3, #0]
 800795a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800795c:	041a      	lsls	r2, r3, #16
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	00db      	lsls	r3, r3, #3
 8007964:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007968:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800796c:	430a      	orrs	r2, r1
 800796e:	601a      	str	r2, [r3, #0]
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	785b      	ldrb	r3, [r3, #1]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d16d      	bne.n	8007a54 <USB_EPStartXfer+0x1038>
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	00db      	lsls	r3, r3, #3
 800797e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007982:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007986:	685a      	ldr	r2, [r3, #4]
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	00db      	lsls	r3, r3, #3
 800798e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007992:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007996:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800799a:	605a      	str	r2, [r3, #4]
 800799c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d112      	bne.n	80079c8 <USB_EPStartXfer+0xfac>
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	781b      	ldrb	r3, [r3, #0]
 80079a6:	00db      	lsls	r3, r3, #3
 80079a8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80079ac:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80079b0:	685a      	ldr	r2, [r3, #4]
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	781b      	ldrb	r3, [r3, #0]
 80079b6:	00db      	lsls	r3, r3, #3
 80079b8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80079bc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80079c0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80079c4:	605a      	str	r2, [r3, #4]
 80079c6:	e070      	b.n	8007aaa <USB_EPStartXfer+0x108e>
 80079c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80079ca:	2b3e      	cmp	r3, #62	@ 0x3e
 80079cc:	d81e      	bhi.n	8007a0c <USB_EPStartXfer+0xff0>
 80079ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80079d0:	085b      	lsrs	r3, r3, #1
 80079d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80079d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80079d6:	f003 0301 	and.w	r3, r3, #1
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d002      	beq.n	80079e4 <USB_EPStartXfer+0xfc8>
 80079de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079e0:	3301      	adds	r3, #1
 80079e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	00db      	lsls	r3, r3, #3
 80079ea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80079ee:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80079f2:	6859      	ldr	r1, [r3, #4]
 80079f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079f6:	069a      	lsls	r2, r3, #26
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	00db      	lsls	r3, r3, #3
 80079fe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007a02:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007a06:	430a      	orrs	r2, r1
 8007a08:	605a      	str	r2, [r3, #4]
 8007a0a:	e04e      	b.n	8007aaa <USB_EPStartXfer+0x108e>
 8007a0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a0e:	095b      	lsrs	r3, r3, #5
 8007a10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007a12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a14:	f003 031f 	and.w	r3, r3, #31
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d102      	bne.n	8007a22 <USB_EPStartXfer+0x1006>
 8007a1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a1e:	3b01      	subs	r3, #1
 8007a20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	781b      	ldrb	r3, [r3, #0]
 8007a26:	00db      	lsls	r3, r3, #3
 8007a28:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007a2c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007a30:	685a      	ldr	r2, [r3, #4]
 8007a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a34:	069b      	lsls	r3, r3, #26
 8007a36:	431a      	orrs	r2, r3
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	781b      	ldrb	r3, [r3, #0]
 8007a3c:	00db      	lsls	r3, r3, #3
 8007a3e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007a42:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007a46:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8007a4a:	605a      	str	r2, [r3, #4]
 8007a4c:	e02d      	b.n	8007aaa <USB_EPStartXfer+0x108e>
 8007a4e:	bf00      	nop
 8007a50:	07ff8f8f 	.word	0x07ff8f8f
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	785b      	ldrb	r3, [r3, #1]
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	d126      	bne.n	8007aaa <USB_EPStartXfer+0x108e>
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	781b      	ldrb	r3, [r3, #0]
 8007a60:	00db      	lsls	r3, r3, #3
 8007a62:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007a66:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007a6a:	685a      	ldr	r2, [r3, #4]
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	781b      	ldrb	r3, [r3, #0]
 8007a70:	00db      	lsls	r3, r3, #3
 8007a72:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007a76:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007a7a:	b292      	uxth	r2, r2
 8007a7c:	605a      	str	r2, [r3, #4]
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	00db      	lsls	r3, r3, #3
 8007a84:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007a88:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007a8c:	6859      	ldr	r1, [r3, #4]
 8007a8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a90:	041a      	lsls	r2, r3, #16
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	781b      	ldrb	r3, [r3, #0]
 8007a96:	00db      	lsls	r3, r3, #3
 8007a98:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007a9c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007aa0:	430a      	orrs	r2, r1
 8007aa2:	605a      	str	r2, [r3, #4]
 8007aa4:	e001      	b.n	8007aaa <USB_EPStartXfer+0x108e>
      }
      else
      {
        return HAL_ERROR;
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	e01c      	b.n	8007ae4 <USB_EPStartXfer+0x10c8>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007aaa:	687a      	ldr	r2, [r7, #4]
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	009b      	lsls	r3, r3, #2
 8007ab2:	4413      	add	r3, r2
 8007ab4:	681a      	ldr	r2, [r3, #0]
 8007ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8007aec <USB_EPStartXfer+0x10d0>)
 8007ab8:	4013      	ands	r3, r2
 8007aba:	61fb      	str	r3, [r7, #28]
 8007abc:	69fb      	ldr	r3, [r7, #28]
 8007abe:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007ac2:	61fb      	str	r3, [r7, #28]
 8007ac4:	69fb      	ldr	r3, [r7, #28]
 8007ac6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007aca:	61fb      	str	r3, [r7, #28]
 8007acc:	687a      	ldr	r2, [r7, #4]
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	781b      	ldrb	r3, [r3, #0]
 8007ad2:	009b      	lsls	r3, r3, #2
 8007ad4:	441a      	add	r2, r3
 8007ad6:	69fb      	ldr	r3, [r7, #28]
 8007ad8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007adc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ae0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007ae2:	2300      	movs	r3, #0
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3758      	adds	r7, #88	@ 0x58
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}
 8007aec:	07ffbf8f 	.word	0x07ffbf8f

08007af0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b085      	sub	sp, #20
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	785b      	ldrb	r3, [r3, #1]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d018      	beq.n	8007b34 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007b02:	687a      	ldr	r2, [r7, #4]
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	781b      	ldrb	r3, [r3, #0]
 8007b08:	009b      	lsls	r3, r3, #2
 8007b0a:	4413      	add	r3, r2
 8007b0c:	681a      	ldr	r2, [r3, #0]
 8007b0e:	4b19      	ldr	r3, [pc, #100]	@ (8007b74 <USB_EPSetStall+0x84>)
 8007b10:	4013      	ands	r3, r2
 8007b12:	60bb      	str	r3, [r7, #8]
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	f083 0310 	eor.w	r3, r3, #16
 8007b1a:	60bb      	str	r3, [r7, #8]
 8007b1c:	687a      	ldr	r2, [r7, #4]
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	009b      	lsls	r3, r3, #2
 8007b24:	441a      	add	r2, r3
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b30:	6013      	str	r3, [r2, #0]
 8007b32:	e017      	b.n	8007b64 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007b34:	687a      	ldr	r2, [r7, #4]
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	781b      	ldrb	r3, [r3, #0]
 8007b3a:	009b      	lsls	r3, r3, #2
 8007b3c:	4413      	add	r3, r2
 8007b3e:	681a      	ldr	r2, [r3, #0]
 8007b40:	4b0d      	ldr	r3, [pc, #52]	@ (8007b78 <USB_EPSetStall+0x88>)
 8007b42:	4013      	ands	r3, r2
 8007b44:	60fb      	str	r3, [r7, #12]
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007b4c:	60fb      	str	r3, [r7, #12]
 8007b4e:	687a      	ldr	r2, [r7, #4]
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	781b      	ldrb	r3, [r3, #0]
 8007b54:	009b      	lsls	r3, r3, #2
 8007b56:	441a      	add	r2, r3
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b62:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007b64:	2300      	movs	r3, #0
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	3714      	adds	r7, #20
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b70:	4770      	bx	lr
 8007b72:	bf00      	nop
 8007b74:	07ff8fbf 	.word	0x07ff8fbf
 8007b78:	07ffbf8f 	.word	0x07ffbf8f

08007b7c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b089      	sub	sp, #36	@ 0x24
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	7b1b      	ldrb	r3, [r3, #12]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d17c      	bne.n	8007c88 <USB_EPClearStall+0x10c>
  {
    if (ep->is_in != 0U)
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	785b      	ldrb	r3, [r3, #1]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d03c      	beq.n	8007c10 <USB_EPClearStall+0x94>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007b96:	687a      	ldr	r2, [r7, #4]
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	781b      	ldrb	r3, [r3, #0]
 8007b9c:	009b      	lsls	r3, r3, #2
 8007b9e:	4413      	add	r3, r2
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	613b      	str	r3, [r7, #16]
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d013      	beq.n	8007bd6 <USB_EPClearStall+0x5a>
 8007bae:	687a      	ldr	r2, [r7, #4]
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	781b      	ldrb	r3, [r3, #0]
 8007bb4:	009b      	lsls	r3, r3, #2
 8007bb6:	4413      	add	r3, r2
 8007bb8:	681a      	ldr	r2, [r3, #0]
 8007bba:	4b37      	ldr	r3, [pc, #220]	@ (8007c98 <USB_EPClearStall+0x11c>)
 8007bbc:	4013      	ands	r3, r2
 8007bbe:	60fb      	str	r3, [r7, #12]
 8007bc0:	687a      	ldr	r2, [r7, #4]
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	781b      	ldrb	r3, [r3, #0]
 8007bc6:	009b      	lsls	r3, r3, #2
 8007bc8:	441a      	add	r2, r3
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007bd0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007bd4:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	78db      	ldrb	r3, [r3, #3]
 8007bda:	2b01      	cmp	r3, #1
 8007bdc:	d054      	beq.n	8007c88 <USB_EPClearStall+0x10c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007bde:	687a      	ldr	r2, [r7, #4]
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	781b      	ldrb	r3, [r3, #0]
 8007be4:	009b      	lsls	r3, r3, #2
 8007be6:	4413      	add	r3, r2
 8007be8:	681a      	ldr	r2, [r3, #0]
 8007bea:	4b2c      	ldr	r3, [pc, #176]	@ (8007c9c <USB_EPClearStall+0x120>)
 8007bec:	4013      	ands	r3, r2
 8007bee:	60bb      	str	r3, [r7, #8]
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	f083 0320 	eor.w	r3, r3, #32
 8007bf6:	60bb      	str	r3, [r7, #8]
 8007bf8:	687a      	ldr	r2, [r7, #4]
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	781b      	ldrb	r3, [r3, #0]
 8007bfe:	009b      	lsls	r3, r3, #2
 8007c00:	441a      	add	r2, r3
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c0c:	6013      	str	r3, [r2, #0]
 8007c0e:	e03b      	b.n	8007c88 <USB_EPClearStall+0x10c>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007c10:	687a      	ldr	r2, [r7, #4]
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	781b      	ldrb	r3, [r3, #0]
 8007c16:	009b      	lsls	r3, r3, #2
 8007c18:	4413      	add	r3, r2
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	61fb      	str	r3, [r7, #28]
 8007c1e:	69fb      	ldr	r3, [r7, #28]
 8007c20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d013      	beq.n	8007c50 <USB_EPClearStall+0xd4>
 8007c28:	687a      	ldr	r2, [r7, #4]
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	781b      	ldrb	r3, [r3, #0]
 8007c2e:	009b      	lsls	r3, r3, #2
 8007c30:	4413      	add	r3, r2
 8007c32:	681a      	ldr	r2, [r3, #0]
 8007c34:	4b18      	ldr	r3, [pc, #96]	@ (8007c98 <USB_EPClearStall+0x11c>)
 8007c36:	4013      	ands	r3, r2
 8007c38:	61bb      	str	r3, [r7, #24]
 8007c3a:	687a      	ldr	r2, [r7, #4]
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	781b      	ldrb	r3, [r3, #0]
 8007c40:	009b      	lsls	r3, r3, #2
 8007c42:	441a      	add	r2, r3
 8007c44:	69bb      	ldr	r3, [r7, #24]
 8007c46:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007c4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c4e:	6013      	str	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	781b      	ldrb	r3, [r3, #0]
 8007c56:	009b      	lsls	r3, r3, #2
 8007c58:	4413      	add	r3, r2
 8007c5a:	681a      	ldr	r2, [r3, #0]
 8007c5c:	4b10      	ldr	r3, [pc, #64]	@ (8007ca0 <USB_EPClearStall+0x124>)
 8007c5e:	4013      	ands	r3, r2
 8007c60:	617b      	str	r3, [r7, #20]
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007c68:	617b      	str	r3, [r7, #20]
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007c70:	617b      	str	r3, [r7, #20]
 8007c72:	687a      	ldr	r2, [r7, #4]
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	781b      	ldrb	r3, [r3, #0]
 8007c78:	009b      	lsls	r3, r3, #2
 8007c7a:	441a      	add	r2, r3
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c86:	6013      	str	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007c88:	2300      	movs	r3, #0
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3724      	adds	r7, #36	@ 0x24
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c94:	4770      	bx	lr
 8007c96:	bf00      	nop
 8007c98:	07ff8f8f 	.word	0x07ff8f8f
 8007c9c:	07ff8fbf 	.word	0x07ff8fbf
 8007ca0:	07ffbf8f 	.word	0x07ffbf8f

08007ca4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_DRD_TypeDef *USBx, uint8_t address)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b083      	sub	sp, #12
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	460b      	mov	r3, r1
 8007cae:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007cb0:	78fb      	ldrb	r3, [r7, #3]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d102      	bne.n	8007cbc <USB_SetDevAddress+0x18>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2280      	movs	r2, #128	@ 0x80
 8007cba:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8007cbc:	2300      	movs	r3, #0
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	370c      	adds	r7, #12
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc8:	4770      	bx	lr

08007cca <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_DRD_TypeDef *USBx)
{
 8007cca:	b480      	push	{r7}
 8007ccc:	b083      	sub	sp, #12
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cd6:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8007cde:	2300      	movs	r3, #0
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	370c      	adds	r7, #12
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr

08007cec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_DRD_TypeDef const *USBx)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b085      	sub	sp, #20
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cf8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3714      	adds	r7, #20
 8007d00:	46bd      	mov	sp, r7
 8007d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d06:	4770      	bx	lr

08007d08 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b08b      	sub	sp, #44	@ 0x2c
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	60f8      	str	r0, [r7, #12]
 8007d10:	60b9      	str	r1, [r7, #8]
 8007d12:	4611      	mov	r1, r2
 8007d14:	461a      	mov	r2, r3
 8007d16:	460b      	mov	r3, r1
 8007d18:	80fb      	strh	r3, [r7, #6]
 8007d1a:	4613      	mov	r3, r2
 8007d1c:	80bb      	strh	r3, [r7, #4]
  UNUSED(USBx);
  uint32_t WrVal;
  uint32_t count;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 8007d1e:	88bb      	ldrh	r3, [r7, #4]
 8007d20:	3303      	adds	r3, #3
 8007d22:	089b      	lsrs	r3, r3, #2
 8007d24:	61bb      	str	r3, [r7, #24]
  /* Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 8007d26:	88bb      	ldrh	r3, [r7, #4]
 8007d28:	f003 0303 	and.w	r3, r3, #3
 8007d2c:	82fb      	strh	r3, [r7, #22]
  uint8_t *pBuf = pbUsrBuf;
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	613b      	str	r3, [r7, #16]

  /* Check if there is a remaining byte */
  if (remaining_bytes != 0U)
 8007d32:	8afb      	ldrh	r3, [r7, #22]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d002      	beq.n	8007d3e <USB_WritePMA+0x36>
  {
    NbWords--;
 8007d38:	69bb      	ldr	r3, [r7, #24]
 8007d3a:	3b01      	subs	r3, #1
 8007d3c:	61bb      	str	r3, [r7, #24]
  }

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 8007d3e:	88fb      	ldrh	r3, [r7, #6]
 8007d40:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007d44:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007d48:	61fb      	str	r3, [r7, #28]

  /* Write the Calculated Word into the PMA related Buffer */
  for (count = NbWords; count != 0U; count--)
 8007d4a:	69bb      	ldr	r3, [r7, #24]
 8007d4c:	623b      	str	r3, [r7, #32]
 8007d4e:	e015      	b.n	8007d7c <USB_WritePMA+0x74>
  {
    *pdwVal = __UNALIGNED_UINT32_READ(pBuf);
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	681a      	ldr	r2, [r3, #0]
 8007d54:	69fb      	ldr	r3, [r7, #28]
 8007d56:	601a      	str	r2, [r3, #0]
    pdwVal++;
 8007d58:	69fb      	ldr	r3, [r7, #28]
 8007d5a:	3304      	adds	r3, #4
 8007d5c:	61fb      	str	r3, [r7, #28]
    /* Increment pBuf 4 Time as Word Increment */
    pBuf++;
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	3301      	adds	r3, #1
 8007d62:	613b      	str	r3, [r7, #16]
    pBuf++;
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	3301      	adds	r3, #1
 8007d68:	613b      	str	r3, [r7, #16]
    pBuf++;
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	3301      	adds	r3, #1
 8007d6e:	613b      	str	r3, [r7, #16]
    pBuf++;
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	3301      	adds	r3, #1
 8007d74:	613b      	str	r3, [r7, #16]
  for (count = NbWords; count != 0U; count--)
 8007d76:	6a3b      	ldr	r3, [r7, #32]
 8007d78:	3b01      	subs	r3, #1
 8007d7a:	623b      	str	r3, [r7, #32]
 8007d7c:	6a3b      	ldr	r3, [r7, #32]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d1e6      	bne.n	8007d50 <USB_WritePMA+0x48>
  }

  /* When Number of data is not word aligned, write the remaining Byte */
  if (remaining_bytes != 0U)
 8007d82:	8afb      	ldrh	r3, [r7, #22]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d01a      	beq.n	8007dbe <USB_WritePMA+0xb6>
  {
    WrVal = 0U;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	627b      	str	r3, [r7, #36]	@ 0x24

    do
    {
      WrVal |= (uint32_t)(*(uint8_t *)pBuf) << (8U * count);
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	781b      	ldrb	r3, [r3, #0]
 8007d90:	461a      	mov	r2, r3
 8007d92:	6a3b      	ldr	r3, [r7, #32]
 8007d94:	00db      	lsls	r3, r3, #3
 8007d96:	fa02 f303 	lsl.w	r3, r2, r3
 8007d9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	627b      	str	r3, [r7, #36]	@ 0x24
      count++;
 8007da0:	6a3b      	ldr	r3, [r7, #32]
 8007da2:	3301      	adds	r3, #1
 8007da4:	623b      	str	r3, [r7, #32]
      pBuf++;
 8007da6:	693b      	ldr	r3, [r7, #16]
 8007da8:	3301      	adds	r3, #1
 8007daa:	613b      	str	r3, [r7, #16]
      remaining_bytes--;
 8007dac:	8afb      	ldrh	r3, [r7, #22]
 8007dae:	3b01      	subs	r3, #1
 8007db0:	82fb      	strh	r3, [r7, #22]
    } while (remaining_bytes != 0U);
 8007db2:	8afb      	ldrh	r3, [r7, #22]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d1e9      	bne.n	8007d8c <USB_WritePMA+0x84>

    *pdwVal = WrVal;
 8007db8:	69fb      	ldr	r3, [r7, #28]
 8007dba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007dbc:	601a      	str	r2, [r3, #0]
  }
}
 8007dbe:	bf00      	nop
 8007dc0:	372c      	adds	r7, #44	@ 0x2c
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc8:	4770      	bx	lr

08007dca <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007dca:	b480      	push	{r7}
 8007dcc:	b08b      	sub	sp, #44	@ 0x2c
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	60f8      	str	r0, [r7, #12]
 8007dd2:	60b9      	str	r1, [r7, #8]
 8007dd4:	4611      	mov	r1, r2
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	460b      	mov	r3, r1
 8007dda:	80fb      	strh	r3, [r7, #6]
 8007ddc:	4613      	mov	r3, r2
 8007dde:	80bb      	strh	r3, [r7, #4]
  UNUSED(USBx);
  uint32_t count;
  uint32_t RdVal;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 8007de0:	88bb      	ldrh	r3, [r7, #4]
 8007de2:	3303      	adds	r3, #3
 8007de4:	089b      	lsrs	r3, r3, #2
 8007de6:	61fb      	str	r3, [r7, #28]
  /*Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 8007de8:	88bb      	ldrh	r3, [r7, #4]
 8007dea:	f003 0303 	and.w	r3, r3, #3
 8007dee:	837b      	strh	r3, [r7, #26]
  uint8_t *pBuf = pbUsrBuf;
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	617b      	str	r3, [r7, #20]

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 8007df4:	88fb      	ldrh	r3, [r7, #6]
 8007df6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007dfa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007dfe:	623b      	str	r3, [r7, #32]

  /* if nbre of byte is not word aligned decrement the nbre of word*/
  if (remaining_bytes != 0U)
 8007e00:	8b7b      	ldrh	r3, [r7, #26]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d002      	beq.n	8007e0c <USB_ReadPMA+0x42>
  {
    NbWords--;
 8007e06:	69fb      	ldr	r3, [r7, #28]
 8007e08:	3b01      	subs	r3, #1
 8007e0a:	61fb      	str	r3, [r7, #28]
  }

  /*Read the Calculated Word From the PMA related Buffer*/
  for (count = NbWords; count != 0U; count--)
 8007e0c:	69fb      	ldr	r3, [r7, #28]
 8007e0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e10:	e015      	b.n	8007e3e <USB_ReadPMA+0x74>
  {
    __UNALIGNED_UINT32_WRITE(pBuf, *pdwVal);
 8007e12:	6a3b      	ldr	r3, [r7, #32]
 8007e14:	681a      	ldr	r2, [r3, #0]
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	601a      	str	r2, [r3, #0]

    pdwVal++;
 8007e1a:	6a3b      	ldr	r3, [r7, #32]
 8007e1c:	3304      	adds	r3, #4
 8007e1e:	623b      	str	r3, [r7, #32]
    pBuf++;
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	3301      	adds	r3, #1
 8007e24:	617b      	str	r3, [r7, #20]
    pBuf++;
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	3301      	adds	r3, #1
 8007e2a:	617b      	str	r3, [r7, #20]
    pBuf++;
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	3301      	adds	r3, #1
 8007e30:	617b      	str	r3, [r7, #20]
    pBuf++;
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	3301      	adds	r3, #1
 8007e36:	617b      	str	r3, [r7, #20]
  for (count = NbWords; count != 0U; count--)
 8007e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e3a:	3b01      	subs	r3, #1
 8007e3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d1e6      	bne.n	8007e12 <USB_ReadPMA+0x48>
  }

  /*When Number of data is not word aligned, read the remaining byte*/
  if (remaining_bytes != 0U)
 8007e44:	8b7b      	ldrh	r3, [r7, #26]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d017      	beq.n	8007e7a <USB_ReadPMA+0xb0>
  {
    RdVal = *(__IO uint32_t *)pdwVal;
 8007e4a:	6a3b      	ldr	r3, [r7, #32]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	613b      	str	r3, [r7, #16]

    do
    {
      *(uint8_t *)pBuf = (uint8_t)(RdVal >> (8U * (uint8_t)(count)));
 8007e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e52:	b2db      	uxtb	r3, r3
 8007e54:	00db      	lsls	r3, r3, #3
 8007e56:	693a      	ldr	r2, [r7, #16]
 8007e58:	fa22 f303 	lsr.w	r3, r2, r3
 8007e5c:	b2da      	uxtb	r2, r3
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	701a      	strb	r2, [r3, #0]
      count++;
 8007e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e64:	3301      	adds	r3, #1
 8007e66:	627b      	str	r3, [r7, #36]	@ 0x24
      pBuf++;
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	3301      	adds	r3, #1
 8007e6c:	617b      	str	r3, [r7, #20]
      remaining_bytes--;
 8007e6e:	8b7b      	ldrh	r3, [r7, #26]
 8007e70:	3b01      	subs	r3, #1
 8007e72:	837b      	strh	r3, [r7, #26]
    } while (remaining_bytes != 0U);
 8007e74:	8b7b      	ldrh	r3, [r7, #26]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d1ea      	bne.n	8007e50 <USB_ReadPMA+0x86>
  }
}
 8007e7a:	bf00      	nop
 8007e7c:	372c      	adds	r7, #44	@ 0x2c
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e84:	4770      	bx	lr
	...

08007e88 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	460b      	mov	r3, r1
 8007e92:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007e94:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007e98:	f002 f8b4 	bl	800a004 <USBD_static_malloc>
 8007e9c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d10a      	bne.n	8007eba <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007eaa:	687a      	ldr	r2, [r7, #4]
 8007eac:	33b0      	adds	r3, #176	@ 0xb0
 8007eae:	009b      	lsls	r3, r3, #2
 8007eb0:	4413      	add	r3, r2
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	605a      	str	r2, [r3, #4]
    return (uint8_t)USBD_EMEM;
 8007eb6:	2302      	movs	r3, #2
 8007eb8:	e0fd      	b.n	80080b6 <USBD_CDC_Init+0x22e>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007eba:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8007ebe:	2100      	movs	r1, #0
 8007ec0:	68f8      	ldr	r0, [r7, #12]
 8007ec2:	f003 ff08 	bl	800bcd6 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007ecc:	687a      	ldr	r2, [r7, #4]
 8007ece:	33b0      	adds	r3, #176	@ 0xb0
 8007ed0:	009b      	lsls	r3, r3, #2
 8007ed2:	4413      	add	r3, r2
 8007ed4:	68fa      	ldr	r2, [r7, #12]
 8007ed6:	605a      	str	r2, [r3, #4]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007ede:	687a      	ldr	r2, [r7, #4]
 8007ee0:	33b0      	adds	r3, #176	@ 0xb0
 8007ee2:	009b      	lsls	r3, r3, #2
 8007ee4:	4413      	add	r3, r2
 8007ee6:	685a      	ldr	r2, [r3, #4]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007ef4:	b2db      	uxtb	r3, r3
 8007ef6:	2202      	movs	r2, #2
 8007ef8:	2180      	movs	r1, #128	@ 0x80
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f002 fd2e 	bl	800a95c <USBD_CoreGetEPAdd>
 8007f00:	4603      	mov	r3, r0
 8007f02:	461a      	mov	r2, r3
 8007f04:	4b6e      	ldr	r3, [pc, #440]	@ (80080c0 <USBD_CDC_Init+0x238>)
 8007f06:	701a      	strb	r2, [r3, #0]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007f0e:	b2db      	uxtb	r3, r3
 8007f10:	2202      	movs	r2, #2
 8007f12:	2100      	movs	r1, #0
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f002 fd21 	bl	800a95c <USBD_CoreGetEPAdd>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	461a      	mov	r2, r3
 8007f1e:	4b69      	ldr	r3, [pc, #420]	@ (80080c4 <USBD_CDC_Init+0x23c>)
 8007f20:	701a      	strb	r2, [r3, #0]
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007f28:	b2db      	uxtb	r3, r3
 8007f2a:	2203      	movs	r2, #3
 8007f2c:	2180      	movs	r1, #128	@ 0x80
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f002 fd14 	bl	800a95c <USBD_CoreGetEPAdd>
 8007f34:	4603      	mov	r3, r0
 8007f36:	461a      	mov	r2, r3
 8007f38:	4b63      	ldr	r3, [pc, #396]	@ (80080c8 <USBD_CDC_Init+0x240>)
 8007f3a:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	7c1b      	ldrb	r3, [r3, #16]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d138      	bne.n	8007fb6 <USBD_CDC_Init+0x12e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007f44:	4b5e      	ldr	r3, [pc, #376]	@ (80080c0 <USBD_CDC_Init+0x238>)
 8007f46:	7819      	ldrb	r1, [r3, #0]
 8007f48:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007f4c:	2202      	movs	r2, #2
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f001 ff5f 	bl	8009e12 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007f54:	4b5a      	ldr	r3, [pc, #360]	@ (80080c0 <USBD_CDC_Init+0x238>)
 8007f56:	781b      	ldrb	r3, [r3, #0]
 8007f58:	f003 020f 	and.w	r2, r3, #15
 8007f5c:	6879      	ldr	r1, [r7, #4]
 8007f5e:	4613      	mov	r3, r2
 8007f60:	009b      	lsls	r3, r3, #2
 8007f62:	4413      	add	r3, r2
 8007f64:	009b      	lsls	r3, r3, #2
 8007f66:	440b      	add	r3, r1
 8007f68:	3324      	adds	r3, #36	@ 0x24
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007f6e:	4b55      	ldr	r3, [pc, #340]	@ (80080c4 <USBD_CDC_Init+0x23c>)
 8007f70:	7819      	ldrb	r1, [r3, #0]
 8007f72:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007f76:	2202      	movs	r2, #2
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f001 ff4a 	bl	8009e12 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007f7e:	4b51      	ldr	r3, [pc, #324]	@ (80080c4 <USBD_CDC_Init+0x23c>)
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	f003 020f 	and.w	r2, r3, #15
 8007f86:	6879      	ldr	r1, [r7, #4]
 8007f88:	4613      	mov	r3, r2
 8007f8a:	009b      	lsls	r3, r3, #2
 8007f8c:	4413      	add	r3, r2
 8007f8e:	009b      	lsls	r3, r3, #2
 8007f90:	440b      	add	r3, r1
 8007f92:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007f96:	2201      	movs	r2, #1
 8007f98:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007f9a:	4b4b      	ldr	r3, [pc, #300]	@ (80080c8 <USBD_CDC_Init+0x240>)
 8007f9c:	781b      	ldrb	r3, [r3, #0]
 8007f9e:	f003 020f 	and.w	r2, r3, #15
 8007fa2:	6879      	ldr	r1, [r7, #4]
 8007fa4:	4613      	mov	r3, r2
 8007fa6:	009b      	lsls	r3, r3, #2
 8007fa8:	4413      	add	r3, r2
 8007faa:	009b      	lsls	r3, r3, #2
 8007fac:	440b      	add	r3, r1
 8007fae:	3326      	adds	r3, #38	@ 0x26
 8007fb0:	2210      	movs	r2, #16
 8007fb2:	801a      	strh	r2, [r3, #0]
 8007fb4:	e035      	b.n	8008022 <USBD_CDC_Init+0x19a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007fb6:	4b42      	ldr	r3, [pc, #264]	@ (80080c0 <USBD_CDC_Init+0x238>)
 8007fb8:	7819      	ldrb	r1, [r3, #0]
 8007fba:	2340      	movs	r3, #64	@ 0x40
 8007fbc:	2202      	movs	r2, #2
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f001 ff27 	bl	8009e12 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007fc4:	4b3e      	ldr	r3, [pc, #248]	@ (80080c0 <USBD_CDC_Init+0x238>)
 8007fc6:	781b      	ldrb	r3, [r3, #0]
 8007fc8:	f003 020f 	and.w	r2, r3, #15
 8007fcc:	6879      	ldr	r1, [r7, #4]
 8007fce:	4613      	mov	r3, r2
 8007fd0:	009b      	lsls	r3, r3, #2
 8007fd2:	4413      	add	r3, r2
 8007fd4:	009b      	lsls	r3, r3, #2
 8007fd6:	440b      	add	r3, r1
 8007fd8:	3324      	adds	r3, #36	@ 0x24
 8007fda:	2201      	movs	r2, #1
 8007fdc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007fde:	4b39      	ldr	r3, [pc, #228]	@ (80080c4 <USBD_CDC_Init+0x23c>)
 8007fe0:	7819      	ldrb	r1, [r3, #0]
 8007fe2:	2340      	movs	r3, #64	@ 0x40
 8007fe4:	2202      	movs	r2, #2
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f001 ff13 	bl	8009e12 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007fec:	4b35      	ldr	r3, [pc, #212]	@ (80080c4 <USBD_CDC_Init+0x23c>)
 8007fee:	781b      	ldrb	r3, [r3, #0]
 8007ff0:	f003 020f 	and.w	r2, r3, #15
 8007ff4:	6879      	ldr	r1, [r7, #4]
 8007ff6:	4613      	mov	r3, r2
 8007ff8:	009b      	lsls	r3, r3, #2
 8007ffa:	4413      	add	r3, r2
 8007ffc:	009b      	lsls	r3, r3, #2
 8007ffe:	440b      	add	r3, r1
 8008000:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008004:	2201      	movs	r2, #1
 8008006:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008008:	4b2f      	ldr	r3, [pc, #188]	@ (80080c8 <USBD_CDC_Init+0x240>)
 800800a:	781b      	ldrb	r3, [r3, #0]
 800800c:	f003 020f 	and.w	r2, r3, #15
 8008010:	6879      	ldr	r1, [r7, #4]
 8008012:	4613      	mov	r3, r2
 8008014:	009b      	lsls	r3, r3, #2
 8008016:	4413      	add	r3, r2
 8008018:	009b      	lsls	r3, r3, #2
 800801a:	440b      	add	r3, r1
 800801c:	3326      	adds	r3, #38	@ 0x26
 800801e:	2210      	movs	r2, #16
 8008020:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008022:	4b29      	ldr	r3, [pc, #164]	@ (80080c8 <USBD_CDC_Init+0x240>)
 8008024:	7819      	ldrb	r1, [r3, #0]
 8008026:	2308      	movs	r3, #8
 8008028:	2203      	movs	r2, #3
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f001 fef1 	bl	8009e12 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008030:	4b25      	ldr	r3, [pc, #148]	@ (80080c8 <USBD_CDC_Init+0x240>)
 8008032:	781b      	ldrb	r3, [r3, #0]
 8008034:	f003 020f 	and.w	r2, r3, #15
 8008038:	6879      	ldr	r1, [r7, #4]
 800803a:	4613      	mov	r3, r2
 800803c:	009b      	lsls	r3, r3, #2
 800803e:	4413      	add	r3, r2
 8008040:	009b      	lsls	r3, r3, #2
 8008042:	440b      	add	r3, r1
 8008044:	3324      	adds	r3, #36	@ 0x24
 8008046:	2201      	movs	r2, #1
 8008048:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	2200      	movs	r2, #0
 800804e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008058:	687a      	ldr	r2, [r7, #4]
 800805a:	33b2      	adds	r3, #178	@ 0xb2
 800805c:	009b      	lsls	r3, r3, #2
 800805e:	4413      	add	r3, r2
 8008060:	685b      	ldr	r3, [r3, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	2200      	movs	r2, #0
 800806a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	2200      	movs	r2, #0
 8008072:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800807c:	2b00      	cmp	r3, #0
 800807e:	d101      	bne.n	8008084 <USBD_CDC_Init+0x1fc>
  {
    return (uint8_t)USBD_EMEM;
 8008080:	2302      	movs	r3, #2
 8008082:	e018      	b.n	80080b6 <USBD_CDC_Init+0x22e>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	7c1b      	ldrb	r3, [r3, #16]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d10a      	bne.n	80080a2 <USBD_CDC_Init+0x21a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800808c:	4b0d      	ldr	r3, [pc, #52]	@ (80080c4 <USBD_CDC_Init+0x23c>)
 800808e:	7819      	ldrb	r1, [r3, #0]
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008096:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f001 ff84 	bl	8009fa8 <USBD_LL_PrepareReceive>
 80080a0:	e008      	b.n	80080b4 <USBD_CDC_Init+0x22c>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80080a2:	4b08      	ldr	r3, [pc, #32]	@ (80080c4 <USBD_CDC_Init+0x23c>)
 80080a4:	7819      	ldrb	r1, [r3, #0]
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80080ac:	2340      	movs	r3, #64	@ 0x40
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f001 ff7a 	bl	8009fa8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80080b4:	2300      	movs	r3, #0
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3710      	adds	r7, #16
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}
 80080be:	bf00      	nop
 80080c0:	2000004c 	.word	0x2000004c
 80080c4:	2000004d 	.word	0x2000004d
 80080c8:	2000004e 	.word	0x2000004e

080080cc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b082      	sub	sp, #8
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
 80080d4:	460b      	mov	r3, r1
 80080d6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);


#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this CDC class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80080de:	b2db      	uxtb	r3, r3
 80080e0:	2202      	movs	r2, #2
 80080e2:	2180      	movs	r1, #128	@ 0x80
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f002 fc39 	bl	800a95c <USBD_CoreGetEPAdd>
 80080ea:	4603      	mov	r3, r0
 80080ec:	461a      	mov	r2, r3
 80080ee:	4b4a      	ldr	r3, [pc, #296]	@ (8008218 <USBD_CDC_DeInit+0x14c>)
 80080f0:	701a      	strb	r2, [r3, #0]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80080f8:	b2db      	uxtb	r3, r3
 80080fa:	2202      	movs	r2, #2
 80080fc:	2100      	movs	r1, #0
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f002 fc2c 	bl	800a95c <USBD_CoreGetEPAdd>
 8008104:	4603      	mov	r3, r0
 8008106:	461a      	mov	r2, r3
 8008108:	4b44      	ldr	r3, [pc, #272]	@ (800821c <USBD_CDC_DeInit+0x150>)
 800810a:	701a      	strb	r2, [r3, #0]
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008112:	b2db      	uxtb	r3, r3
 8008114:	2203      	movs	r2, #3
 8008116:	2180      	movs	r1, #128	@ 0x80
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f002 fc1f 	bl	800a95c <USBD_CoreGetEPAdd>
 800811e:	4603      	mov	r3, r0
 8008120:	461a      	mov	r2, r3
 8008122:	4b3f      	ldr	r3, [pc, #252]	@ (8008220 <USBD_CDC_DeInit+0x154>)
 8008124:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008126:	4b3c      	ldr	r3, [pc, #240]	@ (8008218 <USBD_CDC_DeInit+0x14c>)
 8008128:	781b      	ldrb	r3, [r3, #0]
 800812a:	4619      	mov	r1, r3
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f001 fe90 	bl	8009e52 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008132:	4b39      	ldr	r3, [pc, #228]	@ (8008218 <USBD_CDC_DeInit+0x14c>)
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	f003 020f 	and.w	r2, r3, #15
 800813a:	6879      	ldr	r1, [r7, #4]
 800813c:	4613      	mov	r3, r2
 800813e:	009b      	lsls	r3, r3, #2
 8008140:	4413      	add	r3, r2
 8008142:	009b      	lsls	r3, r3, #2
 8008144:	440b      	add	r3, r1
 8008146:	3324      	adds	r3, #36	@ 0x24
 8008148:	2200      	movs	r2, #0
 800814a:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800814c:	4b33      	ldr	r3, [pc, #204]	@ (800821c <USBD_CDC_DeInit+0x150>)
 800814e:	781b      	ldrb	r3, [r3, #0]
 8008150:	4619      	mov	r1, r3
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f001 fe7d 	bl	8009e52 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008158:	4b30      	ldr	r3, [pc, #192]	@ (800821c <USBD_CDC_DeInit+0x150>)
 800815a:	781b      	ldrb	r3, [r3, #0]
 800815c:	f003 020f 	and.w	r2, r3, #15
 8008160:	6879      	ldr	r1, [r7, #4]
 8008162:	4613      	mov	r3, r2
 8008164:	009b      	lsls	r3, r3, #2
 8008166:	4413      	add	r3, r2
 8008168:	009b      	lsls	r3, r3, #2
 800816a:	440b      	add	r3, r1
 800816c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008170:	2200      	movs	r2, #0
 8008172:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008174:	4b2a      	ldr	r3, [pc, #168]	@ (8008220 <USBD_CDC_DeInit+0x154>)
 8008176:	781b      	ldrb	r3, [r3, #0]
 8008178:	4619      	mov	r1, r3
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f001 fe69 	bl	8009e52 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008180:	4b27      	ldr	r3, [pc, #156]	@ (8008220 <USBD_CDC_DeInit+0x154>)
 8008182:	781b      	ldrb	r3, [r3, #0]
 8008184:	f003 020f 	and.w	r2, r3, #15
 8008188:	6879      	ldr	r1, [r7, #4]
 800818a:	4613      	mov	r3, r2
 800818c:	009b      	lsls	r3, r3, #2
 800818e:	4413      	add	r3, r2
 8008190:	009b      	lsls	r3, r3, #2
 8008192:	440b      	add	r3, r1
 8008194:	3324      	adds	r3, #36	@ 0x24
 8008196:	2200      	movs	r2, #0
 8008198:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800819a:	4b21      	ldr	r3, [pc, #132]	@ (8008220 <USBD_CDC_DeInit+0x154>)
 800819c:	781b      	ldrb	r3, [r3, #0]
 800819e:	f003 020f 	and.w	r2, r3, #15
 80081a2:	6879      	ldr	r1, [r7, #4]
 80081a4:	4613      	mov	r3, r2
 80081a6:	009b      	lsls	r3, r3, #2
 80081a8:	4413      	add	r3, r2
 80081aa:	009b      	lsls	r3, r3, #2
 80081ac:	440b      	add	r3, r1
 80081ae:	3326      	adds	r3, #38	@ 0x26
 80081b0:	2200      	movs	r2, #0
 80081b2:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80081ba:	687a      	ldr	r2, [r7, #4]
 80081bc:	33b0      	adds	r3, #176	@ 0xb0
 80081be:	009b      	lsls	r3, r3, #2
 80081c0:	4413      	add	r3, r2
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d021      	beq.n	800820c <USBD_CDC_DeInit+0x140>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80081ce:	687a      	ldr	r2, [r7, #4]
 80081d0:	33b2      	adds	r3, #178	@ 0xb2
 80081d2:	009b      	lsls	r3, r3, #2
 80081d4:	4413      	add	r3, r2
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	685b      	ldr	r3, [r3, #4]
 80081da:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80081e2:	687a      	ldr	r2, [r7, #4]
 80081e4:	33b0      	adds	r3, #176	@ 0xb0
 80081e6:	009b      	lsls	r3, r3, #2
 80081e8:	4413      	add	r3, r2
 80081ea:	685b      	ldr	r3, [r3, #4]
 80081ec:	4618      	mov	r0, r3
 80081ee:	f001 ff17 	bl	800a020 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80081f8:	687a      	ldr	r2, [r7, #4]
 80081fa:	33b0      	adds	r3, #176	@ 0xb0
 80081fc:	009b      	lsls	r3, r3, #2
 80081fe:	4413      	add	r3, r2
 8008200:	2200      	movs	r2, #0
 8008202:	605a      	str	r2, [r3, #4]
    pdev->pClassData = NULL;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2200      	movs	r2, #0
 8008208:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  }

  return (uint8_t)USBD_OK;
 800820c:	2300      	movs	r3, #0
}
 800820e:	4618      	mov	r0, r3
 8008210:	3708      	adds	r7, #8
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}
 8008216:	bf00      	nop
 8008218:	2000004c 	.word	0x2000004c
 800821c:	2000004d 	.word	0x2000004d
 8008220:	2000004e 	.word	0x2000004e

08008224 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b086      	sub	sp, #24
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008234:	687a      	ldr	r2, [r7, #4]
 8008236:	33b0      	adds	r3, #176	@ 0xb0
 8008238:	009b      	lsls	r3, r3, #2
 800823a:	4413      	add	r3, r2
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008240:	2300      	movs	r3, #0
 8008242:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008244:	2300      	movs	r3, #0
 8008246:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008248:	2300      	movs	r3, #0
 800824a:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d101      	bne.n	8008256 <USBD_CDC_Setup+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008252:	2303      	movs	r3, #3
 8008254:	e0c0      	b.n	80083d8 <USBD_CDC_Setup+0x1b4>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	781b      	ldrb	r3, [r3, #0]
 800825a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800825e:	2b00      	cmp	r3, #0
 8008260:	d050      	beq.n	8008304 <USBD_CDC_Setup+0xe0>
 8008262:	2b20      	cmp	r3, #32
 8008264:	f040 80b0 	bne.w	80083c8 <USBD_CDC_Setup+0x1a4>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	88db      	ldrh	r3, [r3, #6]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d03a      	beq.n	80082e6 <USBD_CDC_Setup+0xc2>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	781b      	ldrb	r3, [r3, #0]
 8008274:	b25b      	sxtb	r3, r3
 8008276:	2b00      	cmp	r3, #0
 8008278:	da1b      	bge.n	80082b2 <USBD_CDC_Setup+0x8e>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008280:	687a      	ldr	r2, [r7, #4]
 8008282:	33b2      	adds	r3, #178	@ 0xb2
 8008284:	009b      	lsls	r3, r3, #2
 8008286:	4413      	add	r3, r2
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	689b      	ldr	r3, [r3, #8]
 800828c:	683a      	ldr	r2, [r7, #0]
 800828e:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008290:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008292:	683a      	ldr	r2, [r7, #0]
 8008294:	88d2      	ldrh	r2, [r2, #6]
 8008296:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	88db      	ldrh	r3, [r3, #6]
 800829c:	2b07      	cmp	r3, #7
 800829e:	bf28      	it	cs
 80082a0:	2307      	movcs	r3, #7
 80082a2:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	89fa      	ldrh	r2, [r7, #14]
 80082a8:	4619      	mov	r1, r3
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f003 fb53 	bl	800b956 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80082b0:	e091      	b.n	80083d6 <USBD_CDC_Setup+0x1b2>
          hcdc->CmdOpCode = req->bRequest;
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	785a      	ldrb	r2, [r3, #1]
 80082b6:	693b      	ldr	r3, [r7, #16]
 80082b8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	88db      	ldrh	r3, [r3, #6]
 80082c0:	2b3f      	cmp	r3, #63	@ 0x3f
 80082c2:	d803      	bhi.n	80082cc <USBD_CDC_Setup+0xa8>
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	88db      	ldrh	r3, [r3, #6]
 80082c8:	b2da      	uxtb	r2, r3
 80082ca:	e000      	b.n	80082ce <USBD_CDC_Setup+0xaa>
 80082cc:	2240      	movs	r2, #64	@ 0x40
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80082d4:	6939      	ldr	r1, [r7, #16]
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80082dc:	461a      	mov	r2, r3
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f003 fb65 	bl	800b9ae <USBD_CtlPrepareRx>
      break;
 80082e4:	e077      	b.n	80083d6 <USBD_CDC_Setup+0x1b2>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80082ec:	687a      	ldr	r2, [r7, #4]
 80082ee:	33b2      	adds	r3, #178	@ 0xb2
 80082f0:	009b      	lsls	r3, r3, #2
 80082f2:	4413      	add	r3, r2
 80082f4:	685b      	ldr	r3, [r3, #4]
 80082f6:	689b      	ldr	r3, [r3, #8]
 80082f8:	683a      	ldr	r2, [r7, #0]
 80082fa:	7850      	ldrb	r0, [r2, #1]
 80082fc:	2200      	movs	r2, #0
 80082fe:	6839      	ldr	r1, [r7, #0]
 8008300:	4798      	blx	r3
      break;
 8008302:	e068      	b.n	80083d6 <USBD_CDC_Setup+0x1b2>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	785b      	ldrb	r3, [r3, #1]
 8008308:	2b0b      	cmp	r3, #11
 800830a:	d852      	bhi.n	80083b2 <USBD_CDC_Setup+0x18e>
 800830c:	a201      	add	r2, pc, #4	@ (adr r2, 8008314 <USBD_CDC_Setup+0xf0>)
 800830e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008312:	bf00      	nop
 8008314:	08008345 	.word	0x08008345
 8008318:	080083c1 	.word	0x080083c1
 800831c:	080083b3 	.word	0x080083b3
 8008320:	080083b3 	.word	0x080083b3
 8008324:	080083b3 	.word	0x080083b3
 8008328:	080083b3 	.word	0x080083b3
 800832c:	080083b3 	.word	0x080083b3
 8008330:	080083b3 	.word	0x080083b3
 8008334:	080083b3 	.word	0x080083b3
 8008338:	080083b3 	.word	0x080083b3
 800833c:	0800836f 	.word	0x0800836f
 8008340:	08008399 	.word	0x08008399
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800834a:	b2db      	uxtb	r3, r3
 800834c:	2b03      	cmp	r3, #3
 800834e:	d107      	bne.n	8008360 <USBD_CDC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008350:	f107 030a 	add.w	r3, r7, #10
 8008354:	2202      	movs	r2, #2
 8008356:	4619      	mov	r1, r3
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f003 fafc 	bl	800b956 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800835e:	e032      	b.n	80083c6 <USBD_CDC_Setup+0x1a2>
            USBD_CtlError(pdev, req);
 8008360:	6839      	ldr	r1, [r7, #0]
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f003 f979 	bl	800b65a <USBD_CtlError>
            ret = USBD_FAIL;
 8008368:	2303      	movs	r3, #3
 800836a:	75fb      	strb	r3, [r7, #23]
          break;
 800836c:	e02b      	b.n	80083c6 <USBD_CDC_Setup+0x1a2>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008374:	b2db      	uxtb	r3, r3
 8008376:	2b03      	cmp	r3, #3
 8008378:	d107      	bne.n	800838a <USBD_CDC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800837a:	f107 030d 	add.w	r3, r7, #13
 800837e:	2201      	movs	r2, #1
 8008380:	4619      	mov	r1, r3
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f003 fae7 	bl	800b956 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008388:	e01d      	b.n	80083c6 <USBD_CDC_Setup+0x1a2>
            USBD_CtlError(pdev, req);
 800838a:	6839      	ldr	r1, [r7, #0]
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f003 f964 	bl	800b65a <USBD_CtlError>
            ret = USBD_FAIL;
 8008392:	2303      	movs	r3, #3
 8008394:	75fb      	strb	r3, [r7, #23]
          break;
 8008396:	e016      	b.n	80083c6 <USBD_CDC_Setup+0x1a2>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800839e:	b2db      	uxtb	r3, r3
 80083a0:	2b03      	cmp	r3, #3
 80083a2:	d00f      	beq.n	80083c4 <USBD_CDC_Setup+0x1a0>
          {
            USBD_CtlError(pdev, req);
 80083a4:	6839      	ldr	r1, [r7, #0]
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f003 f957 	bl	800b65a <USBD_CtlError>
            ret = USBD_FAIL;
 80083ac:	2303      	movs	r3, #3
 80083ae:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80083b0:	e008      	b.n	80083c4 <USBD_CDC_Setup+0x1a0>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80083b2:	6839      	ldr	r1, [r7, #0]
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f003 f950 	bl	800b65a <USBD_CtlError>
          ret = USBD_FAIL;
 80083ba:	2303      	movs	r3, #3
 80083bc:	75fb      	strb	r3, [r7, #23]
          break;
 80083be:	e002      	b.n	80083c6 <USBD_CDC_Setup+0x1a2>
          break;
 80083c0:	bf00      	nop
 80083c2:	e008      	b.n	80083d6 <USBD_CDC_Setup+0x1b2>
          break;
 80083c4:	bf00      	nop
      }
      break;
 80083c6:	e006      	b.n	80083d6 <USBD_CDC_Setup+0x1b2>

    default:
      USBD_CtlError(pdev, req);
 80083c8:	6839      	ldr	r1, [r7, #0]
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f003 f945 	bl	800b65a <USBD_CtlError>
      ret = USBD_FAIL;
 80083d0:	2303      	movs	r3, #3
 80083d2:	75fb      	strb	r3, [r7, #23]
      break;
 80083d4:	bf00      	nop
  }

  return (uint8_t)ret;
 80083d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3718      	adds	r7, #24
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}

080083e0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b084      	sub	sp, #16
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
 80083e8:	460b      	mov	r3, r1
 80083ea:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80083f2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80083fa:	687a      	ldr	r2, [r7, #4]
 80083fc:	33b0      	adds	r3, #176	@ 0xb0
 80083fe:	009b      	lsls	r3, r3, #2
 8008400:	4413      	add	r3, r2
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d101      	bne.n	800840c <USBD_CDC_DataIn+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8008408:	2303      	movs	r3, #3
 800840a:	e066      	b.n	80084da <USBD_CDC_DataIn+0xfa>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008412:	687a      	ldr	r2, [r7, #4]
 8008414:	33b0      	adds	r3, #176	@ 0xb0
 8008416:	009b      	lsls	r3, r3, #2
 8008418:	4413      	add	r3, r2
 800841a:	685b      	ldr	r3, [r3, #4]
 800841c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800841e:	78fb      	ldrb	r3, [r7, #3]
 8008420:	f003 020f 	and.w	r2, r3, #15
 8008424:	6879      	ldr	r1, [r7, #4]
 8008426:	4613      	mov	r3, r2
 8008428:	009b      	lsls	r3, r3, #2
 800842a:	4413      	add	r3, r2
 800842c:	009b      	lsls	r3, r3, #2
 800842e:	440b      	add	r3, r1
 8008430:	3318      	adds	r3, #24
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d02f      	beq.n	8008498 <USBD_CDC_DataIn+0xb8>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008438:	78fb      	ldrb	r3, [r7, #3]
 800843a:	f003 020f 	and.w	r2, r3, #15
 800843e:	6879      	ldr	r1, [r7, #4]
 8008440:	4613      	mov	r3, r2
 8008442:	009b      	lsls	r3, r3, #2
 8008444:	4413      	add	r3, r2
 8008446:	009b      	lsls	r3, r3, #2
 8008448:	440b      	add	r3, r1
 800844a:	3318      	adds	r3, #24
 800844c:	681a      	ldr	r2, [r3, #0]
 800844e:	78fb      	ldrb	r3, [r7, #3]
 8008450:	f003 010f 	and.w	r1, r3, #15
 8008454:	68f8      	ldr	r0, [r7, #12]
 8008456:	460b      	mov	r3, r1
 8008458:	009b      	lsls	r3, r3, #2
 800845a:	440b      	add	r3, r1
 800845c:	00db      	lsls	r3, r3, #3
 800845e:	4403      	add	r3, r0
 8008460:	3324      	adds	r3, #36	@ 0x24
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	fbb2 f1f3 	udiv	r1, r2, r3
 8008468:	fb01 f303 	mul.w	r3, r1, r3
 800846c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800846e:	2b00      	cmp	r3, #0
 8008470:	d112      	bne.n	8008498 <USBD_CDC_DataIn+0xb8>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008472:	78fb      	ldrb	r3, [r7, #3]
 8008474:	f003 020f 	and.w	r2, r3, #15
 8008478:	6879      	ldr	r1, [r7, #4]
 800847a:	4613      	mov	r3, r2
 800847c:	009b      	lsls	r3, r3, #2
 800847e:	4413      	add	r3, r2
 8008480:	009b      	lsls	r3, r3, #2
 8008482:	440b      	add	r3, r1
 8008484:	3318      	adds	r3, #24
 8008486:	2200      	movs	r2, #0
 8008488:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800848a:	78f9      	ldrb	r1, [r7, #3]
 800848c:	2300      	movs	r3, #0
 800848e:	2200      	movs	r2, #0
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f001 fd6e 	bl	8009f72 <USBD_LL_Transmit>
 8008496:	e01f      	b.n	80084d8 <USBD_CDC_DataIn+0xf8>
  }
  else
  {
    hcdc->TxState = 0U;
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	2200      	movs	r2, #0
 800849c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80084a6:	687a      	ldr	r2, [r7, #4]
 80084a8:	33b2      	adds	r3, #178	@ 0xb2
 80084aa:	009b      	lsls	r3, r3, #2
 80084ac:	4413      	add	r3, r2
 80084ae:	685b      	ldr	r3, [r3, #4]
 80084b0:	691b      	ldr	r3, [r3, #16]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d010      	beq.n	80084d8 <USBD_CDC_DataIn+0xf8>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80084bc:	687a      	ldr	r2, [r7, #4]
 80084be:	33b2      	adds	r3, #178	@ 0xb2
 80084c0:	009b      	lsls	r3, r3, #2
 80084c2:	4413      	add	r3, r2
 80084c4:	685b      	ldr	r3, [r3, #4]
 80084c6:	691b      	ldr	r3, [r3, #16]
 80084c8:	68ba      	ldr	r2, [r7, #8]
 80084ca:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80084ce:	68ba      	ldr	r2, [r7, #8]
 80084d0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80084d4:	78fa      	ldrb	r2, [r7, #3]
 80084d6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80084d8:	2300      	movs	r3, #0
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3710      	adds	r7, #16
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}

080084e2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80084e2:	b580      	push	{r7, lr}
 80084e4:	b084      	sub	sp, #16
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	6078      	str	r0, [r7, #4]
 80084ea:	460b      	mov	r3, r1
 80084ec:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80084f4:	687a      	ldr	r2, [r7, #4]
 80084f6:	33b0      	adds	r3, #176	@ 0xb0
 80084f8:	009b      	lsls	r3, r3, #2
 80084fa:	4413      	add	r3, r2
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008506:	687a      	ldr	r2, [r7, #4]
 8008508:	33b0      	adds	r3, #176	@ 0xb0
 800850a:	009b      	lsls	r3, r3, #2
 800850c:	4413      	add	r3, r2
 800850e:	685b      	ldr	r3, [r3, #4]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d101      	bne.n	8008518 <USBD_CDC_DataOut+0x36>
  {
    return (uint8_t)USBD_FAIL;
 8008514:	2303      	movs	r3, #3
 8008516:	e01a      	b.n	800854e <USBD_CDC_DataOut+0x6c>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008518:	78fb      	ldrb	r3, [r7, #3]
 800851a:	4619      	mov	r1, r3
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f001 fd5e 	bl	8009fde <USBD_LL_GetRxDataSize>
 8008522:	4602      	mov	r2, r0
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008530:	687a      	ldr	r2, [r7, #4]
 8008532:	33b2      	adds	r3, #178	@ 0xb2
 8008534:	009b      	lsls	r3, r3, #2
 8008536:	4413      	add	r3, r2
 8008538:	685b      	ldr	r3, [r3, #4]
 800853a:	68db      	ldr	r3, [r3, #12]
 800853c:	68fa      	ldr	r2, [r7, #12]
 800853e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008542:	68fa      	ldr	r2, [r7, #12]
 8008544:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008548:	4611      	mov	r1, r2
 800854a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800854c:	2300      	movs	r3, #0
}
 800854e:	4618      	mov	r0, r3
 8008550:	3710      	adds	r7, #16
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}

08008556 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008556:	b580      	push	{r7, lr}
 8008558:	b084      	sub	sp, #16
 800855a:	af00      	add	r7, sp, #0
 800855c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008564:	687a      	ldr	r2, [r7, #4]
 8008566:	33b0      	adds	r3, #176	@ 0xb0
 8008568:	009b      	lsls	r3, r3, #2
 800856a:	4413      	add	r3, r2
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d101      	bne.n	800857a <USBD_CDC_EP0_RxReady+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008576:	2303      	movs	r3, #3
 8008578:	e024      	b.n	80085c4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008580:	687a      	ldr	r2, [r7, #4]
 8008582:	33b2      	adds	r3, #178	@ 0xb2
 8008584:	009b      	lsls	r3, r3, #2
 8008586:	4413      	add	r3, r2
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d019      	beq.n	80085c2 <USBD_CDC_EP0_RxReady+0x6c>
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008594:	2bff      	cmp	r3, #255	@ 0xff
 8008596:	d014      	beq.n	80085c2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800859e:	687a      	ldr	r2, [r7, #4]
 80085a0:	33b2      	adds	r3, #178	@ 0xb2
 80085a2:	009b      	lsls	r3, r3, #2
 80085a4:	4413      	add	r3, r2
 80085a6:	685b      	ldr	r3, [r3, #4]
 80085a8:	689b      	ldr	r3, [r3, #8]
 80085aa:	68fa      	ldr	r2, [r7, #12]
 80085ac:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80085b0:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80085b2:	68fa      	ldr	r2, [r7, #12]
 80085b4:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80085b8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	22ff      	movs	r2, #255	@ 0xff
 80085be:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80085c2:	2300      	movs	r3, #0
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3710      	adds	r7, #16
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}

080085cc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80085cc:	b480      	push	{r7}
 80085ce:	b083      	sub	sp, #12
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d101      	bne.n	80085e0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80085dc:	2303      	movs	r3, #3
 80085de:	e009      	b.n	80085f4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80085e6:	687a      	ldr	r2, [r7, #4]
 80085e8:	33b2      	adds	r3, #178	@ 0xb2
 80085ea:	009b      	lsls	r3, r3, #2
 80085ec:	4413      	add	r3, r2
 80085ee:	683a      	ldr	r2, [r7, #0]
 80085f0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80085f2:	2300      	movs	r3, #0
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	370c      	adds	r7, #12
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr

08008600 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
#ifdef USE_USBD_COMPOSITE
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length, uint8_t ClassId)
{
 8008600:	b480      	push	{r7}
 8008602:	b087      	sub	sp, #28
 8008604:	af00      	add	r7, sp, #0
 8008606:	60f8      	str	r0, [r7, #12]
 8008608:	60b9      	str	r1, [r7, #8]
 800860a:	607a      	str	r2, [r7, #4]
 800860c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
 800860e:	78fb      	ldrb	r3, [r7, #3]
 8008610:	68fa      	ldr	r2, [r7, #12]
 8008612:	33b0      	adds	r3, #176	@ 0xb0
 8008614:	009b      	lsls	r3, r3, #2
 8008616:	4413      	add	r3, r2
 8008618:	685b      	ldr	r3, [r3, #4]
 800861a:	617b      	str	r3, [r7, #20]
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d101      	bne.n	8008626 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008622:	2303      	movs	r3, #3
 8008624:	e008      	b.n	8008638 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	68ba      	ldr	r2, [r7, #8]
 800862a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	687a      	ldr	r2, [r7, #4]
 8008632:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8008636:	2300      	movs	r3, #0
}
 8008638:	4618      	mov	r0, r3
 800863a:	371c      	adds	r7, #28
 800863c:	46bd      	mov	sp, r7
 800863e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008642:	4770      	bx	lr

08008644 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008644:	b480      	push	{r7}
 8008646:	b085      	sub	sp, #20
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
 800864c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008654:	687a      	ldr	r2, [r7, #4]
 8008656:	33b0      	adds	r3, #176	@ 0xb0
 8008658:	009b      	lsls	r3, r3, #2
 800865a:	4413      	add	r3, r2
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d101      	bne.n	800866a <USBD_CDC_SetRxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008666:	2303      	movs	r3, #3
 8008668:	e004      	b.n	8008674 <USBD_CDC_SetRxBuffer+0x30>
  }

  hcdc->RxBuffer = pbuff;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	683a      	ldr	r2, [r7, #0]
 800866e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008672:	2300      	movs	r3, #0
}
 8008674:	4618      	mov	r0, r3
 8008676:	3714      	adds	r7, #20
 8008678:	46bd      	mov	sp, r7
 800867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867e:	4770      	bx	lr

08008680 <USBD_CDC_TransmitPacket>:
  * @param  ClassId: The Class ID
  * @retval status
  */
#ifdef USE_USBD_COMPOSITE
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b084      	sub	sp, #16
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	460b      	mov	r3, r1
 800868a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
 800868c:	78fb      	ldrb	r3, [r7, #3]
 800868e:	687a      	ldr	r2, [r7, #4]
 8008690:	33b0      	adds	r3, #176	@ 0xb0
 8008692:	009b      	lsls	r3, r3, #2
 8008694:	4413      	add	r3, r2
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	60bb      	str	r3, [r7, #8]
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800869a:	2301      	movs	r3, #1
 800869c:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
 800869e:	78fb      	ldrb	r3, [r7, #3]
 80086a0:	2202      	movs	r2, #2
 80086a2:	2180      	movs	r1, #128	@ 0x80
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f002 f959 	bl	800a95c <USBD_CoreGetEPAdd>
 80086aa:	4603      	mov	r3, r0
 80086ac:	461a      	mov	r2, r3
 80086ae:	4b18      	ldr	r3, [pc, #96]	@ (8008710 <USBD_CDC_TransmitPacket+0x90>)
 80086b0:	701a      	strb	r2, [r3, #0]
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d101      	bne.n	80086bc <USBD_CDC_TransmitPacket+0x3c>
  {
    return (uint8_t)USBD_FAIL;
 80086b8:	2303      	movs	r3, #3
 80086ba:	e025      	b.n	8008708 <USBD_CDC_TransmitPacket+0x88>
  }

  if (hcdc->TxState == 0U)
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d11f      	bne.n	8008706 <USBD_CDC_TransmitPacket+0x86>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	2201      	movs	r2, #1
 80086ca:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80086ce:	4b10      	ldr	r3, [pc, #64]	@ (8008710 <USBD_CDC_TransmitPacket+0x90>)
 80086d0:	781b      	ldrb	r3, [r3, #0]
 80086d2:	f003 020f 	and.w	r2, r3, #15
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	4613      	mov	r3, r2
 80086e0:	009b      	lsls	r3, r3, #2
 80086e2:	4413      	add	r3, r2
 80086e4:	009b      	lsls	r3, r3, #2
 80086e6:	4403      	add	r3, r0
 80086e8:	3318      	adds	r3, #24
 80086ea:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80086ec:	4b08      	ldr	r3, [pc, #32]	@ (8008710 <USBD_CDC_TransmitPacket+0x90>)
 80086ee:	7819      	ldrb	r1, [r3, #0]
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f001 fc38 	bl	8009f72 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008702:	2300      	movs	r3, #0
 8008704:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008706:	7bfb      	ldrb	r3, [r7, #15]
}
 8008708:	4618      	mov	r0, r3
 800870a:	3710      	adds	r7, #16
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}
 8008710:	2000004c 	.word	0x2000004c

08008714 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b084      	sub	sp, #16
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008722:	687a      	ldr	r2, [r7, #4]
 8008724:	33b0      	adds	r3, #176	@ 0xb0
 8008726:	009b      	lsls	r3, r3, #2
 8008728:	4413      	add	r3, r2
 800872a:	685b      	ldr	r3, [r3, #4]
 800872c:	60fb      	str	r3, [r7, #12]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008734:	b2db      	uxtb	r3, r3
 8008736:	2202      	movs	r2, #2
 8008738:	2100      	movs	r1, #0
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f002 f90e 	bl	800a95c <USBD_CoreGetEPAdd>
 8008740:	4603      	mov	r3, r0
 8008742:	461a      	mov	r2, r3
 8008744:	4b15      	ldr	r3, [pc, #84]	@ (800879c <USBD_CDC_ReceivePacket+0x88>)
 8008746:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800874e:	687a      	ldr	r2, [r7, #4]
 8008750:	33b0      	adds	r3, #176	@ 0xb0
 8008752:	009b      	lsls	r3, r3, #2
 8008754:	4413      	add	r3, r2
 8008756:	685b      	ldr	r3, [r3, #4]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d101      	bne.n	8008760 <USBD_CDC_ReceivePacket+0x4c>
  {
    return (uint8_t)USBD_FAIL;
 800875c:	2303      	movs	r3, #3
 800875e:	e018      	b.n	8008792 <USBD_CDC_ReceivePacket+0x7e>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	7c1b      	ldrb	r3, [r3, #16]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d10a      	bne.n	800877e <USBD_CDC_ReceivePacket+0x6a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008768:	4b0c      	ldr	r3, [pc, #48]	@ (800879c <USBD_CDC_ReceivePacket+0x88>)
 800876a:	7819      	ldrb	r1, [r3, #0]
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008772:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f001 fc16 	bl	8009fa8 <USBD_LL_PrepareReceive>
 800877c:	e008      	b.n	8008790 <USBD_CDC_ReceivePacket+0x7c>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800877e:	4b07      	ldr	r3, [pc, #28]	@ (800879c <USBD_CDC_ReceivePacket+0x88>)
 8008780:	7819      	ldrb	r1, [r3, #0]
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008788:	2340      	movs	r3, #64	@ 0x40
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f001 fc0c 	bl	8009fa8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008790:	2300      	movs	r3, #0
}
 8008792:	4618      	mov	r0, r3
 8008794:	3710      	adds	r7, #16
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}
 800879a:	bf00      	nop
 800879c:	2000004d 	.word	0x2000004d

080087a0 <TEMPLATE_Init>:
  *         Initializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Init(void)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	af00      	add	r7, sp, #0
	hUsbDeviceFS.classId = CDC_InstID;
 80087a4:	4b0a      	ldr	r3, [pc, #40]	@ (80087d0 <TEMPLATE_Init+0x30>)
 80087a6:	781b      	ldrb	r3, [r3, #0]
 80087a8:	461a      	mov	r2, r3
 80087aa:	4b0a      	ldr	r3, [pc, #40]	@ (80087d4 <TEMPLATE_Init+0x34>)
 80087ac:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, buffer, sizeof(buffer), CDC_InstID);
 80087b0:	4b07      	ldr	r3, [pc, #28]	@ (80087d0 <TEMPLATE_Init+0x30>)
 80087b2:	781b      	ldrb	r3, [r3, #0]
 80087b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80087b8:	4907      	ldr	r1, [pc, #28]	@ (80087d8 <TEMPLATE_Init+0x38>)
 80087ba:	4806      	ldr	r0, [pc, #24]	@ (80087d4 <TEMPLATE_Init+0x34>)
 80087bc:	f7ff ff20 	bl	8008600 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBuffer);
 80087c0:	4906      	ldr	r1, [pc, #24]	@ (80087dc <TEMPLATE_Init+0x3c>)
 80087c2:	4804      	ldr	r0, [pc, #16]	@ (80087d4 <TEMPLATE_Init+0x34>)
 80087c4:	f7ff ff3e 	bl	8008644 <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 80087c8:	2300      	movs	r3, #0
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	bd80      	pop	{r7, pc}
 80087ce:	bf00      	nop
 80087d0:	20000875 	.word	0x20000875
 80087d4:	20000534 	.word	0x20000534
 80087d8:	200008d0 	.word	0x200008d0
 80087dc:	200009dc 	.word	0x200009dc

080087e0 <TEMPLATE_DeInit>:
  *         DeInitializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_DeInit(void)
{
 80087e0:	b480      	push	{r7}
 80087e2:	af00      	add	r7, sp, #0
  /*
     Add your deinitialization code here
  */
  return (0);
 80087e4:	2300      	movs	r3, #0
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	46bd      	mov	sp, r7
 80087ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ee:	4770      	bx	lr

080087f0 <TEMPLATE_Control>:
  * @param  Buf: Buffer containing command data (request parameters)
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Control(uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b083      	sub	sp, #12
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	4603      	mov	r3, r0
 80087f8:	6039      	str	r1, [r7, #0]
 80087fa:	71fb      	strb	r3, [r7, #7]
 80087fc:	4613      	mov	r3, r2
 80087fe:	80bb      	strh	r3, [r7, #4]
  UNUSED(length);

  switch (cmd)
 8008800:	79fb      	ldrb	r3, [r7, #7]
 8008802:	2b23      	cmp	r3, #35	@ 0x23
 8008804:	f200 8098 	bhi.w	8008938 <TEMPLATE_Control+0x148>
 8008808:	a201      	add	r2, pc, #4	@ (adr r2, 8008810 <TEMPLATE_Control+0x20>)
 800880a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800880e:	bf00      	nop
 8008810:	08008939 	.word	0x08008939
 8008814:	08008939 	.word	0x08008939
 8008818:	08008939 	.word	0x08008939
 800881c:	08008939 	.word	0x08008939
 8008820:	08008939 	.word	0x08008939
 8008824:	08008939 	.word	0x08008939
 8008828:	08008939 	.word	0x08008939
 800882c:	08008939 	.word	0x08008939
 8008830:	08008939 	.word	0x08008939
 8008834:	08008939 	.word	0x08008939
 8008838:	08008939 	.word	0x08008939
 800883c:	08008939 	.word	0x08008939
 8008840:	08008939 	.word	0x08008939
 8008844:	08008939 	.word	0x08008939
 8008848:	08008939 	.word	0x08008939
 800884c:	08008939 	.word	0x08008939
 8008850:	08008939 	.word	0x08008939
 8008854:	08008939 	.word	0x08008939
 8008858:	08008939 	.word	0x08008939
 800885c:	08008939 	.word	0x08008939
 8008860:	08008939 	.word	0x08008939
 8008864:	08008939 	.word	0x08008939
 8008868:	08008939 	.word	0x08008939
 800886c:	08008939 	.word	0x08008939
 8008870:	08008939 	.word	0x08008939
 8008874:	08008939 	.word	0x08008939
 8008878:	08008939 	.word	0x08008939
 800887c:	08008939 	.word	0x08008939
 8008880:	08008939 	.word	0x08008939
 8008884:	08008939 	.word	0x08008939
 8008888:	08008939 	.word	0x08008939
 800888c:	08008939 	.word	0x08008939
 8008890:	080088a1 	.word	0x080088a1
 8008894:	080088e5 	.word	0x080088e5
 8008898:	08008939 	.word	0x08008939
 800889c:	08008939 	.word	0x08008939
    case CDC_CLEAR_COMM_FEATURE:
      /* Add your code here */
      break;

    case CDC_SET_LINE_CODING:
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	781b      	ldrb	r3, [r3, #0]
 80088a4:	461a      	mov	r2, r3
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	3301      	adds	r3, #1
 80088aa:	781b      	ldrb	r3, [r3, #0]
 80088ac:	021b      	lsls	r3, r3, #8
 80088ae:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	3302      	adds	r3, #2
 80088b4:	781b      	ldrb	r3, [r3, #0]
 80088b6:	041b      	lsls	r3, r3, #16
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 80088b8:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	3303      	adds	r3, #3
 80088be:	781b      	ldrb	r3, [r3, #0]
 80088c0:	061b      	lsls	r3, r3, #24
 80088c2:	4313      	orrs	r3, r2
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 80088c4:	461a      	mov	r2, r3
 80088c6:	4b20      	ldr	r3, [pc, #128]	@ (8008948 <TEMPLATE_Control+0x158>)
 80088c8:	601a      	str	r2, [r3, #0]
      linecoding.format     = pbuf[4];
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	791a      	ldrb	r2, [r3, #4]
 80088ce:	4b1e      	ldr	r3, [pc, #120]	@ (8008948 <TEMPLATE_Control+0x158>)
 80088d0:	711a      	strb	r2, [r3, #4]
      linecoding.paritytype = pbuf[5];
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	795a      	ldrb	r2, [r3, #5]
 80088d6:	4b1c      	ldr	r3, [pc, #112]	@ (8008948 <TEMPLATE_Control+0x158>)
 80088d8:	715a      	strb	r2, [r3, #5]
      linecoding.datatype   = pbuf[6];
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	799a      	ldrb	r2, [r3, #6]
 80088de:	4b1a      	ldr	r3, [pc, #104]	@ (8008948 <TEMPLATE_Control+0x158>)
 80088e0:	719a      	strb	r2, [r3, #6]

      /* Add your code here */
      break;
 80088e2:	e02a      	b.n	800893a <TEMPLATE_Control+0x14a>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(linecoding.bitrate);
 80088e4:	4b18      	ldr	r3, [pc, #96]	@ (8008948 <TEMPLATE_Control+0x158>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	b2da      	uxtb	r2, r3
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(linecoding.bitrate >> 8);
 80088ee:	4b16      	ldr	r3, [pc, #88]	@ (8008948 <TEMPLATE_Control+0x158>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	0a1a      	lsrs	r2, r3, #8
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	3301      	adds	r3, #1
 80088f8:	b2d2      	uxtb	r2, r2
 80088fa:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(linecoding.bitrate >> 16);
 80088fc:	4b12      	ldr	r3, [pc, #72]	@ (8008948 <TEMPLATE_Control+0x158>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	0c1a      	lsrs	r2, r3, #16
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	3302      	adds	r3, #2
 8008906:	b2d2      	uxtb	r2, r2
 8008908:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(linecoding.bitrate >> 24);
 800890a:	4b0f      	ldr	r3, [pc, #60]	@ (8008948 <TEMPLATE_Control+0x158>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	0e1a      	lsrs	r2, r3, #24
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	3303      	adds	r3, #3
 8008914:	b2d2      	uxtb	r2, r2
 8008916:	701a      	strb	r2, [r3, #0]
      pbuf[4] = linecoding.format;
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	3304      	adds	r3, #4
 800891c:	4a0a      	ldr	r2, [pc, #40]	@ (8008948 <TEMPLATE_Control+0x158>)
 800891e:	7912      	ldrb	r2, [r2, #4]
 8008920:	701a      	strb	r2, [r3, #0]
      pbuf[5] = linecoding.paritytype;
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	3305      	adds	r3, #5
 8008926:	4a08      	ldr	r2, [pc, #32]	@ (8008948 <TEMPLATE_Control+0x158>)
 8008928:	7952      	ldrb	r2, [r2, #5]
 800892a:	701a      	strb	r2, [r3, #0]
      pbuf[6] = linecoding.datatype;
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	3306      	adds	r3, #6
 8008930:	4a05      	ldr	r2, [pc, #20]	@ (8008948 <TEMPLATE_Control+0x158>)
 8008932:	7992      	ldrb	r2, [r2, #6]
 8008934:	701a      	strb	r2, [r3, #0]

      /* Add your code here */
      break;
 8008936:	e000      	b.n	800893a <TEMPLATE_Control+0x14a>
    case CDC_SEND_BREAK:
      /* Add your code here */
      break;

    default:
      break;
 8008938:	bf00      	nop
  }

  return (0);
 800893a:	2300      	movs	r3, #0
}
 800893c:	4618      	mov	r0, r3
 800893e:	370c      	adds	r7, #12
 8008940:	46bd      	mov	sp, r7
 8008942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008946:	4770      	bx	lr
 8008948:	20000064 	.word	0x20000064

0800894c <TEMPLATE_Receive>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Receive(uint8_t *Buf, uint32_t *Len)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b082      	sub	sp, #8
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	6039      	str	r1, [r7, #0]
	/* Add your RX code here */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008956:	6879      	ldr	r1, [r7, #4]
 8008958:	4805      	ldr	r0, [pc, #20]	@ (8008970 <TEMPLATE_Receive+0x24>)
 800895a:	f7ff fe73 	bl	8008644 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800895e:	4804      	ldr	r0, [pc, #16]	@ (8008970 <TEMPLATE_Receive+0x24>)
 8008960:	f7ff fed8 	bl	8008714 <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 8008964:	2300      	movs	r3, #0
}
 8008966:	4618      	mov	r0, r3
 8008968:	3708      	adds	r7, #8
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}
 800896e:	bf00      	nop
 8008970:	20000534 	.word	0x20000534

08008974 <TEMPLATE_TransmitCplt>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_TransmitCplt(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008974:	b480      	push	{r7}
 8008976:	b085      	sub	sp, #20
 8008978:	af00      	add	r7, sp, #0
 800897a:	60f8      	str	r0, [r7, #12]
 800897c:	60b9      	str	r1, [r7, #8]
 800897e:	4613      	mov	r3, r2
 8008980:	71fb      	strb	r3, [r7, #7]
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);

  return (0);
 8008982:	2300      	movs	r3, #0
}
 8008984:	4618      	mov	r0, r3
 8008986:	3714      	adds	r7, #20
 8008988:	46bd      	mov	sp, r7
 800898a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898e:	4770      	bx	lr

08008990 <USBD_CMPSIT_AddClass>:
  */
uint8_t  USBD_CMPSIT_AddClass(USBD_HandleTypeDef *pdev,
                              USBD_ClassTypeDef *pclass,
                              USBD_CompositeClassTypeDef class,
                              uint8_t cfgidx)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b084      	sub	sp, #16
 8008994:	af00      	add	r7, sp, #0
 8008996:	60f8      	str	r0, [r7, #12]
 8008998:	60b9      	str	r1, [r7, #8]
 800899a:	4611      	mov	r1, r2
 800899c:	461a      	mov	r2, r3
 800899e:	460b      	mov	r3, r1
 80089a0:	71fb      	strb	r3, [r7, #7]
 80089a2:	4613      	mov	r3, r2
 80089a4:	71bb      	strb	r3, [r7, #6]
  if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) && (pdev->tclasslist[pdev->classId].Active == 0U))
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80089ac:	2b01      	cmp	r3, #1
 80089ae:	d842      	bhi.n	8008a36 <USBD_CMPSIT_AddClass+0xa6>
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80089b6:	68fa      	ldr	r2, [r7, #12]
 80089b8:	212c      	movs	r1, #44	@ 0x2c
 80089ba:	fb01 f303 	mul.w	r3, r1, r3
 80089be:	4413      	add	r3, r2
 80089c0:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d135      	bne.n	8008a36 <USBD_CMPSIT_AddClass+0xa6>
  {
    /* Store the class parameters in the global tab */
    pdev->pClass[pdev->classId] = pclass;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	32ae      	adds	r2, #174	@ 0xae
 80089d4:	68b9      	ldr	r1, [r7, #8]
 80089d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->tclasslist[pdev->classId].ClassId = pdev->classId;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80089e0:	68fa      	ldr	r2, [r7, #12]
 80089e2:	f8d2 22e0 	ldr.w	r2, [r2, #736]	@ 0x2e0
 80089e6:	68f9      	ldr	r1, [r7, #12]
 80089e8:	202c      	movs	r0, #44	@ 0x2c
 80089ea:	fb00 f303 	mul.w	r3, r0, r3
 80089ee:	440b      	add	r3, r1
 80089f0:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 80089f4:	601a      	str	r2, [r3, #0]
    pdev->tclasslist[pdev->classId].Active = 1U;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80089fc:	68fa      	ldr	r2, [r7, #12]
 80089fe:	212c      	movs	r1, #44	@ 0x2c
 8008a00:	fb01 f303 	mul.w	r3, r1, r3
 8008a04:	4413      	add	r3, r2
 8008a06:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	601a      	str	r2, [r3, #0]
    pdev->tclasslist[pdev->classId].ClassType = class;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008a14:	68fa      	ldr	r2, [r7, #12]
 8008a16:	212c      	movs	r1, #44	@ 0x2c
 8008a18:	fb01 f303 	mul.w	r3, r1, r3
 8008a1c:	4413      	add	r3, r2
 8008a1e:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 8008a22:	79fa      	ldrb	r2, [r7, #7]
 8008a24:	701a      	strb	r2, [r3, #0]

    /* Call configuration descriptor builder and endpoint configuration builder */
    if (USBD_CMPSIT_AddToConfDesc(pdev) != (uint8_t)USBD_OK)
 8008a26:	68f8      	ldr	r0, [r7, #12]
 8008a28:	f000 f80a 	bl	8008a40 <USBD_CMPSIT_AddToConfDesc>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d001      	beq.n	8008a36 <USBD_CMPSIT_AddClass+0xa6>
    {
      return (uint8_t)USBD_FAIL;
 8008a32:	2303      	movs	r3, #3
 8008a34:	e000      	b.n	8008a38 <USBD_CMPSIT_AddClass+0xa8>
    }
  }

  UNUSED(cfgidx);

  return (uint8_t)USBD_OK;
 8008a36:	2300      	movs	r3, #0
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3710      	adds	r7, #16
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}

08008a40 <USBD_CMPSIT_AddToConfDesc>:
  *         Add a new class to the configuration descriptor
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CMPSIT_AddToConfDesc(USBD_HandleTypeDef *pdev)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b084      	sub	sp, #16
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  uint8_t idxIf = 0U;
 8008a48:	2300      	movs	r3, #0
 8008a4a:	73fb      	strb	r3, [r7, #15]
  uint8_t iEp = 0U;
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	73bb      	strb	r3, [r7, #14]

  /* For the first class instance, start building the config descriptor common part */
  if (pdev->classId == 0U)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d105      	bne.n	8008a66 <USBD_CMPSIT_AddToConfDesc+0x26>
  {
    /* Add configuration and IAD descriptors */
    USBD_CMPSIT_AddConfDesc((uint32_t)pCmpstFSConfDesc, &CurrFSConfDescSz);
 8008a5a:	4b97      	ldr	r3, [pc, #604]	@ (8008cb8 <USBD_CMPSIT_AddToConfDesc+0x278>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	4997      	ldr	r1, [pc, #604]	@ (8008cbc <USBD_CMPSIT_AddToConfDesc+0x27c>)
 8008a60:	4618      	mov	r0, r3
 8008a62:	f000 f994 	bl	8008d8e <USBD_CMPSIT_AddConfDesc>
#ifdef USE_USB_HS
    USBD_CMPSIT_AddConfDesc((uint32_t)pCmpstHSConfDesc, &CurrHSConfDescSz);
#endif /* USE_USB_HS */
  }

  switch (pdev->tclasslist[pdev->classId].ClassType)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008a6c:	687a      	ldr	r2, [r7, #4]
 8008a6e:	212c      	movs	r1, #44	@ 0x2c
 8008a70:	fb01 f303 	mul.w	r3, r1, r3
 8008a74:	4413      	add	r3, r2
 8008a76:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 8008a7a:	781b      	ldrb	r3, [r3, #0]
 8008a7c:	2b02      	cmp	r3, #2
 8008a7e:	d003      	beq.n	8008a88 <USBD_CMPSIT_AddToConfDesc+0x48>
 8008a80:	2b05      	cmp	r3, #5
 8008a82:	f000 809b 	beq.w	8008bbc <USBD_CMPSIT_AddToConfDesc+0x17c>
    default:
      UNUSED(idxIf);
      UNUSED(iEp);
      UNUSED(USBD_CMPSIT_FindFreeIFNbr);
      UNUSED(USBD_CMPSIT_AssignEp);
      break;
 8008a86:	e111      	b.n	8008cac <USBD_CMPSIT_AddToConfDesc+0x26c>
      pdev->tclasslist[pdev->classId].CurrPcktSze = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008a8e:	687a      	ldr	r2, [r7, #4]
 8008a90:	212c      	movs	r1, #44	@ 0x2c
 8008a92:	fb01 f303 	mul.w	r3, r1, r3
 8008a96:	4413      	add	r3, r2
 8008a98:	f503 7344 	add.w	r3, r3, #784	@ 0x310
 8008a9c:	2240      	movs	r2, #64	@ 0x40
 8008a9e:	601a      	str	r2, [r3, #0]
      idxIf = USBD_CMPSIT_FindFreeIFNbr(pdev);
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f000 f945 	bl	8008d30 <USBD_CMPSIT_FindFreeIFNbr>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	73fb      	strb	r3, [r7, #15]
      pdev->tclasslist[pdev->classId].NumIf = 2U;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008ab0:	687a      	ldr	r2, [r7, #4]
 8008ab2:	212c      	movs	r1, #44	@ 0x2c
 8008ab4:	fb01 f303 	mul.w	r3, r1, r3
 8008ab8:	4413      	add	r3, r2
 8008aba:	f503 7342 	add.w	r3, r3, #776	@ 0x308
 8008abe:	2202      	movs	r2, #2
 8008ac0:	601a      	str	r2, [r3, #0]
      pdev->tclasslist[pdev->classId].Ifs[0] = idxIf;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008ac8:	687a      	ldr	r2, [r7, #4]
 8008aca:	212c      	movs	r1, #44	@ 0x2c
 8008acc:	fb01 f303 	mul.w	r3, r1, r3
 8008ad0:	4413      	add	r3, r2
 8008ad2:	f503 7343 	add.w	r3, r3, #780	@ 0x30c
 8008ad6:	7bfa      	ldrb	r2, [r7, #15]
 8008ad8:	701a      	strb	r2, [r3, #0]
      pdev->tclasslist[pdev->classId].Ifs[1] = (uint8_t)(idxIf + 1U);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008ae0:	7bfa      	ldrb	r2, [r7, #15]
 8008ae2:	3201      	adds	r2, #1
 8008ae4:	b2d0      	uxtb	r0, r2
 8008ae6:	687a      	ldr	r2, [r7, #4]
 8008ae8:	212c      	movs	r1, #44	@ 0x2c
 8008aea:	fb01 f303 	mul.w	r3, r1, r3
 8008aee:	4413      	add	r3, r2
 8008af0:	f203 330d 	addw	r3, r3, #781	@ 0x30d
 8008af4:	4602      	mov	r2, r0
 8008af6:	701a      	strb	r2, [r3, #0]
      pdev->tclasslist[pdev->classId].NumEps = 3U;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008afe:	687a      	ldr	r2, [r7, #4]
 8008b00:	212c      	movs	r1, #44	@ 0x2c
 8008b02:	fb01 f303 	mul.w	r3, r1, r3
 8008b06:	4413      	add	r3, r2
 8008b08:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 8008b0c:	2203      	movs	r2, #3
 8008b0e:	601a      	str	r2, [r3, #0]
      iEp = pdev->tclasslist[pdev->classId].EpAdd[0];
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008b16:	687a      	ldr	r2, [r7, #4]
 8008b18:	212c      	movs	r1, #44	@ 0x2c
 8008b1a:	fb01 f303 	mul.w	r3, r1, r3
 8008b1e:	4413      	add	r3, r2
 8008b20:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	781b      	ldrb	r3, [r3, #0]
 8008b28:	73bb      	strb	r3, [r7, #14]
      USBD_CMPSIT_AssignEp(pdev, iEp, USBD_EP_TYPE_BULK, pdev->tclasslist[pdev->classId].CurrPcktSze);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008b30:	687a      	ldr	r2, [r7, #4]
 8008b32:	212c      	movs	r1, #44	@ 0x2c
 8008b34:	fb01 f303 	mul.w	r3, r1, r3
 8008b38:	4413      	add	r3, r2
 8008b3a:	f503 7344 	add.w	r3, r3, #784	@ 0x310
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	7bb9      	ldrb	r1, [r7, #14]
 8008b42:	2202      	movs	r2, #2
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f000 f94f 	bl	8008de8 <USBD_CMPSIT_AssignEp>
      iEp = pdev->tclasslist[pdev->classId].EpAdd[1];
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008b50:	687a      	ldr	r2, [r7, #4]
 8008b52:	212c      	movs	r1, #44	@ 0x2c
 8008b54:	fb01 f303 	mul.w	r3, r1, r3
 8008b58:	4413      	add	r3, r2
 8008b5a:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	785b      	ldrb	r3, [r3, #1]
 8008b62:	73bb      	strb	r3, [r7, #14]
      USBD_CMPSIT_AssignEp(pdev, iEp, USBD_EP_TYPE_BULK, pdev->tclasslist[pdev->classId].CurrPcktSze);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008b6a:	687a      	ldr	r2, [r7, #4]
 8008b6c:	212c      	movs	r1, #44	@ 0x2c
 8008b6e:	fb01 f303 	mul.w	r3, r1, r3
 8008b72:	4413      	add	r3, r2
 8008b74:	f503 7344 	add.w	r3, r3, #784	@ 0x310
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	7bb9      	ldrb	r1, [r7, #14]
 8008b7c:	2202      	movs	r2, #2
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f000 f932 	bl	8008de8 <USBD_CMPSIT_AssignEp>
      iEp = pdev->tclasslist[pdev->classId].EpAdd[2];
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008b8a:	687a      	ldr	r2, [r7, #4]
 8008b8c:	212c      	movs	r1, #44	@ 0x2c
 8008b8e:	fb01 f303 	mul.w	r3, r1, r3
 8008b92:	4413      	add	r3, r2
 8008b94:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	789b      	ldrb	r3, [r3, #2]
 8008b9c:	73bb      	strb	r3, [r7, #14]
      USBD_CMPSIT_AssignEp(pdev, iEp, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008b9e:	7bb9      	ldrb	r1, [r7, #14]
 8008ba0:	2308      	movs	r3, #8
 8008ba2:	2203      	movs	r2, #3
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f000 f91f 	bl	8008de8 <USBD_CMPSIT_AssignEp>
      USBD_CMPSIT_CDCDesc(pdev, (uint32_t)pCmpstFSConfDesc, &CurrFSConfDescSz, (uint8_t)USBD_SPEED_FULL);
 8008baa:	4b43      	ldr	r3, [pc, #268]	@ (8008cb8 <USBD_CMPSIT_AddToConfDesc+0x278>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	4619      	mov	r1, r3
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	4a42      	ldr	r2, [pc, #264]	@ (8008cbc <USBD_CMPSIT_AddToConfDesc+0x27c>)
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f000 f98d 	bl	8008ed4 <USBD_CMPSIT_CDCDesc>
      break;
 8008bba:	e077      	b.n	8008cac <USBD_CMPSIT_AddToConfDesc+0x26c>
      pdev->tclasslist[pdev->classId].CurrPcktSze = CUSTOM_HID_EPOUT_SIZE;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008bc2:	687a      	ldr	r2, [r7, #4]
 8008bc4:	212c      	movs	r1, #44	@ 0x2c
 8008bc6:	fb01 f303 	mul.w	r3, r1, r3
 8008bca:	4413      	add	r3, r2
 8008bcc:	f503 7344 	add.w	r3, r3, #784	@ 0x310
 8008bd0:	2240      	movs	r2, #64	@ 0x40
 8008bd2:	601a      	str	r2, [r3, #0]
      idxIf = USBD_CMPSIT_FindFreeIFNbr(pdev);
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f000 f8ab 	bl	8008d30 <USBD_CMPSIT_FindFreeIFNbr>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	73fb      	strb	r3, [r7, #15]
      pdev->tclasslist[pdev->classId].NumIf = 1U;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008be4:	687a      	ldr	r2, [r7, #4]
 8008be6:	212c      	movs	r1, #44	@ 0x2c
 8008be8:	fb01 f303 	mul.w	r3, r1, r3
 8008bec:	4413      	add	r3, r2
 8008bee:	f503 7342 	add.w	r3, r3, #776	@ 0x308
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	601a      	str	r2, [r3, #0]
      pdev->tclasslist[pdev->classId].Ifs[0] = idxIf;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008bfc:	687a      	ldr	r2, [r7, #4]
 8008bfe:	212c      	movs	r1, #44	@ 0x2c
 8008c00:	fb01 f303 	mul.w	r3, r1, r3
 8008c04:	4413      	add	r3, r2
 8008c06:	f503 7343 	add.w	r3, r3, #780	@ 0x30c
 8008c0a:	7bfa      	ldrb	r2, [r7, #15]
 8008c0c:	701a      	strb	r2, [r3, #0]
      pdev->tclasslist[pdev->classId].NumEps = 2U; /* EP1_IN, EP1_OUT */
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008c14:	687a      	ldr	r2, [r7, #4]
 8008c16:	212c      	movs	r1, #44	@ 0x2c
 8008c18:	fb01 f303 	mul.w	r3, r1, r3
 8008c1c:	4413      	add	r3, r2
 8008c1e:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 8008c22:	2202      	movs	r2, #2
 8008c24:	601a      	str	r2, [r3, #0]
      iEp = pdev->tclasslist[pdev->classId].EpAdd[0];
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008c2c:	687a      	ldr	r2, [r7, #4]
 8008c2e:	212c      	movs	r1, #44	@ 0x2c
 8008c30:	fb01 f303 	mul.w	r3, r1, r3
 8008c34:	4413      	add	r3, r2
 8008c36:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	781b      	ldrb	r3, [r3, #0]
 8008c3e:	73bb      	strb	r3, [r7, #14]
      USBD_CMPSIT_AssignEp(pdev, iEp, USBD_EP_TYPE_INTR, pdev->tclasslist[pdev->classId].CurrPcktSze);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008c46:	687a      	ldr	r2, [r7, #4]
 8008c48:	212c      	movs	r1, #44	@ 0x2c
 8008c4a:	fb01 f303 	mul.w	r3, r1, r3
 8008c4e:	4413      	add	r3, r2
 8008c50:	f503 7344 	add.w	r3, r3, #784	@ 0x310
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	7bb9      	ldrb	r1, [r7, #14]
 8008c58:	2203      	movs	r2, #3
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f000 f8c4 	bl	8008de8 <USBD_CMPSIT_AssignEp>
      iEp = pdev->tclasslist[pdev->classId].EpAdd[1];
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008c66:	687a      	ldr	r2, [r7, #4]
 8008c68:	212c      	movs	r1, #44	@ 0x2c
 8008c6a:	fb01 f303 	mul.w	r3, r1, r3
 8008c6e:	4413      	add	r3, r2
 8008c70:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	785b      	ldrb	r3, [r3, #1]
 8008c78:	73bb      	strb	r3, [r7, #14]
      USBD_CMPSIT_AssignEp(pdev, iEp, USBD_EP_TYPE_INTR, pdev->tclasslist[pdev->classId].CurrPcktSze);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008c80:	687a      	ldr	r2, [r7, #4]
 8008c82:	212c      	movs	r1, #44	@ 0x2c
 8008c84:	fb01 f303 	mul.w	r3, r1, r3
 8008c88:	4413      	add	r3, r2
 8008c8a:	f503 7344 	add.w	r3, r3, #784	@ 0x310
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	7bb9      	ldrb	r1, [r7, #14]
 8008c92:	2203      	movs	r2, #3
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f000 f8a7 	bl	8008de8 <USBD_CMPSIT_AssignEp>
      USBD_CMPSIT_CUSTOMHIDDesc(pdev, (uint32_t)pCmpstFSConfDesc, &CurrFSConfDescSz, (uint8_t)USBD_SPEED_FULL);
 8008c9a:	4b07      	ldr	r3, [pc, #28]	@ (8008cb8 <USBD_CMPSIT_AddToConfDesc+0x278>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	4619      	mov	r1, r3
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	4a06      	ldr	r2, [pc, #24]	@ (8008cbc <USBD_CMPSIT_AddToConfDesc+0x27c>)
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f000 fb55 	bl	8009354 <USBD_CMPSIT_CUSTOMHIDDesc>
      break;
 8008caa:	bf00      	nop
  }

  return (uint8_t)USBD_OK;
 8008cac:	2300      	movs	r3, #0
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	3710      	adds	r7, #16
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}
 8008cb6:	bf00      	nop
 8008cb8:	200000a4 	.word	0x200000a4
 8008cbc:	20000b48 	.word	0x20000b48

08008cc0 <USBD_CMPSIT_GetFSCfgDesc>:
  *         return configuration descriptor for both FS and HS modes
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t  *USBD_CMPSIT_GetFSCfgDesc(uint16_t *length)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b083      	sub	sp, #12
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)CurrFSConfDescSz;
 8008cc8:	4b05      	ldr	r3, [pc, #20]	@ (8008ce0 <USBD_CMPSIT_GetFSCfgDesc+0x20>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	b29a      	uxth	r2, r3
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	801a      	strh	r2, [r3, #0]

  return USBD_CMPSIT_FSCfgDesc;
 8008cd2:	4b04      	ldr	r3, [pc, #16]	@ (8008ce4 <USBD_CMPSIT_GetFSCfgDesc+0x24>)
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	370c      	adds	r7, #12
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cde:	4770      	bx	lr
 8008ce0:	20000b48 	.word	0x20000b48
 8008ce4:	20000a1c 	.word	0x20000a1c

08008ce8 <USBD_CMPSIT_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t  *USBD_CMPSIT_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b083      	sub	sp, #12
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)CurrFSConfDescSz;
 8008cf0:	4b05      	ldr	r3, [pc, #20]	@ (8008d08 <USBD_CMPSIT_GetOtherSpeedCfgDesc+0x20>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	b29a      	uxth	r2, r3
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	801a      	strh	r2, [r3, #0]

  return USBD_CMPSIT_FSCfgDesc;
 8008cfa:	4b04      	ldr	r3, [pc, #16]	@ (8008d0c <USBD_CMPSIT_GetOtherSpeedCfgDesc+0x24>)
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	370c      	adds	r7, #12
 8008d00:	46bd      	mov	sp, r7
 8008d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d06:	4770      	bx	lr
 8008d08:	20000b48 	.word	0x20000b48
 8008d0c:	20000a1c 	.word	0x20000a1c

08008d10 <USBD_CMPSIT_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t  *USBD_CMPSIT_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008d10:	b480      	push	{r7}
 8008d12:	b083      	sub	sp, #12
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)(sizeof(USBD_CMPSIT_DeviceQualifierDesc));
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	220a      	movs	r2, #10
 8008d1c:	801a      	strh	r2, [r3, #0]
  return USBD_CMPSIT_DeviceQualifierDesc;
 8008d1e:	4b03      	ldr	r3, [pc, #12]	@ (8008d2c <USBD_CMPSIT_GetDeviceQualifierDescriptor+0x1c>)
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	370c      	adds	r7, #12
 8008d24:	46bd      	mov	sp, r7
 8008d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2a:	4770      	bx	lr
 8008d2c:	200000a8 	.word	0x200000a8

08008d30 <USBD_CMPSIT_FindFreeIFNbr>:
  *         Find the first interface available slot
  * @param  pdev: device instance
  * @retval The interface number to be used
  */
static uint8_t USBD_CMPSIT_FindFreeIFNbr(USBD_HandleTypeDef *pdev)
{
 8008d30:	b480      	push	{r7}
 8008d32:	b087      	sub	sp, #28
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  uint32_t idx = 0U;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	617b      	str	r3, [r7, #20]

  /* Unroll all already activated classes */
  for (uint32_t i = 0U; i < pdev->NumClasses; i++)
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	613b      	str	r3, [r7, #16]
 8008d40:	e017      	b.n	8008d72 <USBD_CMPSIT_FindFreeIFNbr+0x42>
  {
    /* Unroll each class interfaces */
    for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 8008d42:	2300      	movs	r3, #0
 8008d44:	60fb      	str	r3, [r7, #12]
 8008d46:	e005      	b.n	8008d54 <USBD_CMPSIT_FindFreeIFNbr+0x24>
    {
      /* Increment the interface counter index */
      idx++;
 8008d48:	697b      	ldr	r3, [r7, #20]
 8008d4a:	3301      	adds	r3, #1
 8008d4c:	617b      	str	r3, [r7, #20]
    for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	3301      	adds	r3, #1
 8008d52:	60fb      	str	r3, [r7, #12]
 8008d54:	687a      	ldr	r2, [r7, #4]
 8008d56:	693b      	ldr	r3, [r7, #16]
 8008d58:	212c      	movs	r1, #44	@ 0x2c
 8008d5a:	fb01 f303 	mul.w	r3, r1, r3
 8008d5e:	4413      	add	r3, r2
 8008d60:	f503 7342 	add.w	r3, r3, #776	@ 0x308
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	68fa      	ldr	r2, [r7, #12]
 8008d68:	429a      	cmp	r2, r3
 8008d6a:	d3ed      	bcc.n	8008d48 <USBD_CMPSIT_FindFreeIFNbr+0x18>
  for (uint32_t i = 0U; i < pdev->NumClasses; i++)
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	3301      	adds	r3, #1
 8008d70:	613b      	str	r3, [r7, #16]
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f8d3 32e4 	ldr.w	r3, [r3, #740]	@ 0x2e4
 8008d78:	693a      	ldr	r2, [r7, #16]
 8008d7a:	429a      	cmp	r2, r3
 8008d7c:	d3e1      	bcc.n	8008d42 <USBD_CMPSIT_FindFreeIFNbr+0x12>
    }
  }

  /* Return the first available interface slot */
  return (uint8_t)idx;
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	b2db      	uxtb	r3, r3
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	371c      	adds	r7, #28
 8008d86:	46bd      	mov	sp, r7
 8008d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8c:	4770      	bx	lr

08008d8e <USBD_CMPSIT_AddConfDesc>:
  *         Add a new class to the configuration descriptor
  * @param  pdev: device instance
  * @retval none
  */
static void  USBD_CMPSIT_AddConfDesc(uint32_t Conf, __IO uint32_t *pSze)
{
 8008d8e:	b480      	push	{r7}
 8008d90:	b085      	sub	sp, #20
 8008d92:	af00      	add	r7, sp, #0
 8008d94:	6078      	str	r0, [r7, #4]
 8008d96:	6039      	str	r1, [r7, #0]
  /* Intermediate variable to comply with MISRA-C Rule 11.3 */
  USBD_ConfigDescTypeDef *ptr = (USBD_ConfigDescTypeDef *)Conf;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	60fb      	str	r3, [r7, #12]

  ptr->bLength = (uint8_t)sizeof(USBD_ConfigDescTypeDef);
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	2209      	movs	r2, #9
 8008da0:	701a      	strb	r2, [r3, #0]
  ptr->bDescriptorType = USB_DESC_TYPE_CONFIGURATION;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	2202      	movs	r2, #2
 8008da6:	705a      	strb	r2, [r3, #1]
  ptr->wTotalLength = 0U;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	2200      	movs	r2, #0
 8008dac:	709a      	strb	r2, [r3, #2]
 8008dae:	2200      	movs	r2, #0
 8008db0:	70da      	strb	r2, [r3, #3]
  ptr->bNumInterfaces = 0U;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	2200      	movs	r2, #0
 8008db6:	711a      	strb	r2, [r3, #4]
  ptr->bConfigurationValue = 1U;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	2201      	movs	r2, #1
 8008dbc:	715a      	strb	r2, [r3, #5]
  ptr->iConfiguration = USBD_CONFIG_STR_DESC_IDX;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	2204      	movs	r2, #4
 8008dc2:	719a      	strb	r2, [r3, #6]

#if (USBD_SELF_POWERED == 1U)
  ptr->bmAttributes = 0xC0U;   /* bmAttributes: Self Powered according to user configuration */
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	22c0      	movs	r2, #192	@ 0xc0
 8008dc8:	71da      	strb	r2, [r3, #7]
#else
  ptr->bmAttributes = 0x80U;   /* bmAttributes: Bus Powered according to user configuration */
#endif /* USBD_SELF_POWERED */

  ptr->bMaxPower = USBD_MAX_POWER;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	2232      	movs	r2, #50	@ 0x32
 8008dce:	721a      	strb	r2, [r3, #8]

  *pSze += sizeof(USBD_ConfigDescTypeDef);
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f103 0209 	add.w	r2, r3, #9
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	601a      	str	r2, [r3, #0]
}
 8008ddc:	bf00      	nop
 8008dde:	3714      	adds	r7, #20
 8008de0:	46bd      	mov	sp, r7
 8008de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de6:	4770      	bx	lr

08008de8 <USBD_CMPSIT_AssignEp>:
  * @param  Type: Endpoint type
  * @param  Sze: Endpoint max packet size
  * @retval none
  */
static void  USBD_CMPSIT_AssignEp(USBD_HandleTypeDef *pdev, uint8_t Add, uint8_t Type, uint32_t Sze)
{
 8008de8:	b480      	push	{r7}
 8008dea:	b087      	sub	sp, #28
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	60f8      	str	r0, [r7, #12]
 8008df0:	607b      	str	r3, [r7, #4]
 8008df2:	460b      	mov	r3, r1
 8008df4:	72fb      	strb	r3, [r7, #11]
 8008df6:	4613      	mov	r3, r2
 8008df8:	72bb      	strb	r3, [r7, #10]
  uint32_t idx = 0U;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	617b      	str	r3, [r7, #20]

  /* Find the first available endpoint slot */
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 8008dfe:	e002      	b.n	8008e06 <USBD_CMPSIT_AssignEp+0x1e>
          ((pdev->tclasslist[pdev->classId].Eps[idx].is_used) != 0U)))
  {
    /* Increment the index */
    idx++;
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	3301      	adds	r3, #1
 8008e04:	617b      	str	r3, [r7, #20]
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008e0c:	68fa      	ldr	r2, [r7, #12]
 8008e0e:	212c      	movs	r1, #44	@ 0x2c
 8008e10:	fb01 f303 	mul.w	r3, r1, r3
 8008e14:	4413      	add	r3, r2
 8008e16:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	697a      	ldr	r2, [r7, #20]
 8008e1e:	429a      	cmp	r2, r3
 8008e20:	d210      	bcs.n	8008e44 <USBD_CMPSIT_AssignEp+0x5c>
          ((pdev->tclasslist[pdev->classId].Eps[idx].is_used) != 0U)))
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 8008e28:	68f9      	ldr	r1, [r7, #12]
 8008e2a:	4613      	mov	r3, r2
 8008e2c:	009b      	lsls	r3, r3, #2
 8008e2e:	4413      	add	r3, r2
 8008e30:	005b      	lsls	r3, r3, #1
 8008e32:	4413      	add	r3, r2
 8008e34:	697a      	ldr	r2, [r7, #20]
 8008e36:	4413      	add	r3, r2
 8008e38:	33be      	adds	r3, #190	@ 0xbe
 8008e3a:	009b      	lsls	r3, r3, #2
 8008e3c:	440b      	add	r3, r1
 8008e3e:	78db      	ldrb	r3, [r3, #3]
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d1dd      	bne.n	8008e00 <USBD_CMPSIT_AssignEp+0x18>
  }

  /* Configure the endpoint */
  pdev->tclasslist[pdev->classId].Eps[idx].add = Add;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 8008e4a:	68f9      	ldr	r1, [r7, #12]
 8008e4c:	4613      	mov	r3, r2
 8008e4e:	009b      	lsls	r3, r3, #2
 8008e50:	4413      	add	r3, r2
 8008e52:	005b      	lsls	r3, r3, #1
 8008e54:	4413      	add	r3, r2
 8008e56:	697a      	ldr	r2, [r7, #20]
 8008e58:	4413      	add	r3, r2
 8008e5a:	33be      	adds	r3, #190	@ 0xbe
 8008e5c:	7afa      	ldrb	r2, [r7, #11]
 8008e5e:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
  pdev->tclasslist[pdev->classId].Eps[idx].type = Type;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 8008e68:	68f9      	ldr	r1, [r7, #12]
 8008e6a:	4613      	mov	r3, r2
 8008e6c:	009b      	lsls	r3, r3, #2
 8008e6e:	4413      	add	r3, r2
 8008e70:	005b      	lsls	r3, r3, #1
 8008e72:	4413      	add	r3, r2
 8008e74:	697a      	ldr	r2, [r7, #20]
 8008e76:	4413      	add	r3, r2
 8008e78:	33be      	adds	r3, #190	@ 0xbe
 8008e7a:	009b      	lsls	r3, r3, #2
 8008e7c:	440b      	add	r3, r1
 8008e7e:	7aba      	ldrb	r2, [r7, #10]
 8008e80:	705a      	strb	r2, [r3, #1]
  pdev->tclasslist[pdev->classId].Eps[idx].size = (uint8_t)Sze;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	b2d8      	uxtb	r0, r3
 8008e8c:	68f9      	ldr	r1, [r7, #12]
 8008e8e:	4613      	mov	r3, r2
 8008e90:	009b      	lsls	r3, r3, #2
 8008e92:	4413      	add	r3, r2
 8008e94:	005b      	lsls	r3, r3, #1
 8008e96:	4413      	add	r3, r2
 8008e98:	697a      	ldr	r2, [r7, #20]
 8008e9a:	4413      	add	r3, r2
 8008e9c:	33be      	adds	r3, #190	@ 0xbe
 8008e9e:	009b      	lsls	r3, r3, #2
 8008ea0:	440b      	add	r3, r1
 8008ea2:	4602      	mov	r2, r0
 8008ea4:	709a      	strb	r2, [r3, #2]
  pdev->tclasslist[pdev->classId].Eps[idx].is_used = 1U;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 8008eac:	68f9      	ldr	r1, [r7, #12]
 8008eae:	4613      	mov	r3, r2
 8008eb0:	009b      	lsls	r3, r3, #2
 8008eb2:	4413      	add	r3, r2
 8008eb4:	005b      	lsls	r3, r3, #1
 8008eb6:	4413      	add	r3, r2
 8008eb8:	697a      	ldr	r2, [r7, #20]
 8008eba:	4413      	add	r3, r2
 8008ebc:	33be      	adds	r3, #190	@ 0xbe
 8008ebe:	009b      	lsls	r3, r3, #2
 8008ec0:	440b      	add	r3, r1
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	70da      	strb	r2, [r3, #3]
}
 8008ec6:	bf00      	nop
 8008ec8:	371c      	adds	r7, #28
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed0:	4770      	bx	lr
	...

08008ed4 <USBD_CMPSIT_CDCDesc>:
  * @param  pConf: Configuration descriptor pointer
  * @param  Sze: pointer to the current configuration descriptor size
  * @retval None
  */
static void  USBD_CMPSIT_CDCDesc(USBD_HandleTypeDef *pdev, uint32_t pConf, __IO uint32_t *Sze, uint8_t speed)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b085      	sub	sp, #20
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	60f8      	str	r0, [r7, #12]
 8008edc:	60b9      	str	r1, [r7, #8]
 8008ede:	607a      	str	r2, [r7, #4]
 8008ee0:	70fb      	strb	r3, [r7, #3]
#if USBD_COMPOSITE_USE_IAD == 1
  static USBD_IadDescTypeDef              *pIadDesc;
#endif /* USBD_COMPOSITE_USE_IAD == 1 */

#if USBD_COMPOSITE_USE_IAD == 1
  pIadDesc                          = ((USBD_IadDescTypeDef *)(pConf + *Sze));
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681a      	ldr	r2, [r3, #0]
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	4413      	add	r3, r2
 8008eea:	461a      	mov	r2, r3
 8008eec:	4b9c      	ldr	r3, [pc, #624]	@ (8009160 <USBD_CMPSIT_CDCDesc+0x28c>)
 8008eee:	601a      	str	r2, [r3, #0]
  pIadDesc->bLength                 = (uint8_t)sizeof(USBD_IadDescTypeDef);
 8008ef0:	4b9b      	ldr	r3, [pc, #620]	@ (8009160 <USBD_CMPSIT_CDCDesc+0x28c>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	2208      	movs	r2, #8
 8008ef6:	701a      	strb	r2, [r3, #0]
  pIadDesc->bDescriptorType         = USB_DESC_TYPE_IAD; /* IAD descriptor */
 8008ef8:	4b99      	ldr	r3, [pc, #612]	@ (8009160 <USBD_CMPSIT_CDCDesc+0x28c>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	220b      	movs	r2, #11
 8008efe:	705a      	strb	r2, [r3, #1]
  pIadDesc->bFirstInterface         = pdev->tclasslist[pdev->classId].Ifs[0];
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 8008f06:	4b96      	ldr	r3, [pc, #600]	@ (8009160 <USBD_CMPSIT_CDCDesc+0x28c>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	68f9      	ldr	r1, [r7, #12]
 8008f0c:	202c      	movs	r0, #44	@ 0x2c
 8008f0e:	fb00 f202 	mul.w	r2, r0, r2
 8008f12:	440a      	add	r2, r1
 8008f14:	f502 7243 	add.w	r2, r2, #780	@ 0x30c
 8008f18:	7812      	ldrb	r2, [r2, #0]
 8008f1a:	709a      	strb	r2, [r3, #2]
  pIadDesc->bInterfaceCount         = 2U;    /* 2 interfaces */
 8008f1c:	4b90      	ldr	r3, [pc, #576]	@ (8009160 <USBD_CMPSIT_CDCDesc+0x28c>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	2202      	movs	r2, #2
 8008f22:	70da      	strb	r2, [r3, #3]
  pIadDesc->bFunctionClass          = 0x02U;
 8008f24:	4b8e      	ldr	r3, [pc, #568]	@ (8009160 <USBD_CMPSIT_CDCDesc+0x28c>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	2202      	movs	r2, #2
 8008f2a:	711a      	strb	r2, [r3, #4]
  pIadDesc->bFunctionSubClass       = 0x02U;
 8008f2c:	4b8c      	ldr	r3, [pc, #560]	@ (8009160 <USBD_CMPSIT_CDCDesc+0x28c>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	2202      	movs	r2, #2
 8008f32:	715a      	strb	r2, [r3, #5]
  pIadDesc->bFunctionProtocol       = 0x01U;
 8008f34:	4b8a      	ldr	r3, [pc, #552]	@ (8009160 <USBD_CMPSIT_CDCDesc+0x28c>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	2201      	movs	r2, #1
 8008f3a:	719a      	strb	r2, [r3, #6]
  pIadDesc->iFunction               = 0U; /* String Index */
 8008f3c:	4b88      	ldr	r3, [pc, #544]	@ (8009160 <USBD_CMPSIT_CDCDesc+0x28c>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	2200      	movs	r2, #0
 8008f42:	71da      	strb	r2, [r3, #7]
  *Sze                              += (uint32_t)sizeof(USBD_IadDescTypeDef);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f103 0208 	add.w	r2, r3, #8
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	601a      	str	r2, [r3, #0]
#endif /* USBD_COMPOSITE_USE_IAD == 1 */

  /* Control Interface Descriptor */
  __USBD_CMPSIT_SET_IF(pdev->tclasslist[pdev->classId].Ifs[0], 0U, 1U, 0x02, 0x02U, 0x01U, 0U);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681a      	ldr	r2, [r3, #0]
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	4413      	add	r3, r2
 8008f58:	461a      	mov	r2, r3
 8008f5a:	4b82      	ldr	r3, [pc, #520]	@ (8009164 <USBD_CMPSIT_CDCDesc+0x290>)
 8008f5c:	601a      	str	r2, [r3, #0]
 8008f5e:	4b81      	ldr	r3, [pc, #516]	@ (8009164 <USBD_CMPSIT_CDCDesc+0x290>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	2209      	movs	r2, #9
 8008f64:	701a      	strb	r2, [r3, #0]
 8008f66:	4b7f      	ldr	r3, [pc, #508]	@ (8009164 <USBD_CMPSIT_CDCDesc+0x290>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	2204      	movs	r2, #4
 8008f6c:	705a      	strb	r2, [r3, #1]
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 8008f74:	4b7b      	ldr	r3, [pc, #492]	@ (8009164 <USBD_CMPSIT_CDCDesc+0x290>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	68f9      	ldr	r1, [r7, #12]
 8008f7a:	202c      	movs	r0, #44	@ 0x2c
 8008f7c:	fb00 f202 	mul.w	r2, r0, r2
 8008f80:	440a      	add	r2, r1
 8008f82:	f502 7243 	add.w	r2, r2, #780	@ 0x30c
 8008f86:	7812      	ldrb	r2, [r2, #0]
 8008f88:	709a      	strb	r2, [r3, #2]
 8008f8a:	4b76      	ldr	r3, [pc, #472]	@ (8009164 <USBD_CMPSIT_CDCDesc+0x290>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	70da      	strb	r2, [r3, #3]
 8008f92:	4b74      	ldr	r3, [pc, #464]	@ (8009164 <USBD_CMPSIT_CDCDesc+0x290>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	2201      	movs	r2, #1
 8008f98:	711a      	strb	r2, [r3, #4]
 8008f9a:	4b72      	ldr	r3, [pc, #456]	@ (8009164 <USBD_CMPSIT_CDCDesc+0x290>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	2202      	movs	r2, #2
 8008fa0:	715a      	strb	r2, [r3, #5]
 8008fa2:	4b70      	ldr	r3, [pc, #448]	@ (8009164 <USBD_CMPSIT_CDCDesc+0x290>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	2202      	movs	r2, #2
 8008fa8:	719a      	strb	r2, [r3, #6]
 8008faa:	4b6e      	ldr	r3, [pc, #440]	@ (8009164 <USBD_CMPSIT_CDCDesc+0x290>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	2201      	movs	r2, #1
 8008fb0:	71da      	strb	r2, [r3, #7]
 8008fb2:	4b6c      	ldr	r3, [pc, #432]	@ (8009164 <USBD_CMPSIT_CDCDesc+0x290>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	721a      	strb	r2, [r3, #8]
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f103 0209 	add.w	r2, r3, #9
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	601a      	str	r2, [r3, #0]

  /* Control interface headers */
  pHeadDesc = ((USBD_CDCHeaderFuncDescTypeDef *)((uint32_t)pConf + *Sze));
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681a      	ldr	r2, [r3, #0]
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	4413      	add	r3, r2
 8008fce:	461a      	mov	r2, r3
 8008fd0:	4b65      	ldr	r3, [pc, #404]	@ (8009168 <USBD_CMPSIT_CDCDesc+0x294>)
 8008fd2:	601a      	str	r2, [r3, #0]
  /* Header Functional Descriptor*/
  pHeadDesc->bLength = 0x05U;
 8008fd4:	4b64      	ldr	r3, [pc, #400]	@ (8009168 <USBD_CMPSIT_CDCDesc+0x294>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	2205      	movs	r2, #5
 8008fda:	701a      	strb	r2, [r3, #0]
  pHeadDesc->bDescriptorType = 0x24U;
 8008fdc:	4b62      	ldr	r3, [pc, #392]	@ (8009168 <USBD_CMPSIT_CDCDesc+0x294>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	2224      	movs	r2, #36	@ 0x24
 8008fe2:	705a      	strb	r2, [r3, #1]
  pHeadDesc->bDescriptorSubtype = 0x00U;
 8008fe4:	4b60      	ldr	r3, [pc, #384]	@ (8009168 <USBD_CMPSIT_CDCDesc+0x294>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	709a      	strb	r2, [r3, #2]
  pHeadDesc->bcdCDC = 0x0110U;
 8008fec:	4b5e      	ldr	r3, [pc, #376]	@ (8009168 <USBD_CMPSIT_CDCDesc+0x294>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	f042 0210 	orr.w	r2, r2, #16
 8008ff6:	70da      	strb	r2, [r3, #3]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	f042 0201 	orr.w	r2, r2, #1
 8008ffe:	711a      	strb	r2, [r3, #4]
  *Sze += (uint32_t)sizeof(USBD_CDCHeaderFuncDescTypeDef);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	1d5a      	adds	r2, r3, #5
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	601a      	str	r2, [r3, #0]

  /* Call Management Functional Descriptor */
  pCallMgmDesc = ((USBD_CDCCallMgmFuncDescTypeDef *)((uint32_t)pConf + *Sze));
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681a      	ldr	r2, [r3, #0]
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	4413      	add	r3, r2
 8009012:	461a      	mov	r2, r3
 8009014:	4b55      	ldr	r3, [pc, #340]	@ (800916c <USBD_CMPSIT_CDCDesc+0x298>)
 8009016:	601a      	str	r2, [r3, #0]
  pCallMgmDesc->bLength = 0x05U;
 8009018:	4b54      	ldr	r3, [pc, #336]	@ (800916c <USBD_CMPSIT_CDCDesc+0x298>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	2205      	movs	r2, #5
 800901e:	701a      	strb	r2, [r3, #0]
  pCallMgmDesc->bDescriptorType = 0x24U;
 8009020:	4b52      	ldr	r3, [pc, #328]	@ (800916c <USBD_CMPSIT_CDCDesc+0x298>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	2224      	movs	r2, #36	@ 0x24
 8009026:	705a      	strb	r2, [r3, #1]
  pCallMgmDesc->bDescriptorSubtype = 0x01U;
 8009028:	4b50      	ldr	r3, [pc, #320]	@ (800916c <USBD_CMPSIT_CDCDesc+0x298>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	2201      	movs	r2, #1
 800902e:	709a      	strb	r2, [r3, #2]
  pCallMgmDesc->bmCapabilities = 0x00U;
 8009030:	4b4e      	ldr	r3, [pc, #312]	@ (800916c <USBD_CMPSIT_CDCDesc+0x298>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	2200      	movs	r2, #0
 8009036:	70da      	strb	r2, [r3, #3]
  pCallMgmDesc->bDataInterface = pdev->tclasslist[pdev->classId].Ifs[1];
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 800903e:	4b4b      	ldr	r3, [pc, #300]	@ (800916c <USBD_CMPSIT_CDCDesc+0x298>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	68f9      	ldr	r1, [r7, #12]
 8009044:	202c      	movs	r0, #44	@ 0x2c
 8009046:	fb00 f202 	mul.w	r2, r0, r2
 800904a:	440a      	add	r2, r1
 800904c:	f202 320d 	addw	r2, r2, #781	@ 0x30d
 8009050:	7812      	ldrb	r2, [r2, #0]
 8009052:	711a      	strb	r2, [r3, #4]
  *Sze += (uint32_t)sizeof(USBD_CDCCallMgmFuncDescTypeDef);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	1d5a      	adds	r2, r3, #5
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	601a      	str	r2, [r3, #0]

  /* ACM Functional Descriptor*/
  pACMDesc = ((USBD_CDCACMFuncDescTypeDef *)((uint32_t)pConf + *Sze));
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681a      	ldr	r2, [r3, #0]
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	4413      	add	r3, r2
 8009066:	461a      	mov	r2, r3
 8009068:	4b41      	ldr	r3, [pc, #260]	@ (8009170 <USBD_CMPSIT_CDCDesc+0x29c>)
 800906a:	601a      	str	r2, [r3, #0]
  pACMDesc->bLength = 0x04U;
 800906c:	4b40      	ldr	r3, [pc, #256]	@ (8009170 <USBD_CMPSIT_CDCDesc+0x29c>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	2204      	movs	r2, #4
 8009072:	701a      	strb	r2, [r3, #0]
  pACMDesc->bDescriptorType = 0x24U;
 8009074:	4b3e      	ldr	r3, [pc, #248]	@ (8009170 <USBD_CMPSIT_CDCDesc+0x29c>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	2224      	movs	r2, #36	@ 0x24
 800907a:	705a      	strb	r2, [r3, #1]
  pACMDesc->bDescriptorSubtype = 0x02U;
 800907c:	4b3c      	ldr	r3, [pc, #240]	@ (8009170 <USBD_CMPSIT_CDCDesc+0x29c>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	2202      	movs	r2, #2
 8009082:	709a      	strb	r2, [r3, #2]
  pACMDesc->bmCapabilities = 0x02U;
 8009084:	4b3a      	ldr	r3, [pc, #232]	@ (8009170 <USBD_CMPSIT_CDCDesc+0x29c>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	2202      	movs	r2, #2
 800908a:	70da      	strb	r2, [r3, #3]
  *Sze += (uint32_t)sizeof(USBD_CDCACMFuncDescTypeDef);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	1d1a      	adds	r2, r3, #4
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	601a      	str	r2, [r3, #0]

  /* Union Functional Descriptor*/
  pUnionDesc = ((USBD_CDCUnionFuncDescTypeDef *)((uint32_t)pConf + *Sze));
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681a      	ldr	r2, [r3, #0]
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	4413      	add	r3, r2
 800909e:	461a      	mov	r2, r3
 80090a0:	4b34      	ldr	r3, [pc, #208]	@ (8009174 <USBD_CMPSIT_CDCDesc+0x2a0>)
 80090a2:	601a      	str	r2, [r3, #0]
  pUnionDesc->bLength = 0x05U;
 80090a4:	4b33      	ldr	r3, [pc, #204]	@ (8009174 <USBD_CMPSIT_CDCDesc+0x2a0>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	2205      	movs	r2, #5
 80090aa:	701a      	strb	r2, [r3, #0]
  pUnionDesc->bDescriptorType = 0x24U;
 80090ac:	4b31      	ldr	r3, [pc, #196]	@ (8009174 <USBD_CMPSIT_CDCDesc+0x2a0>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	2224      	movs	r2, #36	@ 0x24
 80090b2:	705a      	strb	r2, [r3, #1]
  pUnionDesc->bDescriptorSubtype = 0x06U;
 80090b4:	4b2f      	ldr	r3, [pc, #188]	@ (8009174 <USBD_CMPSIT_CDCDesc+0x2a0>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	2206      	movs	r2, #6
 80090ba:	709a      	strb	r2, [r3, #2]
  pUnionDesc->bMasterInterface = pdev->tclasslist[pdev->classId].Ifs[0];
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 80090c2:	4b2c      	ldr	r3, [pc, #176]	@ (8009174 <USBD_CMPSIT_CDCDesc+0x2a0>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	68f9      	ldr	r1, [r7, #12]
 80090c8:	202c      	movs	r0, #44	@ 0x2c
 80090ca:	fb00 f202 	mul.w	r2, r0, r2
 80090ce:	440a      	add	r2, r1
 80090d0:	f502 7243 	add.w	r2, r2, #780	@ 0x30c
 80090d4:	7812      	ldrb	r2, [r2, #0]
 80090d6:	70da      	strb	r2, [r3, #3]
  pUnionDesc->bSlaveInterface = pdev->tclasslist[pdev->classId].Ifs[1];
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 80090de:	4b25      	ldr	r3, [pc, #148]	@ (8009174 <USBD_CMPSIT_CDCDesc+0x2a0>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	68f9      	ldr	r1, [r7, #12]
 80090e4:	202c      	movs	r0, #44	@ 0x2c
 80090e6:	fb00 f202 	mul.w	r2, r0, r2
 80090ea:	440a      	add	r2, r1
 80090ec:	f202 320d 	addw	r2, r2, #781	@ 0x30d
 80090f0:	7812      	ldrb	r2, [r2, #0]
 80090f2:	711a      	strb	r2, [r3, #4]
  *Sze += (uint32_t)sizeof(USBD_CDCUnionFuncDescTypeDef);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	1d5a      	adds	r2, r3, #5
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	601a      	str	r2, [r3, #0]

  /* Append Endpoint descriptor to Configuration descriptor */
  __USBD_CMPSIT_SET_EP(pdev->tclasslist[pdev->classId].Eps[2].add, \
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681a      	ldr	r2, [r3, #0]
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	4413      	add	r3, r2
 8009106:	461a      	mov	r2, r3
 8009108:	4b1b      	ldr	r3, [pc, #108]	@ (8009178 <USBD_CMPSIT_CDCDesc+0x2a4>)
 800910a:	601a      	str	r2, [r3, #0]
 800910c:	4b1a      	ldr	r3, [pc, #104]	@ (8009178 <USBD_CMPSIT_CDCDesc+0x2a4>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	2207      	movs	r2, #7
 8009112:	701a      	strb	r2, [r3, #0]
 8009114:	4b18      	ldr	r3, [pc, #96]	@ (8009178 <USBD_CMPSIT_CDCDesc+0x2a4>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	2205      	movs	r2, #5
 800911a:	705a      	strb	r2, [r3, #1]
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 8009122:	4b15      	ldr	r3, [pc, #84]	@ (8009178 <USBD_CMPSIT_CDCDesc+0x2a4>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	68f9      	ldr	r1, [r7, #12]
 8009128:	202c      	movs	r0, #44	@ 0x2c
 800912a:	fb00 f202 	mul.w	r2, r0, r2
 800912e:	440a      	add	r2, r1
 8009130:	f502 7240 	add.w	r2, r2, #768	@ 0x300
 8009134:	7812      	ldrb	r2, [r2, #0]
 8009136:	709a      	strb	r2, [r3, #2]
 8009138:	4b0f      	ldr	r3, [pc, #60]	@ (8009178 <USBD_CMPSIT_CDCDesc+0x2a4>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	2203      	movs	r2, #3
 800913e:	70da      	strb	r2, [r3, #3]
 8009140:	4b0d      	ldr	r3, [pc, #52]	@ (8009178 <USBD_CMPSIT_CDCDesc+0x2a4>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	2200      	movs	r2, #0
 8009146:	f042 0208 	orr.w	r2, r2, #8
 800914a:	711a      	strb	r2, [r3, #4]
 800914c:	2200      	movs	r2, #0
 800914e:	715a      	strb	r2, [r3, #5]
 8009150:	78fb      	ldrb	r3, [r7, #3]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d112      	bne.n	800917c <USBD_CMPSIT_CDCDesc+0x2a8>
 8009156:	4b08      	ldr	r3, [pc, #32]	@ (8009178 <USBD_CMPSIT_CDCDesc+0x2a4>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	2210      	movs	r2, #16
 800915c:	719a      	strb	r2, [r3, #6]
 800915e:	e011      	b.n	8009184 <USBD_CMPSIT_CDCDesc+0x2b0>
 8009160:	20000b4c 	.word	0x20000b4c
 8009164:	20000b50 	.word	0x20000b50
 8009168:	20000b54 	.word	0x20000b54
 800916c:	20000b58 	.word	0x20000b58
 8009170:	20000b5c 	.word	0x20000b5c
 8009174:	20000b60 	.word	0x20000b60
 8009178:	20000b64 	.word	0x20000b64
 800917c:	4b73      	ldr	r3, [pc, #460]	@ (800934c <USBD_CMPSIT_CDCDesc+0x478>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	2210      	movs	r2, #16
 8009182:	719a      	strb	r2, [r3, #6]
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	1dda      	adds	r2, r3, #7
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	601a      	str	r2, [r3, #0]
                       USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE, CDC_HS_BINTERVAL, CDC_FS_BINTERVAL);

  /* Data Interface Descriptor */
  __USBD_CMPSIT_SET_IF(pdev->tclasslist[pdev->classId].Ifs[1], 0U, 2U, 0x0A, 0U, 0U, 0U);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681a      	ldr	r2, [r3, #0]
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	4413      	add	r3, r2
 8009196:	461a      	mov	r2, r3
 8009198:	4b6d      	ldr	r3, [pc, #436]	@ (8009350 <USBD_CMPSIT_CDCDesc+0x47c>)
 800919a:	601a      	str	r2, [r3, #0]
 800919c:	4b6c      	ldr	r3, [pc, #432]	@ (8009350 <USBD_CMPSIT_CDCDesc+0x47c>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	2209      	movs	r2, #9
 80091a2:	701a      	strb	r2, [r3, #0]
 80091a4:	4b6a      	ldr	r3, [pc, #424]	@ (8009350 <USBD_CMPSIT_CDCDesc+0x47c>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	2204      	movs	r2, #4
 80091aa:	705a      	strb	r2, [r3, #1]
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 80091b2:	4b67      	ldr	r3, [pc, #412]	@ (8009350 <USBD_CMPSIT_CDCDesc+0x47c>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	68f9      	ldr	r1, [r7, #12]
 80091b8:	202c      	movs	r0, #44	@ 0x2c
 80091ba:	fb00 f202 	mul.w	r2, r0, r2
 80091be:	440a      	add	r2, r1
 80091c0:	f202 320d 	addw	r2, r2, #781	@ 0x30d
 80091c4:	7812      	ldrb	r2, [r2, #0]
 80091c6:	709a      	strb	r2, [r3, #2]
 80091c8:	4b61      	ldr	r3, [pc, #388]	@ (8009350 <USBD_CMPSIT_CDCDesc+0x47c>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	2200      	movs	r2, #0
 80091ce:	70da      	strb	r2, [r3, #3]
 80091d0:	4b5f      	ldr	r3, [pc, #380]	@ (8009350 <USBD_CMPSIT_CDCDesc+0x47c>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	2202      	movs	r2, #2
 80091d6:	711a      	strb	r2, [r3, #4]
 80091d8:	4b5d      	ldr	r3, [pc, #372]	@ (8009350 <USBD_CMPSIT_CDCDesc+0x47c>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	220a      	movs	r2, #10
 80091de:	715a      	strb	r2, [r3, #5]
 80091e0:	4b5b      	ldr	r3, [pc, #364]	@ (8009350 <USBD_CMPSIT_CDCDesc+0x47c>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	2200      	movs	r2, #0
 80091e6:	719a      	strb	r2, [r3, #6]
 80091e8:	4b59      	ldr	r3, [pc, #356]	@ (8009350 <USBD_CMPSIT_CDCDesc+0x47c>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	2200      	movs	r2, #0
 80091ee:	71da      	strb	r2, [r3, #7]
 80091f0:	4b57      	ldr	r3, [pc, #348]	@ (8009350 <USBD_CMPSIT_CDCDesc+0x47c>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	2200      	movs	r2, #0
 80091f6:	721a      	strb	r2, [r3, #8]
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f103 0209 	add.w	r2, r3, #9
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	601a      	str	r2, [r3, #0]

  if (speed == (uint8_t)USBD_SPEED_HIGH)
 8009204:	78fb      	ldrb	r3, [r7, #3]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d10c      	bne.n	8009224 <USBD_CMPSIT_CDCDesc+0x350>
  {
    pdev->tclasslist[pdev->classId].CurrPcktSze = CDC_DATA_HS_MAX_PACKET_SIZE;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8009210:	68fa      	ldr	r2, [r7, #12]
 8009212:	212c      	movs	r1, #44	@ 0x2c
 8009214:	fb01 f303 	mul.w	r3, r1, r3
 8009218:	4413      	add	r3, r2
 800921a:	f503 7344 	add.w	r3, r3, #784	@ 0x310
 800921e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009222:	601a      	str	r2, [r3, #0]
  }

  /* Append Endpoint descriptor to Configuration descriptor */
  __USBD_CMPSIT_SET_EP((pdev->tclasslist[pdev->classId].Eps[0].add), \
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681a      	ldr	r2, [r3, #0]
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	4413      	add	r3, r2
 800922c:	461a      	mov	r2, r3
 800922e:	4b47      	ldr	r3, [pc, #284]	@ (800934c <USBD_CMPSIT_CDCDesc+0x478>)
 8009230:	601a      	str	r2, [r3, #0]
 8009232:	4b46      	ldr	r3, [pc, #280]	@ (800934c <USBD_CMPSIT_CDCDesc+0x478>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	2207      	movs	r2, #7
 8009238:	701a      	strb	r2, [r3, #0]
 800923a:	4b44      	ldr	r3, [pc, #272]	@ (800934c <USBD_CMPSIT_CDCDesc+0x478>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	2205      	movs	r2, #5
 8009240:	705a      	strb	r2, [r3, #1]
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 8009248:	4b40      	ldr	r3, [pc, #256]	@ (800934c <USBD_CMPSIT_CDCDesc+0x478>)
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	68f9      	ldr	r1, [r7, #12]
 800924e:	202c      	movs	r0, #44	@ 0x2c
 8009250:	fb00 f202 	mul.w	r2, r0, r2
 8009254:	440a      	add	r2, r1
 8009256:	f502 723e 	add.w	r2, r2, #760	@ 0x2f8
 800925a:	7812      	ldrb	r2, [r2, #0]
 800925c:	709a      	strb	r2, [r3, #2]
 800925e:	4b3b      	ldr	r3, [pc, #236]	@ (800934c <USBD_CMPSIT_CDCDesc+0x478>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	2202      	movs	r2, #2
 8009264:	70da      	strb	r2, [r3, #3]
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800926c:	68fa      	ldr	r2, [r7, #12]
 800926e:	212c      	movs	r1, #44	@ 0x2c
 8009270:	fb01 f303 	mul.w	r3, r1, r3
 8009274:	4413      	add	r3, r2
 8009276:	f503 7344 	add.w	r3, r3, #784	@ 0x310
 800927a:	681a      	ldr	r2, [r3, #0]
 800927c:	4b33      	ldr	r3, [pc, #204]	@ (800934c <USBD_CMPSIT_CDCDesc+0x478>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	b292      	uxth	r2, r2
 8009282:	809a      	strh	r2, [r3, #4]
 8009284:	78fb      	ldrb	r3, [r7, #3]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d104      	bne.n	8009294 <USBD_CMPSIT_CDCDesc+0x3c0>
 800928a:	4b30      	ldr	r3, [pc, #192]	@ (800934c <USBD_CMPSIT_CDCDesc+0x478>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	2200      	movs	r2, #0
 8009290:	719a      	strb	r2, [r3, #6]
 8009292:	e003      	b.n	800929c <USBD_CMPSIT_CDCDesc+0x3c8>
 8009294:	4b2d      	ldr	r3, [pc, #180]	@ (800934c <USBD_CMPSIT_CDCDesc+0x478>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	2200      	movs	r2, #0
 800929a:	719a      	strb	r2, [r3, #6]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	1dda      	adds	r2, r3, #7
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	601a      	str	r2, [r3, #0]
                       (USBD_EP_TYPE_BULK), (pdev->tclasslist[pdev->classId].CurrPcktSze), (0U), (0U));

  /* Append Endpoint descriptor to Configuration descriptor */
  __USBD_CMPSIT_SET_EP((pdev->tclasslist[pdev->classId].Eps[1].add), \
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681a      	ldr	r2, [r3, #0]
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	4413      	add	r3, r2
 80092ae:	461a      	mov	r2, r3
 80092b0:	4b26      	ldr	r3, [pc, #152]	@ (800934c <USBD_CMPSIT_CDCDesc+0x478>)
 80092b2:	601a      	str	r2, [r3, #0]
 80092b4:	4b25      	ldr	r3, [pc, #148]	@ (800934c <USBD_CMPSIT_CDCDesc+0x478>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	2207      	movs	r2, #7
 80092ba:	701a      	strb	r2, [r3, #0]
 80092bc:	4b23      	ldr	r3, [pc, #140]	@ (800934c <USBD_CMPSIT_CDCDesc+0x478>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	2205      	movs	r2, #5
 80092c2:	705a      	strb	r2, [r3, #1]
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 80092ca:	4b20      	ldr	r3, [pc, #128]	@ (800934c <USBD_CMPSIT_CDCDesc+0x478>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	68f9      	ldr	r1, [r7, #12]
 80092d0:	202c      	movs	r0, #44	@ 0x2c
 80092d2:	fb00 f202 	mul.w	r2, r0, r2
 80092d6:	440a      	add	r2, r1
 80092d8:	f502 723f 	add.w	r2, r2, #764	@ 0x2fc
 80092dc:	7812      	ldrb	r2, [r2, #0]
 80092de:	709a      	strb	r2, [r3, #2]
 80092e0:	4b1a      	ldr	r3, [pc, #104]	@ (800934c <USBD_CMPSIT_CDCDesc+0x478>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	2202      	movs	r2, #2
 80092e6:	70da      	strb	r2, [r3, #3]
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80092ee:	68fa      	ldr	r2, [r7, #12]
 80092f0:	212c      	movs	r1, #44	@ 0x2c
 80092f2:	fb01 f303 	mul.w	r3, r1, r3
 80092f6:	4413      	add	r3, r2
 80092f8:	f503 7344 	add.w	r3, r3, #784	@ 0x310
 80092fc:	681a      	ldr	r2, [r3, #0]
 80092fe:	4b13      	ldr	r3, [pc, #76]	@ (800934c <USBD_CMPSIT_CDCDesc+0x478>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	b292      	uxth	r2, r2
 8009304:	809a      	strh	r2, [r3, #4]
 8009306:	78fb      	ldrb	r3, [r7, #3]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d104      	bne.n	8009316 <USBD_CMPSIT_CDCDesc+0x442>
 800930c:	4b0f      	ldr	r3, [pc, #60]	@ (800934c <USBD_CMPSIT_CDCDesc+0x478>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	2200      	movs	r2, #0
 8009312:	719a      	strb	r2, [r3, #6]
 8009314:	e003      	b.n	800931e <USBD_CMPSIT_CDCDesc+0x44a>
 8009316:	4b0d      	ldr	r3, [pc, #52]	@ (800934c <USBD_CMPSIT_CDCDesc+0x478>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	2200      	movs	r2, #0
 800931c:	719a      	strb	r2, [r3, #6]
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	1dda      	adds	r2, r3, #7
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	601a      	str	r2, [r3, #0]
                       (USBD_EP_TYPE_BULK), (pdev->tclasslist[pdev->classId].CurrPcktSze), (0U), (0U));

  /* Update Config Descriptor and IAD descriptor */
  ((USBD_ConfigDescTypeDef *)pConf)->bNumInterfaces += 2U;
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	791a      	ldrb	r2, [r3, #4]
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	3202      	adds	r2, #2
 8009330:	b2d2      	uxtb	r2, r2
 8009332:	711a      	strb	r2, [r3, #4]
  ((USBD_ConfigDescTypeDef *)pConf)->wTotalLength = (uint16_t)(*Sze);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681a      	ldr	r2, [r3, #0]
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	b292      	uxth	r2, r2
 800933c:	805a      	strh	r2, [r3, #2]
}
 800933e:	bf00      	nop
 8009340:	3714      	adds	r7, #20
 8009342:	46bd      	mov	sp, r7
 8009344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009348:	4770      	bx	lr
 800934a:	bf00      	nop
 800934c:	20000b64 	.word	0x20000b64
 8009350:	20000b50 	.word	0x20000b50

08009354 <USBD_CMPSIT_CUSTOMHIDDesc>:
  * @param  pConf: Configuration descriptor pointer
  * @param  Sze: pointer to the current configuration descriptor size
  * @retval None
  */
static void  USBD_CMPSIT_CUSTOMHIDDesc(USBD_HandleTypeDef *pdev, uint32_t pConf, __IO uint32_t *Sze, uint8_t speed)
{
 8009354:	b480      	push	{r7}
 8009356:	b085      	sub	sp, #20
 8009358:	af00      	add	r7, sp, #0
 800935a:	60f8      	str	r0, [r7, #12]
 800935c:	60b9      	str	r1, [r7, #8]
 800935e:	607a      	str	r2, [r7, #4]
 8009360:	70fb      	strb	r3, [r7, #3]
  static USBD_IfDescTypeDef *pIfDesc;
  static USBD_EpDescTypeDef *pEpDesc;
  static USBD_DescTypeDef *pDesc;

  /* Control Interface Descriptor */
  __USBD_CMPSIT_SET_IF(pdev->tclasslist[pdev->classId].Ifs[0],  0U, 2U, 3U, 0U, 0U, 0U);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681a      	ldr	r2, [r3, #0]
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	4413      	add	r3, r2
 800936a:	461a      	mov	r2, r3
 800936c:	4b76      	ldr	r3, [pc, #472]	@ (8009548 <USBD_CMPSIT_CUSTOMHIDDesc+0x1f4>)
 800936e:	601a      	str	r2, [r3, #0]
 8009370:	4b75      	ldr	r3, [pc, #468]	@ (8009548 <USBD_CMPSIT_CUSTOMHIDDesc+0x1f4>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	2209      	movs	r2, #9
 8009376:	701a      	strb	r2, [r3, #0]
 8009378:	4b73      	ldr	r3, [pc, #460]	@ (8009548 <USBD_CMPSIT_CUSTOMHIDDesc+0x1f4>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	2204      	movs	r2, #4
 800937e:	705a      	strb	r2, [r3, #1]
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 8009386:	4b70      	ldr	r3, [pc, #448]	@ (8009548 <USBD_CMPSIT_CUSTOMHIDDesc+0x1f4>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	68f9      	ldr	r1, [r7, #12]
 800938c:	202c      	movs	r0, #44	@ 0x2c
 800938e:	fb00 f202 	mul.w	r2, r0, r2
 8009392:	440a      	add	r2, r1
 8009394:	f502 7243 	add.w	r2, r2, #780	@ 0x30c
 8009398:	7812      	ldrb	r2, [r2, #0]
 800939a:	709a      	strb	r2, [r3, #2]
 800939c:	4b6a      	ldr	r3, [pc, #424]	@ (8009548 <USBD_CMPSIT_CUSTOMHIDDesc+0x1f4>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	2200      	movs	r2, #0
 80093a2:	70da      	strb	r2, [r3, #3]
 80093a4:	4b68      	ldr	r3, [pc, #416]	@ (8009548 <USBD_CMPSIT_CUSTOMHIDDesc+0x1f4>)
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	2202      	movs	r2, #2
 80093aa:	711a      	strb	r2, [r3, #4]
 80093ac:	4b66      	ldr	r3, [pc, #408]	@ (8009548 <USBD_CMPSIT_CUSTOMHIDDesc+0x1f4>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	2203      	movs	r2, #3
 80093b2:	715a      	strb	r2, [r3, #5]
 80093b4:	4b64      	ldr	r3, [pc, #400]	@ (8009548 <USBD_CMPSIT_CUSTOMHIDDesc+0x1f4>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	2200      	movs	r2, #0
 80093ba:	719a      	strb	r2, [r3, #6]
 80093bc:	4b62      	ldr	r3, [pc, #392]	@ (8009548 <USBD_CMPSIT_CUSTOMHIDDesc+0x1f4>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	2200      	movs	r2, #0
 80093c2:	71da      	strb	r2, [r3, #7]
 80093c4:	4b60      	ldr	r3, [pc, #384]	@ (8009548 <USBD_CMPSIT_CUSTOMHIDDesc+0x1f4>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	2200      	movs	r2, #0
 80093ca:	721a      	strb	r2, [r3, #8]
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f103 0209 	add.w	r2, r3, #9
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	601a      	str	r2, [r3, #0]

  /* Descriptor of CUSTOM_HID */
  pDesc = ((USBD_DescTypeDef *)((uint32_t)pConf + *Sze));
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681a      	ldr	r2, [r3, #0]
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	4413      	add	r3, r2
 80093e0:	461a      	mov	r2, r3
 80093e2:	4b5a      	ldr	r3, [pc, #360]	@ (800954c <USBD_CMPSIT_CUSTOMHIDDesc+0x1f8>)
 80093e4:	601a      	str	r2, [r3, #0]
  pDesc->bLength = 0x09U;
 80093e6:	4b59      	ldr	r3, [pc, #356]	@ (800954c <USBD_CMPSIT_CUSTOMHIDDesc+0x1f8>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	2209      	movs	r2, #9
 80093ec:	701a      	strb	r2, [r3, #0]
  pDesc->bDescriptorTypeCHID = CUSTOM_HID_DESCRIPTOR_TYPE;
 80093ee:	4b57      	ldr	r3, [pc, #348]	@ (800954c <USBD_CMPSIT_CUSTOMHIDDesc+0x1f8>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	2221      	movs	r2, #33	@ 0x21
 80093f4:	705a      	strb	r2, [r3, #1]
  pDesc->bcdCUSTOM_HID = 0x0111U;
 80093f6:	4b55      	ldr	r3, [pc, #340]	@ (800954c <USBD_CMPSIT_CUSTOMHIDDesc+0x1f8>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	2200      	movs	r2, #0
 80093fc:	f042 0211 	orr.w	r2, r2, #17
 8009400:	709a      	strb	r2, [r3, #2]
 8009402:	2200      	movs	r2, #0
 8009404:	f042 0201 	orr.w	r2, r2, #1
 8009408:	70da      	strb	r2, [r3, #3]
  pDesc->bCountryCode = 0x00U;
 800940a:	4b50      	ldr	r3, [pc, #320]	@ (800954c <USBD_CMPSIT_CUSTOMHIDDesc+0x1f8>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	2200      	movs	r2, #0
 8009410:	711a      	strb	r2, [r3, #4]
  pDesc->bNumDescriptors = 0x01U;
 8009412:	4b4e      	ldr	r3, [pc, #312]	@ (800954c <USBD_CMPSIT_CUSTOMHIDDesc+0x1f8>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	2201      	movs	r2, #1
 8009418:	715a      	strb	r2, [r3, #5]
  pDesc->bDescriptorType = 0x22U;
 800941a:	4b4c      	ldr	r3, [pc, #304]	@ (800954c <USBD_CMPSIT_CUSTOMHIDDesc+0x1f8>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	2222      	movs	r2, #34	@ 0x22
 8009420:	719a      	strb	r2, [r3, #6]
  pDesc->wItemLength = USBD_CUSTOM_HID_REPORT_DESC_SIZE;
 8009422:	4b4a      	ldr	r3, [pc, #296]	@ (800954c <USBD_CMPSIT_CUSTOMHIDDesc+0x1f8>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	2200      	movs	r2, #0
 8009428:	f042 021e 	orr.w	r2, r2, #30
 800942c:	71da      	strb	r2, [r3, #7]
 800942e:	2200      	movs	r2, #0
 8009430:	721a      	strb	r2, [r3, #8]
  *Sze += (uint32_t)sizeof(USBD_DescTypeDef);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f103 0209 	add.w	r2, r3, #9
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	601a      	str	r2, [r3, #0]

  /* Descriptor of Custom HID endpoints */
  /* Append Endpoint descriptor to Configuration descriptor */
  __USBD_CMPSIT_SET_EP(pdev->tclasslist[pdev->classId].Eps[0].add, \
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681a      	ldr	r2, [r3, #0]
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	4413      	add	r3, r2
 8009446:	461a      	mov	r2, r3
 8009448:	4b41      	ldr	r3, [pc, #260]	@ (8009550 <USBD_CMPSIT_CUSTOMHIDDesc+0x1fc>)
 800944a:	601a      	str	r2, [r3, #0]
 800944c:	4b40      	ldr	r3, [pc, #256]	@ (8009550 <USBD_CMPSIT_CUSTOMHIDDesc+0x1fc>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	2207      	movs	r2, #7
 8009452:	701a      	strb	r2, [r3, #0]
 8009454:	4b3e      	ldr	r3, [pc, #248]	@ (8009550 <USBD_CMPSIT_CUSTOMHIDDesc+0x1fc>)
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	2205      	movs	r2, #5
 800945a:	705a      	strb	r2, [r3, #1]
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 8009462:	4b3b      	ldr	r3, [pc, #236]	@ (8009550 <USBD_CMPSIT_CUSTOMHIDDesc+0x1fc>)
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	68f9      	ldr	r1, [r7, #12]
 8009468:	202c      	movs	r0, #44	@ 0x2c
 800946a:	fb00 f202 	mul.w	r2, r0, r2
 800946e:	440a      	add	r2, r1
 8009470:	f502 723e 	add.w	r2, r2, #760	@ 0x2f8
 8009474:	7812      	ldrb	r2, [r2, #0]
 8009476:	709a      	strb	r2, [r3, #2]
 8009478:	4b35      	ldr	r3, [pc, #212]	@ (8009550 <USBD_CMPSIT_CUSTOMHIDDesc+0x1fc>)
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	2203      	movs	r2, #3
 800947e:	70da      	strb	r2, [r3, #3]
 8009480:	4b33      	ldr	r3, [pc, #204]	@ (8009550 <USBD_CMPSIT_CUSTOMHIDDesc+0x1fc>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	2200      	movs	r2, #0
 8009486:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800948a:	711a      	strb	r2, [r3, #4]
 800948c:	2200      	movs	r2, #0
 800948e:	715a      	strb	r2, [r3, #5]
 8009490:	78fb      	ldrb	r3, [r7, #3]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d104      	bne.n	80094a0 <USBD_CMPSIT_CUSTOMHIDDesc+0x14c>
 8009496:	4b2e      	ldr	r3, [pc, #184]	@ (8009550 <USBD_CMPSIT_CUSTOMHIDDesc+0x1fc>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	2205      	movs	r2, #5
 800949c:	719a      	strb	r2, [r3, #6]
 800949e:	e003      	b.n	80094a8 <USBD_CMPSIT_CUSTOMHIDDesc+0x154>
 80094a0:	4b2b      	ldr	r3, [pc, #172]	@ (8009550 <USBD_CMPSIT_CUSTOMHIDDesc+0x1fc>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	2205      	movs	r2, #5
 80094a6:	719a      	strb	r2, [r3, #6]
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	1dda      	adds	r2, r3, #7
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	601a      	str	r2, [r3, #0]
                       USBD_EP_TYPE_INTR, CUSTOM_HID_EPIN_SIZE, CUSTOM_HID_HS_BINTERVAL, CUSTOM_HID_FS_BINTERVAL);

  /* Append Endpoint descriptor to Configuration descriptor */
  __USBD_CMPSIT_SET_EP(pdev->tclasslist[pdev->classId].Eps[1].add, \
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681a      	ldr	r2, [r3, #0]
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	4413      	add	r3, r2
 80094ba:	461a      	mov	r2, r3
 80094bc:	4b24      	ldr	r3, [pc, #144]	@ (8009550 <USBD_CMPSIT_CUSTOMHIDDesc+0x1fc>)
 80094be:	601a      	str	r2, [r3, #0]
 80094c0:	4b23      	ldr	r3, [pc, #140]	@ (8009550 <USBD_CMPSIT_CUSTOMHIDDesc+0x1fc>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	2207      	movs	r2, #7
 80094c6:	701a      	strb	r2, [r3, #0]
 80094c8:	4b21      	ldr	r3, [pc, #132]	@ (8009550 <USBD_CMPSIT_CUSTOMHIDDesc+0x1fc>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	2205      	movs	r2, #5
 80094ce:	705a      	strb	r2, [r3, #1]
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 80094d6:	4b1e      	ldr	r3, [pc, #120]	@ (8009550 <USBD_CMPSIT_CUSTOMHIDDesc+0x1fc>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	68f9      	ldr	r1, [r7, #12]
 80094dc:	202c      	movs	r0, #44	@ 0x2c
 80094de:	fb00 f202 	mul.w	r2, r0, r2
 80094e2:	440a      	add	r2, r1
 80094e4:	f502 723f 	add.w	r2, r2, #764	@ 0x2fc
 80094e8:	7812      	ldrb	r2, [r2, #0]
 80094ea:	709a      	strb	r2, [r3, #2]
 80094ec:	4b18      	ldr	r3, [pc, #96]	@ (8009550 <USBD_CMPSIT_CUSTOMHIDDesc+0x1fc>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	2203      	movs	r2, #3
 80094f2:	70da      	strb	r2, [r3, #3]
 80094f4:	4b16      	ldr	r3, [pc, #88]	@ (8009550 <USBD_CMPSIT_CUSTOMHIDDesc+0x1fc>)
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	2200      	movs	r2, #0
 80094fa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80094fe:	711a      	strb	r2, [r3, #4]
 8009500:	2200      	movs	r2, #0
 8009502:	715a      	strb	r2, [r3, #5]
 8009504:	78fb      	ldrb	r3, [r7, #3]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d104      	bne.n	8009514 <USBD_CMPSIT_CUSTOMHIDDesc+0x1c0>
 800950a:	4b11      	ldr	r3, [pc, #68]	@ (8009550 <USBD_CMPSIT_CUSTOMHIDDesc+0x1fc>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	2205      	movs	r2, #5
 8009510:	719a      	strb	r2, [r3, #6]
 8009512:	e003      	b.n	800951c <USBD_CMPSIT_CUSTOMHIDDesc+0x1c8>
 8009514:	4b0e      	ldr	r3, [pc, #56]	@ (8009550 <USBD_CMPSIT_CUSTOMHIDDesc+0x1fc>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	2205      	movs	r2, #5
 800951a:	719a      	strb	r2, [r3, #6]
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	1dda      	adds	r2, r3, #7
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	601a      	str	r2, [r3, #0]
                       USBD_EP_TYPE_INTR, CUSTOM_HID_EPIN_SIZE, CUSTOM_HID_HS_BINTERVAL, CUSTOM_HID_FS_BINTERVAL);

  /* Update Config Descriptor and IAD descriptor */
  ((USBD_ConfigDescTypeDef *)pConf)->bNumInterfaces += 1U;
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	791a      	ldrb	r2, [r3, #4]
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	3201      	adds	r2, #1
 800952e:	b2d2      	uxtb	r2, r2
 8009530:	711a      	strb	r2, [r3, #4]
  ((USBD_ConfigDescTypeDef *)pConf)->wTotalLength = (uint16_t)(*Sze);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681a      	ldr	r2, [r3, #0]
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	b292      	uxth	r2, r2
 800953a:	805a      	strh	r2, [r3, #2]
}
 800953c:	bf00      	nop
 800953e:	3714      	adds	r7, #20
 8009540:	46bd      	mov	sp, r7
 8009542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009546:	4770      	bx	lr
 8009548:	20000b68 	.word	0x20000b68
 800954c:	20000b6c 	.word	0x20000b6c
 8009550:	20000b70 	.word	0x20000b70

08009554 <USBD_CMPSIT_SetClassID>:
  * @param  Class: Class type, can be CLASS_TYPE_NONE if requested to find class from setup request
  * @param  Instance: Instance number of the class (0 if first/unique instance, >0 otherwise)
  * @retval The Class ID, The pdev->classId is set with the value of the selected class ID.
  */
uint32_t  USBD_CMPSIT_SetClassID(USBD_HandleTypeDef *pdev, USBD_CompositeClassTypeDef Class, uint32_t Instance)
{
 8009554:	b480      	push	{r7}
 8009556:	b087      	sub	sp, #28
 8009558:	af00      	add	r7, sp, #0
 800955a:	60f8      	str	r0, [r7, #12]
 800955c:	460b      	mov	r3, r1
 800955e:	607a      	str	r2, [r7, #4]
 8009560:	72fb      	strb	r3, [r7, #11]
  uint32_t idx;
  uint32_t inst = 0U;
 8009562:	2300      	movs	r3, #0
 8009564:	613b      	str	r3, [r7, #16]

  /* Unroll all already activated classes */
  for (idx = 0U; idx < pdev->NumClasses; idx++)
 8009566:	2300      	movs	r3, #0
 8009568:	617b      	str	r3, [r7, #20]
 800956a:	e026      	b.n	80095ba <USBD_CMPSIT_SetClassID+0x66>
  {
    /* Check if the class correspond to the requested type and if it is active */
    if (((USBD_CompositeClassTypeDef)(pdev->tclasslist[idx].ClassType) == Class) &&
 800956c:	68fa      	ldr	r2, [r7, #12]
 800956e:	697b      	ldr	r3, [r7, #20]
 8009570:	212c      	movs	r1, #44	@ 0x2c
 8009572:	fb01 f303 	mul.w	r3, r1, r3
 8009576:	4413      	add	r3, r2
 8009578:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 800957c:	781b      	ldrb	r3, [r3, #0]
 800957e:	7afa      	ldrb	r2, [r7, #11]
 8009580:	429a      	cmp	r2, r3
 8009582:	d117      	bne.n	80095b4 <USBD_CMPSIT_SetClassID+0x60>
        ((pdev->tclasslist[idx].Active) == 1U))
 8009584:	68fa      	ldr	r2, [r7, #12]
 8009586:	697b      	ldr	r3, [r7, #20]
 8009588:	212c      	movs	r1, #44	@ 0x2c
 800958a:	fb01 f303 	mul.w	r3, r1, r3
 800958e:	4413      	add	r3, r2
 8009590:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8009594:	681b      	ldr	r3, [r3, #0]
    if (((USBD_CompositeClassTypeDef)(pdev->tclasslist[idx].ClassType) == Class) &&
 8009596:	2b01      	cmp	r3, #1
 8009598:	d10c      	bne.n	80095b4 <USBD_CMPSIT_SetClassID+0x60>
    {
      if (inst == Instance)
 800959a:	693a      	ldr	r2, [r7, #16]
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	429a      	cmp	r2, r3
 80095a0:	d105      	bne.n	80095ae <USBD_CMPSIT_SetClassID+0x5a>
      {
        /* Set the new class ID */
        pdev->classId = idx;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	697a      	ldr	r2, [r7, #20]
 80095a6:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0

        /* Return the class ID value */
        return (idx);
 80095aa:	697b      	ldr	r3, [r7, #20]
 80095ac:	e00c      	b.n	80095c8 <USBD_CMPSIT_SetClassID+0x74>
      }
      else
      {
        /* Increment instance index and look for next instance */
        inst++;
 80095ae:	693b      	ldr	r3, [r7, #16]
 80095b0:	3301      	adds	r3, #1
 80095b2:	613b      	str	r3, [r7, #16]
  for (idx = 0U; idx < pdev->NumClasses; idx++)
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	3301      	adds	r3, #1
 80095b8:	617b      	str	r3, [r7, #20]
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	f8d3 32e4 	ldr.w	r3, [r3, #740]	@ 0x2e4
 80095c0:	697a      	ldr	r2, [r7, #20]
 80095c2:	429a      	cmp	r2, r3
 80095c4:	d3d2      	bcc.n	800956c <USBD_CMPSIT_SetClassID+0x18>
      }
    }
  }

  /* No class found, return 0xFF */
  return 0xFFU;
 80095c6:	23ff      	movs	r3, #255	@ 0xff
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	371c      	adds	r7, #28
 80095cc:	46bd      	mov	sp, r7
 80095ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d2:	4770      	bx	lr

080095d4 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b084      	sub	sp, #16
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
 80095dc:	460b      	mov	r3, r1
 80095de:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 80095e0:	2054      	movs	r0, #84	@ 0x54
 80095e2:	f000 fd0f 	bl	800a004 <USBD_static_malloc>
 80095e6:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d10a      	bne.n	8009604 <USBD_CUSTOM_HID_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80095f4:	687a      	ldr	r2, [r7, #4]
 80095f6:	33b0      	adds	r3, #176	@ 0xb0
 80095f8:	009b      	lsls	r3, r3, #2
 80095fa:	4413      	add	r3, r2
 80095fc:	2200      	movs	r2, #0
 80095fe:	605a      	str	r2, [r3, #4]
    return (uint8_t)USBD_EMEM;
 8009600:	2302      	movs	r3, #2
 8009602:	e0a7      	b.n	8009754 <USBD_CUSTOM_HID_Init+0x180>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800960a:	687a      	ldr	r2, [r7, #4]
 800960c:	33b0      	adds	r3, #176	@ 0xb0
 800960e:	009b      	lsls	r3, r3, #2
 8009610:	4413      	add	r3, r2
 8009612:	68fa      	ldr	r2, [r7, #12]
 8009614:	605a      	str	r2, [r3, #4]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800961c:	687a      	ldr	r2, [r7, #4]
 800961e:	33b0      	adds	r3, #176	@ 0xb0
 8009620:	009b      	lsls	r3, r3, #2
 8009622:	4413      	add	r3, r2
 8009624:	685a      	ldr	r2, [r3, #4]
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8009632:	b2db      	uxtb	r3, r3
 8009634:	2203      	movs	r2, #3
 8009636:	2180      	movs	r1, #128	@ 0x80
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f001 f98f 	bl	800a95c <USBD_CoreGetEPAdd>
 800963e:	4603      	mov	r3, r0
 8009640:	461a      	mov	r2, r3
 8009642:	4b46      	ldr	r3, [pc, #280]	@ (800975c <USBD_CUSTOM_HID_Init+0x188>)
 8009644:	701a      	strb	r2, [r3, #0]
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800964c:	b2db      	uxtb	r3, r3
 800964e:	2203      	movs	r2, #3
 8009650:	2100      	movs	r1, #0
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f001 f982 	bl	800a95c <USBD_CoreGetEPAdd>
 8009658:	4603      	mov	r3, r0
 800965a:	461a      	mov	r2, r3
 800965c:	4b40      	ldr	r3, [pc, #256]	@ (8009760 <USBD_CUSTOM_HID_Init+0x18c>)
 800965e:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	7c1b      	ldrb	r3, [r3, #16]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d11b      	bne.n	80096a0 <USBD_CUSTOM_HID_Init+0xcc>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8009668:	4b3c      	ldr	r3, [pc, #240]	@ (800975c <USBD_CUSTOM_HID_Init+0x188>)
 800966a:	781b      	ldrb	r3, [r3, #0]
 800966c:	f003 020f 	and.w	r2, r3, #15
 8009670:	6879      	ldr	r1, [r7, #4]
 8009672:	4613      	mov	r3, r2
 8009674:	009b      	lsls	r3, r3, #2
 8009676:	4413      	add	r3, r2
 8009678:	009b      	lsls	r3, r3, #2
 800967a:	440b      	add	r3, r1
 800967c:	3326      	adds	r3, #38	@ 0x26
 800967e:	2205      	movs	r2, #5
 8009680:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8009682:	4b37      	ldr	r3, [pc, #220]	@ (8009760 <USBD_CUSTOM_HID_Init+0x18c>)
 8009684:	781b      	ldrb	r3, [r3, #0]
 8009686:	f003 020f 	and.w	r2, r3, #15
 800968a:	6879      	ldr	r1, [r7, #4]
 800968c:	4613      	mov	r3, r2
 800968e:	009b      	lsls	r3, r3, #2
 8009690:	4413      	add	r3, r2
 8009692:	009b      	lsls	r3, r3, #2
 8009694:	440b      	add	r3, r1
 8009696:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 800969a:	2205      	movs	r2, #5
 800969c:	801a      	strh	r2, [r3, #0]
 800969e:	e01a      	b.n	80096d6 <USBD_CUSTOM_HID_Init+0x102>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80096a0:	4b2e      	ldr	r3, [pc, #184]	@ (800975c <USBD_CUSTOM_HID_Init+0x188>)
 80096a2:	781b      	ldrb	r3, [r3, #0]
 80096a4:	f003 020f 	and.w	r2, r3, #15
 80096a8:	6879      	ldr	r1, [r7, #4]
 80096aa:	4613      	mov	r3, r2
 80096ac:	009b      	lsls	r3, r3, #2
 80096ae:	4413      	add	r3, r2
 80096b0:	009b      	lsls	r3, r3, #2
 80096b2:	440b      	add	r3, r1
 80096b4:	3326      	adds	r3, #38	@ 0x26
 80096b6:	2205      	movs	r2, #5
 80096b8:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80096ba:	4b29      	ldr	r3, [pc, #164]	@ (8009760 <USBD_CUSTOM_HID_Init+0x18c>)
 80096bc:	781b      	ldrb	r3, [r3, #0]
 80096be:	f003 020f 	and.w	r2, r3, #15
 80096c2:	6879      	ldr	r1, [r7, #4]
 80096c4:	4613      	mov	r3, r2
 80096c6:	009b      	lsls	r3, r3, #2
 80096c8:	4413      	add	r3, r2
 80096ca:	009b      	lsls	r3, r3, #2
 80096cc:	440b      	add	r3, r1
 80096ce:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 80096d2:	2205      	movs	r2, #5
 80096d4:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 80096d6:	4b21      	ldr	r3, [pc, #132]	@ (800975c <USBD_CUSTOM_HID_Init+0x188>)
 80096d8:	7819      	ldrb	r1, [r3, #0]
 80096da:	2340      	movs	r3, #64	@ 0x40
 80096dc:	2203      	movs	r2, #3
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f000 fb97 	bl	8009e12 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 80096e4:	4b1d      	ldr	r3, [pc, #116]	@ (800975c <USBD_CUSTOM_HID_Init+0x188>)
 80096e6:	781b      	ldrb	r3, [r3, #0]
 80096e8:	f003 020f 	and.w	r2, r3, #15
 80096ec:	6879      	ldr	r1, [r7, #4]
 80096ee:	4613      	mov	r3, r2
 80096f0:	009b      	lsls	r3, r3, #2
 80096f2:	4413      	add	r3, r2
 80096f4:	009b      	lsls	r3, r3, #2
 80096f6:	440b      	add	r3, r1
 80096f8:	3324      	adds	r3, #36	@ 0x24
 80096fa:	2201      	movs	r2, #1
 80096fc:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 80096fe:	4b18      	ldr	r3, [pc, #96]	@ (8009760 <USBD_CUSTOM_HID_Init+0x18c>)
 8009700:	7819      	ldrb	r1, [r3, #0]
 8009702:	2340      	movs	r3, #64	@ 0x40
 8009704:	2203      	movs	r2, #3
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f000 fb83 	bl	8009e12 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 800970c:	4b14      	ldr	r3, [pc, #80]	@ (8009760 <USBD_CUSTOM_HID_Init+0x18c>)
 800970e:	781b      	ldrb	r3, [r3, #0]
 8009710:	f003 020f 	and.w	r2, r3, #15
 8009714:	6879      	ldr	r1, [r7, #4]
 8009716:	4613      	mov	r3, r2
 8009718:	009b      	lsls	r3, r3, #2
 800971a:	4413      	add	r3, r2
 800971c:	009b      	lsls	r3, r3, #2
 800971e:	440b      	add	r3, r1
 8009720:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009724:	2201      	movs	r2, #1
 8009726:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	2200      	movs	r2, #0
 800972c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8009736:	687a      	ldr	r2, [r7, #4]
 8009738:	33b2      	adds	r3, #178	@ 0xb2
 800973a:	009b      	lsls	r3, r3, #2
 800973c:	4413      	add	r3, r2
 800973e:	685b      	ldr	r3, [r3, #4]
 8009740:	685b      	ldr	r3, [r3, #4]
 8009742:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8009744:	4b06      	ldr	r3, [pc, #24]	@ (8009760 <USBD_CUSTOM_HID_Init+0x18c>)
 8009746:	7819      	ldrb	r1, [r3, #0]
 8009748:	68fa      	ldr	r2, [r7, #12]
 800974a:	2340      	movs	r3, #64	@ 0x40
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f000 fc2b 	bl	8009fa8 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
 8009752:	2300      	movs	r3, #0
}
 8009754:	4618      	mov	r0, r3
 8009756:	3710      	adds	r7, #16
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}
 800975c:	200000f5 	.word	0x200000f5
 8009760:	200000f6 	.word	0x200000f6

08009764 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b082      	sub	sp, #8
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
 800976c:	460b      	mov	r3, r1
 800976e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8009776:	b2db      	uxtb	r3, r3
 8009778:	2203      	movs	r2, #3
 800977a:	2180      	movs	r1, #128	@ 0x80
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f001 f8ed 	bl	800a95c <USBD_CoreGetEPAdd>
 8009782:	4603      	mov	r3, r0
 8009784:	461a      	mov	r2, r3
 8009786:	4b41      	ldr	r3, [pc, #260]	@ (800988c <USBD_CUSTOM_HID_DeInit+0x128>)
 8009788:	701a      	strb	r2, [r3, #0]
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8009790:	b2db      	uxtb	r3, r3
 8009792:	2203      	movs	r2, #3
 8009794:	2100      	movs	r1, #0
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f001 f8e0 	bl	800a95c <USBD_CoreGetEPAdd>
 800979c:	4603      	mov	r3, r0
 800979e:	461a      	mov	r2, r3
 80097a0:	4b3b      	ldr	r3, [pc, #236]	@ (8009890 <USBD_CUSTOM_HID_DeInit+0x12c>)
 80097a2:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 80097a4:	4b39      	ldr	r3, [pc, #228]	@ (800988c <USBD_CUSTOM_HID_DeInit+0x128>)
 80097a6:	781b      	ldrb	r3, [r3, #0]
 80097a8:	4619      	mov	r1, r3
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f000 fb51 	bl	8009e52 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 80097b0:	4b36      	ldr	r3, [pc, #216]	@ (800988c <USBD_CUSTOM_HID_DeInit+0x128>)
 80097b2:	781b      	ldrb	r3, [r3, #0]
 80097b4:	f003 020f 	and.w	r2, r3, #15
 80097b8:	6879      	ldr	r1, [r7, #4]
 80097ba:	4613      	mov	r3, r2
 80097bc:	009b      	lsls	r3, r3, #2
 80097be:	4413      	add	r3, r2
 80097c0:	009b      	lsls	r3, r3, #2
 80097c2:	440b      	add	r3, r1
 80097c4:	3324      	adds	r3, #36	@ 0x24
 80097c6:	2200      	movs	r2, #0
 80097c8:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 80097ca:	4b30      	ldr	r3, [pc, #192]	@ (800988c <USBD_CUSTOM_HID_DeInit+0x128>)
 80097cc:	781b      	ldrb	r3, [r3, #0]
 80097ce:	f003 020f 	and.w	r2, r3, #15
 80097d2:	6879      	ldr	r1, [r7, #4]
 80097d4:	4613      	mov	r3, r2
 80097d6:	009b      	lsls	r3, r3, #2
 80097d8:	4413      	add	r3, r2
 80097da:	009b      	lsls	r3, r3, #2
 80097dc:	440b      	add	r3, r1
 80097de:	3326      	adds	r3, #38	@ 0x26
 80097e0:	2200      	movs	r2, #0
 80097e2:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 80097e4:	4b2a      	ldr	r3, [pc, #168]	@ (8009890 <USBD_CUSTOM_HID_DeInit+0x12c>)
 80097e6:	781b      	ldrb	r3, [r3, #0]
 80097e8:	4619      	mov	r1, r3
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f000 fb31 	bl	8009e52 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 80097f0:	4b27      	ldr	r3, [pc, #156]	@ (8009890 <USBD_CUSTOM_HID_DeInit+0x12c>)
 80097f2:	781b      	ldrb	r3, [r3, #0]
 80097f4:	f003 020f 	and.w	r2, r3, #15
 80097f8:	6879      	ldr	r1, [r7, #4]
 80097fa:	4613      	mov	r3, r2
 80097fc:	009b      	lsls	r3, r3, #2
 80097fe:	4413      	add	r3, r2
 8009800:	009b      	lsls	r3, r3, #2
 8009802:	440b      	add	r3, r1
 8009804:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009808:	2200      	movs	r2, #0
 800980a:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 800980c:	4b20      	ldr	r3, [pc, #128]	@ (8009890 <USBD_CUSTOM_HID_DeInit+0x12c>)
 800980e:	781b      	ldrb	r3, [r3, #0]
 8009810:	f003 020f 	and.w	r2, r3, #15
 8009814:	6879      	ldr	r1, [r7, #4]
 8009816:	4613      	mov	r3, r2
 8009818:	009b      	lsls	r3, r3, #2
 800981a:	4413      	add	r3, r2
 800981c:	009b      	lsls	r3, r3, #2
 800981e:	440b      	add	r3, r1
 8009820:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8009824:	2200      	movs	r2, #0
 8009826:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800982e:	687a      	ldr	r2, [r7, #4]
 8009830:	33b0      	adds	r3, #176	@ 0xb0
 8009832:	009b      	lsls	r3, r3, #2
 8009834:	4413      	add	r3, r2
 8009836:	685b      	ldr	r3, [r3, #4]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d021      	beq.n	8009880 <USBD_CUSTOM_HID_DeInit+0x11c>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8009842:	687a      	ldr	r2, [r7, #4]
 8009844:	33b2      	adds	r3, #178	@ 0xb2
 8009846:	009b      	lsls	r3, r3, #2
 8009848:	4413      	add	r3, r2
 800984a:	685b      	ldr	r3, [r3, #4]
 800984c:	689b      	ldr	r3, [r3, #8]
 800984e:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8009856:	687a      	ldr	r2, [r7, #4]
 8009858:	33b0      	adds	r3, #176	@ 0xb0
 800985a:	009b      	lsls	r3, r3, #2
 800985c:	4413      	add	r3, r2
 800985e:	685b      	ldr	r3, [r3, #4]
 8009860:	4618      	mov	r0, r3
 8009862:	f000 fbdd 	bl	800a020 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800986c:	687a      	ldr	r2, [r7, #4]
 800986e:	33b0      	adds	r3, #176	@ 0xb0
 8009870:	009b      	lsls	r3, r3, #2
 8009872:	4413      	add	r3, r2
 8009874:	2200      	movs	r2, #0
 8009876:	605a      	str	r2, [r3, #4]
    pdev->pClassData = NULL;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2200      	movs	r2, #0
 800987c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  }

  return (uint8_t)USBD_OK;
 8009880:	2300      	movs	r3, #0
}
 8009882:	4618      	mov	r0, r3
 8009884:	3708      	adds	r7, #8
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}
 800988a:	bf00      	nop
 800988c:	200000f5 	.word	0x200000f5
 8009890:	200000f6 	.word	0x200000f6

08009894 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b088      	sub	sp, #32
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
 800989c:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80098a4:	687a      	ldr	r2, [r7, #4]
 80098a6:	33b0      	adds	r3, #176	@ 0xb0
 80098a8:	009b      	lsls	r3, r3, #2
 80098aa:	4413      	add	r3, r2
 80098ac:	685b      	ldr	r3, [r3, #4]
 80098ae:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 80098b0:	2300      	movs	r3, #0
 80098b2:	83fb      	strh	r3, [r7, #30]
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
  uint16_t ReportLength = 0U;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */
  uint8_t  *pbuf = NULL;
 80098b4:	2300      	movs	r3, #0
 80098b6:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 80098b8:	2300      	movs	r3, #0
 80098ba:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 80098bc:	2300      	movs	r3, #0
 80098be:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 80098c0:	693b      	ldr	r3, [r7, #16]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d101      	bne.n	80098ca <USBD_CUSTOM_HID_Setup+0x36>
  {
    return (uint8_t)USBD_FAIL;
 80098c6:	2303      	movs	r3, #3
 80098c8:	e0f7      	b.n	8009aba <USBD_CUSTOM_HID_Setup+0x226>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	781b      	ldrb	r3, [r3, #0]
 80098ce:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d055      	beq.n	8009982 <USBD_CUSTOM_HID_Setup+0xee>
 80098d6:	2b20      	cmp	r3, #32
 80098d8:	f040 80e7 	bne.w	8009aaa <USBD_CUSTOM_HID_Setup+0x216>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	785b      	ldrb	r3, [r3, #1]
 80098e0:	3b02      	subs	r3, #2
 80098e2:	2b09      	cmp	r3, #9
 80098e4:	d845      	bhi.n	8009972 <USBD_CUSTOM_HID_Setup+0xde>
 80098e6:	a201      	add	r2, pc, #4	@ (adr r2, 80098ec <USBD_CUSTOM_HID_Setup+0x58>)
 80098e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098ec:	08009945 	.word	0x08009945
 80098f0:	08009923 	.word	0x08009923
 80098f4:	08009973 	.word	0x08009973
 80098f8:	08009973 	.word	0x08009973
 80098fc:	08009973 	.word	0x08009973
 8009900:	08009973 	.word	0x08009973
 8009904:	08009973 	.word	0x08009973
 8009908:	08009955 	.word	0x08009955
 800990c:	08009933 	.word	0x08009933
 8009910:	08009915 	.word	0x08009915
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	885b      	ldrh	r3, [r3, #2]
 8009918:	b2db      	uxtb	r3, r3
 800991a:	461a      	mov	r2, r3
 800991c:	693b      	ldr	r3, [r7, #16]
 800991e:	641a      	str	r2, [r3, #64]	@ 0x40
          break;
 8009920:	e02e      	b.n	8009980 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8009922:	693b      	ldr	r3, [r7, #16]
 8009924:	3340      	adds	r3, #64	@ 0x40
 8009926:	2201      	movs	r2, #1
 8009928:	4619      	mov	r1, r3
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f002 f813 	bl	800b956 <USBD_CtlSendData>
          break;
 8009930:	e026      	b.n	8009980 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	885b      	ldrh	r3, [r3, #2]
 8009936:	0a1b      	lsrs	r3, r3, #8
 8009938:	b29b      	uxth	r3, r3
 800993a:	b2db      	uxtb	r3, r3
 800993c:	461a      	mov	r2, r3
 800993e:	693b      	ldr	r3, [r7, #16]
 8009940:	645a      	str	r2, [r3, #68]	@ 0x44
          break;
 8009942:	e01d      	b.n	8009980 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	3344      	adds	r3, #68	@ 0x44
 8009948:	2201      	movs	r2, #1
 800994a:	4619      	mov	r1, r3
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f002 f802 	bl	800b956 <USBD_CtlSendData>
          break;
 8009952:	e015      	b.n	8009980 <USBD_CUSTOM_HID_Setup+0xec>
            ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->CtrlReqComplete(req->bRequest,
                                                                                            req->wLength);
          }
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED
          hhid->IsReportAvailable = 1U;
 8009954:	693b      	ldr	r3, [r7, #16]
 8009956:	2201      	movs	r2, #1
 8009958:	64da      	str	r2, [r3, #76]	@ 0x4c
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 800995a:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	88db      	ldrh	r3, [r3, #6]
 8009960:	2b40      	cmp	r3, #64	@ 0x40
 8009962:	bf28      	it	cs
 8009964:	2340      	movcs	r3, #64	@ 0x40
 8009966:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8009968:	461a      	mov	r2, r3
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f002 f81f 	bl	800b9ae <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
 8009970:	e006      	b.n	8009980 <USBD_CUSTOM_HID_Setup+0xec>
          }
          break;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */

        default:
          USBD_CtlError(pdev, req);
 8009972:	6839      	ldr	r1, [r7, #0]
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	f001 fe70 	bl	800b65a <USBD_CtlError>
          ret = USBD_FAIL;
 800997a:	2303      	movs	r3, #3
 800997c:	75fb      	strb	r3, [r7, #23]
          break;
 800997e:	bf00      	nop
      }
      break;
 8009980:	e09a      	b.n	8009ab8 <USBD_CUSTOM_HID_Setup+0x224>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	785b      	ldrb	r3, [r3, #1]
 8009986:	2b0b      	cmp	r3, #11
 8009988:	f200 8086 	bhi.w	8009a98 <USBD_CUSTOM_HID_Setup+0x204>
 800998c:	a201      	add	r2, pc, #4	@ (adr r2, 8009994 <USBD_CUSTOM_HID_Setup+0x100>)
 800998e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009992:	bf00      	nop
 8009994:	080099c5 	.word	0x080099c5
 8009998:	08009aa7 	.word	0x08009aa7
 800999c:	08009a99 	.word	0x08009a99
 80099a0:	08009a99 	.word	0x08009a99
 80099a4:	08009a99 	.word	0x08009a99
 80099a8:	08009a99 	.word	0x08009a99
 80099ac:	080099ef 	.word	0x080099ef
 80099b0:	08009a99 	.word	0x08009a99
 80099b4:	08009a99 	.word	0x08009a99
 80099b8:	08009a99 	.word	0x08009a99
 80099bc:	08009a47 	.word	0x08009a47
 80099c0:	08009a71 	.word	0x08009a71
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099ca:	b2db      	uxtb	r3, r3
 80099cc:	2b03      	cmp	r3, #3
 80099ce:	d107      	bne.n	80099e0 <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80099d0:	f107 030e 	add.w	r3, r7, #14
 80099d4:	2202      	movs	r2, #2
 80099d6:	4619      	mov	r1, r3
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f001 ffbc 	bl	800b956 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80099de:	e063      	b.n	8009aa8 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 80099e0:	6839      	ldr	r1, [r7, #0]
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f001 fe39 	bl	800b65a <USBD_CtlError>
            ret = USBD_FAIL;
 80099e8:	2303      	movs	r3, #3
 80099ea:	75fb      	strb	r3, [r7, #23]
          break;
 80099ec:	e05c      	b.n	8009aa8 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	885b      	ldrh	r3, [r3, #2]
 80099f2:	0a1b      	lsrs	r3, r3, #8
 80099f4:	b29b      	uxth	r3, r3
 80099f6:	2b22      	cmp	r3, #34	@ 0x22
 80099f8:	d110      	bne.n	8009a1c <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	88db      	ldrh	r3, [r3, #6]
 80099fe:	2b1e      	cmp	r3, #30
 8009a00:	bf28      	it	cs
 8009a02:	231e      	movcs	r3, #30
 8009a04:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8009a0c:	687a      	ldr	r2, [r7, #4]
 8009a0e:	33b2      	adds	r3, #178	@ 0xb2
 8009a10:	009b      	lsls	r3, r3, #2
 8009a12:	4413      	add	r3, r2
 8009a14:	685b      	ldr	r3, [r3, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	61bb      	str	r3, [r7, #24]
 8009a1a:	e00d      	b.n	8009a38 <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	885b      	ldrh	r3, [r3, #2]
 8009a20:	0a1b      	lsrs	r3, r3, #8
 8009a22:	b29b      	uxth	r3, r3
 8009a24:	2b21      	cmp	r3, #33	@ 0x21
 8009a26:	d107      	bne.n	8009a38 <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8009a28:	4b26      	ldr	r3, [pc, #152]	@ (8009ac4 <USBD_CUSTOM_HID_Setup+0x230>)
 8009a2a:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	88db      	ldrh	r3, [r3, #6]
 8009a30:	2b09      	cmp	r3, #9
 8009a32:	bf28      	it	cs
 8009a34:	2309      	movcs	r3, #9
 8009a36:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 8009a38:	8bfb      	ldrh	r3, [r7, #30]
 8009a3a:	461a      	mov	r2, r3
 8009a3c:	69b9      	ldr	r1, [r7, #24]
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f001 ff89 	bl	800b956 <USBD_CtlSendData>
          break;
 8009a44:	e030      	b.n	8009aa8 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a4c:	b2db      	uxtb	r3, r3
 8009a4e:	2b03      	cmp	r3, #3
 8009a50:	d107      	bne.n	8009a62 <USBD_CUSTOM_HID_Setup+0x1ce>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8009a52:	693b      	ldr	r3, [r7, #16]
 8009a54:	3348      	adds	r3, #72	@ 0x48
 8009a56:	2201      	movs	r2, #1
 8009a58:	4619      	mov	r1, r3
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f001 ff7b 	bl	800b956 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009a60:	e022      	b.n	8009aa8 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8009a62:	6839      	ldr	r1, [r7, #0]
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f001 fdf8 	bl	800b65a <USBD_CtlError>
            ret = USBD_FAIL;
 8009a6a:	2303      	movs	r3, #3
 8009a6c:	75fb      	strb	r3, [r7, #23]
          break;
 8009a6e:	e01b      	b.n	8009aa8 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a76:	b2db      	uxtb	r3, r3
 8009a78:	2b03      	cmp	r3, #3
 8009a7a:	d106      	bne.n	8009a8a <USBD_CUSTOM_HID_Setup+0x1f6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	885b      	ldrh	r3, [r3, #2]
 8009a80:	b2db      	uxtb	r3, r3
 8009a82:	461a      	mov	r2, r3
 8009a84:	693b      	ldr	r3, [r7, #16]
 8009a86:	649a      	str	r2, [r3, #72]	@ 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009a88:	e00e      	b.n	8009aa8 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8009a8a:	6839      	ldr	r1, [r7, #0]
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f001 fde4 	bl	800b65a <USBD_CtlError>
            ret = USBD_FAIL;
 8009a92:	2303      	movs	r3, #3
 8009a94:	75fb      	strb	r3, [r7, #23]
          break;
 8009a96:	e007      	b.n	8009aa8 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009a98:	6839      	ldr	r1, [r7, #0]
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f001 fddd 	bl	800b65a <USBD_CtlError>
          ret = USBD_FAIL;
 8009aa0:	2303      	movs	r3, #3
 8009aa2:	75fb      	strb	r3, [r7, #23]
          break;
 8009aa4:	e000      	b.n	8009aa8 <USBD_CUSTOM_HID_Setup+0x214>
          break;
 8009aa6:	bf00      	nop
      }
      break;
 8009aa8:	e006      	b.n	8009ab8 <USBD_CUSTOM_HID_Setup+0x224>

    default:
      USBD_CtlError(pdev, req);
 8009aaa:	6839      	ldr	r1, [r7, #0]
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	f001 fdd4 	bl	800b65a <USBD_CtlError>
      ret = USBD_FAIL;
 8009ab2:	2303      	movs	r3, #3
 8009ab4:	75fb      	strb	r3, [r7, #23]
      break;
 8009ab6:	bf00      	nop
  }
  return (uint8_t)ret;
 8009ab8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009aba:	4618      	mov	r0, r3
 8009abc:	3720      	adds	r7, #32
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bd80      	pop	{r7, pc}
 8009ac2:	bf00      	nop
 8009ac4:	200000ec 	.word	0x200000ec

08009ac8 <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
#ifdef USE_USBD_COMPOSITE
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len, uint8_t ClassId)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b086      	sub	sp, #24
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	60f8      	str	r0, [r7, #12]
 8009ad0:	60b9      	str	r1, [r7, #8]
 8009ad2:	4611      	mov	r1, r2
 8009ad4:	461a      	mov	r2, r3
 8009ad6:	460b      	mov	r3, r1
 8009ad8:	80fb      	strh	r3, [r7, #6]
 8009ada:	4613      	mov	r3, r2
 8009adc:	717b      	strb	r3, [r7, #5]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
 8009ade:	797b      	ldrb	r3, [r7, #5]
 8009ae0:	68fa      	ldr	r2, [r7, #12]
 8009ae2:	33b0      	adds	r3, #176	@ 0xb0
 8009ae4:	009b      	lsls	r3, r3, #2
 8009ae6:	4413      	add	r3, r2
 8009ae8:	685b      	ldr	r3, [r3, #4]
 8009aea:	617b      	str	r3, [r7, #20]
                                   uint8_t *report, uint16_t len)
{
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 8009aec:	697b      	ldr	r3, [r7, #20]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d101      	bne.n	8009af6 <USBD_CUSTOM_HID_SendReport+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009af2:	2303      	movs	r3, #3
 8009af4:	e023      	b.n	8009b3e <USBD_CUSTOM_HID_SendReport+0x76>
  }

#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
 8009af6:	797b      	ldrb	r3, [r7, #5]
 8009af8:	2203      	movs	r2, #3
 8009afa:	2180      	movs	r1, #128	@ 0x80
 8009afc:	68f8      	ldr	r0, [r7, #12]
 8009afe:	f000 ff2d 	bl	800a95c <USBD_CoreGetEPAdd>
 8009b02:	4603      	mov	r3, r0
 8009b04:	461a      	mov	r2, r3
 8009b06:	4b10      	ldr	r3, [pc, #64]	@ (8009b48 <USBD_CUSTOM_HID_SendReport+0x80>)
 8009b08:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b10:	b2db      	uxtb	r3, r3
 8009b12:	2b03      	cmp	r3, #3
 8009b14:	d112      	bne.n	8009b3c <USBD_CUSTOM_HID_SendReport+0x74>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8009b16:	697b      	ldr	r3, [r7, #20]
 8009b18:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d10b      	bne.n	8009b38 <USBD_CUSTOM_HID_SendReport+0x70>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	2201      	movs	r2, #1
 8009b24:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 8009b28:	4b07      	ldr	r3, [pc, #28]	@ (8009b48 <USBD_CUSTOM_HID_SendReport+0x80>)
 8009b2a:	7819      	ldrb	r1, [r3, #0]
 8009b2c:	88fb      	ldrh	r3, [r7, #6]
 8009b2e:	68ba      	ldr	r2, [r7, #8]
 8009b30:	68f8      	ldr	r0, [r7, #12]
 8009b32:	f000 fa1e 	bl	8009f72 <USBD_LL_Transmit>
 8009b36:	e001      	b.n	8009b3c <USBD_CUSTOM_HID_SendReport+0x74>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 8009b38:	2301      	movs	r3, #1
 8009b3a:	e000      	b.n	8009b3e <USBD_CUSTOM_HID_SendReport+0x76>
    }
  }
  return (uint8_t)USBD_OK;
 8009b3c:	2300      	movs	r3, #0
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	3718      	adds	r7, #24
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}
 8009b46:	bf00      	nop
 8009b48:	200000f5 	.word	0x200000f5

08009b4c <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	b083      	sub	sp, #12
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
 8009b54:	460b      	mov	r3, r1
 8009b56:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8009b5e:	687a      	ldr	r2, [r7, #4]
 8009b60:	33b0      	adds	r3, #176	@ 0xb0
 8009b62:	009b      	lsls	r3, r3, #2
 8009b64:	4413      	add	r3, r2
 8009b66:	685b      	ldr	r3, [r3, #4]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return (uint8_t)USBD_OK;
 8009b6e:	2300      	movs	r3, #0
}
 8009b70:	4618      	mov	r0, r3
 8009b72:	370c      	adds	r7, #12
 8009b74:	46bd      	mov	sp, r7
 8009b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7a:	4770      	bx	lr

08009b7c <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b084      	sub	sp, #16
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
 8009b84:	460b      	mov	r3, r1
 8009b86:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009b8e:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f503 7333 	add.w	r3, r3, #716	@ 0x2cc
 8009b96:	68db      	ldr	r3, [r3, #12]
 8009b98:	68fa      	ldr	r2, [r7, #12]
 8009b9a:	b2d2      	uxtb	r2, r2
 8009b9c:	4610      	mov	r0, r2
 8009b9e:	4798      	blx	r3

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8009ba0:	68fa      	ldr	r2, [r7, #12]
 8009ba2:	2340      	movs	r3, #64	@ 0x40
 8009ba4:	2101      	movs	r1, #1
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f000 f9fe 	bl	8009fa8 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 8009bac:	2300      	movs	r3, #0
}
 8009bae:	4618      	mov	r0, r3
 8009bb0:	3710      	adds	r7, #16
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}

08009bb6 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009bb6:	b580      	push	{r7, lr}
 8009bb8:	b084      	sub	sp, #16
 8009bba:	af00      	add	r7, sp, #0
 8009bbc:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009bc4:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009bca:	2b01      	cmp	r3, #1
 8009bcc:	d10a      	bne.n	8009be4 <USBD_CUSTOM_HID_EP0_RxReady+0x2e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	f503 7333 	add.w	r3, r3, #716	@ 0x2cc
 8009bd4:	68db      	ldr	r3, [r3, #12]
 8009bd6:	68fa      	ldr	r2, [r7, #12]
 8009bd8:	b2d2      	uxtb	r2, r2
 8009bda:	4610      	mov	r0, r2
 8009bdc:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	2200      	movs	r2, #0
 8009be2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return USBD_OK;
 8009be4:	2300      	movs	r3, #0
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3710      	adds	r7, #16
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}

08009bee <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8009bee:	b480      	push	{r7}
 8009bf0:	b083      	sub	sp, #12
 8009bf2:	af00      	add	r7, sp, #0
 8009bf4:	6078      	str	r0, [r7, #4]
 8009bf6:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d101      	bne.n	8009c02 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009bfe:	2303      	movs	r3, #3
 8009c00:	e009      	b.n	8009c16 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8009c08:	687a      	ldr	r2, [r7, #4]
 8009c0a:	33b2      	adds	r3, #178	@ 0xb2
 8009c0c:	009b      	lsls	r3, r3, #2
 8009c0e:	4413      	add	r3, r2
 8009c10:	683a      	ldr	r2, [r7, #0]
 8009c12:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009c14:	2300      	movs	r3, #0
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	370c      	adds	r7, #12
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c20:	4770      	bx	lr

08009c22 <CUSTOM_HID_Init>:
  *         Initializes the CUSTOM HID media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init(void)
{
 8009c22:	b480      	push	{r7}
 8009c24:	af00      	add	r7, sp, #0
  return (0);
 8009c26:	2300      	movs	r3, #0
}
 8009c28:	4618      	mov	r0, r3
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c30:	4770      	bx	lr

08009c32 <CUSTOM_HID_DeInit>:
  *         DeInitializes the CUSTOM HID media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit(void)
{
 8009c32:	b480      	push	{r7}
 8009c34:	af00      	add	r7, sp, #0
  /*
     Add your deinitialization code here
  */
  return (0);
 8009c36:	2300      	movs	r3, #0
}
 8009c38:	4618      	mov	r0, r3
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c40:	4770      	bx	lr

08009c42 <CUSTOM_HID_OutEvent>:
  * @param  event_idx: event index
  * @param  state: event state
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent(uint8_t event_idx, uint8_t state)
{
 8009c42:	b480      	push	{r7}
 8009c44:	b083      	sub	sp, #12
 8009c46:	af00      	add	r7, sp, #0
 8009c48:	4603      	mov	r3, r0
 8009c4a:	460a      	mov	r2, r1
 8009c4c:	71fb      	strb	r3, [r7, #7]
 8009c4e:	4613      	mov	r3, r2
 8009c50:	71bb      	strb	r3, [r7, #6]
	return (0);
 8009c52:	2300      	movs	r3, #0
}
 8009c54:	4618      	mov	r0, r3
 8009c56:	370c      	adds	r7, #12
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5e:	4770      	bx	lr

08009c60 <HAL_PCD_SetupStageCallback>:
extern PCD_HandleTypeDef hpcd_USB_DRD_FS;
/* Private function prototypes -----------------------------------------------*/
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status);
/* Private functions ---------------------------------------------------------*/
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b082      	sub	sp, #8
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f8d3 22dc 	ldr.w	r2, [r3, #732]	@ 0x2dc
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 8009c74:	4619      	mov	r1, r3
 8009c76:	4610      	mov	r0, r2
 8009c78:	f000 fb5f 	bl	800a33a <USBD_LL_SetupStage>
}
 8009c7c:	bf00      	nop
 8009c7e:	3708      	adds	r7, #8
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}

08009c84 <HAL_PCD_DataOutStageCallback>:
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b082      	sub	sp, #8
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
 8009c8c:	460b      	mov	r3, r1
 8009c8e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	f8d3 02dc 	ldr.w	r0, [r3, #732]	@ 0x2dc
 8009c96:	78fa      	ldrb	r2, [r7, #3]
 8009c98:	6879      	ldr	r1, [r7, #4]
 8009c9a:	4613      	mov	r3, r2
 8009c9c:	009b      	lsls	r3, r3, #2
 8009c9e:	4413      	add	r3, r2
 8009ca0:	00db      	lsls	r3, r3, #3
 8009ca2:	440b      	add	r3, r1
 8009ca4:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8009ca8:	681a      	ldr	r2, [r3, #0]
 8009caa:	78fb      	ldrb	r3, [r7, #3]
 8009cac:	4619      	mov	r1, r3
 8009cae:	f000 fb99 	bl	800a3e4 <USBD_LL_DataOutStage>
}
 8009cb2:	bf00      	nop
 8009cb4:	3708      	adds	r7, #8
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	bd80      	pop	{r7, pc}

08009cba <HAL_PCD_DataInStageCallback>:
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8009cba:	b580      	push	{r7, lr}
 8009cbc:	b082      	sub	sp, #8
 8009cbe:	af00      	add	r7, sp, #0
 8009cc0:	6078      	str	r0, [r7, #4]
 8009cc2:	460b      	mov	r3, r1
 8009cc4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f8d3 02dc 	ldr.w	r0, [r3, #732]	@ 0x2dc
 8009ccc:	78fa      	ldrb	r2, [r7, #3]
 8009cce:	6879      	ldr	r1, [r7, #4]
 8009cd0:	4613      	mov	r3, r2
 8009cd2:	009b      	lsls	r3, r3, #2
 8009cd4:	4413      	add	r3, r2
 8009cd6:	00db      	lsls	r3, r3, #3
 8009cd8:	440b      	add	r3, r1
 8009cda:	3328      	adds	r3, #40	@ 0x28
 8009cdc:	681a      	ldr	r2, [r3, #0]
 8009cde:	78fb      	ldrb	r3, [r7, #3]
 8009ce0:	4619      	mov	r1, r3
 8009ce2:	f000 fc32 	bl	800a54a <USBD_LL_DataInStage>
}
 8009ce6:	bf00      	nop
 8009ce8:	3708      	adds	r7, #8
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}

08009cee <HAL_PCD_SOFCallback>:
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8009cee:	b580      	push	{r7, lr}
 8009cf0:	b082      	sub	sp, #8
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	f000 fd56 	bl	800a7ae <USBD_LL_SOF>
}
 8009d02:	bf00      	nop
 8009d04:	3708      	adds	r7, #8
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}

08009d0a <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8009d0a:	b580      	push	{r7, lr}
 8009d0c:	b084      	sub	sp, #16
 8009d0e:	af00      	add	r7, sp, #0
 8009d10:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009d12:	2301      	movs	r3, #1
 8009d14:	73fb      	strb	r3, [r7, #15]
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	79db      	ldrb	r3, [r3, #7]
 8009d1a:	2b02      	cmp	r3, #2
 8009d1c:	d001      	beq.n	8009d22 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009d1e:	f7f6 fd4d 	bl	80007bc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 8009d28:	7bfa      	ldrb	r2, [r7, #15]
 8009d2a:	4611      	mov	r1, r2
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	f000 fd2e 	bl	800a78e <USBD_LL_SetSpeed>
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 8009d38:	4618      	mov	r0, r3
 8009d3a:	f000 fcb8 	bl	800a6ae <USBD_LL_Reset>
}
 8009d3e:	bf00      	nop
 8009d40:	3710      	adds	r7, #16
 8009d42:	46bd      	mov	sp, r7
 8009d44:	bd80      	pop	{r7, pc}
	...

08009d48 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b082      	sub	sp, #8
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
	/* Link the driver to the stack */
	pdev->pData  = &hpcd_USB_DRD_FS;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	4a24      	ldr	r2, [pc, #144]	@ (8009de4 <USBD_LL_Init+0x9c>)
 8009d54:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
	hpcd_USB_DRD_FS.pData = pdev;
 8009d58:	4a22      	ldr	r2, [pc, #136]	@ (8009de4 <USBD_LL_Init+0x9c>)
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	f8c2 32dc 	str.w	r3, [r2, #732]	@ 0x2dc
	/* Initialize LL Driver */
	MX_USB_PCD_Init();
 8009d60:	f7f6 fc24 	bl	80005ac <MX_USB_PCD_Init>
	/* Control Endpoints */
	HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x20);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8009d6a:	2320      	movs	r3, #32
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	2100      	movs	r1, #0
 8009d70:	f7f9 fe4e 	bl	8003a10 <HAL_PCDEx_PMAConfig>
	HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x60);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8009d7a:	2360      	movs	r3, #96	@ 0x60
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	2180      	movs	r1, #128	@ 0x80
 8009d80:	f7f9 fe46 	bl	8003a10 <HAL_PCDEx_PMAConfig>
	/* CHID Endpoints */
	HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0xA0);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8009d8a:	23a0      	movs	r3, #160	@ 0xa0
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	2181      	movs	r1, #129	@ 0x81
 8009d90:	f7f9 fe3e 	bl	8003a10 <HAL_PCDEx_PMAConfig>
	HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xE0);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8009d9a:	23e0      	movs	r3, #224	@ 0xe0
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	2101      	movs	r1, #1
 8009da0:	f7f9 fe36 	bl	8003a10 <HAL_PCDEx_PMAConfig>
	/* CDC Endpoints */
	HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_OUT_EP , PCD_SNG_BUF, 0x120);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8009daa:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8009dae:	2200      	movs	r2, #0
 8009db0:	2102      	movs	r1, #2
 8009db2:	f7f9 fe2d 	bl	8003a10 <HAL_PCDEx_PMAConfig>
	HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_IN_EP , PCD_SNG_BUF, 0x160);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8009dbc:	f44f 73b0 	mov.w	r3, #352	@ 0x160
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	2182      	movs	r1, #130	@ 0x82
 8009dc4:	f7f9 fe24 	bl	8003a10 <HAL_PCDEx_PMAConfig>
	HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_CMD_EP , PCD_SNG_BUF, 0x180);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8009dce:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	2183      	movs	r1, #131	@ 0x83
 8009dd6:	f7f9 fe1b 	bl	8003a10 <HAL_PCDEx_PMAConfig>
	return USBD_OK;
 8009dda:	2300      	movs	r3, #0
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	3708      	adds	r7, #8
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd80      	pop	{r7, pc}
 8009de4:	20000254 	.word	0x20000254

08009de8 <USBD_LL_Start>:
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_DeInit(pdev->pData);
	return USBD_Get_USB_Status(hal_status);
}
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b084      	sub	sp, #16
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_Start(pdev->pData);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009df6:	4618      	mov	r0, r3
 8009df8:	f7f8 faee 	bl	80023d8 <HAL_PCD_Start>
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	73fb      	strb	r3, [r7, #15]
	return  USBD_Get_USB_Status(hal_status);
 8009e00:	7bfb      	ldrb	r3, [r7, #15]
 8009e02:	4618      	mov	r0, r3
 8009e04:	f000 f916 	bl	800a034 <USBD_Get_USB_Status>
 8009e08:	4603      	mov	r3, r0
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	3710      	adds	r7, #16
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}

08009e12 <USBD_LL_OpenEP>:
	hal_status = HAL_PCD_Stop(pdev->pData);
	return USBD_Get_USB_Status(hal_status);
}
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
		uint8_t ep_type, uint16_t ep_mps)
{
 8009e12:	b580      	push	{r7, lr}
 8009e14:	b084      	sub	sp, #16
 8009e16:	af00      	add	r7, sp, #0
 8009e18:	6078      	str	r0, [r7, #4]
 8009e1a:	4608      	mov	r0, r1
 8009e1c:	4611      	mov	r1, r2
 8009e1e:	461a      	mov	r2, r3
 8009e20:	4603      	mov	r3, r0
 8009e22:	70fb      	strb	r3, [r7, #3]
 8009e24:	460b      	mov	r3, r1
 8009e26:	70bb      	strb	r3, [r7, #2]
 8009e28:	4613      	mov	r3, r2
 8009e2a:	803b      	strh	r3, [r7, #0]
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8009e32:	78bb      	ldrb	r3, [r7, #2]
 8009e34:	883a      	ldrh	r2, [r7, #0]
 8009e36:	78f9      	ldrb	r1, [r7, #3]
 8009e38:	f7f8 fc1d 	bl	8002676 <HAL_PCD_EP_Open>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	73fb      	strb	r3, [r7, #15]
	return USBD_Get_USB_Status(hal_status);
 8009e40:	7bfb      	ldrb	r3, [r7, #15]
 8009e42:	4618      	mov	r0, r3
 8009e44:	f000 f8f6 	bl	800a034 <USBD_Get_USB_Status>
 8009e48:	4603      	mov	r3, r0
}
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	3710      	adds	r7, #16
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bd80      	pop	{r7, pc}

08009e52 <USBD_LL_CloseEP>:
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e52:	b580      	push	{r7, lr}
 8009e54:	b084      	sub	sp, #16
 8009e56:	af00      	add	r7, sp, #0
 8009e58:	6078      	str	r0, [r7, #4]
 8009e5a:	460b      	mov	r3, r1
 8009e5c:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009e64:	78fa      	ldrb	r2, [r7, #3]
 8009e66:	4611      	mov	r1, r2
 8009e68:	4618      	mov	r0, r3
 8009e6a:	f7f8 fc65 	bl	8002738 <HAL_PCD_EP_Close>
 8009e6e:	4603      	mov	r3, r0
 8009e70:	73fb      	strb	r3, [r7, #15]
	return USBD_Get_USB_Status(hal_status);
 8009e72:	7bfb      	ldrb	r3, [r7, #15]
 8009e74:	4618      	mov	r0, r3
 8009e76:	f000 f8dd 	bl	800a034 <USBD_Get_USB_Status>
 8009e7a:	4603      	mov	r3, r0
}
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	3710      	adds	r7, #16
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd80      	pop	{r7, pc}

08009e84 <USBD_LL_StallEP>:
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
	return USBD_Get_USB_Status(hal_status);
}
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b084      	sub	sp, #16
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
 8009e8c:	460b      	mov	r3, r1
 8009e8e:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009e96:	78fa      	ldrb	r2, [r7, #3]
 8009e98:	4611      	mov	r1, r2
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f7f8 fd18 	bl	80028d0 <HAL_PCD_EP_SetStall>
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	73fb      	strb	r3, [r7, #15]
	return USBD_Get_USB_Status(hal_status);
 8009ea4:	7bfb      	ldrb	r3, [r7, #15]
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f000 f8c4 	bl	800a034 <USBD_Get_USB_Status>
 8009eac:	4603      	mov	r3, r0
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3710      	adds	r7, #16
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}

08009eb6 <USBD_LL_ClearStallEP>:
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev,
		uint8_t ep_addr)
{
 8009eb6:	b580      	push	{r7, lr}
 8009eb8:	b084      	sub	sp, #16
 8009eba:	af00      	add	r7, sp, #0
 8009ebc:	6078      	str	r0, [r7, #4]
 8009ebe:	460b      	mov	r3, r1
 8009ec0:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009ec8:	78fa      	ldrb	r2, [r7, #3]
 8009eca:	4611      	mov	r1, r2
 8009ecc:	4618      	mov	r0, r3
 8009ece:	f7f8 fd53 	bl	8002978 <HAL_PCD_EP_ClrStall>
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	73fb      	strb	r3, [r7, #15]
	return USBD_Get_USB_Status(hal_status);
 8009ed6:	7bfb      	ldrb	r3, [r7, #15]
 8009ed8:	4618      	mov	r0, r3
 8009eda:	f000 f8ab 	bl	800a034 <USBD_Get_USB_Status>
 8009ede:	4603      	mov	r3, r0
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	3710      	adds	r7, #16
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}

08009ee8 <USBD_LL_IsStallEP>:
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ee8:	b480      	push	{r7}
 8009eea:	b085      	sub	sp, #20
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
 8009ef0:	460b      	mov	r3, r1
 8009ef2:	70fb      	strb	r3, [r7, #3]
	PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009efa:	60fb      	str	r3, [r7, #12]
	if((ep_addr & 0x80) == 0x80)
 8009efc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	da0b      	bge.n	8009f1c <USBD_LL_IsStallEP+0x34>
	{
		return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009f04:	78fb      	ldrb	r3, [r7, #3]
 8009f06:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009f0a:	68f9      	ldr	r1, [r7, #12]
 8009f0c:	4613      	mov	r3, r2
 8009f0e:	009b      	lsls	r3, r3, #2
 8009f10:	4413      	add	r3, r2
 8009f12:	00db      	lsls	r3, r3, #3
 8009f14:	440b      	add	r3, r1
 8009f16:	3316      	adds	r3, #22
 8009f18:	781b      	ldrb	r3, [r3, #0]
 8009f1a:	e00b      	b.n	8009f34 <USBD_LL_IsStallEP+0x4c>
	}
	else
	{
		return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009f1c:	78fb      	ldrb	r3, [r7, #3]
 8009f1e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009f22:	68f9      	ldr	r1, [r7, #12]
 8009f24:	4613      	mov	r3, r2
 8009f26:	009b      	lsls	r3, r3, #2
 8009f28:	4413      	add	r3, r2
 8009f2a:	00db      	lsls	r3, r3, #3
 8009f2c:	440b      	add	r3, r1
 8009f2e:	f503 73ab 	add.w	r3, r3, #342	@ 0x156
 8009f32:	781b      	ldrb	r3, [r3, #0]
	}
}
 8009f34:	4618      	mov	r0, r3
 8009f36:	3714      	adds	r7, #20
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3e:	4770      	bx	lr

08009f40 <USBD_LL_SetUSBAddress>:
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev,
		uint8_t dev_addr)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b084      	sub	sp, #16
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
 8009f48:	460b      	mov	r3, r1
 8009f4a:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009f52:	78fa      	ldrb	r2, [r7, #3]
 8009f54:	4611      	mov	r1, r2
 8009f56:	4618      	mov	r0, r3
 8009f58:	f7f8 fb69 	bl	800262e <HAL_PCD_SetAddress>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	73fb      	strb	r3, [r7, #15]
	return USBD_Get_USB_Status(hal_status);
 8009f60:	7bfb      	ldrb	r3, [r7, #15]
 8009f62:	4618      	mov	r0, r3
 8009f64:	f000 f866 	bl	800a034 <USBD_Get_USB_Status>
 8009f68:	4603      	mov	r3, r0
}
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	3710      	adds	r7, #16
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bd80      	pop	{r7, pc}

08009f72 <USBD_LL_Transmit>:
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
		uint8_t *pbuf, uint32_t size)
{
 8009f72:	b580      	push	{r7, lr}
 8009f74:	b086      	sub	sp, #24
 8009f76:	af00      	add	r7, sp, #0
 8009f78:	60f8      	str	r0, [r7, #12]
 8009f7a:	607a      	str	r2, [r7, #4]
 8009f7c:	603b      	str	r3, [r7, #0]
 8009f7e:	460b      	mov	r3, r1
 8009f80:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8009f88:	7af9      	ldrb	r1, [r7, #11]
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	687a      	ldr	r2, [r7, #4]
 8009f8e:	f7f8 fc67 	bl	8002860 <HAL_PCD_EP_Transmit>
 8009f92:	4603      	mov	r3, r0
 8009f94:	75fb      	strb	r3, [r7, #23]
	return USBD_Get_USB_Status(hal_status);
 8009f96:	7dfb      	ldrb	r3, [r7, #23]
 8009f98:	4618      	mov	r0, r3
 8009f9a:	f000 f84b 	bl	800a034 <USBD_Get_USB_Status>
 8009f9e:	4603      	mov	r3, r0
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	3718      	adds	r7, #24
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}

08009fa8 <USBD_LL_PrepareReceive>:
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev,
		uint8_t ep_addr, uint8_t *pbuf,
		uint32_t size)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b086      	sub	sp, #24
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	60f8      	str	r0, [r7, #12]
 8009fb0:	607a      	str	r2, [r7, #4]
 8009fb2:	603b      	str	r3, [r7, #0]
 8009fb4:	460b      	mov	r3, r1
 8009fb6:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8009fbe:	7af9      	ldrb	r1, [r7, #11]
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	687a      	ldr	r2, [r7, #4]
 8009fc4:	f7f8 fc02 	bl	80027cc <HAL_PCD_EP_Receive>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	75fb      	strb	r3, [r7, #23]
	return USBD_Get_USB_Status(hal_status);
 8009fcc:	7dfb      	ldrb	r3, [r7, #23]
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f000 f830 	bl	800a034 <USBD_Get_USB_Status>
 8009fd4:	4603      	mov	r3, r0
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	3718      	adds	r7, #24
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}

08009fde <USBD_LL_GetRxDataSize>:
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009fde:	b580      	push	{r7, lr}
 8009fe0:	b082      	sub	sp, #8
 8009fe2:	af00      	add	r7, sp, #0
 8009fe4:	6078      	str	r0, [r7, #4]
 8009fe6:	460b      	mov	r3, r1
 8009fe8:	70fb      	strb	r3, [r7, #3]
	return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009ff0:	78fa      	ldrb	r2, [r7, #3]
 8009ff2:	4611      	mov	r1, r2
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	f7f8 fc1b 	bl	8002830 <HAL_PCD_EP_GetRxCount>
 8009ffa:	4603      	mov	r3, r0
}
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	3708      	adds	r7, #8
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}

0800a004 <USBD_static_malloc>:
void *USBD_static_malloc(uint32_t size)
{
 800a004:	b480      	push	{r7}
 800a006:	b083      	sub	sp, #12
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
	UNUSED(size);
	static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef) / 4) + 1]; /* On 32-bit boundary */
	return mem;
 800a00c:	4b03      	ldr	r3, [pc, #12]	@ (800a01c <USBD_static_malloc+0x18>)
}
 800a00e:	4618      	mov	r0, r3
 800a010:	370c      	adds	r7, #12
 800a012:	46bd      	mov	sp, r7
 800a014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a018:	4770      	bx	lr
 800a01a:	bf00      	nop
 800a01c:	20000b74 	.word	0x20000b74

0800a020 <USBD_static_free>:
void USBD_static_free(void *p)
{
 800a020:	b480      	push	{r7}
 800a022:	b083      	sub	sp, #12
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
	UNUSED(p);
}
 800a028:	bf00      	nop
 800a02a:	370c      	adds	r7, #12
 800a02c:	46bd      	mov	sp, r7
 800a02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a032:	4770      	bx	lr

0800a034 <USBD_Get_USB_Status>:
{
     HAL_Delay(Delay);
}

USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a034:	b480      	push	{r7}
 800a036:	b085      	sub	sp, #20
 800a038:	af00      	add	r7, sp, #0
 800a03a:	4603      	mov	r3, r0
 800a03c:	71fb      	strb	r3, [r7, #7]
	USBD_StatusTypeDef usb_status = USBD_OK;
 800a03e:	2300      	movs	r3, #0
 800a040:	73fb      	strb	r3, [r7, #15]
	switch (hal_status)
 800a042:	79fb      	ldrb	r3, [r7, #7]
 800a044:	2b03      	cmp	r3, #3
 800a046:	d817      	bhi.n	800a078 <USBD_Get_USB_Status+0x44>
 800a048:	a201      	add	r2, pc, #4	@ (adr r2, 800a050 <USBD_Get_USB_Status+0x1c>)
 800a04a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a04e:	bf00      	nop
 800a050:	0800a061 	.word	0x0800a061
 800a054:	0800a067 	.word	0x0800a067
 800a058:	0800a06d 	.word	0x0800a06d
 800a05c:	0800a073 	.word	0x0800a073
	{
	case HAL_OK :
		usb_status = USBD_OK;
 800a060:	2300      	movs	r3, #0
 800a062:	73fb      	strb	r3, [r7, #15]
		break;
 800a064:	e00b      	b.n	800a07e <USBD_Get_USB_Status+0x4a>
	case HAL_ERROR :
		usb_status = USBD_FAIL;
 800a066:	2303      	movs	r3, #3
 800a068:	73fb      	strb	r3, [r7, #15]
		break;
 800a06a:	e008      	b.n	800a07e <USBD_Get_USB_Status+0x4a>
	case HAL_BUSY :
		usb_status = USBD_BUSY;
 800a06c:	2301      	movs	r3, #1
 800a06e:	73fb      	strb	r3, [r7, #15]
		break;
 800a070:	e005      	b.n	800a07e <USBD_Get_USB_Status+0x4a>
	case HAL_TIMEOUT :
		usb_status = USBD_FAIL;
 800a072:	2303      	movs	r3, #3
 800a074:	73fb      	strb	r3, [r7, #15]
		break;
 800a076:	e002      	b.n	800a07e <USBD_Get_USB_Status+0x4a>
	default :
		usb_status = USBD_FAIL;
 800a078:	2303      	movs	r3, #3
 800a07a:	73fb      	strb	r3, [r7, #15]
		break;
 800a07c:	bf00      	nop
	}
	return usb_status;
 800a07e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a080:	4618      	mov	r0, r3
 800a082:	3714      	adds	r7, #20
 800a084:	46bd      	mov	sp, r7
 800a086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08a:	4770      	bx	lr

0800a08c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b086      	sub	sp, #24
 800a090:	af00      	add	r7, sp, #0
 800a092:	60f8      	str	r0, [r7, #12]
 800a094:	60b9      	str	r1, [r7, #8]
 800a096:	4613      	mov	r3, r2
 800a098:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d10a      	bne.n	800a0b6 <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 800a0a0:	4827      	ldr	r0, [pc, #156]	@ (800a140 <USBD_Init+0xb4>)
 800a0a2:	f001 fd9b 	bl	800bbdc <iprintf>
 800a0a6:	4827      	ldr	r0, [pc, #156]	@ (800a144 <USBD_Init+0xb8>)
 800a0a8:	f001 fd98 	bl	800bbdc <iprintf>
 800a0ac:	200a      	movs	r0, #10
 800a0ae:	f001 fda7 	bl	800bc00 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a0b2:	2303      	movs	r3, #3
 800a0b4:	e03f      	b.n	800a136 <USBD_Init+0xaa>
  }

#ifdef USE_USBD_COMPOSITE
  /* Parse the table of classes in use */
  for (uint32_t i = 0; i < USBD_MAX_SUPPORTED_CLASS; i++)
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	617b      	str	r3, [r7, #20]
 800a0ba:	e021      	b.n	800a100 <USBD_Init+0x74>
  {
    /* Unlink previous class*/
    pdev->pClass[i] = NULL;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	697a      	ldr	r2, [r7, #20]
 800a0c0:	32ae      	adds	r2, #174	@ 0xae
 800a0c2:	2100      	movs	r1, #0
 800a0c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pUserData[i] = NULL;
 800a0c8:	68fa      	ldr	r2, [r7, #12]
 800a0ca:	697b      	ldr	r3, [r7, #20]
 800a0cc:	33b2      	adds	r3, #178	@ 0xb2
 800a0ce:	009b      	lsls	r3, r3, #2
 800a0d0:	4413      	add	r3, r2
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	605a      	str	r2, [r3, #4]

    /* Set class as inactive */
    pdev->tclasslist[i].Active = 0;
 800a0d6:	68fa      	ldr	r2, [r7, #12]
 800a0d8:	697b      	ldr	r3, [r7, #20]
 800a0da:	212c      	movs	r1, #44	@ 0x2c
 800a0dc:	fb01 f303 	mul.w	r3, r1, r3
 800a0e0:	4413      	add	r3, r2
 800a0e2:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	601a      	str	r2, [r3, #0]
    pdev->NumClasses = 0;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	f8c3 22e4 	str.w	r2, [r3, #740]	@ 0x2e4
    pdev->classId = 0;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
  for (uint32_t i = 0; i < USBD_MAX_SUPPORTED_CLASS; i++)
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	3301      	adds	r3, #1
 800a0fe:	617b      	str	r3, [r7, #20]
 800a100:	697b      	ldr	r3, [r7, #20]
 800a102:	2b01      	cmp	r3, #1
 800a104:	d9da      	bls.n	800a0bc <USBD_Init+0x30>
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
  pdev->pUserData[0] = NULL;
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	2200      	movs	r2, #0
 800a10a:	f8c3 22dc 	str.w	r2, [r3, #732]	@ 0x2dc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a10e:	68bb      	ldr	r3, [r7, #8]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d003      	beq.n	800a11c <USBD_Init+0x90>
  {
    pdev->pDesc = pdesc;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	68ba      	ldr	r2, [r7, #8]
 800a118:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	2201      	movs	r2, #1
 800a120:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	79fa      	ldrb	r2, [r7, #7]
 800a128:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a12a:	68f8      	ldr	r0, [r7, #12]
 800a12c:	f7ff fe0c 	bl	8009d48 <USBD_LL_Init>
 800a130:	4603      	mov	r3, r0
 800a132:	74fb      	strb	r3, [r7, #19]

  return ret;
 800a134:	7cfb      	ldrb	r3, [r7, #19]
}
 800a136:	4618      	mov	r0, r3
 800a138:	3718      	adds	r7, #24
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}
 800a13e:	bf00      	nop
 800a140:	0800cd24 	.word	0x0800cd24
 800a144:	0800cd2c 	.word	0x0800cd2c

0800a148 <USBD_RegisterClassComposite>:
  * @param  EpAddr: Endpoint Address handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClassComposite(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass,
                                                USBD_CompositeClassTypeDef classtype, uint8_t *EpAddr)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b086      	sub	sp, #24
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	60f8      	str	r0, [r7, #12]
 800a150:	60b9      	str	r1, [r7, #8]
 800a152:	603b      	str	r3, [r7, #0]
 800a154:	4613      	mov	r3, r2
 800a156:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a158:	2300      	movs	r3, #0
 800a15a:	75fb      	strb	r3, [r7, #23]
  uint16_t len = 0U;
 800a15c:	2300      	movs	r3, #0
 800a15e:	82bb      	strh	r3, [r7, #20]

  if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) && (pdev->NumClasses < USBD_MAX_SUPPORTED_CLASS))
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800a166:	2b01      	cmp	r3, #1
 800a168:	d83d      	bhi.n	800a1e6 <USBD_RegisterClassComposite+0x9e>
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	f8d3 32e4 	ldr.w	r3, [r3, #740]	@ 0x2e4
 800a170:	2b01      	cmp	r3, #1
 800a172:	d838      	bhi.n	800a1e6 <USBD_RegisterClassComposite+0x9e>
  {
    if ((uint32_t)pclass != 0U)
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d02a      	beq.n	800a1d0 <USBD_RegisterClassComposite+0x88>
    {
      /* Link the class to the USB Device handle */
      pdev->pClass[pdev->classId] = pclass;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	32ae      	adds	r2, #174	@ 0xae
 800a184:	68b9      	ldr	r1, [r7, #8]
 800a186:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      ret = USBD_OK;
 800a18a:	2300      	movs	r3, #0
 800a18c:	75fb      	strb	r3, [r7, #23]

      pdev->tclasslist[pdev->classId].EpAdd = EpAddr;
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800a194:	68fa      	ldr	r2, [r7, #12]
 800a196:	212c      	movs	r1, #44	@ 0x2c
 800a198:	fb01 f303 	mul.w	r3, r1, r3
 800a19c:	4413      	add	r3, r2
 800a19e:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 800a1a2:	683a      	ldr	r2, [r7, #0]
 800a1a4:	601a      	str	r2, [r3, #0]

      /* Call the composite class builder */
      (void)USBD_CMPSIT_AddClass(pdev, pclass, classtype, 0);
 800a1a6:	79fa      	ldrb	r2, [r7, #7]
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	68b9      	ldr	r1, [r7, #8]
 800a1ac:	68f8      	ldr	r0, [r7, #12]
 800a1ae:	f7fe fbef 	bl	8008990 <USBD_CMPSIT_AddClass>

      /* Increment the ClassId for the next occurrence */
      pdev->classId ++;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800a1b8:	1c5a      	adds	r2, r3, #1
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
      pdev->NumClasses ++;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	f8d3 32e4 	ldr.w	r3, [r3, #740]	@ 0x2e4
 800a1c6:	1c5a      	adds	r2, r3, #1
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	f8c3 22e4 	str.w	r2, [r3, #740]	@ 0x2e4
 800a1ce:	e00a      	b.n	800a1e6 <USBD_RegisterClassComposite+0x9e>
    }
    else
    {
#if (USBD_DEBUG_LEVEL > 1U)
      USBD_ErrLog("Invalid Class handle");
 800a1d0:	480e      	ldr	r0, [pc, #56]	@ (800a20c <USBD_RegisterClassComposite+0xc4>)
 800a1d2:	f001 fd03 	bl	800bbdc <iprintf>
 800a1d6:	480e      	ldr	r0, [pc, #56]	@ (800a210 <USBD_RegisterClassComposite+0xc8>)
 800a1d8:	f001 fd00 	bl	800bbdc <iprintf>
 800a1dc:	200a      	movs	r0, #10
 800a1de:	f001 fd0f 	bl	800bc00 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
      ret = USBD_FAIL;
 800a1e2:	2303      	movs	r3, #3
 800a1e4:	75fb      	strb	r3, [r7, #23]
    }
  }

  if (ret == USBD_OK)
 800a1e6:	7dfb      	ldrb	r3, [r7, #23]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d109      	bne.n	800a200 <USBD_RegisterClassComposite+0xb8>
  {
    /* Get Device Configuration Descriptor */
#ifdef USE_USB_HS
    pdev->pConfDesc = USBD_CMPSIT.GetHSConfigDescriptor(&len);
#else /* Default USE_USB_FS */
    pdev->pConfDesc = USBD_CMPSIT.GetFSConfigDescriptor(&len);
 800a1ec:	4b09      	ldr	r3, [pc, #36]	@ (800a214 <USBD_RegisterClassComposite+0xcc>)
 800a1ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1f0:	f107 0214 	add.w	r2, r7, #20
 800a1f4:	4610      	mov	r0, r2
 800a1f6:	4798      	blx	r3
 800a1f8:	4602      	mov	r2, r0
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	f8c3 22dc 	str.w	r2, [r3, #732]	@ 0x2dc
#endif /* USE_USB_FS */
  }

  return ret;
 800a200:	7dfb      	ldrb	r3, [r7, #23]
}
 800a202:	4618      	mov	r0, r3
 800a204:	3718      	adds	r7, #24
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}
 800a20a:	bf00      	nop
 800a20c:	0800cd24 	.word	0x0800cd24
 800a210:	0800cd44 	.word	0x0800cd44
 800a214:	2000006c 	.word	0x2000006c

0800a218 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b082      	sub	sp, #8
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2200      	movs	r2, #0
 800a224:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a228:	6878      	ldr	r0, [r7, #4]
 800a22a:	f7ff fddd 	bl	8009de8 <USBD_LL_Start>
 800a22e:	4603      	mov	r3, r0
}
 800a230:	4618      	mov	r0, r3
 800a232:	3708      	adds	r7, #8
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}

0800a238 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a238:	b480      	push	{r7}
 800a23a:	b083      	sub	sp, #12
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a240:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a242:	4618      	mov	r0, r3
 800a244:	370c      	adds	r7, #12
 800a246:	46bd      	mov	sp, r7
 800a248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24c:	4770      	bx	lr

0800a24e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a24e:	b580      	push	{r7, lr}
 800a250:	b084      	sub	sp, #16
 800a252:	af00      	add	r7, sp, #0
 800a254:	6078      	str	r0, [r7, #4]
 800a256:	460b      	mov	r3, r1
 800a258:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a25a:	2300      	movs	r3, #0
 800a25c:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Parse the table of classes in use */
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 800a25e:	2300      	movs	r3, #0
 800a260:	60bb      	str	r3, [r7, #8]
 800a262:	e027      	b.n	800a2b4 <USBD_SetClassConfig+0x66>
  {
    /* Check if current class is in use */
    if ((pdev->tclasslist[i].Active) == 1U)
 800a264:	687a      	ldr	r2, [r7, #4]
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	212c      	movs	r1, #44	@ 0x2c
 800a26a:	fb01 f303 	mul.w	r3, r1, r3
 800a26e:	4413      	add	r3, r2
 800a270:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	2b01      	cmp	r3, #1
 800a278:	d119      	bne.n	800a2ae <USBD_SetClassConfig+0x60>
    {
      if (pdev->pClass[i] != NULL)
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	68ba      	ldr	r2, [r7, #8]
 800a27e:	32ae      	adds	r2, #174	@ 0xae
 800a280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d012      	beq.n	800a2ae <USBD_SetClassConfig+0x60>
      {
        pdev->classId = i;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	68ba      	ldr	r2, [r7, #8]
 800a28c:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
        /* Set configuration  and Start the Class*/
        if (pdev->pClass[i]->Init(pdev, cfgidx) != 0U)
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	68ba      	ldr	r2, [r7, #8]
 800a294:	32ae      	adds	r2, #174	@ 0xae
 800a296:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	78fa      	ldrb	r2, [r7, #3]
 800a29e:	4611      	mov	r1, r2
 800a2a0:	6878      	ldr	r0, [r7, #4]
 800a2a2:	4798      	blx	r3
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d001      	beq.n	800a2ae <USBD_SetClassConfig+0x60>
        {
          ret = USBD_FAIL;
 800a2aa:	2303      	movs	r3, #3
 800a2ac:	73fb      	strb	r3, [r7, #15]
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	3301      	adds	r3, #1
 800a2b2:	60bb      	str	r3, [r7, #8]
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	2b01      	cmp	r3, #1
 800a2b8:	d9d4      	bls.n	800a264 <USBD_SetClassConfig+0x16>
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a2ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2bc:	4618      	mov	r0, r3
 800a2be:	3710      	adds	r7, #16
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	bd80      	pop	{r7, pc}

0800a2c4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b084      	sub	sp, #16
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
 800a2cc:	460b      	mov	r3, r1
 800a2ce:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Parse the table of classes in use */
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	60bb      	str	r3, [r7, #8]
 800a2d8:	e027      	b.n	800a32a <USBD_ClrClassConfig+0x66>
  {
    /* Check if current class is in use */
    if ((pdev->tclasslist[i].Active) == 1U)
 800a2da:	687a      	ldr	r2, [r7, #4]
 800a2dc:	68bb      	ldr	r3, [r7, #8]
 800a2de:	212c      	movs	r1, #44	@ 0x2c
 800a2e0:	fb01 f303 	mul.w	r3, r1, r3
 800a2e4:	4413      	add	r3, r2
 800a2e6:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	2b01      	cmp	r3, #1
 800a2ee:	d119      	bne.n	800a324 <USBD_ClrClassConfig+0x60>
    {
      if (pdev->pClass[i] != NULL)
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	68ba      	ldr	r2, [r7, #8]
 800a2f4:	32ae      	adds	r2, #174	@ 0xae
 800a2f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d012      	beq.n	800a324 <USBD_ClrClassConfig+0x60>
      {
        pdev->classId = i;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	68ba      	ldr	r2, [r7, #8]
 800a302:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
        /* Clear configuration  and De-initialize the Class process */
        if (pdev->pClass[i]->DeInit(pdev, cfgidx) != 0U)
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	68ba      	ldr	r2, [r7, #8]
 800a30a:	32ae      	adds	r2, #174	@ 0xae
 800a30c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a310:	685b      	ldr	r3, [r3, #4]
 800a312:	78fa      	ldrb	r2, [r7, #3]
 800a314:	4611      	mov	r1, r2
 800a316:	6878      	ldr	r0, [r7, #4]
 800a318:	4798      	blx	r3
 800a31a:	4603      	mov	r3, r0
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d001      	beq.n	800a324 <USBD_ClrClassConfig+0x60>
        {
          ret = USBD_FAIL;
 800a320:	2303      	movs	r3, #3
 800a322:	73fb      	strb	r3, [r7, #15]
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 800a324:	68bb      	ldr	r3, [r7, #8]
 800a326:	3301      	adds	r3, #1
 800a328:	60bb      	str	r3, [r7, #8]
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	2b01      	cmp	r3, #1
 800a32e:	d9d4      	bls.n	800a2da <USBD_ClrClassConfig+0x16>
  {
    ret = USBD_FAIL;
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a330:	7bfb      	ldrb	r3, [r7, #15]
}
 800a332:	4618      	mov	r0, r3
 800a334:	3710      	adds	r7, #16
 800a336:	46bd      	mov	sp, r7
 800a338:	bd80      	pop	{r7, pc}

0800a33a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a33a:	b580      	push	{r7, lr}
 800a33c:	b084      	sub	sp, #16
 800a33e:	af00      	add	r7, sp, #0
 800a340:	6078      	str	r0, [r7, #4]
 800a342:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a34a:	6839      	ldr	r1, [r7, #0]
 800a34c:	4618      	mov	r0, r3
 800a34e:	f001 f94a 	bl	800b5e6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2201      	movs	r2, #1
 800a356:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800a360:	461a      	mov	r2, r3
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a36e:	f003 031f 	and.w	r3, r3, #31
 800a372:	2b02      	cmp	r3, #2
 800a374:	d01a      	beq.n	800a3ac <USBD_LL_SetupStage+0x72>
 800a376:	2b02      	cmp	r3, #2
 800a378:	d822      	bhi.n	800a3c0 <USBD_LL_SetupStage+0x86>
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d002      	beq.n	800a384 <USBD_LL_SetupStage+0x4a>
 800a37e:	2b01      	cmp	r3, #1
 800a380:	d00a      	beq.n	800a398 <USBD_LL_SetupStage+0x5e>
 800a382:	e01d      	b.n	800a3c0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a38a:	4619      	mov	r1, r3
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	f000 fb67 	bl	800aa60 <USBD_StdDevReq>
 800a392:	4603      	mov	r3, r0
 800a394:	73fb      	strb	r3, [r7, #15]
      break;
 800a396:	e020      	b.n	800a3da <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a39e:	4619      	mov	r1, r3
 800a3a0:	6878      	ldr	r0, [r7, #4]
 800a3a2:	f000 fbcf 	bl	800ab44 <USBD_StdItfReq>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	73fb      	strb	r3, [r7, #15]
      break;
 800a3aa:	e016      	b.n	800a3da <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a3b2:	4619      	mov	r1, r3
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	f000 fc31 	bl	800ac1c <USBD_StdEPReq>
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	73fb      	strb	r3, [r7, #15]
      break;
 800a3be:	e00c      	b.n	800a3da <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a3c6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a3ca:	b2db      	uxtb	r3, r3
 800a3cc:	4619      	mov	r1, r3
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	f7ff fd58 	bl	8009e84 <USBD_LL_StallEP>
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	73fb      	strb	r3, [r7, #15]
      break;
 800a3d8:	bf00      	nop
  }

  return ret;
 800a3da:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3dc:	4618      	mov	r0, r3
 800a3de:	3710      	adds	r7, #16
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bd80      	pop	{r7, pc}

0800a3e4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b086      	sub	sp, #24
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	60f8      	str	r0, [r7, #12]
 800a3ec:	460b      	mov	r3, r1
 800a3ee:	607a      	str	r2, [r7, #4]
 800a3f0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a3f6:	7afb      	ldrb	r3, [r7, #11]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d16e      	bne.n	800a4da <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a402:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a40a:	2b03      	cmp	r3, #3
 800a40c:	f040 8098 	bne.w	800a540 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a410:	693b      	ldr	r3, [r7, #16]
 800a412:	689a      	ldr	r2, [r3, #8]
 800a414:	693b      	ldr	r3, [r7, #16]
 800a416:	68db      	ldr	r3, [r3, #12]
 800a418:	429a      	cmp	r2, r3
 800a41a:	d913      	bls.n	800a444 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a41c:	693b      	ldr	r3, [r7, #16]
 800a41e:	689a      	ldr	r2, [r3, #8]
 800a420:	693b      	ldr	r3, [r7, #16]
 800a422:	68db      	ldr	r3, [r3, #12]
 800a424:	1ad2      	subs	r2, r2, r3
 800a426:	693b      	ldr	r3, [r7, #16]
 800a428:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a42a:	693b      	ldr	r3, [r7, #16]
 800a42c:	68da      	ldr	r2, [r3, #12]
 800a42e:	693b      	ldr	r3, [r7, #16]
 800a430:	689b      	ldr	r3, [r3, #8]
 800a432:	4293      	cmp	r3, r2
 800a434:	bf28      	it	cs
 800a436:	4613      	movcs	r3, r2
 800a438:	461a      	mov	r2, r3
 800a43a:	6879      	ldr	r1, [r7, #4]
 800a43c:	68f8      	ldr	r0, [r7, #12]
 800a43e:	f001 fad3 	bl	800b9e8 <USBD_CtlContinueRx>
 800a442:	e07d      	b.n	800a540 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a44a:	f003 031f 	and.w	r3, r3, #31
 800a44e:	2b02      	cmp	r3, #2
 800a450:	d014      	beq.n	800a47c <USBD_LL_DataOutStage+0x98>
 800a452:	2b02      	cmp	r3, #2
 800a454:	d81d      	bhi.n	800a492 <USBD_LL_DataOutStage+0xae>
 800a456:	2b00      	cmp	r3, #0
 800a458:	d002      	beq.n	800a460 <USBD_LL_DataOutStage+0x7c>
 800a45a:	2b01      	cmp	r3, #1
 800a45c:	d003      	beq.n	800a466 <USBD_LL_DataOutStage+0x82>
 800a45e:	e018      	b.n	800a492 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a460:	2300      	movs	r3, #0
 800a462:	75bb      	strb	r3, [r7, #22]
            break;
 800a464:	e018      	b.n	800a498 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a46c:	b2db      	uxtb	r3, r3
 800a46e:	4619      	mov	r1, r3
 800a470:	68f8      	ldr	r0, [r7, #12]
 800a472:	f000 f9da 	bl	800a82a <USBD_CoreFindIF>
 800a476:	4603      	mov	r3, r0
 800a478:	75bb      	strb	r3, [r7, #22]
            break;
 800a47a:	e00d      	b.n	800a498 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a482:	b2db      	uxtb	r3, r3
 800a484:	4619      	mov	r1, r3
 800a486:	68f8      	ldr	r0, [r7, #12]
 800a488:	f000 fa1b 	bl	800a8c2 <USBD_CoreFindEP>
 800a48c:	4603      	mov	r3, r0
 800a48e:	75bb      	strb	r3, [r7, #22]
            break;
 800a490:	e002      	b.n	800a498 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a492:	2300      	movs	r3, #0
 800a494:	75bb      	strb	r3, [r7, #22]
            break;
 800a496:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a498:	7dbb      	ldrb	r3, [r7, #22]
 800a49a:	2b01      	cmp	r3, #1
 800a49c:	d819      	bhi.n	800a4d2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a4a4:	b2db      	uxtb	r3, r3
 800a4a6:	2b03      	cmp	r3, #3
 800a4a8:	d113      	bne.n	800a4d2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a4aa:	7dba      	ldrb	r2, [r7, #22]
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	32ae      	adds	r2, #174	@ 0xae
 800a4b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4b4:	691b      	ldr	r3, [r3, #16]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d00b      	beq.n	800a4d2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a4ba:	7dba      	ldrb	r2, [r7, #22]
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a4c2:	7dba      	ldrb	r2, [r7, #22]
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	32ae      	adds	r2, #174	@ 0xae
 800a4c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4cc:	691b      	ldr	r3, [r3, #16]
 800a4ce:	68f8      	ldr	r0, [r7, #12]
 800a4d0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a4d2:	68f8      	ldr	r0, [r7, #12]
 800a4d4:	f001 fa99 	bl	800ba0a <USBD_CtlSendStatus>
 800a4d8:	e032      	b.n	800a540 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a4da:	7afb      	ldrb	r3, [r7, #11]
 800a4dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a4e0:	b2db      	uxtb	r3, r3
 800a4e2:	4619      	mov	r1, r3
 800a4e4:	68f8      	ldr	r0, [r7, #12]
 800a4e6:	f000 f9ec 	bl	800a8c2 <USBD_CoreFindEP>
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a4ee:	7dbb      	ldrb	r3, [r7, #22]
 800a4f0:	2bff      	cmp	r3, #255	@ 0xff
 800a4f2:	d025      	beq.n	800a540 <USBD_LL_DataOutStage+0x15c>
 800a4f4:	7dbb      	ldrb	r3, [r7, #22]
 800a4f6:	2b01      	cmp	r3, #1
 800a4f8:	d822      	bhi.n	800a540 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a500:	b2db      	uxtb	r3, r3
 800a502:	2b03      	cmp	r3, #3
 800a504:	d117      	bne.n	800a536 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a506:	7dba      	ldrb	r2, [r7, #22]
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	32ae      	adds	r2, #174	@ 0xae
 800a50c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a510:	699b      	ldr	r3, [r3, #24]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d00f      	beq.n	800a536 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a516:	7dba      	ldrb	r2, [r7, #22]
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a51e:	7dba      	ldrb	r2, [r7, #22]
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	32ae      	adds	r2, #174	@ 0xae
 800a524:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a528:	699b      	ldr	r3, [r3, #24]
 800a52a:	7afa      	ldrb	r2, [r7, #11]
 800a52c:	4611      	mov	r1, r2
 800a52e:	68f8      	ldr	r0, [r7, #12]
 800a530:	4798      	blx	r3
 800a532:	4603      	mov	r3, r0
 800a534:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a536:	7dfb      	ldrb	r3, [r7, #23]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d001      	beq.n	800a540 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a53c:	7dfb      	ldrb	r3, [r7, #23]
 800a53e:	e000      	b.n	800a542 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a540:	2300      	movs	r3, #0
}
 800a542:	4618      	mov	r0, r3
 800a544:	3718      	adds	r7, #24
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}

0800a54a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a54a:	b580      	push	{r7, lr}
 800a54c:	b086      	sub	sp, #24
 800a54e:	af00      	add	r7, sp, #0
 800a550:	60f8      	str	r0, [r7, #12]
 800a552:	460b      	mov	r3, r1
 800a554:	607a      	str	r2, [r7, #4]
 800a556:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a558:	7afb      	ldrb	r3, [r7, #11]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d16f      	bne.n	800a63e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	3314      	adds	r3, #20
 800a562:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a56a:	2b02      	cmp	r3, #2
 800a56c:	d15a      	bne.n	800a624 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a56e:	693b      	ldr	r3, [r7, #16]
 800a570:	689a      	ldr	r2, [r3, #8]
 800a572:	693b      	ldr	r3, [r7, #16]
 800a574:	68db      	ldr	r3, [r3, #12]
 800a576:	429a      	cmp	r2, r3
 800a578:	d914      	bls.n	800a5a4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a57a:	693b      	ldr	r3, [r7, #16]
 800a57c:	689a      	ldr	r2, [r3, #8]
 800a57e:	693b      	ldr	r3, [r7, #16]
 800a580:	68db      	ldr	r3, [r3, #12]
 800a582:	1ad2      	subs	r2, r2, r3
 800a584:	693b      	ldr	r3, [r7, #16]
 800a586:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a588:	693b      	ldr	r3, [r7, #16]
 800a58a:	689b      	ldr	r3, [r3, #8]
 800a58c:	461a      	mov	r2, r3
 800a58e:	6879      	ldr	r1, [r7, #4]
 800a590:	68f8      	ldr	r0, [r7, #12]
 800a592:	f001 f9fb 	bl	800b98c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a596:	2300      	movs	r3, #0
 800a598:	2200      	movs	r2, #0
 800a59a:	2100      	movs	r1, #0
 800a59c:	68f8      	ldr	r0, [r7, #12]
 800a59e:	f7ff fd03 	bl	8009fa8 <USBD_LL_PrepareReceive>
 800a5a2:	e03f      	b.n	800a624 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a5a4:	693b      	ldr	r3, [r7, #16]
 800a5a6:	68da      	ldr	r2, [r3, #12]
 800a5a8:	693b      	ldr	r3, [r7, #16]
 800a5aa:	689b      	ldr	r3, [r3, #8]
 800a5ac:	429a      	cmp	r2, r3
 800a5ae:	d11c      	bne.n	800a5ea <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a5b0:	693b      	ldr	r3, [r7, #16]
 800a5b2:	685a      	ldr	r2, [r3, #4]
 800a5b4:	693b      	ldr	r3, [r7, #16]
 800a5b6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a5b8:	429a      	cmp	r2, r3
 800a5ba:	d316      	bcc.n	800a5ea <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a5bc:	693b      	ldr	r3, [r7, #16]
 800a5be:	685a      	ldr	r2, [r3, #4]
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a5c6:	429a      	cmp	r2, r3
 800a5c8:	d20f      	bcs.n	800a5ea <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	2100      	movs	r1, #0
 800a5ce:	68f8      	ldr	r0, [r7, #12]
 800a5d0:	f001 f9dc 	bl	800b98c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a5dc:	2300      	movs	r3, #0
 800a5de:	2200      	movs	r2, #0
 800a5e0:	2100      	movs	r1, #0
 800a5e2:	68f8      	ldr	r0, [r7, #12]
 800a5e4:	f7ff fce0 	bl	8009fa8 <USBD_LL_PrepareReceive>
 800a5e8:	e01c      	b.n	800a624 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a5f0:	b2db      	uxtb	r3, r3
 800a5f2:	2b03      	cmp	r3, #3
 800a5f4:	d10f      	bne.n	800a616 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a5fc:	68db      	ldr	r3, [r3, #12]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d009      	beq.n	800a616 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	2200      	movs	r2, #0
 800a606:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a610:	68db      	ldr	r3, [r3, #12]
 800a612:	68f8      	ldr	r0, [r7, #12]
 800a614:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a616:	2180      	movs	r1, #128	@ 0x80
 800a618:	68f8      	ldr	r0, [r7, #12]
 800a61a:	f7ff fc33 	bl	8009e84 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a61e:	68f8      	ldr	r0, [r7, #12]
 800a620:	f001 fa06 	bl	800ba30 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d03a      	beq.n	800a6a4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a62e:	68f8      	ldr	r0, [r7, #12]
 800a630:	f7ff fe02 	bl	800a238 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	2200      	movs	r2, #0
 800a638:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a63c:	e032      	b.n	800a6a4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a63e:	7afb      	ldrb	r3, [r7, #11]
 800a640:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a644:	b2db      	uxtb	r3, r3
 800a646:	4619      	mov	r1, r3
 800a648:	68f8      	ldr	r0, [r7, #12]
 800a64a:	f000 f93a 	bl	800a8c2 <USBD_CoreFindEP>
 800a64e:	4603      	mov	r3, r0
 800a650:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a652:	7dfb      	ldrb	r3, [r7, #23]
 800a654:	2bff      	cmp	r3, #255	@ 0xff
 800a656:	d025      	beq.n	800a6a4 <USBD_LL_DataInStage+0x15a>
 800a658:	7dfb      	ldrb	r3, [r7, #23]
 800a65a:	2b01      	cmp	r3, #1
 800a65c:	d822      	bhi.n	800a6a4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a664:	b2db      	uxtb	r3, r3
 800a666:	2b03      	cmp	r3, #3
 800a668:	d11c      	bne.n	800a6a4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a66a:	7dfa      	ldrb	r2, [r7, #23]
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	32ae      	adds	r2, #174	@ 0xae
 800a670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a674:	695b      	ldr	r3, [r3, #20]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d014      	beq.n	800a6a4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a67a:	7dfa      	ldrb	r2, [r7, #23]
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a682:	7dfa      	ldrb	r2, [r7, #23]
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	32ae      	adds	r2, #174	@ 0xae
 800a688:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a68c:	695b      	ldr	r3, [r3, #20]
 800a68e:	7afa      	ldrb	r2, [r7, #11]
 800a690:	4611      	mov	r1, r2
 800a692:	68f8      	ldr	r0, [r7, #12]
 800a694:	4798      	blx	r3
 800a696:	4603      	mov	r3, r0
 800a698:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a69a:	7dbb      	ldrb	r3, [r7, #22]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d001      	beq.n	800a6a4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a6a0:	7dbb      	ldrb	r3, [r7, #22]
 800a6a2:	e000      	b.n	800a6a6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a6a4:	2300      	movs	r3, #0
}
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	3718      	adds	r7, #24
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd80      	pop	{r7, pc}

0800a6ae <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a6ae:	b580      	push	{r7, lr}
 800a6b0:	b084      	sub	sp, #16
 800a6b2:	af00      	add	r7, sp, #0
 800a6b4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2201      	movs	r2, #1
 800a6be:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2200      	movs	r2, #0
 800a6dc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0

#ifdef USE_USBD_COMPOSITE
  /* Parse the table of classes in use */
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	60bb      	str	r3, [r7, #8]
 800a6e4:	e031      	b.n	800a74a <USBD_LL_Reset+0x9c>
  {
    /* Check if current class is in use */
    if ((pdev->tclasslist[i].Active) == 1U)
 800a6e6:	687a      	ldr	r2, [r7, #4]
 800a6e8:	68bb      	ldr	r3, [r7, #8]
 800a6ea:	212c      	movs	r1, #44	@ 0x2c
 800a6ec:	fb01 f303 	mul.w	r3, r1, r3
 800a6f0:	4413      	add	r3, r2
 800a6f2:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	2b01      	cmp	r3, #1
 800a6fa:	d123      	bne.n	800a744 <USBD_LL_Reset+0x96>
    {
      if (pdev->pClass[i] != NULL)
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	68ba      	ldr	r2, [r7, #8]
 800a700:	32ae      	adds	r2, #174	@ 0xae
 800a702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d01c      	beq.n	800a744 <USBD_LL_Reset+0x96>
      {
        pdev->classId = i;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	68ba      	ldr	r2, [r7, #8]
 800a70e:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
        /* Clear configuration  and De-initialize the Class process*/

        if (pdev->pClass[i]->DeInit != NULL)
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	68ba      	ldr	r2, [r7, #8]
 800a716:	32ae      	adds	r2, #174	@ 0xae
 800a718:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a71c:	685b      	ldr	r3, [r3, #4]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d010      	beq.n	800a744 <USBD_LL_Reset+0x96>
        {
          if (pdev->pClass[i]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	68ba      	ldr	r2, [r7, #8]
 800a726:	32ae      	adds	r2, #174	@ 0xae
 800a728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a72c:	685b      	ldr	r3, [r3, #4]
 800a72e:	687a      	ldr	r2, [r7, #4]
 800a730:	6852      	ldr	r2, [r2, #4]
 800a732:	b2d2      	uxtb	r2, r2
 800a734:	4611      	mov	r1, r2
 800a736:	6878      	ldr	r0, [r7, #4]
 800a738:	4798      	blx	r3
 800a73a:	4603      	mov	r3, r0
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d001      	beq.n	800a744 <USBD_LL_Reset+0x96>
          {
            ret = USBD_FAIL;
 800a740:	2303      	movs	r3, #3
 800a742:	73fb      	strb	r3, [r7, #15]
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 800a744:	68bb      	ldr	r3, [r7, #8]
 800a746:	3301      	adds	r3, #1
 800a748:	60bb      	str	r3, [r7, #8]
 800a74a:	68bb      	ldr	r3, [r7, #8]
 800a74c:	2b01      	cmp	r3, #1
 800a74e:	d9ca      	bls.n	800a6e6 <USBD_LL_Reset+0x38>
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a750:	2340      	movs	r3, #64	@ 0x40
 800a752:	2200      	movs	r2, #0
 800a754:	2100      	movs	r1, #0
 800a756:	6878      	ldr	r0, [r7, #4]
 800a758:	f7ff fb5b 	bl	8009e12 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2201      	movs	r2, #1
 800a760:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2240      	movs	r2, #64	@ 0x40
 800a768:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a76c:	2340      	movs	r3, #64	@ 0x40
 800a76e:	2200      	movs	r2, #0
 800a770:	2180      	movs	r1, #128	@ 0x80
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f7ff fb4d 	bl	8009e12 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2201      	movs	r2, #1
 800a77c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2240      	movs	r2, #64	@ 0x40
 800a782:	621a      	str	r2, [r3, #32]

  return ret;
 800a784:	7bfb      	ldrb	r3, [r7, #15]
}
 800a786:	4618      	mov	r0, r3
 800a788:	3710      	adds	r7, #16
 800a78a:	46bd      	mov	sp, r7
 800a78c:	bd80      	pop	{r7, pc}

0800a78e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a78e:	b480      	push	{r7}
 800a790:	b083      	sub	sp, #12
 800a792:	af00      	add	r7, sp, #0
 800a794:	6078      	str	r0, [r7, #4]
 800a796:	460b      	mov	r3, r1
 800a798:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	78fa      	ldrb	r2, [r7, #3]
 800a79e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a7a0:	2300      	movs	r3, #0
}
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	370c      	adds	r7, #12
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ac:	4770      	bx	lr

0800a7ae <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a7ae:	b580      	push	{r7, lr}
 800a7b0:	b084      	sub	sp, #16
 800a7b2:	af00      	add	r7, sp, #0
 800a7b4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a7bc:	b2db      	uxtb	r3, r3
 800a7be:	2b03      	cmp	r3, #3
 800a7c0:	d12e      	bne.n	800a820 <USBD_LL_SOF+0x72>
  {
#ifdef USE_USBD_COMPOSITE
    /* Parse the table of classes in use */
    for (uint32_t i = 0; i < USBD_MAX_SUPPORTED_CLASS; i++)
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	60fb      	str	r3, [r7, #12]
 800a7c6:	e028      	b.n	800a81a <USBD_LL_SOF+0x6c>
    {
      /* Check if current class is in use */
      if ((pdev->tclasslist[i].Active) == 1U)
 800a7c8:	687a      	ldr	r2, [r7, #4]
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	212c      	movs	r1, #44	@ 0x2c
 800a7ce:	fb01 f303 	mul.w	r3, r1, r3
 800a7d2:	4413      	add	r3, r2
 800a7d4:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	2b01      	cmp	r3, #1
 800a7dc:	d11a      	bne.n	800a814 <USBD_LL_SOF+0x66>
      {
        if (pdev->pClass[i] != NULL)
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	68fa      	ldr	r2, [r7, #12]
 800a7e2:	32ae      	adds	r2, #174	@ 0xae
 800a7e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d013      	beq.n	800a814 <USBD_LL_SOF+0x66>
        {
          if (pdev->pClass[i]->SOF != NULL)
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	68fa      	ldr	r2, [r7, #12]
 800a7f0:	32ae      	adds	r2, #174	@ 0xae
 800a7f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7f6:	69db      	ldr	r3, [r3, #28]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d00b      	beq.n	800a814 <USBD_LL_SOF+0x66>
          {
            pdev->classId = i;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	68fa      	ldr	r2, [r7, #12]
 800a800:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
            (void)pdev->pClass[i]->SOF(pdev);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	68fa      	ldr	r2, [r7, #12]
 800a808:	32ae      	adds	r2, #174	@ 0xae
 800a80a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a80e:	69db      	ldr	r3, [r3, #28]
 800a810:	6878      	ldr	r0, [r7, #4]
 800a812:	4798      	blx	r3
    for (uint32_t i = 0; i < USBD_MAX_SUPPORTED_CLASS; i++)
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	3301      	adds	r3, #1
 800a818:	60fb      	str	r3, [r7, #12]
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	2b01      	cmp	r3, #1
 800a81e:	d9d3      	bls.n	800a7c8 <USBD_LL_SOF+0x1a>
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a820:	2300      	movs	r3, #0
}
 800a822:	4618      	mov	r0, r3
 800a824:	3710      	adds	r7, #16
 800a826:	46bd      	mov	sp, r7
 800a828:	bd80      	pop	{r7, pc}

0800a82a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a82a:	b480      	push	{r7}
 800a82c:	b085      	sub	sp, #20
 800a82e:	af00      	add	r7, sp, #0
 800a830:	6078      	str	r0, [r7, #4]
 800a832:	460b      	mov	r3, r1
 800a834:	70fb      	strb	r3, [r7, #3]
#ifdef USE_USBD_COMPOSITE
  /* Parse the table of classes in use */
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 800a836:	2300      	movs	r3, #0
 800a838:	60fb      	str	r3, [r7, #12]
 800a83a:	e038      	b.n	800a8ae <USBD_CoreFindIF+0x84>
  {
    /* Check if current class is in use */
    if ((pdev->tclasslist[i].Active) == 1U)
 800a83c:	687a      	ldr	r2, [r7, #4]
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	212c      	movs	r1, #44	@ 0x2c
 800a842:	fb01 f303 	mul.w	r3, r1, r3
 800a846:	4413      	add	r3, r2
 800a848:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	2b01      	cmp	r3, #1
 800a850:	d12a      	bne.n	800a8a8 <USBD_CoreFindIF+0x7e>
    {
      /* Parse all interfaces listed in the current class */
      for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 800a852:	2300      	movs	r3, #0
 800a854:	60bb      	str	r3, [r7, #8]
 800a856:	e01b      	b.n	800a890 <USBD_CoreFindIF+0x66>
      {
        /* Check if requested Interface matches the current class interface */
        if (pdev->tclasslist[i].Ifs[j] == index)
 800a858:	687a      	ldr	r2, [r7, #4]
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	212c      	movs	r1, #44	@ 0x2c
 800a85e:	fb01 f303 	mul.w	r3, r1, r3
 800a862:	441a      	add	r2, r3
 800a864:	68bb      	ldr	r3, [r7, #8]
 800a866:	4413      	add	r3, r2
 800a868:	f503 7343 	add.w	r3, r3, #780	@ 0x30c
 800a86c:	781b      	ldrb	r3, [r3, #0]
 800a86e:	78fa      	ldrb	r2, [r7, #3]
 800a870:	429a      	cmp	r2, r3
 800a872:	d10a      	bne.n	800a88a <USBD_CoreFindIF+0x60>
        {
          if (pdev->pClass[i]->Setup != NULL)
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	68fa      	ldr	r2, [r7, #12]
 800a878:	32ae      	adds	r2, #174	@ 0xae
 800a87a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a87e:	689b      	ldr	r3, [r3, #8]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d002      	beq.n	800a88a <USBD_CoreFindIF+0x60>
          {
            return (uint8_t)i;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	b2db      	uxtb	r3, r3
 800a888:	e015      	b.n	800a8b6 <USBD_CoreFindIF+0x8c>
      for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 800a88a:	68bb      	ldr	r3, [r7, #8]
 800a88c:	3301      	adds	r3, #1
 800a88e:	60bb      	str	r3, [r7, #8]
 800a890:	687a      	ldr	r2, [r7, #4]
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	212c      	movs	r1, #44	@ 0x2c
 800a896:	fb01 f303 	mul.w	r3, r1, r3
 800a89a:	4413      	add	r3, r2
 800a89c:	f503 7342 	add.w	r3, r3, #776	@ 0x308
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	68ba      	ldr	r2, [r7, #8]
 800a8a4:	429a      	cmp	r2, r3
 800a8a6:	d3d7      	bcc.n	800a858 <USBD_CoreFindIF+0x2e>
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	3301      	adds	r3, #1
 800a8ac:	60fb      	str	r3, [r7, #12]
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	2b01      	cmp	r3, #1
 800a8b2:	d9c3      	bls.n	800a83c <USBD_CoreFindIF+0x12>
        }
      }
    }
  }

  return 0xFFU;
 800a8b4:	23ff      	movs	r3, #255	@ 0xff
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	3714      	adds	r7, #20
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c0:	4770      	bx	lr

0800a8c2 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a8c2:	b480      	push	{r7}
 800a8c4:	b085      	sub	sp, #20
 800a8c6:	af00      	add	r7, sp, #0
 800a8c8:	6078      	str	r0, [r7, #4]
 800a8ca:	460b      	mov	r3, r1
 800a8cc:	70fb      	strb	r3, [r7, #3]
#ifdef USE_USBD_COMPOSITE
  /* Parse the table of classes in use */
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	60fb      	str	r3, [r7, #12]
 800a8d2:	e039      	b.n	800a948 <USBD_CoreFindEP+0x86>
  {
    /* Check if current class is in use */
    if ((pdev->tclasslist[i].Active) == 1U)
 800a8d4:	687a      	ldr	r2, [r7, #4]
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	212c      	movs	r1, #44	@ 0x2c
 800a8da:	fb01 f303 	mul.w	r3, r1, r3
 800a8de:	4413      	add	r3, r2
 800a8e0:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	2b01      	cmp	r3, #1
 800a8e8:	d12b      	bne.n	800a942 <USBD_CoreFindEP+0x80>
    {
      /* Parse all endpoints listed in the current class */
      for (uint32_t j = 0U; j < pdev->tclasslist[i].NumEps; j++)
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	60bb      	str	r3, [r7, #8]
 800a8ee:	e01c      	b.n	800a92a <USBD_CoreFindEP+0x68>
      {
        /* Check if requested endpoint matches the current class endpoint */
        if (pdev->tclasslist[i].Eps[j].add == index)
 800a8f0:	6879      	ldr	r1, [r7, #4]
 800a8f2:	68fa      	ldr	r2, [r7, #12]
 800a8f4:	4613      	mov	r3, r2
 800a8f6:	009b      	lsls	r3, r3, #2
 800a8f8:	4413      	add	r3, r2
 800a8fa:	005b      	lsls	r3, r3, #1
 800a8fc:	4413      	add	r3, r2
 800a8fe:	68ba      	ldr	r2, [r7, #8]
 800a900:	4413      	add	r3, r2
 800a902:	33be      	adds	r3, #190	@ 0xbe
 800a904:	f811 3023 	ldrb.w	r3, [r1, r3, lsl #2]
 800a908:	78fa      	ldrb	r2, [r7, #3]
 800a90a:	429a      	cmp	r2, r3
 800a90c:	d10a      	bne.n	800a924 <USBD_CoreFindEP+0x62>
        {
          if (pdev->pClass[i]->Setup != NULL)
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	68fa      	ldr	r2, [r7, #12]
 800a912:	32ae      	adds	r2, #174	@ 0xae
 800a914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a918:	689b      	ldr	r3, [r3, #8]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d002      	beq.n	800a924 <USBD_CoreFindEP+0x62>
          {
            return (uint8_t)i;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	b2db      	uxtb	r3, r3
 800a922:	e015      	b.n	800a950 <USBD_CoreFindEP+0x8e>
      for (uint32_t j = 0U; j < pdev->tclasslist[i].NumEps; j++)
 800a924:	68bb      	ldr	r3, [r7, #8]
 800a926:	3301      	adds	r3, #1
 800a928:	60bb      	str	r3, [r7, #8]
 800a92a:	687a      	ldr	r2, [r7, #4]
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	212c      	movs	r1, #44	@ 0x2c
 800a930:	fb01 f303 	mul.w	r3, r1, r3
 800a934:	4413      	add	r3, r2
 800a936:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	68ba      	ldr	r2, [r7, #8]
 800a93e:	429a      	cmp	r2, r3
 800a940:	d3d6      	bcc.n	800a8f0 <USBD_CoreFindEP+0x2e>
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	3301      	adds	r3, #1
 800a946:	60fb      	str	r3, [r7, #12]
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	2b01      	cmp	r3, #1
 800a94c:	d9c2      	bls.n	800a8d4 <USBD_CoreFindEP+0x12>
        }
      }
    }
  }

  return 0xFFU;
 800a94e:	23ff      	movs	r3, #255	@ 0xff
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 800a950:	4618      	mov	r0, r3
 800a952:	3714      	adds	r7, #20
 800a954:	46bd      	mov	sp, r7
 800a956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95a:	4770      	bx	lr

0800a95c <USBD_CoreGetEPAdd>:
  * @param  ep_type: USBD_EP_TYPE_CTRL, USBD_EP_TYPE_ISOC, USBD_EP_TYPE_BULK or USBD_EP_TYPE_INTR
  * @param  ClassId: The Class ID
  * @retval Address of the selected endpoint or 0xFFU if no endpoint found.
  */
uint8_t USBD_CoreGetEPAdd(USBD_HandleTypeDef *pdev, uint8_t ep_dir, uint8_t ep_type, uint8_t ClassId)
{
 800a95c:	b480      	push	{r7}
 800a95e:	b085      	sub	sp, #20
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
 800a964:	4608      	mov	r0, r1
 800a966:	4611      	mov	r1, r2
 800a968:	461a      	mov	r2, r3
 800a96a:	4603      	mov	r3, r0
 800a96c:	70fb      	strb	r3, [r7, #3]
 800a96e:	460b      	mov	r3, r1
 800a970:	70bb      	strb	r3, [r7, #2]
 800a972:	4613      	mov	r3, r2
 800a974:	707b      	strb	r3, [r7, #1]
  uint8_t idx;

  /* Find the EP address in the selected class table */
  for (idx = 0; idx < pdev->tclasslist[ClassId].NumEps; idx++)
 800a976:	2300      	movs	r3, #0
 800a978:	73fb      	strb	r3, [r7, #15]
 800a97a:	e03f      	b.n	800a9fc <USBD_CoreGetEPAdd+0xa0>
  {
    if (((pdev->tclasslist[ClassId].Eps[idx].add & USBD_EP_IN) == ep_dir) && \
 800a97c:	787a      	ldrb	r2, [r7, #1]
 800a97e:	7bf8      	ldrb	r0, [r7, #15]
 800a980:	6879      	ldr	r1, [r7, #4]
 800a982:	4613      	mov	r3, r2
 800a984:	009b      	lsls	r3, r3, #2
 800a986:	4413      	add	r3, r2
 800a988:	005b      	lsls	r3, r3, #1
 800a98a:	4413      	add	r3, r2
 800a98c:	4403      	add	r3, r0
 800a98e:	33be      	adds	r3, #190	@ 0xbe
 800a990:	f811 3023 	ldrb.w	r3, [r1, r3, lsl #2]
 800a994:	f003 0280 	and.w	r2, r3, #128	@ 0x80
 800a998:	78fb      	ldrb	r3, [r7, #3]
 800a99a:	429a      	cmp	r2, r3
 800a99c:	d12b      	bne.n	800a9f6 <USBD_CoreGetEPAdd+0x9a>
        (pdev->tclasslist[ClassId].Eps[idx].type == ep_type) && \
 800a99e:	787a      	ldrb	r2, [r7, #1]
 800a9a0:	7bf8      	ldrb	r0, [r7, #15]
 800a9a2:	6879      	ldr	r1, [r7, #4]
 800a9a4:	4613      	mov	r3, r2
 800a9a6:	009b      	lsls	r3, r3, #2
 800a9a8:	4413      	add	r3, r2
 800a9aa:	005b      	lsls	r3, r3, #1
 800a9ac:	4413      	add	r3, r2
 800a9ae:	4403      	add	r3, r0
 800a9b0:	33be      	adds	r3, #190	@ 0xbe
 800a9b2:	009b      	lsls	r3, r3, #2
 800a9b4:	440b      	add	r3, r1
 800a9b6:	785b      	ldrb	r3, [r3, #1]
    if (((pdev->tclasslist[ClassId].Eps[idx].add & USBD_EP_IN) == ep_dir) && \
 800a9b8:	78ba      	ldrb	r2, [r7, #2]
 800a9ba:	429a      	cmp	r2, r3
 800a9bc:	d11b      	bne.n	800a9f6 <USBD_CoreGetEPAdd+0x9a>
        (pdev->tclasslist[ClassId].Eps[idx].is_used != 0U))
 800a9be:	787a      	ldrb	r2, [r7, #1]
 800a9c0:	7bf8      	ldrb	r0, [r7, #15]
 800a9c2:	6879      	ldr	r1, [r7, #4]
 800a9c4:	4613      	mov	r3, r2
 800a9c6:	009b      	lsls	r3, r3, #2
 800a9c8:	4413      	add	r3, r2
 800a9ca:	005b      	lsls	r3, r3, #1
 800a9cc:	4413      	add	r3, r2
 800a9ce:	4403      	add	r3, r0
 800a9d0:	33be      	adds	r3, #190	@ 0xbe
 800a9d2:	009b      	lsls	r3, r3, #2
 800a9d4:	440b      	add	r3, r1
 800a9d6:	78db      	ldrb	r3, [r3, #3]
        (pdev->tclasslist[ClassId].Eps[idx].type == ep_type) && \
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d00c      	beq.n	800a9f6 <USBD_CoreGetEPAdd+0x9a>
    {
      return (pdev->tclasslist[ClassId].Eps[idx].add);
 800a9dc:	787a      	ldrb	r2, [r7, #1]
 800a9de:	7bf8      	ldrb	r0, [r7, #15]
 800a9e0:	6879      	ldr	r1, [r7, #4]
 800a9e2:	4613      	mov	r3, r2
 800a9e4:	009b      	lsls	r3, r3, #2
 800a9e6:	4413      	add	r3, r2
 800a9e8:	005b      	lsls	r3, r3, #1
 800a9ea:	4413      	add	r3, r2
 800a9ec:	4403      	add	r3, r0
 800a9ee:	33be      	adds	r3, #190	@ 0xbe
 800a9f0:	f811 3023 	ldrb.w	r3, [r1, r3, lsl #2]
 800a9f4:	e00f      	b.n	800aa16 <USBD_CoreGetEPAdd+0xba>
  for (idx = 0; idx < pdev->tclasslist[ClassId].NumEps; idx++)
 800a9f6:	7bfb      	ldrb	r3, [r7, #15]
 800a9f8:	3301      	adds	r3, #1
 800a9fa:	73fb      	strb	r3, [r7, #15]
 800a9fc:	7bfa      	ldrb	r2, [r7, #15]
 800a9fe:	787b      	ldrb	r3, [r7, #1]
 800aa00:	6879      	ldr	r1, [r7, #4]
 800aa02:	202c      	movs	r0, #44	@ 0x2c
 800aa04:	fb00 f303 	mul.w	r3, r0, r3
 800aa08:	440b      	add	r3, r1
 800aa0a:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	429a      	cmp	r2, r3
 800aa12:	d3b3      	bcc.n	800a97c <USBD_CoreGetEPAdd+0x20>
    }
  }

  /* If reaching this point, then no endpoint was found */
  return 0xFFU;
 800aa14:	23ff      	movs	r3, #255	@ 0xff
}
 800aa16:	4618      	mov	r0, r3
 800aa18:	3714      	adds	r7, #20
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa20:	4770      	bx	lr

0800aa22 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800aa22:	b480      	push	{r7}
 800aa24:	b087      	sub	sp, #28
 800aa26:	af00      	add	r7, sp, #0
 800aa28:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800aa2e:	697b      	ldr	r3, [r7, #20]
 800aa30:	781b      	ldrb	r3, [r3, #0]
 800aa32:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800aa34:	697b      	ldr	r3, [r7, #20]
 800aa36:	3301      	adds	r3, #1
 800aa38:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800aa3a:	697b      	ldr	r3, [r7, #20]
 800aa3c:	781b      	ldrb	r3, [r3, #0]
 800aa3e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800aa40:	8a3b      	ldrh	r3, [r7, #16]
 800aa42:	021b      	lsls	r3, r3, #8
 800aa44:	b21a      	sxth	r2, r3
 800aa46:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800aa4a:	4313      	orrs	r3, r2
 800aa4c:	b21b      	sxth	r3, r3
 800aa4e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800aa50:	89fb      	ldrh	r3, [r7, #14]
}
 800aa52:	4618      	mov	r0, r3
 800aa54:	371c      	adds	r7, #28
 800aa56:	46bd      	mov	sp, r7
 800aa58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5c:	4770      	bx	lr
	...

0800aa60 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b084      	sub	sp, #16
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
 800aa68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	781b      	ldrb	r3, [r3, #0]
 800aa72:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800aa76:	2b40      	cmp	r3, #64	@ 0x40
 800aa78:	d005      	beq.n	800aa86 <USBD_StdDevReq+0x26>
 800aa7a:	2b40      	cmp	r3, #64	@ 0x40
 800aa7c:	d857      	bhi.n	800ab2e <USBD_StdDevReq+0xce>
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d00f      	beq.n	800aaa2 <USBD_StdDevReq+0x42>
 800aa82:	2b20      	cmp	r3, #32
 800aa84:	d153      	bne.n	800ab2e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	32ae      	adds	r2, #174	@ 0xae
 800aa90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa94:	689b      	ldr	r3, [r3, #8]
 800aa96:	6839      	ldr	r1, [r7, #0]
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	4798      	blx	r3
 800aa9c:	4603      	mov	r3, r0
 800aa9e:	73fb      	strb	r3, [r7, #15]
      break;
 800aaa0:	e04a      	b.n	800ab38 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	785b      	ldrb	r3, [r3, #1]
 800aaa6:	2b09      	cmp	r3, #9
 800aaa8:	d83b      	bhi.n	800ab22 <USBD_StdDevReq+0xc2>
 800aaaa:	a201      	add	r2, pc, #4	@ (adr r2, 800aab0 <USBD_StdDevReq+0x50>)
 800aaac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aab0:	0800ab05 	.word	0x0800ab05
 800aab4:	0800ab19 	.word	0x0800ab19
 800aab8:	0800ab23 	.word	0x0800ab23
 800aabc:	0800ab0f 	.word	0x0800ab0f
 800aac0:	0800ab23 	.word	0x0800ab23
 800aac4:	0800aae3 	.word	0x0800aae3
 800aac8:	0800aad9 	.word	0x0800aad9
 800aacc:	0800ab23 	.word	0x0800ab23
 800aad0:	0800aafb 	.word	0x0800aafb
 800aad4:	0800aaed 	.word	0x0800aaed
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800aad8:	6839      	ldr	r1, [r7, #0]
 800aada:	6878      	ldr	r0, [r7, #4]
 800aadc:	f000 fa3c 	bl	800af58 <USBD_GetDescriptor>
          break;
 800aae0:	e024      	b.n	800ab2c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800aae2:	6839      	ldr	r1, [r7, #0]
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	f000 fbdb 	bl	800b2a0 <USBD_SetAddress>
          break;
 800aaea:	e01f      	b.n	800ab2c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800aaec:	6839      	ldr	r1, [r7, #0]
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	f000 fc1a 	bl	800b328 <USBD_SetConfig>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	73fb      	strb	r3, [r7, #15]
          break;
 800aaf8:	e018      	b.n	800ab2c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800aafa:	6839      	ldr	r1, [r7, #0]
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	f000 fcbd 	bl	800b47c <USBD_GetConfig>
          break;
 800ab02:	e013      	b.n	800ab2c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ab04:	6839      	ldr	r1, [r7, #0]
 800ab06:	6878      	ldr	r0, [r7, #4]
 800ab08:	f000 fcee 	bl	800b4e8 <USBD_GetStatus>
          break;
 800ab0c:	e00e      	b.n	800ab2c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ab0e:	6839      	ldr	r1, [r7, #0]
 800ab10:	6878      	ldr	r0, [r7, #4]
 800ab12:	f000 fd1d 	bl	800b550 <USBD_SetFeature>
          break;
 800ab16:	e009      	b.n	800ab2c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ab18:	6839      	ldr	r1, [r7, #0]
 800ab1a:	6878      	ldr	r0, [r7, #4]
 800ab1c:	f000 fd41 	bl	800b5a2 <USBD_ClrFeature>
          break;
 800ab20:	e004      	b.n	800ab2c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ab22:	6839      	ldr	r1, [r7, #0]
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f000 fd98 	bl	800b65a <USBD_CtlError>
          break;
 800ab2a:	bf00      	nop
      }
      break;
 800ab2c:	e004      	b.n	800ab38 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800ab2e:	6839      	ldr	r1, [r7, #0]
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	f000 fd92 	bl	800b65a <USBD_CtlError>
      break;
 800ab36:	bf00      	nop
  }

  return ret;
 800ab38:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	3710      	adds	r7, #16
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}
 800ab42:	bf00      	nop

0800ab44 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b084      	sub	sp, #16
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
 800ab4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ab4e:	2300      	movs	r3, #0
 800ab50:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	781b      	ldrb	r3, [r3, #0]
 800ab56:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ab5a:	2b40      	cmp	r3, #64	@ 0x40
 800ab5c:	d005      	beq.n	800ab6a <USBD_StdItfReq+0x26>
 800ab5e:	2b40      	cmp	r3, #64	@ 0x40
 800ab60:	d852      	bhi.n	800ac08 <USBD_StdItfReq+0xc4>
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d001      	beq.n	800ab6a <USBD_StdItfReq+0x26>
 800ab66:	2b20      	cmp	r3, #32
 800ab68:	d14e      	bne.n	800ac08 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab70:	b2db      	uxtb	r3, r3
 800ab72:	3b01      	subs	r3, #1
 800ab74:	2b02      	cmp	r3, #2
 800ab76:	d840      	bhi.n	800abfa <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	889b      	ldrh	r3, [r3, #4]
 800ab7c:	b2db      	uxtb	r3, r3
 800ab7e:	2b01      	cmp	r3, #1
 800ab80:	d836      	bhi.n	800abf0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	889b      	ldrh	r3, [r3, #4]
 800ab86:	b2db      	uxtb	r3, r3
 800ab88:	4619      	mov	r1, r3
 800ab8a:	6878      	ldr	r0, [r7, #4]
 800ab8c:	f7ff fe4d 	bl	800a82a <USBD_CoreFindIF>
 800ab90:	4603      	mov	r3, r0
 800ab92:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ab94:	7bbb      	ldrb	r3, [r7, #14]
 800ab96:	2bff      	cmp	r3, #255	@ 0xff
 800ab98:	d01d      	beq.n	800abd6 <USBD_StdItfReq+0x92>
 800ab9a:	7bbb      	ldrb	r3, [r7, #14]
 800ab9c:	2b01      	cmp	r3, #1
 800ab9e:	d81a      	bhi.n	800abd6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800aba0:	7bba      	ldrb	r2, [r7, #14]
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	32ae      	adds	r2, #174	@ 0xae
 800aba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abaa:	689b      	ldr	r3, [r3, #8]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d00f      	beq.n	800abd0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800abb0:	7bba      	ldrb	r2, [r7, #14]
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800abb8:	7bba      	ldrb	r2, [r7, #14]
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	32ae      	adds	r2, #174	@ 0xae
 800abbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abc2:	689b      	ldr	r3, [r3, #8]
 800abc4:	6839      	ldr	r1, [r7, #0]
 800abc6:	6878      	ldr	r0, [r7, #4]
 800abc8:	4798      	blx	r3
 800abca:	4603      	mov	r3, r0
 800abcc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800abce:	e004      	b.n	800abda <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800abd0:	2303      	movs	r3, #3
 800abd2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800abd4:	e001      	b.n	800abda <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800abd6:	2303      	movs	r3, #3
 800abd8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	88db      	ldrh	r3, [r3, #6]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d110      	bne.n	800ac04 <USBD_StdItfReq+0xc0>
 800abe2:	7bfb      	ldrb	r3, [r7, #15]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d10d      	bne.n	800ac04 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800abe8:	6878      	ldr	r0, [r7, #4]
 800abea:	f000 ff0e 	bl	800ba0a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800abee:	e009      	b.n	800ac04 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800abf0:	6839      	ldr	r1, [r7, #0]
 800abf2:	6878      	ldr	r0, [r7, #4]
 800abf4:	f000 fd31 	bl	800b65a <USBD_CtlError>
          break;
 800abf8:	e004      	b.n	800ac04 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800abfa:	6839      	ldr	r1, [r7, #0]
 800abfc:	6878      	ldr	r0, [r7, #4]
 800abfe:	f000 fd2c 	bl	800b65a <USBD_CtlError>
          break;
 800ac02:	e000      	b.n	800ac06 <USBD_StdItfReq+0xc2>
          break;
 800ac04:	bf00      	nop
      }
      break;
 800ac06:	e004      	b.n	800ac12 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800ac08:	6839      	ldr	r1, [r7, #0]
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f000 fd25 	bl	800b65a <USBD_CtlError>
      break;
 800ac10:	bf00      	nop
  }

  return ret;
 800ac12:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac14:	4618      	mov	r0, r3
 800ac16:	3710      	adds	r7, #16
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	bd80      	pop	{r7, pc}

0800ac1c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b084      	sub	sp, #16
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
 800ac24:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800ac26:	2300      	movs	r3, #0
 800ac28:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	889b      	ldrh	r3, [r3, #4]
 800ac2e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	781b      	ldrb	r3, [r3, #0]
 800ac34:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ac38:	2b40      	cmp	r3, #64	@ 0x40
 800ac3a:	d007      	beq.n	800ac4c <USBD_StdEPReq+0x30>
 800ac3c:	2b40      	cmp	r3, #64	@ 0x40
 800ac3e:	f200 817f 	bhi.w	800af40 <USBD_StdEPReq+0x324>
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d02a      	beq.n	800ac9c <USBD_StdEPReq+0x80>
 800ac46:	2b20      	cmp	r3, #32
 800ac48:	f040 817a 	bne.w	800af40 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ac4c:	7bbb      	ldrb	r3, [r7, #14]
 800ac4e:	4619      	mov	r1, r3
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	f7ff fe36 	bl	800a8c2 <USBD_CoreFindEP>
 800ac56:	4603      	mov	r3, r0
 800ac58:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ac5a:	7b7b      	ldrb	r3, [r7, #13]
 800ac5c:	2bff      	cmp	r3, #255	@ 0xff
 800ac5e:	f000 8174 	beq.w	800af4a <USBD_StdEPReq+0x32e>
 800ac62:	7b7b      	ldrb	r3, [r7, #13]
 800ac64:	2b01      	cmp	r3, #1
 800ac66:	f200 8170 	bhi.w	800af4a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800ac6a:	7b7a      	ldrb	r2, [r7, #13]
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ac72:	7b7a      	ldrb	r2, [r7, #13]
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	32ae      	adds	r2, #174	@ 0xae
 800ac78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac7c:	689b      	ldr	r3, [r3, #8]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	f000 8163 	beq.w	800af4a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800ac84:	7b7a      	ldrb	r2, [r7, #13]
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	32ae      	adds	r2, #174	@ 0xae
 800ac8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac8e:	689b      	ldr	r3, [r3, #8]
 800ac90:	6839      	ldr	r1, [r7, #0]
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	4798      	blx	r3
 800ac96:	4603      	mov	r3, r0
 800ac98:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ac9a:	e156      	b.n	800af4a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	785b      	ldrb	r3, [r3, #1]
 800aca0:	2b03      	cmp	r3, #3
 800aca2:	d008      	beq.n	800acb6 <USBD_StdEPReq+0x9a>
 800aca4:	2b03      	cmp	r3, #3
 800aca6:	f300 8145 	bgt.w	800af34 <USBD_StdEPReq+0x318>
 800acaa:	2b00      	cmp	r3, #0
 800acac:	f000 809b 	beq.w	800ade6 <USBD_StdEPReq+0x1ca>
 800acb0:	2b01      	cmp	r3, #1
 800acb2:	d03c      	beq.n	800ad2e <USBD_StdEPReq+0x112>
 800acb4:	e13e      	b.n	800af34 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800acbc:	b2db      	uxtb	r3, r3
 800acbe:	2b02      	cmp	r3, #2
 800acc0:	d002      	beq.n	800acc8 <USBD_StdEPReq+0xac>
 800acc2:	2b03      	cmp	r3, #3
 800acc4:	d016      	beq.n	800acf4 <USBD_StdEPReq+0xd8>
 800acc6:	e02c      	b.n	800ad22 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800acc8:	7bbb      	ldrb	r3, [r7, #14]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d00d      	beq.n	800acea <USBD_StdEPReq+0xce>
 800acce:	7bbb      	ldrb	r3, [r7, #14]
 800acd0:	2b80      	cmp	r3, #128	@ 0x80
 800acd2:	d00a      	beq.n	800acea <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800acd4:	7bbb      	ldrb	r3, [r7, #14]
 800acd6:	4619      	mov	r1, r3
 800acd8:	6878      	ldr	r0, [r7, #4]
 800acda:	f7ff f8d3 	bl	8009e84 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800acde:	2180      	movs	r1, #128	@ 0x80
 800ace0:	6878      	ldr	r0, [r7, #4]
 800ace2:	f7ff f8cf 	bl	8009e84 <USBD_LL_StallEP>
 800ace6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ace8:	e020      	b.n	800ad2c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800acea:	6839      	ldr	r1, [r7, #0]
 800acec:	6878      	ldr	r0, [r7, #4]
 800acee:	f000 fcb4 	bl	800b65a <USBD_CtlError>
              break;
 800acf2:	e01b      	b.n	800ad2c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	885b      	ldrh	r3, [r3, #2]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d10e      	bne.n	800ad1a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800acfc:	7bbb      	ldrb	r3, [r7, #14]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d00b      	beq.n	800ad1a <USBD_StdEPReq+0xfe>
 800ad02:	7bbb      	ldrb	r3, [r7, #14]
 800ad04:	2b80      	cmp	r3, #128	@ 0x80
 800ad06:	d008      	beq.n	800ad1a <USBD_StdEPReq+0xfe>
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	88db      	ldrh	r3, [r3, #6]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d104      	bne.n	800ad1a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ad10:	7bbb      	ldrb	r3, [r7, #14]
 800ad12:	4619      	mov	r1, r3
 800ad14:	6878      	ldr	r0, [r7, #4]
 800ad16:	f7ff f8b5 	bl	8009e84 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ad1a:	6878      	ldr	r0, [r7, #4]
 800ad1c:	f000 fe75 	bl	800ba0a <USBD_CtlSendStatus>

              break;
 800ad20:	e004      	b.n	800ad2c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ad22:	6839      	ldr	r1, [r7, #0]
 800ad24:	6878      	ldr	r0, [r7, #4]
 800ad26:	f000 fc98 	bl	800b65a <USBD_CtlError>
              break;
 800ad2a:	bf00      	nop
          }
          break;
 800ad2c:	e107      	b.n	800af3e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad34:	b2db      	uxtb	r3, r3
 800ad36:	2b02      	cmp	r3, #2
 800ad38:	d002      	beq.n	800ad40 <USBD_StdEPReq+0x124>
 800ad3a:	2b03      	cmp	r3, #3
 800ad3c:	d016      	beq.n	800ad6c <USBD_StdEPReq+0x150>
 800ad3e:	e04b      	b.n	800add8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ad40:	7bbb      	ldrb	r3, [r7, #14]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d00d      	beq.n	800ad62 <USBD_StdEPReq+0x146>
 800ad46:	7bbb      	ldrb	r3, [r7, #14]
 800ad48:	2b80      	cmp	r3, #128	@ 0x80
 800ad4a:	d00a      	beq.n	800ad62 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ad4c:	7bbb      	ldrb	r3, [r7, #14]
 800ad4e:	4619      	mov	r1, r3
 800ad50:	6878      	ldr	r0, [r7, #4]
 800ad52:	f7ff f897 	bl	8009e84 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ad56:	2180      	movs	r1, #128	@ 0x80
 800ad58:	6878      	ldr	r0, [r7, #4]
 800ad5a:	f7ff f893 	bl	8009e84 <USBD_LL_StallEP>
 800ad5e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ad60:	e040      	b.n	800ade4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ad62:	6839      	ldr	r1, [r7, #0]
 800ad64:	6878      	ldr	r0, [r7, #4]
 800ad66:	f000 fc78 	bl	800b65a <USBD_CtlError>
              break;
 800ad6a:	e03b      	b.n	800ade4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ad6c:	683b      	ldr	r3, [r7, #0]
 800ad6e:	885b      	ldrh	r3, [r3, #2]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d136      	bne.n	800ade2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ad74:	7bbb      	ldrb	r3, [r7, #14]
 800ad76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d004      	beq.n	800ad88 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ad7e:	7bbb      	ldrb	r3, [r7, #14]
 800ad80:	4619      	mov	r1, r3
 800ad82:	6878      	ldr	r0, [r7, #4]
 800ad84:	f7ff f897 	bl	8009eb6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ad88:	6878      	ldr	r0, [r7, #4]
 800ad8a:	f000 fe3e 	bl	800ba0a <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800ad8e:	7bbb      	ldrb	r3, [r7, #14]
 800ad90:	4619      	mov	r1, r3
 800ad92:	6878      	ldr	r0, [r7, #4]
 800ad94:	f7ff fd95 	bl	800a8c2 <USBD_CoreFindEP>
 800ad98:	4603      	mov	r3, r0
 800ad9a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ad9c:	7b7b      	ldrb	r3, [r7, #13]
 800ad9e:	2bff      	cmp	r3, #255	@ 0xff
 800ada0:	d01f      	beq.n	800ade2 <USBD_StdEPReq+0x1c6>
 800ada2:	7b7b      	ldrb	r3, [r7, #13]
 800ada4:	2b01      	cmp	r3, #1
 800ada6:	d81c      	bhi.n	800ade2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800ada8:	7b7a      	ldrb	r2, [r7, #13]
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800adb0:	7b7a      	ldrb	r2, [r7, #13]
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	32ae      	adds	r2, #174	@ 0xae
 800adb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adba:	689b      	ldr	r3, [r3, #8]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d010      	beq.n	800ade2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800adc0:	7b7a      	ldrb	r2, [r7, #13]
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	32ae      	adds	r2, #174	@ 0xae
 800adc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adca:	689b      	ldr	r3, [r3, #8]
 800adcc:	6839      	ldr	r1, [r7, #0]
 800adce:	6878      	ldr	r0, [r7, #4]
 800add0:	4798      	blx	r3
 800add2:	4603      	mov	r3, r0
 800add4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800add6:	e004      	b.n	800ade2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800add8:	6839      	ldr	r1, [r7, #0]
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	f000 fc3d 	bl	800b65a <USBD_CtlError>
              break;
 800ade0:	e000      	b.n	800ade4 <USBD_StdEPReq+0x1c8>
              break;
 800ade2:	bf00      	nop
          }
          break;
 800ade4:	e0ab      	b.n	800af3e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800adec:	b2db      	uxtb	r3, r3
 800adee:	2b02      	cmp	r3, #2
 800adf0:	d002      	beq.n	800adf8 <USBD_StdEPReq+0x1dc>
 800adf2:	2b03      	cmp	r3, #3
 800adf4:	d032      	beq.n	800ae5c <USBD_StdEPReq+0x240>
 800adf6:	e097      	b.n	800af28 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800adf8:	7bbb      	ldrb	r3, [r7, #14]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d007      	beq.n	800ae0e <USBD_StdEPReq+0x1f2>
 800adfe:	7bbb      	ldrb	r3, [r7, #14]
 800ae00:	2b80      	cmp	r3, #128	@ 0x80
 800ae02:	d004      	beq.n	800ae0e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ae04:	6839      	ldr	r1, [r7, #0]
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	f000 fc27 	bl	800b65a <USBD_CtlError>
                break;
 800ae0c:	e091      	b.n	800af32 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ae0e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	da0b      	bge.n	800ae2e <USBD_StdEPReq+0x212>
 800ae16:	7bbb      	ldrb	r3, [r7, #14]
 800ae18:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ae1c:	4613      	mov	r3, r2
 800ae1e:	009b      	lsls	r3, r3, #2
 800ae20:	4413      	add	r3, r2
 800ae22:	009b      	lsls	r3, r3, #2
 800ae24:	3310      	adds	r3, #16
 800ae26:	687a      	ldr	r2, [r7, #4]
 800ae28:	4413      	add	r3, r2
 800ae2a:	3304      	adds	r3, #4
 800ae2c:	e00b      	b.n	800ae46 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ae2e:	7bbb      	ldrb	r3, [r7, #14]
 800ae30:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ae34:	4613      	mov	r3, r2
 800ae36:	009b      	lsls	r3, r3, #2
 800ae38:	4413      	add	r3, r2
 800ae3a:	009b      	lsls	r3, r3, #2
 800ae3c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ae40:	687a      	ldr	r2, [r7, #4]
 800ae42:	4413      	add	r3, r2
 800ae44:	3304      	adds	r3, #4
 800ae46:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ae4e:	68bb      	ldr	r3, [r7, #8]
 800ae50:	2202      	movs	r2, #2
 800ae52:	4619      	mov	r1, r3
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	f000 fd7e 	bl	800b956 <USBD_CtlSendData>
              break;
 800ae5a:	e06a      	b.n	800af32 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ae5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	da11      	bge.n	800ae88 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ae64:	7bbb      	ldrb	r3, [r7, #14]
 800ae66:	f003 020f 	and.w	r2, r3, #15
 800ae6a:	6879      	ldr	r1, [r7, #4]
 800ae6c:	4613      	mov	r3, r2
 800ae6e:	009b      	lsls	r3, r3, #2
 800ae70:	4413      	add	r3, r2
 800ae72:	009b      	lsls	r3, r3, #2
 800ae74:	440b      	add	r3, r1
 800ae76:	3324      	adds	r3, #36	@ 0x24
 800ae78:	881b      	ldrh	r3, [r3, #0]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d117      	bne.n	800aeae <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ae7e:	6839      	ldr	r1, [r7, #0]
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	f000 fbea 	bl	800b65a <USBD_CtlError>
                  break;
 800ae86:	e054      	b.n	800af32 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ae88:	7bbb      	ldrb	r3, [r7, #14]
 800ae8a:	f003 020f 	and.w	r2, r3, #15
 800ae8e:	6879      	ldr	r1, [r7, #4]
 800ae90:	4613      	mov	r3, r2
 800ae92:	009b      	lsls	r3, r3, #2
 800ae94:	4413      	add	r3, r2
 800ae96:	009b      	lsls	r3, r3, #2
 800ae98:	440b      	add	r3, r1
 800ae9a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ae9e:	881b      	ldrh	r3, [r3, #0]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d104      	bne.n	800aeae <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800aea4:	6839      	ldr	r1, [r7, #0]
 800aea6:	6878      	ldr	r0, [r7, #4]
 800aea8:	f000 fbd7 	bl	800b65a <USBD_CtlError>
                  break;
 800aeac:	e041      	b.n	800af32 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aeae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	da0b      	bge.n	800aece <USBD_StdEPReq+0x2b2>
 800aeb6:	7bbb      	ldrb	r3, [r7, #14]
 800aeb8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800aebc:	4613      	mov	r3, r2
 800aebe:	009b      	lsls	r3, r3, #2
 800aec0:	4413      	add	r3, r2
 800aec2:	009b      	lsls	r3, r3, #2
 800aec4:	3310      	adds	r3, #16
 800aec6:	687a      	ldr	r2, [r7, #4]
 800aec8:	4413      	add	r3, r2
 800aeca:	3304      	adds	r3, #4
 800aecc:	e00b      	b.n	800aee6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aece:	7bbb      	ldrb	r3, [r7, #14]
 800aed0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aed4:	4613      	mov	r3, r2
 800aed6:	009b      	lsls	r3, r3, #2
 800aed8:	4413      	add	r3, r2
 800aeda:	009b      	lsls	r3, r3, #2
 800aedc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800aee0:	687a      	ldr	r2, [r7, #4]
 800aee2:	4413      	add	r3, r2
 800aee4:	3304      	adds	r3, #4
 800aee6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800aee8:	7bbb      	ldrb	r3, [r7, #14]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d002      	beq.n	800aef4 <USBD_StdEPReq+0x2d8>
 800aeee:	7bbb      	ldrb	r3, [r7, #14]
 800aef0:	2b80      	cmp	r3, #128	@ 0x80
 800aef2:	d103      	bne.n	800aefc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800aef4:	68bb      	ldr	r3, [r7, #8]
 800aef6:	2200      	movs	r2, #0
 800aef8:	601a      	str	r2, [r3, #0]
 800aefa:	e00e      	b.n	800af1a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800aefc:	7bbb      	ldrb	r3, [r7, #14]
 800aefe:	4619      	mov	r1, r3
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f7fe fff1 	bl	8009ee8 <USBD_LL_IsStallEP>
 800af06:	4603      	mov	r3, r0
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d003      	beq.n	800af14 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800af0c:	68bb      	ldr	r3, [r7, #8]
 800af0e:	2201      	movs	r2, #1
 800af10:	601a      	str	r2, [r3, #0]
 800af12:	e002      	b.n	800af1a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	2200      	movs	r2, #0
 800af18:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800af1a:	68bb      	ldr	r3, [r7, #8]
 800af1c:	2202      	movs	r2, #2
 800af1e:	4619      	mov	r1, r3
 800af20:	6878      	ldr	r0, [r7, #4]
 800af22:	f000 fd18 	bl	800b956 <USBD_CtlSendData>
              break;
 800af26:	e004      	b.n	800af32 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800af28:	6839      	ldr	r1, [r7, #0]
 800af2a:	6878      	ldr	r0, [r7, #4]
 800af2c:	f000 fb95 	bl	800b65a <USBD_CtlError>
              break;
 800af30:	bf00      	nop
          }
          break;
 800af32:	e004      	b.n	800af3e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800af34:	6839      	ldr	r1, [r7, #0]
 800af36:	6878      	ldr	r0, [r7, #4]
 800af38:	f000 fb8f 	bl	800b65a <USBD_CtlError>
          break;
 800af3c:	bf00      	nop
      }
      break;
 800af3e:	e005      	b.n	800af4c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800af40:	6839      	ldr	r1, [r7, #0]
 800af42:	6878      	ldr	r0, [r7, #4]
 800af44:	f000 fb89 	bl	800b65a <USBD_CtlError>
      break;
 800af48:	e000      	b.n	800af4c <USBD_StdEPReq+0x330>
      break;
 800af4a:	bf00      	nop
  }

  return ret;
 800af4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800af4e:	4618      	mov	r0, r3
 800af50:	3710      	adds	r7, #16
 800af52:	46bd      	mov	sp, r7
 800af54:	bd80      	pop	{r7, pc}
	...

0800af58 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b084      	sub	sp, #16
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
 800af60:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800af62:	2300      	movs	r3, #0
 800af64:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800af66:	2300      	movs	r3, #0
 800af68:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800af6a:	2300      	movs	r3, #0
 800af6c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	885b      	ldrh	r3, [r3, #2]
 800af72:	0a1b      	lsrs	r3, r3, #8
 800af74:	b29b      	uxth	r3, r3
 800af76:	3b01      	subs	r3, #1
 800af78:	2b06      	cmp	r3, #6
 800af7a:	f200 8163 	bhi.w	800b244 <USBD_GetDescriptor+0x2ec>
 800af7e:	a201      	add	r2, pc, #4	@ (adr r2, 800af84 <USBD_GetDescriptor+0x2c>)
 800af80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af84:	0800afa1 	.word	0x0800afa1
 800af88:	0800afb9 	.word	0x0800afb9
 800af8c:	0800b031 	.word	0x0800b031
 800af90:	0800b245 	.word	0x0800b245
 800af94:	0800b245 	.word	0x0800b245
 800af98:	0800b1a7 	.word	0x0800b1a7
 800af9c:	0800b1ef 	.word	0x0800b1ef
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	687a      	ldr	r2, [r7, #4]
 800afaa:	7c12      	ldrb	r2, [r2, #16]
 800afac:	f107 0108 	add.w	r1, r7, #8
 800afb0:	4610      	mov	r0, r2
 800afb2:	4798      	blx	r3
 800afb4:	60f8      	str	r0, [r7, #12]
      break;
 800afb6:	e14d      	b.n	800b254 <USBD_GetDescriptor+0x2fc>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	7c1b      	ldrb	r3, [r3, #16]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d11b      	bne.n	800aff8 <USBD_GetDescriptor+0xa0>
      {
#ifdef USE_USBD_COMPOSITE
        if ((uint8_t)(pdev->NumClasses) > 0U)
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	f8d3 32e4 	ldr.w	r3, [r3, #740]	@ 0x2e4
 800afc6:	b2db      	uxtb	r3, r3
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d007      	beq.n	800afdc <USBD_GetDescriptor+0x84>
        {
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
 800afcc:	4b9c      	ldr	r3, [pc, #624]	@ (800b240 <USBD_GetDescriptor+0x2e8>)
 800afce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afd0:	f107 0208 	add.w	r2, r7, #8
 800afd4:	4610      	mov	r0, r2
 800afd6:	4798      	blx	r3
 800afd8:	60f8      	str	r0, [r7, #12]
 800afda:	e008      	b.n	800afee <USBD_GetDescriptor+0x96>
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800afe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afe4:	f107 0208 	add.w	r2, r7, #8
 800afe8:	4610      	mov	r0, r2
 800afea:	4798      	blx	r3
 800afec:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	3301      	adds	r3, #1
 800aff2:	2202      	movs	r2, #2
 800aff4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800aff6:	e12d      	b.n	800b254 <USBD_GetDescriptor+0x2fc>
        if ((uint8_t)(pdev->NumClasses) > 0U)
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	f8d3 32e4 	ldr.w	r3, [r3, #740]	@ 0x2e4
 800affe:	b2db      	uxtb	r3, r3
 800b000:	2b00      	cmp	r3, #0
 800b002:	d007      	beq.n	800b014 <USBD_GetDescriptor+0xbc>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetFSConfigDescriptor(&len);
 800b004:	4b8e      	ldr	r3, [pc, #568]	@ (800b240 <USBD_GetDescriptor+0x2e8>)
 800b006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b008:	f107 0208 	add.w	r2, r7, #8
 800b00c:	4610      	mov	r0, r2
 800b00e:	4798      	blx	r3
 800b010:	60f8      	str	r0, [r7, #12]
 800b012:	e008      	b.n	800b026 <USBD_GetDescriptor+0xce>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b01a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b01c:	f107 0208 	add.w	r2, r7, #8
 800b020:	4610      	mov	r0, r2
 800b022:	4798      	blx	r3
 800b024:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	3301      	adds	r3, #1
 800b02a:	2202      	movs	r2, #2
 800b02c:	701a      	strb	r2, [r3, #0]
      break;
 800b02e:	e111      	b.n	800b254 <USBD_GetDescriptor+0x2fc>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	885b      	ldrh	r3, [r3, #2]
 800b034:	b2db      	uxtb	r3, r3
 800b036:	2b05      	cmp	r3, #5
 800b038:	f200 80ac 	bhi.w	800b194 <USBD_GetDescriptor+0x23c>
 800b03c:	a201      	add	r2, pc, #4	@ (adr r2, 800b044 <USBD_GetDescriptor+0xec>)
 800b03e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b042:	bf00      	nop
 800b044:	0800b05d 	.word	0x0800b05d
 800b048:	0800b091 	.word	0x0800b091
 800b04c:	0800b0c5 	.word	0x0800b0c5
 800b050:	0800b0f9 	.word	0x0800b0f9
 800b054:	0800b12d 	.word	0x0800b12d
 800b058:	0800b161 	.word	0x0800b161
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b062:	685b      	ldr	r3, [r3, #4]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d00b      	beq.n	800b080 <USBD_GetDescriptor+0x128>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b06e:	685b      	ldr	r3, [r3, #4]
 800b070:	687a      	ldr	r2, [r7, #4]
 800b072:	7c12      	ldrb	r2, [r2, #16]
 800b074:	f107 0108 	add.w	r1, r7, #8
 800b078:	4610      	mov	r0, r2
 800b07a:	4798      	blx	r3
 800b07c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b07e:	e091      	b.n	800b1a4 <USBD_GetDescriptor+0x24c>
            USBD_CtlError(pdev, req);
 800b080:	6839      	ldr	r1, [r7, #0]
 800b082:	6878      	ldr	r0, [r7, #4]
 800b084:	f000 fae9 	bl	800b65a <USBD_CtlError>
            err++;
 800b088:	7afb      	ldrb	r3, [r7, #11]
 800b08a:	3301      	adds	r3, #1
 800b08c:	72fb      	strb	r3, [r7, #11]
          break;
 800b08e:	e089      	b.n	800b1a4 <USBD_GetDescriptor+0x24c>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b096:	689b      	ldr	r3, [r3, #8]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d00b      	beq.n	800b0b4 <USBD_GetDescriptor+0x15c>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b0a2:	689b      	ldr	r3, [r3, #8]
 800b0a4:	687a      	ldr	r2, [r7, #4]
 800b0a6:	7c12      	ldrb	r2, [r2, #16]
 800b0a8:	f107 0108 	add.w	r1, r7, #8
 800b0ac:	4610      	mov	r0, r2
 800b0ae:	4798      	blx	r3
 800b0b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b0b2:	e077      	b.n	800b1a4 <USBD_GetDescriptor+0x24c>
            USBD_CtlError(pdev, req);
 800b0b4:	6839      	ldr	r1, [r7, #0]
 800b0b6:	6878      	ldr	r0, [r7, #4]
 800b0b8:	f000 facf 	bl	800b65a <USBD_CtlError>
            err++;
 800b0bc:	7afb      	ldrb	r3, [r7, #11]
 800b0be:	3301      	adds	r3, #1
 800b0c0:	72fb      	strb	r3, [r7, #11]
          break;
 800b0c2:	e06f      	b.n	800b1a4 <USBD_GetDescriptor+0x24c>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b0ca:	68db      	ldr	r3, [r3, #12]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d00b      	beq.n	800b0e8 <USBD_GetDescriptor+0x190>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b0d6:	68db      	ldr	r3, [r3, #12]
 800b0d8:	687a      	ldr	r2, [r7, #4]
 800b0da:	7c12      	ldrb	r2, [r2, #16]
 800b0dc:	f107 0108 	add.w	r1, r7, #8
 800b0e0:	4610      	mov	r0, r2
 800b0e2:	4798      	blx	r3
 800b0e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b0e6:	e05d      	b.n	800b1a4 <USBD_GetDescriptor+0x24c>
            USBD_CtlError(pdev, req);
 800b0e8:	6839      	ldr	r1, [r7, #0]
 800b0ea:	6878      	ldr	r0, [r7, #4]
 800b0ec:	f000 fab5 	bl	800b65a <USBD_CtlError>
            err++;
 800b0f0:	7afb      	ldrb	r3, [r7, #11]
 800b0f2:	3301      	adds	r3, #1
 800b0f4:	72fb      	strb	r3, [r7, #11]
          break;
 800b0f6:	e055      	b.n	800b1a4 <USBD_GetDescriptor+0x24c>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b0fe:	691b      	ldr	r3, [r3, #16]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d00b      	beq.n	800b11c <USBD_GetDescriptor+0x1c4>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b10a:	691b      	ldr	r3, [r3, #16]
 800b10c:	687a      	ldr	r2, [r7, #4]
 800b10e:	7c12      	ldrb	r2, [r2, #16]
 800b110:	f107 0108 	add.w	r1, r7, #8
 800b114:	4610      	mov	r0, r2
 800b116:	4798      	blx	r3
 800b118:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b11a:	e043      	b.n	800b1a4 <USBD_GetDescriptor+0x24c>
            USBD_CtlError(pdev, req);
 800b11c:	6839      	ldr	r1, [r7, #0]
 800b11e:	6878      	ldr	r0, [r7, #4]
 800b120:	f000 fa9b 	bl	800b65a <USBD_CtlError>
            err++;
 800b124:	7afb      	ldrb	r3, [r7, #11]
 800b126:	3301      	adds	r3, #1
 800b128:	72fb      	strb	r3, [r7, #11]
          break;
 800b12a:	e03b      	b.n	800b1a4 <USBD_GetDescriptor+0x24c>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b132:	695b      	ldr	r3, [r3, #20]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d00b      	beq.n	800b150 <USBD_GetDescriptor+0x1f8>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b13e:	695b      	ldr	r3, [r3, #20]
 800b140:	687a      	ldr	r2, [r7, #4]
 800b142:	7c12      	ldrb	r2, [r2, #16]
 800b144:	f107 0108 	add.w	r1, r7, #8
 800b148:	4610      	mov	r0, r2
 800b14a:	4798      	blx	r3
 800b14c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b14e:	e029      	b.n	800b1a4 <USBD_GetDescriptor+0x24c>
            USBD_CtlError(pdev, req);
 800b150:	6839      	ldr	r1, [r7, #0]
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	f000 fa81 	bl	800b65a <USBD_CtlError>
            err++;
 800b158:	7afb      	ldrb	r3, [r7, #11]
 800b15a:	3301      	adds	r3, #1
 800b15c:	72fb      	strb	r3, [r7, #11]
          break;
 800b15e:	e021      	b.n	800b1a4 <USBD_GetDescriptor+0x24c>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b166:	699b      	ldr	r3, [r3, #24]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d00b      	beq.n	800b184 <USBD_GetDescriptor+0x22c>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b172:	699b      	ldr	r3, [r3, #24]
 800b174:	687a      	ldr	r2, [r7, #4]
 800b176:	7c12      	ldrb	r2, [r2, #16]
 800b178:	f107 0108 	add.w	r1, r7, #8
 800b17c:	4610      	mov	r0, r2
 800b17e:	4798      	blx	r3
 800b180:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b182:	e00f      	b.n	800b1a4 <USBD_GetDescriptor+0x24c>
            USBD_CtlError(pdev, req);
 800b184:	6839      	ldr	r1, [r7, #0]
 800b186:	6878      	ldr	r0, [r7, #4]
 800b188:	f000 fa67 	bl	800b65a <USBD_CtlError>
            err++;
 800b18c:	7afb      	ldrb	r3, [r7, #11]
 800b18e:	3301      	adds	r3, #1
 800b190:	72fb      	strb	r3, [r7, #11]
          break;
 800b192:	e007      	b.n	800b1a4 <USBD_GetDescriptor+0x24c>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b194:	6839      	ldr	r1, [r7, #0]
 800b196:	6878      	ldr	r0, [r7, #4]
 800b198:	f000 fa5f 	bl	800b65a <USBD_CtlError>
          err++;
 800b19c:	7afb      	ldrb	r3, [r7, #11]
 800b19e:	3301      	adds	r3, #1
 800b1a0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b1a2:	bf00      	nop
      }
      break;
 800b1a4:	e056      	b.n	800b254 <USBD_GetDescriptor+0x2fc>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	7c1b      	ldrb	r3, [r3, #16]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d117      	bne.n	800b1de <USBD_GetDescriptor+0x286>
      {
#ifdef USE_USBD_COMPOSITE
        if ((uint8_t)(pdev->NumClasses) > 0U)
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	f8d3 32e4 	ldr.w	r3, [r3, #740]	@ 0x2e4
 800b1b4:	b2db      	uxtb	r3, r3
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d007      	beq.n	800b1ca <USBD_GetDescriptor+0x272>
        {
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
 800b1ba:	4b21      	ldr	r3, [pc, #132]	@ (800b240 <USBD_GetDescriptor+0x2e8>)
 800b1bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b1be:	f107 0208 	add.w	r2, r7, #8
 800b1c2:	4610      	mov	r0, r2
 800b1c4:	4798      	blx	r3
 800b1c6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b1c8:	e044      	b.n	800b254 <USBD_GetDescriptor+0x2fc>
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b1d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b1d2:	f107 0208 	add.w	r2, r7, #8
 800b1d6:	4610      	mov	r0, r2
 800b1d8:	4798      	blx	r3
 800b1da:	60f8      	str	r0, [r7, #12]
      break;
 800b1dc:	e03a      	b.n	800b254 <USBD_GetDescriptor+0x2fc>
        USBD_CtlError(pdev, req);
 800b1de:	6839      	ldr	r1, [r7, #0]
 800b1e0:	6878      	ldr	r0, [r7, #4]
 800b1e2:	f000 fa3a 	bl	800b65a <USBD_CtlError>
        err++;
 800b1e6:	7afb      	ldrb	r3, [r7, #11]
 800b1e8:	3301      	adds	r3, #1
 800b1ea:	72fb      	strb	r3, [r7, #11]
      break;
 800b1ec:	e032      	b.n	800b254 <USBD_GetDescriptor+0x2fc>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	7c1b      	ldrb	r3, [r3, #16]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d11b      	bne.n	800b22e <USBD_GetDescriptor+0x2d6>
      {
#ifdef USE_USBD_COMPOSITE
        if ((uint8_t)(pdev->NumClasses) > 0U)
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	f8d3 32e4 	ldr.w	r3, [r3, #740]	@ 0x2e4
 800b1fc:	b2db      	uxtb	r3, r3
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d007      	beq.n	800b212 <USBD_GetDescriptor+0x2ba>
        {
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
 800b202:	4b0f      	ldr	r3, [pc, #60]	@ (800b240 <USBD_GetDescriptor+0x2e8>)
 800b204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b206:	f107 0208 	add.w	r2, r7, #8
 800b20a:	4610      	mov	r0, r2
 800b20c:	4798      	blx	r3
 800b20e:	60f8      	str	r0, [r7, #12]
 800b210:	e008      	b.n	800b224 <USBD_GetDescriptor+0x2cc>
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b21a:	f107 0208 	add.w	r2, r7, #8
 800b21e:	4610      	mov	r0, r2
 800b220:	4798      	blx	r3
 800b222:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	3301      	adds	r3, #1
 800b228:	2207      	movs	r2, #7
 800b22a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b22c:	e012      	b.n	800b254 <USBD_GetDescriptor+0x2fc>
        USBD_CtlError(pdev, req);
 800b22e:	6839      	ldr	r1, [r7, #0]
 800b230:	6878      	ldr	r0, [r7, #4]
 800b232:	f000 fa12 	bl	800b65a <USBD_CtlError>
        err++;
 800b236:	7afb      	ldrb	r3, [r7, #11]
 800b238:	3301      	adds	r3, #1
 800b23a:	72fb      	strb	r3, [r7, #11]
      break;
 800b23c:	e00a      	b.n	800b254 <USBD_GetDescriptor+0x2fc>
 800b23e:	bf00      	nop
 800b240:	2000006c 	.word	0x2000006c

    default:
      USBD_CtlError(pdev, req);
 800b244:	6839      	ldr	r1, [r7, #0]
 800b246:	6878      	ldr	r0, [r7, #4]
 800b248:	f000 fa07 	bl	800b65a <USBD_CtlError>
      err++;
 800b24c:	7afb      	ldrb	r3, [r7, #11]
 800b24e:	3301      	adds	r3, #1
 800b250:	72fb      	strb	r3, [r7, #11]
      break;
 800b252:	bf00      	nop
  }

  if (err != 0U)
 800b254:	7afb      	ldrb	r3, [r7, #11]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d11e      	bne.n	800b298 <USBD_GetDescriptor+0x340>
  {
    return;
  }

  if (req->wLength != 0U)
 800b25a:	683b      	ldr	r3, [r7, #0]
 800b25c:	88db      	ldrh	r3, [r3, #6]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d016      	beq.n	800b290 <USBD_GetDescriptor+0x338>
  {
    if (len != 0U)
 800b262:	893b      	ldrh	r3, [r7, #8]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d00e      	beq.n	800b286 <USBD_GetDescriptor+0x32e>
    {
      len = MIN(len, req->wLength);
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	88da      	ldrh	r2, [r3, #6]
 800b26c:	893b      	ldrh	r3, [r7, #8]
 800b26e:	4293      	cmp	r3, r2
 800b270:	bf28      	it	cs
 800b272:	4613      	movcs	r3, r2
 800b274:	b29b      	uxth	r3, r3
 800b276:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b278:	893b      	ldrh	r3, [r7, #8]
 800b27a:	461a      	mov	r2, r3
 800b27c:	68f9      	ldr	r1, [r7, #12]
 800b27e:	6878      	ldr	r0, [r7, #4]
 800b280:	f000 fb69 	bl	800b956 <USBD_CtlSendData>
 800b284:	e009      	b.n	800b29a <USBD_GetDescriptor+0x342>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b286:	6839      	ldr	r1, [r7, #0]
 800b288:	6878      	ldr	r0, [r7, #4]
 800b28a:	f000 f9e6 	bl	800b65a <USBD_CtlError>
 800b28e:	e004      	b.n	800b29a <USBD_GetDescriptor+0x342>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b290:	6878      	ldr	r0, [r7, #4]
 800b292:	f000 fbba 	bl	800ba0a <USBD_CtlSendStatus>
 800b296:	e000      	b.n	800b29a <USBD_GetDescriptor+0x342>
    return;
 800b298:	bf00      	nop
  }
}
 800b29a:	3710      	adds	r7, #16
 800b29c:	46bd      	mov	sp, r7
 800b29e:	bd80      	pop	{r7, pc}

0800b2a0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b084      	sub	sp, #16
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
 800b2a8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b2aa:	683b      	ldr	r3, [r7, #0]
 800b2ac:	889b      	ldrh	r3, [r3, #4]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d131      	bne.n	800b316 <USBD_SetAddress+0x76>
 800b2b2:	683b      	ldr	r3, [r7, #0]
 800b2b4:	88db      	ldrh	r3, [r3, #6]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d12d      	bne.n	800b316 <USBD_SetAddress+0x76>
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	885b      	ldrh	r3, [r3, #2]
 800b2be:	2b7f      	cmp	r3, #127	@ 0x7f
 800b2c0:	d829      	bhi.n	800b316 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b2c2:	683b      	ldr	r3, [r7, #0]
 800b2c4:	885b      	ldrh	r3, [r3, #2]
 800b2c6:	b2db      	uxtb	r3, r3
 800b2c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b2cc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b2d4:	b2db      	uxtb	r3, r3
 800b2d6:	2b03      	cmp	r3, #3
 800b2d8:	d104      	bne.n	800b2e4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b2da:	6839      	ldr	r1, [r7, #0]
 800b2dc:	6878      	ldr	r0, [r7, #4]
 800b2de:	f000 f9bc 	bl	800b65a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2e2:	e01d      	b.n	800b320 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	7bfa      	ldrb	r2, [r7, #15]
 800b2e8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b2ec:	7bfb      	ldrb	r3, [r7, #15]
 800b2ee:	4619      	mov	r1, r3
 800b2f0:	6878      	ldr	r0, [r7, #4]
 800b2f2:	f7fe fe25 	bl	8009f40 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b2f6:	6878      	ldr	r0, [r7, #4]
 800b2f8:	f000 fb87 	bl	800ba0a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b2fc:	7bfb      	ldrb	r3, [r7, #15]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d004      	beq.n	800b30c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2202      	movs	r2, #2
 800b306:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b30a:	e009      	b.n	800b320 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2201      	movs	r2, #1
 800b310:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b314:	e004      	b.n	800b320 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b316:	6839      	ldr	r1, [r7, #0]
 800b318:	6878      	ldr	r0, [r7, #4]
 800b31a:	f000 f99e 	bl	800b65a <USBD_CtlError>
  }
}
 800b31e:	bf00      	nop
 800b320:	bf00      	nop
 800b322:	3710      	adds	r7, #16
 800b324:	46bd      	mov	sp, r7
 800b326:	bd80      	pop	{r7, pc}

0800b328 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b084      	sub	sp, #16
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
 800b330:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b332:	2300      	movs	r3, #0
 800b334:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	885b      	ldrh	r3, [r3, #2]
 800b33a:	b2da      	uxtb	r2, r3
 800b33c:	4b4e      	ldr	r3, [pc, #312]	@ (800b478 <USBD_SetConfig+0x150>)
 800b33e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b340:	4b4d      	ldr	r3, [pc, #308]	@ (800b478 <USBD_SetConfig+0x150>)
 800b342:	781b      	ldrb	r3, [r3, #0]
 800b344:	2b01      	cmp	r3, #1
 800b346:	d905      	bls.n	800b354 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b348:	6839      	ldr	r1, [r7, #0]
 800b34a:	6878      	ldr	r0, [r7, #4]
 800b34c:	f000 f985 	bl	800b65a <USBD_CtlError>
    return USBD_FAIL;
 800b350:	2303      	movs	r3, #3
 800b352:	e08c      	b.n	800b46e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b35a:	b2db      	uxtb	r3, r3
 800b35c:	2b02      	cmp	r3, #2
 800b35e:	d002      	beq.n	800b366 <USBD_SetConfig+0x3e>
 800b360:	2b03      	cmp	r3, #3
 800b362:	d029      	beq.n	800b3b8 <USBD_SetConfig+0x90>
 800b364:	e075      	b.n	800b452 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b366:	4b44      	ldr	r3, [pc, #272]	@ (800b478 <USBD_SetConfig+0x150>)
 800b368:	781b      	ldrb	r3, [r3, #0]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d020      	beq.n	800b3b0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b36e:	4b42      	ldr	r3, [pc, #264]	@ (800b478 <USBD_SetConfig+0x150>)
 800b370:	781b      	ldrb	r3, [r3, #0]
 800b372:	461a      	mov	r2, r3
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b378:	4b3f      	ldr	r3, [pc, #252]	@ (800b478 <USBD_SetConfig+0x150>)
 800b37a:	781b      	ldrb	r3, [r3, #0]
 800b37c:	4619      	mov	r1, r3
 800b37e:	6878      	ldr	r0, [r7, #4]
 800b380:	f7fe ff65 	bl	800a24e <USBD_SetClassConfig>
 800b384:	4603      	mov	r3, r0
 800b386:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b388:	7bfb      	ldrb	r3, [r7, #15]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d008      	beq.n	800b3a0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b38e:	6839      	ldr	r1, [r7, #0]
 800b390:	6878      	ldr	r0, [r7, #4]
 800b392:	f000 f962 	bl	800b65a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	2202      	movs	r2, #2
 800b39a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b39e:	e065      	b.n	800b46c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b3a0:	6878      	ldr	r0, [r7, #4]
 800b3a2:	f000 fb32 	bl	800ba0a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	2203      	movs	r2, #3
 800b3aa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b3ae:	e05d      	b.n	800b46c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b3b0:	6878      	ldr	r0, [r7, #4]
 800b3b2:	f000 fb2a 	bl	800ba0a <USBD_CtlSendStatus>
      break;
 800b3b6:	e059      	b.n	800b46c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b3b8:	4b2f      	ldr	r3, [pc, #188]	@ (800b478 <USBD_SetConfig+0x150>)
 800b3ba:	781b      	ldrb	r3, [r3, #0]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d112      	bne.n	800b3e6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2202      	movs	r2, #2
 800b3c4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800b3c8:	4b2b      	ldr	r3, [pc, #172]	@ (800b478 <USBD_SetConfig+0x150>)
 800b3ca:	781b      	ldrb	r3, [r3, #0]
 800b3cc:	461a      	mov	r2, r3
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b3d2:	4b29      	ldr	r3, [pc, #164]	@ (800b478 <USBD_SetConfig+0x150>)
 800b3d4:	781b      	ldrb	r3, [r3, #0]
 800b3d6:	4619      	mov	r1, r3
 800b3d8:	6878      	ldr	r0, [r7, #4]
 800b3da:	f7fe ff73 	bl	800a2c4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b3de:	6878      	ldr	r0, [r7, #4]
 800b3e0:	f000 fb13 	bl	800ba0a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b3e4:	e042      	b.n	800b46c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b3e6:	4b24      	ldr	r3, [pc, #144]	@ (800b478 <USBD_SetConfig+0x150>)
 800b3e8:	781b      	ldrb	r3, [r3, #0]
 800b3ea:	461a      	mov	r2, r3
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	685b      	ldr	r3, [r3, #4]
 800b3f0:	429a      	cmp	r2, r3
 800b3f2:	d02a      	beq.n	800b44a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	685b      	ldr	r3, [r3, #4]
 800b3f8:	b2db      	uxtb	r3, r3
 800b3fa:	4619      	mov	r1, r3
 800b3fc:	6878      	ldr	r0, [r7, #4]
 800b3fe:	f7fe ff61 	bl	800a2c4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b402:	4b1d      	ldr	r3, [pc, #116]	@ (800b478 <USBD_SetConfig+0x150>)
 800b404:	781b      	ldrb	r3, [r3, #0]
 800b406:	461a      	mov	r2, r3
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b40c:	4b1a      	ldr	r3, [pc, #104]	@ (800b478 <USBD_SetConfig+0x150>)
 800b40e:	781b      	ldrb	r3, [r3, #0]
 800b410:	4619      	mov	r1, r3
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	f7fe ff1b 	bl	800a24e <USBD_SetClassConfig>
 800b418:	4603      	mov	r3, r0
 800b41a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b41c:	7bfb      	ldrb	r3, [r7, #15]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d00f      	beq.n	800b442 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b422:	6839      	ldr	r1, [r7, #0]
 800b424:	6878      	ldr	r0, [r7, #4]
 800b426:	f000 f918 	bl	800b65a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	685b      	ldr	r3, [r3, #4]
 800b42e:	b2db      	uxtb	r3, r3
 800b430:	4619      	mov	r1, r3
 800b432:	6878      	ldr	r0, [r7, #4]
 800b434:	f7fe ff46 	bl	800a2c4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	2202      	movs	r2, #2
 800b43c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b440:	e014      	b.n	800b46c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b442:	6878      	ldr	r0, [r7, #4]
 800b444:	f000 fae1 	bl	800ba0a <USBD_CtlSendStatus>
      break;
 800b448:	e010      	b.n	800b46c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f000 fadd 	bl	800ba0a <USBD_CtlSendStatus>
      break;
 800b450:	e00c      	b.n	800b46c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b452:	6839      	ldr	r1, [r7, #0]
 800b454:	6878      	ldr	r0, [r7, #4]
 800b456:	f000 f900 	bl	800b65a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b45a:	4b07      	ldr	r3, [pc, #28]	@ (800b478 <USBD_SetConfig+0x150>)
 800b45c:	781b      	ldrb	r3, [r3, #0]
 800b45e:	4619      	mov	r1, r3
 800b460:	6878      	ldr	r0, [r7, #4]
 800b462:	f7fe ff2f 	bl	800a2c4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b466:	2303      	movs	r3, #3
 800b468:	73fb      	strb	r3, [r7, #15]
      break;
 800b46a:	bf00      	nop
  }

  return ret;
 800b46c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b46e:	4618      	mov	r0, r3
 800b470:	3710      	adds	r7, #16
 800b472:	46bd      	mov	sp, r7
 800b474:	bd80      	pop	{r7, pc}
 800b476:	bf00      	nop
 800b478:	20000bcc 	.word	0x20000bcc

0800b47c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b082      	sub	sp, #8
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
 800b484:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	88db      	ldrh	r3, [r3, #6]
 800b48a:	2b01      	cmp	r3, #1
 800b48c:	d004      	beq.n	800b498 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b48e:	6839      	ldr	r1, [r7, #0]
 800b490:	6878      	ldr	r0, [r7, #4]
 800b492:	f000 f8e2 	bl	800b65a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b496:	e023      	b.n	800b4e0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b49e:	b2db      	uxtb	r3, r3
 800b4a0:	2b02      	cmp	r3, #2
 800b4a2:	dc02      	bgt.n	800b4aa <USBD_GetConfig+0x2e>
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	dc03      	bgt.n	800b4b0 <USBD_GetConfig+0x34>
 800b4a8:	e015      	b.n	800b4d6 <USBD_GetConfig+0x5a>
 800b4aa:	2b03      	cmp	r3, #3
 800b4ac:	d00b      	beq.n	800b4c6 <USBD_GetConfig+0x4a>
 800b4ae:	e012      	b.n	800b4d6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	3308      	adds	r3, #8
 800b4ba:	2201      	movs	r2, #1
 800b4bc:	4619      	mov	r1, r3
 800b4be:	6878      	ldr	r0, [r7, #4]
 800b4c0:	f000 fa49 	bl	800b956 <USBD_CtlSendData>
        break;
 800b4c4:	e00c      	b.n	800b4e0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	3304      	adds	r3, #4
 800b4ca:	2201      	movs	r2, #1
 800b4cc:	4619      	mov	r1, r3
 800b4ce:	6878      	ldr	r0, [r7, #4]
 800b4d0:	f000 fa41 	bl	800b956 <USBD_CtlSendData>
        break;
 800b4d4:	e004      	b.n	800b4e0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b4d6:	6839      	ldr	r1, [r7, #0]
 800b4d8:	6878      	ldr	r0, [r7, #4]
 800b4da:	f000 f8be 	bl	800b65a <USBD_CtlError>
        break;
 800b4de:	bf00      	nop
}
 800b4e0:	bf00      	nop
 800b4e2:	3708      	adds	r7, #8
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	bd80      	pop	{r7, pc}

0800b4e8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b082      	sub	sp, #8
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
 800b4f0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b4f8:	b2db      	uxtb	r3, r3
 800b4fa:	3b01      	subs	r3, #1
 800b4fc:	2b02      	cmp	r3, #2
 800b4fe:	d81e      	bhi.n	800b53e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b500:	683b      	ldr	r3, [r7, #0]
 800b502:	88db      	ldrh	r3, [r3, #6]
 800b504:	2b02      	cmp	r3, #2
 800b506:	d004      	beq.n	800b512 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b508:	6839      	ldr	r1, [r7, #0]
 800b50a:	6878      	ldr	r0, [r7, #4]
 800b50c:	f000 f8a5 	bl	800b65a <USBD_CtlError>
        break;
 800b510:	e01a      	b.n	800b548 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	2201      	movs	r2, #1
 800b516:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d005      	beq.n	800b52e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	68db      	ldr	r3, [r3, #12]
 800b526:	f043 0202 	orr.w	r2, r3, #2
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	330c      	adds	r3, #12
 800b532:	2202      	movs	r2, #2
 800b534:	4619      	mov	r1, r3
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	f000 fa0d 	bl	800b956 <USBD_CtlSendData>
      break;
 800b53c:	e004      	b.n	800b548 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b53e:	6839      	ldr	r1, [r7, #0]
 800b540:	6878      	ldr	r0, [r7, #4]
 800b542:	f000 f88a 	bl	800b65a <USBD_CtlError>
      break;
 800b546:	bf00      	nop
  }
}
 800b548:	bf00      	nop
 800b54a:	3708      	adds	r7, #8
 800b54c:	46bd      	mov	sp, r7
 800b54e:	bd80      	pop	{r7, pc}

0800b550 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b082      	sub	sp, #8
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
 800b558:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b55a:	683b      	ldr	r3, [r7, #0]
 800b55c:	885b      	ldrh	r3, [r3, #2]
 800b55e:	2b01      	cmp	r3, #1
 800b560:	d107      	bne.n	800b572 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	2201      	movs	r2, #1
 800b566:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	f000 fa4d 	bl	800ba0a <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b570:	e013      	b.n	800b59a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	885b      	ldrh	r3, [r3, #2]
 800b576:	2b02      	cmp	r3, #2
 800b578:	d10b      	bne.n	800b592 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	889b      	ldrh	r3, [r3, #4]
 800b57e:	0a1b      	lsrs	r3, r3, #8
 800b580:	b29b      	uxth	r3, r3
 800b582:	b2da      	uxtb	r2, r3
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	f000 fa3d 	bl	800ba0a <USBD_CtlSendStatus>
}
 800b590:	e003      	b.n	800b59a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b592:	6839      	ldr	r1, [r7, #0]
 800b594:	6878      	ldr	r0, [r7, #4]
 800b596:	f000 f860 	bl	800b65a <USBD_CtlError>
}
 800b59a:	bf00      	nop
 800b59c:	3708      	adds	r7, #8
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd80      	pop	{r7, pc}

0800b5a2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5a2:	b580      	push	{r7, lr}
 800b5a4:	b082      	sub	sp, #8
 800b5a6:	af00      	add	r7, sp, #0
 800b5a8:	6078      	str	r0, [r7, #4]
 800b5aa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b5b2:	b2db      	uxtb	r3, r3
 800b5b4:	3b01      	subs	r3, #1
 800b5b6:	2b02      	cmp	r3, #2
 800b5b8:	d80b      	bhi.n	800b5d2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	885b      	ldrh	r3, [r3, #2]
 800b5be:	2b01      	cmp	r3, #1
 800b5c0:	d10c      	bne.n	800b5dc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b5ca:	6878      	ldr	r0, [r7, #4]
 800b5cc:	f000 fa1d 	bl	800ba0a <USBD_CtlSendStatus>
      }
      break;
 800b5d0:	e004      	b.n	800b5dc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b5d2:	6839      	ldr	r1, [r7, #0]
 800b5d4:	6878      	ldr	r0, [r7, #4]
 800b5d6:	f000 f840 	bl	800b65a <USBD_CtlError>
      break;
 800b5da:	e000      	b.n	800b5de <USBD_ClrFeature+0x3c>
      break;
 800b5dc:	bf00      	nop
  }
}
 800b5de:	bf00      	nop
 800b5e0:	3708      	adds	r7, #8
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	bd80      	pop	{r7, pc}

0800b5e6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b5e6:	b580      	push	{r7, lr}
 800b5e8:	b084      	sub	sp, #16
 800b5ea:	af00      	add	r7, sp, #0
 800b5ec:	6078      	str	r0, [r7, #4]
 800b5ee:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b5f0:	683b      	ldr	r3, [r7, #0]
 800b5f2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	781a      	ldrb	r2, [r3, #0]
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	3301      	adds	r3, #1
 800b600:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	781a      	ldrb	r2, [r3, #0]
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	3301      	adds	r3, #1
 800b60e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b610:	68f8      	ldr	r0, [r7, #12]
 800b612:	f7ff fa06 	bl	800aa22 <SWAPBYTE>
 800b616:	4603      	mov	r3, r0
 800b618:	461a      	mov	r2, r3
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	3301      	adds	r3, #1
 800b622:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	3301      	adds	r3, #1
 800b628:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b62a:	68f8      	ldr	r0, [r7, #12]
 800b62c:	f7ff f9f9 	bl	800aa22 <SWAPBYTE>
 800b630:	4603      	mov	r3, r0
 800b632:	461a      	mov	r2, r3
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	3301      	adds	r3, #1
 800b63c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	3301      	adds	r3, #1
 800b642:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b644:	68f8      	ldr	r0, [r7, #12]
 800b646:	f7ff f9ec 	bl	800aa22 <SWAPBYTE>
 800b64a:	4603      	mov	r3, r0
 800b64c:	461a      	mov	r2, r3
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	80da      	strh	r2, [r3, #6]
}
 800b652:	bf00      	nop
 800b654:	3710      	adds	r7, #16
 800b656:	46bd      	mov	sp, r7
 800b658:	bd80      	pop	{r7, pc}

0800b65a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b65a:	b580      	push	{r7, lr}
 800b65c:	b082      	sub	sp, #8
 800b65e:	af00      	add	r7, sp, #0
 800b660:	6078      	str	r0, [r7, #4]
 800b662:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b664:	2180      	movs	r1, #128	@ 0x80
 800b666:	6878      	ldr	r0, [r7, #4]
 800b668:	f7fe fc0c 	bl	8009e84 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b66c:	2100      	movs	r1, #0
 800b66e:	6878      	ldr	r0, [r7, #4]
 800b670:	f7fe fc08 	bl	8009e84 <USBD_LL_StallEP>
}
 800b674:	bf00      	nop
 800b676:	3708      	adds	r7, #8
 800b678:	46bd      	mov	sp, r7
 800b67a:	bd80      	pop	{r7, pc}

0800b67c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b086      	sub	sp, #24
 800b680:	af00      	add	r7, sp, #0
 800b682:	60f8      	str	r0, [r7, #12]
 800b684:	60b9      	str	r1, [r7, #8]
 800b686:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b688:	2300      	movs	r3, #0
 800b68a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d036      	beq.n	800b700 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b696:	6938      	ldr	r0, [r7, #16]
 800b698:	f000 f836 	bl	800b708 <USBD_GetLen>
 800b69c:	4603      	mov	r3, r0
 800b69e:	3301      	adds	r3, #1
 800b6a0:	b29b      	uxth	r3, r3
 800b6a2:	005b      	lsls	r3, r3, #1
 800b6a4:	b29a      	uxth	r2, r3
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b6aa:	7dfb      	ldrb	r3, [r7, #23]
 800b6ac:	68ba      	ldr	r2, [r7, #8]
 800b6ae:	4413      	add	r3, r2
 800b6b0:	687a      	ldr	r2, [r7, #4]
 800b6b2:	7812      	ldrb	r2, [r2, #0]
 800b6b4:	701a      	strb	r2, [r3, #0]
  idx++;
 800b6b6:	7dfb      	ldrb	r3, [r7, #23]
 800b6b8:	3301      	adds	r3, #1
 800b6ba:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b6bc:	7dfb      	ldrb	r3, [r7, #23]
 800b6be:	68ba      	ldr	r2, [r7, #8]
 800b6c0:	4413      	add	r3, r2
 800b6c2:	2203      	movs	r2, #3
 800b6c4:	701a      	strb	r2, [r3, #0]
  idx++;
 800b6c6:	7dfb      	ldrb	r3, [r7, #23]
 800b6c8:	3301      	adds	r3, #1
 800b6ca:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b6cc:	e013      	b.n	800b6f6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b6ce:	7dfb      	ldrb	r3, [r7, #23]
 800b6d0:	68ba      	ldr	r2, [r7, #8]
 800b6d2:	4413      	add	r3, r2
 800b6d4:	693a      	ldr	r2, [r7, #16]
 800b6d6:	7812      	ldrb	r2, [r2, #0]
 800b6d8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b6da:	693b      	ldr	r3, [r7, #16]
 800b6dc:	3301      	adds	r3, #1
 800b6de:	613b      	str	r3, [r7, #16]
    idx++;
 800b6e0:	7dfb      	ldrb	r3, [r7, #23]
 800b6e2:	3301      	adds	r3, #1
 800b6e4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b6e6:	7dfb      	ldrb	r3, [r7, #23]
 800b6e8:	68ba      	ldr	r2, [r7, #8]
 800b6ea:	4413      	add	r3, r2
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	701a      	strb	r2, [r3, #0]
    idx++;
 800b6f0:	7dfb      	ldrb	r3, [r7, #23]
 800b6f2:	3301      	adds	r3, #1
 800b6f4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b6f6:	693b      	ldr	r3, [r7, #16]
 800b6f8:	781b      	ldrb	r3, [r3, #0]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d1e7      	bne.n	800b6ce <USBD_GetString+0x52>
 800b6fe:	e000      	b.n	800b702 <USBD_GetString+0x86>
    return;
 800b700:	bf00      	nop
  }
}
 800b702:	3718      	adds	r7, #24
 800b704:	46bd      	mov	sp, r7
 800b706:	bd80      	pop	{r7, pc}

0800b708 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b708:	b480      	push	{r7}
 800b70a:	b085      	sub	sp, #20
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b710:	2300      	movs	r3, #0
 800b712:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b718:	e005      	b.n	800b726 <USBD_GetLen+0x1e>
  {
    len++;
 800b71a:	7bfb      	ldrb	r3, [r7, #15]
 800b71c:	3301      	adds	r3, #1
 800b71e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b720:	68bb      	ldr	r3, [r7, #8]
 800b722:	3301      	adds	r3, #1
 800b724:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b726:	68bb      	ldr	r3, [r7, #8]
 800b728:	781b      	ldrb	r3, [r3, #0]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d1f5      	bne.n	800b71a <USBD_GetLen+0x12>
  }

  return len;
 800b72e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b730:	4618      	mov	r0, r3
 800b732:	3714      	adds	r7, #20
 800b734:	46bd      	mov	sp, r7
 800b736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73a:	4770      	bx	lr

0800b73c <USBD_Class_DeviceDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b73c:	b480      	push	{r7}
 800b73e:	b083      	sub	sp, #12
 800b740:	af00      	add	r7, sp, #0
 800b742:	4603      	mov	r3, r0
 800b744:	6039      	str	r1, [r7, #0]
 800b746:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = sizeof(USBD_DeviceDesc);
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	2212      	movs	r2, #18
 800b74c:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)USBD_DeviceDesc;
 800b74e:	4b03      	ldr	r3, [pc, #12]	@ (800b75c <USBD_Class_DeviceDescriptor+0x20>)
}
 800b750:	4618      	mov	r0, r3
 800b752:	370c      	adds	r7, #12
 800b754:	46bd      	mov	sp, r7
 800b756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75a:	4770      	bx	lr
 800b75c:	20000144 	.word	0x20000144

0800b760 <USBD_Class_LangIDStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b760:	b480      	push	{r7}
 800b762:	b083      	sub	sp, #12
 800b764:	af00      	add	r7, sp, #0
 800b766:	4603      	mov	r3, r0
 800b768:	6039      	str	r1, [r7, #0]
 800b76a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = sizeof(USBD_LangIDDesc);
 800b76c:	683b      	ldr	r3, [r7, #0]
 800b76e:	2204      	movs	r2, #4
 800b770:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)USBD_LangIDDesc;
 800b772:	4b03      	ldr	r3, [pc, #12]	@ (800b780 <USBD_Class_LangIDStrDescriptor+0x20>)
}
 800b774:	4618      	mov	r0, r3
 800b776:	370c      	adds	r7, #12
 800b778:	46bd      	mov	sp, r7
 800b77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77e:	4770      	bx	lr
 800b780:	20000158 	.word	0x20000158

0800b784 <USBD_Class_ProductStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b784:	b580      	push	{r7, lr}
 800b786:	b082      	sub	sp, #8
 800b788:	af00      	add	r7, sp, #0
 800b78a:	4603      	mov	r3, r0
 800b78c:	6039      	str	r1, [r7, #0]
 800b78e:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 800b790:	79fb      	ldrb	r3, [r7, #7]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d105      	bne.n	800b7a2 <USBD_Class_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_HS_STRING, USBD_StrDesc, length);
 800b796:	683a      	ldr	r2, [r7, #0]
 800b798:	4907      	ldr	r1, [pc, #28]	@ (800b7b8 <USBD_Class_ProductStrDescriptor+0x34>)
 800b79a:	4808      	ldr	r0, [pc, #32]	@ (800b7bc <USBD_Class_ProductStrDescriptor+0x38>)
 800b79c:	f7ff ff6e 	bl	800b67c <USBD_GetString>
 800b7a0:	e004      	b.n	800b7ac <USBD_Class_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);
 800b7a2:	683a      	ldr	r2, [r7, #0]
 800b7a4:	4904      	ldr	r1, [pc, #16]	@ (800b7b8 <USBD_Class_ProductStrDescriptor+0x34>)
 800b7a6:	4805      	ldr	r0, [pc, #20]	@ (800b7bc <USBD_Class_ProductStrDescriptor+0x38>)
 800b7a8:	f7ff ff68 	bl	800b67c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b7ac:	4b02      	ldr	r3, [pc, #8]	@ (800b7b8 <USBD_Class_ProductStrDescriptor+0x34>)
}
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	3708      	adds	r7, #8
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	bd80      	pop	{r7, pc}
 800b7b6:	bf00      	nop
 800b7b8:	20000bd0 	.word	0x20000bd0
 800b7bc:	0800cd9c 	.word	0x0800cd9c

0800b7c0 <USBD_Class_ManufacturerStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b082      	sub	sp, #8
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	6039      	str	r1, [r7, #0]
 800b7ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b7cc:	683a      	ldr	r2, [r7, #0]
 800b7ce:	4904      	ldr	r1, [pc, #16]	@ (800b7e0 <USBD_Class_ManufacturerStrDescriptor+0x20>)
 800b7d0:	4804      	ldr	r0, [pc, #16]	@ (800b7e4 <USBD_Class_ManufacturerStrDescriptor+0x24>)
 800b7d2:	f7ff ff53 	bl	800b67c <USBD_GetString>
  return USBD_StrDesc;
 800b7d6:	4b02      	ldr	r3, [pc, #8]	@ (800b7e0 <USBD_Class_ManufacturerStrDescriptor+0x20>)
}
 800b7d8:	4618      	mov	r0, r3
 800b7da:	3708      	adds	r7, #8
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	bd80      	pop	{r7, pc}
 800b7e0:	20000bd0 	.word	0x20000bd0
 800b7e4:	0800cdac 	.word	0x0800cdac

0800b7e8 <USBD_Class_SerialStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b082      	sub	sp, #8
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	6039      	str	r1, [r7, #0]
 800b7f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = USB_SIZ_STRING_SERIAL;
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	221a      	movs	r2, #26
 800b7f8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique ID*/
  Get_SerialNum();
 800b7fa:	f000 f843 	bl	800b884 <Get_SerialNum>

  return (uint8_t *)USBD_StringSerial;
 800b7fe:	4b02      	ldr	r3, [pc, #8]	@ (800b808 <USBD_Class_SerialStrDescriptor+0x20>)
}
 800b800:	4618      	mov	r0, r3
 800b802:	3708      	adds	r7, #8
 800b804:	46bd      	mov	sp, r7
 800b806:	bd80      	pop	{r7, pc}
 800b808:	2000015c 	.word	0x2000015c

0800b80c <USBD_Class_ConfigStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b082      	sub	sp, #8
 800b810:	af00      	add	r7, sp, #0
 800b812:	4603      	mov	r3, r0
 800b814:	6039      	str	r1, [r7, #0]
 800b816:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 800b818:	79fb      	ldrb	r3, [r7, #7]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d105      	bne.n	800b82a <USBD_Class_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_HS_STRING, USBD_StrDesc, length);
 800b81e:	683a      	ldr	r2, [r7, #0]
 800b820:	4907      	ldr	r1, [pc, #28]	@ (800b840 <USBD_Class_ConfigStrDescriptor+0x34>)
 800b822:	4808      	ldr	r0, [pc, #32]	@ (800b844 <USBD_Class_ConfigStrDescriptor+0x38>)
 800b824:	f7ff ff2a 	bl	800b67c <USBD_GetString>
 800b828:	e004      	b.n	800b834 <USBD_Class_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length);
 800b82a:	683a      	ldr	r2, [r7, #0]
 800b82c:	4904      	ldr	r1, [pc, #16]	@ (800b840 <USBD_Class_ConfigStrDescriptor+0x34>)
 800b82e:	4805      	ldr	r0, [pc, #20]	@ (800b844 <USBD_Class_ConfigStrDescriptor+0x38>)
 800b830:	f7ff ff24 	bl	800b67c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b834:	4b02      	ldr	r3, [pc, #8]	@ (800b840 <USBD_Class_ConfigStrDescriptor+0x34>)
}
 800b836:	4618      	mov	r0, r3
 800b838:	3708      	adds	r7, #8
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bd80      	pop	{r7, pc}
 800b83e:	bf00      	nop
 800b840:	20000bd0 	.word	0x20000bd0
 800b844:	0800cdc0 	.word	0x0800cdc0

0800b848 <USBD_Class_InterfaceStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b082      	sub	sp, #8
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	4603      	mov	r3, r0
 800b850:	6039      	str	r1, [r7, #0]
 800b852:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 800b854:	79fb      	ldrb	r3, [r7, #7]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d105      	bne.n	800b866 <USBD_Class_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_HS_STRING, USBD_StrDesc, length);
 800b85a:	683a      	ldr	r2, [r7, #0]
 800b85c:	4907      	ldr	r1, [pc, #28]	@ (800b87c <USBD_Class_InterfaceStrDescriptor+0x34>)
 800b85e:	4808      	ldr	r0, [pc, #32]	@ (800b880 <USBD_Class_InterfaceStrDescriptor+0x38>)
 800b860:	f7ff ff0c 	bl	800b67c <USBD_GetString>
 800b864:	e004      	b.n	800b870 <USBD_Class_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 800b866:	683a      	ldr	r2, [r7, #0]
 800b868:	4904      	ldr	r1, [pc, #16]	@ (800b87c <USBD_Class_InterfaceStrDescriptor+0x34>)
 800b86a:	4805      	ldr	r0, [pc, #20]	@ (800b880 <USBD_Class_InterfaceStrDescriptor+0x38>)
 800b86c:	f7ff ff06 	bl	800b67c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b870:	4b02      	ldr	r3, [pc, #8]	@ (800b87c <USBD_Class_InterfaceStrDescriptor+0x34>)
}
 800b872:	4618      	mov	r0, r3
 800b874:	3708      	adds	r7, #8
 800b876:	46bd      	mov	sp, r7
 800b878:	bd80      	pop	{r7, pc}
 800b87a:	bf00      	nop
 800b87c:	20000bd0 	.word	0x20000bd0
 800b880:	0800cdcc 	.word	0x0800cdcc

0800b884 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b084      	sub	sp, #16
 800b888:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *)DEVICE_ID1;
 800b88a:	4b0f      	ldr	r3, [pc, #60]	@ (800b8c8 <Get_SerialNum+0x44>)
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *)DEVICE_ID2;
 800b890:	4b0e      	ldr	r3, [pc, #56]	@ (800b8cc <Get_SerialNum+0x48>)
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *)DEVICE_ID3;
 800b896:	4b0e      	ldr	r3, [pc, #56]	@ (800b8d0 <Get_SerialNum+0x4c>)
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b89c:	68fa      	ldr	r2, [r7, #12]
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	4413      	add	r3, r2
 800b8a2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0U)
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d009      	beq.n	800b8be <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8U);
 800b8aa:	2208      	movs	r2, #8
 800b8ac:	4909      	ldr	r1, [pc, #36]	@ (800b8d4 <Get_SerialNum+0x50>)
 800b8ae:	68f8      	ldr	r0, [r7, #12]
 800b8b0:	f000 f814 	bl	800b8dc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4U);
 800b8b4:	2204      	movs	r2, #4
 800b8b6:	4908      	ldr	r1, [pc, #32]	@ (800b8d8 <Get_SerialNum+0x54>)
 800b8b8:	68b8      	ldr	r0, [r7, #8]
 800b8ba:	f000 f80f 	bl	800b8dc <IntToUnicode>
  }
}
 800b8be:	bf00      	nop
 800b8c0:	3710      	adds	r7, #16
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	bd80      	pop	{r7, pc}
 800b8c6:	bf00      	nop
 800b8c8:	08fff800 	.word	0x08fff800
 800b8cc:	08fff804 	.word	0x08fff804
 800b8d0:	08fff808 	.word	0x08fff808
 800b8d4:	2000015e 	.word	0x2000015e
 800b8d8:	2000016e 	.word	0x2000016e

0800b8dc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t *pbuf, uint8_t len)
{
 800b8dc:	b480      	push	{r7}
 800b8de:	b087      	sub	sp, #28
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	60f8      	str	r0, [r7, #12]
 800b8e4:	60b9      	str	r1, [r7, #8]
 800b8e6:	4613      	mov	r3, r2
 800b8e8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0U;
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	75fb      	strb	r3, [r7, #23]

  for (idx = 0U ; idx < len ; idx ++)
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	75fb      	strb	r3, [r7, #23]
 800b8f2:	e025      	b.n	800b940 <IntToUnicode+0x64>
  {
    if (((value >> 28)) < 0xAU)
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	0f1b      	lsrs	r3, r3, #28
 800b8f8:	2b09      	cmp	r3, #9
 800b8fa:	d80a      	bhi.n	800b912 <IntToUnicode+0x36>
    {
      pbuf[ 2U * idx] = (value >> 28) + '0';
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	0f1b      	lsrs	r3, r3, #28
 800b900:	b2da      	uxtb	r2, r3
 800b902:	7dfb      	ldrb	r3, [r7, #23]
 800b904:	005b      	lsls	r3, r3, #1
 800b906:	68b9      	ldr	r1, [r7, #8]
 800b908:	440b      	add	r3, r1
 800b90a:	3230      	adds	r2, #48	@ 0x30
 800b90c:	b2d2      	uxtb	r2, r2
 800b90e:	701a      	strb	r2, [r3, #0]
 800b910:	e009      	b.n	800b926 <IntToUnicode+0x4a>
    }
    else
    {
      pbuf[2U * idx] = (value >> 28) + 'A' - 10U;
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	0f1b      	lsrs	r3, r3, #28
 800b916:	b2da      	uxtb	r2, r3
 800b918:	7dfb      	ldrb	r3, [r7, #23]
 800b91a:	005b      	lsls	r3, r3, #1
 800b91c:	68b9      	ldr	r1, [r7, #8]
 800b91e:	440b      	add	r3, r1
 800b920:	3237      	adds	r2, #55	@ 0x37
 800b922:	b2d2      	uxtb	r2, r2
 800b924:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	011b      	lsls	r3, r3, #4
 800b92a:	60fb      	str	r3, [r7, #12]

    pbuf[2U * idx + 1] = 0U;
 800b92c:	7dfb      	ldrb	r3, [r7, #23]
 800b92e:	005b      	lsls	r3, r3, #1
 800b930:	3301      	adds	r3, #1
 800b932:	68ba      	ldr	r2, [r7, #8]
 800b934:	4413      	add	r3, r2
 800b936:	2200      	movs	r2, #0
 800b938:	701a      	strb	r2, [r3, #0]
  for (idx = 0U ; idx < len ; idx ++)
 800b93a:	7dfb      	ldrb	r3, [r7, #23]
 800b93c:	3301      	adds	r3, #1
 800b93e:	75fb      	strb	r3, [r7, #23]
 800b940:	7dfa      	ldrb	r2, [r7, #23]
 800b942:	79fb      	ldrb	r3, [r7, #7]
 800b944:	429a      	cmp	r2, r3
 800b946:	d3d5      	bcc.n	800b8f4 <IntToUnicode+0x18>
  }
}
 800b948:	bf00      	nop
 800b94a:	bf00      	nop
 800b94c:	371c      	adds	r7, #28
 800b94e:	46bd      	mov	sp, r7
 800b950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b954:	4770      	bx	lr

0800b956 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b956:	b580      	push	{r7, lr}
 800b958:	b084      	sub	sp, #16
 800b95a:	af00      	add	r7, sp, #0
 800b95c:	60f8      	str	r0, [r7, #12]
 800b95e:	60b9      	str	r1, [r7, #8]
 800b960:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	2202      	movs	r2, #2
 800b966:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	687a      	ldr	r2, [r7, #4]
 800b96e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	687a      	ldr	r2, [r7, #4]
 800b974:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	68ba      	ldr	r2, [r7, #8]
 800b97a:	2100      	movs	r1, #0
 800b97c:	68f8      	ldr	r0, [r7, #12]
 800b97e:	f7fe faf8 	bl	8009f72 <USBD_LL_Transmit>

  return USBD_OK;
 800b982:	2300      	movs	r3, #0
}
 800b984:	4618      	mov	r0, r3
 800b986:	3710      	adds	r7, #16
 800b988:	46bd      	mov	sp, r7
 800b98a:	bd80      	pop	{r7, pc}

0800b98c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b084      	sub	sp, #16
 800b990:	af00      	add	r7, sp, #0
 800b992:	60f8      	str	r0, [r7, #12]
 800b994:	60b9      	str	r1, [r7, #8]
 800b996:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	68ba      	ldr	r2, [r7, #8]
 800b99c:	2100      	movs	r1, #0
 800b99e:	68f8      	ldr	r0, [r7, #12]
 800b9a0:	f7fe fae7 	bl	8009f72 <USBD_LL_Transmit>

  return USBD_OK;
 800b9a4:	2300      	movs	r3, #0
}
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	3710      	adds	r7, #16
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	bd80      	pop	{r7, pc}

0800b9ae <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b9ae:	b580      	push	{r7, lr}
 800b9b0:	b084      	sub	sp, #16
 800b9b2:	af00      	add	r7, sp, #0
 800b9b4:	60f8      	str	r0, [r7, #12]
 800b9b6:	60b9      	str	r1, [r7, #8]
 800b9b8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	2203      	movs	r2, #3
 800b9be:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	687a      	ldr	r2, [r7, #4]
 800b9c6:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	687a      	ldr	r2, [r7, #4]
 800b9ce:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	68ba      	ldr	r2, [r7, #8]
 800b9d6:	2100      	movs	r1, #0
 800b9d8:	68f8      	ldr	r0, [r7, #12]
 800b9da:	f7fe fae5 	bl	8009fa8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b9de:	2300      	movs	r3, #0
}
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	3710      	adds	r7, #16
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	bd80      	pop	{r7, pc}

0800b9e8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b084      	sub	sp, #16
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	60f8      	str	r0, [r7, #12]
 800b9f0:	60b9      	str	r1, [r7, #8]
 800b9f2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	68ba      	ldr	r2, [r7, #8]
 800b9f8:	2100      	movs	r1, #0
 800b9fa:	68f8      	ldr	r0, [r7, #12]
 800b9fc:	f7fe fad4 	bl	8009fa8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ba00:	2300      	movs	r3, #0
}
 800ba02:	4618      	mov	r0, r3
 800ba04:	3710      	adds	r7, #16
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bd80      	pop	{r7, pc}

0800ba0a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ba0a:	b580      	push	{r7, lr}
 800ba0c:	b082      	sub	sp, #8
 800ba0e:	af00      	add	r7, sp, #0
 800ba10:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	2204      	movs	r2, #4
 800ba16:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	2100      	movs	r1, #0
 800ba20:	6878      	ldr	r0, [r7, #4]
 800ba22:	f7fe faa6 	bl	8009f72 <USBD_LL_Transmit>

  return USBD_OK;
 800ba26:	2300      	movs	r3, #0
}
 800ba28:	4618      	mov	r0, r3
 800ba2a:	3708      	adds	r7, #8
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	bd80      	pop	{r7, pc}

0800ba30 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b082      	sub	sp, #8
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	2205      	movs	r2, #5
 800ba3c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ba40:	2300      	movs	r3, #0
 800ba42:	2200      	movs	r2, #0
 800ba44:	2100      	movs	r1, #0
 800ba46:	6878      	ldr	r0, [r7, #4]
 800ba48:	f7fe faae 	bl	8009fa8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ba4c:	2300      	movs	r3, #0
}
 800ba4e:	4618      	mov	r0, r3
 800ba50:	3708      	adds	r7, #8
 800ba52:	46bd      	mov	sp, r7
 800ba54:	bd80      	pop	{r7, pc}
	...

0800ba58 <std>:
 800ba58:	2300      	movs	r3, #0
 800ba5a:	b510      	push	{r4, lr}
 800ba5c:	4604      	mov	r4, r0
 800ba5e:	6083      	str	r3, [r0, #8]
 800ba60:	8181      	strh	r1, [r0, #12]
 800ba62:	4619      	mov	r1, r3
 800ba64:	6643      	str	r3, [r0, #100]	@ 0x64
 800ba66:	81c2      	strh	r2, [r0, #14]
 800ba68:	2208      	movs	r2, #8
 800ba6a:	6183      	str	r3, [r0, #24]
 800ba6c:	e9c0 3300 	strd	r3, r3, [r0]
 800ba70:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ba74:	305c      	adds	r0, #92	@ 0x5c
 800ba76:	f000 f92e 	bl	800bcd6 <memset>
 800ba7a:	4b0d      	ldr	r3, [pc, #52]	@ (800bab0 <std+0x58>)
 800ba7c:	6224      	str	r4, [r4, #32]
 800ba7e:	6263      	str	r3, [r4, #36]	@ 0x24
 800ba80:	4b0c      	ldr	r3, [pc, #48]	@ (800bab4 <std+0x5c>)
 800ba82:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ba84:	4b0c      	ldr	r3, [pc, #48]	@ (800bab8 <std+0x60>)
 800ba86:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ba88:	4b0c      	ldr	r3, [pc, #48]	@ (800babc <std+0x64>)
 800ba8a:	6323      	str	r3, [r4, #48]	@ 0x30
 800ba8c:	4b0c      	ldr	r3, [pc, #48]	@ (800bac0 <std+0x68>)
 800ba8e:	429c      	cmp	r4, r3
 800ba90:	d006      	beq.n	800baa0 <std+0x48>
 800ba92:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ba96:	4294      	cmp	r4, r2
 800ba98:	d002      	beq.n	800baa0 <std+0x48>
 800ba9a:	33d0      	adds	r3, #208	@ 0xd0
 800ba9c:	429c      	cmp	r4, r3
 800ba9e:	d105      	bne.n	800baac <std+0x54>
 800baa0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800baa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800baa8:	f000 b98e 	b.w	800bdc8 <__retarget_lock_init_recursive>
 800baac:	bd10      	pop	{r4, pc}
 800baae:	bf00      	nop
 800bab0:	0800bc51 	.word	0x0800bc51
 800bab4:	0800bc73 	.word	0x0800bc73
 800bab8:	0800bcab 	.word	0x0800bcab
 800babc:	0800bccf 	.word	0x0800bccf
 800bac0:	20000cd0 	.word	0x20000cd0

0800bac4 <stdio_exit_handler>:
 800bac4:	4a02      	ldr	r2, [pc, #8]	@ (800bad0 <stdio_exit_handler+0xc>)
 800bac6:	4903      	ldr	r1, [pc, #12]	@ (800bad4 <stdio_exit_handler+0x10>)
 800bac8:	4803      	ldr	r0, [pc, #12]	@ (800bad8 <stdio_exit_handler+0x14>)
 800baca:	f000 b869 	b.w	800bba0 <_fwalk_sglue>
 800bace:	bf00      	nop
 800bad0:	20000178 	.word	0x20000178
 800bad4:	0800c921 	.word	0x0800c921
 800bad8:	20000188 	.word	0x20000188

0800badc <cleanup_stdio>:
 800badc:	6841      	ldr	r1, [r0, #4]
 800bade:	4b0c      	ldr	r3, [pc, #48]	@ (800bb10 <cleanup_stdio+0x34>)
 800bae0:	4299      	cmp	r1, r3
 800bae2:	b510      	push	{r4, lr}
 800bae4:	4604      	mov	r4, r0
 800bae6:	d001      	beq.n	800baec <cleanup_stdio+0x10>
 800bae8:	f000 ff1a 	bl	800c920 <_fflush_r>
 800baec:	68a1      	ldr	r1, [r4, #8]
 800baee:	4b09      	ldr	r3, [pc, #36]	@ (800bb14 <cleanup_stdio+0x38>)
 800baf0:	4299      	cmp	r1, r3
 800baf2:	d002      	beq.n	800bafa <cleanup_stdio+0x1e>
 800baf4:	4620      	mov	r0, r4
 800baf6:	f000 ff13 	bl	800c920 <_fflush_r>
 800bafa:	68e1      	ldr	r1, [r4, #12]
 800bafc:	4b06      	ldr	r3, [pc, #24]	@ (800bb18 <cleanup_stdio+0x3c>)
 800bafe:	4299      	cmp	r1, r3
 800bb00:	d004      	beq.n	800bb0c <cleanup_stdio+0x30>
 800bb02:	4620      	mov	r0, r4
 800bb04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb08:	f000 bf0a 	b.w	800c920 <_fflush_r>
 800bb0c:	bd10      	pop	{r4, pc}
 800bb0e:	bf00      	nop
 800bb10:	20000cd0 	.word	0x20000cd0
 800bb14:	20000d38 	.word	0x20000d38
 800bb18:	20000da0 	.word	0x20000da0

0800bb1c <global_stdio_init.part.0>:
 800bb1c:	b510      	push	{r4, lr}
 800bb1e:	4b0b      	ldr	r3, [pc, #44]	@ (800bb4c <global_stdio_init.part.0+0x30>)
 800bb20:	2104      	movs	r1, #4
 800bb22:	4c0b      	ldr	r4, [pc, #44]	@ (800bb50 <global_stdio_init.part.0+0x34>)
 800bb24:	4a0b      	ldr	r2, [pc, #44]	@ (800bb54 <global_stdio_init.part.0+0x38>)
 800bb26:	4620      	mov	r0, r4
 800bb28:	601a      	str	r2, [r3, #0]
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	f7ff ff94 	bl	800ba58 <std>
 800bb30:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bb34:	2201      	movs	r2, #1
 800bb36:	2109      	movs	r1, #9
 800bb38:	f7ff ff8e 	bl	800ba58 <std>
 800bb3c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bb40:	2202      	movs	r2, #2
 800bb42:	2112      	movs	r1, #18
 800bb44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb48:	f7ff bf86 	b.w	800ba58 <std>
 800bb4c:	20000e08 	.word	0x20000e08
 800bb50:	20000cd0 	.word	0x20000cd0
 800bb54:	0800bac5 	.word	0x0800bac5

0800bb58 <__sfp_lock_acquire>:
 800bb58:	4801      	ldr	r0, [pc, #4]	@ (800bb60 <__sfp_lock_acquire+0x8>)
 800bb5a:	f000 b936 	b.w	800bdca <__retarget_lock_acquire_recursive>
 800bb5e:	bf00      	nop
 800bb60:	20000e11 	.word	0x20000e11

0800bb64 <__sfp_lock_release>:
 800bb64:	4801      	ldr	r0, [pc, #4]	@ (800bb6c <__sfp_lock_release+0x8>)
 800bb66:	f000 b931 	b.w	800bdcc <__retarget_lock_release_recursive>
 800bb6a:	bf00      	nop
 800bb6c:	20000e11 	.word	0x20000e11

0800bb70 <__sinit>:
 800bb70:	b510      	push	{r4, lr}
 800bb72:	4604      	mov	r4, r0
 800bb74:	f7ff fff0 	bl	800bb58 <__sfp_lock_acquire>
 800bb78:	6a23      	ldr	r3, [r4, #32]
 800bb7a:	b11b      	cbz	r3, 800bb84 <__sinit+0x14>
 800bb7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb80:	f7ff bff0 	b.w	800bb64 <__sfp_lock_release>
 800bb84:	4b04      	ldr	r3, [pc, #16]	@ (800bb98 <__sinit+0x28>)
 800bb86:	6223      	str	r3, [r4, #32]
 800bb88:	4b04      	ldr	r3, [pc, #16]	@ (800bb9c <__sinit+0x2c>)
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d1f5      	bne.n	800bb7c <__sinit+0xc>
 800bb90:	f7ff ffc4 	bl	800bb1c <global_stdio_init.part.0>
 800bb94:	e7f2      	b.n	800bb7c <__sinit+0xc>
 800bb96:	bf00      	nop
 800bb98:	0800badd 	.word	0x0800badd
 800bb9c:	20000e08 	.word	0x20000e08

0800bba0 <_fwalk_sglue>:
 800bba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bba4:	4607      	mov	r7, r0
 800bba6:	4688      	mov	r8, r1
 800bba8:	4614      	mov	r4, r2
 800bbaa:	2600      	movs	r6, #0
 800bbac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bbb0:	f1b9 0901 	subs.w	r9, r9, #1
 800bbb4:	d505      	bpl.n	800bbc2 <_fwalk_sglue+0x22>
 800bbb6:	6824      	ldr	r4, [r4, #0]
 800bbb8:	2c00      	cmp	r4, #0
 800bbba:	d1f7      	bne.n	800bbac <_fwalk_sglue+0xc>
 800bbbc:	4630      	mov	r0, r6
 800bbbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbc2:	89ab      	ldrh	r3, [r5, #12]
 800bbc4:	2b01      	cmp	r3, #1
 800bbc6:	d907      	bls.n	800bbd8 <_fwalk_sglue+0x38>
 800bbc8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bbcc:	3301      	adds	r3, #1
 800bbce:	d003      	beq.n	800bbd8 <_fwalk_sglue+0x38>
 800bbd0:	4629      	mov	r1, r5
 800bbd2:	4638      	mov	r0, r7
 800bbd4:	47c0      	blx	r8
 800bbd6:	4306      	orrs	r6, r0
 800bbd8:	3568      	adds	r5, #104	@ 0x68
 800bbda:	e7e9      	b.n	800bbb0 <_fwalk_sglue+0x10>

0800bbdc <iprintf>:
 800bbdc:	b40f      	push	{r0, r1, r2, r3}
 800bbde:	b507      	push	{r0, r1, r2, lr}
 800bbe0:	4906      	ldr	r1, [pc, #24]	@ (800bbfc <iprintf+0x20>)
 800bbe2:	ab04      	add	r3, sp, #16
 800bbe4:	6808      	ldr	r0, [r1, #0]
 800bbe6:	f853 2b04 	ldr.w	r2, [r3], #4
 800bbea:	6881      	ldr	r1, [r0, #8]
 800bbec:	9301      	str	r3, [sp, #4]
 800bbee:	f000 fb69 	bl	800c2c4 <_vfiprintf_r>
 800bbf2:	b003      	add	sp, #12
 800bbf4:	f85d eb04 	ldr.w	lr, [sp], #4
 800bbf8:	b004      	add	sp, #16
 800bbfa:	4770      	bx	lr
 800bbfc:	20000184 	.word	0x20000184

0800bc00 <putchar>:
 800bc00:	4b02      	ldr	r3, [pc, #8]	@ (800bc0c <putchar+0xc>)
 800bc02:	4601      	mov	r1, r0
 800bc04:	6818      	ldr	r0, [r3, #0]
 800bc06:	6882      	ldr	r2, [r0, #8]
 800bc08:	f000 beb2 	b.w	800c970 <_putc_r>
 800bc0c:	20000184 	.word	0x20000184

0800bc10 <siprintf>:
 800bc10:	b40e      	push	{r1, r2, r3}
 800bc12:	b500      	push	{lr}
 800bc14:	b09c      	sub	sp, #112	@ 0x70
 800bc16:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800bc1a:	ab1d      	add	r3, sp, #116	@ 0x74
 800bc1c:	9002      	str	r0, [sp, #8]
 800bc1e:	9006      	str	r0, [sp, #24]
 800bc20:	9107      	str	r1, [sp, #28]
 800bc22:	9104      	str	r1, [sp, #16]
 800bc24:	4808      	ldr	r0, [pc, #32]	@ (800bc48 <siprintf+0x38>)
 800bc26:	4909      	ldr	r1, [pc, #36]	@ (800bc4c <siprintf+0x3c>)
 800bc28:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc2c:	9105      	str	r1, [sp, #20]
 800bc2e:	a902      	add	r1, sp, #8
 800bc30:	6800      	ldr	r0, [r0, #0]
 800bc32:	9301      	str	r3, [sp, #4]
 800bc34:	f000 fa20 	bl	800c078 <_svfiprintf_r>
 800bc38:	9b02      	ldr	r3, [sp, #8]
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	701a      	strb	r2, [r3, #0]
 800bc3e:	b01c      	add	sp, #112	@ 0x70
 800bc40:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc44:	b003      	add	sp, #12
 800bc46:	4770      	bx	lr
 800bc48:	20000184 	.word	0x20000184
 800bc4c:	ffff0208 	.word	0xffff0208

0800bc50 <__sread>:
 800bc50:	b510      	push	{r4, lr}
 800bc52:	460c      	mov	r4, r1
 800bc54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc58:	f000 f868 	bl	800bd2c <_read_r>
 800bc5c:	2800      	cmp	r0, #0
 800bc5e:	bfab      	itete	ge
 800bc60:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bc62:	89a3      	ldrhlt	r3, [r4, #12]
 800bc64:	181b      	addge	r3, r3, r0
 800bc66:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bc6a:	bfac      	ite	ge
 800bc6c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bc6e:	81a3      	strhlt	r3, [r4, #12]
 800bc70:	bd10      	pop	{r4, pc}

0800bc72 <__swrite>:
 800bc72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc76:	461f      	mov	r7, r3
 800bc78:	898b      	ldrh	r3, [r1, #12]
 800bc7a:	4605      	mov	r5, r0
 800bc7c:	460c      	mov	r4, r1
 800bc7e:	05db      	lsls	r3, r3, #23
 800bc80:	4616      	mov	r6, r2
 800bc82:	d505      	bpl.n	800bc90 <__swrite+0x1e>
 800bc84:	2302      	movs	r3, #2
 800bc86:	2200      	movs	r2, #0
 800bc88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc8c:	f000 f83c 	bl	800bd08 <_lseek_r>
 800bc90:	89a3      	ldrh	r3, [r4, #12]
 800bc92:	4632      	mov	r2, r6
 800bc94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc98:	4628      	mov	r0, r5
 800bc9a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bc9e:	81a3      	strh	r3, [r4, #12]
 800bca0:	463b      	mov	r3, r7
 800bca2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bca6:	f000 b853 	b.w	800bd50 <_write_r>

0800bcaa <__sseek>:
 800bcaa:	b510      	push	{r4, lr}
 800bcac:	460c      	mov	r4, r1
 800bcae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcb2:	f000 f829 	bl	800bd08 <_lseek_r>
 800bcb6:	1c43      	adds	r3, r0, #1
 800bcb8:	89a3      	ldrh	r3, [r4, #12]
 800bcba:	bf15      	itete	ne
 800bcbc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bcbe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bcc2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bcc6:	81a3      	strheq	r3, [r4, #12]
 800bcc8:	bf18      	it	ne
 800bcca:	81a3      	strhne	r3, [r4, #12]
 800bccc:	bd10      	pop	{r4, pc}

0800bcce <__sclose>:
 800bcce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcd2:	f000 b809 	b.w	800bce8 <_close_r>

0800bcd6 <memset>:
 800bcd6:	4402      	add	r2, r0
 800bcd8:	4603      	mov	r3, r0
 800bcda:	4293      	cmp	r3, r2
 800bcdc:	d100      	bne.n	800bce0 <memset+0xa>
 800bcde:	4770      	bx	lr
 800bce0:	f803 1b01 	strb.w	r1, [r3], #1
 800bce4:	e7f9      	b.n	800bcda <memset+0x4>
	...

0800bce8 <_close_r>:
 800bce8:	b538      	push	{r3, r4, r5, lr}
 800bcea:	2300      	movs	r3, #0
 800bcec:	4d05      	ldr	r5, [pc, #20]	@ (800bd04 <_close_r+0x1c>)
 800bcee:	4604      	mov	r4, r0
 800bcf0:	4608      	mov	r0, r1
 800bcf2:	602b      	str	r3, [r5, #0]
 800bcf4:	f7f4 fea3 	bl	8000a3e <_close>
 800bcf8:	1c43      	adds	r3, r0, #1
 800bcfa:	d102      	bne.n	800bd02 <_close_r+0x1a>
 800bcfc:	682b      	ldr	r3, [r5, #0]
 800bcfe:	b103      	cbz	r3, 800bd02 <_close_r+0x1a>
 800bd00:	6023      	str	r3, [r4, #0]
 800bd02:	bd38      	pop	{r3, r4, r5, pc}
 800bd04:	20000e0c 	.word	0x20000e0c

0800bd08 <_lseek_r>:
 800bd08:	b538      	push	{r3, r4, r5, lr}
 800bd0a:	4604      	mov	r4, r0
 800bd0c:	4d06      	ldr	r5, [pc, #24]	@ (800bd28 <_lseek_r+0x20>)
 800bd0e:	4608      	mov	r0, r1
 800bd10:	4611      	mov	r1, r2
 800bd12:	2200      	movs	r2, #0
 800bd14:	602a      	str	r2, [r5, #0]
 800bd16:	461a      	mov	r2, r3
 800bd18:	f7f4 feb8 	bl	8000a8c <_lseek>
 800bd1c:	1c43      	adds	r3, r0, #1
 800bd1e:	d102      	bne.n	800bd26 <_lseek_r+0x1e>
 800bd20:	682b      	ldr	r3, [r5, #0]
 800bd22:	b103      	cbz	r3, 800bd26 <_lseek_r+0x1e>
 800bd24:	6023      	str	r3, [r4, #0]
 800bd26:	bd38      	pop	{r3, r4, r5, pc}
 800bd28:	20000e0c 	.word	0x20000e0c

0800bd2c <_read_r>:
 800bd2c:	b538      	push	{r3, r4, r5, lr}
 800bd2e:	4604      	mov	r4, r0
 800bd30:	4d06      	ldr	r5, [pc, #24]	@ (800bd4c <_read_r+0x20>)
 800bd32:	4608      	mov	r0, r1
 800bd34:	4611      	mov	r1, r2
 800bd36:	2200      	movs	r2, #0
 800bd38:	602a      	str	r2, [r5, #0]
 800bd3a:	461a      	mov	r2, r3
 800bd3c:	f7f4 fe46 	bl	80009cc <_read>
 800bd40:	1c43      	adds	r3, r0, #1
 800bd42:	d102      	bne.n	800bd4a <_read_r+0x1e>
 800bd44:	682b      	ldr	r3, [r5, #0]
 800bd46:	b103      	cbz	r3, 800bd4a <_read_r+0x1e>
 800bd48:	6023      	str	r3, [r4, #0]
 800bd4a:	bd38      	pop	{r3, r4, r5, pc}
 800bd4c:	20000e0c 	.word	0x20000e0c

0800bd50 <_write_r>:
 800bd50:	b538      	push	{r3, r4, r5, lr}
 800bd52:	4604      	mov	r4, r0
 800bd54:	4d06      	ldr	r5, [pc, #24]	@ (800bd70 <_write_r+0x20>)
 800bd56:	4608      	mov	r0, r1
 800bd58:	4611      	mov	r1, r2
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	602a      	str	r2, [r5, #0]
 800bd5e:	461a      	mov	r2, r3
 800bd60:	f7f4 fe51 	bl	8000a06 <_write>
 800bd64:	1c43      	adds	r3, r0, #1
 800bd66:	d102      	bne.n	800bd6e <_write_r+0x1e>
 800bd68:	682b      	ldr	r3, [r5, #0]
 800bd6a:	b103      	cbz	r3, 800bd6e <_write_r+0x1e>
 800bd6c:	6023      	str	r3, [r4, #0]
 800bd6e:	bd38      	pop	{r3, r4, r5, pc}
 800bd70:	20000e0c 	.word	0x20000e0c

0800bd74 <__errno>:
 800bd74:	4b01      	ldr	r3, [pc, #4]	@ (800bd7c <__errno+0x8>)
 800bd76:	6818      	ldr	r0, [r3, #0]
 800bd78:	4770      	bx	lr
 800bd7a:	bf00      	nop
 800bd7c:	20000184 	.word	0x20000184

0800bd80 <__libc_init_array>:
 800bd80:	b570      	push	{r4, r5, r6, lr}
 800bd82:	4d0d      	ldr	r5, [pc, #52]	@ (800bdb8 <__libc_init_array+0x38>)
 800bd84:	2600      	movs	r6, #0
 800bd86:	4c0d      	ldr	r4, [pc, #52]	@ (800bdbc <__libc_init_array+0x3c>)
 800bd88:	1b64      	subs	r4, r4, r5
 800bd8a:	10a4      	asrs	r4, r4, #2
 800bd8c:	42a6      	cmp	r6, r4
 800bd8e:	d109      	bne.n	800bda4 <__libc_init_array+0x24>
 800bd90:	4d0b      	ldr	r5, [pc, #44]	@ (800bdc0 <__libc_init_array+0x40>)
 800bd92:	2600      	movs	r6, #0
 800bd94:	4c0b      	ldr	r4, [pc, #44]	@ (800bdc4 <__libc_init_array+0x44>)
 800bd96:	f000 ffb1 	bl	800ccfc <_init>
 800bd9a:	1b64      	subs	r4, r4, r5
 800bd9c:	10a4      	asrs	r4, r4, #2
 800bd9e:	42a6      	cmp	r6, r4
 800bda0:	d105      	bne.n	800bdae <__libc_init_array+0x2e>
 800bda2:	bd70      	pop	{r4, r5, r6, pc}
 800bda4:	f855 3b04 	ldr.w	r3, [r5], #4
 800bda8:	3601      	adds	r6, #1
 800bdaa:	4798      	blx	r3
 800bdac:	e7ee      	b.n	800bd8c <__libc_init_array+0xc>
 800bdae:	f855 3b04 	ldr.w	r3, [r5], #4
 800bdb2:	3601      	adds	r6, #1
 800bdb4:	4798      	blx	r3
 800bdb6:	e7f2      	b.n	800bd9e <__libc_init_array+0x1e>
 800bdb8:	0800ce30 	.word	0x0800ce30
 800bdbc:	0800ce30 	.word	0x0800ce30
 800bdc0:	0800ce30 	.word	0x0800ce30
 800bdc4:	0800ce34 	.word	0x0800ce34

0800bdc8 <__retarget_lock_init_recursive>:
 800bdc8:	4770      	bx	lr

0800bdca <__retarget_lock_acquire_recursive>:
 800bdca:	4770      	bx	lr

0800bdcc <__retarget_lock_release_recursive>:
 800bdcc:	4770      	bx	lr
	...

0800bdd0 <_free_r>:
 800bdd0:	b538      	push	{r3, r4, r5, lr}
 800bdd2:	4605      	mov	r5, r0
 800bdd4:	2900      	cmp	r1, #0
 800bdd6:	d041      	beq.n	800be5c <_free_r+0x8c>
 800bdd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bddc:	1f0c      	subs	r4, r1, #4
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	bfb8      	it	lt
 800bde2:	18e4      	addlt	r4, r4, r3
 800bde4:	f000 f8e0 	bl	800bfa8 <__malloc_lock>
 800bde8:	4a1d      	ldr	r2, [pc, #116]	@ (800be60 <_free_r+0x90>)
 800bdea:	6813      	ldr	r3, [r2, #0]
 800bdec:	b933      	cbnz	r3, 800bdfc <_free_r+0x2c>
 800bdee:	6063      	str	r3, [r4, #4]
 800bdf0:	6014      	str	r4, [r2, #0]
 800bdf2:	4628      	mov	r0, r5
 800bdf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bdf8:	f000 b8dc 	b.w	800bfb4 <__malloc_unlock>
 800bdfc:	42a3      	cmp	r3, r4
 800bdfe:	d908      	bls.n	800be12 <_free_r+0x42>
 800be00:	6820      	ldr	r0, [r4, #0]
 800be02:	1821      	adds	r1, r4, r0
 800be04:	428b      	cmp	r3, r1
 800be06:	bf01      	itttt	eq
 800be08:	6819      	ldreq	r1, [r3, #0]
 800be0a:	685b      	ldreq	r3, [r3, #4]
 800be0c:	1809      	addeq	r1, r1, r0
 800be0e:	6021      	streq	r1, [r4, #0]
 800be10:	e7ed      	b.n	800bdee <_free_r+0x1e>
 800be12:	461a      	mov	r2, r3
 800be14:	685b      	ldr	r3, [r3, #4]
 800be16:	b10b      	cbz	r3, 800be1c <_free_r+0x4c>
 800be18:	42a3      	cmp	r3, r4
 800be1a:	d9fa      	bls.n	800be12 <_free_r+0x42>
 800be1c:	6811      	ldr	r1, [r2, #0]
 800be1e:	1850      	adds	r0, r2, r1
 800be20:	42a0      	cmp	r0, r4
 800be22:	d10b      	bne.n	800be3c <_free_r+0x6c>
 800be24:	6820      	ldr	r0, [r4, #0]
 800be26:	4401      	add	r1, r0
 800be28:	1850      	adds	r0, r2, r1
 800be2a:	6011      	str	r1, [r2, #0]
 800be2c:	4283      	cmp	r3, r0
 800be2e:	d1e0      	bne.n	800bdf2 <_free_r+0x22>
 800be30:	6818      	ldr	r0, [r3, #0]
 800be32:	685b      	ldr	r3, [r3, #4]
 800be34:	4408      	add	r0, r1
 800be36:	6053      	str	r3, [r2, #4]
 800be38:	6010      	str	r0, [r2, #0]
 800be3a:	e7da      	b.n	800bdf2 <_free_r+0x22>
 800be3c:	d902      	bls.n	800be44 <_free_r+0x74>
 800be3e:	230c      	movs	r3, #12
 800be40:	602b      	str	r3, [r5, #0]
 800be42:	e7d6      	b.n	800bdf2 <_free_r+0x22>
 800be44:	6820      	ldr	r0, [r4, #0]
 800be46:	1821      	adds	r1, r4, r0
 800be48:	428b      	cmp	r3, r1
 800be4a:	bf02      	ittt	eq
 800be4c:	6819      	ldreq	r1, [r3, #0]
 800be4e:	685b      	ldreq	r3, [r3, #4]
 800be50:	1809      	addeq	r1, r1, r0
 800be52:	6063      	str	r3, [r4, #4]
 800be54:	bf08      	it	eq
 800be56:	6021      	streq	r1, [r4, #0]
 800be58:	6054      	str	r4, [r2, #4]
 800be5a:	e7ca      	b.n	800bdf2 <_free_r+0x22>
 800be5c:	bd38      	pop	{r3, r4, r5, pc}
 800be5e:	bf00      	nop
 800be60:	20000e18 	.word	0x20000e18

0800be64 <sbrk_aligned>:
 800be64:	b570      	push	{r4, r5, r6, lr}
 800be66:	4e0f      	ldr	r6, [pc, #60]	@ (800bea4 <sbrk_aligned+0x40>)
 800be68:	460c      	mov	r4, r1
 800be6a:	4605      	mov	r5, r0
 800be6c:	6831      	ldr	r1, [r6, #0]
 800be6e:	b911      	cbnz	r1, 800be76 <sbrk_aligned+0x12>
 800be70:	f000 fe60 	bl	800cb34 <_sbrk_r>
 800be74:	6030      	str	r0, [r6, #0]
 800be76:	4621      	mov	r1, r4
 800be78:	4628      	mov	r0, r5
 800be7a:	f000 fe5b 	bl	800cb34 <_sbrk_r>
 800be7e:	1c43      	adds	r3, r0, #1
 800be80:	d103      	bne.n	800be8a <sbrk_aligned+0x26>
 800be82:	f04f 34ff 	mov.w	r4, #4294967295
 800be86:	4620      	mov	r0, r4
 800be88:	bd70      	pop	{r4, r5, r6, pc}
 800be8a:	1cc4      	adds	r4, r0, #3
 800be8c:	f024 0403 	bic.w	r4, r4, #3
 800be90:	42a0      	cmp	r0, r4
 800be92:	d0f8      	beq.n	800be86 <sbrk_aligned+0x22>
 800be94:	1a21      	subs	r1, r4, r0
 800be96:	4628      	mov	r0, r5
 800be98:	f000 fe4c 	bl	800cb34 <_sbrk_r>
 800be9c:	3001      	adds	r0, #1
 800be9e:	d1f2      	bne.n	800be86 <sbrk_aligned+0x22>
 800bea0:	e7ef      	b.n	800be82 <sbrk_aligned+0x1e>
 800bea2:	bf00      	nop
 800bea4:	20000e14 	.word	0x20000e14

0800bea8 <_malloc_r>:
 800bea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800beac:	1ccd      	adds	r5, r1, #3
 800beae:	4606      	mov	r6, r0
 800beb0:	f025 0503 	bic.w	r5, r5, #3
 800beb4:	3508      	adds	r5, #8
 800beb6:	2d0c      	cmp	r5, #12
 800beb8:	bf38      	it	cc
 800beba:	250c      	movcc	r5, #12
 800bebc:	2d00      	cmp	r5, #0
 800bebe:	db01      	blt.n	800bec4 <_malloc_r+0x1c>
 800bec0:	42a9      	cmp	r1, r5
 800bec2:	d904      	bls.n	800bece <_malloc_r+0x26>
 800bec4:	230c      	movs	r3, #12
 800bec6:	6033      	str	r3, [r6, #0]
 800bec8:	2000      	movs	r0, #0
 800beca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bece:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bfa4 <_malloc_r+0xfc>
 800bed2:	f000 f869 	bl	800bfa8 <__malloc_lock>
 800bed6:	f8d8 3000 	ldr.w	r3, [r8]
 800beda:	461c      	mov	r4, r3
 800bedc:	bb44      	cbnz	r4, 800bf30 <_malloc_r+0x88>
 800bede:	4629      	mov	r1, r5
 800bee0:	4630      	mov	r0, r6
 800bee2:	f7ff ffbf 	bl	800be64 <sbrk_aligned>
 800bee6:	1c43      	adds	r3, r0, #1
 800bee8:	4604      	mov	r4, r0
 800beea:	d158      	bne.n	800bf9e <_malloc_r+0xf6>
 800beec:	f8d8 4000 	ldr.w	r4, [r8]
 800bef0:	4627      	mov	r7, r4
 800bef2:	2f00      	cmp	r7, #0
 800bef4:	d143      	bne.n	800bf7e <_malloc_r+0xd6>
 800bef6:	2c00      	cmp	r4, #0
 800bef8:	d04b      	beq.n	800bf92 <_malloc_r+0xea>
 800befa:	6823      	ldr	r3, [r4, #0]
 800befc:	4639      	mov	r1, r7
 800befe:	4630      	mov	r0, r6
 800bf00:	eb04 0903 	add.w	r9, r4, r3
 800bf04:	f000 fe16 	bl	800cb34 <_sbrk_r>
 800bf08:	4581      	cmp	r9, r0
 800bf0a:	d142      	bne.n	800bf92 <_malloc_r+0xea>
 800bf0c:	6821      	ldr	r1, [r4, #0]
 800bf0e:	4630      	mov	r0, r6
 800bf10:	1a6d      	subs	r5, r5, r1
 800bf12:	4629      	mov	r1, r5
 800bf14:	f7ff ffa6 	bl	800be64 <sbrk_aligned>
 800bf18:	3001      	adds	r0, #1
 800bf1a:	d03a      	beq.n	800bf92 <_malloc_r+0xea>
 800bf1c:	6823      	ldr	r3, [r4, #0]
 800bf1e:	442b      	add	r3, r5
 800bf20:	6023      	str	r3, [r4, #0]
 800bf22:	f8d8 3000 	ldr.w	r3, [r8]
 800bf26:	685a      	ldr	r2, [r3, #4]
 800bf28:	bb62      	cbnz	r2, 800bf84 <_malloc_r+0xdc>
 800bf2a:	f8c8 7000 	str.w	r7, [r8]
 800bf2e:	e00f      	b.n	800bf50 <_malloc_r+0xa8>
 800bf30:	6822      	ldr	r2, [r4, #0]
 800bf32:	1b52      	subs	r2, r2, r5
 800bf34:	d420      	bmi.n	800bf78 <_malloc_r+0xd0>
 800bf36:	2a0b      	cmp	r2, #11
 800bf38:	d917      	bls.n	800bf6a <_malloc_r+0xc2>
 800bf3a:	1961      	adds	r1, r4, r5
 800bf3c:	42a3      	cmp	r3, r4
 800bf3e:	6025      	str	r5, [r4, #0]
 800bf40:	bf18      	it	ne
 800bf42:	6059      	strne	r1, [r3, #4]
 800bf44:	6863      	ldr	r3, [r4, #4]
 800bf46:	bf08      	it	eq
 800bf48:	f8c8 1000 	streq.w	r1, [r8]
 800bf4c:	5162      	str	r2, [r4, r5]
 800bf4e:	604b      	str	r3, [r1, #4]
 800bf50:	4630      	mov	r0, r6
 800bf52:	f000 f82f 	bl	800bfb4 <__malloc_unlock>
 800bf56:	f104 000b 	add.w	r0, r4, #11
 800bf5a:	1d23      	adds	r3, r4, #4
 800bf5c:	f020 0007 	bic.w	r0, r0, #7
 800bf60:	1ac2      	subs	r2, r0, r3
 800bf62:	bf1c      	itt	ne
 800bf64:	1a1b      	subne	r3, r3, r0
 800bf66:	50a3      	strne	r3, [r4, r2]
 800bf68:	e7af      	b.n	800beca <_malloc_r+0x22>
 800bf6a:	6862      	ldr	r2, [r4, #4]
 800bf6c:	42a3      	cmp	r3, r4
 800bf6e:	bf0c      	ite	eq
 800bf70:	f8c8 2000 	streq.w	r2, [r8]
 800bf74:	605a      	strne	r2, [r3, #4]
 800bf76:	e7eb      	b.n	800bf50 <_malloc_r+0xa8>
 800bf78:	4623      	mov	r3, r4
 800bf7a:	6864      	ldr	r4, [r4, #4]
 800bf7c:	e7ae      	b.n	800bedc <_malloc_r+0x34>
 800bf7e:	463c      	mov	r4, r7
 800bf80:	687f      	ldr	r7, [r7, #4]
 800bf82:	e7b6      	b.n	800bef2 <_malloc_r+0x4a>
 800bf84:	461a      	mov	r2, r3
 800bf86:	685b      	ldr	r3, [r3, #4]
 800bf88:	42a3      	cmp	r3, r4
 800bf8a:	d1fb      	bne.n	800bf84 <_malloc_r+0xdc>
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	6053      	str	r3, [r2, #4]
 800bf90:	e7de      	b.n	800bf50 <_malloc_r+0xa8>
 800bf92:	230c      	movs	r3, #12
 800bf94:	4630      	mov	r0, r6
 800bf96:	6033      	str	r3, [r6, #0]
 800bf98:	f000 f80c 	bl	800bfb4 <__malloc_unlock>
 800bf9c:	e794      	b.n	800bec8 <_malloc_r+0x20>
 800bf9e:	6005      	str	r5, [r0, #0]
 800bfa0:	e7d6      	b.n	800bf50 <_malloc_r+0xa8>
 800bfa2:	bf00      	nop
 800bfa4:	20000e18 	.word	0x20000e18

0800bfa8 <__malloc_lock>:
 800bfa8:	4801      	ldr	r0, [pc, #4]	@ (800bfb0 <__malloc_lock+0x8>)
 800bfaa:	f7ff bf0e 	b.w	800bdca <__retarget_lock_acquire_recursive>
 800bfae:	bf00      	nop
 800bfb0:	20000e10 	.word	0x20000e10

0800bfb4 <__malloc_unlock>:
 800bfb4:	4801      	ldr	r0, [pc, #4]	@ (800bfbc <__malloc_unlock+0x8>)
 800bfb6:	f7ff bf09 	b.w	800bdcc <__retarget_lock_release_recursive>
 800bfba:	bf00      	nop
 800bfbc:	20000e10 	.word	0x20000e10

0800bfc0 <__ssputs_r>:
 800bfc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfc4:	461f      	mov	r7, r3
 800bfc6:	688e      	ldr	r6, [r1, #8]
 800bfc8:	4682      	mov	sl, r0
 800bfca:	460c      	mov	r4, r1
 800bfcc:	42be      	cmp	r6, r7
 800bfce:	4690      	mov	r8, r2
 800bfd0:	680b      	ldr	r3, [r1, #0]
 800bfd2:	d82d      	bhi.n	800c030 <__ssputs_r+0x70>
 800bfd4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bfd8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bfdc:	d026      	beq.n	800c02c <__ssputs_r+0x6c>
 800bfde:	6965      	ldr	r5, [r4, #20]
 800bfe0:	6909      	ldr	r1, [r1, #16]
 800bfe2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bfe6:	eba3 0901 	sub.w	r9, r3, r1
 800bfea:	1c7b      	adds	r3, r7, #1
 800bfec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bff0:	444b      	add	r3, r9
 800bff2:	106d      	asrs	r5, r5, #1
 800bff4:	429d      	cmp	r5, r3
 800bff6:	bf38      	it	cc
 800bff8:	461d      	movcc	r5, r3
 800bffa:	0553      	lsls	r3, r2, #21
 800bffc:	d527      	bpl.n	800c04e <__ssputs_r+0x8e>
 800bffe:	4629      	mov	r1, r5
 800c000:	f7ff ff52 	bl	800bea8 <_malloc_r>
 800c004:	4606      	mov	r6, r0
 800c006:	b360      	cbz	r0, 800c062 <__ssputs_r+0xa2>
 800c008:	464a      	mov	r2, r9
 800c00a:	6921      	ldr	r1, [r4, #16]
 800c00c:	f000 fdb0 	bl	800cb70 <memcpy>
 800c010:	89a3      	ldrh	r3, [r4, #12]
 800c012:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c016:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c01a:	81a3      	strh	r3, [r4, #12]
 800c01c:	6126      	str	r6, [r4, #16]
 800c01e:	444e      	add	r6, r9
 800c020:	6165      	str	r5, [r4, #20]
 800c022:	eba5 0509 	sub.w	r5, r5, r9
 800c026:	6026      	str	r6, [r4, #0]
 800c028:	463e      	mov	r6, r7
 800c02a:	60a5      	str	r5, [r4, #8]
 800c02c:	42be      	cmp	r6, r7
 800c02e:	d900      	bls.n	800c032 <__ssputs_r+0x72>
 800c030:	463e      	mov	r6, r7
 800c032:	4632      	mov	r2, r6
 800c034:	4641      	mov	r1, r8
 800c036:	6820      	ldr	r0, [r4, #0]
 800c038:	f000 fd62 	bl	800cb00 <memmove>
 800c03c:	68a3      	ldr	r3, [r4, #8]
 800c03e:	2000      	movs	r0, #0
 800c040:	1b9b      	subs	r3, r3, r6
 800c042:	60a3      	str	r3, [r4, #8]
 800c044:	6823      	ldr	r3, [r4, #0]
 800c046:	4433      	add	r3, r6
 800c048:	6023      	str	r3, [r4, #0]
 800c04a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c04e:	462a      	mov	r2, r5
 800c050:	f000 fd9b 	bl	800cb8a <_realloc_r>
 800c054:	4606      	mov	r6, r0
 800c056:	2800      	cmp	r0, #0
 800c058:	d1e0      	bne.n	800c01c <__ssputs_r+0x5c>
 800c05a:	6921      	ldr	r1, [r4, #16]
 800c05c:	4650      	mov	r0, sl
 800c05e:	f7ff feb7 	bl	800bdd0 <_free_r>
 800c062:	230c      	movs	r3, #12
 800c064:	f04f 30ff 	mov.w	r0, #4294967295
 800c068:	f8ca 3000 	str.w	r3, [sl]
 800c06c:	89a3      	ldrh	r3, [r4, #12]
 800c06e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c072:	81a3      	strh	r3, [r4, #12]
 800c074:	e7e9      	b.n	800c04a <__ssputs_r+0x8a>
	...

0800c078 <_svfiprintf_r>:
 800c078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c07c:	4698      	mov	r8, r3
 800c07e:	898b      	ldrh	r3, [r1, #12]
 800c080:	b09d      	sub	sp, #116	@ 0x74
 800c082:	4607      	mov	r7, r0
 800c084:	061b      	lsls	r3, r3, #24
 800c086:	460d      	mov	r5, r1
 800c088:	4614      	mov	r4, r2
 800c08a:	d510      	bpl.n	800c0ae <_svfiprintf_r+0x36>
 800c08c:	690b      	ldr	r3, [r1, #16]
 800c08e:	b973      	cbnz	r3, 800c0ae <_svfiprintf_r+0x36>
 800c090:	2140      	movs	r1, #64	@ 0x40
 800c092:	f7ff ff09 	bl	800bea8 <_malloc_r>
 800c096:	6028      	str	r0, [r5, #0]
 800c098:	6128      	str	r0, [r5, #16]
 800c09a:	b930      	cbnz	r0, 800c0aa <_svfiprintf_r+0x32>
 800c09c:	230c      	movs	r3, #12
 800c09e:	603b      	str	r3, [r7, #0]
 800c0a0:	f04f 30ff 	mov.w	r0, #4294967295
 800c0a4:	b01d      	add	sp, #116	@ 0x74
 800c0a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0aa:	2340      	movs	r3, #64	@ 0x40
 800c0ac:	616b      	str	r3, [r5, #20]
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	f8cd 800c 	str.w	r8, [sp, #12]
 800c0b4:	f04f 0901 	mov.w	r9, #1
 800c0b8:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800c25c <_svfiprintf_r+0x1e4>
 800c0bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800c0be:	2320      	movs	r3, #32
 800c0c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c0c4:	2330      	movs	r3, #48	@ 0x30
 800c0c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c0ca:	4623      	mov	r3, r4
 800c0cc:	469a      	mov	sl, r3
 800c0ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c0d2:	b10a      	cbz	r2, 800c0d8 <_svfiprintf_r+0x60>
 800c0d4:	2a25      	cmp	r2, #37	@ 0x25
 800c0d6:	d1f9      	bne.n	800c0cc <_svfiprintf_r+0x54>
 800c0d8:	ebba 0b04 	subs.w	fp, sl, r4
 800c0dc:	d00b      	beq.n	800c0f6 <_svfiprintf_r+0x7e>
 800c0de:	465b      	mov	r3, fp
 800c0e0:	4622      	mov	r2, r4
 800c0e2:	4629      	mov	r1, r5
 800c0e4:	4638      	mov	r0, r7
 800c0e6:	f7ff ff6b 	bl	800bfc0 <__ssputs_r>
 800c0ea:	3001      	adds	r0, #1
 800c0ec:	f000 80a7 	beq.w	800c23e <_svfiprintf_r+0x1c6>
 800c0f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c0f2:	445a      	add	r2, fp
 800c0f4:	9209      	str	r2, [sp, #36]	@ 0x24
 800c0f6:	f89a 3000 	ldrb.w	r3, [sl]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	f000 809f 	beq.w	800c23e <_svfiprintf_r+0x1c6>
 800c100:	2300      	movs	r3, #0
 800c102:	f04f 32ff 	mov.w	r2, #4294967295
 800c106:	f10a 0a01 	add.w	sl, sl, #1
 800c10a:	9304      	str	r3, [sp, #16]
 800c10c:	9307      	str	r3, [sp, #28]
 800c10e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c112:	931a      	str	r3, [sp, #104]	@ 0x68
 800c114:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c118:	4654      	mov	r4, sl
 800c11a:	2205      	movs	r2, #5
 800c11c:	484f      	ldr	r0, [pc, #316]	@ (800c25c <_svfiprintf_r+0x1e4>)
 800c11e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c122:	f000 fd17 	bl	800cb54 <memchr>
 800c126:	9a04      	ldr	r2, [sp, #16]
 800c128:	b9d8      	cbnz	r0, 800c162 <_svfiprintf_r+0xea>
 800c12a:	06d0      	lsls	r0, r2, #27
 800c12c:	bf44      	itt	mi
 800c12e:	2320      	movmi	r3, #32
 800c130:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c134:	0711      	lsls	r1, r2, #28
 800c136:	bf44      	itt	mi
 800c138:	232b      	movmi	r3, #43	@ 0x2b
 800c13a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c13e:	f89a 3000 	ldrb.w	r3, [sl]
 800c142:	2b2a      	cmp	r3, #42	@ 0x2a
 800c144:	d015      	beq.n	800c172 <_svfiprintf_r+0xfa>
 800c146:	9a07      	ldr	r2, [sp, #28]
 800c148:	4654      	mov	r4, sl
 800c14a:	2000      	movs	r0, #0
 800c14c:	f04f 0c0a 	mov.w	ip, #10
 800c150:	4621      	mov	r1, r4
 800c152:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c156:	3b30      	subs	r3, #48	@ 0x30
 800c158:	2b09      	cmp	r3, #9
 800c15a:	d94b      	bls.n	800c1f4 <_svfiprintf_r+0x17c>
 800c15c:	b1b0      	cbz	r0, 800c18c <_svfiprintf_r+0x114>
 800c15e:	9207      	str	r2, [sp, #28]
 800c160:	e014      	b.n	800c18c <_svfiprintf_r+0x114>
 800c162:	eba0 0308 	sub.w	r3, r0, r8
 800c166:	46a2      	mov	sl, r4
 800c168:	fa09 f303 	lsl.w	r3, r9, r3
 800c16c:	4313      	orrs	r3, r2
 800c16e:	9304      	str	r3, [sp, #16]
 800c170:	e7d2      	b.n	800c118 <_svfiprintf_r+0xa0>
 800c172:	9b03      	ldr	r3, [sp, #12]
 800c174:	1d19      	adds	r1, r3, #4
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	9103      	str	r1, [sp, #12]
 800c17c:	bfbb      	ittet	lt
 800c17e:	425b      	neglt	r3, r3
 800c180:	f042 0202 	orrlt.w	r2, r2, #2
 800c184:	9307      	strge	r3, [sp, #28]
 800c186:	9307      	strlt	r3, [sp, #28]
 800c188:	bfb8      	it	lt
 800c18a:	9204      	strlt	r2, [sp, #16]
 800c18c:	7823      	ldrb	r3, [r4, #0]
 800c18e:	2b2e      	cmp	r3, #46	@ 0x2e
 800c190:	d10a      	bne.n	800c1a8 <_svfiprintf_r+0x130>
 800c192:	7863      	ldrb	r3, [r4, #1]
 800c194:	2b2a      	cmp	r3, #42	@ 0x2a
 800c196:	d132      	bne.n	800c1fe <_svfiprintf_r+0x186>
 800c198:	9b03      	ldr	r3, [sp, #12]
 800c19a:	3402      	adds	r4, #2
 800c19c:	1d1a      	adds	r2, r3, #4
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c1a4:	9203      	str	r2, [sp, #12]
 800c1a6:	9305      	str	r3, [sp, #20]
 800c1a8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c26c <_svfiprintf_r+0x1f4>
 800c1ac:	2203      	movs	r2, #3
 800c1ae:	7821      	ldrb	r1, [r4, #0]
 800c1b0:	4650      	mov	r0, sl
 800c1b2:	f000 fccf 	bl	800cb54 <memchr>
 800c1b6:	b138      	cbz	r0, 800c1c8 <_svfiprintf_r+0x150>
 800c1b8:	eba0 000a 	sub.w	r0, r0, sl
 800c1bc:	2240      	movs	r2, #64	@ 0x40
 800c1be:	9b04      	ldr	r3, [sp, #16]
 800c1c0:	3401      	adds	r4, #1
 800c1c2:	4082      	lsls	r2, r0
 800c1c4:	4313      	orrs	r3, r2
 800c1c6:	9304      	str	r3, [sp, #16]
 800c1c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1cc:	2206      	movs	r2, #6
 800c1ce:	4824      	ldr	r0, [pc, #144]	@ (800c260 <_svfiprintf_r+0x1e8>)
 800c1d0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c1d4:	f000 fcbe 	bl	800cb54 <memchr>
 800c1d8:	2800      	cmp	r0, #0
 800c1da:	d036      	beq.n	800c24a <_svfiprintf_r+0x1d2>
 800c1dc:	4b21      	ldr	r3, [pc, #132]	@ (800c264 <_svfiprintf_r+0x1ec>)
 800c1de:	bb1b      	cbnz	r3, 800c228 <_svfiprintf_r+0x1b0>
 800c1e0:	9b03      	ldr	r3, [sp, #12]
 800c1e2:	3307      	adds	r3, #7
 800c1e4:	f023 0307 	bic.w	r3, r3, #7
 800c1e8:	3308      	adds	r3, #8
 800c1ea:	9303      	str	r3, [sp, #12]
 800c1ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1ee:	4433      	add	r3, r6
 800c1f0:	9309      	str	r3, [sp, #36]	@ 0x24
 800c1f2:	e76a      	b.n	800c0ca <_svfiprintf_r+0x52>
 800c1f4:	fb0c 3202 	mla	r2, ip, r2, r3
 800c1f8:	460c      	mov	r4, r1
 800c1fa:	2001      	movs	r0, #1
 800c1fc:	e7a8      	b.n	800c150 <_svfiprintf_r+0xd8>
 800c1fe:	2300      	movs	r3, #0
 800c200:	3401      	adds	r4, #1
 800c202:	f04f 0c0a 	mov.w	ip, #10
 800c206:	4619      	mov	r1, r3
 800c208:	9305      	str	r3, [sp, #20]
 800c20a:	4620      	mov	r0, r4
 800c20c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c210:	3a30      	subs	r2, #48	@ 0x30
 800c212:	2a09      	cmp	r2, #9
 800c214:	d903      	bls.n	800c21e <_svfiprintf_r+0x1a6>
 800c216:	2b00      	cmp	r3, #0
 800c218:	d0c6      	beq.n	800c1a8 <_svfiprintf_r+0x130>
 800c21a:	9105      	str	r1, [sp, #20]
 800c21c:	e7c4      	b.n	800c1a8 <_svfiprintf_r+0x130>
 800c21e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c222:	4604      	mov	r4, r0
 800c224:	2301      	movs	r3, #1
 800c226:	e7f0      	b.n	800c20a <_svfiprintf_r+0x192>
 800c228:	ab03      	add	r3, sp, #12
 800c22a:	462a      	mov	r2, r5
 800c22c:	a904      	add	r1, sp, #16
 800c22e:	4638      	mov	r0, r7
 800c230:	9300      	str	r3, [sp, #0]
 800c232:	4b0d      	ldr	r3, [pc, #52]	@ (800c268 <_svfiprintf_r+0x1f0>)
 800c234:	f3af 8000 	nop.w
 800c238:	1c42      	adds	r2, r0, #1
 800c23a:	4606      	mov	r6, r0
 800c23c:	d1d6      	bne.n	800c1ec <_svfiprintf_r+0x174>
 800c23e:	89ab      	ldrh	r3, [r5, #12]
 800c240:	065b      	lsls	r3, r3, #25
 800c242:	f53f af2d 	bmi.w	800c0a0 <_svfiprintf_r+0x28>
 800c246:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c248:	e72c      	b.n	800c0a4 <_svfiprintf_r+0x2c>
 800c24a:	ab03      	add	r3, sp, #12
 800c24c:	462a      	mov	r2, r5
 800c24e:	a904      	add	r1, sp, #16
 800c250:	4638      	mov	r0, r7
 800c252:	9300      	str	r3, [sp, #0]
 800c254:	4b04      	ldr	r3, [pc, #16]	@ (800c268 <_svfiprintf_r+0x1f0>)
 800c256:	f000 f9bf 	bl	800c5d8 <_printf_i>
 800c25a:	e7ed      	b.n	800c238 <_svfiprintf_r+0x1c0>
 800c25c:	0800cdfc 	.word	0x0800cdfc
 800c260:	0800ce06 	.word	0x0800ce06
 800c264:	00000000 	.word	0x00000000
 800c268:	0800bfc1 	.word	0x0800bfc1
 800c26c:	0800ce02 	.word	0x0800ce02

0800c270 <__sfputc_r>:
 800c270:	6893      	ldr	r3, [r2, #8]
 800c272:	3b01      	subs	r3, #1
 800c274:	2b00      	cmp	r3, #0
 800c276:	6093      	str	r3, [r2, #8]
 800c278:	b410      	push	{r4}
 800c27a:	da08      	bge.n	800c28e <__sfputc_r+0x1e>
 800c27c:	6994      	ldr	r4, [r2, #24]
 800c27e:	42a3      	cmp	r3, r4
 800c280:	db01      	blt.n	800c286 <__sfputc_r+0x16>
 800c282:	290a      	cmp	r1, #10
 800c284:	d103      	bne.n	800c28e <__sfputc_r+0x1e>
 800c286:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c28a:	f000 bba5 	b.w	800c9d8 <__swbuf_r>
 800c28e:	6813      	ldr	r3, [r2, #0]
 800c290:	1c58      	adds	r0, r3, #1
 800c292:	6010      	str	r0, [r2, #0]
 800c294:	4608      	mov	r0, r1
 800c296:	7019      	strb	r1, [r3, #0]
 800c298:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c29c:	4770      	bx	lr

0800c29e <__sfputs_r>:
 800c29e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2a0:	4606      	mov	r6, r0
 800c2a2:	460f      	mov	r7, r1
 800c2a4:	4614      	mov	r4, r2
 800c2a6:	18d5      	adds	r5, r2, r3
 800c2a8:	42ac      	cmp	r4, r5
 800c2aa:	d101      	bne.n	800c2b0 <__sfputs_r+0x12>
 800c2ac:	2000      	movs	r0, #0
 800c2ae:	e007      	b.n	800c2c0 <__sfputs_r+0x22>
 800c2b0:	463a      	mov	r2, r7
 800c2b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2b6:	4630      	mov	r0, r6
 800c2b8:	f7ff ffda 	bl	800c270 <__sfputc_r>
 800c2bc:	1c43      	adds	r3, r0, #1
 800c2be:	d1f3      	bne.n	800c2a8 <__sfputs_r+0xa>
 800c2c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c2c4 <_vfiprintf_r>:
 800c2c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2c8:	460d      	mov	r5, r1
 800c2ca:	b09d      	sub	sp, #116	@ 0x74
 800c2cc:	4614      	mov	r4, r2
 800c2ce:	4698      	mov	r8, r3
 800c2d0:	4606      	mov	r6, r0
 800c2d2:	b118      	cbz	r0, 800c2dc <_vfiprintf_r+0x18>
 800c2d4:	6a03      	ldr	r3, [r0, #32]
 800c2d6:	b90b      	cbnz	r3, 800c2dc <_vfiprintf_r+0x18>
 800c2d8:	f7ff fc4a 	bl	800bb70 <__sinit>
 800c2dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c2de:	07d9      	lsls	r1, r3, #31
 800c2e0:	d405      	bmi.n	800c2ee <_vfiprintf_r+0x2a>
 800c2e2:	89ab      	ldrh	r3, [r5, #12]
 800c2e4:	059a      	lsls	r2, r3, #22
 800c2e6:	d402      	bmi.n	800c2ee <_vfiprintf_r+0x2a>
 800c2e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c2ea:	f7ff fd6e 	bl	800bdca <__retarget_lock_acquire_recursive>
 800c2ee:	89ab      	ldrh	r3, [r5, #12]
 800c2f0:	071b      	lsls	r3, r3, #28
 800c2f2:	d501      	bpl.n	800c2f8 <_vfiprintf_r+0x34>
 800c2f4:	692b      	ldr	r3, [r5, #16]
 800c2f6:	b99b      	cbnz	r3, 800c320 <_vfiprintf_r+0x5c>
 800c2f8:	4629      	mov	r1, r5
 800c2fa:	4630      	mov	r0, r6
 800c2fc:	f000 fbaa 	bl	800ca54 <__swsetup_r>
 800c300:	b170      	cbz	r0, 800c320 <_vfiprintf_r+0x5c>
 800c302:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c304:	07dc      	lsls	r4, r3, #31
 800c306:	d504      	bpl.n	800c312 <_vfiprintf_r+0x4e>
 800c308:	f04f 30ff 	mov.w	r0, #4294967295
 800c30c:	b01d      	add	sp, #116	@ 0x74
 800c30e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c312:	89ab      	ldrh	r3, [r5, #12]
 800c314:	0598      	lsls	r0, r3, #22
 800c316:	d4f7      	bmi.n	800c308 <_vfiprintf_r+0x44>
 800c318:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c31a:	f7ff fd57 	bl	800bdcc <__retarget_lock_release_recursive>
 800c31e:	e7f3      	b.n	800c308 <_vfiprintf_r+0x44>
 800c320:	2300      	movs	r3, #0
 800c322:	f8cd 800c 	str.w	r8, [sp, #12]
 800c326:	f04f 0901 	mov.w	r9, #1
 800c32a:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800c4e0 <_vfiprintf_r+0x21c>
 800c32e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c330:	2320      	movs	r3, #32
 800c332:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c336:	2330      	movs	r3, #48	@ 0x30
 800c338:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c33c:	4623      	mov	r3, r4
 800c33e:	469a      	mov	sl, r3
 800c340:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c344:	b10a      	cbz	r2, 800c34a <_vfiprintf_r+0x86>
 800c346:	2a25      	cmp	r2, #37	@ 0x25
 800c348:	d1f9      	bne.n	800c33e <_vfiprintf_r+0x7a>
 800c34a:	ebba 0b04 	subs.w	fp, sl, r4
 800c34e:	d00b      	beq.n	800c368 <_vfiprintf_r+0xa4>
 800c350:	465b      	mov	r3, fp
 800c352:	4622      	mov	r2, r4
 800c354:	4629      	mov	r1, r5
 800c356:	4630      	mov	r0, r6
 800c358:	f7ff ffa1 	bl	800c29e <__sfputs_r>
 800c35c:	3001      	adds	r0, #1
 800c35e:	f000 80a7 	beq.w	800c4b0 <_vfiprintf_r+0x1ec>
 800c362:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c364:	445a      	add	r2, fp
 800c366:	9209      	str	r2, [sp, #36]	@ 0x24
 800c368:	f89a 3000 	ldrb.w	r3, [sl]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	f000 809f 	beq.w	800c4b0 <_vfiprintf_r+0x1ec>
 800c372:	2300      	movs	r3, #0
 800c374:	f04f 32ff 	mov.w	r2, #4294967295
 800c378:	f10a 0a01 	add.w	sl, sl, #1
 800c37c:	9304      	str	r3, [sp, #16]
 800c37e:	9307      	str	r3, [sp, #28]
 800c380:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c384:	931a      	str	r3, [sp, #104]	@ 0x68
 800c386:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c38a:	4654      	mov	r4, sl
 800c38c:	2205      	movs	r2, #5
 800c38e:	4854      	ldr	r0, [pc, #336]	@ (800c4e0 <_vfiprintf_r+0x21c>)
 800c390:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c394:	f000 fbde 	bl	800cb54 <memchr>
 800c398:	9a04      	ldr	r2, [sp, #16]
 800c39a:	b9d8      	cbnz	r0, 800c3d4 <_vfiprintf_r+0x110>
 800c39c:	06d1      	lsls	r1, r2, #27
 800c39e:	bf44      	itt	mi
 800c3a0:	2320      	movmi	r3, #32
 800c3a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c3a6:	0713      	lsls	r3, r2, #28
 800c3a8:	bf44      	itt	mi
 800c3aa:	232b      	movmi	r3, #43	@ 0x2b
 800c3ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c3b0:	f89a 3000 	ldrb.w	r3, [sl]
 800c3b4:	2b2a      	cmp	r3, #42	@ 0x2a
 800c3b6:	d015      	beq.n	800c3e4 <_vfiprintf_r+0x120>
 800c3b8:	9a07      	ldr	r2, [sp, #28]
 800c3ba:	4654      	mov	r4, sl
 800c3bc:	2000      	movs	r0, #0
 800c3be:	f04f 0c0a 	mov.w	ip, #10
 800c3c2:	4621      	mov	r1, r4
 800c3c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c3c8:	3b30      	subs	r3, #48	@ 0x30
 800c3ca:	2b09      	cmp	r3, #9
 800c3cc:	d94b      	bls.n	800c466 <_vfiprintf_r+0x1a2>
 800c3ce:	b1b0      	cbz	r0, 800c3fe <_vfiprintf_r+0x13a>
 800c3d0:	9207      	str	r2, [sp, #28]
 800c3d2:	e014      	b.n	800c3fe <_vfiprintf_r+0x13a>
 800c3d4:	eba0 0308 	sub.w	r3, r0, r8
 800c3d8:	46a2      	mov	sl, r4
 800c3da:	fa09 f303 	lsl.w	r3, r9, r3
 800c3de:	4313      	orrs	r3, r2
 800c3e0:	9304      	str	r3, [sp, #16]
 800c3e2:	e7d2      	b.n	800c38a <_vfiprintf_r+0xc6>
 800c3e4:	9b03      	ldr	r3, [sp, #12]
 800c3e6:	1d19      	adds	r1, r3, #4
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	9103      	str	r1, [sp, #12]
 800c3ee:	bfbb      	ittet	lt
 800c3f0:	425b      	neglt	r3, r3
 800c3f2:	f042 0202 	orrlt.w	r2, r2, #2
 800c3f6:	9307      	strge	r3, [sp, #28]
 800c3f8:	9307      	strlt	r3, [sp, #28]
 800c3fa:	bfb8      	it	lt
 800c3fc:	9204      	strlt	r2, [sp, #16]
 800c3fe:	7823      	ldrb	r3, [r4, #0]
 800c400:	2b2e      	cmp	r3, #46	@ 0x2e
 800c402:	d10a      	bne.n	800c41a <_vfiprintf_r+0x156>
 800c404:	7863      	ldrb	r3, [r4, #1]
 800c406:	2b2a      	cmp	r3, #42	@ 0x2a
 800c408:	d132      	bne.n	800c470 <_vfiprintf_r+0x1ac>
 800c40a:	9b03      	ldr	r3, [sp, #12]
 800c40c:	3402      	adds	r4, #2
 800c40e:	1d1a      	adds	r2, r3, #4
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c416:	9203      	str	r2, [sp, #12]
 800c418:	9305      	str	r3, [sp, #20]
 800c41a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c4f0 <_vfiprintf_r+0x22c>
 800c41e:	2203      	movs	r2, #3
 800c420:	7821      	ldrb	r1, [r4, #0]
 800c422:	4650      	mov	r0, sl
 800c424:	f000 fb96 	bl	800cb54 <memchr>
 800c428:	b138      	cbz	r0, 800c43a <_vfiprintf_r+0x176>
 800c42a:	eba0 000a 	sub.w	r0, r0, sl
 800c42e:	2240      	movs	r2, #64	@ 0x40
 800c430:	9b04      	ldr	r3, [sp, #16]
 800c432:	3401      	adds	r4, #1
 800c434:	4082      	lsls	r2, r0
 800c436:	4313      	orrs	r3, r2
 800c438:	9304      	str	r3, [sp, #16]
 800c43a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c43e:	2206      	movs	r2, #6
 800c440:	4828      	ldr	r0, [pc, #160]	@ (800c4e4 <_vfiprintf_r+0x220>)
 800c442:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c446:	f000 fb85 	bl	800cb54 <memchr>
 800c44a:	2800      	cmp	r0, #0
 800c44c:	d03f      	beq.n	800c4ce <_vfiprintf_r+0x20a>
 800c44e:	4b26      	ldr	r3, [pc, #152]	@ (800c4e8 <_vfiprintf_r+0x224>)
 800c450:	bb1b      	cbnz	r3, 800c49a <_vfiprintf_r+0x1d6>
 800c452:	9b03      	ldr	r3, [sp, #12]
 800c454:	3307      	adds	r3, #7
 800c456:	f023 0307 	bic.w	r3, r3, #7
 800c45a:	3308      	adds	r3, #8
 800c45c:	9303      	str	r3, [sp, #12]
 800c45e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c460:	443b      	add	r3, r7
 800c462:	9309      	str	r3, [sp, #36]	@ 0x24
 800c464:	e76a      	b.n	800c33c <_vfiprintf_r+0x78>
 800c466:	fb0c 3202 	mla	r2, ip, r2, r3
 800c46a:	460c      	mov	r4, r1
 800c46c:	2001      	movs	r0, #1
 800c46e:	e7a8      	b.n	800c3c2 <_vfiprintf_r+0xfe>
 800c470:	2300      	movs	r3, #0
 800c472:	3401      	adds	r4, #1
 800c474:	f04f 0c0a 	mov.w	ip, #10
 800c478:	4619      	mov	r1, r3
 800c47a:	9305      	str	r3, [sp, #20]
 800c47c:	4620      	mov	r0, r4
 800c47e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c482:	3a30      	subs	r2, #48	@ 0x30
 800c484:	2a09      	cmp	r2, #9
 800c486:	d903      	bls.n	800c490 <_vfiprintf_r+0x1cc>
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d0c6      	beq.n	800c41a <_vfiprintf_r+0x156>
 800c48c:	9105      	str	r1, [sp, #20]
 800c48e:	e7c4      	b.n	800c41a <_vfiprintf_r+0x156>
 800c490:	fb0c 2101 	mla	r1, ip, r1, r2
 800c494:	4604      	mov	r4, r0
 800c496:	2301      	movs	r3, #1
 800c498:	e7f0      	b.n	800c47c <_vfiprintf_r+0x1b8>
 800c49a:	ab03      	add	r3, sp, #12
 800c49c:	462a      	mov	r2, r5
 800c49e:	a904      	add	r1, sp, #16
 800c4a0:	4630      	mov	r0, r6
 800c4a2:	9300      	str	r3, [sp, #0]
 800c4a4:	4b11      	ldr	r3, [pc, #68]	@ (800c4ec <_vfiprintf_r+0x228>)
 800c4a6:	f3af 8000 	nop.w
 800c4aa:	4607      	mov	r7, r0
 800c4ac:	1c78      	adds	r0, r7, #1
 800c4ae:	d1d6      	bne.n	800c45e <_vfiprintf_r+0x19a>
 800c4b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c4b2:	07d9      	lsls	r1, r3, #31
 800c4b4:	d405      	bmi.n	800c4c2 <_vfiprintf_r+0x1fe>
 800c4b6:	89ab      	ldrh	r3, [r5, #12]
 800c4b8:	059a      	lsls	r2, r3, #22
 800c4ba:	d402      	bmi.n	800c4c2 <_vfiprintf_r+0x1fe>
 800c4bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c4be:	f7ff fc85 	bl	800bdcc <__retarget_lock_release_recursive>
 800c4c2:	89ab      	ldrh	r3, [r5, #12]
 800c4c4:	065b      	lsls	r3, r3, #25
 800c4c6:	f53f af1f 	bmi.w	800c308 <_vfiprintf_r+0x44>
 800c4ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c4cc:	e71e      	b.n	800c30c <_vfiprintf_r+0x48>
 800c4ce:	ab03      	add	r3, sp, #12
 800c4d0:	462a      	mov	r2, r5
 800c4d2:	a904      	add	r1, sp, #16
 800c4d4:	4630      	mov	r0, r6
 800c4d6:	9300      	str	r3, [sp, #0]
 800c4d8:	4b04      	ldr	r3, [pc, #16]	@ (800c4ec <_vfiprintf_r+0x228>)
 800c4da:	f000 f87d 	bl	800c5d8 <_printf_i>
 800c4de:	e7e4      	b.n	800c4aa <_vfiprintf_r+0x1e6>
 800c4e0:	0800cdfc 	.word	0x0800cdfc
 800c4e4:	0800ce06 	.word	0x0800ce06
 800c4e8:	00000000 	.word	0x00000000
 800c4ec:	0800c29f 	.word	0x0800c29f
 800c4f0:	0800ce02 	.word	0x0800ce02

0800c4f4 <_printf_common>:
 800c4f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4f8:	4616      	mov	r6, r2
 800c4fa:	4698      	mov	r8, r3
 800c4fc:	688a      	ldr	r2, [r1, #8]
 800c4fe:	4607      	mov	r7, r0
 800c500:	690b      	ldr	r3, [r1, #16]
 800c502:	460c      	mov	r4, r1
 800c504:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c508:	4293      	cmp	r3, r2
 800c50a:	bfb8      	it	lt
 800c50c:	4613      	movlt	r3, r2
 800c50e:	6033      	str	r3, [r6, #0]
 800c510:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c514:	b10a      	cbz	r2, 800c51a <_printf_common+0x26>
 800c516:	3301      	adds	r3, #1
 800c518:	6033      	str	r3, [r6, #0]
 800c51a:	6823      	ldr	r3, [r4, #0]
 800c51c:	0699      	lsls	r1, r3, #26
 800c51e:	bf42      	ittt	mi
 800c520:	6833      	ldrmi	r3, [r6, #0]
 800c522:	3302      	addmi	r3, #2
 800c524:	6033      	strmi	r3, [r6, #0]
 800c526:	6825      	ldr	r5, [r4, #0]
 800c528:	f015 0506 	ands.w	r5, r5, #6
 800c52c:	d106      	bne.n	800c53c <_printf_common+0x48>
 800c52e:	f104 0a19 	add.w	sl, r4, #25
 800c532:	68e3      	ldr	r3, [r4, #12]
 800c534:	6832      	ldr	r2, [r6, #0]
 800c536:	1a9b      	subs	r3, r3, r2
 800c538:	42ab      	cmp	r3, r5
 800c53a:	dc2b      	bgt.n	800c594 <_printf_common+0xa0>
 800c53c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c540:	6822      	ldr	r2, [r4, #0]
 800c542:	3b00      	subs	r3, #0
 800c544:	bf18      	it	ne
 800c546:	2301      	movne	r3, #1
 800c548:	0692      	lsls	r2, r2, #26
 800c54a:	d430      	bmi.n	800c5ae <_printf_common+0xba>
 800c54c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c550:	4641      	mov	r1, r8
 800c552:	4638      	mov	r0, r7
 800c554:	47c8      	blx	r9
 800c556:	3001      	adds	r0, #1
 800c558:	d023      	beq.n	800c5a2 <_printf_common+0xae>
 800c55a:	6823      	ldr	r3, [r4, #0]
 800c55c:	341a      	adds	r4, #26
 800c55e:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800c562:	f003 0306 	and.w	r3, r3, #6
 800c566:	2b04      	cmp	r3, #4
 800c568:	bf0a      	itet	eq
 800c56a:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800c56e:	2500      	movne	r5, #0
 800c570:	6833      	ldreq	r3, [r6, #0]
 800c572:	f04f 0600 	mov.w	r6, #0
 800c576:	bf08      	it	eq
 800c578:	1aed      	subeq	r5, r5, r3
 800c57a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800c57e:	bf08      	it	eq
 800c580:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c584:	4293      	cmp	r3, r2
 800c586:	bfc4      	itt	gt
 800c588:	1a9b      	subgt	r3, r3, r2
 800c58a:	18ed      	addgt	r5, r5, r3
 800c58c:	42b5      	cmp	r5, r6
 800c58e:	d11a      	bne.n	800c5c6 <_printf_common+0xd2>
 800c590:	2000      	movs	r0, #0
 800c592:	e008      	b.n	800c5a6 <_printf_common+0xb2>
 800c594:	2301      	movs	r3, #1
 800c596:	4652      	mov	r2, sl
 800c598:	4641      	mov	r1, r8
 800c59a:	4638      	mov	r0, r7
 800c59c:	47c8      	blx	r9
 800c59e:	3001      	adds	r0, #1
 800c5a0:	d103      	bne.n	800c5aa <_printf_common+0xb6>
 800c5a2:	f04f 30ff 	mov.w	r0, #4294967295
 800c5a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5aa:	3501      	adds	r5, #1
 800c5ac:	e7c1      	b.n	800c532 <_printf_common+0x3e>
 800c5ae:	18e1      	adds	r1, r4, r3
 800c5b0:	1c5a      	adds	r2, r3, #1
 800c5b2:	2030      	movs	r0, #48	@ 0x30
 800c5b4:	3302      	adds	r3, #2
 800c5b6:	4422      	add	r2, r4
 800c5b8:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c5bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c5c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c5c4:	e7c2      	b.n	800c54c <_printf_common+0x58>
 800c5c6:	2301      	movs	r3, #1
 800c5c8:	4622      	mov	r2, r4
 800c5ca:	4641      	mov	r1, r8
 800c5cc:	4638      	mov	r0, r7
 800c5ce:	47c8      	blx	r9
 800c5d0:	3001      	adds	r0, #1
 800c5d2:	d0e6      	beq.n	800c5a2 <_printf_common+0xae>
 800c5d4:	3601      	adds	r6, #1
 800c5d6:	e7d9      	b.n	800c58c <_printf_common+0x98>

0800c5d8 <_printf_i>:
 800c5d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c5dc:	7e0f      	ldrb	r7, [r1, #24]
 800c5de:	4691      	mov	r9, r2
 800c5e0:	4680      	mov	r8, r0
 800c5e2:	460c      	mov	r4, r1
 800c5e4:	2f78      	cmp	r7, #120	@ 0x78
 800c5e6:	469a      	mov	sl, r3
 800c5e8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c5ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c5ee:	d807      	bhi.n	800c600 <_printf_i+0x28>
 800c5f0:	2f62      	cmp	r7, #98	@ 0x62
 800c5f2:	d80a      	bhi.n	800c60a <_printf_i+0x32>
 800c5f4:	2f00      	cmp	r7, #0
 800c5f6:	f000 80d2 	beq.w	800c79e <_printf_i+0x1c6>
 800c5fa:	2f58      	cmp	r7, #88	@ 0x58
 800c5fc:	f000 80b9 	beq.w	800c772 <_printf_i+0x19a>
 800c600:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c604:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c608:	e03a      	b.n	800c680 <_printf_i+0xa8>
 800c60a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c60e:	2b15      	cmp	r3, #21
 800c610:	d8f6      	bhi.n	800c600 <_printf_i+0x28>
 800c612:	a101      	add	r1, pc, #4	@ (adr r1, 800c618 <_printf_i+0x40>)
 800c614:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c618:	0800c671 	.word	0x0800c671
 800c61c:	0800c685 	.word	0x0800c685
 800c620:	0800c601 	.word	0x0800c601
 800c624:	0800c601 	.word	0x0800c601
 800c628:	0800c601 	.word	0x0800c601
 800c62c:	0800c601 	.word	0x0800c601
 800c630:	0800c685 	.word	0x0800c685
 800c634:	0800c601 	.word	0x0800c601
 800c638:	0800c601 	.word	0x0800c601
 800c63c:	0800c601 	.word	0x0800c601
 800c640:	0800c601 	.word	0x0800c601
 800c644:	0800c785 	.word	0x0800c785
 800c648:	0800c6af 	.word	0x0800c6af
 800c64c:	0800c73f 	.word	0x0800c73f
 800c650:	0800c601 	.word	0x0800c601
 800c654:	0800c601 	.word	0x0800c601
 800c658:	0800c7a7 	.word	0x0800c7a7
 800c65c:	0800c601 	.word	0x0800c601
 800c660:	0800c6af 	.word	0x0800c6af
 800c664:	0800c601 	.word	0x0800c601
 800c668:	0800c601 	.word	0x0800c601
 800c66c:	0800c747 	.word	0x0800c747
 800c670:	6833      	ldr	r3, [r6, #0]
 800c672:	1d1a      	adds	r2, r3, #4
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	6032      	str	r2, [r6, #0]
 800c678:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c67c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c680:	2301      	movs	r3, #1
 800c682:	e09d      	b.n	800c7c0 <_printf_i+0x1e8>
 800c684:	6833      	ldr	r3, [r6, #0]
 800c686:	6820      	ldr	r0, [r4, #0]
 800c688:	1d19      	adds	r1, r3, #4
 800c68a:	6031      	str	r1, [r6, #0]
 800c68c:	0606      	lsls	r6, r0, #24
 800c68e:	d501      	bpl.n	800c694 <_printf_i+0xbc>
 800c690:	681d      	ldr	r5, [r3, #0]
 800c692:	e003      	b.n	800c69c <_printf_i+0xc4>
 800c694:	0645      	lsls	r5, r0, #25
 800c696:	d5fb      	bpl.n	800c690 <_printf_i+0xb8>
 800c698:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c69c:	2d00      	cmp	r5, #0
 800c69e:	da03      	bge.n	800c6a8 <_printf_i+0xd0>
 800c6a0:	232d      	movs	r3, #45	@ 0x2d
 800c6a2:	426d      	negs	r5, r5
 800c6a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c6a8:	4859      	ldr	r0, [pc, #356]	@ (800c810 <_printf_i+0x238>)
 800c6aa:	230a      	movs	r3, #10
 800c6ac:	e011      	b.n	800c6d2 <_printf_i+0xfa>
 800c6ae:	6821      	ldr	r1, [r4, #0]
 800c6b0:	6833      	ldr	r3, [r6, #0]
 800c6b2:	0608      	lsls	r0, r1, #24
 800c6b4:	f853 5b04 	ldr.w	r5, [r3], #4
 800c6b8:	d402      	bmi.n	800c6c0 <_printf_i+0xe8>
 800c6ba:	0649      	lsls	r1, r1, #25
 800c6bc:	bf48      	it	mi
 800c6be:	b2ad      	uxthmi	r5, r5
 800c6c0:	2f6f      	cmp	r7, #111	@ 0x6f
 800c6c2:	6033      	str	r3, [r6, #0]
 800c6c4:	4852      	ldr	r0, [pc, #328]	@ (800c810 <_printf_i+0x238>)
 800c6c6:	bf14      	ite	ne
 800c6c8:	230a      	movne	r3, #10
 800c6ca:	2308      	moveq	r3, #8
 800c6cc:	2100      	movs	r1, #0
 800c6ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c6d2:	6866      	ldr	r6, [r4, #4]
 800c6d4:	2e00      	cmp	r6, #0
 800c6d6:	60a6      	str	r6, [r4, #8]
 800c6d8:	bfa2      	ittt	ge
 800c6da:	6821      	ldrge	r1, [r4, #0]
 800c6dc:	f021 0104 	bicge.w	r1, r1, #4
 800c6e0:	6021      	strge	r1, [r4, #0]
 800c6e2:	b90d      	cbnz	r5, 800c6e8 <_printf_i+0x110>
 800c6e4:	2e00      	cmp	r6, #0
 800c6e6:	d04b      	beq.n	800c780 <_printf_i+0x1a8>
 800c6e8:	4616      	mov	r6, r2
 800c6ea:	fbb5 f1f3 	udiv	r1, r5, r3
 800c6ee:	fb03 5711 	mls	r7, r3, r1, r5
 800c6f2:	5dc7      	ldrb	r7, [r0, r7]
 800c6f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c6f8:	462f      	mov	r7, r5
 800c6fa:	460d      	mov	r5, r1
 800c6fc:	42bb      	cmp	r3, r7
 800c6fe:	d9f4      	bls.n	800c6ea <_printf_i+0x112>
 800c700:	2b08      	cmp	r3, #8
 800c702:	d10b      	bne.n	800c71c <_printf_i+0x144>
 800c704:	6823      	ldr	r3, [r4, #0]
 800c706:	07df      	lsls	r7, r3, #31
 800c708:	d508      	bpl.n	800c71c <_printf_i+0x144>
 800c70a:	6923      	ldr	r3, [r4, #16]
 800c70c:	6861      	ldr	r1, [r4, #4]
 800c70e:	4299      	cmp	r1, r3
 800c710:	bfde      	ittt	le
 800c712:	2330      	movle	r3, #48	@ 0x30
 800c714:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c718:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c71c:	1b92      	subs	r2, r2, r6
 800c71e:	6122      	str	r2, [r4, #16]
 800c720:	464b      	mov	r3, r9
 800c722:	aa03      	add	r2, sp, #12
 800c724:	4621      	mov	r1, r4
 800c726:	4640      	mov	r0, r8
 800c728:	f8cd a000 	str.w	sl, [sp]
 800c72c:	f7ff fee2 	bl	800c4f4 <_printf_common>
 800c730:	3001      	adds	r0, #1
 800c732:	d14a      	bne.n	800c7ca <_printf_i+0x1f2>
 800c734:	f04f 30ff 	mov.w	r0, #4294967295
 800c738:	b004      	add	sp, #16
 800c73a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c73e:	6823      	ldr	r3, [r4, #0]
 800c740:	f043 0320 	orr.w	r3, r3, #32
 800c744:	6023      	str	r3, [r4, #0]
 800c746:	2778      	movs	r7, #120	@ 0x78
 800c748:	4832      	ldr	r0, [pc, #200]	@ (800c814 <_printf_i+0x23c>)
 800c74a:	6823      	ldr	r3, [r4, #0]
 800c74c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c750:	061f      	lsls	r7, r3, #24
 800c752:	6831      	ldr	r1, [r6, #0]
 800c754:	f851 5b04 	ldr.w	r5, [r1], #4
 800c758:	d402      	bmi.n	800c760 <_printf_i+0x188>
 800c75a:	065f      	lsls	r7, r3, #25
 800c75c:	bf48      	it	mi
 800c75e:	b2ad      	uxthmi	r5, r5
 800c760:	6031      	str	r1, [r6, #0]
 800c762:	07d9      	lsls	r1, r3, #31
 800c764:	bf44      	itt	mi
 800c766:	f043 0320 	orrmi.w	r3, r3, #32
 800c76a:	6023      	strmi	r3, [r4, #0]
 800c76c:	b11d      	cbz	r5, 800c776 <_printf_i+0x19e>
 800c76e:	2310      	movs	r3, #16
 800c770:	e7ac      	b.n	800c6cc <_printf_i+0xf4>
 800c772:	4827      	ldr	r0, [pc, #156]	@ (800c810 <_printf_i+0x238>)
 800c774:	e7e9      	b.n	800c74a <_printf_i+0x172>
 800c776:	6823      	ldr	r3, [r4, #0]
 800c778:	f023 0320 	bic.w	r3, r3, #32
 800c77c:	6023      	str	r3, [r4, #0]
 800c77e:	e7f6      	b.n	800c76e <_printf_i+0x196>
 800c780:	4616      	mov	r6, r2
 800c782:	e7bd      	b.n	800c700 <_printf_i+0x128>
 800c784:	6833      	ldr	r3, [r6, #0]
 800c786:	6825      	ldr	r5, [r4, #0]
 800c788:	1d18      	adds	r0, r3, #4
 800c78a:	6961      	ldr	r1, [r4, #20]
 800c78c:	6030      	str	r0, [r6, #0]
 800c78e:	062e      	lsls	r6, r5, #24
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	d501      	bpl.n	800c798 <_printf_i+0x1c0>
 800c794:	6019      	str	r1, [r3, #0]
 800c796:	e002      	b.n	800c79e <_printf_i+0x1c6>
 800c798:	0668      	lsls	r0, r5, #25
 800c79a:	d5fb      	bpl.n	800c794 <_printf_i+0x1bc>
 800c79c:	8019      	strh	r1, [r3, #0]
 800c79e:	2300      	movs	r3, #0
 800c7a0:	4616      	mov	r6, r2
 800c7a2:	6123      	str	r3, [r4, #16]
 800c7a4:	e7bc      	b.n	800c720 <_printf_i+0x148>
 800c7a6:	6833      	ldr	r3, [r6, #0]
 800c7a8:	2100      	movs	r1, #0
 800c7aa:	1d1a      	adds	r2, r3, #4
 800c7ac:	6032      	str	r2, [r6, #0]
 800c7ae:	681e      	ldr	r6, [r3, #0]
 800c7b0:	6862      	ldr	r2, [r4, #4]
 800c7b2:	4630      	mov	r0, r6
 800c7b4:	f000 f9ce 	bl	800cb54 <memchr>
 800c7b8:	b108      	cbz	r0, 800c7be <_printf_i+0x1e6>
 800c7ba:	1b80      	subs	r0, r0, r6
 800c7bc:	6060      	str	r0, [r4, #4]
 800c7be:	6863      	ldr	r3, [r4, #4]
 800c7c0:	6123      	str	r3, [r4, #16]
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c7c8:	e7aa      	b.n	800c720 <_printf_i+0x148>
 800c7ca:	6923      	ldr	r3, [r4, #16]
 800c7cc:	4632      	mov	r2, r6
 800c7ce:	4649      	mov	r1, r9
 800c7d0:	4640      	mov	r0, r8
 800c7d2:	47d0      	blx	sl
 800c7d4:	3001      	adds	r0, #1
 800c7d6:	d0ad      	beq.n	800c734 <_printf_i+0x15c>
 800c7d8:	6823      	ldr	r3, [r4, #0]
 800c7da:	079b      	lsls	r3, r3, #30
 800c7dc:	d413      	bmi.n	800c806 <_printf_i+0x22e>
 800c7de:	68e0      	ldr	r0, [r4, #12]
 800c7e0:	9b03      	ldr	r3, [sp, #12]
 800c7e2:	4298      	cmp	r0, r3
 800c7e4:	bfb8      	it	lt
 800c7e6:	4618      	movlt	r0, r3
 800c7e8:	e7a6      	b.n	800c738 <_printf_i+0x160>
 800c7ea:	2301      	movs	r3, #1
 800c7ec:	4632      	mov	r2, r6
 800c7ee:	4649      	mov	r1, r9
 800c7f0:	4640      	mov	r0, r8
 800c7f2:	47d0      	blx	sl
 800c7f4:	3001      	adds	r0, #1
 800c7f6:	d09d      	beq.n	800c734 <_printf_i+0x15c>
 800c7f8:	3501      	adds	r5, #1
 800c7fa:	68e3      	ldr	r3, [r4, #12]
 800c7fc:	9903      	ldr	r1, [sp, #12]
 800c7fe:	1a5b      	subs	r3, r3, r1
 800c800:	42ab      	cmp	r3, r5
 800c802:	dcf2      	bgt.n	800c7ea <_printf_i+0x212>
 800c804:	e7eb      	b.n	800c7de <_printf_i+0x206>
 800c806:	2500      	movs	r5, #0
 800c808:	f104 0619 	add.w	r6, r4, #25
 800c80c:	e7f5      	b.n	800c7fa <_printf_i+0x222>
 800c80e:	bf00      	nop
 800c810:	0800ce0d 	.word	0x0800ce0d
 800c814:	0800ce1e 	.word	0x0800ce1e

0800c818 <__sflush_r>:
 800c818:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c81c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c820:	0716      	lsls	r6, r2, #28
 800c822:	4605      	mov	r5, r0
 800c824:	460c      	mov	r4, r1
 800c826:	d454      	bmi.n	800c8d2 <__sflush_r+0xba>
 800c828:	684b      	ldr	r3, [r1, #4]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	dc02      	bgt.n	800c834 <__sflush_r+0x1c>
 800c82e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c830:	2b00      	cmp	r3, #0
 800c832:	dd48      	ble.n	800c8c6 <__sflush_r+0xae>
 800c834:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c836:	2e00      	cmp	r6, #0
 800c838:	d045      	beq.n	800c8c6 <__sflush_r+0xae>
 800c83a:	2300      	movs	r3, #0
 800c83c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c840:	682f      	ldr	r7, [r5, #0]
 800c842:	6a21      	ldr	r1, [r4, #32]
 800c844:	602b      	str	r3, [r5, #0]
 800c846:	d030      	beq.n	800c8aa <__sflush_r+0x92>
 800c848:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c84a:	89a3      	ldrh	r3, [r4, #12]
 800c84c:	0759      	lsls	r1, r3, #29
 800c84e:	d505      	bpl.n	800c85c <__sflush_r+0x44>
 800c850:	6863      	ldr	r3, [r4, #4]
 800c852:	1ad2      	subs	r2, r2, r3
 800c854:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c856:	b10b      	cbz	r3, 800c85c <__sflush_r+0x44>
 800c858:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c85a:	1ad2      	subs	r2, r2, r3
 800c85c:	2300      	movs	r3, #0
 800c85e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c860:	6a21      	ldr	r1, [r4, #32]
 800c862:	4628      	mov	r0, r5
 800c864:	47b0      	blx	r6
 800c866:	1c43      	adds	r3, r0, #1
 800c868:	89a3      	ldrh	r3, [r4, #12]
 800c86a:	d106      	bne.n	800c87a <__sflush_r+0x62>
 800c86c:	6829      	ldr	r1, [r5, #0]
 800c86e:	291d      	cmp	r1, #29
 800c870:	d82b      	bhi.n	800c8ca <__sflush_r+0xb2>
 800c872:	4a2a      	ldr	r2, [pc, #168]	@ (800c91c <__sflush_r+0x104>)
 800c874:	410a      	asrs	r2, r1
 800c876:	07d6      	lsls	r6, r2, #31
 800c878:	d427      	bmi.n	800c8ca <__sflush_r+0xb2>
 800c87a:	2200      	movs	r2, #0
 800c87c:	04d9      	lsls	r1, r3, #19
 800c87e:	6062      	str	r2, [r4, #4]
 800c880:	6922      	ldr	r2, [r4, #16]
 800c882:	6022      	str	r2, [r4, #0]
 800c884:	d504      	bpl.n	800c890 <__sflush_r+0x78>
 800c886:	1c42      	adds	r2, r0, #1
 800c888:	d101      	bne.n	800c88e <__sflush_r+0x76>
 800c88a:	682b      	ldr	r3, [r5, #0]
 800c88c:	b903      	cbnz	r3, 800c890 <__sflush_r+0x78>
 800c88e:	6560      	str	r0, [r4, #84]	@ 0x54
 800c890:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c892:	602f      	str	r7, [r5, #0]
 800c894:	b1b9      	cbz	r1, 800c8c6 <__sflush_r+0xae>
 800c896:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c89a:	4299      	cmp	r1, r3
 800c89c:	d002      	beq.n	800c8a4 <__sflush_r+0x8c>
 800c89e:	4628      	mov	r0, r5
 800c8a0:	f7ff fa96 	bl	800bdd0 <_free_r>
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	6363      	str	r3, [r4, #52]	@ 0x34
 800c8a8:	e00d      	b.n	800c8c6 <__sflush_r+0xae>
 800c8aa:	2301      	movs	r3, #1
 800c8ac:	4628      	mov	r0, r5
 800c8ae:	47b0      	blx	r6
 800c8b0:	4602      	mov	r2, r0
 800c8b2:	1c50      	adds	r0, r2, #1
 800c8b4:	d1c9      	bne.n	800c84a <__sflush_r+0x32>
 800c8b6:	682b      	ldr	r3, [r5, #0]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d0c6      	beq.n	800c84a <__sflush_r+0x32>
 800c8bc:	2b1d      	cmp	r3, #29
 800c8be:	d001      	beq.n	800c8c4 <__sflush_r+0xac>
 800c8c0:	2b16      	cmp	r3, #22
 800c8c2:	d11d      	bne.n	800c900 <__sflush_r+0xe8>
 800c8c4:	602f      	str	r7, [r5, #0]
 800c8c6:	2000      	movs	r0, #0
 800c8c8:	e021      	b.n	800c90e <__sflush_r+0xf6>
 800c8ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c8ce:	b21b      	sxth	r3, r3
 800c8d0:	e01a      	b.n	800c908 <__sflush_r+0xf0>
 800c8d2:	690f      	ldr	r7, [r1, #16]
 800c8d4:	2f00      	cmp	r7, #0
 800c8d6:	d0f6      	beq.n	800c8c6 <__sflush_r+0xae>
 800c8d8:	0793      	lsls	r3, r2, #30
 800c8da:	680e      	ldr	r6, [r1, #0]
 800c8dc:	600f      	str	r7, [r1, #0]
 800c8de:	bf0c      	ite	eq
 800c8e0:	694b      	ldreq	r3, [r1, #20]
 800c8e2:	2300      	movne	r3, #0
 800c8e4:	eba6 0807 	sub.w	r8, r6, r7
 800c8e8:	608b      	str	r3, [r1, #8]
 800c8ea:	f1b8 0f00 	cmp.w	r8, #0
 800c8ee:	ddea      	ble.n	800c8c6 <__sflush_r+0xae>
 800c8f0:	4643      	mov	r3, r8
 800c8f2:	463a      	mov	r2, r7
 800c8f4:	6a21      	ldr	r1, [r4, #32]
 800c8f6:	4628      	mov	r0, r5
 800c8f8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c8fa:	47b0      	blx	r6
 800c8fc:	2800      	cmp	r0, #0
 800c8fe:	dc08      	bgt.n	800c912 <__sflush_r+0xfa>
 800c900:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c904:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c908:	f04f 30ff 	mov.w	r0, #4294967295
 800c90c:	81a3      	strh	r3, [r4, #12]
 800c90e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c912:	4407      	add	r7, r0
 800c914:	eba8 0800 	sub.w	r8, r8, r0
 800c918:	e7e7      	b.n	800c8ea <__sflush_r+0xd2>
 800c91a:	bf00      	nop
 800c91c:	dfbffffe 	.word	0xdfbffffe

0800c920 <_fflush_r>:
 800c920:	b538      	push	{r3, r4, r5, lr}
 800c922:	690b      	ldr	r3, [r1, #16]
 800c924:	4605      	mov	r5, r0
 800c926:	460c      	mov	r4, r1
 800c928:	b913      	cbnz	r3, 800c930 <_fflush_r+0x10>
 800c92a:	2500      	movs	r5, #0
 800c92c:	4628      	mov	r0, r5
 800c92e:	bd38      	pop	{r3, r4, r5, pc}
 800c930:	b118      	cbz	r0, 800c93a <_fflush_r+0x1a>
 800c932:	6a03      	ldr	r3, [r0, #32]
 800c934:	b90b      	cbnz	r3, 800c93a <_fflush_r+0x1a>
 800c936:	f7ff f91b 	bl	800bb70 <__sinit>
 800c93a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d0f3      	beq.n	800c92a <_fflush_r+0xa>
 800c942:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c944:	07d0      	lsls	r0, r2, #31
 800c946:	d404      	bmi.n	800c952 <_fflush_r+0x32>
 800c948:	0599      	lsls	r1, r3, #22
 800c94a:	d402      	bmi.n	800c952 <_fflush_r+0x32>
 800c94c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c94e:	f7ff fa3c 	bl	800bdca <__retarget_lock_acquire_recursive>
 800c952:	4628      	mov	r0, r5
 800c954:	4621      	mov	r1, r4
 800c956:	f7ff ff5f 	bl	800c818 <__sflush_r>
 800c95a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c95c:	4605      	mov	r5, r0
 800c95e:	07da      	lsls	r2, r3, #31
 800c960:	d4e4      	bmi.n	800c92c <_fflush_r+0xc>
 800c962:	89a3      	ldrh	r3, [r4, #12]
 800c964:	059b      	lsls	r3, r3, #22
 800c966:	d4e1      	bmi.n	800c92c <_fflush_r+0xc>
 800c968:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c96a:	f7ff fa2f 	bl	800bdcc <__retarget_lock_release_recursive>
 800c96e:	e7dd      	b.n	800c92c <_fflush_r+0xc>

0800c970 <_putc_r>:
 800c970:	b570      	push	{r4, r5, r6, lr}
 800c972:	460d      	mov	r5, r1
 800c974:	4614      	mov	r4, r2
 800c976:	4606      	mov	r6, r0
 800c978:	b118      	cbz	r0, 800c982 <_putc_r+0x12>
 800c97a:	6a03      	ldr	r3, [r0, #32]
 800c97c:	b90b      	cbnz	r3, 800c982 <_putc_r+0x12>
 800c97e:	f7ff f8f7 	bl	800bb70 <__sinit>
 800c982:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c984:	07d8      	lsls	r0, r3, #31
 800c986:	d405      	bmi.n	800c994 <_putc_r+0x24>
 800c988:	89a3      	ldrh	r3, [r4, #12]
 800c98a:	0599      	lsls	r1, r3, #22
 800c98c:	d402      	bmi.n	800c994 <_putc_r+0x24>
 800c98e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c990:	f7ff fa1b 	bl	800bdca <__retarget_lock_acquire_recursive>
 800c994:	68a3      	ldr	r3, [r4, #8]
 800c996:	3b01      	subs	r3, #1
 800c998:	2b00      	cmp	r3, #0
 800c99a:	60a3      	str	r3, [r4, #8]
 800c99c:	da05      	bge.n	800c9aa <_putc_r+0x3a>
 800c99e:	69a2      	ldr	r2, [r4, #24]
 800c9a0:	4293      	cmp	r3, r2
 800c9a2:	db12      	blt.n	800c9ca <_putc_r+0x5a>
 800c9a4:	b2eb      	uxtb	r3, r5
 800c9a6:	2b0a      	cmp	r3, #10
 800c9a8:	d00f      	beq.n	800c9ca <_putc_r+0x5a>
 800c9aa:	6823      	ldr	r3, [r4, #0]
 800c9ac:	1c5a      	adds	r2, r3, #1
 800c9ae:	6022      	str	r2, [r4, #0]
 800c9b0:	701d      	strb	r5, [r3, #0]
 800c9b2:	b2ed      	uxtb	r5, r5
 800c9b4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c9b6:	07da      	lsls	r2, r3, #31
 800c9b8:	d405      	bmi.n	800c9c6 <_putc_r+0x56>
 800c9ba:	89a3      	ldrh	r3, [r4, #12]
 800c9bc:	059b      	lsls	r3, r3, #22
 800c9be:	d402      	bmi.n	800c9c6 <_putc_r+0x56>
 800c9c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c9c2:	f7ff fa03 	bl	800bdcc <__retarget_lock_release_recursive>
 800c9c6:	4628      	mov	r0, r5
 800c9c8:	bd70      	pop	{r4, r5, r6, pc}
 800c9ca:	4629      	mov	r1, r5
 800c9cc:	4622      	mov	r2, r4
 800c9ce:	4630      	mov	r0, r6
 800c9d0:	f000 f802 	bl	800c9d8 <__swbuf_r>
 800c9d4:	4605      	mov	r5, r0
 800c9d6:	e7ed      	b.n	800c9b4 <_putc_r+0x44>

0800c9d8 <__swbuf_r>:
 800c9d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9da:	460e      	mov	r6, r1
 800c9dc:	4614      	mov	r4, r2
 800c9de:	4605      	mov	r5, r0
 800c9e0:	b118      	cbz	r0, 800c9ea <__swbuf_r+0x12>
 800c9e2:	6a03      	ldr	r3, [r0, #32]
 800c9e4:	b90b      	cbnz	r3, 800c9ea <__swbuf_r+0x12>
 800c9e6:	f7ff f8c3 	bl	800bb70 <__sinit>
 800c9ea:	69a3      	ldr	r3, [r4, #24]
 800c9ec:	60a3      	str	r3, [r4, #8]
 800c9ee:	89a3      	ldrh	r3, [r4, #12]
 800c9f0:	071a      	lsls	r2, r3, #28
 800c9f2:	d501      	bpl.n	800c9f8 <__swbuf_r+0x20>
 800c9f4:	6923      	ldr	r3, [r4, #16]
 800c9f6:	b943      	cbnz	r3, 800ca0a <__swbuf_r+0x32>
 800c9f8:	4621      	mov	r1, r4
 800c9fa:	4628      	mov	r0, r5
 800c9fc:	f000 f82a 	bl	800ca54 <__swsetup_r>
 800ca00:	b118      	cbz	r0, 800ca0a <__swbuf_r+0x32>
 800ca02:	f04f 37ff 	mov.w	r7, #4294967295
 800ca06:	4638      	mov	r0, r7
 800ca08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca0a:	6823      	ldr	r3, [r4, #0]
 800ca0c:	b2f6      	uxtb	r6, r6
 800ca0e:	6922      	ldr	r2, [r4, #16]
 800ca10:	4637      	mov	r7, r6
 800ca12:	1a98      	subs	r0, r3, r2
 800ca14:	6963      	ldr	r3, [r4, #20]
 800ca16:	4283      	cmp	r3, r0
 800ca18:	dc05      	bgt.n	800ca26 <__swbuf_r+0x4e>
 800ca1a:	4621      	mov	r1, r4
 800ca1c:	4628      	mov	r0, r5
 800ca1e:	f7ff ff7f 	bl	800c920 <_fflush_r>
 800ca22:	2800      	cmp	r0, #0
 800ca24:	d1ed      	bne.n	800ca02 <__swbuf_r+0x2a>
 800ca26:	68a3      	ldr	r3, [r4, #8]
 800ca28:	3b01      	subs	r3, #1
 800ca2a:	60a3      	str	r3, [r4, #8]
 800ca2c:	6823      	ldr	r3, [r4, #0]
 800ca2e:	1c5a      	adds	r2, r3, #1
 800ca30:	6022      	str	r2, [r4, #0]
 800ca32:	701e      	strb	r6, [r3, #0]
 800ca34:	1c43      	adds	r3, r0, #1
 800ca36:	6962      	ldr	r2, [r4, #20]
 800ca38:	429a      	cmp	r2, r3
 800ca3a:	d004      	beq.n	800ca46 <__swbuf_r+0x6e>
 800ca3c:	89a3      	ldrh	r3, [r4, #12]
 800ca3e:	07db      	lsls	r3, r3, #31
 800ca40:	d5e1      	bpl.n	800ca06 <__swbuf_r+0x2e>
 800ca42:	2e0a      	cmp	r6, #10
 800ca44:	d1df      	bne.n	800ca06 <__swbuf_r+0x2e>
 800ca46:	4621      	mov	r1, r4
 800ca48:	4628      	mov	r0, r5
 800ca4a:	f7ff ff69 	bl	800c920 <_fflush_r>
 800ca4e:	2800      	cmp	r0, #0
 800ca50:	d0d9      	beq.n	800ca06 <__swbuf_r+0x2e>
 800ca52:	e7d6      	b.n	800ca02 <__swbuf_r+0x2a>

0800ca54 <__swsetup_r>:
 800ca54:	b538      	push	{r3, r4, r5, lr}
 800ca56:	4b29      	ldr	r3, [pc, #164]	@ (800cafc <__swsetup_r+0xa8>)
 800ca58:	4605      	mov	r5, r0
 800ca5a:	460c      	mov	r4, r1
 800ca5c:	6818      	ldr	r0, [r3, #0]
 800ca5e:	b118      	cbz	r0, 800ca68 <__swsetup_r+0x14>
 800ca60:	6a03      	ldr	r3, [r0, #32]
 800ca62:	b90b      	cbnz	r3, 800ca68 <__swsetup_r+0x14>
 800ca64:	f7ff f884 	bl	800bb70 <__sinit>
 800ca68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca6c:	0719      	lsls	r1, r3, #28
 800ca6e:	d422      	bmi.n	800cab6 <__swsetup_r+0x62>
 800ca70:	06da      	lsls	r2, r3, #27
 800ca72:	d407      	bmi.n	800ca84 <__swsetup_r+0x30>
 800ca74:	2209      	movs	r2, #9
 800ca76:	602a      	str	r2, [r5, #0]
 800ca78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ca7c:	f04f 30ff 	mov.w	r0, #4294967295
 800ca80:	81a3      	strh	r3, [r4, #12]
 800ca82:	e033      	b.n	800caec <__swsetup_r+0x98>
 800ca84:	0758      	lsls	r0, r3, #29
 800ca86:	d512      	bpl.n	800caae <__swsetup_r+0x5a>
 800ca88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ca8a:	b141      	cbz	r1, 800ca9e <__swsetup_r+0x4a>
 800ca8c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ca90:	4299      	cmp	r1, r3
 800ca92:	d002      	beq.n	800ca9a <__swsetup_r+0x46>
 800ca94:	4628      	mov	r0, r5
 800ca96:	f7ff f99b 	bl	800bdd0 <_free_r>
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	6363      	str	r3, [r4, #52]	@ 0x34
 800ca9e:	89a3      	ldrh	r3, [r4, #12]
 800caa0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800caa4:	81a3      	strh	r3, [r4, #12]
 800caa6:	2300      	movs	r3, #0
 800caa8:	6063      	str	r3, [r4, #4]
 800caaa:	6923      	ldr	r3, [r4, #16]
 800caac:	6023      	str	r3, [r4, #0]
 800caae:	89a3      	ldrh	r3, [r4, #12]
 800cab0:	f043 0308 	orr.w	r3, r3, #8
 800cab4:	81a3      	strh	r3, [r4, #12]
 800cab6:	6923      	ldr	r3, [r4, #16]
 800cab8:	b94b      	cbnz	r3, 800cace <__swsetup_r+0x7a>
 800caba:	89a3      	ldrh	r3, [r4, #12]
 800cabc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cac0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cac4:	d003      	beq.n	800cace <__swsetup_r+0x7a>
 800cac6:	4621      	mov	r1, r4
 800cac8:	4628      	mov	r0, r5
 800caca:	f000 f8b1 	bl	800cc30 <__smakebuf_r>
 800cace:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cad2:	f013 0201 	ands.w	r2, r3, #1
 800cad6:	d00a      	beq.n	800caee <__swsetup_r+0x9a>
 800cad8:	2200      	movs	r2, #0
 800cada:	60a2      	str	r2, [r4, #8]
 800cadc:	6962      	ldr	r2, [r4, #20]
 800cade:	4252      	negs	r2, r2
 800cae0:	61a2      	str	r2, [r4, #24]
 800cae2:	6922      	ldr	r2, [r4, #16]
 800cae4:	b942      	cbnz	r2, 800caf8 <__swsetup_r+0xa4>
 800cae6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800caea:	d1c5      	bne.n	800ca78 <__swsetup_r+0x24>
 800caec:	bd38      	pop	{r3, r4, r5, pc}
 800caee:	0799      	lsls	r1, r3, #30
 800caf0:	bf58      	it	pl
 800caf2:	6962      	ldrpl	r2, [r4, #20]
 800caf4:	60a2      	str	r2, [r4, #8]
 800caf6:	e7f4      	b.n	800cae2 <__swsetup_r+0x8e>
 800caf8:	2000      	movs	r0, #0
 800cafa:	e7f7      	b.n	800caec <__swsetup_r+0x98>
 800cafc:	20000184 	.word	0x20000184

0800cb00 <memmove>:
 800cb00:	4288      	cmp	r0, r1
 800cb02:	b510      	push	{r4, lr}
 800cb04:	eb01 0402 	add.w	r4, r1, r2
 800cb08:	d902      	bls.n	800cb10 <memmove+0x10>
 800cb0a:	4284      	cmp	r4, r0
 800cb0c:	4623      	mov	r3, r4
 800cb0e:	d807      	bhi.n	800cb20 <memmove+0x20>
 800cb10:	1e43      	subs	r3, r0, #1
 800cb12:	42a1      	cmp	r1, r4
 800cb14:	d008      	beq.n	800cb28 <memmove+0x28>
 800cb16:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cb1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cb1e:	e7f8      	b.n	800cb12 <memmove+0x12>
 800cb20:	4402      	add	r2, r0
 800cb22:	4601      	mov	r1, r0
 800cb24:	428a      	cmp	r2, r1
 800cb26:	d100      	bne.n	800cb2a <memmove+0x2a>
 800cb28:	bd10      	pop	{r4, pc}
 800cb2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cb2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cb32:	e7f7      	b.n	800cb24 <memmove+0x24>

0800cb34 <_sbrk_r>:
 800cb34:	b538      	push	{r3, r4, r5, lr}
 800cb36:	2300      	movs	r3, #0
 800cb38:	4d05      	ldr	r5, [pc, #20]	@ (800cb50 <_sbrk_r+0x1c>)
 800cb3a:	4604      	mov	r4, r0
 800cb3c:	4608      	mov	r0, r1
 800cb3e:	602b      	str	r3, [r5, #0]
 800cb40:	f7f3 ffb2 	bl	8000aa8 <_sbrk>
 800cb44:	1c43      	adds	r3, r0, #1
 800cb46:	d102      	bne.n	800cb4e <_sbrk_r+0x1a>
 800cb48:	682b      	ldr	r3, [r5, #0]
 800cb4a:	b103      	cbz	r3, 800cb4e <_sbrk_r+0x1a>
 800cb4c:	6023      	str	r3, [r4, #0]
 800cb4e:	bd38      	pop	{r3, r4, r5, pc}
 800cb50:	20000e0c 	.word	0x20000e0c

0800cb54 <memchr>:
 800cb54:	b2c9      	uxtb	r1, r1
 800cb56:	4603      	mov	r3, r0
 800cb58:	4402      	add	r2, r0
 800cb5a:	b510      	push	{r4, lr}
 800cb5c:	4293      	cmp	r3, r2
 800cb5e:	4618      	mov	r0, r3
 800cb60:	d101      	bne.n	800cb66 <memchr+0x12>
 800cb62:	2000      	movs	r0, #0
 800cb64:	e003      	b.n	800cb6e <memchr+0x1a>
 800cb66:	7804      	ldrb	r4, [r0, #0]
 800cb68:	3301      	adds	r3, #1
 800cb6a:	428c      	cmp	r4, r1
 800cb6c:	d1f6      	bne.n	800cb5c <memchr+0x8>
 800cb6e:	bd10      	pop	{r4, pc}

0800cb70 <memcpy>:
 800cb70:	440a      	add	r2, r1
 800cb72:	1e43      	subs	r3, r0, #1
 800cb74:	4291      	cmp	r1, r2
 800cb76:	d100      	bne.n	800cb7a <memcpy+0xa>
 800cb78:	4770      	bx	lr
 800cb7a:	b510      	push	{r4, lr}
 800cb7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cb80:	4291      	cmp	r1, r2
 800cb82:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cb86:	d1f9      	bne.n	800cb7c <memcpy+0xc>
 800cb88:	bd10      	pop	{r4, pc}

0800cb8a <_realloc_r>:
 800cb8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb8e:	4680      	mov	r8, r0
 800cb90:	4615      	mov	r5, r2
 800cb92:	460c      	mov	r4, r1
 800cb94:	b921      	cbnz	r1, 800cba0 <_realloc_r+0x16>
 800cb96:	4611      	mov	r1, r2
 800cb98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cb9c:	f7ff b984 	b.w	800bea8 <_malloc_r>
 800cba0:	b92a      	cbnz	r2, 800cbae <_realloc_r+0x24>
 800cba2:	f7ff f915 	bl	800bdd0 <_free_r>
 800cba6:	2400      	movs	r4, #0
 800cba8:	4620      	mov	r0, r4
 800cbaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbae:	f000 f89d 	bl	800ccec <_malloc_usable_size_r>
 800cbb2:	4285      	cmp	r5, r0
 800cbb4:	4606      	mov	r6, r0
 800cbb6:	d802      	bhi.n	800cbbe <_realloc_r+0x34>
 800cbb8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800cbbc:	d8f4      	bhi.n	800cba8 <_realloc_r+0x1e>
 800cbbe:	4629      	mov	r1, r5
 800cbc0:	4640      	mov	r0, r8
 800cbc2:	f7ff f971 	bl	800bea8 <_malloc_r>
 800cbc6:	4607      	mov	r7, r0
 800cbc8:	2800      	cmp	r0, #0
 800cbca:	d0ec      	beq.n	800cba6 <_realloc_r+0x1c>
 800cbcc:	42b5      	cmp	r5, r6
 800cbce:	462a      	mov	r2, r5
 800cbd0:	4621      	mov	r1, r4
 800cbd2:	bf28      	it	cs
 800cbd4:	4632      	movcs	r2, r6
 800cbd6:	f7ff ffcb 	bl	800cb70 <memcpy>
 800cbda:	4621      	mov	r1, r4
 800cbdc:	4640      	mov	r0, r8
 800cbde:	463c      	mov	r4, r7
 800cbe0:	f7ff f8f6 	bl	800bdd0 <_free_r>
 800cbe4:	e7e0      	b.n	800cba8 <_realloc_r+0x1e>

0800cbe6 <__swhatbuf_r>:
 800cbe6:	b570      	push	{r4, r5, r6, lr}
 800cbe8:	460c      	mov	r4, r1
 800cbea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbee:	b096      	sub	sp, #88	@ 0x58
 800cbf0:	4615      	mov	r5, r2
 800cbf2:	2900      	cmp	r1, #0
 800cbf4:	461e      	mov	r6, r3
 800cbf6:	da0c      	bge.n	800cc12 <__swhatbuf_r+0x2c>
 800cbf8:	89a3      	ldrh	r3, [r4, #12]
 800cbfa:	2100      	movs	r1, #0
 800cbfc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cc00:	bf14      	ite	ne
 800cc02:	2340      	movne	r3, #64	@ 0x40
 800cc04:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cc08:	2000      	movs	r0, #0
 800cc0a:	6031      	str	r1, [r6, #0]
 800cc0c:	602b      	str	r3, [r5, #0]
 800cc0e:	b016      	add	sp, #88	@ 0x58
 800cc10:	bd70      	pop	{r4, r5, r6, pc}
 800cc12:	466a      	mov	r2, sp
 800cc14:	f000 f848 	bl	800cca8 <_fstat_r>
 800cc18:	2800      	cmp	r0, #0
 800cc1a:	dbed      	blt.n	800cbf8 <__swhatbuf_r+0x12>
 800cc1c:	9901      	ldr	r1, [sp, #4]
 800cc1e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cc22:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cc26:	4259      	negs	r1, r3
 800cc28:	4159      	adcs	r1, r3
 800cc2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cc2e:	e7eb      	b.n	800cc08 <__swhatbuf_r+0x22>

0800cc30 <__smakebuf_r>:
 800cc30:	898b      	ldrh	r3, [r1, #12]
 800cc32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cc34:	079d      	lsls	r5, r3, #30
 800cc36:	4606      	mov	r6, r0
 800cc38:	460c      	mov	r4, r1
 800cc3a:	d507      	bpl.n	800cc4c <__smakebuf_r+0x1c>
 800cc3c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cc40:	6023      	str	r3, [r4, #0]
 800cc42:	6123      	str	r3, [r4, #16]
 800cc44:	2301      	movs	r3, #1
 800cc46:	6163      	str	r3, [r4, #20]
 800cc48:	b003      	add	sp, #12
 800cc4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc4c:	ab01      	add	r3, sp, #4
 800cc4e:	466a      	mov	r2, sp
 800cc50:	f7ff ffc9 	bl	800cbe6 <__swhatbuf_r>
 800cc54:	9f00      	ldr	r7, [sp, #0]
 800cc56:	4605      	mov	r5, r0
 800cc58:	4630      	mov	r0, r6
 800cc5a:	4639      	mov	r1, r7
 800cc5c:	f7ff f924 	bl	800bea8 <_malloc_r>
 800cc60:	b948      	cbnz	r0, 800cc76 <__smakebuf_r+0x46>
 800cc62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc66:	059a      	lsls	r2, r3, #22
 800cc68:	d4ee      	bmi.n	800cc48 <__smakebuf_r+0x18>
 800cc6a:	f023 0303 	bic.w	r3, r3, #3
 800cc6e:	f043 0302 	orr.w	r3, r3, #2
 800cc72:	81a3      	strh	r3, [r4, #12]
 800cc74:	e7e2      	b.n	800cc3c <__smakebuf_r+0xc>
 800cc76:	89a3      	ldrh	r3, [r4, #12]
 800cc78:	6020      	str	r0, [r4, #0]
 800cc7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc7e:	81a3      	strh	r3, [r4, #12]
 800cc80:	9b01      	ldr	r3, [sp, #4]
 800cc82:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cc86:	b15b      	cbz	r3, 800cca0 <__smakebuf_r+0x70>
 800cc88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc8c:	4630      	mov	r0, r6
 800cc8e:	f000 f81d 	bl	800cccc <_isatty_r>
 800cc92:	b128      	cbz	r0, 800cca0 <__smakebuf_r+0x70>
 800cc94:	89a3      	ldrh	r3, [r4, #12]
 800cc96:	f023 0303 	bic.w	r3, r3, #3
 800cc9a:	f043 0301 	orr.w	r3, r3, #1
 800cc9e:	81a3      	strh	r3, [r4, #12]
 800cca0:	89a3      	ldrh	r3, [r4, #12]
 800cca2:	431d      	orrs	r5, r3
 800cca4:	81a5      	strh	r5, [r4, #12]
 800cca6:	e7cf      	b.n	800cc48 <__smakebuf_r+0x18>

0800cca8 <_fstat_r>:
 800cca8:	b538      	push	{r3, r4, r5, lr}
 800ccaa:	2300      	movs	r3, #0
 800ccac:	4d06      	ldr	r5, [pc, #24]	@ (800ccc8 <_fstat_r+0x20>)
 800ccae:	4604      	mov	r4, r0
 800ccb0:	4608      	mov	r0, r1
 800ccb2:	4611      	mov	r1, r2
 800ccb4:	602b      	str	r3, [r5, #0]
 800ccb6:	f7f3 fece 	bl	8000a56 <_fstat>
 800ccba:	1c43      	adds	r3, r0, #1
 800ccbc:	d102      	bne.n	800ccc4 <_fstat_r+0x1c>
 800ccbe:	682b      	ldr	r3, [r5, #0]
 800ccc0:	b103      	cbz	r3, 800ccc4 <_fstat_r+0x1c>
 800ccc2:	6023      	str	r3, [r4, #0]
 800ccc4:	bd38      	pop	{r3, r4, r5, pc}
 800ccc6:	bf00      	nop
 800ccc8:	20000e0c 	.word	0x20000e0c

0800cccc <_isatty_r>:
 800cccc:	b538      	push	{r3, r4, r5, lr}
 800ccce:	2300      	movs	r3, #0
 800ccd0:	4d05      	ldr	r5, [pc, #20]	@ (800cce8 <_isatty_r+0x1c>)
 800ccd2:	4604      	mov	r4, r0
 800ccd4:	4608      	mov	r0, r1
 800ccd6:	602b      	str	r3, [r5, #0]
 800ccd8:	f7f3 fecd 	bl	8000a76 <_isatty>
 800ccdc:	1c43      	adds	r3, r0, #1
 800ccde:	d102      	bne.n	800cce6 <_isatty_r+0x1a>
 800cce0:	682b      	ldr	r3, [r5, #0]
 800cce2:	b103      	cbz	r3, 800cce6 <_isatty_r+0x1a>
 800cce4:	6023      	str	r3, [r4, #0]
 800cce6:	bd38      	pop	{r3, r4, r5, pc}
 800cce8:	20000e0c 	.word	0x20000e0c

0800ccec <_malloc_usable_size_r>:
 800ccec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ccf0:	1f18      	subs	r0, r3, #4
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	bfbc      	itt	lt
 800ccf6:	580b      	ldrlt	r3, [r1, r0]
 800ccf8:	18c0      	addlt	r0, r0, r3
 800ccfa:	4770      	bx	lr

0800ccfc <_init>:
 800ccfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccfe:	bf00      	nop
 800cd00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd02:	bc08      	pop	{r3}
 800cd04:	469e      	mov	lr, r3
 800cd06:	4770      	bx	lr

0800cd08 <_fini>:
 800cd08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd0a:	bf00      	nop
 800cd0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd0e:	bc08      	pop	{r3}
 800cd10:	469e      	mov	lr, r3
 800cd12:	4770      	bx	lr
