
rhipoff-main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000254  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c3ac  08000254  08000254  00001254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  0800c600  0800c600  0000d600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c768  0800c768  0000e1ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800c768  0800c768  0000e1ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c768  0800c768  0000e1ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c768  0800c768  0000d768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c76c  0800c76c  0000d76c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  0800c770  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b04  200001ec  0800c95c  0000e1ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000d00  20000cf0  0800c95c  0000ecf0  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000e1ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017a6e  00000000  00000000  0000e222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038f2  00000000  00000000  00025c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001228  00000000  00000000  00029588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d87  00000000  00000000  0002a7b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002df61  00000000  00000000  0002b537  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017608  00000000  00000000  00059498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00110763  00000000  00000000  00070aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00181203  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005214  00000000  00000000  00181248  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0018645c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000254 <__do_global_dtors_aux>:
 8000254:	b510      	push	{r4, lr}
 8000256:	4c05      	ldr	r4, [pc, #20]	@ (800026c <__do_global_dtors_aux+0x18>)
 8000258:	7823      	ldrb	r3, [r4, #0]
 800025a:	b933      	cbnz	r3, 800026a <__do_global_dtors_aux+0x16>
 800025c:	4b04      	ldr	r3, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x1c>)
 800025e:	b113      	cbz	r3, 8000266 <__do_global_dtors_aux+0x12>
 8000260:	4804      	ldr	r0, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x20>)
 8000262:	f3af 8000 	nop.w
 8000266:	2301      	movs	r3, #1
 8000268:	7023      	strb	r3, [r4, #0]
 800026a:	bd10      	pop	{r4, pc}
 800026c:	200001ec 	.word	0x200001ec
 8000270:	00000000 	.word	0x00000000
 8000274:	0800c5e8 	.word	0x0800c5e8

08000278 <frame_dummy>:
 8000278:	b508      	push	{r3, lr}
 800027a:	4b03      	ldr	r3, [pc, #12]	@ (8000288 <frame_dummy+0x10>)
 800027c:	b11b      	cbz	r3, 8000286 <frame_dummy+0xe>
 800027e:	4903      	ldr	r1, [pc, #12]	@ (800028c <frame_dummy+0x14>)
 8000280:	4803      	ldr	r0, [pc, #12]	@ (8000290 <frame_dummy+0x18>)
 8000282:	f3af 8000 	nop.w
 8000286:	bd08      	pop	{r3, pc}
 8000288:	00000000 	.word	0x00000000
 800028c:	200001f0 	.word	0x200001f0
 8000290:	0800c5e8 	.word	0x0800c5e8

08000294 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	hid_report_buffer[0] = 0;   /* Buttons â€“ first 3 bits [LSB] */
 8000298:	4b36      	ldr	r3, [pc, #216]	@ (8000374 <main+0xe0>)
 800029a:	2200      	movs	r2, #0
 800029c:	701a      	strb	r2, [r3, #0]
	hid_report_buffer[1] = 001; /* X axis 8 bits value signed */
 800029e:	4b35      	ldr	r3, [pc, #212]	@ (8000374 <main+0xe0>)
 80002a0:	2201      	movs	r2, #1
 80002a2:	705a      	strb	r2, [r3, #1]
	hid_report_buffer[2] = 0;   /* Y axis 8 bits value signed*/
 80002a4:	4b33      	ldr	r3, [pc, #204]	@ (8000374 <main+0xe0>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	709a      	strb	r2, [r3, #2]
	hid_report_buffer[3] = 0;   /* Wheel 8 bits value signed*/
 80002aa:	4b32      	ldr	r3, [pc, #200]	@ (8000374 <main+0xe0>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	70da      	strb	r2, [r3, #3]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002b0:	f000 fc92 	bl	8000bd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002b4:	f000 f87a 	bl	80003ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002b8:	f000 f966 	bl	8000588 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 80002bc:	f000 f8ec 	bl	8000498 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  /* Initialize the USB Device Library */
  if(USBD_Init(&hUsbDeviceFS, &Class_Desc, 0) != USBD_OK)
 80002c0:	2200      	movs	r2, #0
 80002c2:	492d      	ldr	r1, [pc, #180]	@ (8000378 <main+0xe4>)
 80002c4:	482d      	ldr	r0, [pc, #180]	@ (800037c <main+0xe8>)
 80002c6:	f009 fd29 	bl	8009d1c <USBD_Init>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d001      	beq.n	80002d4 <main+0x40>
  	Error_Handler();
 80002d0:	f000 fa30 	bl	8000734 <Error_Handler>
  /* Store HID Instance Class ID */
  HID_InstID = hUsbDeviceFS.classId;
 80002d4:	4b29      	ldr	r3, [pc, #164]	@ (800037c <main+0xe8>)
 80002d6:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80002da:	b2da      	uxtb	r2, r3
 80002dc:	4b28      	ldr	r3, [pc, #160]	@ (8000380 <main+0xec>)
 80002de:	701a      	strb	r2, [r3, #0]
  /* Register the HID Class */
  if(USBD_RegisterClassComposite(&hUsbDeviceFS, USBD_HID_CLASS, CLASS_TYPE_HID, &HID_EpAdd_Inst) != USBD_OK)
 80002e0:	4b28      	ldr	r3, [pc, #160]	@ (8000384 <main+0xf0>)
 80002e2:	2201      	movs	r2, #1
 80002e4:	4928      	ldr	r1, [pc, #160]	@ (8000388 <main+0xf4>)
 80002e6:	4825      	ldr	r0, [pc, #148]	@ (800037c <main+0xe8>)
 80002e8:	f009 fd76 	bl	8009dd8 <USBD_RegisterClassComposite>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d001      	beq.n	80002f6 <main+0x62>
  	Error_Handler();
 80002f2:	f000 fa1f 	bl	8000734 <Error_Handler>
  /* Store the HID Class */
  CDC_InstID = hUsbDeviceFS.classId;
 80002f6:	4b21      	ldr	r3, [pc, #132]	@ (800037c <main+0xe8>)
 80002f8:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80002fc:	b2da      	uxtb	r2, r3
 80002fe:	4b23      	ldr	r3, [pc, #140]	@ (800038c <main+0xf8>)
 8000300:	701a      	strb	r2, [r3, #0]
  /* Register CDC Class First Instance */
  if(USBD_RegisterClassComposite(&hUsbDeviceFS, USBD_CDC_CLASS, CLASS_TYPE_CDC, CDC_EpAdd_Inst) != USBD_OK)
 8000302:	4b23      	ldr	r3, [pc, #140]	@ (8000390 <main+0xfc>)
 8000304:	2202      	movs	r2, #2
 8000306:	4923      	ldr	r1, [pc, #140]	@ (8000394 <main+0x100>)
 8000308:	481c      	ldr	r0, [pc, #112]	@ (800037c <main+0xe8>)
 800030a:	f009 fd65 	bl	8009dd8 <USBD_RegisterClassComposite>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d001      	beq.n	8000318 <main+0x84>
  	Error_Handler();
 8000314:	f000 fa0e 	bl	8000734 <Error_Handler>
  /* Add CDC Interface Class */
  if (USBD_CMPSIT_SetClassID(&hUsbDeviceFS, CLASS_TYPE_CDC, 0) != 0xFF)
 8000318:	2200      	movs	r2, #0
 800031a:	2102      	movs	r1, #2
 800031c:	4817      	ldr	r0, [pc, #92]	@ (800037c <main+0xe8>)
 800031e:	f009 f887 	bl	8009430 <USBD_CMPSIT_SetClassID>
 8000322:	4603      	mov	r3, r0
 8000324:	2bff      	cmp	r3, #255	@ 0xff
 8000326:	d003      	beq.n	8000330 <main+0x9c>
  {
  	USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_CDC_Template_fops);
 8000328:	491b      	ldr	r1, [pc, #108]	@ (8000398 <main+0x104>)
 800032a:	4814      	ldr	r0, [pc, #80]	@ (800037c <main+0xe8>)
 800032c:	f008 f90a 	bl	8008544 <USBD_CDC_RegisterInterface>
  }
  USBD_Start(&hUsbDeviceFS);
 8000330:	4812      	ldr	r0, [pc, #72]	@ (800037c <main+0xe8>)
 8000332:	f009 fdb9 	bl	8009ea8 <USBD_Start>

  FDCAN_Config(); // need to set up the FD CAN peripheral with our parameters.
 8000336:	f000 f981 	bl	800063c <FDCAN_Config>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//  	if(HAL_GPIO_ReadPin(USER_BT_GPIO_Port, USER_BT_Pin) == GPIO_PIN_SET)
//  	{
  		USBD_HID_SendReport(&hUsbDeviceFS, rxData, 4, HID_InstID);
 800033a:	4b11      	ldr	r3, [pc, #68]	@ (8000380 <main+0xec>)
 800033c:	781b      	ldrb	r3, [r3, #0]
 800033e:	2204      	movs	r2, #4
 8000340:	4916      	ldr	r1, [pc, #88]	@ (800039c <main+0x108>)
 8000342:	480e      	ldr	r0, [pc, #56]	@ (800037c <main+0xe8>)
 8000344:	f009 fa8a 	bl	800985c <USBD_HID_SendReport>
  		USBD_CDC_TransmitPacket(&hUsbDeviceFS, CDC_InstID);
 8000348:	4b10      	ldr	r3, [pc, #64]	@ (800038c <main+0xf8>)
 800034a:	781b      	ldrb	r3, [r3, #0]
 800034c:	4619      	mov	r1, r3
 800034e:	480b      	ldr	r0, [pc, #44]	@ (800037c <main+0xe8>)
 8000350:	f008 f952 	bl	80085f8 <USBD_CDC_TransmitPacket>

  		if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &Tx_Header, txData) != HAL_OK)
 8000354:	4a12      	ldr	r2, [pc, #72]	@ (80003a0 <main+0x10c>)
 8000356:	4913      	ldr	r1, [pc, #76]	@ (80003a4 <main+0x110>)
 8000358:	4813      	ldr	r0, [pc, #76]	@ (80003a8 <main+0x114>)
 800035a:	f001 f8bc 	bl	80014d6 <HAL_FDCAN_AddMessageToTxFifoQ>
 800035e:	4603      	mov	r3, r0
 8000360:	2b00      	cmp	r3, #0
 8000362:	d001      	beq.n	8000368 <main+0xd4>
  		{
  			Error_Handler();
 8000364:	f000 f9e6 	bl	8000734 <Error_Handler>
  		}
  		HAL_Delay(1000);
 8000368:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800036c:	f000 fcf2 	bl	8000d54 <HAL_Delay>
  		USBD_HID_SendReport(&hUsbDeviceFS, rxData, 4, HID_InstID);
 8000370:	e7e3      	b.n	800033a <main+0xa6>
 8000372:	bf00      	nop
 8000374:	2000088c 	.word	0x2000088c
 8000378:	20000140 	.word	0x20000140
 800037c:	2000054c 	.word	0x2000054c
 8000380:	20000890 	.word	0x20000890
 8000384:	20000003 	.word	0x20000003
 8000388:	200000b0 	.word	0x200000b0
 800038c:	20000891 	.word	0x20000891
 8000390:	20000000 	.word	0x20000000
 8000394:	20000010 	.word	0x20000010
 8000398:	2000004c 	.word	0x2000004c
 800039c:	200008bc 	.word	0x200008bc
 80003a0:	200008e8 	.word	0x200008e8
 80003a4:	200008c4 	.word	0x200008c4
 80003a8:	20000208 	.word	0x20000208

080003ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b09c      	sub	sp, #112	@ 0x70
 80003b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003b2:	f107 0320 	add.w	r3, r7, #32
 80003b6:	2250      	movs	r2, #80	@ 0x50
 80003b8:	2100      	movs	r1, #0
 80003ba:	4618      	mov	r0, r3
 80003bc:	f00b fab5 	bl	800b92a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003c0:	f107 0308 	add.w	r3, r7, #8
 80003c4:	2200      	movs	r2, #0
 80003c6:	601a      	str	r2, [r3, #0]
 80003c8:	605a      	str	r2, [r3, #4]
 80003ca:	609a      	str	r2, [r3, #8]
 80003cc:	60da      	str	r2, [r3, #12]
 80003ce:	611a      	str	r2, [r3, #16]
 80003d0:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80003d2:	4b2f      	ldr	r3, [pc, #188]	@ (8000490 <SystemClock_Config+0xe4>)
 80003d4:	691b      	ldr	r3, [r3, #16]
 80003d6:	4a2e      	ldr	r2, [pc, #184]	@ (8000490 <SystemClock_Config+0xe4>)
 80003d8:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80003dc:	6113      	str	r3, [r2, #16]
 80003de:	4b2c      	ldr	r3, [pc, #176]	@ (8000490 <SystemClock_Config+0xe4>)
 80003e0:	691b      	ldr	r3, [r3, #16]
 80003e2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80003e6:	607b      	str	r3, [r7, #4]
 80003e8:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80003ea:	bf00      	nop
 80003ec:	4b28      	ldr	r3, [pc, #160]	@ (8000490 <SystemClock_Config+0xe4>)
 80003ee:	695b      	ldr	r3, [r3, #20]
 80003f0:	f003 0308 	and.w	r3, r3, #8
 80003f4:	2b08      	cmp	r3, #8
 80003f6:	d1f9      	bne.n	80003ec <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_CSI;
 80003f8:	2330      	movs	r3, #48	@ 0x30
 80003fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80003fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000400:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8000402:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000406:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 8000408:	2320      	movs	r3, #32
 800040a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800040c:	2302      	movs	r3, #2
 800040e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_CSI;
 8000410:	2302      	movs	r3, #2
 8000412:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000414:	2301      	movs	r3, #1
 8000416:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000418:	2378      	movs	r3, #120	@ 0x78
 800041a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800041c:	2302      	movs	r3, #2
 800041e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000420:	2302      	movs	r3, #2
 8000422:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000424:	2302      	movs	r3, #2
 8000426:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_2;
 8000428:	2308      	movs	r3, #8
 800042a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 800042c:	2300      	movs	r3, #0
 800042e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000430:	2300      	movs	r3, #0
 8000432:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000434:	f107 0320 	add.w	r3, r7, #32
 8000438:	4618      	mov	r0, r3
 800043a:	f003 fb29 	bl	8003a90 <HAL_RCC_OscConfig>
 800043e:	4603      	mov	r3, r0
 8000440:	2b00      	cmp	r3, #0
 8000442:	d001      	beq.n	8000448 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000444:	f000 f976 	bl	8000734 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000448:	231f      	movs	r3, #31
 800044a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800044c:	2303      	movs	r3, #3
 800044e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000450:	2300      	movs	r3, #0
 8000452:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000454:	2300      	movs	r3, #0
 8000456:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000458:	2300      	movs	r3, #0
 800045a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800045c:	2300      	movs	r3, #0
 800045e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000460:	f107 0308 	add.w	r3, r7, #8
 8000464:	2105      	movs	r1, #5
 8000466:	4618      	mov	r0, r3
 8000468:	f003 ff4a 	bl	8004300 <HAL_RCC_ClockConfig>
 800046c:	4603      	mov	r3, r0
 800046e:	2b00      	cmp	r3, #0
 8000470:	d001      	beq.n	8000476 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000472:	f000 f95f 	bl	8000734 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 8000476:	4b07      	ldr	r3, [pc, #28]	@ (8000494 <SystemClock_Config+0xe8>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800047e:	4a05      	ldr	r2, [pc, #20]	@ (8000494 <SystemClock_Config+0xe8>)
 8000480:	f043 0320 	orr.w	r3, r3, #32
 8000484:	6013      	str	r3, [r2, #0]
}
 8000486:	bf00      	nop
 8000488:	3770      	adds	r7, #112	@ 0x70
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	44020800 	.word	0x44020800
 8000494:	40022000 	.word	0x40022000

08000498 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800049c:	4b1f      	ldr	r3, [pc, #124]	@ (800051c <MX_FDCAN1_Init+0x84>)
 800049e:	4a20      	ldr	r2, [pc, #128]	@ (8000520 <MX_FDCAN1_Init+0x88>)
 80004a0:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80004a2:	4b1e      	ldr	r3, [pc, #120]	@ (800051c <MX_FDCAN1_Init+0x84>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80004a8:	4b1c      	ldr	r3, [pc, #112]	@ (800051c <MX_FDCAN1_Init+0x84>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80004ae:	4b1b      	ldr	r3, [pc, #108]	@ (800051c <MX_FDCAN1_Init+0x84>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80004b4:	4b19      	ldr	r3, [pc, #100]	@ (800051c <MX_FDCAN1_Init+0x84>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80004ba:	4b18      	ldr	r3, [pc, #96]	@ (800051c <MX_FDCAN1_Init+0x84>)
 80004bc:	2200      	movs	r2, #0
 80004be:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80004c0:	4b16      	ldr	r3, [pc, #88]	@ (800051c <MX_FDCAN1_Init+0x84>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 15;
 80004c6:	4b15      	ldr	r3, [pc, #84]	@ (800051c <MX_FDCAN1_Init+0x84>)
 80004c8:	220f      	movs	r2, #15
 80004ca:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 2;
 80004cc:	4b13      	ldr	r3, [pc, #76]	@ (800051c <MX_FDCAN1_Init+0x84>)
 80004ce:	2202      	movs	r2, #2
 80004d0:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 80004d2:	4b12      	ldr	r3, [pc, #72]	@ (800051c <MX_FDCAN1_Init+0x84>)
 80004d4:	220d      	movs	r2, #13
 80004d6:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80004d8:	4b10      	ldr	r3, [pc, #64]	@ (800051c <MX_FDCAN1_Init+0x84>)
 80004da:	2202      	movs	r2, #2
 80004dc:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 15;
 80004de:	4b0f      	ldr	r3, [pc, #60]	@ (800051c <MX_FDCAN1_Init+0x84>)
 80004e0:	220f      	movs	r2, #15
 80004e2:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 2;
 80004e4:	4b0d      	ldr	r3, [pc, #52]	@ (800051c <MX_FDCAN1_Init+0x84>)
 80004e6:	2202      	movs	r2, #2
 80004e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 13;
 80004ea:	4b0c      	ldr	r3, [pc, #48]	@ (800051c <MX_FDCAN1_Init+0x84>)
 80004ec:	220d      	movs	r2, #13
 80004ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 80004f0:	4b0a      	ldr	r3, [pc, #40]	@ (800051c <MX_FDCAN1_Init+0x84>)
 80004f2:	2202      	movs	r2, #2
 80004f4:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 80004f6:	4b09      	ldr	r3, [pc, #36]	@ (800051c <MX_FDCAN1_Init+0x84>)
 80004f8:	2201      	movs	r2, #1
 80004fa:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80004fc:	4b07      	ldr	r3, [pc, #28]	@ (800051c <MX_FDCAN1_Init+0x84>)
 80004fe:	2200      	movs	r2, #0
 8000500:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000502:	4b06      	ldr	r3, [pc, #24]	@ (800051c <MX_FDCAN1_Init+0x84>)
 8000504:	2200      	movs	r2, #0
 8000506:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000508:	4804      	ldr	r0, [pc, #16]	@ (800051c <MX_FDCAN1_Init+0x84>)
 800050a:	f000 fdd7 	bl	80010bc <HAL_FDCAN_Init>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d001      	beq.n	8000518 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000514:	f000 f90e 	bl	8000734 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000518:	bf00      	nop
 800051a:	bd80      	pop	{r7, pc}
 800051c:	20000208 	.word	0x20000208
 8000520:	4000a400 	.word	0x4000a400

08000524 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
void MX_USB_PCD_Init(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 8000528:	4b15      	ldr	r3, [pc, #84]	@ (8000580 <MX_USB_PCD_Init+0x5c>)
 800052a:	4a16      	ldr	r2, [pc, #88]	@ (8000584 <MX_USB_PCD_Init+0x60>)
 800052c:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 800052e:	4b14      	ldr	r3, [pc, #80]	@ (8000580 <MX_USB_PCD_Init+0x5c>)
 8000530:	2208      	movs	r2, #8
 8000532:	711a      	strb	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 8000534:	4b12      	ldr	r3, [pc, #72]	@ (8000580 <MX_USB_PCD_Init+0x5c>)
 8000536:	2202      	movs	r2, #2
 8000538:	71da      	strb	r2, [r3, #7]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800053a:	4b11      	ldr	r3, [pc, #68]	@ (8000580 <MX_USB_PCD_Init+0x5c>)
 800053c:	2202      	movs	r2, #2
 800053e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 8000540:	4b0f      	ldr	r3, [pc, #60]	@ (8000580 <MX_USB_PCD_Init+0x5c>)
 8000542:	2200      	movs	r2, #0
 8000544:	729a      	strb	r2, [r3, #10]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 8000546:	4b0e      	ldr	r3, [pc, #56]	@ (8000580 <MX_USB_PCD_Init+0x5c>)
 8000548:	2200      	movs	r2, #0
 800054a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 800054c:	4b0c      	ldr	r3, [pc, #48]	@ (8000580 <MX_USB_PCD_Init+0x5c>)
 800054e:	2200      	movs	r2, #0
 8000550:	731a      	strb	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 8000552:	4b0b      	ldr	r3, [pc, #44]	@ (8000580 <MX_USB_PCD_Init+0x5c>)
 8000554:	2200      	movs	r2, #0
 8000556:	735a      	strb	r2, [r3, #13]
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 8000558:	4b09      	ldr	r3, [pc, #36]	@ (8000580 <MX_USB_PCD_Init+0x5c>)
 800055a:	2200      	movs	r2, #0
 800055c:	739a      	strb	r2, [r3, #14]
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 800055e:	4b08      	ldr	r3, [pc, #32]	@ (8000580 <MX_USB_PCD_Init+0x5c>)
 8000560:	2200      	movs	r2, #0
 8000562:	73da      	strb	r2, [r3, #15]
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 8000564:	4b06      	ldr	r3, [pc, #24]	@ (8000580 <MX_USB_PCD_Init+0x5c>)
 8000566:	2200      	movs	r2, #0
 8000568:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 800056a:	4805      	ldr	r0, [pc, #20]	@ (8000580 <MX_USB_PCD_Init+0x5c>)
 800056c:	f001 fe1f 	bl	80021ae <HAL_PCD_Init>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <MX_USB_PCD_Init+0x56>
  {
    Error_Handler();
 8000576:	f000 f8dd 	bl	8000734 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800057a:	bf00      	nop
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	2000026c 	.word	0x2000026c
 8000584:	40016000 	.word	0x40016000

08000588 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b088      	sub	sp, #32
 800058c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058e:	f107 030c 	add.w	r3, r7, #12
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	605a      	str	r2, [r3, #4]
 8000598:	609a      	str	r2, [r3, #8]
 800059a:	60da      	str	r2, [r3, #12]
 800059c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800059e:	4b24      	ldr	r3, [pc, #144]	@ (8000630 <MX_GPIO_Init+0xa8>)
 80005a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80005a4:	4a22      	ldr	r2, [pc, #136]	@ (8000630 <MX_GPIO_Init+0xa8>)
 80005a6:	f043 0301 	orr.w	r3, r3, #1
 80005aa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80005ae:	4b20      	ldr	r3, [pc, #128]	@ (8000630 <MX_GPIO_Init+0xa8>)
 80005b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80005b4:	f003 0301 	and.w	r3, r3, #1
 80005b8:	60bb      	str	r3, [r7, #8]
 80005ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005bc:	4b1c      	ldr	r3, [pc, #112]	@ (8000630 <MX_GPIO_Init+0xa8>)
 80005be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80005c2:	4a1b      	ldr	r2, [pc, #108]	@ (8000630 <MX_GPIO_Init+0xa8>)
 80005c4:	f043 0302 	orr.w	r3, r3, #2
 80005c8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80005cc:	4b18      	ldr	r3, [pc, #96]	@ (8000630 <MX_GPIO_Init+0xa8>)
 80005ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80005d2:	f003 0302 	and.w	r3, r3, #2
 80005d6:	607b      	str	r3, [r7, #4]
 80005d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80005da:	2200      	movs	r2, #0
 80005dc:	21ff      	movs	r1, #255	@ 0xff
 80005de:	4815      	ldr	r0, [pc, #84]	@ (8000634 <MX_GPIO_Init+0xac>)
 80005e0:	f001 fd6a 	bl	80020b8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80005e4:	2200      	movs	r2, #0
 80005e6:	210f      	movs	r1, #15
 80005e8:	4813      	ldr	r0, [pc, #76]	@ (8000638 <MX_GPIO_Init+0xb0>)
 80005ea:	f001 fd65 	bl	80020b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80005ee:	23ff      	movs	r3, #255	@ 0xff
 80005f0:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f2:	2301      	movs	r3, #1
 80005f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f6:	2300      	movs	r3, #0
 80005f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005fa:	2300      	movs	r3, #0
 80005fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005fe:	f107 030c 	add.w	r3, r7, #12
 8000602:	4619      	mov	r1, r3
 8000604:	480b      	ldr	r0, [pc, #44]	@ (8000634 <MX_GPIO_Init+0xac>)
 8000606:	f001 fc05 	bl	8001e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800060a:	230f      	movs	r3, #15
 800060c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800060e:	2301      	movs	r3, #1
 8000610:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000612:	2300      	movs	r3, #0
 8000614:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000616:	2300      	movs	r3, #0
 8000618:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800061a:	f107 030c 	add.w	r3, r7, #12
 800061e:	4619      	mov	r1, r3
 8000620:	4805      	ldr	r0, [pc, #20]	@ (8000638 <MX_GPIO_Init+0xb0>)
 8000622:	f001 fbf7 	bl	8001e14 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000626:	bf00      	nop
 8000628:	3720      	adds	r7, #32
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	44020c00 	.word	0x44020c00
 8000634:	42020000 	.word	0x42020000
 8000638:	42020400 	.word	0x42020400

0800063c <FDCAN_Config>:

/* USER CODE BEGIN 4 */
static void FDCAN_Config(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b088      	sub	sp, #32
 8000640:	af02      	add	r7, sp, #8
	FDCAN_FilterTypeDef filter;

	filter.IdType = FDCAN_STANDARD_ID;
 8000642:	2300      	movs	r3, #0
 8000644:	603b      	str	r3, [r7, #0]
	filter.FilterIndex = 0;
 8000646:	2300      	movs	r3, #0
 8000648:	607b      	str	r3, [r7, #4]
	filter.FilterType = FDCAN_FILTER_RANGE;
 800064a:	2300      	movs	r3, #0
 800064c:	60bb      	str	r3, [r7, #8]
	filter.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800064e:	2301      	movs	r3, #1
 8000650:	60fb      	str	r3, [r7, #12]
	filter.FilterID1 = 0x0;
 8000652:	2300      	movs	r3, #0
 8000654:	613b      	str	r3, [r7, #16]
	filter.FilterID2 = 0x7FF;
 8000656:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800065a:	617b      	str	r3, [r7, #20]

	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &filter) != HAL_OK)
 800065c:	463b      	mov	r3, r7
 800065e:	4619      	mov	r1, r3
 8000660:	4823      	ldr	r0, [pc, #140]	@ (80006f0 <FDCAN_Config+0xb4>)
 8000662:	f000 fe85 	bl	8001370 <HAL_FDCAN_ConfigFilter>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <FDCAN_Config+0x34>
	  {
	    Error_Handler();
 800066c:	f000 f862 	bl	8000734 <Error_Handler>
	  }

	if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 8000670:	2300      	movs	r3, #0
 8000672:	9300      	str	r3, [sp, #0]
 8000674:	2300      	movs	r3, #0
 8000676:	2202      	movs	r2, #2
 8000678:	2102      	movs	r1, #2
 800067a:	481d      	ldr	r0, [pc, #116]	@ (80006f0 <FDCAN_Config+0xb4>)
 800067c:	f000 fed2 	bl	8001424 <HAL_FDCAN_ConfigGlobalFilter>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <FDCAN_Config+0x4e>
	  {
	    Error_Handler();
 8000686:	f000 f855 	bl	8000734 <Error_Handler>
	  }

	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 800068a:	4819      	ldr	r0, [pc, #100]	@ (80006f0 <FDCAN_Config+0xb4>)
 800068c:	f000 fefb 	bl	8001486 <HAL_FDCAN_Start>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <FDCAN_Config+0x5e>
	  {
	    Error_Handler();
 8000696:	f000 f84d 	bl	8000734 <Error_Handler>
	  }

	  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 800069a:	2200      	movs	r2, #0
 800069c:	2101      	movs	r1, #1
 800069e:	4814      	ldr	r0, [pc, #80]	@ (80006f0 <FDCAN_Config+0xb4>)
 80006a0:	f001 f866 	bl	8001770 <HAL_FDCAN_ActivateNotification>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <FDCAN_Config+0x72>
	  {
	    Error_Handler();
 80006aa:	f000 f843 	bl	8000734 <Error_Handler>
	  }

	  Tx_Header.Identifier = 0x23D;
 80006ae:	4b11      	ldr	r3, [pc, #68]	@ (80006f4 <FDCAN_Config+0xb8>)
 80006b0:	f240 223d 	movw	r2, #573	@ 0x23d
 80006b4:	601a      	str	r2, [r3, #0]
	  Tx_Header.IdType = FDCAN_STANDARD_ID;
 80006b6:	4b0f      	ldr	r3, [pc, #60]	@ (80006f4 <FDCAN_Config+0xb8>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	605a      	str	r2, [r3, #4]
	  Tx_Header.TxFrameType = FDCAN_DATA_FRAME;
 80006bc:	4b0d      	ldr	r3, [pc, #52]	@ (80006f4 <FDCAN_Config+0xb8>)
 80006be:	2200      	movs	r2, #0
 80006c0:	609a      	str	r2, [r3, #8]
	  Tx_Header.DataLength = FDCAN_DLC_BYTES_4;
 80006c2:	4b0c      	ldr	r3, [pc, #48]	@ (80006f4 <FDCAN_Config+0xb8>)
 80006c4:	2204      	movs	r2, #4
 80006c6:	60da      	str	r2, [r3, #12]
	  Tx_Header.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80006c8:	4b0a      	ldr	r3, [pc, #40]	@ (80006f4 <FDCAN_Config+0xb8>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]
	  Tx_Header.BitRateSwitch = FDCAN_BRS_OFF;
 80006ce:	4b09      	ldr	r3, [pc, #36]	@ (80006f4 <FDCAN_Config+0xb8>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	615a      	str	r2, [r3, #20]
	  Tx_Header.FDFormat = FDCAN_CLASSIC_CAN;
 80006d4:	4b07      	ldr	r3, [pc, #28]	@ (80006f4 <FDCAN_Config+0xb8>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	619a      	str	r2, [r3, #24]
	  Tx_Header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80006da:	4b06      	ldr	r3, [pc, #24]	@ (80006f4 <FDCAN_Config+0xb8>)
 80006dc:	2200      	movs	r2, #0
 80006de:	61da      	str	r2, [r3, #28]
	  Tx_Header.MessageMarker = 0;
 80006e0:	4b04      	ldr	r3, [pc, #16]	@ (80006f4 <FDCAN_Config+0xb8>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	621a      	str	r2, [r3, #32]
}
 80006e6:	bf00      	nop
 80006e8:	3718      	adds	r7, #24
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	20000208 	.word	0x20000208
 80006f4:	200008c4 	.word	0x200008c4

080006f8 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
 8000700:	6039      	str	r1, [r7, #0]
	if (RxFifo0ITs == FDCAN_IT_RX_FIFO0_NEW_MESSAGE) // we have a new message!
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	2b01      	cmp	r3, #1
 8000706:	d10a      	bne.n	800071e <HAL_FDCAN_RxFifo0Callback+0x26>
	{
		if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &Rx_Header, rxData) != HAL_OK)
 8000708:	4b07      	ldr	r3, [pc, #28]	@ (8000728 <HAL_FDCAN_RxFifo0Callback+0x30>)
 800070a:	4a08      	ldr	r2, [pc, #32]	@ (800072c <HAL_FDCAN_RxFifo0Callback+0x34>)
 800070c:	2140      	movs	r1, #64	@ 0x40
 800070e:	4808      	ldr	r0, [pc, #32]	@ (8000730 <HAL_FDCAN_RxFifo0Callback+0x38>)
 8000710:	f000 ff26 	bl	8001560 <HAL_FDCAN_GetRxMessage>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <HAL_FDCAN_RxFifo0Callback+0x26>
		{
			Error_Handler();
 800071a:	f000 f80b 	bl	8000734 <Error_Handler>
		}
	}
}
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	200008bc 	.word	0x200008bc
 800072c:	20000894 	.word	0x20000894
 8000730:	20000208 	.word	0x20000208

08000734 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000738:	b672      	cpsid	i
}
 800073a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800073c:	bf00      	nop
 800073e:	e7fd      	b.n	800073c <Error_Handler+0x8>

08000740 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000744:	bf00      	nop
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
	...

08000750 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b0be      	sub	sp, #248	@ 0xf8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000758:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]
 8000766:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000768:	f107 0310 	add.w	r3, r7, #16
 800076c:	22d0      	movs	r2, #208	@ 0xd0
 800076e:	2100      	movs	r1, #0
 8000770:	4618      	mov	r0, r3
 8000772:	f00b f8da 	bl	800b92a <memset>
  if(hfdcan->Instance==FDCAN1)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4a2b      	ldr	r2, [pc, #172]	@ (8000828 <HAL_FDCAN_MspInit+0xd8>)
 800077c:	4293      	cmp	r3, r2
 800077e:	d14f      	bne.n	8000820 <HAL_FDCAN_MspInit+0xd0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000780:	f04f 0200 	mov.w	r2, #0
 8000784:	f04f 0304 	mov.w	r3, #4
 8000788:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL1Q;
 800078c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000790:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000794:	f107 0310 	add.w	r3, r7, #16
 8000798:	4618      	mov	r0, r3
 800079a:	f004 f8b1 	bl	8004900 <HAL_RCCEx_PeriphCLKConfig>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 80007a4:	f7ff ffc6 	bl	8000734 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80007a8:	4b20      	ldr	r3, [pc, #128]	@ (800082c <HAL_FDCAN_MspInit+0xdc>)
 80007aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80007ae:	4a1f      	ldr	r2, [pc, #124]	@ (800082c <HAL_FDCAN_MspInit+0xdc>)
 80007b0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80007b4:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 80007b8:	4b1c      	ldr	r3, [pc, #112]	@ (800082c <HAL_FDCAN_MspInit+0xdc>)
 80007ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80007be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80007c2:	60fb      	str	r3, [r7, #12]
 80007c4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c6:	4b19      	ldr	r3, [pc, #100]	@ (800082c <HAL_FDCAN_MspInit+0xdc>)
 80007c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007cc:	4a17      	ldr	r2, [pc, #92]	@ (800082c <HAL_FDCAN_MspInit+0xdc>)
 80007ce:	f043 0302 	orr.w	r3, r3, #2
 80007d2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80007d6:	4b15      	ldr	r3, [pc, #84]	@ (800082c <HAL_FDCAN_MspInit+0xdc>)
 80007d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007dc:	f003 0302 	and.w	r3, r3, #2
 80007e0:	60bb      	str	r3, [r7, #8]
 80007e2:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB7     ------> FDCAN1_TX
    PB8     ------> FDCAN1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80007e4:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80007e8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ec:	2302      	movs	r3, #2
 80007ee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f8:	2300      	movs	r3, #0
 80007fa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80007fe:	2309      	movs	r3, #9
 8000800:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000804:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000808:	4619      	mov	r1, r3
 800080a:	4809      	ldr	r0, [pc, #36]	@ (8000830 <HAL_FDCAN_MspInit+0xe0>)
 800080c:	f001 fb02 	bl	8001e14 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000810:	2200      	movs	r2, #0
 8000812:	2100      	movs	r1, #0
 8000814:	2027      	movs	r0, #39	@ 0x27
 8000816:	f000 fb79 	bl	8000f0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800081a:	2027      	movs	r0, #39	@ 0x27
 800081c:	f000 fb90 	bl	8000f40 <HAL_NVIC_EnableIRQ>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8000820:	bf00      	nop
 8000822:	37f8      	adds	r7, #248	@ 0xf8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	4000a400 	.word	0x4000a400
 800082c:	44020c00 	.word	0x44020c00
 8000830:	42020400 	.word	0x42020400

08000834 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b0b8      	sub	sp, #224	@ 0xe0
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800083c:	f107 0310 	add.w	r3, r7, #16
 8000840:	22d0      	movs	r2, #208	@ 0xd0
 8000842:	2100      	movs	r1, #0
 8000844:	4618      	mov	r0, r3
 8000846:	f00b f870 	bl	800b92a <memset>
  if(hpcd->Instance==USB_DRD_FS)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4a19      	ldr	r2, [pc, #100]	@ (80008b4 <HAL_PCD_MspInit+0x80>)
 8000850:	4293      	cmp	r3, r2
 8000852:	d12b      	bne.n	80008ac <HAL_PCD_MspInit+0x78>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000854:	f04f 0200 	mov.w	r2, #0
 8000858:	f04f 0310 	mov.w	r3, #16
 800085c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000860:	2330      	movs	r3, #48	@ 0x30
 8000862:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000866:	f107 0310 	add.w	r3, r7, #16
 800086a:	4618      	mov	r0, r3
 800086c:	f004 f848 	bl	8004900 <HAL_RCCEx_PeriphCLKConfig>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <HAL_PCD_MspInit+0x46>
    {
      Error_Handler();
 8000876:	f7ff ff5d 	bl	8000734 <Error_Handler>
    }

  /* Enable VDDUSB */
  HAL_PWREx_EnableVddUSB();
 800087a:	f003 f8f9 	bl	8003a70 <HAL_PWREx_EnableVddUSB>
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800087e:	4b0e      	ldr	r3, [pc, #56]	@ (80008b8 <HAL_PCD_MspInit+0x84>)
 8000880:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000884:	4a0c      	ldr	r2, [pc, #48]	@ (80008b8 <HAL_PCD_MspInit+0x84>)
 8000886:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800088a:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800088e:	4b0a      	ldr	r3, [pc, #40]	@ (80008b8 <HAL_PCD_MspInit+0x84>)
 8000890:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000894:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000898:	60fb      	str	r3, [r7, #12]
 800089a:	68fb      	ldr	r3, [r7, #12]
    /* USB_DRD_FS interrupt Init */
    HAL_NVIC_SetPriority(USB_DRD_FS_IRQn, 0, 0);
 800089c:	2200      	movs	r2, #0
 800089e:	2100      	movs	r1, #0
 80008a0:	204a      	movs	r0, #74	@ 0x4a
 80008a2:	f000 fb33 	bl	8000f0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_DRD_FS_IRQn);
 80008a6:	204a      	movs	r0, #74	@ 0x4a
 80008a8:	f000 fb4a 	bl	8000f40 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_DRD_FS_MspInit 1 */

  }

}
 80008ac:	bf00      	nop
 80008ae:	37e0      	adds	r7, #224	@ 0xe0
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	40016000 	.word	0x40016000
 80008b8:	44020c00 	.word	0x44020c00

080008bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008c0:	bf00      	nop
 80008c2:	e7fd      	b.n	80008c0 <NMI_Handler+0x4>

080008c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008c8:	bf00      	nop
 80008ca:	e7fd      	b.n	80008c8 <HardFault_Handler+0x4>

080008cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d0:	bf00      	nop
 80008d2:	e7fd      	b.n	80008d0 <MemManage_Handler+0x4>

080008d4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008d8:	bf00      	nop
 80008da:	e7fd      	b.n	80008d8 <BusFault_Handler+0x4>

080008dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e0:	bf00      	nop
 80008e2:	e7fd      	b.n	80008e0 <UsageFault_Handler+0x4>

080008e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr

080008f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008f6:	bf00      	nop
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr

08000900 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr

0800090e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800090e:	b580      	push	{r7, lr}
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000912:	f000 f9ff 	bl	8000d14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
	...

0800091c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000920:	4802      	ldr	r0, [pc, #8]	@ (800092c <FDCAN1_IT0_IRQHandler+0x10>)
 8000922:	f001 f80b 	bl	800193c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	20000208 	.word	0x20000208

08000930 <USB_DRD_FS_IRQHandler>:

/**
  * @brief This function handles USB FS global interrupt.
  */
void USB_DRD_FS_IRQHandler(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DRD_FS_IRQn 0 */

  /* USER CODE END USB_DRD_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_DRD_FS);
 8000934:	4802      	ldr	r0, [pc, #8]	@ (8000940 <USB_DRD_FS_IRQHandler+0x10>)
 8000936:	f001 fd2d 	bl	8002394 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_DRD_FS_IRQn 1 */

  /* USER CODE END USB_DRD_FS_IRQn 1 */
}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	2000026c 	.word	0x2000026c

08000944 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b086      	sub	sp, #24
 8000948:	af00      	add	r7, sp, #0
 800094a:	60f8      	str	r0, [r7, #12]
 800094c:	60b9      	str	r1, [r7, #8]
 800094e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000950:	2300      	movs	r3, #0
 8000952:	617b      	str	r3, [r7, #20]
 8000954:	e00a      	b.n	800096c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000956:	f3af 8000 	nop.w
 800095a:	4601      	mov	r1, r0
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	1c5a      	adds	r2, r3, #1
 8000960:	60ba      	str	r2, [r7, #8]
 8000962:	b2ca      	uxtb	r2, r1
 8000964:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000966:	697b      	ldr	r3, [r7, #20]
 8000968:	3301      	adds	r3, #1
 800096a:	617b      	str	r3, [r7, #20]
 800096c:	697a      	ldr	r2, [r7, #20]
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	429a      	cmp	r2, r3
 8000972:	dbf0      	blt.n	8000956 <_read+0x12>
  }

  return len;
 8000974:	687b      	ldr	r3, [r7, #4]
}
 8000976:	4618      	mov	r0, r3
 8000978:	3718      	adds	r7, #24
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}

0800097e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800097e:	b580      	push	{r7, lr}
 8000980:	b086      	sub	sp, #24
 8000982:	af00      	add	r7, sp, #0
 8000984:	60f8      	str	r0, [r7, #12]
 8000986:	60b9      	str	r1, [r7, #8]
 8000988:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800098a:	2300      	movs	r3, #0
 800098c:	617b      	str	r3, [r7, #20]
 800098e:	e009      	b.n	80009a4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	1c5a      	adds	r2, r3, #1
 8000994:	60ba      	str	r2, [r7, #8]
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	4618      	mov	r0, r3
 800099a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800099e:	697b      	ldr	r3, [r7, #20]
 80009a0:	3301      	adds	r3, #1
 80009a2:	617b      	str	r3, [r7, #20]
 80009a4:	697a      	ldr	r2, [r7, #20]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	429a      	cmp	r2, r3
 80009aa:	dbf1      	blt.n	8000990 <_write+0x12>
  }
  return len;
 80009ac:	687b      	ldr	r3, [r7, #4]
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	3718      	adds	r7, #24
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}

080009b6 <_close>:

int _close(int file)
{
 80009b6:	b480      	push	{r7}
 80009b8:	b083      	sub	sp, #12
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	370c      	adds	r7, #12
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr

080009ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009ce:	b480      	push	{r7}
 80009d0:	b083      	sub	sp, #12
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	6078      	str	r0, [r7, #4]
 80009d6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80009de:	605a      	str	r2, [r3, #4]
  return 0;
 80009e0:	2300      	movs	r3, #0
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	370c      	adds	r7, #12
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr

080009ee <_isatty>:

int _isatty(int file)
{
 80009ee:	b480      	push	{r7}
 80009f0:	b083      	sub	sp, #12
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009f6:	2301      	movs	r3, #1
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	370c      	adds	r7, #12
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr

08000a04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b085      	sub	sp, #20
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	60f8      	str	r0, [r7, #12]
 8000a0c:	60b9      	str	r1, [r7, #8]
 8000a0e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a10:	2300      	movs	r3, #0
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	3714      	adds	r7, #20
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
	...

08000a20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b086      	sub	sp, #24
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a28:	4a14      	ldr	r2, [pc, #80]	@ (8000a7c <_sbrk+0x5c>)
 8000a2a:	4b15      	ldr	r3, [pc, #84]	@ (8000a80 <_sbrk+0x60>)
 8000a2c:	1ad3      	subs	r3, r2, r3
 8000a2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a34:	4b13      	ldr	r3, [pc, #76]	@ (8000a84 <_sbrk+0x64>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d102      	bne.n	8000a42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a3c:	4b11      	ldr	r3, [pc, #68]	@ (8000a84 <_sbrk+0x64>)
 8000a3e:	4a12      	ldr	r2, [pc, #72]	@ (8000a88 <_sbrk+0x68>)
 8000a40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a42:	4b10      	ldr	r3, [pc, #64]	@ (8000a84 <_sbrk+0x64>)
 8000a44:	681a      	ldr	r2, [r3, #0]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4413      	add	r3, r2
 8000a4a:	693a      	ldr	r2, [r7, #16]
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	d207      	bcs.n	8000a60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a50:	f00a ffba 	bl	800b9c8 <__errno>
 8000a54:	4603      	mov	r3, r0
 8000a56:	220c      	movs	r2, #12
 8000a58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a5e:	e009      	b.n	8000a74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a60:	4b08      	ldr	r3, [pc, #32]	@ (8000a84 <_sbrk+0x64>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a66:	4b07      	ldr	r3, [pc, #28]	@ (8000a84 <_sbrk+0x64>)
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4413      	add	r3, r2
 8000a6e:	4a05      	ldr	r2, [pc, #20]	@ (8000a84 <_sbrk+0x64>)
 8000a70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a72:	68fb      	ldr	r3, [r7, #12]
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3718      	adds	r7, #24
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	20044000 	.word	0x20044000
 8000a80:	00000700 	.word	0x00000700
 8000a84:	200008ec 	.word	0x200008ec
 8000a88:	20000cf0 	.word	0x20000cf0

08000a8c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a92:	4b35      	ldr	r3, [pc, #212]	@ (8000b68 <SystemInit+0xdc>)
 8000a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a98:	4a33      	ldr	r2, [pc, #204]	@ (8000b68 <SystemInit+0xdc>)
 8000a9a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a9e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8000aa2:	4b32      	ldr	r3, [pc, #200]	@ (8000b6c <SystemInit+0xe0>)
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000aa8:	4b30      	ldr	r3, [pc, #192]	@ (8000b6c <SystemInit+0xe0>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000aae:	4b2f      	ldr	r3, [pc, #188]	@ (8000b6c <SystemInit+0xe0>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8000ab4:	4b2d      	ldr	r3, [pc, #180]	@ (8000b6c <SystemInit+0xe0>)
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	492c      	ldr	r1, [pc, #176]	@ (8000b6c <SystemInit+0xe0>)
 8000aba:	4b2d      	ldr	r3, [pc, #180]	@ (8000b70 <SystemInit+0xe4>)
 8000abc:	4013      	ands	r3, r2
 8000abe:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8000ac0:	4b2a      	ldr	r3, [pc, #168]	@ (8000b6c <SystemInit+0xe0>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8000ac6:	4b29      	ldr	r3, [pc, #164]	@ (8000b6c <SystemInit+0xe0>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8000acc:	4b27      	ldr	r3, [pc, #156]	@ (8000b6c <SystemInit+0xe0>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8000ad2:	4b26      	ldr	r3, [pc, #152]	@ (8000b6c <SystemInit+0xe0>)
 8000ad4:	4a27      	ldr	r2, [pc, #156]	@ (8000b74 <SystemInit+0xe8>)
 8000ad6:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8000ad8:	4b24      	ldr	r3, [pc, #144]	@ (8000b6c <SystemInit+0xe0>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8000ade:	4b23      	ldr	r3, [pc, #140]	@ (8000b6c <SystemInit+0xe0>)
 8000ae0:	4a24      	ldr	r2, [pc, #144]	@ (8000b74 <SystemInit+0xe8>)
 8000ae2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8000ae4:	4b21      	ldr	r3, [pc, #132]	@ (8000b6c <SystemInit+0xe0>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8000aea:	4b20      	ldr	r3, [pc, #128]	@ (8000b6c <SystemInit+0xe0>)
 8000aec:	4a21      	ldr	r2, [pc, #132]	@ (8000b74 <SystemInit+0xe8>)
 8000aee:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8000af0:	4b1e      	ldr	r3, [pc, #120]	@ (8000b6c <SystemInit+0xe0>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000af6:	4b1d      	ldr	r3, [pc, #116]	@ (8000b6c <SystemInit+0xe0>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4a1c      	ldr	r2, [pc, #112]	@ (8000b6c <SystemInit+0xe0>)
 8000afc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b00:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000b02:	4b1a      	ldr	r3, [pc, #104]	@ (8000b6c <SystemInit+0xe0>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b08:	4b17      	ldr	r3, [pc, #92]	@ (8000b68 <SystemInit+0xdc>)
 8000b0a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000b0e:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8000b10:	4b19      	ldr	r3, [pc, #100]	@ (8000b78 <SystemInit+0xec>)
 8000b12:	699b      	ldr	r3, [r3, #24]
 8000b14:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8000b18:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8000b20:	d003      	beq.n	8000b2a <SystemInit+0x9e>
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8000b28:	d117      	bne.n	8000b5a <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8000b2a:	4b13      	ldr	r3, [pc, #76]	@ (8000b78 <SystemInit+0xec>)
 8000b2c:	69db      	ldr	r3, [r3, #28]
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d005      	beq.n	8000b42 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8000b36:	4b10      	ldr	r3, [pc, #64]	@ (8000b78 <SystemInit+0xec>)
 8000b38:	4a10      	ldr	r2, [pc, #64]	@ (8000b7c <SystemInit+0xf0>)
 8000b3a:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8000b3c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b78 <SystemInit+0xec>)
 8000b3e:	4a10      	ldr	r2, [pc, #64]	@ (8000b80 <SystemInit+0xf4>)
 8000b40:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8000b42:	4b0d      	ldr	r3, [pc, #52]	@ (8000b78 <SystemInit+0xec>)
 8000b44:	69db      	ldr	r3, [r3, #28]
 8000b46:	4a0c      	ldr	r2, [pc, #48]	@ (8000b78 <SystemInit+0xec>)
 8000b48:	f043 0302 	orr.w	r3, r3, #2
 8000b4c:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8000b4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b78 <SystemInit+0xec>)
 8000b50:	69db      	ldr	r3, [r3, #28]
 8000b52:	4a09      	ldr	r2, [pc, #36]	@ (8000b78 <SystemInit+0xec>)
 8000b54:	f043 0301 	orr.w	r3, r3, #1
 8000b58:	61d3      	str	r3, [r2, #28]
  }
}
 8000b5a:	bf00      	nop
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	e000ed00 	.word	0xe000ed00
 8000b6c:	44020c00 	.word	0x44020c00
 8000b70:	eae2eae3 	.word	0xeae2eae3
 8000b74:	01010280 	.word	0x01010280
 8000b78:	40022000 	.word	0x40022000
 8000b7c:	08192a3b 	.word	0x08192a3b
 8000b80:	4c5d6e7f 	.word	0x4c5d6e7f

08000b84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b84:	480d      	ldr	r0, [pc, #52]	@ (8000bbc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b86:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b88:	f7ff ff80 	bl	8000a8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b8c:	480c      	ldr	r0, [pc, #48]	@ (8000bc0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b8e:	490d      	ldr	r1, [pc, #52]	@ (8000bc4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b90:	4a0d      	ldr	r2, [pc, #52]	@ (8000bc8 <LoopForever+0xe>)
  movs r3, #0
 8000b92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b94:	e002      	b.n	8000b9c <LoopCopyDataInit>

08000b96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b9a:	3304      	adds	r3, #4

08000b9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba0:	d3f9      	bcc.n	8000b96 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ba2:	4a0a      	ldr	r2, [pc, #40]	@ (8000bcc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ba4:	4c0a      	ldr	r4, [pc, #40]	@ (8000bd0 <LoopForever+0x16>)
  movs r3, #0
 8000ba6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba8:	e001      	b.n	8000bae <LoopFillZerobss>

08000baa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000baa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bac:	3204      	adds	r2, #4

08000bae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb0:	d3fb      	bcc.n	8000baa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000bb2:	f00a ff0f 	bl	800b9d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bb6:	f7ff fb6d 	bl	8000294 <main>

08000bba <LoopForever>:

LoopForever:
    b LoopForever
 8000bba:	e7fe      	b.n	8000bba <LoopForever>
  ldr   r0, =_estack
 8000bbc:	20044000 	.word	0x20044000
  ldr r0, =_sdata
 8000bc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc4:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8000bc8:	0800c770 	.word	0x0800c770
  ldr r2, =_sbss
 8000bcc:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8000bd0:	20000cf0 	.word	0x20000cf0

08000bd4 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bd4:	e7fe      	b.n	8000bd4 <ADC1_IRQHandler>
	...

08000bd8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bdc:	2003      	movs	r0, #3
 8000bde:	f000 f98a 	bl	8000ef6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000be2:	f003 fd45 	bl	8004670 <HAL_RCC_GetSysClockFreq>
 8000be6:	4602      	mov	r2, r0
 8000be8:	4b0c      	ldr	r3, [pc, #48]	@ (8000c1c <HAL_Init+0x44>)
 8000bea:	6a1b      	ldr	r3, [r3, #32]
 8000bec:	f003 030f 	and.w	r3, r3, #15
 8000bf0:	490b      	ldr	r1, [pc, #44]	@ (8000c20 <HAL_Init+0x48>)
 8000bf2:	5ccb      	ldrb	r3, [r1, r3]
 8000bf4:	fa22 f303 	lsr.w	r3, r2, r3
 8000bf8:	4a0a      	ldr	r2, [pc, #40]	@ (8000c24 <HAL_Init+0x4c>)
 8000bfa:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000bfc:	2004      	movs	r0, #4
 8000bfe:	f000 f9cf 	bl	8000fa0 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c02:	200f      	movs	r0, #15
 8000c04:	f000 f810 	bl	8000c28 <HAL_InitTick>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	e002      	b.n	8000c18 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000c12:	f7ff fd95 	bl	8000740 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c16:	2300      	movs	r3, #0
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	44020c00 	.word	0x44020c00
 8000c20:	0800c714 	.word	0x0800c714
 8000c24:	20000004 	.word	0x20000004

08000c28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8000c30:	2300      	movs	r3, #0
 8000c32:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000c34:	4b33      	ldr	r3, [pc, #204]	@ (8000d04 <HAL_InitTick+0xdc>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d101      	bne.n	8000c40 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	e05c      	b.n	8000cfa <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8000c40:	4b31      	ldr	r3, [pc, #196]	@ (8000d08 <HAL_InitTick+0xe0>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f003 0304 	and.w	r3, r3, #4
 8000c48:	2b04      	cmp	r3, #4
 8000c4a:	d10c      	bne.n	8000c66 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8000c4c:	4b2f      	ldr	r3, [pc, #188]	@ (8000d0c <HAL_InitTick+0xe4>)
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	4b2c      	ldr	r3, [pc, #176]	@ (8000d04 <HAL_InitTick+0xdc>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	4619      	mov	r1, r3
 8000c56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	e037      	b.n	8000cd6 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8000c66:	f000 f9f3 	bl	8001050 <HAL_SYSTICK_GetCLKSourceConfig>
 8000c6a:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	2b02      	cmp	r3, #2
 8000c70:	d023      	beq.n	8000cba <HAL_InitTick+0x92>
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	2b02      	cmp	r3, #2
 8000c76:	d82d      	bhi.n	8000cd4 <HAL_InitTick+0xac>
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d003      	beq.n	8000c86 <HAL_InitTick+0x5e>
 8000c7e:	68bb      	ldr	r3, [r7, #8]
 8000c80:	2b01      	cmp	r3, #1
 8000c82:	d00d      	beq.n	8000ca0 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8000c84:	e026      	b.n	8000cd4 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8000c86:	4b21      	ldr	r3, [pc, #132]	@ (8000d0c <HAL_InitTick+0xe4>)
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	4b1e      	ldr	r3, [pc, #120]	@ (8000d04 <HAL_InitTick+0xdc>)
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	4619      	mov	r1, r3
 8000c90:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8000c94:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c9c:	60fb      	str	r3, [r7, #12]
        break;
 8000c9e:	e01a      	b.n	8000cd6 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000ca0:	4b18      	ldr	r3, [pc, #96]	@ (8000d04 <HAL_InitTick+0xdc>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000caa:	fbb3 f3f2 	udiv	r3, r3, r2
 8000cae:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cb6:	60fb      	str	r3, [r7, #12]
        break;
 8000cb8:	e00d      	b.n	8000cd6 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000cba:	4b12      	ldr	r3, [pc, #72]	@ (8000d04 <HAL_InitTick+0xdc>)
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cc4:	fbb3 f3f2 	udiv	r3, r3, r2
 8000cc8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cd0:	60fb      	str	r3, [r7, #12]
        break;
 8000cd2:	e000      	b.n	8000cd6 <HAL_InitTick+0xae>
        break;
 8000cd4:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8000cd6:	68f8      	ldr	r0, [r7, #12]
 8000cd8:	f000 f940 	bl	8000f5c <HAL_SYSTICK_Config>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e009      	b.n	8000cfa <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	6879      	ldr	r1, [r7, #4]
 8000cea:	f04f 30ff 	mov.w	r0, #4294967295
 8000cee:	f000 f90d 	bl	8000f0c <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8000cf2:	4a07      	ldr	r2, [pc, #28]	@ (8000d10 <HAL_InitTick+0xe8>)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000cf8:	2300      	movs	r3, #0
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3710      	adds	r7, #16
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	2000000c 	.word	0x2000000c
 8000d08:	e000e010 	.word	0xe000e010
 8000d0c:	20000004 	.word	0x20000004
 8000d10:	20000008 	.word	0x20000008

08000d14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d18:	4b06      	ldr	r3, [pc, #24]	@ (8000d34 <HAL_IncTick+0x20>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	4b06      	ldr	r3, [pc, #24]	@ (8000d38 <HAL_IncTick+0x24>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4413      	add	r3, r2
 8000d24:	4a04      	ldr	r2, [pc, #16]	@ (8000d38 <HAL_IncTick+0x24>)
 8000d26:	6013      	str	r3, [r2, #0]
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	2000000c 	.word	0x2000000c
 8000d38:	200008f0 	.word	0x200008f0

08000d3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d40:	4b03      	ldr	r3, [pc, #12]	@ (8000d50 <HAL_GetTick+0x14>)
 8000d42:	681b      	ldr	r3, [r3, #0]
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	200008f0 	.word	0x200008f0

08000d54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d5c:	f7ff ffee 	bl	8000d3c <HAL_GetTick>
 8000d60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d6c:	d005      	beq.n	8000d7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d98 <HAL_Delay+0x44>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	461a      	mov	r2, r3
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	4413      	add	r3, r2
 8000d78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d7a:	bf00      	nop
 8000d7c:	f7ff ffde 	bl	8000d3c <HAL_GetTick>
 8000d80:	4602      	mov	r2, r0
 8000d82:	68bb      	ldr	r3, [r7, #8]
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	68fa      	ldr	r2, [r7, #12]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d8f7      	bhi.n	8000d7c <HAL_Delay+0x28>
  {
  }
}
 8000d8c:	bf00      	nop
 8000d8e:	bf00      	nop
 8000d90:	3710      	adds	r7, #16
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	2000000c 	.word	0x2000000c

08000d9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b085      	sub	sp, #20
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	f003 0307 	and.w	r3, r3, #7
 8000daa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dac:	4b0c      	ldr	r3, [pc, #48]	@ (8000de0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000db2:	68ba      	ldr	r2, [r7, #8]
 8000db4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000db8:	4013      	ands	r3, r2
 8000dba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dc4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000dc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dce:	4a04      	ldr	r2, [pc, #16]	@ (8000de0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	60d3      	str	r3, [r2, #12]
}
 8000dd4:	bf00      	nop
 8000dd6:	3714      	adds	r7, #20
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000de8:	4b04      	ldr	r3, [pc, #16]	@ (8000dfc <__NVIC_GetPriorityGrouping+0x18>)
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	0a1b      	lsrs	r3, r3, #8
 8000dee:	f003 0307 	and.w	r3, r3, #7
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000e0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	db0b      	blt.n	8000e2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e12:	88fb      	ldrh	r3, [r7, #6]
 8000e14:	f003 021f 	and.w	r2, r3, #31
 8000e18:	4907      	ldr	r1, [pc, #28]	@ (8000e38 <__NVIC_EnableIRQ+0x38>)
 8000e1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e1e:	095b      	lsrs	r3, r3, #5
 8000e20:	2001      	movs	r0, #1
 8000e22:	fa00 f202 	lsl.w	r2, r0, r2
 8000e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e2a:	bf00      	nop
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	e000e100 	.word	0xe000e100

08000e3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	6039      	str	r1, [r7, #0]
 8000e46:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000e48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	db0a      	blt.n	8000e66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	b2da      	uxtb	r2, r3
 8000e54:	490c      	ldr	r1, [pc, #48]	@ (8000e88 <__NVIC_SetPriority+0x4c>)
 8000e56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e5a:	0112      	lsls	r2, r2, #4
 8000e5c:	b2d2      	uxtb	r2, r2
 8000e5e:	440b      	add	r3, r1
 8000e60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e64:	e00a      	b.n	8000e7c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	b2da      	uxtb	r2, r3
 8000e6a:	4908      	ldr	r1, [pc, #32]	@ (8000e8c <__NVIC_SetPriority+0x50>)
 8000e6c:	88fb      	ldrh	r3, [r7, #6]
 8000e6e:	f003 030f 	and.w	r3, r3, #15
 8000e72:	3b04      	subs	r3, #4
 8000e74:	0112      	lsls	r2, r2, #4
 8000e76:	b2d2      	uxtb	r2, r2
 8000e78:	440b      	add	r3, r1
 8000e7a:	761a      	strb	r2, [r3, #24]
}
 8000e7c:	bf00      	nop
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	e000e100 	.word	0xe000e100
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b089      	sub	sp, #36	@ 0x24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	f003 0307 	and.w	r3, r3, #7
 8000ea2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	f1c3 0307 	rsb	r3, r3, #7
 8000eaa:	2b04      	cmp	r3, #4
 8000eac:	bf28      	it	cs
 8000eae:	2304      	movcs	r3, #4
 8000eb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	3304      	adds	r3, #4
 8000eb6:	2b06      	cmp	r3, #6
 8000eb8:	d902      	bls.n	8000ec0 <NVIC_EncodePriority+0x30>
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	3b03      	subs	r3, #3
 8000ebe:	e000      	b.n	8000ec2 <NVIC_EncodePriority+0x32>
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	43da      	mvns	r2, r3
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	401a      	ands	r2, r3
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ed8:	f04f 31ff 	mov.w	r1, #4294967295
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee2:	43d9      	mvns	r1, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee8:	4313      	orrs	r3, r2
         );
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3724      	adds	r7, #36	@ 0x24
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr

08000ef6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b082      	sub	sp, #8
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f7ff ff4c 	bl	8000d9c <__NVIC_SetPriorityGrouping>
}
 8000f04:	bf00      	nop
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b086      	sub	sp, #24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	60b9      	str	r1, [r7, #8]
 8000f16:	607a      	str	r2, [r7, #4]
 8000f18:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f1a:	f7ff ff63 	bl	8000de4 <__NVIC_GetPriorityGrouping>
 8000f1e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f20:	687a      	ldr	r2, [r7, #4]
 8000f22:	68b9      	ldr	r1, [r7, #8]
 8000f24:	6978      	ldr	r0, [r7, #20]
 8000f26:	f7ff ffb3 	bl	8000e90 <NVIC_EncodePriority>
 8000f2a:	4602      	mov	r2, r0
 8000f2c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f30:	4611      	mov	r1, r2
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff ff82 	bl	8000e3c <__NVIC_SetPriority>
}
 8000f38:	bf00      	nop
 8000f3a:	3718      	adds	r7, #24
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff ff56 	bl	8000e00 <__NVIC_EnableIRQ>
}
 8000f54:	bf00      	nop
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3b01      	subs	r3, #1
 8000f68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f6c:	d301      	bcc.n	8000f72 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e00d      	b.n	8000f8e <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8000f72:	4a0a      	ldr	r2, [pc, #40]	@ (8000f9c <HAL_SYSTICK_Config+0x40>)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	3b01      	subs	r3, #1
 8000f78:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8000f7a:	4b08      	ldr	r3, [pc, #32]	@ (8000f9c <HAL_SYSTICK_Config+0x40>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8000f80:	4b06      	ldr	r3, [pc, #24]	@ (8000f9c <HAL_SYSTICK_Config+0x40>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a05      	ldr	r2, [pc, #20]	@ (8000f9c <HAL_SYSTICK_Config+0x40>)
 8000f86:	f043 0303 	orr.w	r3, r3, #3
 8000f8a:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8000f8c:	2300      	movs	r3, #0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	e000e010 	.word	0xe000e010

08000fa0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2b04      	cmp	r3, #4
 8000fac:	d844      	bhi.n	8001038 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8000fae:	a201      	add	r2, pc, #4	@ (adr r2, 8000fb4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8000fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fb4:	08000fd7 	.word	0x08000fd7
 8000fb8:	08000ff5 	.word	0x08000ff5
 8000fbc:	08001017 	.word	0x08001017
 8000fc0:	08001039 	.word	0x08001039
 8000fc4:	08000fc9 	.word	0x08000fc9
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000fc8:	4b1f      	ldr	r3, [pc, #124]	@ (8001048 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a1e      	ldr	r2, [pc, #120]	@ (8001048 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000fce:	f043 0304 	orr.w	r3, r3, #4
 8000fd2:	6013      	str	r3, [r2, #0]
      break;
 8000fd4:	e031      	b.n	800103a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000fd6:	4b1c      	ldr	r3, [pc, #112]	@ (8001048 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a1b      	ldr	r2, [pc, #108]	@ (8001048 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000fdc:	f023 0304 	bic.w	r3, r3, #4
 8000fe0:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8000fe2:	4b1a      	ldr	r3, [pc, #104]	@ (800104c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000fe4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000fe8:	4a18      	ldr	r2, [pc, #96]	@ (800104c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000fea:	f023 030c 	bic.w	r3, r3, #12
 8000fee:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8000ff2:	e022      	b.n	800103a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000ff4:	4b14      	ldr	r3, [pc, #80]	@ (8001048 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a13      	ldr	r2, [pc, #76]	@ (8001048 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000ffa:	f023 0304 	bic.w	r3, r3, #4
 8000ffe:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8001000:	4b12      	ldr	r3, [pc, #72]	@ (800104c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001002:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001006:	f023 030c 	bic.w	r3, r3, #12
 800100a:	4a10      	ldr	r2, [pc, #64]	@ (800104c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800100c:	f043 0304 	orr.w	r3, r3, #4
 8001010:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001014:	e011      	b.n	800103a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001016:	4b0c      	ldr	r3, [pc, #48]	@ (8001048 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a0b      	ldr	r2, [pc, #44]	@ (8001048 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800101c:	f023 0304 	bic.w	r3, r3, #4
 8001020:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8001022:	4b0a      	ldr	r3, [pc, #40]	@ (800104c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001024:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001028:	f023 030c 	bic.w	r3, r3, #12
 800102c:	4a07      	ldr	r2, [pc, #28]	@ (800104c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800102e:	f043 0308 	orr.w	r3, r3, #8
 8001032:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001036:	e000      	b.n	800103a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001038:	bf00      	nop
  }
}
 800103a:	bf00      	nop
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	e000e010 	.word	0xe000e010
 800104c:	44020c00 	.word	0x44020c00

08001050 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8001056:	4b17      	ldr	r3, [pc, #92]	@ (80010b4 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f003 0304 	and.w	r3, r3, #4
 800105e:	2b00      	cmp	r3, #0
 8001060:	d002      	beq.n	8001068 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8001062:	2304      	movs	r3, #4
 8001064:	607b      	str	r3, [r7, #4]
 8001066:	e01e      	b.n	80010a6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8001068:	4b13      	ldr	r3, [pc, #76]	@ (80010b8 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 800106a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800106e:	f003 030c 	and.w	r3, r3, #12
 8001072:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	2b08      	cmp	r3, #8
 8001078:	d00f      	beq.n	800109a <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	2b08      	cmp	r3, #8
 800107e:	d80f      	bhi.n	80010a0 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d003      	beq.n	800108e <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	2b04      	cmp	r3, #4
 800108a:	d003      	beq.n	8001094 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 800108c:	e008      	b.n	80010a0 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800108e:	2300      	movs	r3, #0
 8001090:	607b      	str	r3, [r7, #4]
        break;
 8001092:	e008      	b.n	80010a6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8001094:	2301      	movs	r3, #1
 8001096:	607b      	str	r3, [r7, #4]
        break;
 8001098:	e005      	b.n	80010a6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 800109a:	2302      	movs	r3, #2
 800109c:	607b      	str	r3, [r7, #4]
        break;
 800109e:	e002      	b.n	80010a6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80010a0:	2300      	movs	r3, #0
 80010a2:	607b      	str	r3, [r7, #4]
        break;
 80010a4:	bf00      	nop
    }
  }
  return systick_source;
 80010a6:	687b      	ldr	r3, [r7, #4]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	e000e010 	.word	0xe000e010
 80010b8:	44020c00 	.word	0x44020c00

080010bc <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d101      	bne.n	80010ce <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	e147      	b.n	800135e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d106      	bne.n	80010e8 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2200      	movs	r2, #0
 80010de:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f7ff fb34 	bl	8000750 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	699a      	ldr	r2, [r3, #24]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f022 0210 	bic.w	r2, r2, #16
 80010f6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010f8:	f7ff fe20 	bl	8000d3c <HAL_GetTick>
 80010fc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80010fe:	e012      	b.n	8001126 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001100:	f7ff fe1c 	bl	8000d3c <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	2b0a      	cmp	r3, #10
 800110c:	d90b      	bls.n	8001126 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001112:	f043 0201 	orr.w	r2, r3, #1
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2203      	movs	r2, #3
 800111e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e11b      	b.n	800135e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	f003 0308 	and.w	r3, r3, #8
 8001130:	2b08      	cmp	r3, #8
 8001132:	d0e5      	beq.n	8001100 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	699a      	ldr	r2, [r3, #24]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f042 0201 	orr.w	r2, r2, #1
 8001142:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001144:	f7ff fdfa 	bl	8000d3c <HAL_GetTick>
 8001148:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800114a:	e012      	b.n	8001172 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800114c:	f7ff fdf6 	bl	8000d3c <HAL_GetTick>
 8001150:	4602      	mov	r2, r0
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	2b0a      	cmp	r3, #10
 8001158:	d90b      	bls.n	8001172 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800115e:	f043 0201 	orr.w	r2, r3, #1
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2203      	movs	r2, #3
 800116a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e0f5      	b.n	800135e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	f003 0301 	and.w	r3, r3, #1
 800117c:	2b00      	cmp	r3, #0
 800117e:	d0e5      	beq.n	800114c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	699a      	ldr	r2, [r3, #24]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f042 0202 	orr.w	r2, r2, #2
 800118e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a74      	ldr	r2, [pc, #464]	@ (8001368 <HAL_FDCAN_Init+0x2ac>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d103      	bne.n	80011a2 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800119a:	4a74      	ldr	r2, [pc, #464]	@ (800136c <HAL_FDCAN_Init+0x2b0>)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	7c1b      	ldrb	r3, [r3, #16]
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d108      	bne.n	80011bc <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	699a      	ldr	r2, [r3, #24]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80011b8:	619a      	str	r2, [r3, #24]
 80011ba:	e007      	b.n	80011cc <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	699a      	ldr	r2, [r3, #24]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80011ca:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	7c5b      	ldrb	r3, [r3, #17]
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d108      	bne.n	80011e6 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	699a      	ldr	r2, [r3, #24]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80011e2:	619a      	str	r2, [r3, #24]
 80011e4:	e007      	b.n	80011f6 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	699a      	ldr	r2, [r3, #24]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80011f4:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	7c9b      	ldrb	r3, [r3, #18]
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d108      	bne.n	8001210 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	699a      	ldr	r2, [r3, #24]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800120c:	619a      	str	r2, [r3, #24]
 800120e:	e007      	b.n	8001220 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	699a      	ldr	r2, [r3, #24]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800121e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	699b      	ldr	r3, [r3, #24]
 8001226:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	689a      	ldr	r2, [r3, #8]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	430a      	orrs	r2, r1
 8001234:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	699a      	ldr	r2, [r3, #24]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8001244:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	691a      	ldr	r2, [r3, #16]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f022 0210 	bic.w	r2, r2, #16
 8001254:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	68db      	ldr	r3, [r3, #12]
 800125a:	2b01      	cmp	r3, #1
 800125c:	d108      	bne.n	8001270 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	699a      	ldr	r2, [r3, #24]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f042 0204 	orr.w	r2, r2, #4
 800126c:	619a      	str	r2, [r3, #24]
 800126e:	e02c      	b.n	80012ca <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d028      	beq.n	80012ca <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	2b02      	cmp	r3, #2
 800127e:	d01c      	beq.n	80012ba <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	699a      	ldr	r2, [r3, #24]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800128e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	691a      	ldr	r2, [r3, #16]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f042 0210 	orr.w	r2, r2, #16
 800129e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	2b03      	cmp	r3, #3
 80012a6:	d110      	bne.n	80012ca <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	699a      	ldr	r2, [r3, #24]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f042 0220 	orr.w	r2, r2, #32
 80012b6:	619a      	str	r2, [r3, #24]
 80012b8:	e007      	b.n	80012ca <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	699a      	ldr	r2, [r3, #24]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f042 0220 	orr.w	r2, r2, #32
 80012c8:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	699b      	ldr	r3, [r3, #24]
 80012ce:	3b01      	subs	r3, #1
 80012d0:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	69db      	ldr	r3, [r3, #28]
 80012d6:	3b01      	subs	r3, #1
 80012d8:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80012da:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6a1b      	ldr	r3, [r3, #32]
 80012e0:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80012e2:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	695b      	ldr	r3, [r3, #20]
 80012ea:	3b01      	subs	r3, #1
 80012ec:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80012f2:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80012f4:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80012fe:	d115      	bne.n	800132c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001304:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800130a:	3b01      	subs	r3, #1
 800130c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800130e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001314:	3b01      	subs	r3, #1
 8001316:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001318:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001320:	3b01      	subs	r3, #1
 8001322:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001328:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800132a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	430a      	orrs	r2, r1
 800133e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f000 fc88 	bl	8001c58 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2200      	movs	r2, #0
 800134c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2201      	movs	r2, #1
 8001358:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3710      	adds	r7, #16
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	4000a400 	.word	0x4000a400
 800136c:	4000a500 	.word	0x4000a500

08001370 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8001370:	b480      	push	{r7}
 8001372:	b087      	sub	sp, #28
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001380:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001382:	7dfb      	ldrb	r3, [r7, #23]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d002      	beq.n	800138e <HAL_FDCAN_ConfigFilter+0x1e>
 8001388:	7dfb      	ldrb	r3, [r7, #23]
 800138a:	2b02      	cmp	r3, #2
 800138c:	d13d      	bne.n	800140a <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d119      	bne.n	80013ca <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80013a2:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	691b      	ldr	r3, [r3, #16]
 80013a8:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 80013aa:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80013b0:	4313      	orrs	r3, r2
 80013b2:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	4413      	add	r3, r2
 80013c0:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	e01d      	b.n	8001406 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	68db      	ldr	r3, [r3, #12]
 80013ce:	075a      	lsls	r2, r3, #29
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	691b      	ldr	r3, [r3, #16]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	079a      	lsls	r2, r3, #30
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	695b      	ldr	r3, [r3, #20]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	00db      	lsls	r3, r3, #3
 80013f0:	4413      	add	r3, r2
 80013f2:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	3304      	adds	r3, #4
 80013fe:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	68fa      	ldr	r2, [r7, #12]
 8001404:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8001406:	2300      	movs	r3, #0
 8001408:	e006      	b.n	8001418 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800140e:	f043 0202 	orr.w	r2, r3, #2
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
  }
}
 8001418:	4618      	mov	r0, r3
 800141a:	371c      	adds	r7, #28
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8001424:	b480      	push	{r7}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	60b9      	str	r1, [r7, #8]
 800142e:	607a      	str	r2, [r7, #4]
 8001430:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001438:	b2db      	uxtb	r3, r3
 800143a:	2b01      	cmp	r3, #1
 800143c:	d116      	bne.n	800146c <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001446:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	011a      	lsls	r2, r3, #4
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	431a      	orrs	r2, r3
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	431a      	orrs	r2, r3
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	431a      	orrs	r2, r3
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	430a      	orrs	r2, r1
 8001464:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8001468:	2300      	movs	r3, #0
 800146a:	e006      	b.n	800147a <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001470:	f043 0204 	orr.w	r2, r3, #4
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
  }
}
 800147a:	4618      	mov	r0, r3
 800147c:	3714      	adds	r7, #20
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr

08001486 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001486:	b480      	push	{r7}
 8001488:	b083      	sub	sp, #12
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001494:	b2db      	uxtb	r3, r3
 8001496:	2b01      	cmp	r3, #1
 8001498:	d110      	bne.n	80014bc <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2202      	movs	r2, #2
 800149e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	699a      	ldr	r2, [r3, #24]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f022 0201 	bic.w	r2, r2, #1
 80014b0:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 80014b8:	2300      	movs	r3, #0
 80014ba:	e006      	b.n	80014ca <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014c0:	f043 0204 	orr.w	r2, r3, #4
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
  }
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b086      	sub	sp, #24
 80014da:	af00      	add	r7, sp, #0
 80014dc:	60f8      	str	r0, [r7, #12]
 80014de:	60b9      	str	r1, [r7, #8]
 80014e0:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d12c      	bne.n	8001548 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80014f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d007      	beq.n	800150e <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001502:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e023      	b.n	8001556 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001516:	0c1b      	lsrs	r3, r3, #16
 8001518:	f003 0303 	and.w	r3, r3, #3
 800151c:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	687a      	ldr	r2, [r7, #4]
 8001522:	68b9      	ldr	r1, [r7, #8]
 8001524:	68f8      	ldr	r0, [r7, #12]
 8001526:	f000 fbf9 	bl	8001d1c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2101      	movs	r1, #1
 8001530:	697a      	ldr	r2, [r7, #20]
 8001532:	fa01 f202 	lsl.w	r2, r1, r2
 8001536:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800153a:	2201      	movs	r2, #1
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	409a      	lsls	r2, r3
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8001544:	2300      	movs	r3, #0
 8001546:	e006      	b.n	8001556 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800154c:	f043 0208 	orr.w	r2, r3, #8
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
  }
}
 8001556:	4618      	mov	r0, r3
 8001558:	3718      	adds	r7, #24
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
	...

08001560 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001560:	b480      	push	{r7}
 8001562:	b08b      	sub	sp, #44	@ 0x2c
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
 800156c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800156e:	2300      	movs	r3, #0
 8001570:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001578:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 800157a:	7efb      	ldrb	r3, [r7, #27]
 800157c:	2b02      	cmp	r3, #2
 800157e:	f040 80e8 	bne.w	8001752 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	2b40      	cmp	r3, #64	@ 0x40
 8001586:	d137      	bne.n	80015f8 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001590:	f003 030f 	and.w	r3, r3, #15
 8001594:	2b00      	cmp	r3, #0
 8001596:	d107      	bne.n	80015a8 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800159c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e0db      	b.n	8001760 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015b0:	0e1b      	lsrs	r3, r3, #24
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d10a      	bne.n	80015d0 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80015c2:	0a5b      	lsrs	r3, r3, #9
 80015c4:	f003 0301 	and.w	r3, r3, #1
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d101      	bne.n	80015d0 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80015cc:	2301      	movs	r3, #1
 80015ce:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015d8:	0a1b      	lsrs	r3, r3, #8
 80015da:	f003 0303 	and.w	r3, r3, #3
 80015de:	69fa      	ldr	r2, [r7, #28]
 80015e0:	4413      	add	r3, r2
 80015e2:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 80015e8:	69fa      	ldr	r2, [r7, #28]
 80015ea:	4613      	mov	r3, r2
 80015ec:	00db      	lsls	r3, r3, #3
 80015ee:	4413      	add	r3, r2
 80015f0:	00db      	lsls	r3, r3, #3
 80015f2:	440b      	add	r3, r1
 80015f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80015f6:	e036      	b.n	8001666 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001600:	f003 030f 	and.w	r3, r3, #15
 8001604:	2b00      	cmp	r3, #0
 8001606:	d107      	bne.n	8001618 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800160c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e0a3      	b.n	8001760 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001620:	0e1b      	lsrs	r3, r3, #24
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	2b01      	cmp	r3, #1
 8001628:	d10a      	bne.n	8001640 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001632:	0a1b      	lsrs	r3, r3, #8
 8001634:	f003 0301 	and.w	r3, r3, #1
 8001638:	2b01      	cmp	r3, #1
 800163a:	d101      	bne.n	8001640 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800163c:	2301      	movs	r3, #1
 800163e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001648:	0a1b      	lsrs	r3, r3, #8
 800164a:	f003 0303 	and.w	r3, r3, #3
 800164e:	69fa      	ldr	r2, [r7, #28]
 8001650:	4413      	add	r3, r2
 8001652:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8001658:	69fa      	ldr	r2, [r7, #28]
 800165a:	4613      	mov	r3, r2
 800165c:	00db      	lsls	r3, r3, #3
 800165e:	4413      	add	r3, r2
 8001660:	00db      	lsls	r3, r3, #3
 8001662:	440b      	add	r3, r1
 8001664:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d107      	bne.n	800168a <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800167a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	0c9b      	lsrs	r3, r3, #18
 8001680:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	e005      	b.n	8001696 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800168a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80016a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80016ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b0:	3304      	adds	r3, #4
 80016b2:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80016b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	b29a      	uxth	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80016be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	0c1b      	lsrs	r3, r3, #16
 80016c4:	f003 020f 	and.w	r2, r3, #15
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80016cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80016d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80016e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	0e1b      	lsrs	r3, r3, #24
 80016ea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80016f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	0fda      	lsrs	r2, r3, #31
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80016fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016fe:	3304      	adds	r3, #4
 8001700:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001704:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001706:	2300      	movs	r3, #0
 8001708:	623b      	str	r3, [r7, #32]
 800170a:	e00a      	b.n	8001722 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800170c:	697a      	ldr	r2, [r7, #20]
 800170e:	6a3b      	ldr	r3, [r7, #32]
 8001710:	441a      	add	r2, r3
 8001712:	6839      	ldr	r1, [r7, #0]
 8001714:	6a3b      	ldr	r3, [r7, #32]
 8001716:	440b      	add	r3, r1
 8001718:	7812      	ldrb	r2, [r2, #0]
 800171a:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800171c:	6a3b      	ldr	r3, [r7, #32]
 800171e:	3301      	adds	r3, #1
 8001720:	623b      	str	r3, [r7, #32]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	4a11      	ldr	r2, [pc, #68]	@ (800176c <HAL_FDCAN_GetRxMessage+0x20c>)
 8001728:	5cd3      	ldrb	r3, [r2, r3]
 800172a:	461a      	mov	r2, r3
 800172c:	6a3b      	ldr	r3, [r7, #32]
 800172e:	4293      	cmp	r3, r2
 8001730:	d3ec      	bcc.n	800170c <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	2b40      	cmp	r3, #64	@ 0x40
 8001736:	d105      	bne.n	8001744 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	69fa      	ldr	r2, [r7, #28]
 800173e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8001742:	e004      	b.n	800174e <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	69fa      	ldr	r2, [r7, #28]
 800174a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800174e:	2300      	movs	r3, #0
 8001750:	e006      	b.n	8001760 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001756:	f043 0208 	orr.w	r2, r3, #8
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
  }
}
 8001760:	4618      	mov	r0, r3
 8001762:	372c      	adds	r7, #44	@ 0x2c
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	0800c724 	.word	0x0800c724

08001770 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8001770:	b480      	push	{r7}
 8001772:	b087      	sub	sp, #28
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001782:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001784:	7dfb      	ldrb	r3, [r7, #23]
 8001786:	2b01      	cmp	r3, #1
 8001788:	d003      	beq.n	8001792 <HAL_FDCAN_ActivateNotification+0x22>
 800178a:	7dfb      	ldrb	r3, [r7, #23]
 800178c:	2b02      	cmp	r3, #2
 800178e:	f040 80c8 	bne.w	8001922 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001798:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	f003 0307 	and.w	r3, r3, #7
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d004      	beq.n	80017ae <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d03b      	beq.n	8001826 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d004      	beq.n	80017c2 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d031      	beq.n	8001826 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d004      	beq.n	80017d6 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	f003 0304 	and.w	r3, r3, #4
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d027      	beq.n	8001826 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d004      	beq.n	80017ea <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	f003 0308 	and.w	r3, r3, #8
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d01d      	beq.n	8001826 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d004      	beq.n	80017fe <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	f003 0310 	and.w	r3, r3, #16
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d013      	beq.n	8001826 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001804:	2b00      	cmp	r3, #0
 8001806:	d004      	beq.n	8001812 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	f003 0320 	and.w	r3, r3, #32
 800180e:	2b00      	cmp	r3, #0
 8001810:	d009      	beq.n	8001826 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001818:	2b00      	cmp	r3, #0
 800181a:	d00c      	beq.n	8001836 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001822:	2b00      	cmp	r3, #0
 8001824:	d107      	bne.n	8001836 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f042 0201 	orr.w	r2, r2, #1
 8001834:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	f003 0307 	and.w	r3, r3, #7
 800183c:	2b00      	cmp	r3, #0
 800183e:	d004      	beq.n	800184a <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	2b00      	cmp	r3, #0
 8001848:	d13b      	bne.n	80018c2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001850:	2b00      	cmp	r3, #0
 8001852:	d004      	beq.n	800185e <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d131      	bne.n	80018c2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001864:	2b00      	cmp	r3, #0
 8001866:	d004      	beq.n	8001872 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	f003 0304 	and.w	r3, r3, #4
 800186e:	2b00      	cmp	r3, #0
 8001870:	d127      	bne.n	80018c2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001878:	2b00      	cmp	r3, #0
 800187a:	d004      	beq.n	8001886 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	f003 0308 	and.w	r3, r3, #8
 8001882:	2b00      	cmp	r3, #0
 8001884:	d11d      	bne.n	80018c2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 800188c:	2b00      	cmp	r3, #0
 800188e:	d004      	beq.n	800189a <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	f003 0310 	and.w	r3, r3, #16
 8001896:	2b00      	cmp	r3, #0
 8001898:	d113      	bne.n	80018c2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d004      	beq.n	80018ae <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	f003 0320 	and.w	r3, r3, #32
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d109      	bne.n	80018c2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d00c      	beq.n	80018d2 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d007      	beq.n	80018d2 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f042 0202 	orr.w	r2, r2, #2
 80018d0:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d009      	beq.n	80018f0 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	430a      	orrs	r2, r1
 80018ec:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d009      	beq.n	800190e <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	430a      	orrs	r2, r1
 800190a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	68ba      	ldr	r2, [r7, #8]
 800191a:	430a      	orrs	r2, r1
 800191c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 800191e:	2300      	movs	r3, #0
 8001920:	e006      	b.n	8001930 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001926:	f043 0202 	orr.w	r2, r3, #2
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
  }
}
 8001930:	4618      	mov	r0, r3
 8001932:	371c      	adds	r7, #28
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b08c      	sub	sp, #48	@ 0x30
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800194a:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800194e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001956:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001958:	4013      	ands	r3, r2
 800195a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001962:	f003 0307 	and.w	r3, r3, #7
 8001966:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800196e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001970:	4013      	ands	r3, r2
 8001972:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800197a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800197e:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001986:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001988:	4013      	ands	r3, r2
 800198a:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001992:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8001996:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800199e:	6a3a      	ldr	r2, [r7, #32]
 80019a0:	4013      	ands	r3, r2
 80019a2:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80019aa:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80019ae:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019b6:	69fa      	ldr	r2, [r7, #28]
 80019b8:	4013      	ands	r3, r2
 80019ba:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019c2:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80019ca:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d00b      	beq.n	80019ee <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d006      	beq.n	80019ee <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2240      	movs	r2, #64	@ 0x40
 80019e6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f000 f916 	bl	8001c1a <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d019      	beq.n	8001a2c <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d014      	beq.n	8001a2c <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001a0a:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a14:	693a      	ldr	r2, [r7, #16]
 8001a16:	4013      	ands	r3, r2
 8001a18:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a22:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001a24:	6939      	ldr	r1, [r7, #16]
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f000 f8d8 	bl	8001bdc <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001a2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d007      	beq.n	8001a42 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a38:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001a3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f000 f8a2 	bl	8001b86 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001a42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d007      	beq.n	8001a58 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001a4e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001a50:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f7fe fe50 	bl	80006f8 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d007      	beq.n	8001a6e <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a64:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001a66:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f000 f897 	bl	8001b9c <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d00c      	beq.n	8001a92 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d007      	beq.n	8001a92 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a8a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f000 f890 	bl	8001bb2 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d018      	beq.n	8001ace <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d013      	beq.n	8001ace <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001aae:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001ab8:	68fa      	ldr	r2, [r7, #12]
 8001aba:	4013      	ands	r3, r2
 8001abc:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2280      	movs	r2, #128	@ 0x80
 8001ac4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001ac6:	68f9      	ldr	r1, [r7, #12]
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f000 f87c 	bl	8001bc6 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d00c      	beq.n	8001af2 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d007      	beq.n	8001af2 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001aea:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f000 f880 	bl	8001bf2 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d00c      	beq.n	8001b16 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d007      	beq.n	8001b16 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001b0e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f000 f878 	bl	8001c06 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d00f      	beq.n	8001b40 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d00a      	beq.n	8001b40 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b32:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b38:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d007      	beq.n	8001b56 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	69fa      	ldr	r2, [r7, #28]
 8001b4c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001b4e:	69f9      	ldr	r1, [r7, #28]
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f000 f876 	bl	8001c42 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001b56:	6a3b      	ldr	r3, [r7, #32]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d009      	beq.n	8001b70 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	6a3a      	ldr	r2, [r7, #32]
 8001b62:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001b68:	6a3b      	ldr	r3, [r7, #32]
 8001b6a:	431a      	orrs	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d002      	beq.n	8001b7e <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f000 f858 	bl	8001c2e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001b7e:	bf00      	nop
 8001b80:	3730      	adds	r7, #48	@ 0x30
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001b86:	b480      	push	{r7}
 8001b88:	b083      	sub	sp, #12
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
 8001b8e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001b90:	bf00      	nop
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001ba6:	bf00      	nop
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr

08001bb2 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	b083      	sub	sp, #12
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001bba:	bf00      	nop
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr

08001bc6 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	b083      	sub	sp, #12
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
 8001bce:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001bd0:	bf00      	nop
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr

08001bf2 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b083      	sub	sp, #12
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001c06:	b480      	push	{r7}
 8001c08:	b083      	sub	sp, #12
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001c0e:	bf00      	nop
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr

08001c1a <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001c22:	bf00      	nop
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr

08001c2e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	b083      	sub	sp, #12
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001c36:	bf00      	nop
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001c42:	b480      	push	{r7}
 8001c44:	b083      	sub	sp, #12
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
 8001c4a:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001c4c:	bf00      	nop
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001c60:	4b2c      	ldr	r3, [pc, #176]	@ (8001d14 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 8001c62:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a2b      	ldr	r2, [pc, #172]	@ (8001d18 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d103      	bne.n	8001c76 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001c74:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	68ba      	ldr	r2, [r7, #8]
 8001c7a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c84:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c8c:	041a      	lsls	r2, r3, #16
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	430a      	orrs	r2, r1
 8001c94:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001caa:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cb2:	061a      	lsls	r2, r3, #24
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	430a      	orrs	r2, r1
 8001cba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	e005      	b.n	8001cf8 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	3304      	adds	r3, #4
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001cfe:	68fa      	ldr	r2, [r7, #12]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d3f3      	bcc.n	8001cec <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 8001d04:	bf00      	nop
 8001d06:	bf00      	nop
 8001d08:	3714      	adds	r7, #20
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	4000ac00 	.word	0x4000ac00
 8001d18:	4000a800 	.word	0x4000a800

08001d1c <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b089      	sub	sp, #36	@ 0x24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	607a      	str	r2, [r7, #4]
 8001d28:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d10a      	bne.n	8001d48 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8001d3a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001d42:	4313      	orrs	r3, r2
 8001d44:	61fb      	str	r3, [r7, #28]
 8001d46:	e00a      	b.n	8001d5e <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8001d50:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8001d56:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001d58:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001d5c:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	6a1b      	ldr	r3, [r3, #32]
 8001d62:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001d68:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8001d6e:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8001d74:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001d84:	683a      	ldr	r2, [r7, #0]
 8001d86:	4613      	mov	r3, r2
 8001d88:	00db      	lsls	r3, r3, #3
 8001d8a:	4413      	add	r3, r2
 8001d8c:	00db      	lsls	r3, r3, #3
 8001d8e:	440b      	add	r3, r1
 8001d90:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	69fa      	ldr	r2, [r7, #28]
 8001d96:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	3304      	adds	r3, #4
 8001d9c:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	3304      	adds	r3, #4
 8001da8:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8001daa:	2300      	movs	r3, #0
 8001dac:	617b      	str	r3, [r7, #20]
 8001dae:	e020      	b.n	8001df2 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	3303      	adds	r3, #3
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	4413      	add	r3, r2
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	3302      	adds	r3, #2
 8001dc0:	6879      	ldr	r1, [r7, #4]
 8001dc2:	440b      	add	r3, r1
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001dc8:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	6879      	ldr	r1, [r7, #4]
 8001dd0:	440b      	add	r3, r1
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001dd6:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8001dd8:	6879      	ldr	r1, [r7, #4]
 8001dda:	697a      	ldr	r2, [r7, #20]
 8001ddc:	440a      	add	r2, r1
 8001dde:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001de0:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	3304      	adds	r3, #4
 8001dea:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	3304      	adds	r3, #4
 8001df0:	617b      	str	r3, [r7, #20]
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	4a06      	ldr	r2, [pc, #24]	@ (8001e10 <FDCAN_CopyMessageToRAM+0xf4>)
 8001df8:	5cd3      	ldrb	r3, [r2, r3]
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d3d6      	bcc.n	8001db0 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8001e02:	bf00      	nop
 8001e04:	bf00      	nop
 8001e06:	3724      	adds	r7, #36	@ 0x24
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr
 8001e10:	0800c724 	.word	0x0800c724

08001e14 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b087      	sub	sp, #28
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001e22:	e136      	b.n	8002092 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	2101      	movs	r1, #1
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e30:	4013      	ands	r3, r2
 8001e32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	f000 8128 	beq.w	800208c <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d003      	beq.n	8001e4c <HAL_GPIO_Init+0x38>
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	2b12      	cmp	r3, #18
 8001e4a:	d125      	bne.n	8001e98 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	08da      	lsrs	r2, r3, #3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	3208      	adds	r2, #8
 8001e54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e58:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	f003 0307 	and.w	r3, r3, #7
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	220f      	movs	r2, #15
 8001e64:	fa02 f303 	lsl.w	r3, r2, r3
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	697a      	ldr	r2, [r7, #20]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	691b      	ldr	r3, [r3, #16]
 8001e74:	f003 020f 	and.w	r2, r3, #15
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	f003 0307 	and.w	r3, r3, #7
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	697a      	ldr	r2, [r7, #20]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	08da      	lsrs	r2, r3, #3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	3208      	adds	r2, #8
 8001e92:	6979      	ldr	r1, [r7, #20]
 8001e94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	2203      	movs	r2, #3
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	697a      	ldr	r2, [r7, #20]
 8001eac:	4013      	ands	r3, r2
 8001eae:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f003 0203 	and.w	r2, r3, #3
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	697a      	ldr	r2, [r7, #20]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	697a      	ldr	r2, [r7, #20]
 8001eca:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d00b      	beq.n	8001eec <HAL_GPIO_Init+0xd8>
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d007      	beq.n	8001eec <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ee0:	2b11      	cmp	r3, #17
 8001ee2:	d003      	beq.n	8001eec <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	2b12      	cmp	r3, #18
 8001eea:	d130      	bne.n	8001f4e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	2203      	movs	r2, #3
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	43db      	mvns	r3, r3
 8001efe:	697a      	ldr	r2, [r7, #20]
 8001f00:	4013      	ands	r3, r2
 8001f02:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	68da      	ldr	r2, [r3, #12]
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	697a      	ldr	r2, [r7, #20]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	697a      	ldr	r2, [r7, #20]
 8001f1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f22:	2201      	movs	r2, #1
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	697a      	ldr	r2, [r7, #20]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	091b      	lsrs	r3, r3, #4
 8001f38:	f003 0201 	and.w	r2, r3, #1
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f42:	697a      	ldr	r2, [r7, #20]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	697a      	ldr	r2, [r7, #20]
 8001f4c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	2b03      	cmp	r3, #3
 8001f54:	d017      	beq.n	8001f86 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	2203      	movs	r2, #3
 8001f62:	fa02 f303 	lsl.w	r3, r2, r3
 8001f66:	43db      	mvns	r3, r3
 8001f68:	697a      	ldr	r2, [r7, #20]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	689a      	ldr	r2, [r3, #8]
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	697a      	ldr	r2, [r7, #20]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	697a      	ldr	r2, [r7, #20]
 8001f84:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d07c      	beq.n	800208c <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001f92:	4a47      	ldr	r2, [pc, #284]	@ (80020b0 <HAL_GPIO_Init+0x29c>)
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	089b      	lsrs	r3, r3, #2
 8001f98:	3318      	adds	r3, #24
 8001f9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f9e:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	f003 0303 	and.w	r3, r3, #3
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	220f      	movs	r2, #15
 8001faa:	fa02 f303 	lsl.w	r3, r2, r3
 8001fae:	43db      	mvns	r3, r3
 8001fb0:	697a      	ldr	r2, [r7, #20]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	0a9a      	lsrs	r2, r3, #10
 8001fba:	4b3e      	ldr	r3, [pc, #248]	@ (80020b4 <HAL_GPIO_Init+0x2a0>)
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	f002 0203 	and.w	r2, r2, #3
 8001fc4:	00d2      	lsls	r2, r2, #3
 8001fc6:	4093      	lsls	r3, r2
 8001fc8:	697a      	ldr	r2, [r7, #20]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001fce:	4938      	ldr	r1, [pc, #224]	@ (80020b0 <HAL_GPIO_Init+0x29c>)
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	089b      	lsrs	r3, r3, #2
 8001fd4:	3318      	adds	r3, #24
 8001fd6:	697a      	ldr	r2, [r7, #20]
 8001fd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001fdc:	4b34      	ldr	r3, [pc, #208]	@ (80020b0 <HAL_GPIO_Init+0x29c>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	697a      	ldr	r2, [r7, #20]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d003      	beq.n	8002000 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8001ff8:	697a      	ldr	r2, [r7, #20]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8002000:	4a2b      	ldr	r2, [pc, #172]	@ (80020b0 <HAL_GPIO_Init+0x29c>)
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8002006:	4b2a      	ldr	r3, [pc, #168]	@ (80020b0 <HAL_GPIO_Init+0x29c>)
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	43db      	mvns	r3, r3
 8002010:	697a      	ldr	r2, [r7, #20]
 8002012:	4013      	ands	r3, r2
 8002014:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d003      	beq.n	800202a <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8002022:	697a      	ldr	r2, [r7, #20]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	4313      	orrs	r3, r2
 8002028:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800202a:	4a21      	ldr	r2, [pc, #132]	@ (80020b0 <HAL_GPIO_Init+0x29c>)
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002030:	4b1f      	ldr	r3, [pc, #124]	@ (80020b0 <HAL_GPIO_Init+0x29c>)
 8002032:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002036:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	43db      	mvns	r3, r3
 800203c:	697a      	ldr	r2, [r7, #20]
 800203e:	4013      	ands	r3, r2
 8002040:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d003      	beq.n	8002056 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 800204e:	697a      	ldr	r2, [r7, #20]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	4313      	orrs	r3, r2
 8002054:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8002056:	4a16      	ldr	r2, [pc, #88]	@ (80020b0 <HAL_GPIO_Init+0x29c>)
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800205e:	4b14      	ldr	r3, [pc, #80]	@ (80020b0 <HAL_GPIO_Init+0x29c>)
 8002060:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002064:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	43db      	mvns	r3, r3
 800206a:	697a      	ldr	r2, [r7, #20]
 800206c:	4013      	ands	r3, r2
 800206e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d003      	beq.n	8002084 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 800207c:	697a      	ldr	r2, [r7, #20]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	4313      	orrs	r3, r2
 8002082:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8002084:	4a0a      	ldr	r2, [pc, #40]	@ (80020b0 <HAL_GPIO_Init+0x29c>)
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	3301      	adds	r3, #1
 8002090:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	fa22 f303 	lsr.w	r3, r2, r3
 800209c:	2b00      	cmp	r3, #0
 800209e:	f47f aec1 	bne.w	8001e24 <HAL_GPIO_Init+0x10>
  }
}
 80020a2:	bf00      	nop
 80020a4:	bf00      	nop
 80020a6:	371c      	adds	r7, #28
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr
 80020b0:	44022000 	.word	0x44022000
 80020b4:	002f7f7f 	.word	0x002f7f7f

080020b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	460b      	mov	r3, r1
 80020c2:	807b      	strh	r3, [r7, #2]
 80020c4:	4613      	mov	r3, r2
 80020c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020c8:	787b      	ldrb	r3, [r7, #1]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d003      	beq.n	80020d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020ce:	887a      	ldrh	r2, [r7, #2]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020d4:	e002      	b.n	80020dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020d6:	887a      	ldrh	r2, [r7, #2]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80020dc:	bf00      	nop
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <PCD_GET_EP_RX_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_RX_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b085      	sub	sp, #20
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	460b      	mov	r3, r1
 80020f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 80020f4:	230a      	movs	r3, #10
 80020f6:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 80020f8:	e002      	b.n	8002100 <PCD_GET_EP_RX_CNT+0x18>
  {
    count--;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	3b01      	subs	r3, #1
 80020fe:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1f9      	bne.n	80020fa <PCD_GET_EP_RX_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_RX_CNT((Instance), (bEpNum));
 8002106:	887b      	ldrh	r3, [r7, #2]
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800210e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	0c1b      	lsrs	r3, r3, #16
 8002116:	b29b      	uxth	r3, r3
 8002118:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800211c:	b29b      	uxth	r3, r3
}
 800211e:	4618      	mov	r0, r3
 8002120:	3714      	adds	r7, #20
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr

0800212a <PCD_GET_EP_DBUF0_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF0_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 800212a:	b480      	push	{r7}
 800212c:	b085      	sub	sp, #20
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
 8002132:	460b      	mov	r3, r1
 8002134:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8002136:	230a      	movs	r3, #10
 8002138:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 800213a:	e002      	b.n	8002142 <PCD_GET_EP_DBUF0_CNT+0x18>
  {
    count--;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	3b01      	subs	r3, #1
 8002140:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d1f9      	bne.n	800213c <PCD_GET_EP_DBUF0_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF0_CNT((Instance), (bEpNum));
 8002148:	887b      	ldrh	r3, [r7, #2]
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002150:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	0c1b      	lsrs	r3, r3, #16
 8002158:	b29b      	uxth	r3, r3
 800215a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800215e:	b29b      	uxth	r3, r3
}
 8002160:	4618      	mov	r0, r3
 8002162:	3714      	adds	r7, #20
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <PCD_GET_EP_DBUF1_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF1_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 800216c:	b480      	push	{r7}
 800216e:	b085      	sub	sp, #20
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	460b      	mov	r3, r1
 8002176:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8002178:	230a      	movs	r3, #10
 800217a:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 800217c:	e002      	b.n	8002184 <PCD_GET_EP_DBUF1_CNT+0x18>
  {
    count--;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	3b01      	subs	r3, #1
 8002182:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d1f9      	bne.n	800217e <PCD_GET_EP_DBUF1_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF1_CNT((Instance), (bEpNum));
 800218a:	887b      	ldrh	r3, [r7, #2]
 800218c:	00db      	lsls	r3, r3, #3
 800218e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002192:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	0c1b      	lsrs	r3, r3, #16
 800219a:	b29b      	uxth	r3, r3
 800219c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021a0:	b29b      	uxth	r3, r3
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3714      	adds	r7, #20
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr

080021ae <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b086      	sub	sp, #24
 80021b2:	af02      	add	r7, sp, #8
 80021b4:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d101      	bne.n	80021c0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e0c3      	b.n	8002348 <HAL_PCD_Init+0x19a>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f893 3295 	ldrb.w	r3, [r3, #661]	@ 0x295
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d106      	bne.n	80021da <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f7fe fb2d 	bl	8000834 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2203      	movs	r2, #3
 80021de:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f003 fe8e 	bl	8005f08 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021ec:	2300      	movs	r3, #0
 80021ee:	73fb      	strb	r3, [r7, #15]
 80021f0:	e03f      	b.n	8002272 <HAL_PCD_Init+0xc4>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80021f2:	7bfa      	ldrb	r2, [r7, #15]
 80021f4:	6879      	ldr	r1, [r7, #4]
 80021f6:	4613      	mov	r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	4413      	add	r3, r2
 80021fc:	00db      	lsls	r3, r3, #3
 80021fe:	440b      	add	r3, r1
 8002200:	3315      	adds	r3, #21
 8002202:	2201      	movs	r2, #1
 8002204:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002206:	7bfa      	ldrb	r2, [r7, #15]
 8002208:	6879      	ldr	r1, [r7, #4]
 800220a:	4613      	mov	r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4413      	add	r3, r2
 8002210:	00db      	lsls	r3, r3, #3
 8002212:	440b      	add	r3, r1
 8002214:	3314      	adds	r3, #20
 8002216:	7bfa      	ldrb	r2, [r7, #15]
 8002218:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800221a:	7bfa      	ldrb	r2, [r7, #15]
 800221c:	6879      	ldr	r1, [r7, #4]
 800221e:	4613      	mov	r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	4413      	add	r3, r2
 8002224:	00db      	lsls	r3, r3, #3
 8002226:	440b      	add	r3, r1
 8002228:	3317      	adds	r3, #23
 800222a:	2200      	movs	r2, #0
 800222c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800222e:	7bfa      	ldrb	r2, [r7, #15]
 8002230:	6879      	ldr	r1, [r7, #4]
 8002232:	4613      	mov	r3, r2
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	4413      	add	r3, r2
 8002238:	00db      	lsls	r3, r3, #3
 800223a:	440b      	add	r3, r1
 800223c:	3324      	adds	r3, #36	@ 0x24
 800223e:	2200      	movs	r2, #0
 8002240:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002242:	7bfa      	ldrb	r2, [r7, #15]
 8002244:	6879      	ldr	r1, [r7, #4]
 8002246:	4613      	mov	r3, r2
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	4413      	add	r3, r2
 800224c:	00db      	lsls	r3, r3, #3
 800224e:	440b      	add	r3, r1
 8002250:	3328      	adds	r3, #40	@ 0x28
 8002252:	2200      	movs	r2, #0
 8002254:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002256:	7bfb      	ldrb	r3, [r7, #15]
 8002258:	6879      	ldr	r1, [r7, #4]
 800225a:	1c5a      	adds	r2, r3, #1
 800225c:	4613      	mov	r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	4413      	add	r3, r2
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	440b      	add	r3, r1
 8002266:	3304      	adds	r3, #4
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800226c:	7bfb      	ldrb	r3, [r7, #15]
 800226e:	3301      	adds	r3, #1
 8002270:	73fb      	strb	r3, [r7, #15]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	791b      	ldrb	r3, [r3, #4]
 8002276:	7bfa      	ldrb	r2, [r7, #15]
 8002278:	429a      	cmp	r2, r3
 800227a:	d3ba      	bcc.n	80021f2 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800227c:	2300      	movs	r3, #0
 800227e:	73fb      	strb	r3, [r7, #15]
 8002280:	e044      	b.n	800230c <HAL_PCD_Init+0x15e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002282:	7bfa      	ldrb	r2, [r7, #15]
 8002284:	6879      	ldr	r1, [r7, #4]
 8002286:	4613      	mov	r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	4413      	add	r3, r2
 800228c:	00db      	lsls	r3, r3, #3
 800228e:	440b      	add	r3, r1
 8002290:	f203 1355 	addw	r3, r3, #341	@ 0x155
 8002294:	2200      	movs	r2, #0
 8002296:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002298:	7bfa      	ldrb	r2, [r7, #15]
 800229a:	6879      	ldr	r1, [r7, #4]
 800229c:	4613      	mov	r3, r2
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	4413      	add	r3, r2
 80022a2:	00db      	lsls	r3, r3, #3
 80022a4:	440b      	add	r3, r1
 80022a6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80022aa:	7bfa      	ldrb	r2, [r7, #15]
 80022ac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80022ae:	7bfa      	ldrb	r2, [r7, #15]
 80022b0:	6879      	ldr	r1, [r7, #4]
 80022b2:	4613      	mov	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	4413      	add	r3, r2
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	440b      	add	r3, r1
 80022bc:	f203 1357 	addw	r3, r3, #343	@ 0x157
 80022c0:	2200      	movs	r2, #0
 80022c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80022c4:	7bfa      	ldrb	r2, [r7, #15]
 80022c6:	6879      	ldr	r1, [r7, #4]
 80022c8:	4613      	mov	r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	4413      	add	r3, r2
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	440b      	add	r3, r1
 80022d2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80022d6:	2200      	movs	r2, #0
 80022d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80022da:	7bfa      	ldrb	r2, [r7, #15]
 80022dc:	6879      	ldr	r1, [r7, #4]
 80022de:	4613      	mov	r3, r2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	4413      	add	r3, r2
 80022e4:	00db      	lsls	r3, r3, #3
 80022e6:	440b      	add	r3, r1
 80022e8:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80022f0:	7bfa      	ldrb	r2, [r7, #15]
 80022f2:	6879      	ldr	r1, [r7, #4]
 80022f4:	4613      	mov	r3, r2
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	4413      	add	r3, r2
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	440b      	add	r3, r1
 80022fe:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8002302:	2200      	movs	r2, #0
 8002304:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002306:	7bfb      	ldrb	r3, [r7, #15]
 8002308:	3301      	adds	r3, #1
 800230a:	73fb      	strb	r3, [r7, #15]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	791b      	ldrb	r3, [r3, #4]
 8002310:	7bfa      	ldrb	r2, [r7, #15]
 8002312:	429a      	cmp	r2, r3
 8002314:	d3b5      	bcc.n	8002282 <HAL_PCD_Init+0xd4>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6818      	ldr	r0, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	7c1a      	ldrb	r2, [r3, #16]
 800231e:	f88d 2000 	strb.w	r2, [sp]
 8002322:	3304      	adds	r3, #4
 8002324:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002326:	f003 fe27 	bl	8005f78 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	7b1b      	ldrb	r3, [r3, #12]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d102      	bne.n	8002346 <HAL_PCD_Init+0x198>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f001 fb66 	bl	8003a12 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002346:	2300      	movs	r3, #0
}
 8002348:	4618      	mov	r0, r3
 800234a:	3710      	adds	r7, #16
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 800235e:	2b01      	cmp	r3, #1
 8002360:	d101      	bne.n	8002366 <HAL_PCD_Start+0x16>
 8002362:	2302      	movs	r3, #2
 8002364:	e012      	b.n	800238c <HAL_PCD_Start+0x3c>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2201      	movs	r2, #1
 800236a:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  __HAL_PCD_ENABLE(hpcd);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4618      	mov	r0, r3
 8002374:	f003 fdb4 	bl	8005ee0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4618      	mov	r0, r3
 800237e:	f005 fc60 	bl	8007c42 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 800238a:	2300      	movs	r3, #0
}
 800238c:	4618      	mov	r0, r3
 800238e:	3708      	adds	r7, #8
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f005 fc5f 	bl	8007c64 <USB_ReadInterrupts>
 80023a6:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d003      	beq.n	80023ba <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f000 faf2 	bl	800299c <PCD_EP_ISR_Handler>

    return;
 80023b8:	e0de      	b.n	8002578 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d010      	beq.n	80023e6 <HAL_PCD_IRQHandler+0x52>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	f64f 33ff 	movw	r3, #64511	@ 0xfbff
 80023d2:	400b      	ands	r3, r1
 80023d4:	6453      	str	r3, [r2, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f007 fae8 	bl	80099ac <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80023dc:	2100      	movs	r1, #0
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f000 f8e1 	bl	80025a6 <HAL_PCD_SetAddress>

    return;
 80023e4:	e0c8      	b.n	8002578 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d009      	beq.n	8002404 <HAL_PCD_IRQHandler+0x70>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	f64b 73ff 	movw	r3, #49151	@ 0xbfff
 80023fe:	400b      	ands	r3, r1
 8002400:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8002402:	e0b9      	b.n	8002578 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d009      	beq.n	8002422 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	f64d 73ff 	movw	r3, #57343	@ 0xdfff
 800241c:	400b      	ands	r3, r1
 800241e:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8002420:	e0aa      	b.n	8002578 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d029      	beq.n	8002480 <HAL_PCD_IRQHandler+0xec>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPRDY);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f022 0204 	bic.w	r2, r2, #4
 800243a:	641a      	str	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPEN);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f022 0208 	bic.w	r2, r2, #8
 800244a:	641a      	str	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 8002452:	2b01      	cmp	r3, #1
 8002454:	d107      	bne.n	8002466 <HAL_PCD_IRQHandler+0xd2>
    {
      hpcd->LPM_State = LPM_L0;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800245e:	2100      	movs	r1, #0
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f001 faf8 	bl	8003a56 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f000 f893 	bl	8002592 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 800247a:	400b      	ands	r3, r1
 800247c:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 800247e:	e07b      	b.n	8002578 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002486:	2b00      	cmp	r3, #0
 8002488:	d01c      	beq.n	80024c4 <HAL_PCD_IRQHandler+0x130>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f042 0208 	orr.w	r2, r2, #8
 8002498:	641a      	str	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	f24f 73ff 	movw	r3, #63487	@ 0xf7ff
 80024a8:	400b      	ands	r3, r1
 80024aa:	6453      	str	r3, [r2, #68]	@ 0x44

    hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f042 0204 	orr.w	r2, r2, #4
 80024ba:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f000 f85e 	bl	800257e <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80024c2:	e059      	b.n	8002578 <HAL_PCD_IRQHandler+0x1e4>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d033      	beq.n	8002536 <HAL_PCD_IRQHandler+0x1a2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	f64f 737f 	movw	r3, #65407	@ 0xff7f
 80024dc:	400b      	ands	r3, r1
 80024de:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d121      	bne.n	800252e <HAL_PCD_IRQHandler+0x19a>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f042 0204 	orr.w	r2, r2, #4
 80024f8:	641a      	str	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f042 0208 	orr.w	r2, r2, #8
 8002508:	641a      	str	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2201      	movs	r2, #1
 800250e:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002518:	089b      	lsrs	r3, r3, #2
 800251a:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002524:	2101      	movs	r1, #1
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f001 fa95 	bl	8003a56 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800252c:	e024      	b.n	8002578 <HAL_PCD_IRQHandler+0x1e4>
      HAL_PCD_SuspendCallback(hpcd);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f000 f825 	bl	800257e <HAL_PCD_SuspendCallback>
    return;
 8002534:	e020      	b.n	8002578 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800253c:	2b00      	cmp	r3, #0
 800253e:	d00c      	beq.n	800255a <HAL_PCD_IRQHandler+0x1c6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	f64f 53ff 	movw	r3, #65023	@ 0xfdff
 800254e:	400b      	ands	r3, r1
 8002550:	6453      	str	r3, [r2, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f007 fa1c 	bl	8009990 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002558:	e00e      	b.n	8002578 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002560:	2b00      	cmp	r3, #0
 8002562:	d009      	beq.n	8002578 <HAL_PCD_IRQHandler+0x1e4>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8002572:	400b      	ands	r3, r1
 8002574:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8002576:	bf00      	nop
  }
}
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 800257e:	b480      	push	{r7}
 8002580:	b083      	sub	sp, #12
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8002586:	bf00      	nop
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr

08002592 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8002592:	b480      	push	{r7}
 8002594:	b083      	sub	sp, #12
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 800259a:	bf00      	nop
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr

080025a6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b082      	sub	sp, #8
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
 80025ae:	460b      	mov	r3, r1
 80025b0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d101      	bne.n	80025c0 <HAL_PCD_SetAddress+0x1a>
 80025bc:	2302      	movs	r3, #2
 80025be:	e012      	b.n	80025e6 <HAL_PCD_SetAddress+0x40>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  hpcd->USB_Address = address;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	78fa      	ldrb	r2, [r7, #3]
 80025cc:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	78fa      	ldrb	r2, [r7, #3]
 80025d4:	4611      	mov	r1, r2
 80025d6:	4618      	mov	r0, r3
 80025d8:	f005 fb20 	bl	8007c1c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b084      	sub	sp, #16
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
 80025f6:	4608      	mov	r0, r1
 80025f8:	4611      	mov	r1, r2
 80025fa:	461a      	mov	r2, r3
 80025fc:	4603      	mov	r3, r0
 80025fe:	70fb      	strb	r3, [r7, #3]
 8002600:	460b      	mov	r3, r1
 8002602:	803b      	strh	r3, [r7, #0]
 8002604:	4613      	mov	r3, r2
 8002606:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002608:	2300      	movs	r3, #0
 800260a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800260c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002610:	2b00      	cmp	r3, #0
 8002612:	da0f      	bge.n	8002634 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002614:	78fb      	ldrb	r3, [r7, #3]
 8002616:	f003 0207 	and.w	r2, r3, #7
 800261a:	4613      	mov	r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	4413      	add	r3, r2
 8002620:	00db      	lsls	r3, r3, #3
 8002622:	3310      	adds	r3, #16
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	4413      	add	r3, r2
 8002628:	3304      	adds	r3, #4
 800262a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2201      	movs	r2, #1
 8002630:	705a      	strb	r2, [r3, #1]
 8002632:	e00f      	b.n	8002654 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002634:	78fb      	ldrb	r3, [r7, #3]
 8002636:	f003 0207 	and.w	r2, r3, #7
 800263a:	4613      	mov	r3, r2
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	4413      	add	r3, r2
 8002640:	00db      	lsls	r3, r3, #3
 8002642:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	4413      	add	r3, r2
 800264a:	3304      	adds	r3, #4
 800264c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2200      	movs	r2, #0
 8002652:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002654:	78fb      	ldrb	r3, [r7, #3]
 8002656:	f003 0307 	and.w	r3, r3, #7
 800265a:	b2da      	uxtb	r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002660:	883b      	ldrh	r3, [r7, #0]
 8002662:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	78ba      	ldrb	r2, [r7, #2]
 800266e:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002670:	78bb      	ldrb	r3, [r7, #2]
 8002672:	2b02      	cmp	r3, #2
 8002674:	d102      	bne.n	800267c <HAL_PCD_EP_Open+0x8e>
  {
    ep->data_pid_start = 0U;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2200      	movs	r2, #0
 800267a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8002682:	2b01      	cmp	r3, #1
 8002684:	d101      	bne.n	800268a <HAL_PCD_EP_Open+0x9c>
 8002686:	2302      	movs	r3, #2
 8002688:	e00e      	b.n	80026a8 <HAL_PCD_EP_Open+0xba>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2201      	movs	r2, #1
 800268e:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68f9      	ldr	r1, [r7, #12]
 8002698:	4618      	mov	r0, r3
 800269a:	f003 fc91 	bl	8005fc0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return ret;
 80026a6:	7afb      	ldrb	r3, [r7, #11]
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3710      	adds	r7, #16
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	460b      	mov	r3, r1
 80026ba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80026bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	da0f      	bge.n	80026e4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026c4:	78fb      	ldrb	r3, [r7, #3]
 80026c6:	f003 0207 	and.w	r2, r3, #7
 80026ca:	4613      	mov	r3, r2
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	4413      	add	r3, r2
 80026d0:	00db      	lsls	r3, r3, #3
 80026d2:	3310      	adds	r3, #16
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	4413      	add	r3, r2
 80026d8:	3304      	adds	r3, #4
 80026da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2201      	movs	r2, #1
 80026e0:	705a      	strb	r2, [r3, #1]
 80026e2:	e00f      	b.n	8002704 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026e4:	78fb      	ldrb	r3, [r7, #3]
 80026e6:	f003 0207 	and.w	r2, r3, #7
 80026ea:	4613      	mov	r3, r2
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	4413      	add	r3, r2
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	4413      	add	r3, r2
 80026fa:	3304      	adds	r3, #4
 80026fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2200      	movs	r2, #0
 8002702:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002704:	78fb      	ldrb	r3, [r7, #3]
 8002706:	f003 0307 	and.w	r3, r3, #7
 800270a:	b2da      	uxtb	r2, r3
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8002716:	2b01      	cmp	r3, #1
 8002718:	d101      	bne.n	800271e <HAL_PCD_EP_Close+0x6e>
 800271a:	2302      	movs	r3, #2
 800271c:	e00e      	b.n	800273c <HAL_PCD_EP_Close+0x8c>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2201      	movs	r2, #1
 8002722:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68f9      	ldr	r1, [r7, #12]
 800272c:	4618      	mov	r0, r3
 800272e:	f003 ffa7 	bl	8006680 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  return HAL_OK;
 800273a:	2300      	movs	r3, #0
}
 800273c:	4618      	mov	r0, r3
 800273e:	3710      	adds	r7, #16
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	607a      	str	r2, [r7, #4]
 800274e:	603b      	str	r3, [r7, #0]
 8002750:	460b      	mov	r3, r1
 8002752:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002754:	7afb      	ldrb	r3, [r7, #11]
 8002756:	f003 0207 	and.w	r2, r3, #7
 800275a:	4613      	mov	r3, r2
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	4413      	add	r3, r2
 8002760:	00db      	lsls	r3, r3, #3
 8002762:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002766:	68fa      	ldr	r2, [r7, #12]
 8002768:	4413      	add	r3, r2
 800276a:	3304      	adds	r3, #4
 800276c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	2200      	movs	r2, #0
 800277e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	2200      	movs	r2, #0
 8002784:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002786:	7afb      	ldrb	r3, [r7, #11]
 8002788:	f003 0307 	and.w	r3, r3, #7
 800278c:	b2da      	uxtb	r2, r3
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	6979      	ldr	r1, [r7, #20]
 8002798:	4618      	mov	r0, r3
 800279a:	f004 f8fb 	bl	8006994 <USB_EPStartXfer>

  return HAL_OK;
 800279e:	2300      	movs	r3, #0
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3718      	adds	r7, #24
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	460b      	mov	r3, r1
 80027b2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80027b4:	78fb      	ldrb	r3, [r7, #3]
 80027b6:	f003 0207 	and.w	r2, r3, #7
 80027ba:	6879      	ldr	r1, [r7, #4]
 80027bc:	4613      	mov	r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	4413      	add	r3, r2
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	440b      	add	r3, r1
 80027c6:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 80027ca:	681b      	ldr	r3, [r3, #0]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	607a      	str	r2, [r7, #4]
 80027e2:	603b      	str	r3, [r7, #0]
 80027e4:	460b      	mov	r3, r1
 80027e6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027e8:	7afb      	ldrb	r3, [r7, #11]
 80027ea:	f003 0207 	and.w	r2, r3, #7
 80027ee:	4613      	mov	r3, r2
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	4413      	add	r3, r2
 80027f4:	00db      	lsls	r3, r3, #3
 80027f6:	3310      	adds	r3, #16
 80027f8:	68fa      	ldr	r2, [r7, #12]
 80027fa:	4413      	add	r3, r2
 80027fc:	3304      	adds	r3, #4
 80027fe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	683a      	ldr	r2, [r7, #0]
 800280a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	683a      	ldr	r2, [r7, #0]
 8002818:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	2200      	movs	r2, #0
 800281e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	2201      	movs	r2, #1
 8002824:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002826:	7afb      	ldrb	r3, [r7, #11]
 8002828:	f003 0307 	and.w	r3, r3, #7
 800282c:	b2da      	uxtb	r2, r3
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	6979      	ldr	r1, [r7, #20]
 8002838:	4618      	mov	r0, r3
 800283a:	f004 f8ab 	bl	8006994 <USB_EPStartXfer>

  return HAL_OK;
 800283e:	2300      	movs	r3, #0
}
 8002840:	4618      	mov	r0, r3
 8002842:	3718      	adds	r7, #24
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	460b      	mov	r3, r1
 8002852:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002854:	78fb      	ldrb	r3, [r7, #3]
 8002856:	f003 0307 	and.w	r3, r3, #7
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	7912      	ldrb	r2, [r2, #4]
 800285e:	4293      	cmp	r3, r2
 8002860:	d901      	bls.n	8002866 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e040      	b.n	80028e8 <HAL_PCD_EP_SetStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002866:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800286a:	2b00      	cmp	r3, #0
 800286c:	da0f      	bge.n	800288e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800286e:	78fb      	ldrb	r3, [r7, #3]
 8002870:	f003 0207 	and.w	r2, r3, #7
 8002874:	4613      	mov	r3, r2
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	4413      	add	r3, r2
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	3310      	adds	r3, #16
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	4413      	add	r3, r2
 8002882:	3304      	adds	r3, #4
 8002884:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2201      	movs	r2, #1
 800288a:	705a      	strb	r2, [r3, #1]
 800288c:	e00d      	b.n	80028aa <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800288e:	78fa      	ldrb	r2, [r7, #3]
 8002890:	4613      	mov	r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	4413      	add	r3, r2
 8002896:	00db      	lsls	r3, r3, #3
 8002898:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	4413      	add	r3, r2
 80028a0:	3304      	adds	r3, #4
 80028a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2200      	movs	r2, #0
 80028a8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2201      	movs	r2, #1
 80028ae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028b0:	78fb      	ldrb	r3, [r7, #3]
 80028b2:	f003 0307 	and.w	r3, r3, #7
 80028b6:	b2da      	uxtb	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d101      	bne.n	80028ca <HAL_PCD_EP_SetStall+0x82>
 80028c6:	2302      	movs	r3, #2
 80028c8:	e00e      	b.n	80028e8 <HAL_PCD_EP_SetStall+0xa0>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2201      	movs	r2, #1
 80028ce:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	68f9      	ldr	r1, [r7, #12]
 80028d8:	4618      	mov	r0, r3
 80028da:	f005 f8c5 	bl	8007a68 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 80028e6:	2300      	movs	r3, #0
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3710      	adds	r7, #16
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	460b      	mov	r3, r1
 80028fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80028fc:	78fb      	ldrb	r3, [r7, #3]
 80028fe:	f003 030f 	and.w	r3, r3, #15
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	7912      	ldrb	r2, [r2, #4]
 8002906:	4293      	cmp	r3, r2
 8002908:	d901      	bls.n	800290e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e042      	b.n	8002994 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800290e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002912:	2b00      	cmp	r3, #0
 8002914:	da0f      	bge.n	8002936 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002916:	78fb      	ldrb	r3, [r7, #3]
 8002918:	f003 0207 	and.w	r2, r3, #7
 800291c:	4613      	mov	r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	4413      	add	r3, r2
 8002922:	00db      	lsls	r3, r3, #3
 8002924:	3310      	adds	r3, #16
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	4413      	add	r3, r2
 800292a:	3304      	adds	r3, #4
 800292c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2201      	movs	r2, #1
 8002932:	705a      	strb	r2, [r3, #1]
 8002934:	e00f      	b.n	8002956 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002936:	78fb      	ldrb	r3, [r7, #3]
 8002938:	f003 0207 	and.w	r2, r3, #7
 800293c:	4613      	mov	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	4413      	add	r3, r2
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	4413      	add	r3, r2
 800294c:	3304      	adds	r3, #4
 800294e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2200      	movs	r2, #0
 8002954:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2200      	movs	r2, #0
 800295a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800295c:	78fb      	ldrb	r3, [r7, #3]
 800295e:	f003 0307 	and.w	r3, r3, #7
 8002962:	b2da      	uxtb	r2, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 800296e:	2b01      	cmp	r3, #1
 8002970:	d101      	bne.n	8002976 <HAL_PCD_EP_ClrStall+0x86>
 8002972:	2302      	movs	r3, #2
 8002974:	e00e      	b.n	8002994 <HAL_PCD_EP_ClrStall+0xa4>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2201      	movs	r2, #1
 800297a:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	68f9      	ldr	r1, [r7, #12]
 8002984:	4618      	mov	r0, r3
 8002986:	f005 f8b5 	bl	8007af4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8002992:	2300      	movs	r3, #0
}
 8002994:	4618      	mov	r0, r3
 8002996:	3710      	adds	r7, #16
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}

0800299c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b08e      	sub	sp, #56	@ 0x38
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80029a4:	e326      	b.n	8002ff4 <PCD_EP_ISR_Handler+0x658>
  {
    wIstr = (uint16_t)hpcd->Instance->ISTR;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ac:	847b      	strh	r3, [r7, #34]	@ 0x22

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_IDN);
 80029ae:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	f003 030f 	and.w	r3, r3, #15
 80029b6:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

    if (epindex == 0U)
 80029ba:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80029be:	2b00      	cmp	r3, #0
 80029c0:	f040 8124 	bne.w	8002c0c <PCD_EP_ISR_Handler+0x270>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80029c4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80029c6:	f003 0310 	and.w	r3, r3, #16
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d13e      	bne.n	8002a4c <PCD_EP_ISR_Handler+0xb0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	4b89      	ldr	r3, [pc, #548]	@ (8002bfc <PCD_EP_ISR_Handler+0x260>)
 80029d6:	4013      	ands	r3, r2
 80029d8:	60bb      	str	r3, [r7, #8]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68ba      	ldr	r2, [r7, #8]
 80029e0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80029e4:	601a      	str	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	3314      	adds	r3, #20
 80029ea:	637b      	str	r3, [r7, #52]	@ 0x34

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80029ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	00db      	lsls	r3, r3, #3
 80029f2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80029f6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	0c1b      	lsrs	r3, r3, #16
 80029fe:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002a02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a04:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002a06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a08:	695a      	ldr	r2, [r3, #20]
 8002a0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a0c:	69db      	ldr	r3, [r3, #28]
 8002a0e:	441a      	add	r2, r3
 8002a10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a12:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002a14:	2100      	movs	r1, #0
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f006 ffa0 	bl	800995c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	7c5b      	ldrb	r3, [r3, #17]
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	f000 82e6 	beq.w	8002ff4 <PCD_EP_ISR_Handler+0x658>
 8002a28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a2a:	699b      	ldr	r3, [r3, #24]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f040 82e1 	bne.w	8002ff4 <PCD_EP_ISR_Handler+0x658>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	7c5b      	ldrb	r3, [r3, #17]
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002a3c:	b2da      	uxtb	r2, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	64da      	str	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	745a      	strb	r2, [r3, #17]
 8002a4a:	e2d3      	b.n	8002ff4 <PCD_EP_ISR_Handler+0x658>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8002a52:	637b      	str	r3, [r7, #52]	@ 0x34
        wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	867b      	strh	r3, [r7, #50]	@ 0x32

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002a5c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002a5e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d027      	beq.n	8002ab6 <PCD_EP_ISR_Handler+0x11a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	4619      	mov	r1, r3
 8002a70:	4610      	mov	r0, r2
 8002a72:	f7ff fb39 	bl	80020e8 <PCD_GET_EP_RX_CNT>
 8002a76:	4603      	mov	r3, r0
 8002a78:	461a      	mov	r2, r3
 8002a7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a7c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6818      	ldr	r0, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f503 7127 	add.w	r1, r3, #668	@ 0x29c
 8002a88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a8a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002a8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a8e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	f005 f956 	bl	8007d42 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	4b58      	ldr	r3, [pc, #352]	@ (8002c00 <PCD_EP_ISR_Handler+0x264>)
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	60fb      	str	r3, [r7, #12]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002aac:	601a      	str	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f006 ff27 	bl	8009902 <HAL_PCD_SetupStageCallback>
 8002ab4:	e29e      	b.n	8002ff4 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_VTRX) != 0U)
 8002ab6:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	f280 829a 	bge.w	8002ff4 <PCD_EP_ISR_Handler+0x658>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	4b4e      	ldr	r3, [pc, #312]	@ (8002c00 <PCD_EP_ISR_Handler+0x264>)
 8002ac8:	4013      	ands	r3, r2
 8002aca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ad2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002ad6:	601a      	str	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	4610      	mov	r0, r2
 8002ae4:	f7ff fb00 	bl	80020e8 <PCD_GET_EP_RX_CNT>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	461a      	mov	r2, r3
 8002aec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002aee:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002af0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002af2:	69db      	ldr	r3, [r3, #28]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d019      	beq.n	8002b2c <PCD_EP_ISR_Handler+0x190>
 8002af8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002afa:	695b      	ldr	r3, [r3, #20]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d015      	beq.n	8002b2c <PCD_EP_ISR_Handler+0x190>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6818      	ldr	r0, [r3, #0]
 8002b04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b06:	6959      	ldr	r1, [r3, #20]
 8002b08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b0a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002b0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b0e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	f005 f916 	bl	8007d42 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002b16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b18:	695a      	ldr	r2, [r3, #20]
 8002b1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b1c:	69db      	ldr	r3, [r3, #28]
 8002b1e:	441a      	add	r2, r3
 8002b20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b22:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002b24:	2100      	movs	r1, #0
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f006 fefd 	bl	8009926 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	867b      	strh	r3, [r7, #50]	@ 0x32

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002b34:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002b36:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	f040 825a 	bne.w	8002ff4 <PCD_EP_ISR_Handler+0x658>
 8002b40:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002b42:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002b46:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002b4a:	f000 8253 	beq.w	8002ff4 <PCD_EP_ISR_Handler+0x658>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002b4e:	4b2d      	ldr	r3, [pc, #180]	@ (8002c04 <PCD_EP_ISR_Handler+0x268>)
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	4a2c      	ldr	r2, [pc, #176]	@ (8002c04 <PCD_EP_ISR_Handler+0x268>)
 8002b54:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8002b58:	6053      	str	r3, [r2, #4]
 8002b5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d106      	bne.n	8002b70 <PCD_EP_ISR_Handler+0x1d4>
 8002b62:	4b28      	ldr	r3, [pc, #160]	@ (8002c04 <PCD_EP_ISR_Handler+0x268>)
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	4a27      	ldr	r2, [pc, #156]	@ (8002c04 <PCD_EP_ISR_Handler+0x268>)
 8002b68:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002b6c:	6053      	str	r3, [r2, #4]
 8002b6e:	e02e      	b.n	8002bce <PCD_EP_ISR_Handler+0x232>
 8002b70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b72:	691b      	ldr	r3, [r3, #16]
 8002b74:	2b3e      	cmp	r3, #62	@ 0x3e
 8002b76:	d814      	bhi.n	8002ba2 <PCD_EP_ISR_Handler+0x206>
 8002b78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b7a:	691b      	ldr	r3, [r3, #16]
 8002b7c:	085b      	lsrs	r3, r3, #1
 8002b7e:	617b      	str	r3, [r7, #20]
 8002b80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b82:	691b      	ldr	r3, [r3, #16]
 8002b84:	f003 0301 	and.w	r3, r3, #1
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d002      	beq.n	8002b92 <PCD_EP_ISR_Handler+0x1f6>
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	3301      	adds	r3, #1
 8002b90:	617b      	str	r3, [r7, #20]
 8002b92:	4b1c      	ldr	r3, [pc, #112]	@ (8002c04 <PCD_EP_ISR_Handler+0x268>)
 8002b94:	685a      	ldr	r2, [r3, #4]
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	069b      	lsls	r3, r3, #26
 8002b9a:	491a      	ldr	r1, [pc, #104]	@ (8002c04 <PCD_EP_ISR_Handler+0x268>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	604b      	str	r3, [r1, #4]
 8002ba0:	e015      	b.n	8002bce <PCD_EP_ISR_Handler+0x232>
 8002ba2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	095b      	lsrs	r3, r3, #5
 8002ba8:	617b      	str	r3, [r7, #20]
 8002baa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	f003 031f 	and.w	r3, r3, #31
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d102      	bne.n	8002bbc <PCD_EP_ISR_Handler+0x220>
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	3b01      	subs	r3, #1
 8002bba:	617b      	str	r3, [r7, #20]
 8002bbc:	4b11      	ldr	r3, [pc, #68]	@ (8002c04 <PCD_EP_ISR_Handler+0x268>)
 8002bbe:	685a      	ldr	r2, [r3, #4]
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	069b      	lsls	r3, r3, #26
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	4a0f      	ldr	r2, [pc, #60]	@ (8002c04 <PCD_EP_ISR_Handler+0x268>)
 8002bc8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002bcc:	6053      	str	r3, [r2, #4]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8002c08 <PCD_EP_ISR_Handler+0x26c>)
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	613b      	str	r3, [r7, #16]
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002be0:	613b      	str	r3, [r7, #16]
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002be8:	613b      	str	r3, [r7, #16]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002bf4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002bf8:	6013      	str	r3, [r2, #0]
 8002bfa:	e1fb      	b.n	8002ff4 <PCD_EP_ISR_Handler+0x658>
 8002bfc:	07ff8f0f 	.word	0x07ff8f0f
 8002c00:	07ff0f8f 	.word	0x07ff0f8f
 8002c04:	40016400 	.word	0x40016400
 8002c08:	07ffbf8f 	.word	0x07ffbf8f
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	461a      	mov	r2, r3
 8002c12:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	4413      	add	r3, r2
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	867b      	strh	r3, [r7, #50]	@ 0x32

      if ((wEPVal & USB_EP_VTRX) != 0U)
 8002c1e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	f280 80bd 	bge.w	8002da2 <PCD_EP_ISR_Handler+0x406>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	4413      	add	r3, r2
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	4b9e      	ldr	r3, [pc, #632]	@ (8002eb4 <PCD_EP_ISR_Handler+0x518>)
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	61fb      	str	r3, [r7, #28]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	461a      	mov	r2, r3
 8002c44:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	4413      	add	r3, r2
 8002c4c:	69fa      	ldr	r2, [r7, #28]
 8002c4e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002c52:	601a      	str	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002c54:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8002c58:	4613      	mov	r3, r2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	4413      	add	r3, r2
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	4413      	add	r3, r2
 8002c68:	3304      	adds	r3, #4
 8002c6a:	637b      	str	r3, [r7, #52]	@ 0x34

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002c6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c6e:	7b1b      	ldrb	r3, [r3, #12]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d116      	bne.n	8002ca2 <PCD_EP_ISR_Handler+0x306>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	4610      	mov	r0, r2
 8002c80:	f7ff fa32 	bl	80020e8 <PCD_GET_EP_RX_CNT>
 8002c84:	4603      	mov	r3, r0
 8002c86:	84bb      	strh	r3, [r7, #36]	@ 0x24

          if (count != 0U)
 8002c88:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d067      	beq.n	8002d5e <PCD_EP_ISR_Handler+0x3c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6818      	ldr	r0, [r3, #0]
 8002c92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c94:	6959      	ldr	r1, [r3, #20]
 8002c96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c98:	88da      	ldrh	r2, [r3, #6]
 8002c9a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002c9c:	f005 f851 	bl	8007d42 <USB_ReadPMA>
 8002ca0:	e05d      	b.n	8002d5e <PCD_EP_ISR_Handler+0x3c2>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002ca2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ca4:	78db      	ldrb	r3, [r3, #3]
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d108      	bne.n	8002cbc <PCD_EP_ISR_Handler+0x320>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002caa:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002cac:	461a      	mov	r2, r3
 8002cae:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f000 f9ad 	bl	8003010 <HAL_PCD_EP_DB_Receive>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8002cba:	e050      	b.n	8002d5e <PCD_EP_ISR_Handler+0x3c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	4413      	add	r3, r2
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	4b7a      	ldr	r3, [pc, #488]	@ (8002eb8 <PCD_EP_ISR_Handler+0x51c>)
 8002cce:	4013      	ands	r3, r2
 8002cd0:	61bb      	str	r3, [r7, #24]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	441a      	add	r2, r3
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ce6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002cea:	6013      	str	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	4413      	add	r3, r2
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d016      	beq.n	8002d32 <PCD_EP_ISR_Handler+0x396>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	4610      	mov	r0, r2
 8002d10:	f7ff fa0b 	bl	800212a <PCD_GET_EP_DBUF0_CNT>
 8002d14:	4603      	mov	r3, r0
 8002d16:	84bb      	strh	r3, [r7, #36]	@ 0x24

              if (count != 0U)
 8002d18:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d01f      	beq.n	8002d5e <PCD_EP_ISR_Handler+0x3c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6818      	ldr	r0, [r3, #0]
 8002d22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d24:	6959      	ldr	r1, [r3, #20]
 8002d26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d28:	891a      	ldrh	r2, [r3, #8]
 8002d2a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002d2c:	f005 f809 	bl	8007d42 <USB_ReadPMA>
 8002d30:	e015      	b.n	8002d5e <PCD_EP_ISR_Handler+0x3c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	4610      	mov	r0, r2
 8002d3e:	f7ff fa15 	bl	800216c <PCD_GET_EP_DBUF1_CNT>
 8002d42:	4603      	mov	r3, r0
 8002d44:	84bb      	strh	r3, [r7, #36]	@ 0x24

              if (count != 0U)
 8002d46:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d008      	beq.n	8002d5e <PCD_EP_ISR_Handler+0x3c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6818      	ldr	r0, [r3, #0]
 8002d50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d52:	6959      	ldr	r1, [r3, #20]
 8002d54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d56:	895a      	ldrh	r2, [r3, #10]
 8002d58:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002d5a:	f004 fff2 	bl	8007d42 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002d5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d60:	69da      	ldr	r2, [r3, #28]
 8002d62:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002d64:	441a      	add	r2, r3
 8002d66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d68:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002d6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d6c:	695a      	ldr	r2, [r3, #20]
 8002d6e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002d70:	441a      	add	r2, r3
 8002d72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d74:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002d76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d78:	699b      	ldr	r3, [r3, #24]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d004      	beq.n	8002d88 <PCD_EP_ISR_Handler+0x3ec>
 8002d7e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002d80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d82:	691b      	ldr	r3, [r3, #16]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d206      	bcs.n	8002d96 <PCD_EP_ISR_Handler+0x3fa>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002d88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f006 fdc9 	bl	8009926 <HAL_PCD_DataOutStageCallback>
 8002d94:	e005      	b.n	8002da2 <PCD_EP_ISR_Handler+0x406>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f003 fdf9 	bl	8006994 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_VTTX) != 0U)
 8002da2:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002da4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	f000 8123 	beq.w	8002ff4 <PCD_EP_ISR_Handler+0x658>
      {
        ep = &hpcd->IN_ep[epindex];
 8002dae:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8002db2:	4613      	mov	r3, r2
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	4413      	add	r3, r2
 8002db8:	00db      	lsls	r3, r3, #3
 8002dba:	3310      	adds	r3, #16
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	3304      	adds	r3, #4
 8002dc2:	637b      	str	r3, [r7, #52]	@ 0x34

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	461a      	mov	r2, r3
 8002dca:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	4413      	add	r3, r2
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	4b39      	ldr	r3, [pc, #228]	@ (8002ebc <PCD_EP_ISR_Handler+0x520>)
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	461a      	mov	r2, r3
 8002de0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	4413      	add	r3, r2
 8002de8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002dea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002dee:	601a      	str	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002df0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002df2:	78db      	ldrb	r3, [r3, #3]
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	f040 80b8 	bne.w	8002f6a <PCD_EP_ISR_Handler+0x5ce>
        {
          ep->xfer_len = 0U;
 8002dfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002e00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e02:	7b1b      	ldrb	r3, [r3, #12]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	f000 80a9 	beq.w	8002f5c <PCD_EP_ISR_Handler+0x5c0>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002e0a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002e0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d055      	beq.n	8002ec0 <PCD_EP_ISR_Handler+0x524>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e16:	785b      	ldrb	r3, [r3, #1]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d124      	bne.n	8002e66 <PCD_EP_ISR_Handler+0x4ca>
 8002e1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	00db      	lsls	r3, r3, #3
 8002e22:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002e26:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	00db      	lsls	r3, r3, #3
 8002e32:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002e36:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002e3a:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8002e3e:	601a      	str	r2, [r3, #0]
 8002e40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	00db      	lsls	r3, r3, #3
 8002e46:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002e4a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	00db      	lsls	r3, r3, #3
 8002e56:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002e5a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002e5e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002e62:	601a      	str	r2, [r3, #0]
 8002e64:	e07a      	b.n	8002f5c <PCD_EP_ISR_Handler+0x5c0>
 8002e66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e68:	785b      	ldrb	r3, [r3, #1]
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d176      	bne.n	8002f5c <PCD_EP_ISR_Handler+0x5c0>
 8002e6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	00db      	lsls	r3, r3, #3
 8002e74:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002e78:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002e88:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002e8c:	b292      	uxth	r2, r2
 8002e8e:	601a      	str	r2, [r3, #0]
 8002e90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	00db      	lsls	r3, r3, #3
 8002e96:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8002e9a:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8002e9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002ea8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002eac:	6812      	ldr	r2, [r2, #0]
 8002eae:	601a      	str	r2, [r3, #0]
 8002eb0:	e054      	b.n	8002f5c <PCD_EP_ISR_Handler+0x5c0>
 8002eb2:	bf00      	nop
 8002eb4:	07ff0f8f 	.word	0x07ff0f8f
 8002eb8:	07ff8f8f 	.word	0x07ff8f8f
 8002ebc:	07ff8f0f 	.word	0x07ff8f0f
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ec0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ec2:	785b      	ldrb	r3, [r3, #1]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d124      	bne.n	8002f12 <PCD_EP_ISR_Handler+0x576>
 8002ec8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	00db      	lsls	r3, r3, #3
 8002ece:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002ed2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002ed6:	685a      	ldr	r2, [r3, #4]
 8002ed8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	00db      	lsls	r3, r3, #3
 8002ede:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002ee2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002ee6:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8002eea:	605a      	str	r2, [r3, #4]
 8002eec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	00db      	lsls	r3, r3, #3
 8002ef2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002ef6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002efa:	685a      	ldr	r2, [r3, #4]
 8002efc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	00db      	lsls	r3, r3, #3
 8002f02:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002f06:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002f0a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002f0e:	605a      	str	r2, [r3, #4]
 8002f10:	e024      	b.n	8002f5c <PCD_EP_ISR_Handler+0x5c0>
 8002f12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f14:	785b      	ldrb	r3, [r3, #1]
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d120      	bne.n	8002f5c <PCD_EP_ISR_Handler+0x5c0>
 8002f1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002f24:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002f28:	685a      	ldr	r2, [r3, #4]
 8002f2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	00db      	lsls	r3, r3, #3
 8002f30:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002f34:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002f38:	b292      	uxth	r2, r2
 8002f3a:	605a      	str	r2, [r3, #4]
 8002f3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	00db      	lsls	r3, r3, #3
 8002f42:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8002f46:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8002f4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	00db      	lsls	r3, r3, #3
 8002f50:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002f54:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002f58:	6852      	ldr	r2, [r2, #4]
 8002f5a:	605a      	str	r2, [r3, #4]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002f5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	4619      	mov	r1, r3
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f006 fcfa 	bl	800995c <HAL_PCD_DataInStageCallback>
 8002f68:	e044      	b.n	8002ff4 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002f6a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002f6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d139      	bne.n	8002fe8 <PCD_EP_ISR_Handler+0x64c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002f74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	00db      	lsls	r3, r3, #3
 8002f7a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002f7e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	0c1b      	lsrs	r3, r3, #16
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f8c:	84fb      	strh	r3, [r7, #38]	@ 0x26

            if (ep->xfer_len > TxPctSize)
 8002f8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f90:	699a      	ldr	r2, [r3, #24]
 8002f92:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d906      	bls.n	8002fa6 <PCD_EP_ISR_Handler+0x60a>
            {
              ep->xfer_len -= TxPctSize;
 8002f98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f9a:	699a      	ldr	r2, [r3, #24]
 8002f9c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002f9e:	1ad2      	subs	r2, r2, r3
 8002fa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fa2:	619a      	str	r2, [r3, #24]
 8002fa4:	e002      	b.n	8002fac <PCD_EP_ISR_Handler+0x610>
            }
            else
            {
              ep->xfer_len = 0U;
 8002fa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fa8:	2200      	movs	r2, #0
 8002faa:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002fac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d106      	bne.n	8002fc2 <PCD_EP_ISR_Handler+0x626>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002fb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	4619      	mov	r1, r3
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f006 fcce 	bl	800995c <HAL_PCD_DataInStageCallback>
 8002fc0:	e018      	b.n	8002ff4 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002fc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fc4:	695a      	ldr	r2, [r3, #20]
 8002fc6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002fc8:	441a      	add	r2, r3
 8002fca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fcc:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002fce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fd0:	69da      	ldr	r2, [r3, #28]
 8002fd2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002fd4:	441a      	add	r2, r3
 8002fd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fd8:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f003 fcd7 	bl	8006994 <USB_EPStartXfer>
 8002fe6:	e005      	b.n	8002ff4 <PCD_EP_ISR_Handler+0x658>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002fe8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002fea:	461a      	mov	r2, r3
 8002fec:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 f8e8 	bl	80031c4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ffa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	f47f acd1 	bne.w	80029a6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3738      	adds	r7, #56	@ 0x38
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop

08003010 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b08a      	sub	sp, #40	@ 0x28
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	4613      	mov	r3, r2
 800301c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800301e:	88fb      	ldrh	r3, [r7, #6]
 8003020:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d062      	beq.n	80030ee <HAL_PCD_EP_DB_Receive+0xde>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	4619      	mov	r1, r3
 8003032:	4610      	mov	r0, r2
 8003034:	f7ff f879 	bl	800212a <PCD_GET_EP_DBUF0_CNT>
 8003038:	4603      	mov	r3, r0
 800303a:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	699a      	ldr	r2, [r3, #24]
 8003040:	8bfb      	ldrh	r3, [r7, #30]
 8003042:	429a      	cmp	r2, r3
 8003044:	d306      	bcc.n	8003054 <HAL_PCD_EP_DB_Receive+0x44>
    {
      ep->xfer_len -= count;
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	699a      	ldr	r2, [r3, #24]
 800304a:	8bfb      	ldrh	r3, [r7, #30]
 800304c:	1ad2      	subs	r2, r2, r3
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	619a      	str	r2, [r3, #24]
 8003052:	e002      	b.n	800305a <HAL_PCD_EP_DB_Receive+0x4a>
    }
    else
    {
      ep->xfer_len = 0U;
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	2200      	movs	r2, #0
 8003058:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d11b      	bne.n	800309a <HAL_PCD_EP_DB_Receive+0x8a>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	461a      	mov	r2, r3
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	4413      	add	r3, r2
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	4b52      	ldr	r3, [pc, #328]	@ (80031bc <HAL_PCD_EP_DB_Receive+0x1ac>)
 8003074:	4013      	ands	r3, r2
 8003076:	61bb      	str	r3, [r7, #24]
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800307e:	61bb      	str	r3, [r7, #24]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	461a      	mov	r2, r3
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	441a      	add	r2, r3
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003094:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003098:	6013      	str	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800309a:	88fb      	ldrh	r3, [r7, #6]
 800309c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d017      	beq.n	80030d4 <HAL_PCD_EP_DB_Receive+0xc4>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	461a      	mov	r2, r3
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	4413      	add	r3, r2
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	4b42      	ldr	r3, [pc, #264]	@ (80031c0 <HAL_PCD_EP_DB_Receive+0x1b0>)
 80030b6:	4013      	ands	r3, r2
 80030b8:	617b      	str	r3, [r7, #20]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	461a      	mov	r2, r3
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	441a      	add	r2, r3
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80030ce:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80030d2:	6013      	str	r3, [r2, #0]
    }

    if (count != 0U)
 80030d4:	8bfb      	ldrh	r3, [r7, #30]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d06b      	beq.n	80031b2 <HAL_PCD_EP_DB_Receive+0x1a2>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6818      	ldr	r0, [r3, #0]
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	6959      	ldr	r1, [r3, #20]
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	891a      	ldrh	r2, [r3, #8]
 80030e6:	8bfb      	ldrh	r3, [r7, #30]
 80030e8:	f004 fe2b 	bl	8007d42 <USB_ReadPMA>
 80030ec:	e061      	b.n	80031b2 <HAL_PCD_EP_DB_Receive+0x1a2>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	4619      	mov	r1, r3
 80030f8:	4610      	mov	r0, r2
 80030fa:	f7ff f837 	bl	800216c <PCD_GET_EP_DBUF1_CNT>
 80030fe:	4603      	mov	r3, r0
 8003100:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	699a      	ldr	r2, [r3, #24]
 8003106:	8bfb      	ldrh	r3, [r7, #30]
 8003108:	429a      	cmp	r2, r3
 800310a:	d306      	bcc.n	800311a <HAL_PCD_EP_DB_Receive+0x10a>
    {
      ep->xfer_len -= count;
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	699a      	ldr	r2, [r3, #24]
 8003110:	8bfb      	ldrh	r3, [r7, #30]
 8003112:	1ad2      	subs	r2, r2, r3
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	619a      	str	r2, [r3, #24]
 8003118:	e002      	b.n	8003120 <HAL_PCD_EP_DB_Receive+0x110>
    }
    else
    {
      ep->xfer_len = 0U;
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	2200      	movs	r2, #0
 800311e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d11b      	bne.n	8003160 <HAL_PCD_EP_DB_Receive+0x150>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	461a      	mov	r2, r3
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	4413      	add	r3, r2
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	4b20      	ldr	r3, [pc, #128]	@ (80031bc <HAL_PCD_EP_DB_Receive+0x1ac>)
 800313a:	4013      	ands	r3, r2
 800313c:	627b      	str	r3, [r7, #36]	@ 0x24
 800313e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003140:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003144:	627b      	str	r3, [r7, #36]	@ 0x24
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	461a      	mov	r2, r3
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	441a      	add	r2, r3
 8003154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003156:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800315a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800315e:	6013      	str	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003160:	88fb      	ldrh	r3, [r7, #6]
 8003162:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003166:	2b00      	cmp	r3, #0
 8003168:	d117      	bne.n	800319a <HAL_PCD_EP_DB_Receive+0x18a>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	461a      	mov	r2, r3
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	4413      	add	r3, r2
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	4b11      	ldr	r3, [pc, #68]	@ (80031c0 <HAL_PCD_EP_DB_Receive+0x1b0>)
 800317c:	4013      	ands	r3, r2
 800317e:	623b      	str	r3, [r7, #32]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	461a      	mov	r2, r3
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	441a      	add	r2, r3
 800318e:	6a3b      	ldr	r3, [r7, #32]
 8003190:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003194:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003198:	6013      	str	r3, [r2, #0]
    }

    if (count != 0U)
 800319a:	8bfb      	ldrh	r3, [r7, #30]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d008      	beq.n	80031b2 <HAL_PCD_EP_DB_Receive+0x1a2>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6818      	ldr	r0, [r3, #0]
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	6959      	ldr	r1, [r3, #20]
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	895a      	ldrh	r2, [r3, #10]
 80031ac:	8bfb      	ldrh	r3, [r7, #30]
 80031ae:	f004 fdc8 	bl	8007d42 <USB_ReadPMA>
    }
  }

  return count;
 80031b2:	8bfb      	ldrh	r3, [r7, #30]
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3728      	adds	r7, #40	@ 0x28
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	07ffbf8f 	.word	0x07ffbf8f
 80031c0:	07ff8f8f 	.word	0x07ff8f8f

080031c4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b08e      	sub	sp, #56	@ 0x38
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	4613      	mov	r3, r2
 80031d0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80031d2:	88fb      	ldrh	r3, [r7, #6]
 80031d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f000 81d5 	beq.w	8003588 <HAL_PCD_EP_DB_Transmit+0x3c4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	4619      	mov	r1, r3
 80031e8:	4610      	mov	r0, r2
 80031ea:	f7fe ff9e 	bl	800212a <PCD_GET_EP_DBUF0_CNT>
 80031ee:	4603      	mov	r3, r0
 80031f0:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len > TxPctSize)
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	699a      	ldr	r2, [r3, #24]
 80031f6:	8bfb      	ldrh	r3, [r7, #30]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d906      	bls.n	800320a <HAL_PCD_EP_DB_Transmit+0x46>
    {
      ep->xfer_len -= TxPctSize;
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	699a      	ldr	r2, [r3, #24]
 8003200:	8bfb      	ldrh	r3, [r7, #30]
 8003202:	1ad2      	subs	r2, r2, r3
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	619a      	str	r2, [r3, #24]
 8003208:	e002      	b.n	8003210 <HAL_PCD_EP_DB_Transmit+0x4c>
    }
    else
    {
      ep->xfer_len = 0U;
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	2200      	movs	r2, #0
 800320e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	2b00      	cmp	r3, #0
 8003216:	f040 80c1 	bne.w	800339c <HAL_PCD_EP_DB_Transmit+0x1d8>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	785b      	ldrb	r3, [r3, #1]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d124      	bne.n	800326c <HAL_PCD_EP_DB_Transmit+0xa8>
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	00db      	lsls	r3, r3, #3
 8003228:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800322c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	00db      	lsls	r3, r3, #3
 8003238:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800323c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003240:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8003244:	601a      	str	r2, [r3, #0]
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	00db      	lsls	r3, r3, #3
 800324c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003250:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003260:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003264:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003268:	601a      	str	r2, [r3, #0]
 800326a:	e024      	b.n	80032b6 <HAL_PCD_EP_DB_Transmit+0xf2>
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	785b      	ldrb	r3, [r3, #1]
 8003270:	2b01      	cmp	r3, #1
 8003272:	d120      	bne.n	80032b6 <HAL_PCD_EP_DB_Transmit+0xf2>
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	00db      	lsls	r3, r3, #3
 800327a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800327e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	00db      	lsls	r3, r3, #3
 800328a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800328e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003292:	b292      	uxth	r2, r2
 8003294:	601a      	str	r2, [r3, #0]
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	00db      	lsls	r3, r3, #3
 800329c:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 80032a0:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	00db      	lsls	r3, r3, #3
 80032aa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80032ae:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80032b2:	6812      	ldr	r2, [r2, #0]
 80032b4:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	785b      	ldrb	r3, [r3, #1]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d124      	bne.n	8003308 <HAL_PCD_EP_DB_Transmit+0x144>
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	00db      	lsls	r3, r3, #3
 80032c4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80032c8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80032cc:	685a      	ldr	r2, [r3, #4]
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	00db      	lsls	r3, r3, #3
 80032d4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80032d8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80032dc:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80032e0:	605a      	str	r2, [r3, #4]
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	00db      	lsls	r3, r3, #3
 80032e8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80032ec:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80032f0:	685a      	ldr	r2, [r3, #4]
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	00db      	lsls	r3, r3, #3
 80032f8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80032fc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003300:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003304:	605a      	str	r2, [r3, #4]
 8003306:	e024      	b.n	8003352 <HAL_PCD_EP_DB_Transmit+0x18e>
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	785b      	ldrb	r3, [r3, #1]
 800330c:	2b01      	cmp	r3, #1
 800330e:	d120      	bne.n	8003352 <HAL_PCD_EP_DB_Transmit+0x18e>
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	00db      	lsls	r3, r3, #3
 8003316:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800331a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800331e:	685a      	ldr	r2, [r3, #4]
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	00db      	lsls	r3, r3, #3
 8003326:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800332a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800332e:	b292      	uxth	r2, r2
 8003330:	605a      	str	r2, [r3, #4]
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	00db      	lsls	r3, r3, #3
 8003338:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 800333c:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	00db      	lsls	r3, r3, #3
 8003346:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800334a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800334e:	6852      	ldr	r2, [r2, #4]
 8003350:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	4619      	mov	r1, r3
 8003358:	68f8      	ldr	r0, [r7, #12]
 800335a:	f006 faff 	bl	800995c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800335e:	88fb      	ldrh	r3, [r7, #6]
 8003360:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003364:	2b00      	cmp	r3, #0
 8003366:	f000 82e5 	beq.w	8003934 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	461a      	mov	r2, r3
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	4413      	add	r3, r2
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	4b8e      	ldr	r3, [pc, #568]	@ (80035b4 <HAL_PCD_EP_DB_Transmit+0x3f0>)
 800337c:	4013      	ands	r3, r2
 800337e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	461a      	mov	r2, r3
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	441a      	add	r2, r3
 800338e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003390:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003394:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003398:	6013      	str	r3, [r2, #0]
 800339a:	e2cb      	b.n	8003934 <HAL_PCD_EP_DB_Transmit+0x770>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800339c:	88fb      	ldrh	r3, [r7, #6]
 800339e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d017      	beq.n	80033d6 <HAL_PCD_EP_DB_Transmit+0x212>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	461a      	mov	r2, r3
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	4413      	add	r3, r2
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	4b7f      	ldr	r3, [pc, #508]	@ (80035b4 <HAL_PCD_EP_DB_Transmit+0x3f0>)
 80033b8:	4013      	ands	r3, r2
 80033ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	461a      	mov	r2, r3
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	441a      	add	r2, r3
 80033ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033cc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80033d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80033d4:	6013      	str	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80033dc:	2b01      	cmp	r3, #1
 80033de:	f040 82a9 	bne.w	8003934 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        ep->xfer_buff += TxPctSize;
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	695a      	ldr	r2, [r3, #20]
 80033e6:	8bfb      	ldrh	r3, [r7, #30]
 80033e8:	441a      	add	r2, r3
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	69da      	ldr	r2, [r3, #28]
 80033f2:	8bfb      	ldrh	r3, [r7, #30]
 80033f4:	441a      	add	r2, r3
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	6a1a      	ldr	r2, [r3, #32]
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	429a      	cmp	r2, r3
 8003404:	d309      	bcc.n	800341a <HAL_PCD_EP_DB_Transmit+0x256>
        {
          len = ep->maxpacket;
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	691b      	ldr	r3, [r3, #16]
 800340a:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	6a1a      	ldr	r2, [r3, #32]
 8003410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003412:	1ad2      	subs	r2, r2, r3
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	621a      	str	r2, [r3, #32]
 8003418:	e014      	b.n	8003444 <HAL_PCD_EP_DB_Transmit+0x280>
        }
        else if (ep->xfer_len_db == 0U)
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	6a1b      	ldr	r3, [r3, #32]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d106      	bne.n	8003430 <HAL_PCD_EP_DB_Transmit+0x26c>
        {
          len = TxPctSize;
 8003422:	8bfb      	ldrh	r3, [r7, #30]
 8003424:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800342e:	e009      	b.n	8003444 <HAL_PCD_EP_DB_Transmit+0x280>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	6a1b      	ldr	r3, [r3, #32]
 800343c:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	2200      	movs	r2, #0
 8003442:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	785b      	ldrb	r3, [r3, #1]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d16a      	bne.n	8003522 <HAL_PCD_EP_DB_Transmit+0x35e>
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	00db      	lsls	r3, r3, #3
 8003452:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003456:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	00db      	lsls	r3, r3, #3
 8003462:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003466:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800346a:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800346e:	601a      	str	r2, [r3, #0]
 8003470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003472:	2b00      	cmp	r3, #0
 8003474:	d112      	bne.n	800349c <HAL_PCD_EP_DB_Transmit+0x2d8>
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	00db      	lsls	r3, r3, #3
 800347c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003480:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	00db      	lsls	r3, r3, #3
 800348c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003490:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003494:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003498:	601a      	str	r2, [r3, #0]
 800349a:	e06a      	b.n	8003572 <HAL_PCD_EP_DB_Transmit+0x3ae>
 800349c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800349e:	2b3e      	cmp	r3, #62	@ 0x3e
 80034a0:	d81e      	bhi.n	80034e0 <HAL_PCD_EP_DB_Transmit+0x31c>
 80034a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034a4:	085b      	lsrs	r3, r3, #1
 80034a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80034a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d002      	beq.n	80034b8 <HAL_PCD_EP_DB_Transmit+0x2f4>
 80034b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034b4:	3301      	adds	r3, #1
 80034b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	00db      	lsls	r3, r3, #3
 80034be:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80034c2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80034c6:	6819      	ldr	r1, [r3, #0]
 80034c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034ca:	069a      	lsls	r2, r3, #26
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	00db      	lsls	r3, r3, #3
 80034d2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80034d6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80034da:	430a      	orrs	r2, r1
 80034dc:	601a      	str	r2, [r3, #0]
 80034de:	e048      	b.n	8003572 <HAL_PCD_EP_DB_Transmit+0x3ae>
 80034e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e2:	095b      	lsrs	r3, r3, #5
 80034e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80034e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e8:	f003 031f 	and.w	r3, r3, #31
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d102      	bne.n	80034f6 <HAL_PCD_EP_DB_Transmit+0x332>
 80034f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034f2:	3b01      	subs	r3, #1
 80034f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	00db      	lsls	r3, r3, #3
 80034fc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003500:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003508:	069b      	lsls	r3, r3, #26
 800350a:	431a      	orrs	r2, r3
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	00db      	lsls	r3, r3, #3
 8003512:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003516:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800351a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800351e:	601a      	str	r2, [r3, #0]
 8003520:	e027      	b.n	8003572 <HAL_PCD_EP_DB_Transmit+0x3ae>
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	785b      	ldrb	r3, [r3, #1]
 8003526:	2b01      	cmp	r3, #1
 8003528:	d123      	bne.n	8003572 <HAL_PCD_EP_DB_Transmit+0x3ae>
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	00db      	lsls	r3, r3, #3
 8003530:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003534:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	00db      	lsls	r3, r3, #3
 8003540:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003544:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003548:	b292      	uxth	r2, r2
 800354a:	601a      	str	r2, [r3, #0]
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	00db      	lsls	r3, r3, #3
 8003552:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003556:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800355a:	6819      	ldr	r1, [r3, #0]
 800355c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800355e:	041a      	lsls	r2, r3, #16
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	00db      	lsls	r3, r3, #3
 8003566:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800356a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800356e:	430a      	orrs	r2, r1
 8003570:	601a      	str	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6818      	ldr	r0, [r3, #0]
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	6959      	ldr	r1, [r3, #20]
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	891a      	ldrh	r2, [r3, #8]
 800357e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003580:	b29b      	uxth	r3, r3
 8003582:	f004 fb7d 	bl	8007c80 <USB_WritePMA>
 8003586:	e1d5      	b.n	8003934 <HAL_PCD_EP_DB_Transmit+0x770>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	4619      	mov	r1, r3
 8003592:	4610      	mov	r0, r2
 8003594:	f7fe fdea 	bl	800216c <PCD_GET_EP_DBUF1_CNT>
 8003598:	4603      	mov	r3, r0
 800359a:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= TxPctSize)
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	699a      	ldr	r2, [r3, #24]
 80035a0:	8bfb      	ldrh	r3, [r7, #30]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d308      	bcc.n	80035b8 <HAL_PCD_EP_DB_Transmit+0x3f4>
    {
      ep->xfer_len -= TxPctSize;
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	699a      	ldr	r2, [r3, #24]
 80035aa:	8bfb      	ldrh	r3, [r7, #30]
 80035ac:	1ad2      	subs	r2, r2, r3
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	619a      	str	r2, [r3, #24]
 80035b2:	e004      	b.n	80035be <HAL_PCD_EP_DB_Transmit+0x3fa>
 80035b4:	07ff8f8f 	.word	0x07ff8f8f
    }
    else
    {
      ep->xfer_len = 0U;
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	2200      	movs	r2, #0
 80035bc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	f040 80c1 	bne.w	800374a <HAL_PCD_EP_DB_Transmit+0x586>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	785b      	ldrb	r3, [r3, #1]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d124      	bne.n	800361a <HAL_PCD_EP_DB_Transmit+0x456>
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	00db      	lsls	r3, r3, #3
 80035d6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80035da:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	00db      	lsls	r3, r3, #3
 80035e6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80035ea:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80035ee:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80035f2:	601a      	str	r2, [r3, #0]
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	00db      	lsls	r3, r3, #3
 80035fa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80035fe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	00db      	lsls	r3, r3, #3
 800360a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800360e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003612:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003616:	601a      	str	r2, [r3, #0]
 8003618:	e024      	b.n	8003664 <HAL_PCD_EP_DB_Transmit+0x4a0>
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	785b      	ldrb	r3, [r3, #1]
 800361e:	2b01      	cmp	r3, #1
 8003620:	d120      	bne.n	8003664 <HAL_PCD_EP_DB_Transmit+0x4a0>
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	00db      	lsls	r3, r3, #3
 8003628:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800362c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	00db      	lsls	r3, r3, #3
 8003638:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800363c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003640:	b292      	uxth	r2, r2
 8003642:	601a      	str	r2, [r3, #0]
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	00db      	lsls	r3, r3, #3
 800364a:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 800364e:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	00db      	lsls	r3, r3, #3
 8003658:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800365c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003660:	6812      	ldr	r2, [r2, #0]
 8003662:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	785b      	ldrb	r3, [r3, #1]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d124      	bne.n	80036b6 <HAL_PCD_EP_DB_Transmit+0x4f2>
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	00db      	lsls	r3, r3, #3
 8003672:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003676:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800367a:	685a      	ldr	r2, [r3, #4]
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	00db      	lsls	r3, r3, #3
 8003682:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003686:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800368a:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800368e:	605a      	str	r2, [r3, #4]
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	00db      	lsls	r3, r3, #3
 8003696:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800369a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800369e:	685a      	ldr	r2, [r3, #4]
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	00db      	lsls	r3, r3, #3
 80036a6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80036aa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80036ae:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80036b2:	605a      	str	r2, [r3, #4]
 80036b4:	e024      	b.n	8003700 <HAL_PCD_EP_DB_Transmit+0x53c>
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	785b      	ldrb	r3, [r3, #1]
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d120      	bne.n	8003700 <HAL_PCD_EP_DB_Transmit+0x53c>
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	00db      	lsls	r3, r3, #3
 80036c4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80036c8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80036cc:	685a      	ldr	r2, [r3, #4]
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	00db      	lsls	r3, r3, #3
 80036d4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80036d8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80036dc:	b292      	uxth	r2, r2
 80036de:	605a      	str	r2, [r3, #4]
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	00db      	lsls	r3, r3, #3
 80036e6:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 80036ea:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	00db      	lsls	r3, r3, #3
 80036f4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80036f8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80036fc:	6852      	ldr	r2, [r2, #4]
 80036fe:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	4619      	mov	r1, r3
 8003706:	68f8      	ldr	r0, [r7, #12]
 8003708:	f006 f928 	bl	800995c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800370c:	88fb      	ldrh	r3, [r7, #6]
 800370e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003712:	2b00      	cmp	r3, #0
 8003714:	f040 810e 	bne.w	8003934 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	461a      	mov	r2, r3
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	4413      	add	r3, r2
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	4b95      	ldr	r3, [pc, #596]	@ (8003980 <HAL_PCD_EP_DB_Transmit+0x7bc>)
 800372a:	4013      	ands	r3, r2
 800372c:	623b      	str	r3, [r7, #32]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	461a      	mov	r2, r3
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	441a      	add	r2, r3
 800373c:	6a3b      	ldr	r3, [r7, #32]
 800373e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003742:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003746:	6013      	str	r3, [r2, #0]
 8003748:	e0f4      	b.n	8003934 <HAL_PCD_EP_DB_Transmit+0x770>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800374a:	88fb      	ldrh	r3, [r7, #6]
 800374c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d117      	bne.n	8003784 <HAL_PCD_EP_DB_Transmit+0x5c0>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	461a      	mov	r2, r3
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	4413      	add	r3, r2
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	4b86      	ldr	r3, [pc, #536]	@ (8003980 <HAL_PCD_EP_DB_Transmit+0x7bc>)
 8003766:	4013      	ands	r3, r2
 8003768:	617b      	str	r3, [r7, #20]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	461a      	mov	r2, r3
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	441a      	add	r2, r3
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800377e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003782:	6013      	str	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800378a:	2b01      	cmp	r3, #1
 800378c:	f040 80d2 	bne.w	8003934 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        ep->xfer_buff += TxPctSize;
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	695a      	ldr	r2, [r3, #20]
 8003794:	8bfb      	ldrh	r3, [r7, #30]
 8003796:	441a      	add	r2, r3
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	69da      	ldr	r2, [r3, #28]
 80037a0:	8bfb      	ldrh	r3, [r7, #30]
 80037a2:	441a      	add	r2, r3
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	6a1a      	ldr	r2, [r3, #32]
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	691b      	ldr	r3, [r3, #16]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d309      	bcc.n	80037c8 <HAL_PCD_EP_DB_Transmit+0x604>
        {
          len = ep->maxpacket;
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	6a1a      	ldr	r2, [r3, #32]
 80037be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c0:	1ad2      	subs	r2, r2, r3
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	621a      	str	r2, [r3, #32]
 80037c6:	e014      	b.n	80037f2 <HAL_PCD_EP_DB_Transmit+0x62e>
        }
        else if (ep->xfer_len_db == 0U)
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	6a1b      	ldr	r3, [r3, #32]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d106      	bne.n	80037de <HAL_PCD_EP_DB_Transmit+0x61a>
        {
          len = TxPctSize;
 80037d0:	8bfb      	ldrh	r3, [r7, #30]
 80037d2:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80037dc:	e009      	b.n	80037f2 <HAL_PCD_EP_DB_Transmit+0x62e>
        }
        else
        {
          len = ep->xfer_len_db;
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	6a1b      	ldr	r3, [r3, #32]
 80037e2:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	2200      	movs	r2, #0
 80037e8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	785b      	ldrb	r3, [r3, #1]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d16a      	bne.n	80038d0 <HAL_PCD_EP_DB_Transmit+0x70c>
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	00db      	lsls	r3, r3, #3
 8003800:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003804:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003808:	685a      	ldr	r2, [r3, #4]
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	00db      	lsls	r3, r3, #3
 8003810:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003814:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003818:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800381c:	605a      	str	r2, [r3, #4]
 800381e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003820:	2b00      	cmp	r3, #0
 8003822:	d112      	bne.n	800384a <HAL_PCD_EP_DB_Transmit+0x686>
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	00db      	lsls	r3, r3, #3
 800382a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800382e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003832:	685a      	ldr	r2, [r3, #4]
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	00db      	lsls	r3, r3, #3
 800383a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800383e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003842:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003846:	605a      	str	r2, [r3, #4]
 8003848:	e06a      	b.n	8003920 <HAL_PCD_EP_DB_Transmit+0x75c>
 800384a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800384c:	2b3e      	cmp	r3, #62	@ 0x3e
 800384e:	d81e      	bhi.n	800388e <HAL_PCD_EP_DB_Transmit+0x6ca>
 8003850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003852:	085b      	lsrs	r3, r3, #1
 8003854:	61bb      	str	r3, [r7, #24]
 8003856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003858:	f003 0301 	and.w	r3, r3, #1
 800385c:	2b00      	cmp	r3, #0
 800385e:	d002      	beq.n	8003866 <HAL_PCD_EP_DB_Transmit+0x6a2>
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	3301      	adds	r3, #1
 8003864:	61bb      	str	r3, [r7, #24]
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	00db      	lsls	r3, r3, #3
 800386c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003870:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003874:	6859      	ldr	r1, [r3, #4]
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	069a      	lsls	r2, r3, #26
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	00db      	lsls	r3, r3, #3
 8003880:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003884:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003888:	430a      	orrs	r2, r1
 800388a:	605a      	str	r2, [r3, #4]
 800388c:	e048      	b.n	8003920 <HAL_PCD_EP_DB_Transmit+0x75c>
 800388e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003890:	095b      	lsrs	r3, r3, #5
 8003892:	61bb      	str	r3, [r7, #24]
 8003894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003896:	f003 031f 	and.w	r3, r3, #31
 800389a:	2b00      	cmp	r3, #0
 800389c:	d102      	bne.n	80038a4 <HAL_PCD_EP_DB_Transmit+0x6e0>
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	3b01      	subs	r3, #1
 80038a2:	61bb      	str	r3, [r7, #24]
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	00db      	lsls	r3, r3, #3
 80038aa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80038ae:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80038b2:	685a      	ldr	r2, [r3, #4]
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	069b      	lsls	r3, r3, #26
 80038b8:	431a      	orrs	r2, r3
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	00db      	lsls	r3, r3, #3
 80038c0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80038c4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80038c8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80038cc:	605a      	str	r2, [r3, #4]
 80038ce:	e027      	b.n	8003920 <HAL_PCD_EP_DB_Transmit+0x75c>
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	785b      	ldrb	r3, [r3, #1]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d123      	bne.n	8003920 <HAL_PCD_EP_DB_Transmit+0x75c>
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	00db      	lsls	r3, r3, #3
 80038de:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80038e2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80038e6:	685a      	ldr	r2, [r3, #4]
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	00db      	lsls	r3, r3, #3
 80038ee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80038f2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80038f6:	b292      	uxth	r2, r2
 80038f8:	605a      	str	r2, [r3, #4]
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	00db      	lsls	r3, r3, #3
 8003900:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003904:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003908:	6859      	ldr	r1, [r3, #4]
 800390a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800390c:	041a      	lsls	r2, r3, #16
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	00db      	lsls	r3, r3, #3
 8003914:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003918:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800391c:	430a      	orrs	r2, r1
 800391e:	605a      	str	r2, [r3, #4]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6818      	ldr	r0, [r3, #0]
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	6959      	ldr	r1, [r3, #20]
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	895a      	ldrh	r2, [r3, #10]
 800392c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800392e:	b29b      	uxth	r3, r3
 8003930:	f004 f9a6 	bl	8007c80 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	461a      	mov	r2, r3
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	4413      	add	r3, r2
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	4b0f      	ldr	r3, [pc, #60]	@ (8003984 <HAL_PCD_EP_DB_Transmit+0x7c0>)
 8003946:	4013      	ands	r3, r2
 8003948:	633b      	str	r3, [r7, #48]	@ 0x30
 800394a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800394c:	f083 0310 	eor.w	r3, r3, #16
 8003950:	633b      	str	r3, [r7, #48]	@ 0x30
 8003952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003954:	f083 0320 	eor.w	r3, r3, #32
 8003958:	633b      	str	r3, [r7, #48]	@ 0x30
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	461a      	mov	r2, r3
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	441a      	add	r2, r3
 8003968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800396a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800396e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003972:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3738      	adds	r7, #56	@ 0x38
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	07ff8f8f 	.word	0x07ff8f8f
 8003984:	07ff8fbf 	.word	0x07ff8fbf

08003988 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003988:	b480      	push	{r7}
 800398a:	b087      	sub	sp, #28
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	607b      	str	r3, [r7, #4]
 8003992:	460b      	mov	r3, r1
 8003994:	817b      	strh	r3, [r7, #10]
 8003996:	4613      	mov	r3, r2
 8003998:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800399a:	897b      	ldrh	r3, [r7, #10]
 800399c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d00c      	beq.n	80039c0 <HAL_PCDEx_PMAConfig+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039a6:	897b      	ldrh	r3, [r7, #10]
 80039a8:	f003 0207 	and.w	r2, r3, #7
 80039ac:	4613      	mov	r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	4413      	add	r3, r2
 80039b2:	00db      	lsls	r3, r3, #3
 80039b4:	3310      	adds	r3, #16
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	4413      	add	r3, r2
 80039ba:	3304      	adds	r3, #4
 80039bc:	617b      	str	r3, [r7, #20]
 80039be:	e00a      	b.n	80039d6 <HAL_PCDEx_PMAConfig+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80039c0:	897a      	ldrh	r2, [r7, #10]
 80039c2:	4613      	mov	r3, r2
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	4413      	add	r3, r2
 80039c8:	00db      	lsls	r3, r3, #3
 80039ca:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	4413      	add	r3, r2
 80039d2:	3304      	adds	r3, #4
 80039d4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80039d6:	893b      	ldrh	r3, [r7, #8]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d107      	bne.n	80039ec <HAL_PCDEx_PMAConfig+0x64>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	2200      	movs	r2, #0
 80039e0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	b29a      	uxth	r2, r3
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	80da      	strh	r2, [r3, #6]
 80039ea:	e00b      	b.n	8003a04 <HAL_PCDEx_PMAConfig+0x7c>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	2201      	movs	r2, #1
 80039f0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	b29a      	uxth	r2, r3
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	0c1b      	lsrs	r3, r3, #16
 80039fe:	b29a      	uxth	r2, r3
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	371c      	adds	r7, #28
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr

08003a12 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003a12:	b480      	push	{r7}
 8003a14:	b085      	sub	sp, #20
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
  hpcd->LPM_State = LPM_L0;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a34:	f043 0201 	orr.w	r2, r3, #1
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	655a      	str	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a40:	f043 0202 	orr.w	r2, r3, #2
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	655a      	str	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3714      	adds	r7, #20
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr

08003a56 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003a56:	b480      	push	{r7}
 8003a58:	b083      	sub	sp, #12
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
 8003a5e:	460b      	mov	r3, r1
 8003a60:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003a62:	bf00      	nop
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
	...

08003a70 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003a70:	b480      	push	{r7}
 8003a72:	af00      	add	r7, sp, #0
  SET_BIT(PWR->USBSCR, PWR_USBSCR_USB33SV);
 8003a74:	4b05      	ldr	r3, [pc, #20]	@ (8003a8c <HAL_PWREx_EnableVddUSB+0x1c>)
 8003a76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a78:	4a04      	ldr	r2, [pc, #16]	@ (8003a8c <HAL_PWREx_EnableVddUSB+0x1c>)
 8003a7a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003a7e:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003a80:	bf00      	nop
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop
 8003a8c:	44020800 	.word	0x44020800

08003a90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b088      	sub	sp, #32
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d102      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	f000 bc28 	b.w	80042f4 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003aa4:	4b94      	ldr	r3, [pc, #592]	@ (8003cf8 <HAL_RCC_OscConfig+0x268>)
 8003aa6:	69db      	ldr	r3, [r3, #28]
 8003aa8:	f003 0318 	and.w	r3, r3, #24
 8003aac:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8003aae:	4b92      	ldr	r3, [pc, #584]	@ (8003cf8 <HAL_RCC_OscConfig+0x268>)
 8003ab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ab2:	f003 0303 	and.w	r3, r3, #3
 8003ab6:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0310 	and.w	r3, r3, #16
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d05b      	beq.n	8003b7c <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	2b08      	cmp	r3, #8
 8003ac8:	d005      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x46>
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	2b18      	cmp	r3, #24
 8003ace:	d114      	bne.n	8003afa <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d111      	bne.n	8003afa <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	69db      	ldr	r3, [r3, #28]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d102      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	f000 bc08 	b.w	80042f4 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8003ae4:	4b84      	ldr	r3, [pc, #528]	@ (8003cf8 <HAL_RCC_OscConfig+0x268>)
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a1b      	ldr	r3, [r3, #32]
 8003af0:	041b      	lsls	r3, r3, #16
 8003af2:	4981      	ldr	r1, [pc, #516]	@ (8003cf8 <HAL_RCC_OscConfig+0x268>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8003af8:	e040      	b.n	8003b7c <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	69db      	ldr	r3, [r3, #28]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d023      	beq.n	8003b4a <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003b02:	4b7d      	ldr	r3, [pc, #500]	@ (8003cf8 <HAL_RCC_OscConfig+0x268>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a7c      	ldr	r2, [pc, #496]	@ (8003cf8 <HAL_RCC_OscConfig+0x268>)
 8003b08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b0e:	f7fd f915 	bl	8000d3c <HAL_GetTick>
 8003b12:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003b14:	e008      	b.n	8003b28 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8003b16:	f7fd f911 	bl	8000d3c <HAL_GetTick>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d901      	bls.n	8003b28 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e3e5      	b.n	80042f4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003b28:	4b73      	ldr	r3, [pc, #460]	@ (8003cf8 <HAL_RCC_OscConfig+0x268>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d0f0      	beq.n	8003b16 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8003b34:	4b70      	ldr	r3, [pc, #448]	@ (8003cf8 <HAL_RCC_OscConfig+0x268>)
 8003b36:	699b      	ldr	r3, [r3, #24]
 8003b38:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a1b      	ldr	r3, [r3, #32]
 8003b40:	041b      	lsls	r3, r3, #16
 8003b42:	496d      	ldr	r1, [pc, #436]	@ (8003cf8 <HAL_RCC_OscConfig+0x268>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	618b      	str	r3, [r1, #24]
 8003b48:	e018      	b.n	8003b7c <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003b4a:	4b6b      	ldr	r3, [pc, #428]	@ (8003cf8 <HAL_RCC_OscConfig+0x268>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a6a      	ldr	r2, [pc, #424]	@ (8003cf8 <HAL_RCC_OscConfig+0x268>)
 8003b50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b56:	f7fd f8f1 	bl	8000d3c <HAL_GetTick>
 8003b5a:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003b5c:	e008      	b.n	8003b70 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8003b5e:	f7fd f8ed 	bl	8000d3c <HAL_GetTick>
 8003b62:	4602      	mov	r2, r0
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d901      	bls.n	8003b70 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	e3c1      	b.n	80042f4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003b70:	4b61      	ldr	r3, [pc, #388]	@ (8003cf8 <HAL_RCC_OscConfig+0x268>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d1f0      	bne.n	8003b5e <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0301 	and.w	r3, r3, #1
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	f000 80a0 	beq.w	8003cca <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	2b10      	cmp	r3, #16
 8003b8e:	d005      	beq.n	8003b9c <HAL_RCC_OscConfig+0x10c>
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	2b18      	cmp	r3, #24
 8003b94:	d109      	bne.n	8003baa <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	2b03      	cmp	r3, #3
 8003b9a:	d106      	bne.n	8003baa <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	f040 8092 	bne.w	8003cca <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e3a4      	b.n	80042f4 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bb2:	d106      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x132>
 8003bb4:	4b50      	ldr	r3, [pc, #320]	@ (8003cf8 <HAL_RCC_OscConfig+0x268>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a4f      	ldr	r2, [pc, #316]	@ (8003cf8 <HAL_RCC_OscConfig+0x268>)
 8003bba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bbe:	6013      	str	r3, [r2, #0]
 8003bc0:	e058      	b.n	8003c74 <HAL_RCC_OscConfig+0x1e4>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d112      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x160>
 8003bca:	4b4b      	ldr	r3, [pc, #300]	@ (8003cf8 <HAL_RCC_OscConfig+0x268>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a4a      	ldr	r2, [pc, #296]	@ (8003cf8 <HAL_RCC_OscConfig+0x268>)
 8003bd0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bd4:	6013      	str	r3, [r2, #0]
 8003bd6:	4b48      	ldr	r3, [pc, #288]	@ (8003cf8 <HAL_RCC_OscConfig+0x268>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a47      	ldr	r2, [pc, #284]	@ (8003cf8 <HAL_RCC_OscConfig+0x268>)
 8003bdc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003be0:	6013      	str	r3, [r2, #0]
 8003be2:	4b45      	ldr	r3, [pc, #276]	@ (8003cf8 <HAL_RCC_OscConfig+0x268>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a44      	ldr	r2, [pc, #272]	@ (8003cf8 <HAL_RCC_OscConfig+0x268>)
 8003be8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003bec:	6013      	str	r3, [r2, #0]
 8003bee:	e041      	b.n	8003c74 <HAL_RCC_OscConfig+0x1e4>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003bf8:	d112      	bne.n	8003c20 <HAL_RCC_OscConfig+0x190>
 8003bfa:	4b3f      	ldr	r3, [pc, #252]	@ (8003cf8 <HAL_RCC_OscConfig+0x268>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a3e      	ldr	r2, [pc, #248]	@ (8003cf8 <HAL_RCC_OscConfig+0x268>)
 8003c00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c04:	6013      	str	r3, [r2, #0]
 8003c06:	4b3c      	ldr	r3, [pc, #240]	@ (8003cf8 <HAL_RCC_OscConfig+0x268>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a3b      	ldr	r2, [pc, #236]	@ (8003cf8 <HAL_RCC_OscConfig+0x268>)
 8003c0c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003c10:	6013      	str	r3, [r2, #0]
 8003c12:	4b39      	ldr	r3, [pc, #228]	@ (8003cf8 <HAL_RCC_OscConfig+0x268>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a38      	ldr	r2, [pc, #224]	@ (8003cf8 <HAL_RCC_OscConfig+0x268>)
 8003c18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c1c:	6013      	str	r3, [r2, #0]
 8003c1e:	e029      	b.n	8003c74 <HAL_RCC_OscConfig+0x1e4>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8003c28:	d112      	bne.n	8003c50 <HAL_RCC_OscConfig+0x1c0>
 8003c2a:	4b33      	ldr	r3, [pc, #204]	@ (8003cf8 <HAL_RCC_OscConfig+0x268>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a32      	ldr	r2, [pc, #200]	@ (8003cf8 <HAL_RCC_OscConfig+0x268>)
 8003c30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c34:	6013      	str	r3, [r2, #0]
 8003c36:	4b30      	ldr	r3, [pc, #192]	@ (8003cf8 <HAL_RCC_OscConfig+0x268>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a2f      	ldr	r2, [pc, #188]	@ (8003cf8 <HAL_RCC_OscConfig+0x268>)
 8003c3c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c40:	6013      	str	r3, [r2, #0]
 8003c42:	4b2d      	ldr	r3, [pc, #180]	@ (8003cf8 <HAL_RCC_OscConfig+0x268>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a2c      	ldr	r2, [pc, #176]	@ (8003cf8 <HAL_RCC_OscConfig+0x268>)
 8003c48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c4c:	6013      	str	r3, [r2, #0]
 8003c4e:	e011      	b.n	8003c74 <HAL_RCC_OscConfig+0x1e4>
 8003c50:	4b29      	ldr	r3, [pc, #164]	@ (8003cf8 <HAL_RCC_OscConfig+0x268>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a28      	ldr	r2, [pc, #160]	@ (8003cf8 <HAL_RCC_OscConfig+0x268>)
 8003c56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c5a:	6013      	str	r3, [r2, #0]
 8003c5c:	4b26      	ldr	r3, [pc, #152]	@ (8003cf8 <HAL_RCC_OscConfig+0x268>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a25      	ldr	r2, [pc, #148]	@ (8003cf8 <HAL_RCC_OscConfig+0x268>)
 8003c62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c66:	6013      	str	r3, [r2, #0]
 8003c68:	4b23      	ldr	r3, [pc, #140]	@ (8003cf8 <HAL_RCC_OscConfig+0x268>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a22      	ldr	r2, [pc, #136]	@ (8003cf8 <HAL_RCC_OscConfig+0x268>)
 8003c6e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003c72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d013      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c7c:	f7fd f85e 	bl	8000d3c <HAL_GetTick>
 8003c80:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c82:	e008      	b.n	8003c96 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003c84:	f7fd f85a 	bl	8000d3c <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b64      	cmp	r3, #100	@ 0x64
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e32e      	b.n	80042f4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c96:	4b18      	ldr	r3, [pc, #96]	@ (8003cf8 <HAL_RCC_OscConfig+0x268>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d0f0      	beq.n	8003c84 <HAL_RCC_OscConfig+0x1f4>
 8003ca2:	e012      	b.n	8003cca <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca4:	f7fd f84a 	bl	8000d3c <HAL_GetTick>
 8003ca8:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003caa:	e008      	b.n	8003cbe <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003cac:	f7fd f846 	bl	8000d3c <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b64      	cmp	r3, #100	@ 0x64
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e31a      	b.n	80042f4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003cbe:	4b0e      	ldr	r3, [pc, #56]	@ (8003cf8 <HAL_RCC_OscConfig+0x268>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1f0      	bne.n	8003cac <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	f000 809a 	beq.w	8003e0c <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d005      	beq.n	8003cea <HAL_RCC_OscConfig+0x25a>
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	2b18      	cmp	r3, #24
 8003ce2:	d149      	bne.n	8003d78 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d146      	bne.n	8003d78 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d104      	bne.n	8003cfc <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e2fe      	b.n	80042f4 <HAL_RCC_OscConfig+0x864>
 8003cf6:	bf00      	nop
 8003cf8:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d11c      	bne.n	8003d3c <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8003d02:	4b9a      	ldr	r3, [pc, #616]	@ (8003f6c <HAL_RCC_OscConfig+0x4dc>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0218 	and.w	r2, r3, #24
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d014      	beq.n	8003d3c <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8003d12:	4b96      	ldr	r3, [pc, #600]	@ (8003f6c <HAL_RCC_OscConfig+0x4dc>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f023 0218 	bic.w	r2, r3, #24
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	4993      	ldr	r1, [pc, #588]	@ (8003f6c <HAL_RCC_OscConfig+0x4dc>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8003d24:	f000 fdd0 	bl	80048c8 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003d28:	4b91      	ldr	r3, [pc, #580]	@ (8003f70 <HAL_RCC_OscConfig+0x4e0>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f7fc ff7b 	bl	8000c28 <HAL_InitTick>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d001      	beq.n	8003d3c <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e2db      	b.n	80042f4 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d3c:	f7fc fffe 	bl	8000d3c <HAL_GetTick>
 8003d40:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d42:	e008      	b.n	8003d56 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003d44:	f7fc fffa 	bl	8000d3c <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d901      	bls.n	8003d56 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e2ce      	b.n	80042f4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d56:	4b85      	ldr	r3, [pc, #532]	@ (8003f6c <HAL_RCC_OscConfig+0x4dc>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0302 	and.w	r3, r3, #2
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d0f0      	beq.n	8003d44 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8003d62:	4b82      	ldr	r3, [pc, #520]	@ (8003f6c <HAL_RCC_OscConfig+0x4dc>)
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	041b      	lsls	r3, r3, #16
 8003d70:	497e      	ldr	r1, [pc, #504]	@ (8003f6c <HAL_RCC_OscConfig+0x4dc>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8003d76:	e049      	b.n	8003e0c <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d02c      	beq.n	8003dda <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8003d80:	4b7a      	ldr	r3, [pc, #488]	@ (8003f6c <HAL_RCC_OscConfig+0x4dc>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f023 0218 	bic.w	r2, r3, #24
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	4977      	ldr	r1, [pc, #476]	@ (8003f6c <HAL_RCC_OscConfig+0x4dc>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8003d92:	4b76      	ldr	r3, [pc, #472]	@ (8003f6c <HAL_RCC_OscConfig+0x4dc>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a75      	ldr	r2, [pc, #468]	@ (8003f6c <HAL_RCC_OscConfig+0x4dc>)
 8003d98:	f043 0301 	orr.w	r3, r3, #1
 8003d9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d9e:	f7fc ffcd 	bl	8000d3c <HAL_GetTick>
 8003da2:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003da4:	e008      	b.n	8003db8 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003da6:	f7fc ffc9 	bl	8000d3c <HAL_GetTick>
 8003daa:	4602      	mov	r2, r0
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d901      	bls.n	8003db8 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e29d      	b.n	80042f4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003db8:	4b6c      	ldr	r3, [pc, #432]	@ (8003f6c <HAL_RCC_OscConfig+0x4dc>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0302 	and.w	r3, r3, #2
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d0f0      	beq.n	8003da6 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8003dc4:	4b69      	ldr	r3, [pc, #420]	@ (8003f6c <HAL_RCC_OscConfig+0x4dc>)
 8003dc6:	691b      	ldr	r3, [r3, #16]
 8003dc8:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	695b      	ldr	r3, [r3, #20]
 8003dd0:	041b      	lsls	r3, r3, #16
 8003dd2:	4966      	ldr	r1, [pc, #408]	@ (8003f6c <HAL_RCC_OscConfig+0x4dc>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	610b      	str	r3, [r1, #16]
 8003dd8:	e018      	b.n	8003e0c <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dda:	4b64      	ldr	r3, [pc, #400]	@ (8003f6c <HAL_RCC_OscConfig+0x4dc>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a63      	ldr	r2, [pc, #396]	@ (8003f6c <HAL_RCC_OscConfig+0x4dc>)
 8003de0:	f023 0301 	bic.w	r3, r3, #1
 8003de4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de6:	f7fc ffa9 	bl	8000d3c <HAL_GetTick>
 8003dea:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003dec:	e008      	b.n	8003e00 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003dee:	f7fc ffa5 	bl	8000d3c <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d901      	bls.n	8003e00 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	e279      	b.n	80042f4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e00:	4b5a      	ldr	r3, [pc, #360]	@ (8003f6c <HAL_RCC_OscConfig+0x4dc>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0302 	and.w	r3, r3, #2
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d1f0      	bne.n	8003dee <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0308 	and.w	r3, r3, #8
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d03c      	beq.n	8003e92 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d01c      	beq.n	8003e5a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e20:	4b52      	ldr	r3, [pc, #328]	@ (8003f6c <HAL_RCC_OscConfig+0x4dc>)
 8003e22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e26:	4a51      	ldr	r2, [pc, #324]	@ (8003f6c <HAL_RCC_OscConfig+0x4dc>)
 8003e28:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003e2c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e30:	f7fc ff84 	bl	8000d3c <HAL_GetTick>
 8003e34:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003e36:	e008      	b.n	8003e4a <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003e38:	f7fc ff80 	bl	8000d3c <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d901      	bls.n	8003e4a <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e254      	b.n	80042f4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003e4a:	4b48      	ldr	r3, [pc, #288]	@ (8003f6c <HAL_RCC_OscConfig+0x4dc>)
 8003e4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d0ef      	beq.n	8003e38 <HAL_RCC_OscConfig+0x3a8>
 8003e58:	e01b      	b.n	8003e92 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e5a:	4b44      	ldr	r3, [pc, #272]	@ (8003f6c <HAL_RCC_OscConfig+0x4dc>)
 8003e5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e60:	4a42      	ldr	r2, [pc, #264]	@ (8003f6c <HAL_RCC_OscConfig+0x4dc>)
 8003e62:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003e66:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e6a:	f7fc ff67 	bl	8000d3c <HAL_GetTick>
 8003e6e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003e70:	e008      	b.n	8003e84 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003e72:	f7fc ff63 	bl	8000d3c <HAL_GetTick>
 8003e76:	4602      	mov	r2, r0
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d901      	bls.n	8003e84 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
 8003e82:	e237      	b.n	80042f4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003e84:	4b39      	ldr	r3, [pc, #228]	@ (8003f6c <HAL_RCC_OscConfig+0x4dc>)
 8003e86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e8a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d1ef      	bne.n	8003e72 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0304 	and.w	r3, r3, #4
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	f000 80d2 	beq.w	8004044 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003ea0:	4b34      	ldr	r3, [pc, #208]	@ (8003f74 <HAL_RCC_OscConfig+0x4e4>)
 8003ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea4:	f003 0301 	and.w	r3, r3, #1
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d118      	bne.n	8003ede <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8003eac:	4b31      	ldr	r3, [pc, #196]	@ (8003f74 <HAL_RCC_OscConfig+0x4e4>)
 8003eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb0:	4a30      	ldr	r2, [pc, #192]	@ (8003f74 <HAL_RCC_OscConfig+0x4e4>)
 8003eb2:	f043 0301 	orr.w	r3, r3, #1
 8003eb6:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003eb8:	f7fc ff40 	bl	8000d3c <HAL_GetTick>
 8003ebc:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003ebe:	e008      	b.n	8003ed2 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ec0:	f7fc ff3c 	bl	8000d3c <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d901      	bls.n	8003ed2 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e210      	b.n	80042f4 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003ed2:	4b28      	ldr	r3, [pc, #160]	@ (8003f74 <HAL_RCC_OscConfig+0x4e4>)
 8003ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed6:	f003 0301 	and.w	r3, r3, #1
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d0f0      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d108      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x468>
 8003ee6:	4b21      	ldr	r3, [pc, #132]	@ (8003f6c <HAL_RCC_OscConfig+0x4dc>)
 8003ee8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003eec:	4a1f      	ldr	r2, [pc, #124]	@ (8003f6c <HAL_RCC_OscConfig+0x4dc>)
 8003eee:	f043 0301 	orr.w	r3, r3, #1
 8003ef2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003ef6:	e074      	b.n	8003fe2 <HAL_RCC_OscConfig+0x552>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d118      	bne.n	8003f32 <HAL_RCC_OscConfig+0x4a2>
 8003f00:	4b1a      	ldr	r3, [pc, #104]	@ (8003f6c <HAL_RCC_OscConfig+0x4dc>)
 8003f02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f06:	4a19      	ldr	r2, [pc, #100]	@ (8003f6c <HAL_RCC_OscConfig+0x4dc>)
 8003f08:	f023 0301 	bic.w	r3, r3, #1
 8003f0c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003f10:	4b16      	ldr	r3, [pc, #88]	@ (8003f6c <HAL_RCC_OscConfig+0x4dc>)
 8003f12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f16:	4a15      	ldr	r2, [pc, #84]	@ (8003f6c <HAL_RCC_OscConfig+0x4dc>)
 8003f18:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f1c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003f20:	4b12      	ldr	r3, [pc, #72]	@ (8003f6c <HAL_RCC_OscConfig+0x4dc>)
 8003f22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f26:	4a11      	ldr	r2, [pc, #68]	@ (8003f6c <HAL_RCC_OscConfig+0x4dc>)
 8003f28:	f023 0304 	bic.w	r3, r3, #4
 8003f2c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003f30:	e057      	b.n	8003fe2 <HAL_RCC_OscConfig+0x552>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	2b05      	cmp	r3, #5
 8003f38:	d11e      	bne.n	8003f78 <HAL_RCC_OscConfig+0x4e8>
 8003f3a:	4b0c      	ldr	r3, [pc, #48]	@ (8003f6c <HAL_RCC_OscConfig+0x4dc>)
 8003f3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f40:	4a0a      	ldr	r2, [pc, #40]	@ (8003f6c <HAL_RCC_OscConfig+0x4dc>)
 8003f42:	f043 0304 	orr.w	r3, r3, #4
 8003f46:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003f4a:	4b08      	ldr	r3, [pc, #32]	@ (8003f6c <HAL_RCC_OscConfig+0x4dc>)
 8003f4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f50:	4a06      	ldr	r2, [pc, #24]	@ (8003f6c <HAL_RCC_OscConfig+0x4dc>)
 8003f52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f56:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003f5a:	4b04      	ldr	r3, [pc, #16]	@ (8003f6c <HAL_RCC_OscConfig+0x4dc>)
 8003f5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f60:	4a02      	ldr	r2, [pc, #8]	@ (8003f6c <HAL_RCC_OscConfig+0x4dc>)
 8003f62:	f043 0301 	orr.w	r3, r3, #1
 8003f66:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003f6a:	e03a      	b.n	8003fe2 <HAL_RCC_OscConfig+0x552>
 8003f6c:	44020c00 	.word	0x44020c00
 8003f70:	20000008 	.word	0x20000008
 8003f74:	44020800 	.word	0x44020800
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	2b85      	cmp	r3, #133	@ 0x85
 8003f7e:	d118      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x522>
 8003f80:	4ba2      	ldr	r3, [pc, #648]	@ (800420c <HAL_RCC_OscConfig+0x77c>)
 8003f82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f86:	4aa1      	ldr	r2, [pc, #644]	@ (800420c <HAL_RCC_OscConfig+0x77c>)
 8003f88:	f043 0304 	orr.w	r3, r3, #4
 8003f8c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003f90:	4b9e      	ldr	r3, [pc, #632]	@ (800420c <HAL_RCC_OscConfig+0x77c>)
 8003f92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f96:	4a9d      	ldr	r2, [pc, #628]	@ (800420c <HAL_RCC_OscConfig+0x77c>)
 8003f98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f9c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003fa0:	4b9a      	ldr	r3, [pc, #616]	@ (800420c <HAL_RCC_OscConfig+0x77c>)
 8003fa2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003fa6:	4a99      	ldr	r2, [pc, #612]	@ (800420c <HAL_RCC_OscConfig+0x77c>)
 8003fa8:	f043 0301 	orr.w	r3, r3, #1
 8003fac:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003fb0:	e017      	b.n	8003fe2 <HAL_RCC_OscConfig+0x552>
 8003fb2:	4b96      	ldr	r3, [pc, #600]	@ (800420c <HAL_RCC_OscConfig+0x77c>)
 8003fb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003fb8:	4a94      	ldr	r2, [pc, #592]	@ (800420c <HAL_RCC_OscConfig+0x77c>)
 8003fba:	f023 0301 	bic.w	r3, r3, #1
 8003fbe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003fc2:	4b92      	ldr	r3, [pc, #584]	@ (800420c <HAL_RCC_OscConfig+0x77c>)
 8003fc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003fc8:	4a90      	ldr	r2, [pc, #576]	@ (800420c <HAL_RCC_OscConfig+0x77c>)
 8003fca:	f023 0304 	bic.w	r3, r3, #4
 8003fce:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003fd2:	4b8e      	ldr	r3, [pc, #568]	@ (800420c <HAL_RCC_OscConfig+0x77c>)
 8003fd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003fd8:	4a8c      	ldr	r2, [pc, #560]	@ (800420c <HAL_RCC_OscConfig+0x77c>)
 8003fda:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003fde:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d016      	beq.n	8004018 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fea:	f7fc fea7 	bl	8000d3c <HAL_GetTick>
 8003fee:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ff0:	e00a      	b.n	8004008 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ff2:	f7fc fea3 	bl	8000d3c <HAL_GetTick>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004000:	4293      	cmp	r3, r2
 8004002:	d901      	bls.n	8004008 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8004004:	2303      	movs	r3, #3
 8004006:	e175      	b.n	80042f4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004008:	4b80      	ldr	r3, [pc, #512]	@ (800420c <HAL_RCC_OscConfig+0x77c>)
 800400a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800400e:	f003 0302 	and.w	r3, r3, #2
 8004012:	2b00      	cmp	r3, #0
 8004014:	d0ed      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x562>
 8004016:	e015      	b.n	8004044 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004018:	f7fc fe90 	bl	8000d3c <HAL_GetTick>
 800401c:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800401e:	e00a      	b.n	8004036 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004020:	f7fc fe8c 	bl	8000d3c <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800402e:	4293      	cmp	r3, r2
 8004030:	d901      	bls.n	8004036 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e15e      	b.n	80042f4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004036:	4b75      	ldr	r3, [pc, #468]	@ (800420c <HAL_RCC_OscConfig+0x77c>)
 8004038:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800403c:	f003 0302 	and.w	r3, r3, #2
 8004040:	2b00      	cmp	r3, #0
 8004042:	d1ed      	bne.n	8004020 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0320 	and.w	r3, r3, #32
 800404c:	2b00      	cmp	r3, #0
 800404e:	d036      	beq.n	80040be <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004054:	2b00      	cmp	r3, #0
 8004056:	d019      	beq.n	800408c <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004058:	4b6c      	ldr	r3, [pc, #432]	@ (800420c <HAL_RCC_OscConfig+0x77c>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a6b      	ldr	r2, [pc, #428]	@ (800420c <HAL_RCC_OscConfig+0x77c>)
 800405e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004062:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004064:	f7fc fe6a 	bl	8000d3c <HAL_GetTick>
 8004068:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800406a:	e008      	b.n	800407e <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 800406c:	f7fc fe66 	bl	8000d3c <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	2b02      	cmp	r3, #2
 8004078:	d901      	bls.n	800407e <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e13a      	b.n	80042f4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800407e:	4b63      	ldr	r3, [pc, #396]	@ (800420c <HAL_RCC_OscConfig+0x77c>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d0f0      	beq.n	800406c <HAL_RCC_OscConfig+0x5dc>
 800408a:	e018      	b.n	80040be <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800408c:	4b5f      	ldr	r3, [pc, #380]	@ (800420c <HAL_RCC_OscConfig+0x77c>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a5e      	ldr	r2, [pc, #376]	@ (800420c <HAL_RCC_OscConfig+0x77c>)
 8004092:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004096:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004098:	f7fc fe50 	bl	8000d3c <HAL_GetTick>
 800409c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800409e:	e008      	b.n	80040b2 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80040a0:	f7fc fe4c 	bl	8000d3c <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d901      	bls.n	80040b2 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e120      	b.n	80042f4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80040b2:	4b56      	ldr	r3, [pc, #344]	@ (800420c <HAL_RCC_OscConfig+0x77c>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d1f0      	bne.n	80040a0 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	f000 8115 	beq.w	80042f2 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	2b18      	cmp	r3, #24
 80040cc:	f000 80af 	beq.w	800422e <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	f040 8086 	bne.w	80041e6 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80040da:	4b4c      	ldr	r3, [pc, #304]	@ (800420c <HAL_RCC_OscConfig+0x77c>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a4b      	ldr	r2, [pc, #300]	@ (800420c <HAL_RCC_OscConfig+0x77c>)
 80040e0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e6:	f7fc fe29 	bl	8000d3c <HAL_GetTick>
 80040ea:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80040ec:	e008      	b.n	8004100 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80040ee:	f7fc fe25 	bl	8000d3c <HAL_GetTick>
 80040f2:	4602      	mov	r2, r0
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d901      	bls.n	8004100 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	e0f9      	b.n	80042f4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004100:	4b42      	ldr	r3, [pc, #264]	@ (800420c <HAL_RCC_OscConfig+0x77c>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d1f0      	bne.n	80040ee <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 800410c:	4b3f      	ldr	r3, [pc, #252]	@ (800420c <HAL_RCC_OscConfig+0x77c>)
 800410e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004110:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004114:	f023 0303 	bic.w	r3, r3, #3
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004120:	0212      	lsls	r2, r2, #8
 8004122:	430a      	orrs	r2, r1
 8004124:	4939      	ldr	r1, [pc, #228]	@ (800420c <HAL_RCC_OscConfig+0x77c>)
 8004126:	4313      	orrs	r3, r2
 8004128:	628b      	str	r3, [r1, #40]	@ 0x28
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800412e:	3b01      	subs	r3, #1
 8004130:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004138:	3b01      	subs	r3, #1
 800413a:	025b      	lsls	r3, r3, #9
 800413c:	b29b      	uxth	r3, r3
 800413e:	431a      	orrs	r2, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004144:	3b01      	subs	r3, #1
 8004146:	041b      	lsls	r3, r3, #16
 8004148:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800414c:	431a      	orrs	r2, r3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004152:	3b01      	subs	r3, #1
 8004154:	061b      	lsls	r3, r3, #24
 8004156:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800415a:	492c      	ldr	r1, [pc, #176]	@ (800420c <HAL_RCC_OscConfig+0x77c>)
 800415c:	4313      	orrs	r3, r2
 800415e:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8004160:	4b2a      	ldr	r3, [pc, #168]	@ (800420c <HAL_RCC_OscConfig+0x77c>)
 8004162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004164:	4a29      	ldr	r2, [pc, #164]	@ (800420c <HAL_RCC_OscConfig+0x77c>)
 8004166:	f023 0310 	bic.w	r3, r3, #16
 800416a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004170:	4a26      	ldr	r2, [pc, #152]	@ (800420c <HAL_RCC_OscConfig+0x77c>)
 8004172:	00db      	lsls	r3, r3, #3
 8004174:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8004176:	4b25      	ldr	r3, [pc, #148]	@ (800420c <HAL_RCC_OscConfig+0x77c>)
 8004178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800417a:	4a24      	ldr	r2, [pc, #144]	@ (800420c <HAL_RCC_OscConfig+0x77c>)
 800417c:	f043 0310 	orr.w	r3, r3, #16
 8004180:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8004182:	4b22      	ldr	r3, [pc, #136]	@ (800420c <HAL_RCC_OscConfig+0x77c>)
 8004184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004186:	f023 020c 	bic.w	r2, r3, #12
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800418e:	491f      	ldr	r1, [pc, #124]	@ (800420c <HAL_RCC_OscConfig+0x77c>)
 8004190:	4313      	orrs	r3, r2
 8004192:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8004194:	4b1d      	ldr	r3, [pc, #116]	@ (800420c <HAL_RCC_OscConfig+0x77c>)
 8004196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004198:	f023 0220 	bic.w	r2, r3, #32
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041a0:	491a      	ldr	r1, [pc, #104]	@ (800420c <HAL_RCC_OscConfig+0x77c>)
 80041a2:	4313      	orrs	r3, r2
 80041a4:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 80041a6:	4b19      	ldr	r3, [pc, #100]	@ (800420c <HAL_RCC_OscConfig+0x77c>)
 80041a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041aa:	4a18      	ldr	r2, [pc, #96]	@ (800420c <HAL_RCC_OscConfig+0x77c>)
 80041ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041b0:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 80041b2:	4b16      	ldr	r3, [pc, #88]	@ (800420c <HAL_RCC_OscConfig+0x77c>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a15      	ldr	r2, [pc, #84]	@ (800420c <HAL_RCC_OscConfig+0x77c>)
 80041b8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80041bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041be:	f7fc fdbd 	bl	8000d3c <HAL_GetTick>
 80041c2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80041c4:	e008      	b.n	80041d8 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80041c6:	f7fc fdb9 	bl	8000d3c <HAL_GetTick>
 80041ca:	4602      	mov	r2, r0
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d901      	bls.n	80041d8 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e08d      	b.n	80042f4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80041d8:	4b0c      	ldr	r3, [pc, #48]	@ (800420c <HAL_RCC_OscConfig+0x77c>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d0f0      	beq.n	80041c6 <HAL_RCC_OscConfig+0x736>
 80041e4:	e085      	b.n	80042f2 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80041e6:	4b09      	ldr	r3, [pc, #36]	@ (800420c <HAL_RCC_OscConfig+0x77c>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a08      	ldr	r2, [pc, #32]	@ (800420c <HAL_RCC_OscConfig+0x77c>)
 80041ec:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80041f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f2:	f7fc fda3 	bl	8000d3c <HAL_GetTick>
 80041f6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80041f8:	e00a      	b.n	8004210 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80041fa:	f7fc fd9f 	bl	8000d3c <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	2b02      	cmp	r3, #2
 8004206:	d903      	bls.n	8004210 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8004208:	2303      	movs	r3, #3
 800420a:	e073      	b.n	80042f4 <HAL_RCC_OscConfig+0x864>
 800420c:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004210:	4b3a      	ldr	r3, [pc, #232]	@ (80042fc <HAL_RCC_OscConfig+0x86c>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d1ee      	bne.n	80041fa <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800421c:	4b37      	ldr	r3, [pc, #220]	@ (80042fc <HAL_RCC_OscConfig+0x86c>)
 800421e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004220:	4a36      	ldr	r2, [pc, #216]	@ (80042fc <HAL_RCC_OscConfig+0x86c>)
 8004222:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8004226:	f023 0303 	bic.w	r3, r3, #3
 800422a:	6293      	str	r3, [r2, #40]	@ 0x28
 800422c:	e061      	b.n	80042f2 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800422e:	4b33      	ldr	r3, [pc, #204]	@ (80042fc <HAL_RCC_OscConfig+0x86c>)
 8004230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004232:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004234:	4b31      	ldr	r3, [pc, #196]	@ (80042fc <HAL_RCC_OscConfig+0x86c>)
 8004236:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004238:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800423e:	2b01      	cmp	r3, #1
 8004240:	d031      	beq.n	80042a6 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	f003 0203 	and.w	r2, r3, #3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800424c:	429a      	cmp	r2, r3
 800424e:	d12a      	bne.n	80042a6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	0a1b      	lsrs	r3, r3, #8
 8004254:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 800425c:	429a      	cmp	r2, r3
 800425e:	d122      	bne.n	80042a6 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800426a:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 800426c:	429a      	cmp	r2, r3
 800426e:	d11a      	bne.n	80042a6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	0a5b      	lsrs	r3, r3, #9
 8004274:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800427c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800427e:	429a      	cmp	r2, r3
 8004280:	d111      	bne.n	80042a6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	0c1b      	lsrs	r3, r3, #16
 8004286:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800428e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8004290:	429a      	cmp	r2, r3
 8004292:	d108      	bne.n	80042a6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	0e1b      	lsrs	r3, r3, #24
 8004298:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a0:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d001      	beq.n	80042aa <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e024      	b.n	80042f4 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80042aa:	4b14      	ldr	r3, [pc, #80]	@ (80042fc <HAL_RCC_OscConfig+0x86c>)
 80042ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042ae:	08db      	lsrs	r3, r3, #3
 80042b0:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d01a      	beq.n	80042f2 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80042bc:	4b0f      	ldr	r3, [pc, #60]	@ (80042fc <HAL_RCC_OscConfig+0x86c>)
 80042be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042c0:	4a0e      	ldr	r2, [pc, #56]	@ (80042fc <HAL_RCC_OscConfig+0x86c>)
 80042c2:	f023 0310 	bic.w	r3, r3, #16
 80042c6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c8:	f7fc fd38 	bl	8000d3c <HAL_GetTick>
 80042cc:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 80042ce:	bf00      	nop
 80042d0:	f7fc fd34 	bl	8000d3c <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	4293      	cmp	r3, r2
 80042da:	d0f9      	beq.n	80042d0 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042e0:	4a06      	ldr	r2, [pc, #24]	@ (80042fc <HAL_RCC_OscConfig+0x86c>)
 80042e2:	00db      	lsls	r3, r3, #3
 80042e4:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80042e6:	4b05      	ldr	r3, [pc, #20]	@ (80042fc <HAL_RCC_OscConfig+0x86c>)
 80042e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ea:	4a04      	ldr	r2, [pc, #16]	@ (80042fc <HAL_RCC_OscConfig+0x86c>)
 80042ec:	f043 0310 	orr.w	r3, r3, #16
 80042f0:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3720      	adds	r7, #32
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	44020c00 	.word	0x44020c00

08004300 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d101      	bne.n	8004314 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e19e      	b.n	8004652 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004314:	4b83      	ldr	r3, [pc, #524]	@ (8004524 <HAL_RCC_ClockConfig+0x224>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 030f 	and.w	r3, r3, #15
 800431c:	683a      	ldr	r2, [r7, #0]
 800431e:	429a      	cmp	r2, r3
 8004320:	d910      	bls.n	8004344 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004322:	4b80      	ldr	r3, [pc, #512]	@ (8004524 <HAL_RCC_ClockConfig+0x224>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f023 020f 	bic.w	r2, r3, #15
 800432a:	497e      	ldr	r1, [pc, #504]	@ (8004524 <HAL_RCC_ClockConfig+0x224>)
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	4313      	orrs	r3, r2
 8004330:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004332:	4b7c      	ldr	r3, [pc, #496]	@ (8004524 <HAL_RCC_ClockConfig+0x224>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 030f 	and.w	r3, r3, #15
 800433a:	683a      	ldr	r2, [r7, #0]
 800433c:	429a      	cmp	r2, r3
 800433e:	d001      	beq.n	8004344 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e186      	b.n	8004652 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0310 	and.w	r3, r3, #16
 800434c:	2b00      	cmp	r3, #0
 800434e:	d012      	beq.n	8004376 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	695a      	ldr	r2, [r3, #20]
 8004354:	4b74      	ldr	r3, [pc, #464]	@ (8004528 <HAL_RCC_ClockConfig+0x228>)
 8004356:	6a1b      	ldr	r3, [r3, #32]
 8004358:	0a1b      	lsrs	r3, r3, #8
 800435a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800435e:	429a      	cmp	r2, r3
 8004360:	d909      	bls.n	8004376 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8004362:	4b71      	ldr	r3, [pc, #452]	@ (8004528 <HAL_RCC_ClockConfig+0x228>)
 8004364:	6a1b      	ldr	r3, [r3, #32]
 8004366:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	021b      	lsls	r3, r3, #8
 8004370:	496d      	ldr	r1, [pc, #436]	@ (8004528 <HAL_RCC_ClockConfig+0x228>)
 8004372:	4313      	orrs	r3, r2
 8004374:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0308 	and.w	r3, r3, #8
 800437e:	2b00      	cmp	r3, #0
 8004380:	d012      	beq.n	80043a8 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	691a      	ldr	r2, [r3, #16]
 8004386:	4b68      	ldr	r3, [pc, #416]	@ (8004528 <HAL_RCC_ClockConfig+0x228>)
 8004388:	6a1b      	ldr	r3, [r3, #32]
 800438a:	091b      	lsrs	r3, r3, #4
 800438c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004390:	429a      	cmp	r2, r3
 8004392:	d909      	bls.n	80043a8 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8004394:	4b64      	ldr	r3, [pc, #400]	@ (8004528 <HAL_RCC_ClockConfig+0x228>)
 8004396:	6a1b      	ldr	r3, [r3, #32]
 8004398:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	691b      	ldr	r3, [r3, #16]
 80043a0:	011b      	lsls	r3, r3, #4
 80043a2:	4961      	ldr	r1, [pc, #388]	@ (8004528 <HAL_RCC_ClockConfig+0x228>)
 80043a4:	4313      	orrs	r3, r2
 80043a6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0304 	and.w	r3, r3, #4
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d010      	beq.n	80043d6 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	68da      	ldr	r2, [r3, #12]
 80043b8:	4b5b      	ldr	r3, [pc, #364]	@ (8004528 <HAL_RCC_ClockConfig+0x228>)
 80043ba:	6a1b      	ldr	r3, [r3, #32]
 80043bc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d908      	bls.n	80043d6 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80043c4:	4b58      	ldr	r3, [pc, #352]	@ (8004528 <HAL_RCC_ClockConfig+0x228>)
 80043c6:	6a1b      	ldr	r3, [r3, #32]
 80043c8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	4955      	ldr	r1, [pc, #340]	@ (8004528 <HAL_RCC_ClockConfig+0x228>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 0302 	and.w	r3, r3, #2
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d010      	beq.n	8004404 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	689a      	ldr	r2, [r3, #8]
 80043e6:	4b50      	ldr	r3, [pc, #320]	@ (8004528 <HAL_RCC_ClockConfig+0x228>)
 80043e8:	6a1b      	ldr	r3, [r3, #32]
 80043ea:	f003 030f 	and.w	r3, r3, #15
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d908      	bls.n	8004404 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80043f2:	4b4d      	ldr	r3, [pc, #308]	@ (8004528 <HAL_RCC_ClockConfig+0x228>)
 80043f4:	6a1b      	ldr	r3, [r3, #32]
 80043f6:	f023 020f 	bic.w	r2, r3, #15
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	494a      	ldr	r1, [pc, #296]	@ (8004528 <HAL_RCC_ClockConfig+0x228>)
 8004400:	4313      	orrs	r3, r2
 8004402:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 0301 	and.w	r3, r3, #1
 800440c:	2b00      	cmp	r3, #0
 800440e:	f000 8093 	beq.w	8004538 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	2b03      	cmp	r3, #3
 8004418:	d107      	bne.n	800442a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800441a:	4b43      	ldr	r3, [pc, #268]	@ (8004528 <HAL_RCC_ClockConfig+0x228>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d121      	bne.n	800446a <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e113      	b.n	8004652 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	2b02      	cmp	r3, #2
 8004430:	d107      	bne.n	8004442 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004432:	4b3d      	ldr	r3, [pc, #244]	@ (8004528 <HAL_RCC_ClockConfig+0x228>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d115      	bne.n	800446a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e107      	b.n	8004652 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	2b01      	cmp	r3, #1
 8004448:	d107      	bne.n	800445a <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800444a:	4b37      	ldr	r3, [pc, #220]	@ (8004528 <HAL_RCC_ClockConfig+0x228>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004452:	2b00      	cmp	r3, #0
 8004454:	d109      	bne.n	800446a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e0fb      	b.n	8004652 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800445a:	4b33      	ldr	r3, [pc, #204]	@ (8004528 <HAL_RCC_ClockConfig+0x228>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	2b00      	cmp	r3, #0
 8004464:	d101      	bne.n	800446a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e0f3      	b.n	8004652 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 800446a:	4b2f      	ldr	r3, [pc, #188]	@ (8004528 <HAL_RCC_ClockConfig+0x228>)
 800446c:	69db      	ldr	r3, [r3, #28]
 800446e:	f023 0203 	bic.w	r2, r3, #3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	492c      	ldr	r1, [pc, #176]	@ (8004528 <HAL_RCC_ClockConfig+0x228>)
 8004478:	4313      	orrs	r3, r2
 800447a:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800447c:	f7fc fc5e 	bl	8000d3c <HAL_GetTick>
 8004480:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	2b03      	cmp	r3, #3
 8004488:	d112      	bne.n	80044b0 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800448a:	e00a      	b.n	80044a2 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800448c:	f7fc fc56 	bl	8000d3c <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	f241 3288 	movw	r2, #5000	@ 0x1388
 800449a:	4293      	cmp	r3, r2
 800449c:	d901      	bls.n	80044a2 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e0d7      	b.n	8004652 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044a2:	4b21      	ldr	r3, [pc, #132]	@ (8004528 <HAL_RCC_ClockConfig+0x228>)
 80044a4:	69db      	ldr	r3, [r3, #28]
 80044a6:	f003 0318 	and.w	r3, r3, #24
 80044aa:	2b18      	cmp	r3, #24
 80044ac:	d1ee      	bne.n	800448c <HAL_RCC_ClockConfig+0x18c>
 80044ae:	e043      	b.n	8004538 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d112      	bne.n	80044de <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80044b8:	e00a      	b.n	80044d0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80044ba:	f7fc fc3f 	bl	8000d3c <HAL_GetTick>
 80044be:	4602      	mov	r2, r0
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d901      	bls.n	80044d0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80044cc:	2303      	movs	r3, #3
 80044ce:	e0c0      	b.n	8004652 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80044d0:	4b15      	ldr	r3, [pc, #84]	@ (8004528 <HAL_RCC_ClockConfig+0x228>)
 80044d2:	69db      	ldr	r3, [r3, #28]
 80044d4:	f003 0318 	and.w	r3, r3, #24
 80044d8:	2b10      	cmp	r3, #16
 80044da:	d1ee      	bne.n	80044ba <HAL_RCC_ClockConfig+0x1ba>
 80044dc:	e02c      	b.n	8004538 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d122      	bne.n	800452c <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80044e6:	e00a      	b.n	80044fe <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80044e8:	f7fc fc28 	bl	8000d3c <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d901      	bls.n	80044fe <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e0a9      	b.n	8004652 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80044fe:	4b0a      	ldr	r3, [pc, #40]	@ (8004528 <HAL_RCC_ClockConfig+0x228>)
 8004500:	69db      	ldr	r3, [r3, #28]
 8004502:	f003 0318 	and.w	r3, r3, #24
 8004506:	2b08      	cmp	r3, #8
 8004508:	d1ee      	bne.n	80044e8 <HAL_RCC_ClockConfig+0x1e8>
 800450a:	e015      	b.n	8004538 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800450c:	f7fc fc16 	bl	8000d3c <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	f241 3288 	movw	r2, #5000	@ 0x1388
 800451a:	4293      	cmp	r3, r2
 800451c:	d906      	bls.n	800452c <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e097      	b.n	8004652 <HAL_RCC_ClockConfig+0x352>
 8004522:	bf00      	nop
 8004524:	40022000 	.word	0x40022000
 8004528:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800452c:	4b4b      	ldr	r3, [pc, #300]	@ (800465c <HAL_RCC_ClockConfig+0x35c>)
 800452e:	69db      	ldr	r3, [r3, #28]
 8004530:	f003 0318 	and.w	r3, r3, #24
 8004534:	2b00      	cmp	r3, #0
 8004536:	d1e9      	bne.n	800450c <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0302 	and.w	r3, r3, #2
 8004540:	2b00      	cmp	r3, #0
 8004542:	d010      	beq.n	8004566 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	689a      	ldr	r2, [r3, #8]
 8004548:	4b44      	ldr	r3, [pc, #272]	@ (800465c <HAL_RCC_ClockConfig+0x35c>)
 800454a:	6a1b      	ldr	r3, [r3, #32]
 800454c:	f003 030f 	and.w	r3, r3, #15
 8004550:	429a      	cmp	r2, r3
 8004552:	d208      	bcs.n	8004566 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8004554:	4b41      	ldr	r3, [pc, #260]	@ (800465c <HAL_RCC_ClockConfig+0x35c>)
 8004556:	6a1b      	ldr	r3, [r3, #32]
 8004558:	f023 020f 	bic.w	r2, r3, #15
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	493e      	ldr	r1, [pc, #248]	@ (800465c <HAL_RCC_ClockConfig+0x35c>)
 8004562:	4313      	orrs	r3, r2
 8004564:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004566:	4b3e      	ldr	r3, [pc, #248]	@ (8004660 <HAL_RCC_ClockConfig+0x360>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 030f 	and.w	r3, r3, #15
 800456e:	683a      	ldr	r2, [r7, #0]
 8004570:	429a      	cmp	r2, r3
 8004572:	d210      	bcs.n	8004596 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004574:	4b3a      	ldr	r3, [pc, #232]	@ (8004660 <HAL_RCC_ClockConfig+0x360>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f023 020f 	bic.w	r2, r3, #15
 800457c:	4938      	ldr	r1, [pc, #224]	@ (8004660 <HAL_RCC_ClockConfig+0x360>)
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	4313      	orrs	r3, r2
 8004582:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004584:	4b36      	ldr	r3, [pc, #216]	@ (8004660 <HAL_RCC_ClockConfig+0x360>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 030f 	and.w	r3, r3, #15
 800458c:	683a      	ldr	r2, [r7, #0]
 800458e:	429a      	cmp	r2, r3
 8004590:	d001      	beq.n	8004596 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e05d      	b.n	8004652 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0304 	and.w	r3, r3, #4
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d010      	beq.n	80045c4 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	68da      	ldr	r2, [r3, #12]
 80045a6:	4b2d      	ldr	r3, [pc, #180]	@ (800465c <HAL_RCC_ClockConfig+0x35c>)
 80045a8:	6a1b      	ldr	r3, [r3, #32]
 80045aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d208      	bcs.n	80045c4 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80045b2:	4b2a      	ldr	r3, [pc, #168]	@ (800465c <HAL_RCC_ClockConfig+0x35c>)
 80045b4:	6a1b      	ldr	r3, [r3, #32]
 80045b6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	4927      	ldr	r1, [pc, #156]	@ (800465c <HAL_RCC_ClockConfig+0x35c>)
 80045c0:	4313      	orrs	r3, r2
 80045c2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0308 	and.w	r3, r3, #8
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d012      	beq.n	80045f6 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	691a      	ldr	r2, [r3, #16]
 80045d4:	4b21      	ldr	r3, [pc, #132]	@ (800465c <HAL_RCC_ClockConfig+0x35c>)
 80045d6:	6a1b      	ldr	r3, [r3, #32]
 80045d8:	091b      	lsrs	r3, r3, #4
 80045da:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80045de:	429a      	cmp	r2, r3
 80045e0:	d209      	bcs.n	80045f6 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80045e2:	4b1e      	ldr	r3, [pc, #120]	@ (800465c <HAL_RCC_ClockConfig+0x35c>)
 80045e4:	6a1b      	ldr	r3, [r3, #32]
 80045e6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	011b      	lsls	r3, r3, #4
 80045f0:	491a      	ldr	r1, [pc, #104]	@ (800465c <HAL_RCC_ClockConfig+0x35c>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0310 	and.w	r3, r3, #16
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d012      	beq.n	8004628 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	695a      	ldr	r2, [r3, #20]
 8004606:	4b15      	ldr	r3, [pc, #84]	@ (800465c <HAL_RCC_ClockConfig+0x35c>)
 8004608:	6a1b      	ldr	r3, [r3, #32]
 800460a:	0a1b      	lsrs	r3, r3, #8
 800460c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004610:	429a      	cmp	r2, r3
 8004612:	d209      	bcs.n	8004628 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8004614:	4b11      	ldr	r3, [pc, #68]	@ (800465c <HAL_RCC_ClockConfig+0x35c>)
 8004616:	6a1b      	ldr	r3, [r3, #32]
 8004618:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	695b      	ldr	r3, [r3, #20]
 8004620:	021b      	lsls	r3, r3, #8
 8004622:	490e      	ldr	r1, [pc, #56]	@ (800465c <HAL_RCC_ClockConfig+0x35c>)
 8004624:	4313      	orrs	r3, r2
 8004626:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004628:	f000 f822 	bl	8004670 <HAL_RCC_GetSysClockFreq>
 800462c:	4602      	mov	r2, r0
 800462e:	4b0b      	ldr	r3, [pc, #44]	@ (800465c <HAL_RCC_ClockConfig+0x35c>)
 8004630:	6a1b      	ldr	r3, [r3, #32]
 8004632:	f003 030f 	and.w	r3, r3, #15
 8004636:	490b      	ldr	r1, [pc, #44]	@ (8004664 <HAL_RCC_ClockConfig+0x364>)
 8004638:	5ccb      	ldrb	r3, [r1, r3]
 800463a:	fa22 f303 	lsr.w	r3, r2, r3
 800463e:	4a0a      	ldr	r2, [pc, #40]	@ (8004668 <HAL_RCC_ClockConfig+0x368>)
 8004640:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004642:	4b0a      	ldr	r3, [pc, #40]	@ (800466c <HAL_RCC_ClockConfig+0x36c>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4618      	mov	r0, r3
 8004648:	f7fc faee 	bl	8000c28 <HAL_InitTick>
 800464c:	4603      	mov	r3, r0
 800464e:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8004650:	7afb      	ldrb	r3, [r7, #11]
}
 8004652:	4618      	mov	r0, r3
 8004654:	3710      	adds	r7, #16
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	44020c00 	.word	0x44020c00
 8004660:	40022000 	.word	0x40022000
 8004664:	0800c714 	.word	0x0800c714
 8004668:	20000004 	.word	0x20000004
 800466c:	20000008 	.word	0x20000008

08004670 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004670:	b480      	push	{r7}
 8004672:	b089      	sub	sp, #36	@ 0x24
 8004674:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8004676:	4b8c      	ldr	r3, [pc, #560]	@ (80048a8 <HAL_RCC_GetSysClockFreq+0x238>)
 8004678:	69db      	ldr	r3, [r3, #28]
 800467a:	f003 0318 	and.w	r3, r3, #24
 800467e:	2b08      	cmp	r3, #8
 8004680:	d102      	bne.n	8004688 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004682:	4b8a      	ldr	r3, [pc, #552]	@ (80048ac <HAL_RCC_GetSysClockFreq+0x23c>)
 8004684:	61fb      	str	r3, [r7, #28]
 8004686:	e107      	b.n	8004898 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004688:	4b87      	ldr	r3, [pc, #540]	@ (80048a8 <HAL_RCC_GetSysClockFreq+0x238>)
 800468a:	69db      	ldr	r3, [r3, #28]
 800468c:	f003 0318 	and.w	r3, r3, #24
 8004690:	2b00      	cmp	r3, #0
 8004692:	d112      	bne.n	80046ba <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8004694:	4b84      	ldr	r3, [pc, #528]	@ (80048a8 <HAL_RCC_GetSysClockFreq+0x238>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0320 	and.w	r3, r3, #32
 800469c:	2b00      	cmp	r3, #0
 800469e:	d009      	beq.n	80046b4 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80046a0:	4b81      	ldr	r3, [pc, #516]	@ (80048a8 <HAL_RCC_GetSysClockFreq+0x238>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	08db      	lsrs	r3, r3, #3
 80046a6:	f003 0303 	and.w	r3, r3, #3
 80046aa:	4a81      	ldr	r2, [pc, #516]	@ (80048b0 <HAL_RCC_GetSysClockFreq+0x240>)
 80046ac:	fa22 f303 	lsr.w	r3, r2, r3
 80046b0:	61fb      	str	r3, [r7, #28]
 80046b2:	e0f1      	b.n	8004898 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 80046b4:	4b7e      	ldr	r3, [pc, #504]	@ (80048b0 <HAL_RCC_GetSysClockFreq+0x240>)
 80046b6:	61fb      	str	r3, [r7, #28]
 80046b8:	e0ee      	b.n	8004898 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80046ba:	4b7b      	ldr	r3, [pc, #492]	@ (80048a8 <HAL_RCC_GetSysClockFreq+0x238>)
 80046bc:	69db      	ldr	r3, [r3, #28]
 80046be:	f003 0318 	and.w	r3, r3, #24
 80046c2:	2b10      	cmp	r3, #16
 80046c4:	d102      	bne.n	80046cc <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80046c6:	4b7b      	ldr	r3, [pc, #492]	@ (80048b4 <HAL_RCC_GetSysClockFreq+0x244>)
 80046c8:	61fb      	str	r3, [r7, #28]
 80046ca:	e0e5      	b.n	8004898 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046cc:	4b76      	ldr	r3, [pc, #472]	@ (80048a8 <HAL_RCC_GetSysClockFreq+0x238>)
 80046ce:	69db      	ldr	r3, [r3, #28]
 80046d0:	f003 0318 	and.w	r3, r3, #24
 80046d4:	2b18      	cmp	r3, #24
 80046d6:	f040 80dd 	bne.w	8004894 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80046da:	4b73      	ldr	r3, [pc, #460]	@ (80048a8 <HAL_RCC_GetSysClockFreq+0x238>)
 80046dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046de:	f003 0303 	and.w	r3, r3, #3
 80046e2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80046e4:	4b70      	ldr	r3, [pc, #448]	@ (80048a8 <HAL_RCC_GetSysClockFreq+0x238>)
 80046e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046e8:	0a1b      	lsrs	r3, r3, #8
 80046ea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80046ee:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80046f0:	4b6d      	ldr	r3, [pc, #436]	@ (80048a8 <HAL_RCC_GetSysClockFreq+0x238>)
 80046f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046f4:	091b      	lsrs	r3, r3, #4
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80046fc:	4b6a      	ldr	r3, [pc, #424]	@ (80048a8 <HAL_RCC_GetSysClockFreq+0x238>)
 80046fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8004700:	08db      	lsrs	r3, r3, #3
 8004702:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	fb02 f303 	mul.w	r3, r2, r3
 800470c:	ee07 3a90 	vmov	s15, r3
 8004710:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004714:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	2b00      	cmp	r3, #0
 800471c:	f000 80b7 	beq.w	800488e <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	2b01      	cmp	r3, #1
 8004724:	d003      	beq.n	800472e <HAL_RCC_GetSysClockFreq+0xbe>
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	2b03      	cmp	r3, #3
 800472a:	d056      	beq.n	80047da <HAL_RCC_GetSysClockFreq+0x16a>
 800472c:	e077      	b.n	800481e <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800472e:	4b5e      	ldr	r3, [pc, #376]	@ (80048a8 <HAL_RCC_GetSysClockFreq+0x238>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0320 	and.w	r3, r3, #32
 8004736:	2b00      	cmp	r3, #0
 8004738:	d02d      	beq.n	8004796 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800473a:	4b5b      	ldr	r3, [pc, #364]	@ (80048a8 <HAL_RCC_GetSysClockFreq+0x238>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	08db      	lsrs	r3, r3, #3
 8004740:	f003 0303 	and.w	r3, r3, #3
 8004744:	4a5a      	ldr	r2, [pc, #360]	@ (80048b0 <HAL_RCC_GetSysClockFreq+0x240>)
 8004746:	fa22 f303 	lsr.w	r3, r2, r3
 800474a:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	ee07 3a90 	vmov	s15, r3
 8004752:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	ee07 3a90 	vmov	s15, r3
 800475c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004760:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004764:	4b50      	ldr	r3, [pc, #320]	@ (80048a8 <HAL_RCC_GetSysClockFreq+0x238>)
 8004766:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004768:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800476c:	ee07 3a90 	vmov	s15, r3
 8004770:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8004774:	ed97 6a02 	vldr	s12, [r7, #8]
 8004778:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 80048b8 <HAL_RCC_GetSysClockFreq+0x248>
 800477c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004780:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8004784:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004788:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800478c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004790:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8004794:	e065      	b.n	8004862 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	ee07 3a90 	vmov	s15, r3
 800479c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047a0:	eddf 6a46 	vldr	s13, [pc, #280]	@ 80048bc <HAL_RCC_GetSysClockFreq+0x24c>
 80047a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047a8:	4b3f      	ldr	r3, [pc, #252]	@ (80048a8 <HAL_RCC_GetSysClockFreq+0x238>)
 80047aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047b0:	ee07 3a90 	vmov	s15, r3
 80047b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80047b8:	ed97 6a02 	vldr	s12, [r7, #8]
 80047bc:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80048b8 <HAL_RCC_GetSysClockFreq+0x248>
 80047c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80047c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80047c8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80047d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047d4:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80047d8:	e043      	b.n	8004862 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	ee07 3a90 	vmov	s15, r3
 80047e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047e4:	eddf 6a36 	vldr	s13, [pc, #216]	@ 80048c0 <HAL_RCC_GetSysClockFreq+0x250>
 80047e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047ec:	4b2e      	ldr	r3, [pc, #184]	@ (80048a8 <HAL_RCC_GetSysClockFreq+0x238>)
 80047ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047f4:	ee07 3a90 	vmov	s15, r3
 80047f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80047fc:	ed97 6a02 	vldr	s12, [r7, #8]
 8004800:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 80048b8 <HAL_RCC_GetSysClockFreq+0x248>
 8004804:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004808:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800480c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004810:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004814:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004818:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 800481c:	e021      	b.n	8004862 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	ee07 3a90 	vmov	s15, r3
 8004824:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004828:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80048c4 <HAL_RCC_GetSysClockFreq+0x254>
 800482c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004830:	4b1d      	ldr	r3, [pc, #116]	@ (80048a8 <HAL_RCC_GetSysClockFreq+0x238>)
 8004832:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004834:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004838:	ee07 3a90 	vmov	s15, r3
 800483c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004840:	ed97 6a02 	vldr	s12, [r7, #8]
 8004844:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 80048b8 <HAL_RCC_GetSysClockFreq+0x248>
 8004848:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800484c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004850:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004854:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004858:	ee67 7a27 	vmul.f32	s15, s14, s15
 800485c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8004860:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8004862:	4b11      	ldr	r3, [pc, #68]	@ (80048a8 <HAL_RCC_GetSysClockFreq+0x238>)
 8004864:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004866:	0a5b      	lsrs	r3, r3, #9
 8004868:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800486c:	3301      	adds	r3, #1
 800486e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	ee07 3a90 	vmov	s15, r3
 8004876:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800487a:	edd7 6a06 	vldr	s13, [r7, #24]
 800487e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004882:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004886:	ee17 3a90 	vmov	r3, s15
 800488a:	61fb      	str	r3, [r7, #28]
 800488c:	e004      	b.n	8004898 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 800488e:	2300      	movs	r3, #0
 8004890:	61fb      	str	r3, [r7, #28]
 8004892:	e001      	b.n	8004898 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8004894:	4b06      	ldr	r3, [pc, #24]	@ (80048b0 <HAL_RCC_GetSysClockFreq+0x240>)
 8004896:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8004898:	69fb      	ldr	r3, [r7, #28]
}
 800489a:	4618      	mov	r0, r3
 800489c:	3724      	adds	r7, #36	@ 0x24
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr
 80048a6:	bf00      	nop
 80048a8:	44020c00 	.word	0x44020c00
 80048ac:	003d0900 	.word	0x003d0900
 80048b0:	03d09000 	.word	0x03d09000
 80048b4:	017d7840 	.word	0x017d7840
 80048b8:	46000000 	.word	0x46000000
 80048bc:	4c742400 	.word	0x4c742400
 80048c0:	4bbebc20 	.word	0x4bbebc20
 80048c4:	4a742400 	.word	0x4a742400

080048c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80048cc:	f7ff fed0 	bl	8004670 <HAL_RCC_GetSysClockFreq>
 80048d0:	4602      	mov	r2, r0
 80048d2:	4b08      	ldr	r3, [pc, #32]	@ (80048f4 <HAL_RCC_GetHCLKFreq+0x2c>)
 80048d4:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80048d6:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80048da:	4907      	ldr	r1, [pc, #28]	@ (80048f8 <HAL_RCC_GetHCLKFreq+0x30>)
 80048dc:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80048de:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80048e2:	fa22 f303 	lsr.w	r3, r2, r3
 80048e6:	4a05      	ldr	r2, [pc, #20]	@ (80048fc <HAL_RCC_GetHCLKFreq+0x34>)
 80048e8:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 80048ea:	4b04      	ldr	r3, [pc, #16]	@ (80048fc <HAL_RCC_GetHCLKFreq+0x34>)
 80048ec:	681b      	ldr	r3, [r3, #0]
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	44020c00 	.word	0x44020c00
 80048f8:	0800c714 	.word	0x0800c714
 80048fc:	20000004 	.word	0x20000004

08004900 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8004900:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004904:	b0ba      	sub	sp, #232	@ 0xe8
 8004906:	af00      	add	r7, sp, #0
 8004908:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800490c:	2300      	movs	r3, #0
 800490e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004912:	2300      	movs	r3, #0
 8004914:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004918:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800491c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004920:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8004924:	2500      	movs	r5, #0
 8004926:	ea54 0305 	orrs.w	r3, r4, r5
 800492a:	d00b      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 800492c:	4bcd      	ldr	r3, [pc, #820]	@ (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800492e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004932:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8004936:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800493a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800493c:	4ac9      	ldr	r2, [pc, #804]	@ (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800493e:	430b      	orrs	r3, r1
 8004940:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004944:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800494c:	f002 0801 	and.w	r8, r2, #1
 8004950:	f04f 0900 	mov.w	r9, #0
 8004954:	ea58 0309 	orrs.w	r3, r8, r9
 8004958:	d042      	beq.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 800495a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800495e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004960:	2b05      	cmp	r3, #5
 8004962:	d823      	bhi.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0xac>
 8004964:	a201      	add	r2, pc, #4	@ (adr r2, 800496c <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8004966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800496a:	bf00      	nop
 800496c:	080049b5 	.word	0x080049b5
 8004970:	08004985 	.word	0x08004985
 8004974:	08004999 	.word	0x08004999
 8004978:	080049b5 	.word	0x080049b5
 800497c:	080049b5 	.word	0x080049b5
 8004980:	080049b5 	.word	0x080049b5
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004984:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004988:	3308      	adds	r3, #8
 800498a:	4618      	mov	r0, r3
 800498c:	f001 f978 	bl	8005c80 <RCCEx_PLL2_Config>
 8004990:	4603      	mov	r3, r0
 8004992:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 8004996:	e00e      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004998:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800499c:	3330      	adds	r3, #48	@ 0x30
 800499e:	4618      	mov	r0, r3
 80049a0:	f001 fa06 	bl	8005db0 <RCCEx_PLL3_Config>
 80049a4:	4603      	mov	r3, r0
 80049a6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 80049aa:	e004      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80049b2:	e000      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 80049b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049b6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d10c      	bne.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80049be:	4ba9      	ldr	r3, [pc, #676]	@ (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80049c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80049c4:	f023 0107 	bic.w	r1, r3, #7
 80049c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80049cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049ce:	4aa5      	ldr	r2, [pc, #660]	@ (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80049d0:	430b      	orrs	r3, r1
 80049d2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80049d6:	e003      	b.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049d8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80049dc:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80049e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80049e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e8:	f002 0a02 	and.w	sl, r2, #2
 80049ec:	f04f 0b00 	mov.w	fp, #0
 80049f0:	ea5a 030b 	orrs.w	r3, sl, fp
 80049f4:	f000 8088 	beq.w	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 80049f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80049fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049fe:	2b28      	cmp	r3, #40	@ 0x28
 8004a00:	d868      	bhi.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8004a02:	a201      	add	r2, pc, #4	@ (adr r2, 8004a08 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8004a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a08:	08004add 	.word	0x08004add
 8004a0c:	08004ad5 	.word	0x08004ad5
 8004a10:	08004ad5 	.word	0x08004ad5
 8004a14:	08004ad5 	.word	0x08004ad5
 8004a18:	08004ad5 	.word	0x08004ad5
 8004a1c:	08004ad5 	.word	0x08004ad5
 8004a20:	08004ad5 	.word	0x08004ad5
 8004a24:	08004ad5 	.word	0x08004ad5
 8004a28:	08004aad 	.word	0x08004aad
 8004a2c:	08004ad5 	.word	0x08004ad5
 8004a30:	08004ad5 	.word	0x08004ad5
 8004a34:	08004ad5 	.word	0x08004ad5
 8004a38:	08004ad5 	.word	0x08004ad5
 8004a3c:	08004ad5 	.word	0x08004ad5
 8004a40:	08004ad5 	.word	0x08004ad5
 8004a44:	08004ad5 	.word	0x08004ad5
 8004a48:	08004ac1 	.word	0x08004ac1
 8004a4c:	08004ad5 	.word	0x08004ad5
 8004a50:	08004ad5 	.word	0x08004ad5
 8004a54:	08004ad5 	.word	0x08004ad5
 8004a58:	08004ad5 	.word	0x08004ad5
 8004a5c:	08004ad5 	.word	0x08004ad5
 8004a60:	08004ad5 	.word	0x08004ad5
 8004a64:	08004ad5 	.word	0x08004ad5
 8004a68:	08004add 	.word	0x08004add
 8004a6c:	08004ad5 	.word	0x08004ad5
 8004a70:	08004ad5 	.word	0x08004ad5
 8004a74:	08004ad5 	.word	0x08004ad5
 8004a78:	08004ad5 	.word	0x08004ad5
 8004a7c:	08004ad5 	.word	0x08004ad5
 8004a80:	08004ad5 	.word	0x08004ad5
 8004a84:	08004ad5 	.word	0x08004ad5
 8004a88:	08004add 	.word	0x08004add
 8004a8c:	08004ad5 	.word	0x08004ad5
 8004a90:	08004ad5 	.word	0x08004ad5
 8004a94:	08004ad5 	.word	0x08004ad5
 8004a98:	08004ad5 	.word	0x08004ad5
 8004a9c:	08004ad5 	.word	0x08004ad5
 8004aa0:	08004ad5 	.word	0x08004ad5
 8004aa4:	08004ad5 	.word	0x08004ad5
 8004aa8:	08004add 	.word	0x08004add
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004aac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ab0:	3308      	adds	r3, #8
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f001 f8e4 	bl	8005c80 <RCCEx_PLL2_Config>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 8004abe:	e00e      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004ac0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ac4:	3330      	adds	r3, #48	@ 0x30
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f001 f972 	bl	8005db0 <RCCEx_PLL3_Config>
 8004acc:	4603      	mov	r3, r0
 8004ace:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 8004ad2:	e004      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004ada:	e000      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8004adc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ade:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d10c      	bne.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8004ae6:	4b5f      	ldr	r3, [pc, #380]	@ (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004ae8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004aec:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004af0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004af4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004af6:	4a5b      	ldr	r2, [pc, #364]	@ (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004af8:	430b      	orrs	r3, r1
 8004afa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004afe:	e003      	b.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b00:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004b04:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b08:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b10:	f002 0304 	and.w	r3, r2, #4
 8004b14:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004b18:	2300      	movs	r3, #0
 8004b1a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004b1e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004b22:	460b      	mov	r3, r1
 8004b24:	4313      	orrs	r3, r2
 8004b26:	d04e      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8004b28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b2e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004b32:	d02c      	beq.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8004b34:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004b38:	d825      	bhi.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004b3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b3e:	d028      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004b40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b44:	d81f      	bhi.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004b46:	2bc0      	cmp	r3, #192	@ 0xc0
 8004b48:	d025      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8004b4a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004b4c:	d81b      	bhi.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004b4e:	2b80      	cmp	r3, #128	@ 0x80
 8004b50:	d00f      	beq.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x272>
 8004b52:	2b80      	cmp	r3, #128	@ 0x80
 8004b54:	d817      	bhi.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d01f      	beq.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8004b5a:	2b40      	cmp	r3, #64	@ 0x40
 8004b5c:	d113      	bne.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004b5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b62:	3308      	adds	r3, #8
 8004b64:	4618      	mov	r0, r3
 8004b66:	f001 f88b 	bl	8005c80 <RCCEx_PLL2_Config>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 8004b70:	e014      	b.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004b72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b76:	3330      	adds	r3, #48	@ 0x30
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f001 f919 	bl	8005db0 <RCCEx_PLL3_Config>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 8004b84:	e00a      	b.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004b8c:	e006      	b.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004b8e:	bf00      	nop
 8004b90:	e004      	b.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004b92:	bf00      	nop
 8004b94:	e002      	b.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004b96:	bf00      	nop
 8004b98:	e000      	b.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004b9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b9c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d10c      	bne.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8004ba4:	4b2f      	ldr	r3, [pc, #188]	@ (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004ba6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004baa:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004bae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004bb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004bb4:	4a2b      	ldr	r2, [pc, #172]	@ (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004bb6:	430b      	orrs	r3, r1
 8004bb8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004bbc:	e003      	b.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bbe:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004bc2:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004bc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bce:	f002 0308 	and.w	r3, r2, #8
 8004bd2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004bdc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004be0:	460b      	mov	r3, r1
 8004be2:	4313      	orrs	r3, r2
 8004be4:	d056      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8004be6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004bea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004bec:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004bf0:	d031      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8004bf2:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004bf6:	d82a      	bhi.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004bf8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004bfc:	d02d      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004bfe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c02:	d824      	bhi.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004c04:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004c08:	d029      	beq.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8004c0a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004c0e:	d81e      	bhi.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004c10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c14:	d011      	beq.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8004c16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c1a:	d818      	bhi.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d023      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004c20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c24:	d113      	bne.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004c26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c2a:	3308      	adds	r3, #8
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f001 f827 	bl	8005c80 <RCCEx_PLL2_Config>
 8004c32:	4603      	mov	r3, r0
 8004c34:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 8004c38:	e017      	b.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004c3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c3e:	3330      	adds	r3, #48	@ 0x30
 8004c40:	4618      	mov	r0, r3
 8004c42:	f001 f8b5 	bl	8005db0 <RCCEx_PLL3_Config>
 8004c46:	4603      	mov	r3, r0
 8004c48:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 8004c4c:	e00d      	b.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004c54:	e009      	b.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8004c56:	bf00      	nop
 8004c58:	e007      	b.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8004c5a:	bf00      	nop
 8004c5c:	e005      	b.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8004c5e:	bf00      	nop
 8004c60:	e003      	b.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8004c62:	bf00      	nop
 8004c64:	44020c00 	.word	0x44020c00
        break;
 8004c68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c6a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d10c      	bne.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8004c72:	4bb9      	ldr	r3, [pc, #740]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004c74:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004c78:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8004c7c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c80:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004c82:	4ab5      	ldr	r2, [pc, #724]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004c84:	430b      	orrs	r3, r1
 8004c86:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004c8a:	e003      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c8c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004c90:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c94:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c9c:	f002 0310 	and.w	r3, r2, #16
 8004ca0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004caa:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004cae:	460b      	mov	r3, r1
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	d053      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8004cb4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004cb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004cba:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004cbe:	d031      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8004cc0:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004cc4:	d82a      	bhi.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004cc6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004cca:	d02d      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8004ccc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004cd0:	d824      	bhi.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004cd2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004cd6:	d029      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8004cd8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004cdc:	d81e      	bhi.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004cde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ce2:	d011      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8004ce4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ce8:	d818      	bhi.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d020      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8004cee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cf2:	d113      	bne.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004cf4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004cf8:	3308      	adds	r3, #8
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f000 ffc0 	bl	8005c80 <RCCEx_PLL2_Config>
 8004d00:	4603      	mov	r3, r0
 8004d02:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 8004d06:	e014      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004d08:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d0c:	3330      	adds	r3, #48	@ 0x30
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f001 f84e 	bl	8005db0 <RCCEx_PLL3_Config>
 8004d14:	4603      	mov	r3, r0
 8004d16:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 8004d1a:	e00a      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004d22:	e006      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004d24:	bf00      	nop
 8004d26:	e004      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004d28:	bf00      	nop
 8004d2a:	e002      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004d2c:	bf00      	nop
 8004d2e:	e000      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004d30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d32:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d10c      	bne.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8004d3a:	4b87      	ldr	r3, [pc, #540]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004d3c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004d40:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004d44:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d4a:	4a83      	ldr	r2, [pc, #524]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004d4c:	430b      	orrs	r3, r1
 8004d4e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004d52:	e003      	b.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d54:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004d58:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004d5c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d64:	f002 0320 	and.w	r3, r2, #32
 8004d68:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d72:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004d76:	460b      	mov	r3, r1
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	d053      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8004d7c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d82:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8004d86:	d031      	beq.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8004d88:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8004d8c:	d82a      	bhi.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004d8e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d92:	d02d      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004d94:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d98:	d824      	bhi.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004d9a:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8004d9e:	d029      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8004da0:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8004da4:	d81e      	bhi.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004da6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004daa:	d011      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8004dac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004db0:	d818      	bhi.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d020      	beq.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8004db6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004dba:	d113      	bne.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004dbc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004dc0:	3308      	adds	r3, #8
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f000 ff5c 	bl	8005c80 <RCCEx_PLL2_Config>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 8004dce:	e014      	b.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004dd0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004dd4:	3330      	adds	r3, #48	@ 0x30
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f000 ffea 	bl	8005db0 <RCCEx_PLL3_Config>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 8004de2:	e00a      	b.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004dea:	e006      	b.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004dec:	bf00      	nop
 8004dee:	e004      	b.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004df0:	bf00      	nop
 8004df2:	e002      	b.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004df4:	bf00      	nop
 8004df6:	e000      	b.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004df8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dfa:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d10c      	bne.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8004e02:	4b55      	ldr	r3, [pc, #340]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004e04:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004e08:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8004e0c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e12:	4a51      	ldr	r2, [pc, #324]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004e14:	430b      	orrs	r3, r1
 8004e16:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004e1a:	e003      	b.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e1c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004e20:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e24:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e2c:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004e30:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004e34:	2300      	movs	r3, #0
 8004e36:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004e3a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004e3e:	460b      	mov	r3, r1
 8004e40:	4313      	orrs	r3, r2
 8004e42:	d053      	beq.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8004e44:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e4a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004e4e:	d031      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8004e50:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004e54:	d82a      	bhi.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004e56:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004e5a:	d02d      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8004e5c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004e60:	d824      	bhi.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004e62:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004e66:	d029      	beq.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004e68:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004e6c:	d81e      	bhi.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004e6e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004e72:	d011      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8004e74:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004e78:	d818      	bhi.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d020      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004e7e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004e82:	d113      	bne.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004e84:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e88:	3308      	adds	r3, #8
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f000 fef8 	bl	8005c80 <RCCEx_PLL2_Config>
 8004e90:	4603      	mov	r3, r0
 8004e92:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8004e96:	e014      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004e98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e9c:	3330      	adds	r3, #48	@ 0x30
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f000 ff86 	bl	8005db0 <RCCEx_PLL3_Config>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8004eaa:	e00a      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004eb2:	e006      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004eb4:	bf00      	nop
 8004eb6:	e004      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004eb8:	bf00      	nop
 8004eba:	e002      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004ebc:	bf00      	nop
 8004ebe:	e000      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004ec0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ec2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d10c      	bne.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8004eca:	4b23      	ldr	r3, [pc, #140]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004ecc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ed0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004ed4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ed8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004eda:	4a1f      	ldr	r2, [pc, #124]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004edc:	430b      	orrs	r3, r1
 8004ede:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004ee2:	e003      	b.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ee4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004ee8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004eec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef4:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004ef8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004efc:	2300      	movs	r3, #0
 8004efe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004f02:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004f06:	460b      	mov	r3, r1
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	d03d      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x688>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8004f0c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004f12:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004f16:	d01b      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8004f18:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004f1c:	d814      	bhi.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x648>
 8004f1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f22:	d017      	beq.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x654>
 8004f24:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f28:	d80e      	bhi.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x648>
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d016      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8004f2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f32:	d109      	bne.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x648>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004f34:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f38:	3330      	adds	r3, #48	@ 0x30
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f000 ff38 	bl	8005db0 <RCCEx_PLL3_Config>
 8004f40:	4603      	mov	r3, r0
 8004f42:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8004f46:	e00a      	b.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x65e>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004f4e:	e006      	b.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 8004f50:	bf00      	nop
 8004f52:	e004      	b.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 8004f54:	bf00      	nop
 8004f56:	e002      	b.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x65e>
 8004f58:	44020c00 	.word	0x44020c00
        break;
 8004f5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f5e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d10c      	bne.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x680>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004f66:	4b99      	ldr	r3, [pc, #612]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004f68:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004f6c:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004f70:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f74:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004f76:	4a95      	ldr	r2, [pc, #596]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004f78:	430b      	orrs	r3, r1
 8004f7a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004f7e:	e003      	b.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x688>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f80:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004f84:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004f88:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f90:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004f94:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004f98:	2300      	movs	r3, #0
 8004f9a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004f9e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004fa2:	460b      	mov	r3, r1
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	d03b      	beq.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x720>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8004fa8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004fac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004fae:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004fb2:	d01b      	beq.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x6ec>
 8004fb4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004fb8:	d814      	bhi.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 8004fba:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004fbe:	d017      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 8004fc0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004fc4:	d80e      	bhi.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d014      	beq.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 8004fca:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004fce:	d109      	bne.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004fd0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004fd4:	3330      	adds	r3, #48	@ 0x30
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f000 feea 	bl	8005db0 <RCCEx_PLL3_Config>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8004fe2:	e008      	b.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004fea:	e004      	b.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8004fec:	bf00      	nop
 8004fee:	e002      	b.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8004ff0:	bf00      	nop
 8004ff2:	e000      	b.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 8004ff4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ff6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d10c      	bne.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x718>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8004ffe:	4b73      	ldr	r3, [pc, #460]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005000:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005004:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8005008:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800500c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800500e:	4a6f      	ldr	r2, [pc, #444]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005010:	430b      	orrs	r3, r1
 8005012:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005016:	e003      	b.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x720>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005018:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800501c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005020:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005028:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800502c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005030:	2300      	movs	r3, #0
 8005032:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005036:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800503a:	460b      	mov	r3, r1
 800503c:	4313      	orrs	r3, r2
 800503e:	d03d      	beq.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8005040:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005044:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005048:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800504c:	d01b      	beq.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x786>
 800504e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005052:	d814      	bhi.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8005054:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005058:	d017      	beq.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x78a>
 800505a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800505e:	d80e      	bhi.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8005060:	2b00      	cmp	r3, #0
 8005062:	d014      	beq.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x78e>
 8005064:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005068:	d109      	bne.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x77e>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800506a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800506e:	3330      	adds	r3, #48	@ 0x30
 8005070:	4618      	mov	r0, r3
 8005072:	f000 fe9d 	bl	8005db0 <RCCEx_PLL3_Config>
 8005076:	4603      	mov	r3, r0
 8005078:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* I2C3 clock source config set later after clock selection check */
        break;
 800507c:	e008      	b.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x790>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005084:	e004      	b.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8005086:	bf00      	nop
 8005088:	e002      	b.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 800508a:	bf00      	nop
 800508c:	e000      	b.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 800508e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005090:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005094:	2b00      	cmp	r3, #0
 8005096:	d10d      	bne.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8005098:	4b4c      	ldr	r3, [pc, #304]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800509a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800509e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80050a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050aa:	4a48      	ldr	r2, [pc, #288]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80050ac:	430b      	orrs	r3, r1
 80050ae:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80050b2:	e003      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050b4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80050b8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 80050bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c4:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80050c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80050cc:	2300      	movs	r3, #0
 80050ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80050d2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80050d6:	460b      	mov	r3, r1
 80050d8:	4313      	orrs	r3, r2
 80050da:	d035      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x848>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 80050dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80050e8:	d015      	beq.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x816>
 80050ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80050ee:	d80e      	bhi.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x80e>
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d012      	beq.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x81a>
 80050f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80050f8:	d109      	bne.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80050fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050fe:	3330      	adds	r3, #48	@ 0x30
 8005100:	4618      	mov	r0, r3
 8005102:	f000 fe55 	bl	8005db0 <RCCEx_PLL3_Config>
 8005106:	4603      	mov	r3, r0
 8005108:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 800510c:	e006      	b.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x81c>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005114:	e002      	b.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 8005116:	bf00      	nop
 8005118:	e000      	b.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 800511a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800511c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005120:	2b00      	cmp	r3, #0
 8005122:	d10d      	bne.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8005124:	4b29      	ldr	r3, [pc, #164]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005126:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800512a:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 800512e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005132:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005136:	4a25      	ldr	r2, [pc, #148]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005138:	430b      	orrs	r3, r1
 800513a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800513e:	e003      	b.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x848>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005140:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005144:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 8005148:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800514c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005150:	2100      	movs	r1, #0
 8005152:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 8005156:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800515a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800515e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005162:	460b      	mov	r3, r1
 8005164:	4313      	orrs	r3, r2
 8005166:	d037      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 8005168:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800516c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005170:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005174:	d015      	beq.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8005176:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800517a:	d80e      	bhi.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x89a>
 800517c:	2b00      	cmp	r3, #0
 800517e:	d012      	beq.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 8005180:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005184:	d109      	bne.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x89a>
        break;

#if defined(RCC_I3C2CLKSOURCE_PLL3R)
      case RCC_I3C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005186:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800518a:	3330      	adds	r3, #48	@ 0x30
 800518c:	4618      	mov	r0, r3
 800518e:	f000 fe0f 	bl	8005db0 <RCCEx_PLL3_Config>
 8005192:	4603      	mov	r3, r0
 8005194:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 8005198:	e006      	b.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80051a0:	e002      	b.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 80051a2:	bf00      	nop
 80051a4:	e000      	b.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 80051a6:	bf00      	nop
    }
    if (ret == HAL_OK)
 80051a8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d10f      	bne.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 80051b0:	4b06      	ldr	r3, [pc, #24]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80051b2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80051b6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80051ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80051be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051c2:	4a02      	ldr	r2, [pc, #8]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80051c4:	430b      	orrs	r3, r1
 80051c6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80051ca:	e005      	b.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 80051cc:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051d0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80051d4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80051d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80051dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e0:	2100      	movs	r1, #0
 80051e2:	67b9      	str	r1, [r7, #120]	@ 0x78
 80051e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80051ea:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80051ee:	460b      	mov	r3, r1
 80051f0:	4313      	orrs	r3, r2
 80051f2:	d00e      	beq.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x912>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 80051f4:	4bb8      	ldr	r3, [pc, #736]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80051f6:	69db      	ldr	r3, [r3, #28]
 80051f8:	4ab7      	ldr	r2, [pc, #732]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80051fa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80051fe:	61d3      	str	r3, [r2, #28]
 8005200:	4bb5      	ldr	r3, [pc, #724]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005202:	69d9      	ldr	r1, [r3, #28]
 8005204:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005208:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800520c:	4ab2      	ldr	r2, [pc, #712]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800520e:	430b      	orrs	r3, r1
 8005210:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005212:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800521a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800521e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005220:	2300      	movs	r3, #0
 8005222:	677b      	str	r3, [r7, #116]	@ 0x74
 8005224:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005228:	460b      	mov	r3, r1
 800522a:	4313      	orrs	r3, r2
 800522c:	d055      	beq.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x9da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 800522e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005232:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005236:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800523a:	d031      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 800523c:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8005240:	d82a      	bhi.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8005242:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005246:	d02d      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x9a4>
 8005248:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800524c:	d824      	bhi.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x998>
 800524e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005252:	d029      	beq.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
 8005254:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005258:	d81e      	bhi.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x998>
 800525a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800525e:	d011      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8005260:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005264:	d818      	bhi.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8005266:	2b00      	cmp	r3, #0
 8005268:	d020      	beq.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x9ac>
 800526a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800526e:	d113      	bne.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x998>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005270:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005274:	3308      	adds	r3, #8
 8005276:	4618      	mov	r0, r3
 8005278:	f000 fd02 	bl	8005c80 <RCCEx_PLL2_Config>
 800527c:	4603      	mov	r3, r0
 800527e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8005282:	e014      	b.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x9ae>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005284:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005288:	3330      	adds	r3, #48	@ 0x30
 800528a:	4618      	mov	r0, r3
 800528c:	f000 fd90 	bl	8005db0 <RCCEx_PLL3_Config>
 8005290:	4603      	mov	r3, r0
 8005292:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8005296:	e00a      	b.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x9ae>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800529e:	e006      	b.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 80052a0:	bf00      	nop
 80052a2:	e004      	b.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 80052a4:	bf00      	nop
 80052a6:	e002      	b.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 80052a8:	bf00      	nop
 80052aa:	e000      	b.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 80052ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052ae:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d10d      	bne.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80052b6:	4b88      	ldr	r3, [pc, #544]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80052b8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80052bc:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80052c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80052c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80052c8:	4a83      	ldr	r2, [pc, #524]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80052ca:	430b      	orrs	r3, r1
 80052cc:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80052d0:	e003      	b.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x9da>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052d2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80052d6:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80052da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80052de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80052e6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80052e8:	2300      	movs	r3, #0
 80052ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80052ec:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80052f0:	460b      	mov	r3, r1
 80052f2:	4313      	orrs	r3, r2
 80052f4:	d055      	beq.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 80052f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80052fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052fe:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005302:	d031      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0xa68>
 8005304:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005308:	d82a      	bhi.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 800530a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800530e:	d02d      	beq.n	800536c <HAL_RCCEx_PeriphCLKConfig+0xa6c>
 8005310:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005314:	d824      	bhi.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8005316:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800531a:	d029      	beq.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800531c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005320:	d81e      	bhi.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 8005322:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005326:	d011      	beq.n	800534c <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8005328:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800532c:	d818      	bhi.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0xa60>
 800532e:	2b00      	cmp	r3, #0
 8005330:	d020      	beq.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005332:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005336:	d113      	bne.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0xa60>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005338:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800533c:	3308      	adds	r3, #8
 800533e:	4618      	mov	r0, r3
 8005340:	f000 fc9e 	bl	8005c80 <RCCEx_PLL2_Config>
 8005344:	4603      	mov	r3, r0
 8005346:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800534a:	e014      	b.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0xa76>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800534c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005350:	3330      	adds	r3, #48	@ 0x30
 8005352:	4618      	mov	r0, r3
 8005354:	f000 fd2c 	bl	8005db0 <RCCEx_PLL3_Config>
 8005358:	4603      	mov	r3, r0
 800535a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800535e:	e00a      	b.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0xa76>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005366:	e006      	b.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8005368:	bf00      	nop
 800536a:	e004      	b.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 800536c:	bf00      	nop
 800536e:	e002      	b.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8005370:	bf00      	nop
 8005372:	e000      	b.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8005374:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005376:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800537a:	2b00      	cmp	r3, #0
 800537c:	d10d      	bne.n	800539a <HAL_RCCEx_PeriphCLKConfig+0xa9a>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800537e:	4b56      	ldr	r3, [pc, #344]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005380:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005384:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005388:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800538c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005390:	4a51      	ldr	r2, [pc, #324]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005392:	430b      	orrs	r3, r1
 8005394:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005398:	e003      	b.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800539a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800539e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80053a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053aa:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80053ae:	663b      	str	r3, [r7, #96]	@ 0x60
 80053b0:	2300      	movs	r3, #0
 80053b2:	667b      	str	r3, [r7, #100]	@ 0x64
 80053b4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80053b8:	460b      	mov	r3, r1
 80053ba:	4313      	orrs	r3, r2
 80053bc:	d032      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0xb24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80053be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80053c6:	2b05      	cmp	r3, #5
 80053c8:	d80f      	bhi.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0xaea>
 80053ca:	2b03      	cmp	r3, #3
 80053cc:	d211      	bcs.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d911      	bls.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	d109      	bne.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0xaea>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80053d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053da:	3308      	adds	r3, #8
 80053dc:	4618      	mov	r0, r3
 80053de:	f000 fc4f 	bl	8005c80 <RCCEx_PLL2_Config>
 80053e2:	4603      	mov	r3, r0
 80053e4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80053e8:	e006      	b.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80053f0:	e002      	b.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 80053f2:	bf00      	nop
 80053f4:	e000      	b.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 80053f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053f8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d10d      	bne.n	800541c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8005400:	4b35      	ldr	r3, [pc, #212]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005402:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005406:	f023 0107 	bic.w	r1, r3, #7
 800540a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800540e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005412:	4a31      	ldr	r2, [pc, #196]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005414:	430b      	orrs	r3, r1
 8005416:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800541a:	e003      	b.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0xb24>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800541c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005420:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8005424:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800542c:	2100      	movs	r1, #0
 800542e:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005430:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005434:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005436:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800543a:	460b      	mov	r3, r1
 800543c:	4313      	orrs	r3, r2
 800543e:	d024      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8005440:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005444:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005448:	2b00      	cmp	r3, #0
 800544a:	d005      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0xb58>
 800544c:	2b08      	cmp	r3, #8
 800544e:	d005      	beq.n	800545c <HAL_RCCEx_PeriphCLKConfig+0xb5c>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005456:	e002      	b.n	800545e <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 8005458:	bf00      	nop
 800545a:	e000      	b.n	800545e <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 800545c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800545e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005462:	2b00      	cmp	r3, #0
 8005464:	d10d      	bne.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0xb82>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8005466:	4b1c      	ldr	r3, [pc, #112]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8005468:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800546c:	f023 0108 	bic.w	r1, r3, #8
 8005470:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005474:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005478:	4a17      	ldr	r2, [pc, #92]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800547a:	430b      	orrs	r3, r1
 800547c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005480:	e003      	b.n	800548a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005482:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005486:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800548a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800548e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005492:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005496:	653b      	str	r3, [r7, #80]	@ 0x50
 8005498:	2300      	movs	r3, #0
 800549a:	657b      	str	r3, [r7, #84]	@ 0x54
 800549c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80054a0:	460b      	mov	r3, r1
 80054a2:	4313      	orrs	r3, r2
 80054a4:	f000 80b9 	beq.w	800561a <HAL_RCCEx_PeriphCLKConfig+0xd1a>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80054a8:	4b0c      	ldr	r3, [pc, #48]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 80054aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ac:	4a0b      	ldr	r2, [pc, #44]	@ (80054dc <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 80054ae:	f043 0301 	orr.w	r3, r3, #1
 80054b2:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80054b4:	f7fb fc42 	bl	8000d3c <HAL_GetTick>
 80054b8:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80054bc:	e010      	b.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054be:	f7fb fc3d 	bl	8000d3c <HAL_GetTick>
 80054c2:	4602      	mov	r2, r0
 80054c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054c8:	1ad3      	subs	r3, r2, r3
 80054ca:	2b02      	cmp	r3, #2
 80054cc:	d908      	bls.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
      {
        ret = HAL_TIMEOUT;
 80054ce:	2303      	movs	r3, #3
 80054d0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80054d4:	e00a      	b.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0xbec>
 80054d6:	bf00      	nop
 80054d8:	44020c00 	.word	0x44020c00
 80054dc:	44020800 	.word	0x44020800
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80054e0:	4bba      	ldr	r3, [pc, #744]	@ (80057cc <HAL_RCCEx_PeriphCLKConfig+0xecc>)
 80054e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054e4:	f003 0301 	and.w	r3, r3, #1
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d0e8      	beq.n	80054be <HAL_RCCEx_PeriphCLKConfig+0xbbe>
      }
    }

    if (ret == HAL_OK)
 80054ec:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	f040 808e 	bne.w	8005612 <HAL_RCCEx_PeriphCLKConfig+0xd12>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80054f6:	4bb6      	ldr	r3, [pc, #728]	@ (80057d0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80054f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80054fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005500:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8005504:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005508:	2b00      	cmp	r3, #0
 800550a:	d023      	beq.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 800550c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005510:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8005514:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005518:	4293      	cmp	r3, r2
 800551a:	d01b      	beq.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0xc54>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800551c:	4bac      	ldr	r3, [pc, #688]	@ (80057d0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800551e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005522:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005526:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800552a:	4ba9      	ldr	r3, [pc, #676]	@ (80057d0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800552c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005530:	4aa7      	ldr	r2, [pc, #668]	@ (80057d0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005532:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005536:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800553a:	4ba5      	ldr	r3, [pc, #660]	@ (80057d0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800553c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005540:	4aa3      	ldr	r2, [pc, #652]	@ (80057d0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005542:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005546:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800554a:	4aa1      	ldr	r2, [pc, #644]	@ (80057d0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800554c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005550:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005554:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005558:	f003 0301 	and.w	r3, r3, #1
 800555c:	2b00      	cmp	r3, #0
 800555e:	d019      	beq.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005560:	f7fb fbec 	bl	8000d3c <HAL_GetTick>
 8005564:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005568:	e00d      	b.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0xc86>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800556a:	f7fb fbe7 	bl	8000d3c <HAL_GetTick>
 800556e:	4602      	mov	r2, r0
 8005570:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005574:	1ad2      	subs	r2, r2, r3
 8005576:	f241 3388 	movw	r3, #5000	@ 0x1388
 800557a:	429a      	cmp	r2, r3
 800557c:	d903      	bls.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0xc86>
          {
            ret = HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 8005584:	e006      	b.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0xc94>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005586:	4b92      	ldr	r3, [pc, #584]	@ (80057d0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005588:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800558c:	f003 0302 	and.w	r3, r3, #2
 8005590:	2b00      	cmp	r3, #0
 8005592:	d0ea      	beq.n	800556a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
          }
        }
      }

      if (ret == HAL_OK)
 8005594:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005598:	2b00      	cmp	r3, #0
 800559a:	d135      	bne.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800559c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80055a0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80055a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80055ac:	d110      	bne.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0xcd0>
 80055ae:	4b88      	ldr	r3, [pc, #544]	@ (80057d0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80055b0:	69db      	ldr	r3, [r3, #28]
 80055b2:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80055b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80055ba:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80055be:	091b      	lsrs	r3, r3, #4
 80055c0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80055c4:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80055c8:	4a81      	ldr	r2, [pc, #516]	@ (80057d0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80055ca:	430b      	orrs	r3, r1
 80055cc:	61d3      	str	r3, [r2, #28]
 80055ce:	e005      	b.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 80055d0:	4b7f      	ldr	r3, [pc, #508]	@ (80057d0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80055d2:	69db      	ldr	r3, [r3, #28]
 80055d4:	4a7e      	ldr	r2, [pc, #504]	@ (80057d0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80055d6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80055da:	61d3      	str	r3, [r2, #28]
 80055dc:	4b7c      	ldr	r3, [pc, #496]	@ (80057d0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80055de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80055e2:	4a7b      	ldr	r2, [pc, #492]	@ (80057d0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80055e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055e8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80055ec:	4b78      	ldr	r3, [pc, #480]	@ (80057d0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80055ee:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 80055f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80055f6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80055fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055fe:	4a74      	ldr	r2, [pc, #464]	@ (80057d0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005600:	430b      	orrs	r3, r1
 8005602:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005606:	e008      	b.n	800561a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005608:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800560c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 8005610:	e003      	b.n	800561a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005612:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005616:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800561a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800561e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005622:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8005626:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005628:	2300      	movs	r3, #0
 800562a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800562c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005630:	460b      	mov	r3, r1
 8005632:	4313      	orrs	r3, r2
 8005634:	d035      	beq.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0xda2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8005636:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800563a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800563e:	2b30      	cmp	r3, #48	@ 0x30
 8005640:	d014      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
 8005642:	2b30      	cmp	r3, #48	@ 0x30
 8005644:	d80e      	bhi.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0xd64>
 8005646:	2b20      	cmp	r3, #32
 8005648:	d012      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0xd70>
 800564a:	2b20      	cmp	r3, #32
 800564c:	d80a      	bhi.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0xd64>
 800564e:	2b00      	cmp	r3, #0
 8005650:	d010      	beq.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0xd74>
 8005652:	2b10      	cmp	r3, #16
 8005654:	d106      	bne.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0xd64>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005656:	4b5e      	ldr	r3, [pc, #376]	@ (80057d0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005658:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800565a:	4a5d      	ldr	r2, [pc, #372]	@ (80057d0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800565c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005660:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8005662:	e008      	b.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0xd76>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800566a:	e004      	b.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 800566c:	bf00      	nop
 800566e:	e002      	b.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8005670:	bf00      	nop
 8005672:	e000      	b.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8005674:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005676:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800567a:	2b00      	cmp	r3, #0
 800567c:	d10d      	bne.n	800569a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800567e:	4b54      	ldr	r3, [pc, #336]	@ (80057d0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005680:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005684:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005688:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800568c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005690:	4a4f      	ldr	r2, [pc, #316]	@ (80057d0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005692:	430b      	orrs	r3, r1
 8005694:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005698:	e003      	b.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0xda2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800569a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800569e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80056a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056aa:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80056ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80056b0:	2300      	movs	r3, #0
 80056b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80056b4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80056b8:	460b      	mov	r3, r1
 80056ba:	4313      	orrs	r3, r2
 80056bc:	d033      	beq.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 80056be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d002      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
 80056ca:	2b40      	cmp	r3, #64	@ 0x40
 80056cc:	d007      	beq.n	80056de <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80056ce:	e010      	b.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056d0:	4b3f      	ldr	r3, [pc, #252]	@ (80057d0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80056d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056d4:	4a3e      	ldr	r2, [pc, #248]	@ (80057d0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80056d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056da:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80056dc:	e00d      	b.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80056de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056e2:	3308      	adds	r3, #8
 80056e4:	4618      	mov	r0, r3
 80056e6:	f000 facb 	bl	8005c80 <RCCEx_PLL2_Config>
 80056ea:	4603      	mov	r3, r0
 80056ec:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80056f0:	e003      	b.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      default:
        ret = HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80056f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056fa:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d10d      	bne.n	800571e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8005702:	4b33      	ldr	r3, [pc, #204]	@ (80057d0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005704:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005708:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 800570c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005710:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005714:	4a2e      	ldr	r2, [pc, #184]	@ (80057d0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8005716:	430b      	orrs	r3, r1
 8005718:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800571c:	e003      	b.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0xe26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800571e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005722:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8005726:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800572a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800572e:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8005732:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005734:	2300      	movs	r3, #0
 8005736:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005738:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800573c:	460b      	mov	r3, r1
 800573e:	4313      	orrs	r3, r2
 8005740:	d04c      	beq.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0xedc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8005742:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005746:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800574a:	2b04      	cmp	r3, #4
 800574c:	d827      	bhi.n	800579e <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 800574e:	a201      	add	r2, pc, #4	@ (adr r2, 8005754 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
 8005750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005754:	08005769 	.word	0x08005769
 8005758:	08005777 	.word	0x08005777
 800575c:	0800578b 	.word	0x0800578b
 8005760:	080057a7 	.word	0x080057a7
 8005764:	080057a7 	.word	0x080057a7
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005768:	4b19      	ldr	r3, [pc, #100]	@ (80057d0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800576a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800576c:	4a18      	ldr	r2, [pc, #96]	@ (80057d0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 800576e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005772:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005774:	e018      	b.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xea8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005776:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800577a:	3308      	adds	r3, #8
 800577c:	4618      	mov	r0, r3
 800577e:	f000 fa7f 	bl	8005c80 <RCCEx_PLL2_Config>
 8005782:	4603      	mov	r3, r0
 8005784:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005788:	e00e      	b.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xea8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800578a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800578e:	3330      	adds	r3, #48	@ 0x30
 8005790:	4618      	mov	r0, r3
 8005792:	f000 fb0d 	bl	8005db0 <RCCEx_PLL3_Config>
 8005796:	4603      	mov	r3, r0
 8005798:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800579c:	e004      	b.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xea8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80057a4:	e000      	b.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xea8>
        break;
 80057a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057a8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d111      	bne.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0xed4>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80057b0:	4b07      	ldr	r3, [pc, #28]	@ (80057d0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80057b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80057b6:	f023 0107 	bic.w	r1, r3, #7
 80057ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80057be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80057c2:	4a03      	ldr	r2, [pc, #12]	@ (80057d0 <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80057c4:	430b      	orrs	r3, r1
 80057c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80057ca:	e007      	b.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0xedc>
 80057cc:	44020800 	.word	0x44020800
 80057d0:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057d4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80057d8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80057dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80057e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80057e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80057ea:	2300      	movs	r3, #0
 80057ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80057ee:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80057f2:	460b      	mov	r3, r1
 80057f4:	4313      	orrs	r3, r2
 80057f6:	f000 8081 	beq.w	80058fc <HAL_RCCEx_PeriphCLKConfig+0xffc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 80057fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80057fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005802:	2b20      	cmp	r3, #32
 8005804:	d85f      	bhi.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 8005806:	a201      	add	r2, pc, #4	@ (adr r2, 800580c <HAL_RCCEx_PeriphCLKConfig+0xf0c>)
 8005808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800580c:	08005891 	.word	0x08005891
 8005810:	080058c7 	.word	0x080058c7
 8005814:	080058c7 	.word	0x080058c7
 8005818:	080058c7 	.word	0x080058c7
 800581c:	080058c7 	.word	0x080058c7
 8005820:	080058c7 	.word	0x080058c7
 8005824:	080058c7 	.word	0x080058c7
 8005828:	080058c7 	.word	0x080058c7
 800582c:	0800589f 	.word	0x0800589f
 8005830:	080058c7 	.word	0x080058c7
 8005834:	080058c7 	.word	0x080058c7
 8005838:	080058c7 	.word	0x080058c7
 800583c:	080058c7 	.word	0x080058c7
 8005840:	080058c7 	.word	0x080058c7
 8005844:	080058c7 	.word	0x080058c7
 8005848:	080058c7 	.word	0x080058c7
 800584c:	080058b3 	.word	0x080058b3
 8005850:	080058c7 	.word	0x080058c7
 8005854:	080058c7 	.word	0x080058c7
 8005858:	080058c7 	.word	0x080058c7
 800585c:	080058c7 	.word	0x080058c7
 8005860:	080058c7 	.word	0x080058c7
 8005864:	080058c7 	.word	0x080058c7
 8005868:	080058c7 	.word	0x080058c7
 800586c:	080058cf 	.word	0x080058cf
 8005870:	080058c7 	.word	0x080058c7
 8005874:	080058c7 	.word	0x080058c7
 8005878:	080058c7 	.word	0x080058c7
 800587c:	080058c7 	.word	0x080058c7
 8005880:	080058c7 	.word	0x080058c7
 8005884:	080058c7 	.word	0x080058c7
 8005888:	080058c7 	.word	0x080058c7
 800588c:	080058cf 	.word	0x080058cf
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005890:	4bb9      	ldr	r3, [pc, #740]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005894:	4ab8      	ldr	r2, [pc, #736]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005896:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800589a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800589c:	e018      	b.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800589e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058a2:	3308      	adds	r3, #8
 80058a4:	4618      	mov	r0, r3
 80058a6:	f000 f9eb 	bl	8005c80 <RCCEx_PLL2_Config>
 80058aa:	4603      	mov	r3, r0
 80058ac:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80058b0:	e00e      	b.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80058b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058b6:	3330      	adds	r3, #48	@ 0x30
 80058b8:	4618      	mov	r0, r3
 80058ba:	f000 fa79 	bl	8005db0 <RCCEx_PLL3_Config>
 80058be:	4603      	mov	r3, r0
 80058c0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80058c4:	e004      	b.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80058cc:	e000      	b.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        break;
 80058ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058d0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d10d      	bne.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0xff4>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80058d8:	4ba7      	ldr	r3, [pc, #668]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80058da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80058de:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80058e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80058ea:	4aa3      	ldr	r2, [pc, #652]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80058ec:	430b      	orrs	r3, r1
 80058ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80058f2:	e003      	b.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0xffc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058f4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80058f8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80058fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005904:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005908:	62bb      	str	r3, [r7, #40]	@ 0x28
 800590a:	2300      	movs	r3, #0
 800590c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800590e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005912:	460b      	mov	r3, r1
 8005914:	4313      	orrs	r3, r2
 8005916:	d04e      	beq.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x10b6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8005918:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800591c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005920:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005924:	d02e      	beq.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005926:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800592a:	d827      	bhi.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800592c:	2bc0      	cmp	r3, #192	@ 0xc0
 800592e:	d02b      	beq.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x1088>
 8005930:	2bc0      	cmp	r3, #192	@ 0xc0
 8005932:	d823      	bhi.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8005934:	2b80      	cmp	r3, #128	@ 0x80
 8005936:	d017      	beq.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x1068>
 8005938:	2b80      	cmp	r3, #128	@ 0x80
 800593a:	d81f      	bhi.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800593c:	2b00      	cmp	r3, #0
 800593e:	d002      	beq.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x1046>
 8005940:	2b40      	cmp	r3, #64	@ 0x40
 8005942:	d007      	beq.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x1054>
 8005944:	e01a      	b.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005946:	4b8c      	ldr	r3, [pc, #560]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800594a:	4a8b      	ldr	r2, [pc, #556]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800594c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005950:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8005952:	e01a      	b.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x108a>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005954:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005958:	3308      	adds	r3, #8
 800595a:	4618      	mov	r0, r3
 800595c:	f000 f990 	bl	8005c80 <RCCEx_PLL2_Config>
 8005960:	4603      	mov	r3, r0
 8005962:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8005966:	e010      	b.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x108a>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005968:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800596c:	3330      	adds	r3, #48	@ 0x30
 800596e:	4618      	mov	r0, r3
 8005970:	f000 fa1e 	bl	8005db0 <RCCEx_PLL3_Config>
 8005974:	4603      	mov	r3, r0
 8005976:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800597a:	e006      	b.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x108a>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005982:	e002      	b.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 8005984:	bf00      	nop
 8005986:	e000      	b.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 8005988:	bf00      	nop
    }

    if (ret == HAL_OK)
 800598a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800598e:	2b00      	cmp	r3, #0
 8005990:	d10d      	bne.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x10ae>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8005992:	4b79      	ldr	r3, [pc, #484]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005998:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 800599c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80059a0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80059a4:	4974      	ldr	r1, [pc, #464]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 80059a6:	4313      	orrs	r3, r2
 80059a8:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80059ac:	e003      	b.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x10b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059ae:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80059b2:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 80059b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80059ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059be:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80059c2:	623b      	str	r3, [r7, #32]
 80059c4:	2300      	movs	r3, #0
 80059c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80059c8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80059cc:	460b      	mov	r3, r1
 80059ce:	4313      	orrs	r3, r2
 80059d0:	d055      	beq.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x117e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 80059d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80059d6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80059da:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80059de:	d031      	beq.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x1144>
 80059e0:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80059e4:	d82a      	bhi.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x113c>
 80059e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059ea:	d02d      	beq.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x1148>
 80059ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059f0:	d824      	bhi.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x113c>
 80059f2:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80059f6:	d029      	beq.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x114c>
 80059f8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80059fc:	d81e      	bhi.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x113c>
 80059fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a02:	d011      	beq.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x1128>
 8005a04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a08:	d818      	bhi.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d020      	beq.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x1150>
 8005a0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a12:	d113      	bne.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x113c>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005a14:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a18:	3308      	adds	r3, #8
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f000 f930 	bl	8005c80 <RCCEx_PLL2_Config>
 8005a20:	4603      	mov	r3, r0
 8005a22:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8005a26:	e014      	b.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x1152>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005a28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a2c:	3330      	adds	r3, #48	@ 0x30
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f000 f9be 	bl	8005db0 <RCCEx_PLL3_Config>
 8005a34:	4603      	mov	r3, r0
 8005a36:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8005a3a:	e00a      	b.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005a42:	e006      	b.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8005a44:	bf00      	nop
 8005a46:	e004      	b.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8005a48:	bf00      	nop
 8005a4a:	e002      	b.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8005a4c:	bf00      	nop
 8005a4e:	e000      	b.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8005a50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a52:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d10d      	bne.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x1176>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8005a5a:	4b47      	ldr	r3, [pc, #284]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005a5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005a60:	f423 6260 	bic.w	r2, r3, #3584	@ 0xe00
 8005a64:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a68:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005a6c:	4942      	ldr	r1, [pc, #264]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005a74:	e003      	b.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x117e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a76:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005a7a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005a7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a86:	2100      	movs	r1, #0
 8005a88:	61b9      	str	r1, [r7, #24]
 8005a8a:	f003 0302 	and.w	r3, r3, #2
 8005a8e:	61fb      	str	r3, [r7, #28]
 8005a90:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005a94:	460b      	mov	r3, r1
 8005a96:	4313      	orrs	r3, r2
 8005a98:	d03c      	beq.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8005a9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a9e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005aa2:	2b03      	cmp	r3, #3
 8005aa4:	d81b      	bhi.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x11de>
 8005aa6:	a201      	add	r2, pc, #4	@ (adr r2, 8005aac <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
 8005aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aac:	08005ae7 	.word	0x08005ae7
 8005ab0:	08005abd 	.word	0x08005abd
 8005ab4:	08005acb 	.word	0x08005acb
 8005ab8:	08005ae7 	.word	0x08005ae7
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005abc:	4b2e      	ldr	r3, [pc, #184]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005abe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ac0:	4a2d      	ldr	r2, [pc, #180]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005ac2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ac6:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005ac8:	e00e      	b.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x11e8>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005aca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005ace:	3308      	adds	r3, #8
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f000 f8d5 	bl	8005c80 <RCCEx_PLL2_Config>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8005adc:	e004      	b.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005ae4:	e000      	b.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
        break;
 8005ae6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ae8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d10d      	bne.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x120c>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8005af0:	4b21      	ldr	r3, [pc, #132]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005af2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005af6:	f023 0203 	bic.w	r2, r3, #3
 8005afa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005afe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005b02:	491d      	ldr	r1, [pc, #116]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005b04:	4313      	orrs	r3, r2
 8005b06:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8005b0a:	e003      	b.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x1214>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b0c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005b10:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005b14:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b1c:	2100      	movs	r1, #0
 8005b1e:	6139      	str	r1, [r7, #16]
 8005b20:	f003 0304 	and.w	r3, r3, #4
 8005b24:	617b      	str	r3, [r7, #20]
 8005b26:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005b2a:	460b      	mov	r3, r1
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	d03c      	beq.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x12aa>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8005b30:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b3c:	d00e      	beq.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8005b3e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b42:	d815      	bhi.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x1270>
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d019      	beq.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x127c>
 8005b48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b4c:	d110      	bne.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x1270>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b4e:	4b0a      	ldr	r3, [pc, #40]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b52:	4a09      	ldr	r2, [pc, #36]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005b54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b58:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005b5a:	e010      	b.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x127e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005b5c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b60:	3308      	adds	r3, #8
 8005b62:	4618      	mov	r0, r3
 8005b64:	f000 f88c 	bl	8005c80 <RCCEx_PLL2_Config>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005b6e:	e006      	b.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x127e>

      default:
        ret = HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005b76:	e002      	b.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x127e>
 8005b78:	44020c00 	.word	0x44020c00
        break;
 8005b7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b7e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d10d      	bne.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x12a2>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8005b86:	4b3d      	ldr	r3, [pc, #244]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005b88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005b8c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005b90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b98:	4938      	ldr	r1, [pc, #224]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8005ba0:	e003      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x12aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ba2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005ba6:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005baa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb2:	2100      	movs	r1, #0
 8005bb4:	60b9      	str	r1, [r7, #8]
 8005bb6:	f003 0310 	and.w	r3, r3, #16
 8005bba:	60fb      	str	r3, [r7, #12]
 8005bbc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005bc0:	460b      	mov	r3, r1
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	d038      	beq.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x1338>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8005bc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005bca:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005bce:	2b30      	cmp	r3, #48	@ 0x30
 8005bd0:	d01b      	beq.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x130a>
 8005bd2:	2b30      	cmp	r3, #48	@ 0x30
 8005bd4:	d815      	bhi.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x1302>
 8005bd6:	2b10      	cmp	r3, #16
 8005bd8:	d002      	beq.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
 8005bda:	2b20      	cmp	r3, #32
 8005bdc:	d007      	beq.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x12ee>
 8005bde:	e010      	b.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x1302>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005be0:	4b26      	ldr	r3, [pc, #152]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005be2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005be4:	4a25      	ldr	r2, [pc, #148]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005be6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bea:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8005bec:	e00e      	b.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x130c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005bee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005bf2:	3330      	adds	r3, #48	@ 0x30
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f000 f8db 	bl	8005db0 <RCCEx_PLL3_Config>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8005c00:	e004      	b.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x130c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005c08:	e000      	b.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x130c>
        break;
 8005c0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c0c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d10d      	bne.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x1330>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8005c14:	4b19      	ldr	r3, [pc, #100]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005c16:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005c1a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005c1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c22:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005c26:	4915      	ldr	r1, [pc, #84]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8005c2e:	e003      	b.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x1338>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c30:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005c34:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005c38:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c40:	2100      	movs	r1, #0
 8005c42:	6039      	str	r1, [r7, #0]
 8005c44:	f003 0308 	and.w	r3, r3, #8
 8005c48:	607b      	str	r3, [r7, #4]
 8005c4a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005c4e:	460b      	mov	r3, r1
 8005c50:	4313      	orrs	r3, r2
 8005c52:	d00c      	beq.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x136e>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8005c54:	4b09      	ldr	r3, [pc, #36]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005c56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005c5a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005c5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c62:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005c66:	4905      	ldr	r1, [pc, #20]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 8005c6e:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	37e8      	adds	r7, #232	@ 0xe8
 8005c76:	46bd      	mov	sp, r7
 8005c78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c7c:	44020c00 	.word	0x44020c00

08005c80 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8005c88:	4b48      	ldr	r3, [pc, #288]	@ (8005dac <RCCEx_PLL2_Config+0x12c>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a47      	ldr	r2, [pc, #284]	@ (8005dac <RCCEx_PLL2_Config+0x12c>)
 8005c8e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005c92:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005c94:	f7fb f852 	bl	8000d3c <HAL_GetTick>
 8005c98:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005c9a:	e008      	b.n	8005cae <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005c9c:	f7fb f84e 	bl	8000d3c <HAL_GetTick>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	1ad3      	subs	r3, r2, r3
 8005ca6:	2b02      	cmp	r3, #2
 8005ca8:	d901      	bls.n	8005cae <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005caa:	2303      	movs	r3, #3
 8005cac:	e07a      	b.n	8005da4 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005cae:	4b3f      	ldr	r3, [pc, #252]	@ (8005dac <RCCEx_PLL2_Config+0x12c>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d1f0      	bne.n	8005c9c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8005cba:	4b3c      	ldr	r3, [pc, #240]	@ (8005dac <RCCEx_PLL2_Config+0x12c>)
 8005cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cbe:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005cc2:	f023 0303 	bic.w	r3, r3, #3
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	6811      	ldr	r1, [r2, #0]
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	6852      	ldr	r2, [r2, #4]
 8005cce:	0212      	lsls	r2, r2, #8
 8005cd0:	430a      	orrs	r2, r1
 8005cd2:	4936      	ldr	r1, [pc, #216]	@ (8005dac <RCCEx_PLL2_Config+0x12c>)
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	3b01      	subs	r3, #1
 8005cde:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	3b01      	subs	r3, #1
 8005ce8:	025b      	lsls	r3, r3, #9
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	431a      	orrs	r2, r3
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	691b      	ldr	r3, [r3, #16]
 8005cf2:	3b01      	subs	r3, #1
 8005cf4:	041b      	lsls	r3, r3, #16
 8005cf6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005cfa:	431a      	orrs	r2, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	695b      	ldr	r3, [r3, #20]
 8005d00:	3b01      	subs	r3, #1
 8005d02:	061b      	lsls	r3, r3, #24
 8005d04:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005d08:	4928      	ldr	r1, [pc, #160]	@ (8005dac <RCCEx_PLL2_Config+0x12c>)
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8005d0e:	4b27      	ldr	r3, [pc, #156]	@ (8005dac <RCCEx_PLL2_Config+0x12c>)
 8005d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d12:	f023 020c 	bic.w	r2, r3, #12
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	699b      	ldr	r3, [r3, #24]
 8005d1a:	4924      	ldr	r1, [pc, #144]	@ (8005dac <RCCEx_PLL2_Config+0x12c>)
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8005d20:	4b22      	ldr	r3, [pc, #136]	@ (8005dac <RCCEx_PLL2_Config+0x12c>)
 8005d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d24:	f023 0220 	bic.w	r2, r3, #32
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	69db      	ldr	r3, [r3, #28]
 8005d2c:	491f      	ldr	r1, [pc, #124]	@ (8005dac <RCCEx_PLL2_Config+0x12c>)
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8005d32:	4b1e      	ldr	r3, [pc, #120]	@ (8005dac <RCCEx_PLL2_Config+0x12c>)
 8005d34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d3a:	491c      	ldr	r1, [pc, #112]	@ (8005dac <RCCEx_PLL2_Config+0x12c>)
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8005d40:	4b1a      	ldr	r3, [pc, #104]	@ (8005dac <RCCEx_PLL2_Config+0x12c>)
 8005d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d44:	4a19      	ldr	r2, [pc, #100]	@ (8005dac <RCCEx_PLL2_Config+0x12c>)
 8005d46:	f023 0310 	bic.w	r3, r3, #16
 8005d4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8005d4c:	4b17      	ldr	r3, [pc, #92]	@ (8005dac <RCCEx_PLL2_Config+0x12c>)
 8005d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d50:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d54:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	6a12      	ldr	r2, [r2, #32]
 8005d5c:	00d2      	lsls	r2, r2, #3
 8005d5e:	4913      	ldr	r1, [pc, #76]	@ (8005dac <RCCEx_PLL2_Config+0x12c>)
 8005d60:	4313      	orrs	r3, r2
 8005d62:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8005d64:	4b11      	ldr	r3, [pc, #68]	@ (8005dac <RCCEx_PLL2_Config+0x12c>)
 8005d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d68:	4a10      	ldr	r2, [pc, #64]	@ (8005dac <RCCEx_PLL2_Config+0x12c>)
 8005d6a:	f043 0310 	orr.w	r3, r3, #16
 8005d6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8005d70:	4b0e      	ldr	r3, [pc, #56]	@ (8005dac <RCCEx_PLL2_Config+0x12c>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a0d      	ldr	r2, [pc, #52]	@ (8005dac <RCCEx_PLL2_Config+0x12c>)
 8005d76:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005d7a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005d7c:	f7fa ffde 	bl	8000d3c <HAL_GetTick>
 8005d80:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005d82:	e008      	b.n	8005d96 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005d84:	f7fa ffda 	bl	8000d3c <HAL_GetTick>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	1ad3      	subs	r3, r2, r3
 8005d8e:	2b02      	cmp	r3, #2
 8005d90:	d901      	bls.n	8005d96 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8005d92:	2303      	movs	r3, #3
 8005d94:	e006      	b.n	8005da4 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005d96:	4b05      	ldr	r3, [pc, #20]	@ (8005dac <RCCEx_PLL2_Config+0x12c>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d0f0      	beq.n	8005d84 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8005da2:	2300      	movs	r3, #0

}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3710      	adds	r7, #16
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}
 8005dac:	44020c00 	.word	0x44020c00

08005db0 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8005db8:	4b48      	ldr	r3, [pc, #288]	@ (8005edc <RCCEx_PLL3_Config+0x12c>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a47      	ldr	r2, [pc, #284]	@ (8005edc <RCCEx_PLL3_Config+0x12c>)
 8005dbe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005dc2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005dc4:	f7fa ffba 	bl	8000d3c <HAL_GetTick>
 8005dc8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005dca:	e008      	b.n	8005dde <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005dcc:	f7fa ffb6 	bl	8000d3c <HAL_GetTick>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	1ad3      	subs	r3, r2, r3
 8005dd6:	2b02      	cmp	r3, #2
 8005dd8:	d901      	bls.n	8005dde <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005dda:	2303      	movs	r3, #3
 8005ddc:	e07a      	b.n	8005ed4 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005dde:	4b3f      	ldr	r3, [pc, #252]	@ (8005edc <RCCEx_PLL3_Config+0x12c>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d1f0      	bne.n	8005dcc <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8005dea:	4b3c      	ldr	r3, [pc, #240]	@ (8005edc <RCCEx_PLL3_Config+0x12c>)
 8005dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dee:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005df2:	f023 0303 	bic.w	r3, r3, #3
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	6811      	ldr	r1, [r2, #0]
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	6852      	ldr	r2, [r2, #4]
 8005dfe:	0212      	lsls	r2, r2, #8
 8005e00:	430a      	orrs	r2, r1
 8005e02:	4936      	ldr	r1, [pc, #216]	@ (8005edc <RCCEx_PLL3_Config+0x12c>)
 8005e04:	4313      	orrs	r3, r2
 8005e06:	630b      	str	r3, [r1, #48]	@ 0x30
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	3b01      	subs	r3, #1
 8005e0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	68db      	ldr	r3, [r3, #12]
 8005e16:	3b01      	subs	r3, #1
 8005e18:	025b      	lsls	r3, r3, #9
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	431a      	orrs	r2, r3
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	691b      	ldr	r3, [r3, #16]
 8005e22:	3b01      	subs	r3, #1
 8005e24:	041b      	lsls	r3, r3, #16
 8005e26:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005e2a:	431a      	orrs	r2, r3
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	695b      	ldr	r3, [r3, #20]
 8005e30:	3b01      	subs	r3, #1
 8005e32:	061b      	lsls	r3, r3, #24
 8005e34:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005e38:	4928      	ldr	r1, [pc, #160]	@ (8005edc <RCCEx_PLL3_Config+0x12c>)
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005e3e:	4b27      	ldr	r3, [pc, #156]	@ (8005edc <RCCEx_PLL3_Config+0x12c>)
 8005e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e42:	f023 020c 	bic.w	r2, r3, #12
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	699b      	ldr	r3, [r3, #24]
 8005e4a:	4924      	ldr	r1, [pc, #144]	@ (8005edc <RCCEx_PLL3_Config+0x12c>)
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8005e50:	4b22      	ldr	r3, [pc, #136]	@ (8005edc <RCCEx_PLL3_Config+0x12c>)
 8005e52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e54:	f023 0220 	bic.w	r2, r3, #32
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	69db      	ldr	r3, [r3, #28]
 8005e5c:	491f      	ldr	r1, [pc, #124]	@ (8005edc <RCCEx_PLL3_Config+0x12c>)
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8005e62:	4b1e      	ldr	r3, [pc, #120]	@ (8005edc <RCCEx_PLL3_Config+0x12c>)
 8005e64:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e6a:	491c      	ldr	r1, [pc, #112]	@ (8005edc <RCCEx_PLL3_Config+0x12c>)
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8005e70:	4b1a      	ldr	r3, [pc, #104]	@ (8005edc <RCCEx_PLL3_Config+0x12c>)
 8005e72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e74:	4a19      	ldr	r2, [pc, #100]	@ (8005edc <RCCEx_PLL3_Config+0x12c>)
 8005e76:	f023 0310 	bic.w	r3, r3, #16
 8005e7a:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8005e7c:	4b17      	ldr	r3, [pc, #92]	@ (8005edc <RCCEx_PLL3_Config+0x12c>)
 8005e7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e80:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005e84:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	6a12      	ldr	r2, [r2, #32]
 8005e8c:	00d2      	lsls	r2, r2, #3
 8005e8e:	4913      	ldr	r1, [pc, #76]	@ (8005edc <RCCEx_PLL3_Config+0x12c>)
 8005e90:	4313      	orrs	r3, r2
 8005e92:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8005e94:	4b11      	ldr	r3, [pc, #68]	@ (8005edc <RCCEx_PLL3_Config+0x12c>)
 8005e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e98:	4a10      	ldr	r2, [pc, #64]	@ (8005edc <RCCEx_PLL3_Config+0x12c>)
 8005e9a:	f043 0310 	orr.w	r3, r3, #16
 8005e9e:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8005ea0:	4b0e      	ldr	r3, [pc, #56]	@ (8005edc <RCCEx_PLL3_Config+0x12c>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a0d      	ldr	r2, [pc, #52]	@ (8005edc <RCCEx_PLL3_Config+0x12c>)
 8005ea6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005eaa:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005eac:	f7fa ff46 	bl	8000d3c <HAL_GetTick>
 8005eb0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005eb2:	e008      	b.n	8005ec6 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005eb4:	f7fa ff42 	bl	8000d3c <HAL_GetTick>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	1ad3      	subs	r3, r2, r3
 8005ebe:	2b02      	cmp	r3, #2
 8005ec0:	d901      	bls.n	8005ec6 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 8005ec2:	2303      	movs	r3, #3
 8005ec4:	e006      	b.n	8005ed4 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005ec6:	4b05      	ldr	r3, [pc, #20]	@ (8005edc <RCCEx_PLL3_Config+0x12c>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d0f0      	beq.n	8005eb4 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 8005ed2:	2300      	movs	r3, #0
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3710      	adds	r7, #16
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}
 8005edc:	44020c00 	.word	0x44020c00

08005ee0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_DRD_TypeDef *USBx)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b085      	sub	sp, #20
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005eee:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8005ef2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = winterruptmask;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	68fa      	ldr	r2, [r7, #12]
 8005ef8:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005efa:	2300      	movs	r3, #0
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3714      	adds	r7, #20
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr

08005f08 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b085      	sub	sp, #20
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005f10:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8005f14:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	43db      	mvns	r3, r3
 8005f1e:	401a      	ands	r2, r3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005f24:	2300      	movs	r3, #0
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3714      	adds	r7, #20
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr

08005f32 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 8005f32:	b480      	push	{r7}
 8005f34:	b083      	sub	sp, #12
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	6078      	str	r0, [r7, #4]
 8005f3a:	460b      	mov	r3, r1
 8005f3c:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 8005f3e:	78fb      	ldrb	r3, [r7, #3]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d106      	bne.n	8005f52 <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f48:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	641a      	str	r2, [r3, #64]	@ 0x40
 8005f50:	e00b      	b.n	8005f6a <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 8005f52:	78fb      	ldrb	r3, [r7, #3]
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d106      	bne.n	8005f66 <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f5c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	641a      	str	r2, [r3, #64]	@ 0x40
 8005f64:	e001      	b.n	8005f6a <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e000      	b.n	8005f6c <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 8005f6a:	2300      	movs	r3, #0
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	370c      	adds	r7, #12
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 8005f78:	b084      	sub	sp, #16
 8005f7a:	b580      	push	{r7, lr}
 8005f7c:	b084      	sub	sp, #16
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
 8005f82:	f107 001c 	add.w	r0, r7, #28
 8005f86:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f94:	f023 0201 	bic.w	r2, r3, #1
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 8005f9c:	2100      	movs	r1, #0
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f7ff ffc7 	bl	8005f32 <USB_SetCurrentMode>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2200      	movs	r2, #0
 8005fac:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 8005fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3710      	adds	r7, #16
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005fba:	b004      	add	sp, #16
 8005fbc:	4770      	bx	lr
	...

08005fc0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b09f      	sub	sp, #124	@ 0x7c
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  uint32_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	4413      	add	r3, r2
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	4ba0      	ldr	r3, [pc, #640]	@ (8006260 <USB_ActivateEndpoint+0x2a0>)
 8005fde:	4013      	ands	r3, r2
 8005fe0:	673b      	str	r3, [r7, #112]	@ 0x70

  /* initialize Endpoint */
  switch (ep->type)
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	78db      	ldrb	r3, [r3, #3]
 8005fe6:	2b03      	cmp	r3, #3
 8005fe8:	d819      	bhi.n	800601e <USB_ActivateEndpoint+0x5e>
 8005fea:	a201      	add	r2, pc, #4	@ (adr r2, 8005ff0 <USB_ActivateEndpoint+0x30>)
 8005fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff0:	08006001 	.word	0x08006001
 8005ff4:	08006015 	.word	0x08006015
 8005ff8:	08006027 	.word	0x08006027
 8005ffc:	0800600b 	.word	0x0800600b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006000:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006002:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006006:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 8006008:	e00e      	b.n	8006028 <USB_ActivateEndpoint+0x68>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800600a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800600c:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8006010:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 8006012:	e009      	b.n	8006028 <USB_ActivateEndpoint+0x68>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006014:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006016:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800601a:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800601c:	e004      	b.n	8006028 <USB_ActivateEndpoint+0x68>

    default:
      ret = HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      break;
 8006024:	e000      	b.n	8006028 <USB_ActivateEndpoint+0x68>
      break;
 8006026:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_VTRX | USB_EP_VTTX));
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	441a      	add	r2, r3
 8006032:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006034:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006038:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800603c:	6013      	str	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	4413      	add	r3, r2
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	4b86      	ldr	r3, [pc, #536]	@ (8006264 <USB_ActivateEndpoint+0x2a4>)
 800604c:	4013      	ands	r3, r2
 800604e:	683a      	ldr	r2, [r7, #0]
 8006050:	7812      	ldrb	r2, [r2, #0]
 8006052:	4313      	orrs	r3, r2
 8006054:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	009b      	lsls	r3, r3, #2
 800605e:	441a      	add	r2, r3
 8006060:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006062:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006066:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800606a:	6013      	str	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	7b1b      	ldrb	r3, [r3, #12]
 8006070:	2b00      	cmp	r3, #0
 8006072:	f040 8177 	bne.w	8006364 <USB_ActivateEndpoint+0x3a4>
  {
    if (ep->is_in != 0U)
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	785b      	ldrb	r3, [r3, #1]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d079      	beq.n	8006172 <USB_ActivateEndpoint+0x1b2>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	00db      	lsls	r3, r3, #3
 8006084:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006088:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	00db      	lsls	r3, r3, #3
 8006094:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006098:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800609c:	0c12      	lsrs	r2, r2, #16
 800609e:	0412      	lsls	r2, r2, #16
 80060a0:	601a      	str	r2, [r3, #0]
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	00db      	lsls	r3, r3, #3
 80060a8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80060ac:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80060b0:	6819      	ldr	r1, [r3, #0]
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	88db      	ldrh	r3, [r3, #6]
 80060b6:	089b      	lsrs	r3, r3, #2
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	009a      	lsls	r2, r3, #2
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	00db      	lsls	r3, r3, #3
 80060c2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80060c6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80060ca:	430a      	orrs	r2, r1
 80060cc:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	4413      	add	r3, r2
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	61bb      	str	r3, [r7, #24]
 80060dc:	69bb      	ldr	r3, [r7, #24]
 80060de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d013      	beq.n	800610e <USB_ActivateEndpoint+0x14e>
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	009b      	lsls	r3, r3, #2
 80060ee:	4413      	add	r3, r2
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	4b5c      	ldr	r3, [pc, #368]	@ (8006264 <USB_ActivateEndpoint+0x2a4>)
 80060f4:	4013      	ands	r3, r2
 80060f6:	617b      	str	r3, [r7, #20]
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	441a      	add	r2, r3
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006108:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800610c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	78db      	ldrb	r3, [r3, #3]
 8006112:	2b01      	cmp	r3, #1
 8006114:	d018      	beq.n	8006148 <USB_ActivateEndpoint+0x188>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	4413      	add	r3, r2
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	4b51      	ldr	r3, [pc, #324]	@ (8006268 <USB_ActivateEndpoint+0x2a8>)
 8006124:	4013      	ands	r3, r2
 8006126:	60fb      	str	r3, [r7, #12]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f083 0320 	eor.w	r3, r3, #32
 800612e:	60fb      	str	r3, [r7, #12]
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	441a      	add	r2, r3
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006140:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006144:	6013      	str	r3, [r2, #0]
 8006146:	e28c      	b.n	8006662 <USB_ActivateEndpoint+0x6a2>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	4413      	add	r3, r2
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	4b44      	ldr	r3, [pc, #272]	@ (8006268 <USB_ActivateEndpoint+0x2a8>)
 8006156:	4013      	ands	r3, r2
 8006158:	613b      	str	r3, [r7, #16]
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	441a      	add	r2, r3
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800616a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800616e:	6013      	str	r3, [r2, #0]
 8006170:	e277      	b.n	8006662 <USB_ActivateEndpoint+0x6a2>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	00db      	lsls	r3, r3, #3
 8006178:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800617c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006180:	685a      	ldr	r2, [r3, #4]
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	00db      	lsls	r3, r3, #3
 8006188:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800618c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006190:	0c12      	lsrs	r2, r2, #16
 8006192:	0412      	lsls	r2, r2, #16
 8006194:	605a      	str	r2, [r3, #4]
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	00db      	lsls	r3, r3, #3
 800619c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80061a0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80061a4:	6859      	ldr	r1, [r3, #4]
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	88db      	ldrh	r3, [r3, #6]
 80061aa:	089b      	lsrs	r3, r3, #2
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	009a      	lsls	r2, r3, #2
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	00db      	lsls	r3, r3, #3
 80061b6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80061ba:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80061be:	430a      	orrs	r2, r1
 80061c0:	605a      	str	r2, [r3, #4]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	781b      	ldrb	r3, [r3, #0]
 80061c6:	00db      	lsls	r3, r3, #3
 80061c8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80061cc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80061d0:	685a      	ldr	r2, [r3, #4]
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	781b      	ldrb	r3, [r3, #0]
 80061d6:	00db      	lsls	r3, r3, #3
 80061d8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80061dc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80061e0:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80061e4:	605a      	str	r2, [r3, #4]
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	691b      	ldr	r3, [r3, #16]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d112      	bne.n	8006214 <USB_ActivateEndpoint+0x254>
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	00db      	lsls	r3, r3, #3
 80061f4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80061f8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80061fc:	685a      	ldr	r2, [r3, #4]
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	00db      	lsls	r3, r3, #3
 8006204:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006208:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800620c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006210:	605a      	str	r2, [r3, #4]
 8006212:	e04d      	b.n	80062b0 <USB_ActivateEndpoint+0x2f0>
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	691b      	ldr	r3, [r3, #16]
 8006218:	2b3e      	cmp	r3, #62	@ 0x3e
 800621a:	d827      	bhi.n	800626c <USB_ActivateEndpoint+0x2ac>
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	691b      	ldr	r3, [r3, #16]
 8006220:	085b      	lsrs	r3, r3, #1
 8006222:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	691b      	ldr	r3, [r3, #16]
 8006228:	f003 0301 	and.w	r3, r3, #1
 800622c:	2b00      	cmp	r3, #0
 800622e:	d002      	beq.n	8006236 <USB_ActivateEndpoint+0x276>
 8006230:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006232:	3301      	adds	r3, #1
 8006234:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	00db      	lsls	r3, r3, #3
 800623c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006240:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006244:	6859      	ldr	r1, [r3, #4]
 8006246:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006248:	069a      	lsls	r2, r3, #26
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	00db      	lsls	r3, r3, #3
 8006250:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006254:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006258:	430a      	orrs	r2, r1
 800625a:	605a      	str	r2, [r3, #4]
 800625c:	e028      	b.n	80062b0 <USB_ActivateEndpoint+0x2f0>
 800625e:	bf00      	nop
 8006260:	07ff898f 	.word	0x07ff898f
 8006264:	07ff8f8f 	.word	0x07ff8f8f
 8006268:	07ff8fbf 	.word	0x07ff8fbf
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	691b      	ldr	r3, [r3, #16]
 8006270:	095b      	lsrs	r3, r3, #5
 8006272:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	691b      	ldr	r3, [r3, #16]
 8006278:	f003 031f 	and.w	r3, r3, #31
 800627c:	2b00      	cmp	r3, #0
 800627e:	d102      	bne.n	8006286 <USB_ActivateEndpoint+0x2c6>
 8006280:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006282:	3b01      	subs	r3, #1
 8006284:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	781b      	ldrb	r3, [r3, #0]
 800628a:	00db      	lsls	r3, r3, #3
 800628c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006290:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006294:	685a      	ldr	r2, [r3, #4]
 8006296:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006298:	069b      	lsls	r3, r3, #26
 800629a:	431a      	orrs	r2, r3
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	00db      	lsls	r3, r3, #3
 80062a2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80062a6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80062aa:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80062ae:	605a      	str	r2, [r3, #4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	4413      	add	r3, r2
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80062be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d013      	beq.n	80062f0 <USB_ActivateEndpoint+0x330>
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	4413      	add	r3, r2
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	4b9c      	ldr	r3, [pc, #624]	@ (8006548 <USB_ActivateEndpoint+0x588>)
 80062d6:	4013      	ands	r3, r2
 80062d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	009b      	lsls	r3, r3, #2
 80062e2:	441a      	add	r2, r3
 80062e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062e6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80062ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062ee:	6013      	str	r3, [r2, #0]

      if (ep->num == 0U)
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d11c      	bne.n	8006332 <USB_ActivateEndpoint+0x372>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	4413      	add	r3, r2
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	4b91      	ldr	r3, [pc, #580]	@ (800654c <USB_ActivateEndpoint+0x58c>)
 8006306:	4013      	ands	r3, r2
 8006308:	61fb      	str	r3, [r7, #28]
 800630a:	69fb      	ldr	r3, [r7, #28]
 800630c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006310:	61fb      	str	r3, [r7, #28]
 8006312:	69fb      	ldr	r3, [r7, #28]
 8006314:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006318:	61fb      	str	r3, [r7, #28]
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	441a      	add	r2, r3
 8006324:	69fb      	ldr	r3, [r7, #28]
 8006326:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800632a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800632e:	6013      	str	r3, [r2, #0]
 8006330:	e197      	b.n	8006662 <USB_ActivateEndpoint+0x6a2>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	009b      	lsls	r3, r3, #2
 800633a:	4413      	add	r3, r2
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	4b83      	ldr	r3, [pc, #524]	@ (800654c <USB_ActivateEndpoint+0x58c>)
 8006340:	4013      	ands	r3, r2
 8006342:	623b      	str	r3, [r7, #32]
 8006344:	6a3b      	ldr	r3, [r7, #32]
 8006346:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800634a:	623b      	str	r3, [r7, #32]
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	441a      	add	r2, r3
 8006356:	6a3b      	ldr	r3, [r7, #32]
 8006358:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800635c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006360:	6013      	str	r3, [r2, #0]
 8006362:	e17e      	b.n	8006662 <USB_ActivateEndpoint+0x6a2>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	78db      	ldrb	r3, [r3, #3]
 8006368:	2b02      	cmp	r3, #2
 800636a:	d114      	bne.n	8006396 <USB_ActivateEndpoint+0x3d6>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	781b      	ldrb	r3, [r3, #0]
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	4413      	add	r3, r2
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	4b73      	ldr	r3, [pc, #460]	@ (8006548 <USB_ActivateEndpoint+0x588>)
 800637a:	4013      	ands	r3, r2
 800637c:	663b      	str	r3, [r7, #96]	@ 0x60
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	441a      	add	r2, r3
 8006388:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800638a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800638e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006392:	6013      	str	r3, [r2, #0]
 8006394:	e013      	b.n	80063be <USB_ActivateEndpoint+0x3fe>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	009b      	lsls	r3, r3, #2
 800639e:	4413      	add	r3, r2
 80063a0:	681a      	ldr	r2, [r3, #0]
 80063a2:	4b6b      	ldr	r3, [pc, #428]	@ (8006550 <USB_ActivateEndpoint+0x590>)
 80063a4:	4013      	ands	r3, r2
 80063a6:	667b      	str	r3, [r7, #100]	@ 0x64
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	009b      	lsls	r3, r3, #2
 80063b0:	441a      	add	r2, r3
 80063b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80063b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063bc:	6013      	str	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	00db      	lsls	r3, r3, #3
 80063c4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80063c8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	781b      	ldrb	r3, [r3, #0]
 80063d2:	00db      	lsls	r3, r3, #3
 80063d4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80063d8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80063dc:	0c12      	lsrs	r2, r2, #16
 80063de:	0412      	lsls	r2, r2, #16
 80063e0:	601a      	str	r2, [r3, #0]
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	781b      	ldrb	r3, [r3, #0]
 80063e6:	00db      	lsls	r3, r3, #3
 80063e8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80063ec:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80063f0:	6819      	ldr	r1, [r3, #0]
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	891b      	ldrh	r3, [r3, #8]
 80063f6:	089b      	lsrs	r3, r3, #2
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	009a      	lsls	r2, r3, #2
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	00db      	lsls	r3, r3, #3
 8006402:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006406:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800640a:	430a      	orrs	r2, r1
 800640c:	601a      	str	r2, [r3, #0]
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	00db      	lsls	r3, r3, #3
 8006414:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006418:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800641c:	685a      	ldr	r2, [r3, #4]
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	781b      	ldrb	r3, [r3, #0]
 8006422:	00db      	lsls	r3, r3, #3
 8006424:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006428:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800642c:	0c12      	lsrs	r2, r2, #16
 800642e:	0412      	lsls	r2, r2, #16
 8006430:	605a      	str	r2, [r3, #4]
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	00db      	lsls	r3, r3, #3
 8006438:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800643c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006440:	6859      	ldr	r1, [r3, #4]
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	895b      	ldrh	r3, [r3, #10]
 8006446:	089b      	lsrs	r3, r3, #2
 8006448:	b29b      	uxth	r3, r3
 800644a:	009a      	lsls	r2, r3, #2
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	00db      	lsls	r3, r3, #3
 8006452:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006456:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800645a:	430a      	orrs	r2, r1
 800645c:	605a      	str	r2, [r3, #4]

    if (ep->is_in == 0U)
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	785b      	ldrb	r3, [r3, #1]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d178      	bne.n	8006558 <USB_ActivateEndpoint+0x598>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	009b      	lsls	r3, r3, #2
 800646e:	4413      	add	r3, r2
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	643b      	str	r3, [r7, #64]	@ 0x40
 8006474:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006476:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800647a:	2b00      	cmp	r3, #0
 800647c:	d013      	beq.n	80064a6 <USB_ActivateEndpoint+0x4e6>
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	781b      	ldrb	r3, [r3, #0]
 8006484:	009b      	lsls	r3, r3, #2
 8006486:	4413      	add	r3, r2
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	4b2f      	ldr	r3, [pc, #188]	@ (8006548 <USB_ActivateEndpoint+0x588>)
 800648c:	4013      	ands	r3, r2
 800648e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	781b      	ldrb	r3, [r3, #0]
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	441a      	add	r2, r3
 800649a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800649c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80064a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064a4:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80064a6:	687a      	ldr	r2, [r7, #4]
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	781b      	ldrb	r3, [r3, #0]
 80064ac:	009b      	lsls	r3, r3, #2
 80064ae:	4413      	add	r3, r2
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80064b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d013      	beq.n	80064e6 <USB_ActivateEndpoint+0x526>
 80064be:	687a      	ldr	r2, [r7, #4]
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	009b      	lsls	r3, r3, #2
 80064c6:	4413      	add	r3, r2
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	4b1f      	ldr	r3, [pc, #124]	@ (8006548 <USB_ActivateEndpoint+0x588>)
 80064cc:	4013      	ands	r3, r2
 80064ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	441a      	add	r2, r3
 80064da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064e0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80064e4:	6013      	str	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	781b      	ldrb	r3, [r3, #0]
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	4413      	add	r3, r2
 80064f0:	681a      	ldr	r2, [r3, #0]
 80064f2:	4b16      	ldr	r3, [pc, #88]	@ (800654c <USB_ActivateEndpoint+0x58c>)
 80064f4:	4013      	ands	r3, r2
 80064f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80064f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064fa:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80064fe:	633b      	str	r3, [r7, #48]	@ 0x30
 8006500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006502:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006506:	633b      	str	r3, [r7, #48]	@ 0x30
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	441a      	add	r2, r3
 8006512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006514:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006518:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800651c:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800651e:	687a      	ldr	r2, [r7, #4]
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	4413      	add	r3, r2
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	4b0a      	ldr	r3, [pc, #40]	@ (8006554 <USB_ActivateEndpoint+0x594>)
 800652c:	4013      	ands	r3, r2
 800652e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	009b      	lsls	r3, r3, #2
 8006538:	441a      	add	r2, r3
 800653a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800653c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006540:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006544:	6013      	str	r3, [r2, #0]
 8006546:	e08c      	b.n	8006662 <USB_ActivateEndpoint+0x6a2>
 8006548:	07ff8f8f 	.word	0x07ff8f8f
 800654c:	07ffbf8f 	.word	0x07ffbf8f
 8006550:	07ff8e8f 	.word	0x07ff8e8f
 8006554:	07ff8fbf 	.word	0x07ff8fbf
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	781b      	ldrb	r3, [r3, #0]
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	4413      	add	r3, r2
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006566:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006568:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800656c:	2b00      	cmp	r3, #0
 800656e:	d013      	beq.n	8006598 <USB_ActivateEndpoint+0x5d8>
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	4413      	add	r3, r2
 800657a:	681a      	ldr	r2, [r3, #0]
 800657c:	4b3d      	ldr	r3, [pc, #244]	@ (8006674 <USB_ActivateEndpoint+0x6b4>)
 800657e:	4013      	ands	r3, r2
 8006580:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	781b      	ldrb	r3, [r3, #0]
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	441a      	add	r2, r3
 800658c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800658e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006592:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006596:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	009b      	lsls	r3, r3, #2
 80065a0:	4413      	add	r3, r2
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	657b      	str	r3, [r7, #84]	@ 0x54
 80065a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80065a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d013      	beq.n	80065d8 <USB_ActivateEndpoint+0x618>
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	781b      	ldrb	r3, [r3, #0]
 80065b6:	009b      	lsls	r3, r3, #2
 80065b8:	4413      	add	r3, r2
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	4b2d      	ldr	r3, [pc, #180]	@ (8006674 <USB_ActivateEndpoint+0x6b4>)
 80065be:	4013      	ands	r3, r2
 80065c0:	653b      	str	r3, [r7, #80]	@ 0x50
 80065c2:	687a      	ldr	r2, [r7, #4]
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	441a      	add	r2, r3
 80065cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80065ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065d2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80065d6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	78db      	ldrb	r3, [r3, #3]
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d018      	beq.n	8006612 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	4413      	add	r3, r2
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	4b22      	ldr	r3, [pc, #136]	@ (8006678 <USB_ActivateEndpoint+0x6b8>)
 80065ee:	4013      	ands	r3, r2
 80065f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80065f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065f4:	f083 0320 	eor.w	r3, r3, #32
 80065f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	009b      	lsls	r3, r3, #2
 8006602:	441a      	add	r2, r3
 8006604:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006606:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800660a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800660e:	6013      	str	r3, [r2, #0]
 8006610:	e013      	b.n	800663a <USB_ActivateEndpoint+0x67a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	4413      	add	r3, r2
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	4b16      	ldr	r3, [pc, #88]	@ (8006678 <USB_ActivateEndpoint+0x6b8>)
 8006620:	4013      	ands	r3, r2
 8006622:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	781b      	ldrb	r3, [r3, #0]
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	441a      	add	r2, r3
 800662e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006630:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006634:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006638:	6013      	str	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800663a:	687a      	ldr	r2, [r7, #4]
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	009b      	lsls	r3, r3, #2
 8006642:	4413      	add	r3, r2
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	4b0d      	ldr	r3, [pc, #52]	@ (800667c <USB_ActivateEndpoint+0x6bc>)
 8006648:	4013      	ands	r3, r2
 800664a:	647b      	str	r3, [r7, #68]	@ 0x44
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	009b      	lsls	r3, r3, #2
 8006654:	441a      	add	r2, r3
 8006656:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006658:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800665c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006660:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006662:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8006666:	4618      	mov	r0, r3
 8006668:	377c      	adds	r7, #124	@ 0x7c
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr
 8006672:	bf00      	nop
 8006674:	07ff8f8f 	.word	0x07ff8f8f
 8006678:	07ff8fbf 	.word	0x07ff8fbf
 800667c:	07ffbf8f 	.word	0x07ffbf8f

08006680 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8006680:	b480      	push	{r7}
 8006682:	b097      	sub	sp, #92	@ 0x5c
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
 8006688:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	7b1b      	ldrb	r3, [r3, #12]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d16d      	bne.n	800676e <USB_DeactivateEndpoint+0xee>
  {
    if (ep->is_in != 0U)
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	785b      	ldrb	r3, [r3, #1]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d034      	beq.n	8006704 <USB_DeactivateEndpoint+0x84>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	009b      	lsls	r3, r3, #2
 80066a2:	4413      	add	r3, r2
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	613b      	str	r3, [r7, #16]
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d013      	beq.n	80066da <USB_DeactivateEndpoint+0x5a>
 80066b2:	687a      	ldr	r2, [r7, #4]
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	009b      	lsls	r3, r3, #2
 80066ba:	4413      	add	r3, r2
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	4b6d      	ldr	r3, [pc, #436]	@ (8006874 <USB_DeactivateEndpoint+0x1f4>)
 80066c0:	4013      	ands	r3, r2
 80066c2:	60fb      	str	r3, [r7, #12]
 80066c4:	687a      	ldr	r2, [r7, #4]
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	009b      	lsls	r3, r3, #2
 80066cc:	441a      	add	r2, r3
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066d4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80066d8:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80066da:	687a      	ldr	r2, [r7, #4]
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	4413      	add	r3, r2
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	4b64      	ldr	r3, [pc, #400]	@ (8006878 <USB_DeactivateEndpoint+0x1f8>)
 80066e8:	4013      	ands	r3, r2
 80066ea:	60bb      	str	r3, [r7, #8]
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	009b      	lsls	r3, r3, #2
 80066f4:	441a      	add	r2, r3
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006700:	6013      	str	r3, [r2, #0]
 8006702:	e139      	b.n	8006978 <USB_DeactivateEndpoint+0x2f8>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	781b      	ldrb	r3, [r3, #0]
 800670a:	009b      	lsls	r3, r3, #2
 800670c:	4413      	add	r3, r2
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	61fb      	str	r3, [r7, #28]
 8006712:	69fb      	ldr	r3, [r7, #28]
 8006714:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006718:	2b00      	cmp	r3, #0
 800671a:	d013      	beq.n	8006744 <USB_DeactivateEndpoint+0xc4>
 800671c:	687a      	ldr	r2, [r7, #4]
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	009b      	lsls	r3, r3, #2
 8006724:	4413      	add	r3, r2
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	4b52      	ldr	r3, [pc, #328]	@ (8006874 <USB_DeactivateEndpoint+0x1f4>)
 800672a:	4013      	ands	r3, r2
 800672c:	61bb      	str	r3, [r7, #24]
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	009b      	lsls	r3, r3, #2
 8006736:	441a      	add	r2, r3
 8006738:	69bb      	ldr	r3, [r7, #24]
 800673a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800673e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006742:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006744:	687a      	ldr	r2, [r7, #4]
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	009b      	lsls	r3, r3, #2
 800674c:	4413      	add	r3, r2
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	4b4a      	ldr	r3, [pc, #296]	@ (800687c <USB_DeactivateEndpoint+0x1fc>)
 8006752:	4013      	ands	r3, r2
 8006754:	617b      	str	r3, [r7, #20]
 8006756:	687a      	ldr	r2, [r7, #4]
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	441a      	add	r2, r3
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006766:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800676a:	6013      	str	r3, [r2, #0]
 800676c:	e104      	b.n	8006978 <USB_DeactivateEndpoint+0x2f8>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	785b      	ldrb	r3, [r3, #1]
 8006772:	2b00      	cmp	r3, #0
 8006774:	f040 8084 	bne.w	8006880 <USB_DeactivateEndpoint+0x200>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	781b      	ldrb	r3, [r3, #0]
 800677e:	009b      	lsls	r3, r3, #2
 8006780:	4413      	add	r3, r2
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006788:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800678c:	2b00      	cmp	r3, #0
 800678e:	d013      	beq.n	80067b8 <USB_DeactivateEndpoint+0x138>
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	4413      	add	r3, r2
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	4b35      	ldr	r3, [pc, #212]	@ (8006874 <USB_DeactivateEndpoint+0x1f4>)
 800679e:	4013      	ands	r3, r2
 80067a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	441a      	add	r2, r3
 80067ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067ae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80067b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067b6:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	009b      	lsls	r3, r3, #2
 80067c0:	4413      	add	r3, r2
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80067c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d013      	beq.n	80067f8 <USB_DeactivateEndpoint+0x178>
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	781b      	ldrb	r3, [r3, #0]
 80067d6:	009b      	lsls	r3, r3, #2
 80067d8:	4413      	add	r3, r2
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	4b25      	ldr	r3, [pc, #148]	@ (8006874 <USB_DeactivateEndpoint+0x1f4>)
 80067de:	4013      	ands	r3, r2
 80067e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	009b      	lsls	r3, r3, #2
 80067ea:	441a      	add	r2, r3
 80067ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067f2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80067f6:	6013      	str	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80067f8:	687a      	ldr	r2, [r7, #4]
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	781b      	ldrb	r3, [r3, #0]
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	4413      	add	r3, r2
 8006802:	681a      	ldr	r2, [r3, #0]
 8006804:	4b1b      	ldr	r3, [pc, #108]	@ (8006874 <USB_DeactivateEndpoint+0x1f4>)
 8006806:	4013      	ands	r3, r2
 8006808:	62bb      	str	r3, [r7, #40]	@ 0x28
 800680a:	687a      	ldr	r2, [r7, #4]
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	441a      	add	r2, r3
 8006814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006816:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800681a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800681e:	6013      	str	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006820:	687a      	ldr	r2, [r7, #4]
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	4413      	add	r3, r2
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	4b13      	ldr	r3, [pc, #76]	@ (800687c <USB_DeactivateEndpoint+0x1fc>)
 800682e:	4013      	ands	r3, r2
 8006830:	627b      	str	r3, [r7, #36]	@ 0x24
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	441a      	add	r2, r3
 800683c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800683e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006842:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006846:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	4413      	add	r3, r2
 8006852:	681a      	ldr	r2, [r3, #0]
 8006854:	4b08      	ldr	r3, [pc, #32]	@ (8006878 <USB_DeactivateEndpoint+0x1f8>)
 8006856:	4013      	ands	r3, r2
 8006858:	623b      	str	r3, [r7, #32]
 800685a:	687a      	ldr	r2, [r7, #4]
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	441a      	add	r2, r3
 8006864:	6a3b      	ldr	r3, [r7, #32]
 8006866:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800686a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800686e:	6013      	str	r3, [r2, #0]
 8006870:	e082      	b.n	8006978 <USB_DeactivateEndpoint+0x2f8>
 8006872:	bf00      	nop
 8006874:	07ff8f8f 	.word	0x07ff8f8f
 8006878:	07ff8fbf 	.word	0x07ff8fbf
 800687c:	07ffbf8f 	.word	0x07ffbf8f
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	4413      	add	r3, r2
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	657b      	str	r3, [r7, #84]	@ 0x54
 800688e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006890:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006894:	2b00      	cmp	r3, #0
 8006896:	d013      	beq.n	80068c0 <USB_DeactivateEndpoint+0x240>
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	4413      	add	r3, r2
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	4b38      	ldr	r3, [pc, #224]	@ (8006988 <USB_DeactivateEndpoint+0x308>)
 80068a6:	4013      	ands	r3, r2
 80068a8:	653b      	str	r3, [r7, #80]	@ 0x50
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	781b      	ldrb	r3, [r3, #0]
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	441a      	add	r2, r3
 80068b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80068b6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80068ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068be:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	009b      	lsls	r3, r3, #2
 80068c8:	4413      	add	r3, r2
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80068ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80068d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d013      	beq.n	8006900 <USB_DeactivateEndpoint+0x280>
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	4413      	add	r3, r2
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	4b28      	ldr	r3, [pc, #160]	@ (8006988 <USB_DeactivateEndpoint+0x308>)
 80068e6:	4013      	ands	r3, r2
 80068e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80068ea:	687a      	ldr	r2, [r7, #4]
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	009b      	lsls	r3, r3, #2
 80068f2:	441a      	add	r2, r3
 80068f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80068f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068fa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80068fe:	6013      	str	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006900:	687a      	ldr	r2, [r7, #4]
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	009b      	lsls	r3, r3, #2
 8006908:	4413      	add	r3, r2
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	4b1e      	ldr	r3, [pc, #120]	@ (8006988 <USB_DeactivateEndpoint+0x308>)
 800690e:	4013      	ands	r3, r2
 8006910:	647b      	str	r3, [r7, #68]	@ 0x44
 8006912:	687a      	ldr	r2, [r7, #4]
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	441a      	add	r2, r3
 800691c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800691e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006922:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006926:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	781b      	ldrb	r3, [r3, #0]
 800692e:	009b      	lsls	r3, r3, #2
 8006930:	4413      	add	r3, r2
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	4b15      	ldr	r3, [pc, #84]	@ (800698c <USB_DeactivateEndpoint+0x30c>)
 8006936:	4013      	ands	r3, r2
 8006938:	643b      	str	r3, [r7, #64]	@ 0x40
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	009b      	lsls	r3, r3, #2
 8006942:	441a      	add	r2, r3
 8006944:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006946:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800694a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800694e:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	781b      	ldrb	r3, [r3, #0]
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	4413      	add	r3, r2
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	4b0c      	ldr	r3, [pc, #48]	@ (8006990 <USB_DeactivateEndpoint+0x310>)
 800695e:	4013      	ands	r3, r2
 8006960:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	441a      	add	r2, r3
 800696c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800696e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006972:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006976:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006978:	2300      	movs	r3, #0
}
 800697a:	4618      	mov	r0, r3
 800697c:	375c      	adds	r7, #92	@ 0x5c
 800697e:	46bd      	mov	sp, r7
 8006980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006984:	4770      	bx	lr
 8006986:	bf00      	nop
 8006988:	07ff8f8f 	.word	0x07ff8f8f
 800698c:	07ff8fbf 	.word	0x07ff8fbf
 8006990:	07ffbf8f 	.word	0x07ffbf8f

08006994 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b096      	sub	sp, #88	@ 0x58
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	785b      	ldrb	r3, [r3, #1]
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	f040 84ed 	bne.w	8007382 <USB_EPStartXfer+0x9ee>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	699a      	ldr	r2, [r3, #24]
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	691b      	ldr	r3, [r3, #16]
 80069b0:	429a      	cmp	r2, r3
 80069b2:	d903      	bls.n	80069bc <USB_EPStartXfer+0x28>
    {
      len = ep->maxpacket;
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	691b      	ldr	r3, [r3, #16]
 80069b8:	657b      	str	r3, [r7, #84]	@ 0x54
 80069ba:	e002      	b.n	80069c2 <USB_EPStartXfer+0x2e>
    }
    else
    {
      len = ep->xfer_len;
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	699b      	ldr	r3, [r3, #24]
 80069c0:	657b      	str	r3, [r7, #84]	@ 0x54
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	7b1b      	ldrb	r3, [r3, #12]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d12e      	bne.n	8006a28 <USB_EPStartXfer+0x94>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	6959      	ldr	r1, [r3, #20]
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	88da      	ldrh	r2, [r3, #6]
 80069d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f001 f952 	bl	8007c80 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	00db      	lsls	r3, r3, #3
 80069e2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80069e6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	00db      	lsls	r3, r3, #3
 80069f2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80069f6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80069fa:	b292      	uxth	r2, r2
 80069fc:	601a      	str	r2, [r3, #0]
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	00db      	lsls	r3, r3, #3
 8006a04:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006a08:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006a0c:	6819      	ldr	r1, [r3, #0]
 8006a0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a10:	041a      	lsls	r2, r3, #16
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	781b      	ldrb	r3, [r3, #0]
 8006a16:	00db      	lsls	r3, r3, #3
 8006a18:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006a1c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006a20:	430a      	orrs	r2, r1
 8006a22:	601a      	str	r2, [r3, #0]
 8006a24:	f000 bc90 	b.w	8007348 <USB_EPStartXfer+0x9b4>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	78db      	ldrb	r3, [r3, #3]
 8006a2c:	2b02      	cmp	r3, #2
 8006a2e:	f040 8332 	bne.w	8007096 <USB_EPStartXfer+0x702>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	6a1a      	ldr	r2, [r3, #32]
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	691b      	ldr	r3, [r3, #16]
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	f240 82e4 	bls.w	8007008 <USB_EPStartXfer+0x674>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	4413      	add	r3, r2
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	4ba4      	ldr	r3, [pc, #656]	@ (8006ce0 <USB_EPStartXfer+0x34c>)
 8006a4e:	4013      	ands	r3, r2
 8006a50:	613b      	str	r3, [r7, #16]
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	441a      	add	r2, r3
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006a62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a66:	6013      	str	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	6a1a      	ldr	r2, [r3, #32]
 8006a6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a6e:	1ad2      	subs	r2, r2, r3
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006a74:	687a      	ldr	r2, [r7, #4]
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	781b      	ldrb	r3, [r3, #0]
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	4413      	add	r3, r2
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	f000 8161 	beq.w	8006d4c <USB_EPStartXfer+0x3b8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	785b      	ldrb	r3, [r3, #1]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d16a      	bne.n	8006b68 <USB_EPStartXfer+0x1d4>
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	00db      	lsls	r3, r3, #3
 8006a98:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006a9c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006aa0:	685a      	ldr	r2, [r3, #4]
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	00db      	lsls	r3, r3, #3
 8006aa8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006aac:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006ab0:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8006ab4:	605a      	str	r2, [r3, #4]
 8006ab6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d112      	bne.n	8006ae2 <USB_EPStartXfer+0x14e>
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	781b      	ldrb	r3, [r3, #0]
 8006ac0:	00db      	lsls	r3, r3, #3
 8006ac2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006ac6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006aca:	685a      	ldr	r2, [r3, #4]
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	781b      	ldrb	r3, [r3, #0]
 8006ad0:	00db      	lsls	r3, r3, #3
 8006ad2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006ad6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006ada:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006ade:	605a      	str	r2, [r3, #4]
 8006ae0:	e06a      	b.n	8006bb8 <USB_EPStartXfer+0x224>
 8006ae2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ae4:	2b3e      	cmp	r3, #62	@ 0x3e
 8006ae6:	d81e      	bhi.n	8006b26 <USB_EPStartXfer+0x192>
 8006ae8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006aea:	085b      	lsrs	r3, r3, #1
 8006aec:	653b      	str	r3, [r7, #80]	@ 0x50
 8006aee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006af0:	f003 0301 	and.w	r3, r3, #1
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d002      	beq.n	8006afe <USB_EPStartXfer+0x16a>
 8006af8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006afa:	3301      	adds	r3, #1
 8006afc:	653b      	str	r3, [r7, #80]	@ 0x50
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	00db      	lsls	r3, r3, #3
 8006b04:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006b08:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006b0c:	6859      	ldr	r1, [r3, #4]
 8006b0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b10:	069a      	lsls	r2, r3, #26
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	781b      	ldrb	r3, [r3, #0]
 8006b16:	00db      	lsls	r3, r3, #3
 8006b18:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006b1c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006b20:	430a      	orrs	r2, r1
 8006b22:	605a      	str	r2, [r3, #4]
 8006b24:	e048      	b.n	8006bb8 <USB_EPStartXfer+0x224>
 8006b26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b28:	095b      	lsrs	r3, r3, #5
 8006b2a:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b2e:	f003 031f 	and.w	r3, r3, #31
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d102      	bne.n	8006b3c <USB_EPStartXfer+0x1a8>
 8006b36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b38:	3b01      	subs	r3, #1
 8006b3a:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	00db      	lsls	r3, r3, #3
 8006b42:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006b46:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006b4a:	685a      	ldr	r2, [r3, #4]
 8006b4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b4e:	069b      	lsls	r3, r3, #26
 8006b50:	431a      	orrs	r2, r3
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	00db      	lsls	r3, r3, #3
 8006b58:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006b5c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006b60:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006b64:	605a      	str	r2, [r3, #4]
 8006b66:	e027      	b.n	8006bb8 <USB_EPStartXfer+0x224>
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	785b      	ldrb	r3, [r3, #1]
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d123      	bne.n	8006bb8 <USB_EPStartXfer+0x224>
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	00db      	lsls	r3, r3, #3
 8006b76:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006b7a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006b7e:	685a      	ldr	r2, [r3, #4]
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	00db      	lsls	r3, r3, #3
 8006b86:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006b8a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006b8e:	b292      	uxth	r2, r2
 8006b90:	605a      	str	r2, [r3, #4]
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	781b      	ldrb	r3, [r3, #0]
 8006b96:	00db      	lsls	r3, r3, #3
 8006b98:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006b9c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006ba0:	6859      	ldr	r1, [r3, #4]
 8006ba2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ba4:	041a      	lsls	r2, r3, #16
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	781b      	ldrb	r3, [r3, #0]
 8006baa:	00db      	lsls	r3, r3, #3
 8006bac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006bb0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006bb4:	430a      	orrs	r2, r1
 8006bb6:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	895b      	ldrh	r3, [r3, #10]
 8006bbc:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	6959      	ldr	r1, [r3, #20]
 8006bc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	8b7a      	ldrh	r2, [r7, #26]
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f001 f859 	bl	8007c80 <USB_WritePMA>
            ep->xfer_buff += len;
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	695a      	ldr	r2, [r3, #20]
 8006bd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006bd4:	441a      	add	r2, r3
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	6a1a      	ldr	r2, [r3, #32]
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	691b      	ldr	r3, [r3, #16]
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d906      	bls.n	8006bf4 <USB_EPStartXfer+0x260>
            {
              ep->xfer_len_db -= len;
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	6a1a      	ldr	r2, [r3, #32]
 8006bea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006bec:	1ad2      	subs	r2, r2, r3
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	621a      	str	r2, [r3, #32]
 8006bf2:	e005      	b.n	8006c00 <USB_EPStartXfer+0x26c>
            }
            else
            {
              len = ep->xfer_len_db;
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	6a1b      	ldr	r3, [r3, #32]
 8006bf8:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	785b      	ldrb	r3, [r3, #1]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d16d      	bne.n	8006ce4 <USB_EPStartXfer+0x350>
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	00db      	lsls	r3, r3, #3
 8006c0e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006c12:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	781b      	ldrb	r3, [r3, #0]
 8006c1c:	00db      	lsls	r3, r3, #3
 8006c1e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006c22:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006c26:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8006c2a:	601a      	str	r2, [r3, #0]
 8006c2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d112      	bne.n	8006c58 <USB_EPStartXfer+0x2c4>
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	781b      	ldrb	r3, [r3, #0]
 8006c36:	00db      	lsls	r3, r3, #3
 8006c38:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006c3c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006c40:	681a      	ldr	r2, [r3, #0]
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	00db      	lsls	r3, r3, #3
 8006c48:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006c4c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006c50:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006c54:	601a      	str	r2, [r3, #0]
 8006c56:	e06d      	b.n	8006d34 <USB_EPStartXfer+0x3a0>
 8006c58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c5a:	2b3e      	cmp	r3, #62	@ 0x3e
 8006c5c:	d81e      	bhi.n	8006c9c <USB_EPStartXfer+0x308>
 8006c5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c60:	085b      	lsrs	r3, r3, #1
 8006c62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c66:	f003 0301 	and.w	r3, r3, #1
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d002      	beq.n	8006c74 <USB_EPStartXfer+0x2e0>
 8006c6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c70:	3301      	adds	r3, #1
 8006c72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	781b      	ldrb	r3, [r3, #0]
 8006c78:	00db      	lsls	r3, r3, #3
 8006c7a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006c7e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006c82:	6819      	ldr	r1, [r3, #0]
 8006c84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c86:	069a      	lsls	r2, r3, #26
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	00db      	lsls	r3, r3, #3
 8006c8e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006c92:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006c96:	430a      	orrs	r2, r1
 8006c98:	601a      	str	r2, [r3, #0]
 8006c9a:	e04b      	b.n	8006d34 <USB_EPStartXfer+0x3a0>
 8006c9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c9e:	095b      	lsrs	r3, r3, #5
 8006ca0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ca2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ca4:	f003 031f 	and.w	r3, r3, #31
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d102      	bne.n	8006cb2 <USB_EPStartXfer+0x31e>
 8006cac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006cae:	3b01      	subs	r3, #1
 8006cb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	00db      	lsls	r3, r3, #3
 8006cb8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006cbc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006cc4:	069b      	lsls	r3, r3, #26
 8006cc6:	431a      	orrs	r2, r3
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	00db      	lsls	r3, r3, #3
 8006cce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006cd2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006cd6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006cda:	601a      	str	r2, [r3, #0]
 8006cdc:	e02a      	b.n	8006d34 <USB_EPStartXfer+0x3a0>
 8006cde:	bf00      	nop
 8006ce0:	07ff8f8f 	.word	0x07ff8f8f
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	785b      	ldrb	r3, [r3, #1]
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d123      	bne.n	8006d34 <USB_EPStartXfer+0x3a0>
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	781b      	ldrb	r3, [r3, #0]
 8006cf0:	00db      	lsls	r3, r3, #3
 8006cf2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006cf6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	00db      	lsls	r3, r3, #3
 8006d02:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006d06:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006d0a:	b292      	uxth	r2, r2
 8006d0c:	601a      	str	r2, [r3, #0]
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	00db      	lsls	r3, r3, #3
 8006d14:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006d18:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006d1c:	6819      	ldr	r1, [r3, #0]
 8006d1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d20:	041a      	lsls	r2, r3, #16
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	00db      	lsls	r3, r3, #3
 8006d28:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006d2c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006d30:	430a      	orrs	r2, r1
 8006d32:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	891b      	ldrh	r3, [r3, #8]
 8006d38:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	6959      	ldr	r1, [r3, #20]
 8006d3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	8b7a      	ldrh	r2, [r7, #26]
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f000 ff9b 	bl	8007c80 <USB_WritePMA>
 8006d4a:	e2fd      	b.n	8007348 <USB_EPStartXfer+0x9b4>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	785b      	ldrb	r3, [r3, #1]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d16a      	bne.n	8006e2a <USB_EPStartXfer+0x496>
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	00db      	lsls	r3, r3, #3
 8006d5a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006d5e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	00db      	lsls	r3, r3, #3
 8006d6a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006d6e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006d72:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8006d76:	601a      	str	r2, [r3, #0]
 8006d78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d112      	bne.n	8006da4 <USB_EPStartXfer+0x410>
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	781b      	ldrb	r3, [r3, #0]
 8006d82:	00db      	lsls	r3, r3, #3
 8006d84:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006d88:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	781b      	ldrb	r3, [r3, #0]
 8006d92:	00db      	lsls	r3, r3, #3
 8006d94:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006d98:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006d9c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006da0:	601a      	str	r2, [r3, #0]
 8006da2:	e06a      	b.n	8006e7a <USB_EPStartXfer+0x4e6>
 8006da4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006da6:	2b3e      	cmp	r3, #62	@ 0x3e
 8006da8:	d81e      	bhi.n	8006de8 <USB_EPStartXfer+0x454>
 8006daa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006dac:	085b      	lsrs	r3, r3, #1
 8006dae:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006db0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006db2:	f003 0301 	and.w	r3, r3, #1
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d002      	beq.n	8006dc0 <USB_EPStartXfer+0x42c>
 8006dba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006dbc:	3301      	adds	r3, #1
 8006dbe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	00db      	lsls	r3, r3, #3
 8006dc6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006dca:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006dce:	6819      	ldr	r1, [r3, #0]
 8006dd0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006dd2:	069a      	lsls	r2, r3, #26
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	00db      	lsls	r3, r3, #3
 8006dda:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006dde:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006de2:	430a      	orrs	r2, r1
 8006de4:	601a      	str	r2, [r3, #0]
 8006de6:	e048      	b.n	8006e7a <USB_EPStartXfer+0x4e6>
 8006de8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006dea:	095b      	lsrs	r3, r3, #5
 8006dec:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006dee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006df0:	f003 031f 	and.w	r3, r3, #31
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d102      	bne.n	8006dfe <USB_EPStartXfer+0x46a>
 8006df8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006dfa:	3b01      	subs	r3, #1
 8006dfc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	00db      	lsls	r3, r3, #3
 8006e04:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006e08:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006e0c:	681a      	ldr	r2, [r3, #0]
 8006e0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e10:	069b      	lsls	r3, r3, #26
 8006e12:	431a      	orrs	r2, r3
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	781b      	ldrb	r3, [r3, #0]
 8006e18:	00db      	lsls	r3, r3, #3
 8006e1a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006e1e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006e22:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006e26:	601a      	str	r2, [r3, #0]
 8006e28:	e027      	b.n	8006e7a <USB_EPStartXfer+0x4e6>
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	785b      	ldrb	r3, [r3, #1]
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d123      	bne.n	8006e7a <USB_EPStartXfer+0x4e6>
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	00db      	lsls	r3, r3, #3
 8006e38:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006e3c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	781b      	ldrb	r3, [r3, #0]
 8006e46:	00db      	lsls	r3, r3, #3
 8006e48:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006e4c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006e50:	b292      	uxth	r2, r2
 8006e52:	601a      	str	r2, [r3, #0]
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	00db      	lsls	r3, r3, #3
 8006e5a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006e5e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006e62:	6819      	ldr	r1, [r3, #0]
 8006e64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e66:	041a      	lsls	r2, r3, #16
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	00db      	lsls	r3, r3, #3
 8006e6e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006e72:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006e76:	430a      	orrs	r2, r1
 8006e78:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	891b      	ldrh	r3, [r3, #8]
 8006e7e:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	6959      	ldr	r1, [r3, #20]
 8006e84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	8b7a      	ldrh	r2, [r7, #26]
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 fef8 	bl	8007c80 <USB_WritePMA>
            ep->xfer_buff += len;
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	695a      	ldr	r2, [r3, #20]
 8006e94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e96:	441a      	add	r2, r3
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	6a1a      	ldr	r2, [r3, #32]
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	691b      	ldr	r3, [r3, #16]
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d906      	bls.n	8006eb6 <USB_EPStartXfer+0x522>
            {
              ep->xfer_len_db -= len;
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	6a1a      	ldr	r2, [r3, #32]
 8006eac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006eae:	1ad2      	subs	r2, r2, r3
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	621a      	str	r2, [r3, #32]
 8006eb4:	e005      	b.n	8006ec2 <USB_EPStartXfer+0x52e>
            }
            else
            {
              len = ep->xfer_len_db;
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	6a1b      	ldr	r3, [r3, #32]
 8006eba:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	785b      	ldrb	r3, [r3, #1]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d16a      	bne.n	8006fa0 <USB_EPStartXfer+0x60c>
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	00db      	lsls	r3, r3, #3
 8006ed0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006ed4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006ed8:	685a      	ldr	r2, [r3, #4]
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	781b      	ldrb	r3, [r3, #0]
 8006ede:	00db      	lsls	r3, r3, #3
 8006ee0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006ee4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006ee8:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8006eec:	605a      	str	r2, [r3, #4]
 8006eee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d112      	bne.n	8006f1a <USB_EPStartXfer+0x586>
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	781b      	ldrb	r3, [r3, #0]
 8006ef8:	00db      	lsls	r3, r3, #3
 8006efa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006efe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006f02:	685a      	ldr	r2, [r3, #4]
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	00db      	lsls	r3, r3, #3
 8006f0a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006f0e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006f12:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006f16:	605a      	str	r2, [r3, #4]
 8006f18:	e06a      	b.n	8006ff0 <USB_EPStartXfer+0x65c>
 8006f1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f1c:	2b3e      	cmp	r3, #62	@ 0x3e
 8006f1e:	d81e      	bhi.n	8006f5e <USB_EPStartXfer+0x5ca>
 8006f20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f22:	085b      	lsrs	r3, r3, #1
 8006f24:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f28:	f003 0301 	and.w	r3, r3, #1
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d002      	beq.n	8006f36 <USB_EPStartXfer+0x5a2>
 8006f30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f32:	3301      	adds	r3, #1
 8006f34:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	00db      	lsls	r3, r3, #3
 8006f3c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006f40:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006f44:	6859      	ldr	r1, [r3, #4]
 8006f46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f48:	069a      	lsls	r2, r3, #26
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	781b      	ldrb	r3, [r3, #0]
 8006f4e:	00db      	lsls	r3, r3, #3
 8006f50:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006f54:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006f58:	430a      	orrs	r2, r1
 8006f5a:	605a      	str	r2, [r3, #4]
 8006f5c:	e048      	b.n	8006ff0 <USB_EPStartXfer+0x65c>
 8006f5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f60:	095b      	lsrs	r3, r3, #5
 8006f62:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f66:	f003 031f 	and.w	r3, r3, #31
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d102      	bne.n	8006f74 <USB_EPStartXfer+0x5e0>
 8006f6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f70:	3b01      	subs	r3, #1
 8006f72:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	00db      	lsls	r3, r3, #3
 8006f7a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006f7e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006f82:	685a      	ldr	r2, [r3, #4]
 8006f84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f86:	069b      	lsls	r3, r3, #26
 8006f88:	431a      	orrs	r2, r3
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	00db      	lsls	r3, r3, #3
 8006f90:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006f94:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006f98:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006f9c:	605a      	str	r2, [r3, #4]
 8006f9e:	e027      	b.n	8006ff0 <USB_EPStartXfer+0x65c>
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	785b      	ldrb	r3, [r3, #1]
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d123      	bne.n	8006ff0 <USB_EPStartXfer+0x65c>
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	00db      	lsls	r3, r3, #3
 8006fae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006fb2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006fb6:	685a      	ldr	r2, [r3, #4]
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	781b      	ldrb	r3, [r3, #0]
 8006fbc:	00db      	lsls	r3, r3, #3
 8006fbe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006fc2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006fc6:	b292      	uxth	r2, r2
 8006fc8:	605a      	str	r2, [r3, #4]
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	781b      	ldrb	r3, [r3, #0]
 8006fce:	00db      	lsls	r3, r3, #3
 8006fd0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006fd4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006fd8:	6859      	ldr	r1, [r3, #4]
 8006fda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006fdc:	041a      	lsls	r2, r3, #16
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	781b      	ldrb	r3, [r3, #0]
 8006fe2:	00db      	lsls	r3, r3, #3
 8006fe4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006fe8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006fec:	430a      	orrs	r2, r1
 8006fee:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	895b      	ldrh	r3, [r3, #10]
 8006ff4:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	6959      	ldr	r1, [r3, #20]
 8006ffa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	8b7a      	ldrh	r2, [r7, #26]
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f000 fe3d 	bl	8007c80 <USB_WritePMA>
 8007006:	e19f      	b.n	8007348 <USB_EPStartXfer+0x9b4>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	6a1b      	ldr	r3, [r3, #32]
 800700c:	657b      	str	r3, [r7, #84]	@ 0x54

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800700e:	687a      	ldr	r2, [r7, #4]
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	4413      	add	r3, r2
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	4ba0      	ldr	r3, [pc, #640]	@ (800729c <USB_EPStartXfer+0x908>)
 800701c:	4013      	ands	r3, r2
 800701e:	617b      	str	r3, [r7, #20]
 8007020:	687a      	ldr	r2, [r7, #4]
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	781b      	ldrb	r3, [r3, #0]
 8007026:	009b      	lsls	r3, r3, #2
 8007028:	441a      	add	r2, r3
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007030:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007034:	6013      	str	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	781b      	ldrb	r3, [r3, #0]
 800703a:	00db      	lsls	r3, r3, #3
 800703c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007040:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007044:	681a      	ldr	r2, [r3, #0]
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	781b      	ldrb	r3, [r3, #0]
 800704a:	00db      	lsls	r3, r3, #3
 800704c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007050:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007054:	b292      	uxth	r2, r2
 8007056:	601a      	str	r2, [r3, #0]
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	00db      	lsls	r3, r3, #3
 800705e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007062:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007066:	6819      	ldr	r1, [r3, #0]
 8007068:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800706a:	041a      	lsls	r2, r3, #16
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	781b      	ldrb	r3, [r3, #0]
 8007070:	00db      	lsls	r3, r3, #3
 8007072:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007076:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800707a:	430a      	orrs	r2, r1
 800707c:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	891b      	ldrh	r3, [r3, #8]
 8007082:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	6959      	ldr	r1, [r3, #20]
 8007088:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800708a:	b29b      	uxth	r3, r3
 800708c:	8b7a      	ldrh	r2, [r7, #26]
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f000 fdf6 	bl	8007c80 <USB_WritePMA>
 8007094:	e158      	b.n	8007348 <USB_EPStartXfer+0x9b4>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	6a1a      	ldr	r2, [r3, #32]
 800709a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800709c:	1ad2      	subs	r2, r2, r3
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80070a2:	687a      	ldr	r2, [r7, #4]
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	781b      	ldrb	r3, [r3, #0]
 80070a8:	009b      	lsls	r3, r3, #2
 80070aa:	4413      	add	r3, r2
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	f000 80a3 	beq.w	80071fe <USB_EPStartXfer+0x86a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	785b      	ldrb	r3, [r3, #1]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d16a      	bne.n	8007196 <USB_EPStartXfer+0x802>
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	781b      	ldrb	r3, [r3, #0]
 80070c4:	00db      	lsls	r3, r3, #3
 80070c6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80070ca:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80070ce:	685a      	ldr	r2, [r3, #4]
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	781b      	ldrb	r3, [r3, #0]
 80070d4:	00db      	lsls	r3, r3, #3
 80070d6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80070da:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80070de:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80070e2:	605a      	str	r2, [r3, #4]
 80070e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d112      	bne.n	8007110 <USB_EPStartXfer+0x77c>
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	00db      	lsls	r3, r3, #3
 80070f0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80070f4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80070f8:	685a      	ldr	r2, [r3, #4]
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	781b      	ldrb	r3, [r3, #0]
 80070fe:	00db      	lsls	r3, r3, #3
 8007100:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007104:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007108:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800710c:	605a      	str	r2, [r3, #4]
 800710e:	e06a      	b.n	80071e6 <USB_EPStartXfer+0x852>
 8007110:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007112:	2b3e      	cmp	r3, #62	@ 0x3e
 8007114:	d81e      	bhi.n	8007154 <USB_EPStartXfer+0x7c0>
 8007116:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007118:	085b      	lsrs	r3, r3, #1
 800711a:	643b      	str	r3, [r7, #64]	@ 0x40
 800711c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800711e:	f003 0301 	and.w	r3, r3, #1
 8007122:	2b00      	cmp	r3, #0
 8007124:	d002      	beq.n	800712c <USB_EPStartXfer+0x798>
 8007126:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007128:	3301      	adds	r3, #1
 800712a:	643b      	str	r3, [r7, #64]	@ 0x40
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	00db      	lsls	r3, r3, #3
 8007132:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007136:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800713a:	6859      	ldr	r1, [r3, #4]
 800713c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800713e:	069a      	lsls	r2, r3, #26
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	781b      	ldrb	r3, [r3, #0]
 8007144:	00db      	lsls	r3, r3, #3
 8007146:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800714a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800714e:	430a      	orrs	r2, r1
 8007150:	605a      	str	r2, [r3, #4]
 8007152:	e048      	b.n	80071e6 <USB_EPStartXfer+0x852>
 8007154:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007156:	095b      	lsrs	r3, r3, #5
 8007158:	643b      	str	r3, [r7, #64]	@ 0x40
 800715a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800715c:	f003 031f 	and.w	r3, r3, #31
 8007160:	2b00      	cmp	r3, #0
 8007162:	d102      	bne.n	800716a <USB_EPStartXfer+0x7d6>
 8007164:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007166:	3b01      	subs	r3, #1
 8007168:	643b      	str	r3, [r7, #64]	@ 0x40
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	781b      	ldrb	r3, [r3, #0]
 800716e:	00db      	lsls	r3, r3, #3
 8007170:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007174:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007178:	685a      	ldr	r2, [r3, #4]
 800717a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800717c:	069b      	lsls	r3, r3, #26
 800717e:	431a      	orrs	r2, r3
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	00db      	lsls	r3, r3, #3
 8007186:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800718a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800718e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8007192:	605a      	str	r2, [r3, #4]
 8007194:	e027      	b.n	80071e6 <USB_EPStartXfer+0x852>
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	785b      	ldrb	r3, [r3, #1]
 800719a:	2b01      	cmp	r3, #1
 800719c:	d123      	bne.n	80071e6 <USB_EPStartXfer+0x852>
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	781b      	ldrb	r3, [r3, #0]
 80071a2:	00db      	lsls	r3, r3, #3
 80071a4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80071a8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80071ac:	685a      	ldr	r2, [r3, #4]
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	781b      	ldrb	r3, [r3, #0]
 80071b2:	00db      	lsls	r3, r3, #3
 80071b4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80071b8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80071bc:	b292      	uxth	r2, r2
 80071be:	605a      	str	r2, [r3, #4]
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	781b      	ldrb	r3, [r3, #0]
 80071c4:	00db      	lsls	r3, r3, #3
 80071c6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80071ca:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80071ce:	6859      	ldr	r1, [r3, #4]
 80071d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80071d2:	041a      	lsls	r2, r3, #16
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	781b      	ldrb	r3, [r3, #0]
 80071d8:	00db      	lsls	r3, r3, #3
 80071da:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80071de:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80071e2:	430a      	orrs	r2, r1
 80071e4:	605a      	str	r2, [r3, #4]
          pmabuffer = ep->pmaaddr1;
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	895b      	ldrh	r3, [r3, #10]
 80071ea:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	6959      	ldr	r1, [r3, #20]
 80071f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	8b7a      	ldrh	r2, [r7, #26]
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 fd42 	bl	8007c80 <USB_WritePMA>
 80071fc:	e0a4      	b.n	8007348 <USB_EPStartXfer+0x9b4>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	785b      	ldrb	r3, [r3, #1]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d16d      	bne.n	80072e2 <USB_EPStartXfer+0x94e>
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	781b      	ldrb	r3, [r3, #0]
 800720a:	00db      	lsls	r3, r3, #3
 800720c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007210:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	781b      	ldrb	r3, [r3, #0]
 800721a:	00db      	lsls	r3, r3, #3
 800721c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007220:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007224:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8007228:	601a      	str	r2, [r3, #0]
 800722a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800722c:	2b00      	cmp	r3, #0
 800722e:	d112      	bne.n	8007256 <USB_EPStartXfer+0x8c2>
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	781b      	ldrb	r3, [r3, #0]
 8007234:	00db      	lsls	r3, r3, #3
 8007236:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800723a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800723e:	681a      	ldr	r2, [r3, #0]
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	781b      	ldrb	r3, [r3, #0]
 8007244:	00db      	lsls	r3, r3, #3
 8007246:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800724a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800724e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8007252:	601a      	str	r2, [r3, #0]
 8007254:	e06d      	b.n	8007332 <USB_EPStartXfer+0x99e>
 8007256:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007258:	2b3e      	cmp	r3, #62	@ 0x3e
 800725a:	d821      	bhi.n	80072a0 <USB_EPStartXfer+0x90c>
 800725c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800725e:	085b      	lsrs	r3, r3, #1
 8007260:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007262:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007264:	f003 0301 	and.w	r3, r3, #1
 8007268:	2b00      	cmp	r3, #0
 800726a:	d002      	beq.n	8007272 <USB_EPStartXfer+0x8de>
 800726c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800726e:	3301      	adds	r3, #1
 8007270:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	781b      	ldrb	r3, [r3, #0]
 8007276:	00db      	lsls	r3, r3, #3
 8007278:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800727c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007280:	6819      	ldr	r1, [r3, #0]
 8007282:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007284:	069a      	lsls	r2, r3, #26
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	00db      	lsls	r3, r3, #3
 800728c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007290:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007294:	430a      	orrs	r2, r1
 8007296:	601a      	str	r2, [r3, #0]
 8007298:	e04b      	b.n	8007332 <USB_EPStartXfer+0x99e>
 800729a:	bf00      	nop
 800729c:	07ff8e8f 	.word	0x07ff8e8f
 80072a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072a2:	095b      	lsrs	r3, r3, #5
 80072a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80072a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072a8:	f003 031f 	and.w	r3, r3, #31
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d102      	bne.n	80072b6 <USB_EPStartXfer+0x922>
 80072b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072b2:	3b01      	subs	r3, #1
 80072b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	781b      	ldrb	r3, [r3, #0]
 80072ba:	00db      	lsls	r3, r3, #3
 80072bc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80072c0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80072c4:	681a      	ldr	r2, [r3, #0]
 80072c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072c8:	069b      	lsls	r3, r3, #26
 80072ca:	431a      	orrs	r2, r3
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	00db      	lsls	r3, r3, #3
 80072d2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80072d6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80072da:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80072de:	601a      	str	r2, [r3, #0]
 80072e0:	e027      	b.n	8007332 <USB_EPStartXfer+0x99e>
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	785b      	ldrb	r3, [r3, #1]
 80072e6:	2b01      	cmp	r3, #1
 80072e8:	d123      	bne.n	8007332 <USB_EPStartXfer+0x99e>
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	00db      	lsls	r3, r3, #3
 80072f0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80072f4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	781b      	ldrb	r3, [r3, #0]
 80072fe:	00db      	lsls	r3, r3, #3
 8007300:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007304:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007308:	b292      	uxth	r2, r2
 800730a:	601a      	str	r2, [r3, #0]
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	781b      	ldrb	r3, [r3, #0]
 8007310:	00db      	lsls	r3, r3, #3
 8007312:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007316:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800731a:	6819      	ldr	r1, [r3, #0]
 800731c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800731e:	041a      	lsls	r2, r3, #16
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	781b      	ldrb	r3, [r3, #0]
 8007324:	00db      	lsls	r3, r3, #3
 8007326:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800732a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800732e:	430a      	orrs	r2, r1
 8007330:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	891b      	ldrh	r3, [r3, #8]
 8007336:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	6959      	ldr	r1, [r3, #20]
 800733c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800733e:	b29b      	uxth	r3, r3
 8007340:	8b7a      	ldrh	r2, [r7, #26]
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f000 fc9c 	bl	8007c80 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007348:	687a      	ldr	r2, [r7, #4]
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	781b      	ldrb	r3, [r3, #0]
 800734e:	009b      	lsls	r3, r3, #2
 8007350:	4413      	add	r3, r2
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	4b8b      	ldr	r3, [pc, #556]	@ (8007584 <USB_EPStartXfer+0xbf0>)
 8007356:	4013      	ands	r3, r2
 8007358:	60fb      	str	r3, [r7, #12]
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	f083 0310 	eor.w	r3, r3, #16
 8007360:	60fb      	str	r3, [r7, #12]
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	f083 0320 	eor.w	r3, r3, #32
 8007368:	60fb      	str	r3, [r7, #12]
 800736a:	687a      	ldr	r2, [r7, #4]
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	781b      	ldrb	r3, [r3, #0]
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	441a      	add	r2, r3
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800737a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800737e:	6013      	str	r3, [r2, #0]
 8007380:	e36b      	b.n	8007a5a <USB_EPStartXfer+0x10c6>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	7b1b      	ldrb	r3, [r3, #12]
 8007386:	2b00      	cmp	r3, #0
 8007388:	f040 8081 	bne.w	800748e <USB_EPStartXfer+0xafa>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	699a      	ldr	r2, [r3, #24]
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	691b      	ldr	r3, [r3, #16]
 8007394:	429a      	cmp	r2, r3
 8007396:	d909      	bls.n	80073ac <USB_EPStartXfer+0xa18>
      {
        len = ep->maxpacket;
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	691b      	ldr	r3, [r3, #16]
 800739c:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len -= len;
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	699a      	ldr	r2, [r3, #24]
 80073a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80073a4:	1ad2      	subs	r2, r2, r3
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	619a      	str	r2, [r3, #24]
 80073aa:	e005      	b.n	80073b8 <USB_EPStartXfer+0xa24>
      }
      else
      {
        len = ep->xfer_len;
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	699b      	ldr	r3, [r3, #24]
 80073b0:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len = 0U;
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	2200      	movs	r2, #0
 80073b6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	00db      	lsls	r3, r3, #3
 80073be:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80073c2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80073c6:	685a      	ldr	r2, [r3, #4]
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	781b      	ldrb	r3, [r3, #0]
 80073cc:	00db      	lsls	r3, r3, #3
 80073ce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80073d2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80073d6:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80073da:	605a      	str	r2, [r3, #4]
 80073dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d112      	bne.n	8007408 <USB_EPStartXfer+0xa74>
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	00db      	lsls	r3, r3, #3
 80073e8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80073ec:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80073f0:	685a      	ldr	r2, [r3, #4]
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	781b      	ldrb	r3, [r3, #0]
 80073f6:	00db      	lsls	r3, r3, #3
 80073f8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80073fc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007400:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8007404:	605a      	str	r2, [r3, #4]
 8007406:	e30c      	b.n	8007a22 <USB_EPStartXfer+0x108e>
 8007408:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800740a:	2b3e      	cmp	r3, #62	@ 0x3e
 800740c:	d81e      	bhi.n	800744c <USB_EPStartXfer+0xab8>
 800740e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007410:	085b      	lsrs	r3, r3, #1
 8007412:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007414:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007416:	f003 0301 	and.w	r3, r3, #1
 800741a:	2b00      	cmp	r3, #0
 800741c:	d002      	beq.n	8007424 <USB_EPStartXfer+0xa90>
 800741e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007420:	3301      	adds	r3, #1
 8007422:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	00db      	lsls	r3, r3, #3
 800742a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800742e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007432:	6859      	ldr	r1, [r3, #4]
 8007434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007436:	069a      	lsls	r2, r3, #26
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	781b      	ldrb	r3, [r3, #0]
 800743c:	00db      	lsls	r3, r3, #3
 800743e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007442:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007446:	430a      	orrs	r2, r1
 8007448:	605a      	str	r2, [r3, #4]
 800744a:	e2ea      	b.n	8007a22 <USB_EPStartXfer+0x108e>
 800744c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800744e:	095b      	lsrs	r3, r3, #5
 8007450:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007452:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007454:	f003 031f 	and.w	r3, r3, #31
 8007458:	2b00      	cmp	r3, #0
 800745a:	d102      	bne.n	8007462 <USB_EPStartXfer+0xace>
 800745c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800745e:	3b01      	subs	r3, #1
 8007460:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	00db      	lsls	r3, r3, #3
 8007468:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800746c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007470:	685a      	ldr	r2, [r3, #4]
 8007472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007474:	069b      	lsls	r3, r3, #26
 8007476:	431a      	orrs	r2, r3
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	781b      	ldrb	r3, [r3, #0]
 800747c:	00db      	lsls	r3, r3, #3
 800747e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007482:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007486:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800748a:	605a      	str	r2, [r3, #4]
 800748c:	e2c9      	b.n	8007a22 <USB_EPStartXfer+0x108e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	78db      	ldrb	r3, [r3, #3]
 8007492:	2b02      	cmp	r3, #2
 8007494:	f040 8176 	bne.w	8007784 <USB_EPStartXfer+0xdf0>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	785b      	ldrb	r3, [r3, #1]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d173      	bne.n	8007588 <USB_EPStartXfer+0xbf4>
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	781b      	ldrb	r3, [r3, #0]
 80074a4:	00db      	lsls	r3, r3, #3
 80074a6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80074aa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80074ae:	681a      	ldr	r2, [r3, #0]
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	781b      	ldrb	r3, [r3, #0]
 80074b4:	00db      	lsls	r3, r3, #3
 80074b6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80074ba:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80074be:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80074c2:	601a      	str	r2, [r3, #0]
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	691b      	ldr	r3, [r3, #16]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d112      	bne.n	80074f2 <USB_EPStartXfer+0xb5e>
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	781b      	ldrb	r3, [r3, #0]
 80074d0:	00db      	lsls	r3, r3, #3
 80074d2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80074d6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	781b      	ldrb	r3, [r3, #0]
 80074e0:	00db      	lsls	r3, r3, #3
 80074e2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80074e6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80074ea:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80074ee:	601a      	str	r2, [r3, #0]
 80074f0:	e073      	b.n	80075da <USB_EPStartXfer+0xc46>
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	691b      	ldr	r3, [r3, #16]
 80074f6:	2b3e      	cmp	r3, #62	@ 0x3e
 80074f8:	d820      	bhi.n	800753c <USB_EPStartXfer+0xba8>
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	691b      	ldr	r3, [r3, #16]
 80074fe:	085b      	lsrs	r3, r3, #1
 8007500:	637b      	str	r3, [r7, #52]	@ 0x34
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	691b      	ldr	r3, [r3, #16]
 8007506:	f003 0301 	and.w	r3, r3, #1
 800750a:	2b00      	cmp	r3, #0
 800750c:	d002      	beq.n	8007514 <USB_EPStartXfer+0xb80>
 800750e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007510:	3301      	adds	r3, #1
 8007512:	637b      	str	r3, [r7, #52]	@ 0x34
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	00db      	lsls	r3, r3, #3
 800751a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800751e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007522:	6819      	ldr	r1, [r3, #0]
 8007524:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007526:	069a      	lsls	r2, r3, #26
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	00db      	lsls	r3, r3, #3
 800752e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007532:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007536:	430a      	orrs	r2, r1
 8007538:	601a      	str	r2, [r3, #0]
 800753a:	e04e      	b.n	80075da <USB_EPStartXfer+0xc46>
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	691b      	ldr	r3, [r3, #16]
 8007540:	095b      	lsrs	r3, r3, #5
 8007542:	637b      	str	r3, [r7, #52]	@ 0x34
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	691b      	ldr	r3, [r3, #16]
 8007548:	f003 031f 	and.w	r3, r3, #31
 800754c:	2b00      	cmp	r3, #0
 800754e:	d102      	bne.n	8007556 <USB_EPStartXfer+0xbc2>
 8007550:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007552:	3b01      	subs	r3, #1
 8007554:	637b      	str	r3, [r7, #52]	@ 0x34
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	00db      	lsls	r3, r3, #3
 800755c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007560:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007564:	681a      	ldr	r2, [r3, #0]
 8007566:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007568:	069b      	lsls	r3, r3, #26
 800756a:	431a      	orrs	r2, r3
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	00db      	lsls	r3, r3, #3
 8007572:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007576:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800757a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800757e:	601a      	str	r2, [r3, #0]
 8007580:	e02b      	b.n	80075da <USB_EPStartXfer+0xc46>
 8007582:	bf00      	nop
 8007584:	07ff8fbf 	.word	0x07ff8fbf
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	785b      	ldrb	r3, [r3, #1]
 800758c:	2b01      	cmp	r3, #1
 800758e:	d124      	bne.n	80075da <USB_EPStartXfer+0xc46>
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	00db      	lsls	r3, r3, #3
 8007596:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800759a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800759e:	681a      	ldr	r2, [r3, #0]
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	00db      	lsls	r3, r3, #3
 80075a6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80075aa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80075ae:	b292      	uxth	r2, r2
 80075b0:	601a      	str	r2, [r3, #0]
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	781b      	ldrb	r3, [r3, #0]
 80075b6:	00db      	lsls	r3, r3, #3
 80075b8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80075bc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80075c0:	6819      	ldr	r1, [r3, #0]
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	691b      	ldr	r3, [r3, #16]
 80075c6:	041a      	lsls	r2, r3, #16
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	00db      	lsls	r3, r3, #3
 80075ce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80075d2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80075d6:	430a      	orrs	r2, r1
 80075d8:	601a      	str	r2, [r3, #0]
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	785b      	ldrb	r3, [r3, #1]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d170      	bne.n	80076c4 <USB_EPStartXfer+0xd30>
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	781b      	ldrb	r3, [r3, #0]
 80075e6:	00db      	lsls	r3, r3, #3
 80075e8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80075ec:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80075f0:	685a      	ldr	r2, [r3, #4]
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	00db      	lsls	r3, r3, #3
 80075f8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80075fc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007600:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8007604:	605a      	str	r2, [r3, #4]
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	691b      	ldr	r3, [r3, #16]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d112      	bne.n	8007634 <USB_EPStartXfer+0xca0>
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	781b      	ldrb	r3, [r3, #0]
 8007612:	00db      	lsls	r3, r3, #3
 8007614:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007618:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800761c:	685a      	ldr	r2, [r3, #4]
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	781b      	ldrb	r3, [r3, #0]
 8007622:	00db      	lsls	r3, r3, #3
 8007624:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007628:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800762c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8007630:	605a      	str	r2, [r3, #4]
 8007632:	e070      	b.n	8007716 <USB_EPStartXfer+0xd82>
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	691b      	ldr	r3, [r3, #16]
 8007638:	2b3e      	cmp	r3, #62	@ 0x3e
 800763a:	d820      	bhi.n	800767e <USB_EPStartXfer+0xcea>
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	691b      	ldr	r3, [r3, #16]
 8007640:	085b      	lsrs	r3, r3, #1
 8007642:	633b      	str	r3, [r7, #48]	@ 0x30
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	691b      	ldr	r3, [r3, #16]
 8007648:	f003 0301 	and.w	r3, r3, #1
 800764c:	2b00      	cmp	r3, #0
 800764e:	d002      	beq.n	8007656 <USB_EPStartXfer+0xcc2>
 8007650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007652:	3301      	adds	r3, #1
 8007654:	633b      	str	r3, [r7, #48]	@ 0x30
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	00db      	lsls	r3, r3, #3
 800765c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007660:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007664:	6859      	ldr	r1, [r3, #4]
 8007666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007668:	069a      	lsls	r2, r3, #26
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	781b      	ldrb	r3, [r3, #0]
 800766e:	00db      	lsls	r3, r3, #3
 8007670:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007674:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007678:	430a      	orrs	r2, r1
 800767a:	605a      	str	r2, [r3, #4]
 800767c:	e04b      	b.n	8007716 <USB_EPStartXfer+0xd82>
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	691b      	ldr	r3, [r3, #16]
 8007682:	095b      	lsrs	r3, r3, #5
 8007684:	633b      	str	r3, [r7, #48]	@ 0x30
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	691b      	ldr	r3, [r3, #16]
 800768a:	f003 031f 	and.w	r3, r3, #31
 800768e:	2b00      	cmp	r3, #0
 8007690:	d102      	bne.n	8007698 <USB_EPStartXfer+0xd04>
 8007692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007694:	3b01      	subs	r3, #1
 8007696:	633b      	str	r3, [r7, #48]	@ 0x30
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	00db      	lsls	r3, r3, #3
 800769e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80076a2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80076a6:	685a      	ldr	r2, [r3, #4]
 80076a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076aa:	069b      	lsls	r3, r3, #26
 80076ac:	431a      	orrs	r2, r3
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	00db      	lsls	r3, r3, #3
 80076b4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80076b8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80076bc:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80076c0:	605a      	str	r2, [r3, #4]
 80076c2:	e028      	b.n	8007716 <USB_EPStartXfer+0xd82>
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	785b      	ldrb	r3, [r3, #1]
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d124      	bne.n	8007716 <USB_EPStartXfer+0xd82>
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	781b      	ldrb	r3, [r3, #0]
 80076d0:	00db      	lsls	r3, r3, #3
 80076d2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80076d6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80076da:	685a      	ldr	r2, [r3, #4]
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	00db      	lsls	r3, r3, #3
 80076e2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80076e6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80076ea:	b292      	uxth	r2, r2
 80076ec:	605a      	str	r2, [r3, #4]
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	00db      	lsls	r3, r3, #3
 80076f4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80076f8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80076fc:	6859      	ldr	r1, [r3, #4]
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	691b      	ldr	r3, [r3, #16]
 8007702:	041a      	lsls	r2, r3, #16
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	781b      	ldrb	r3, [r3, #0]
 8007708:	00db      	lsls	r3, r3, #3
 800770a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800770e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007712:	430a      	orrs	r2, r1
 8007714:	605a      	str	r2, [r3, #4]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	69db      	ldr	r3, [r3, #28]
 800771a:	2b00      	cmp	r3, #0
 800771c:	f000 8181 	beq.w	8007a22 <USB_EPStartXfer+0x108e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(USBx, ep->num);
 8007720:	687a      	ldr	r2, [r7, #4]
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	781b      	ldrb	r3, [r3, #0]
 8007726:	009b      	lsls	r3, r3, #2
 8007728:	4413      	add	r3, r2
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	84fb      	strh	r3, [r7, #38]	@ 0x26

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800772e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007730:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007734:	2b00      	cmp	r3, #0
 8007736:	d004      	beq.n	8007742 <USB_EPStartXfer+0xdae>
 8007738:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800773a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800773e:	2b00      	cmp	r3, #0
 8007740:	d10b      	bne.n	800775a <USB_EPStartXfer+0xdc6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007742:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007744:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007748:	2b00      	cmp	r3, #0
 800774a:	f040 816a 	bne.w	8007a22 <USB_EPStartXfer+0x108e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800774e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007750:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007754:	2b00      	cmp	r3, #0
 8007756:	f040 8164 	bne.w	8007a22 <USB_EPStartXfer+0x108e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800775a:	687a      	ldr	r2, [r7, #4]
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	009b      	lsls	r3, r3, #2
 8007762:	4413      	add	r3, r2
 8007764:	681a      	ldr	r2, [r3, #0]
 8007766:	4b98      	ldr	r3, [pc, #608]	@ (80079c8 <USB_EPStartXfer+0x1034>)
 8007768:	4013      	ands	r3, r2
 800776a:	623b      	str	r3, [r7, #32]
 800776c:	687a      	ldr	r2, [r7, #4]
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	009b      	lsls	r3, r3, #2
 8007774:	441a      	add	r2, r3
 8007776:	6a3b      	ldr	r3, [r7, #32]
 8007778:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800777c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007780:	6013      	str	r3, [r2, #0]
 8007782:	e14e      	b.n	8007a22 <USB_EPStartXfer+0x108e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	78db      	ldrb	r3, [r3, #3]
 8007788:	2b01      	cmp	r3, #1
 800778a:	f040 8148 	bne.w	8007a1e <USB_EPStartXfer+0x108a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	699a      	ldr	r2, [r3, #24]
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	691b      	ldr	r3, [r3, #16]
 8007796:	429a      	cmp	r2, r3
 8007798:	d909      	bls.n	80077ae <USB_EPStartXfer+0xe1a>
        {
          len = ep->maxpacket;
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	691b      	ldr	r3, [r3, #16]
 800779e:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len -= len;
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	699a      	ldr	r2, [r3, #24]
 80077a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077a6:	1ad2      	subs	r2, r2, r3
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	619a      	str	r2, [r3, #24]
 80077ac:	e005      	b.n	80077ba <USB_EPStartXfer+0xe26>
        }
        else
        {
          len = ep->xfer_len;
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	699b      	ldr	r3, [r3, #24]
 80077b2:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len = 0U;
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	2200      	movs	r2, #0
 80077b8:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	785b      	ldrb	r3, [r3, #1]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d16a      	bne.n	8007898 <USB_EPStartXfer+0xf04>
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	00db      	lsls	r3, r3, #3
 80077c8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80077cc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80077d0:	681a      	ldr	r2, [r3, #0]
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	00db      	lsls	r3, r3, #3
 80077d8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80077dc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80077e0:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80077e4:	601a      	str	r2, [r3, #0]
 80077e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d112      	bne.n	8007812 <USB_EPStartXfer+0xe7e>
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	781b      	ldrb	r3, [r3, #0]
 80077f0:	00db      	lsls	r3, r3, #3
 80077f2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80077f6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80077fa:	681a      	ldr	r2, [r3, #0]
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	781b      	ldrb	r3, [r3, #0]
 8007800:	00db      	lsls	r3, r3, #3
 8007802:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007806:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800780a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800780e:	601a      	str	r2, [r3, #0]
 8007810:	e06a      	b.n	80078e8 <USB_EPStartXfer+0xf54>
 8007812:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007814:	2b3e      	cmp	r3, #62	@ 0x3e
 8007816:	d81e      	bhi.n	8007856 <USB_EPStartXfer+0xec2>
 8007818:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800781a:	085b      	lsrs	r3, r3, #1
 800781c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800781e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007820:	f003 0301 	and.w	r3, r3, #1
 8007824:	2b00      	cmp	r3, #0
 8007826:	d002      	beq.n	800782e <USB_EPStartXfer+0xe9a>
 8007828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800782a:	3301      	adds	r3, #1
 800782c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	781b      	ldrb	r3, [r3, #0]
 8007832:	00db      	lsls	r3, r3, #3
 8007834:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007838:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800783c:	6819      	ldr	r1, [r3, #0]
 800783e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007840:	069a      	lsls	r2, r3, #26
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	781b      	ldrb	r3, [r3, #0]
 8007846:	00db      	lsls	r3, r3, #3
 8007848:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800784c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007850:	430a      	orrs	r2, r1
 8007852:	601a      	str	r2, [r3, #0]
 8007854:	e048      	b.n	80078e8 <USB_EPStartXfer+0xf54>
 8007856:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007858:	095b      	lsrs	r3, r3, #5
 800785a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800785c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800785e:	f003 031f 	and.w	r3, r3, #31
 8007862:	2b00      	cmp	r3, #0
 8007864:	d102      	bne.n	800786c <USB_EPStartXfer+0xed8>
 8007866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007868:	3b01      	subs	r3, #1
 800786a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	00db      	lsls	r3, r3, #3
 8007872:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007876:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800787a:	681a      	ldr	r2, [r3, #0]
 800787c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800787e:	069b      	lsls	r3, r3, #26
 8007880:	431a      	orrs	r2, r3
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	781b      	ldrb	r3, [r3, #0]
 8007886:	00db      	lsls	r3, r3, #3
 8007888:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800788c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007890:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8007894:	601a      	str	r2, [r3, #0]
 8007896:	e027      	b.n	80078e8 <USB_EPStartXfer+0xf54>
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	785b      	ldrb	r3, [r3, #1]
 800789c:	2b01      	cmp	r3, #1
 800789e:	d123      	bne.n	80078e8 <USB_EPStartXfer+0xf54>
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	781b      	ldrb	r3, [r3, #0]
 80078a4:	00db      	lsls	r3, r3, #3
 80078a6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80078aa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80078ae:	681a      	ldr	r2, [r3, #0]
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	00db      	lsls	r3, r3, #3
 80078b6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80078ba:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80078be:	b292      	uxth	r2, r2
 80078c0:	601a      	str	r2, [r3, #0]
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	781b      	ldrb	r3, [r3, #0]
 80078c6:	00db      	lsls	r3, r3, #3
 80078c8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80078cc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80078d0:	6819      	ldr	r1, [r3, #0]
 80078d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078d4:	041a      	lsls	r2, r3, #16
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	781b      	ldrb	r3, [r3, #0]
 80078da:	00db      	lsls	r3, r3, #3
 80078dc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80078e0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80078e4:	430a      	orrs	r2, r1
 80078e6:	601a      	str	r2, [r3, #0]
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	785b      	ldrb	r3, [r3, #1]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d16d      	bne.n	80079cc <USB_EPStartXfer+0x1038>
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	781b      	ldrb	r3, [r3, #0]
 80078f4:	00db      	lsls	r3, r3, #3
 80078f6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80078fa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80078fe:	685a      	ldr	r2, [r3, #4]
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	781b      	ldrb	r3, [r3, #0]
 8007904:	00db      	lsls	r3, r3, #3
 8007906:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800790a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800790e:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8007912:	605a      	str	r2, [r3, #4]
 8007914:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007916:	2b00      	cmp	r3, #0
 8007918:	d112      	bne.n	8007940 <USB_EPStartXfer+0xfac>
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	781b      	ldrb	r3, [r3, #0]
 800791e:	00db      	lsls	r3, r3, #3
 8007920:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007924:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007928:	685a      	ldr	r2, [r3, #4]
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	781b      	ldrb	r3, [r3, #0]
 800792e:	00db      	lsls	r3, r3, #3
 8007930:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007934:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007938:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800793c:	605a      	str	r2, [r3, #4]
 800793e:	e070      	b.n	8007a22 <USB_EPStartXfer+0x108e>
 8007940:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007942:	2b3e      	cmp	r3, #62	@ 0x3e
 8007944:	d81e      	bhi.n	8007984 <USB_EPStartXfer+0xff0>
 8007946:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007948:	085b      	lsrs	r3, r3, #1
 800794a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800794c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800794e:	f003 0301 	and.w	r3, r3, #1
 8007952:	2b00      	cmp	r3, #0
 8007954:	d002      	beq.n	800795c <USB_EPStartXfer+0xfc8>
 8007956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007958:	3301      	adds	r3, #1
 800795a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	00db      	lsls	r3, r3, #3
 8007962:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007966:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800796a:	6859      	ldr	r1, [r3, #4]
 800796c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800796e:	069a      	lsls	r2, r3, #26
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	781b      	ldrb	r3, [r3, #0]
 8007974:	00db      	lsls	r3, r3, #3
 8007976:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800797a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800797e:	430a      	orrs	r2, r1
 8007980:	605a      	str	r2, [r3, #4]
 8007982:	e04e      	b.n	8007a22 <USB_EPStartXfer+0x108e>
 8007984:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007986:	095b      	lsrs	r3, r3, #5
 8007988:	62bb      	str	r3, [r7, #40]	@ 0x28
 800798a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800798c:	f003 031f 	and.w	r3, r3, #31
 8007990:	2b00      	cmp	r3, #0
 8007992:	d102      	bne.n	800799a <USB_EPStartXfer+0x1006>
 8007994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007996:	3b01      	subs	r3, #1
 8007998:	62bb      	str	r3, [r7, #40]	@ 0x28
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	781b      	ldrb	r3, [r3, #0]
 800799e:	00db      	lsls	r3, r3, #3
 80079a0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80079a4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80079a8:	685a      	ldr	r2, [r3, #4]
 80079aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079ac:	069b      	lsls	r3, r3, #26
 80079ae:	431a      	orrs	r2, r3
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	781b      	ldrb	r3, [r3, #0]
 80079b4:	00db      	lsls	r3, r3, #3
 80079b6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80079ba:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80079be:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80079c2:	605a      	str	r2, [r3, #4]
 80079c4:	e02d      	b.n	8007a22 <USB_EPStartXfer+0x108e>
 80079c6:	bf00      	nop
 80079c8:	07ff8f8f 	.word	0x07ff8f8f
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	785b      	ldrb	r3, [r3, #1]
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d126      	bne.n	8007a22 <USB_EPStartXfer+0x108e>
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	00db      	lsls	r3, r3, #3
 80079da:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80079de:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80079e2:	685a      	ldr	r2, [r3, #4]
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	00db      	lsls	r3, r3, #3
 80079ea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80079ee:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80079f2:	b292      	uxth	r2, r2
 80079f4:	605a      	str	r2, [r3, #4]
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	781b      	ldrb	r3, [r3, #0]
 80079fa:	00db      	lsls	r3, r3, #3
 80079fc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007a00:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007a04:	6859      	ldr	r1, [r3, #4]
 8007a06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a08:	041a      	lsls	r2, r3, #16
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	781b      	ldrb	r3, [r3, #0]
 8007a0e:	00db      	lsls	r3, r3, #3
 8007a10:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007a14:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007a18:	430a      	orrs	r2, r1
 8007a1a:	605a      	str	r2, [r3, #4]
 8007a1c:	e001      	b.n	8007a22 <USB_EPStartXfer+0x108e>
      }
      else
      {
        return HAL_ERROR;
 8007a1e:	2301      	movs	r3, #1
 8007a20:	e01c      	b.n	8007a5c <USB_EPStartXfer+0x10c8>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	781b      	ldrb	r3, [r3, #0]
 8007a28:	009b      	lsls	r3, r3, #2
 8007a2a:	4413      	add	r3, r2
 8007a2c:	681a      	ldr	r2, [r3, #0]
 8007a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8007a64 <USB_EPStartXfer+0x10d0>)
 8007a30:	4013      	ands	r3, r2
 8007a32:	61fb      	str	r3, [r7, #28]
 8007a34:	69fb      	ldr	r3, [r7, #28]
 8007a36:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007a3a:	61fb      	str	r3, [r7, #28]
 8007a3c:	69fb      	ldr	r3, [r7, #28]
 8007a3e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007a42:	61fb      	str	r3, [r7, #28]
 8007a44:	687a      	ldr	r2, [r7, #4]
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	009b      	lsls	r3, r3, #2
 8007a4c:	441a      	add	r2, r3
 8007a4e:	69fb      	ldr	r3, [r7, #28]
 8007a50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a58:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007a5a:	2300      	movs	r3, #0
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3758      	adds	r7, #88	@ 0x58
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}
 8007a64:	07ffbf8f 	.word	0x07ffbf8f

08007a68 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b085      	sub	sp, #20
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	785b      	ldrb	r3, [r3, #1]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d018      	beq.n	8007aac <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007a7a:	687a      	ldr	r2, [r7, #4]
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	781b      	ldrb	r3, [r3, #0]
 8007a80:	009b      	lsls	r3, r3, #2
 8007a82:	4413      	add	r3, r2
 8007a84:	681a      	ldr	r2, [r3, #0]
 8007a86:	4b19      	ldr	r3, [pc, #100]	@ (8007aec <USB_EPSetStall+0x84>)
 8007a88:	4013      	ands	r3, r2
 8007a8a:	60bb      	str	r3, [r7, #8]
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	f083 0310 	eor.w	r3, r3, #16
 8007a92:	60bb      	str	r3, [r7, #8]
 8007a94:	687a      	ldr	r2, [r7, #4]
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	781b      	ldrb	r3, [r3, #0]
 8007a9a:	009b      	lsls	r3, r3, #2
 8007a9c:	441a      	add	r2, r3
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007aa4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007aa8:	6013      	str	r3, [r2, #0]
 8007aaa:	e017      	b.n	8007adc <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007aac:	687a      	ldr	r2, [r7, #4]
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	781b      	ldrb	r3, [r3, #0]
 8007ab2:	009b      	lsls	r3, r3, #2
 8007ab4:	4413      	add	r3, r2
 8007ab6:	681a      	ldr	r2, [r3, #0]
 8007ab8:	4b0d      	ldr	r3, [pc, #52]	@ (8007af0 <USB_EPSetStall+0x88>)
 8007aba:	4013      	ands	r3, r2
 8007abc:	60fb      	str	r3, [r7, #12]
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007ac4:	60fb      	str	r3, [r7, #12]
 8007ac6:	687a      	ldr	r2, [r7, #4]
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	781b      	ldrb	r3, [r3, #0]
 8007acc:	009b      	lsls	r3, r3, #2
 8007ace:	441a      	add	r2, r3
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ad6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ada:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007adc:	2300      	movs	r3, #0
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3714      	adds	r7, #20
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae8:	4770      	bx	lr
 8007aea:	bf00      	nop
 8007aec:	07ff8fbf 	.word	0x07ff8fbf
 8007af0:	07ffbf8f 	.word	0x07ffbf8f

08007af4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b089      	sub	sp, #36	@ 0x24
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
 8007afc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	7b1b      	ldrb	r3, [r3, #12]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d17c      	bne.n	8007c00 <USB_EPClearStall+0x10c>
  {
    if (ep->is_in != 0U)
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	785b      	ldrb	r3, [r3, #1]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d03c      	beq.n	8007b88 <USB_EPClearStall+0x94>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007b0e:	687a      	ldr	r2, [r7, #4]
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	781b      	ldrb	r3, [r3, #0]
 8007b14:	009b      	lsls	r3, r3, #2
 8007b16:	4413      	add	r3, r2
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	613b      	str	r3, [r7, #16]
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d013      	beq.n	8007b4e <USB_EPClearStall+0x5a>
 8007b26:	687a      	ldr	r2, [r7, #4]
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	781b      	ldrb	r3, [r3, #0]
 8007b2c:	009b      	lsls	r3, r3, #2
 8007b2e:	4413      	add	r3, r2
 8007b30:	681a      	ldr	r2, [r3, #0]
 8007b32:	4b37      	ldr	r3, [pc, #220]	@ (8007c10 <USB_EPClearStall+0x11c>)
 8007b34:	4013      	ands	r3, r2
 8007b36:	60fb      	str	r3, [r7, #12]
 8007b38:	687a      	ldr	r2, [r7, #4]
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	009b      	lsls	r3, r3, #2
 8007b40:	441a      	add	r2, r3
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b48:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007b4c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	78db      	ldrb	r3, [r3, #3]
 8007b52:	2b01      	cmp	r3, #1
 8007b54:	d054      	beq.n	8007c00 <USB_EPClearStall+0x10c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007b56:	687a      	ldr	r2, [r7, #4]
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	009b      	lsls	r3, r3, #2
 8007b5e:	4413      	add	r3, r2
 8007b60:	681a      	ldr	r2, [r3, #0]
 8007b62:	4b2c      	ldr	r3, [pc, #176]	@ (8007c14 <USB_EPClearStall+0x120>)
 8007b64:	4013      	ands	r3, r2
 8007b66:	60bb      	str	r3, [r7, #8]
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	f083 0320 	eor.w	r3, r3, #32
 8007b6e:	60bb      	str	r3, [r7, #8]
 8007b70:	687a      	ldr	r2, [r7, #4]
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	781b      	ldrb	r3, [r3, #0]
 8007b76:	009b      	lsls	r3, r3, #2
 8007b78:	441a      	add	r2, r3
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b84:	6013      	str	r3, [r2, #0]
 8007b86:	e03b      	b.n	8007c00 <USB_EPClearStall+0x10c>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007b88:	687a      	ldr	r2, [r7, #4]
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	781b      	ldrb	r3, [r3, #0]
 8007b8e:	009b      	lsls	r3, r3, #2
 8007b90:	4413      	add	r3, r2
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	61fb      	str	r3, [r7, #28]
 8007b96:	69fb      	ldr	r3, [r7, #28]
 8007b98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d013      	beq.n	8007bc8 <USB_EPClearStall+0xd4>
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	781b      	ldrb	r3, [r3, #0]
 8007ba6:	009b      	lsls	r3, r3, #2
 8007ba8:	4413      	add	r3, r2
 8007baa:	681a      	ldr	r2, [r3, #0]
 8007bac:	4b18      	ldr	r3, [pc, #96]	@ (8007c10 <USB_EPClearStall+0x11c>)
 8007bae:	4013      	ands	r3, r2
 8007bb0:	61bb      	str	r3, [r7, #24]
 8007bb2:	687a      	ldr	r2, [r7, #4]
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	781b      	ldrb	r3, [r3, #0]
 8007bb8:	009b      	lsls	r3, r3, #2
 8007bba:	441a      	add	r2, r3
 8007bbc:	69bb      	ldr	r3, [r7, #24]
 8007bbe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007bc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007bc6:	6013      	str	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007bc8:	687a      	ldr	r2, [r7, #4]
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	781b      	ldrb	r3, [r3, #0]
 8007bce:	009b      	lsls	r3, r3, #2
 8007bd0:	4413      	add	r3, r2
 8007bd2:	681a      	ldr	r2, [r3, #0]
 8007bd4:	4b10      	ldr	r3, [pc, #64]	@ (8007c18 <USB_EPClearStall+0x124>)
 8007bd6:	4013      	ands	r3, r2
 8007bd8:	617b      	str	r3, [r7, #20]
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007be0:	617b      	str	r3, [r7, #20]
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007be8:	617b      	str	r3, [r7, #20]
 8007bea:	687a      	ldr	r2, [r7, #4]
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	781b      	ldrb	r3, [r3, #0]
 8007bf0:	009b      	lsls	r3, r3, #2
 8007bf2:	441a      	add	r2, r3
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007bfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007bfe:	6013      	str	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007c00:	2300      	movs	r3, #0
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3724      	adds	r7, #36	@ 0x24
 8007c06:	46bd      	mov	sp, r7
 8007c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0c:	4770      	bx	lr
 8007c0e:	bf00      	nop
 8007c10:	07ff8f8f 	.word	0x07ff8f8f
 8007c14:	07ff8fbf 	.word	0x07ff8fbf
 8007c18:	07ffbf8f 	.word	0x07ffbf8f

08007c1c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_DRD_TypeDef *USBx, uint8_t address)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b083      	sub	sp, #12
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	460b      	mov	r3, r1
 8007c26:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007c28:	78fb      	ldrb	r3, [r7, #3]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d102      	bne.n	8007c34 <USB_SetDevAddress+0x18>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2280      	movs	r2, #128	@ 0x80
 8007c32:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8007c34:	2300      	movs	r3, #0
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	370c      	adds	r7, #12
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c40:	4770      	bx	lr

08007c42 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_DRD_TypeDef *USBx)
{
 8007c42:	b480      	push	{r7}
 8007c44:	b083      	sub	sp, #12
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c4e:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8007c56:	2300      	movs	r3, #0
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	370c      	adds	r7, #12
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c62:	4770      	bx	lr

08007c64 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_DRD_TypeDef const *USBx)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b085      	sub	sp, #20
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c70:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007c72:	68fb      	ldr	r3, [r7, #12]
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3714      	adds	r7, #20
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr

08007c80 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b08b      	sub	sp, #44	@ 0x2c
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	60f8      	str	r0, [r7, #12]
 8007c88:	60b9      	str	r1, [r7, #8]
 8007c8a:	4611      	mov	r1, r2
 8007c8c:	461a      	mov	r2, r3
 8007c8e:	460b      	mov	r3, r1
 8007c90:	80fb      	strh	r3, [r7, #6]
 8007c92:	4613      	mov	r3, r2
 8007c94:	80bb      	strh	r3, [r7, #4]
  UNUSED(USBx);
  uint32_t WrVal;
  uint32_t count;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 8007c96:	88bb      	ldrh	r3, [r7, #4]
 8007c98:	3303      	adds	r3, #3
 8007c9a:	089b      	lsrs	r3, r3, #2
 8007c9c:	61bb      	str	r3, [r7, #24]
  /* Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 8007c9e:	88bb      	ldrh	r3, [r7, #4]
 8007ca0:	f003 0303 	and.w	r3, r3, #3
 8007ca4:	82fb      	strh	r3, [r7, #22]
  uint8_t *pBuf = pbUsrBuf;
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	613b      	str	r3, [r7, #16]

  /* Check if there is a remaining byte */
  if (remaining_bytes != 0U)
 8007caa:	8afb      	ldrh	r3, [r7, #22]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d002      	beq.n	8007cb6 <USB_WritePMA+0x36>
  {
    NbWords--;
 8007cb0:	69bb      	ldr	r3, [r7, #24]
 8007cb2:	3b01      	subs	r3, #1
 8007cb4:	61bb      	str	r3, [r7, #24]
  }

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 8007cb6:	88fb      	ldrh	r3, [r7, #6]
 8007cb8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007cbc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007cc0:	61fb      	str	r3, [r7, #28]

  /* Write the Calculated Word into the PMA related Buffer */
  for (count = NbWords; count != 0U; count--)
 8007cc2:	69bb      	ldr	r3, [r7, #24]
 8007cc4:	623b      	str	r3, [r7, #32]
 8007cc6:	e015      	b.n	8007cf4 <USB_WritePMA+0x74>
  {
    *pdwVal = __UNALIGNED_UINT32_READ(pBuf);
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	681a      	ldr	r2, [r3, #0]
 8007ccc:	69fb      	ldr	r3, [r7, #28]
 8007cce:	601a      	str	r2, [r3, #0]
    pdwVal++;
 8007cd0:	69fb      	ldr	r3, [r7, #28]
 8007cd2:	3304      	adds	r3, #4
 8007cd4:	61fb      	str	r3, [r7, #28]
    /* Increment pBuf 4 Time as Word Increment */
    pBuf++;
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	3301      	adds	r3, #1
 8007cda:	613b      	str	r3, [r7, #16]
    pBuf++;
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	3301      	adds	r3, #1
 8007ce0:	613b      	str	r3, [r7, #16]
    pBuf++;
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	3301      	adds	r3, #1
 8007ce6:	613b      	str	r3, [r7, #16]
    pBuf++;
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	3301      	adds	r3, #1
 8007cec:	613b      	str	r3, [r7, #16]
  for (count = NbWords; count != 0U; count--)
 8007cee:	6a3b      	ldr	r3, [r7, #32]
 8007cf0:	3b01      	subs	r3, #1
 8007cf2:	623b      	str	r3, [r7, #32]
 8007cf4:	6a3b      	ldr	r3, [r7, #32]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d1e6      	bne.n	8007cc8 <USB_WritePMA+0x48>
  }

  /* When Number of data is not word aligned, write the remaining Byte */
  if (remaining_bytes != 0U)
 8007cfa:	8afb      	ldrh	r3, [r7, #22]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d01a      	beq.n	8007d36 <USB_WritePMA+0xb6>
  {
    WrVal = 0U;
 8007d00:	2300      	movs	r3, #0
 8007d02:	627b      	str	r3, [r7, #36]	@ 0x24

    do
    {
      WrVal |= (uint32_t)(*(uint8_t *)pBuf) << (8U * count);
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	781b      	ldrb	r3, [r3, #0]
 8007d08:	461a      	mov	r2, r3
 8007d0a:	6a3b      	ldr	r3, [r7, #32]
 8007d0c:	00db      	lsls	r3, r3, #3
 8007d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d14:	4313      	orrs	r3, r2
 8007d16:	627b      	str	r3, [r7, #36]	@ 0x24
      count++;
 8007d18:	6a3b      	ldr	r3, [r7, #32]
 8007d1a:	3301      	adds	r3, #1
 8007d1c:	623b      	str	r3, [r7, #32]
      pBuf++;
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	3301      	adds	r3, #1
 8007d22:	613b      	str	r3, [r7, #16]
      remaining_bytes--;
 8007d24:	8afb      	ldrh	r3, [r7, #22]
 8007d26:	3b01      	subs	r3, #1
 8007d28:	82fb      	strh	r3, [r7, #22]
    } while (remaining_bytes != 0U);
 8007d2a:	8afb      	ldrh	r3, [r7, #22]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d1e9      	bne.n	8007d04 <USB_WritePMA+0x84>

    *pdwVal = WrVal;
 8007d30:	69fb      	ldr	r3, [r7, #28]
 8007d32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d34:	601a      	str	r2, [r3, #0]
  }
}
 8007d36:	bf00      	nop
 8007d38:	372c      	adds	r7, #44	@ 0x2c
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d40:	4770      	bx	lr

08007d42 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007d42:	b480      	push	{r7}
 8007d44:	b08b      	sub	sp, #44	@ 0x2c
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	60f8      	str	r0, [r7, #12]
 8007d4a:	60b9      	str	r1, [r7, #8]
 8007d4c:	4611      	mov	r1, r2
 8007d4e:	461a      	mov	r2, r3
 8007d50:	460b      	mov	r3, r1
 8007d52:	80fb      	strh	r3, [r7, #6]
 8007d54:	4613      	mov	r3, r2
 8007d56:	80bb      	strh	r3, [r7, #4]
  UNUSED(USBx);
  uint32_t count;
  uint32_t RdVal;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 8007d58:	88bb      	ldrh	r3, [r7, #4]
 8007d5a:	3303      	adds	r3, #3
 8007d5c:	089b      	lsrs	r3, r3, #2
 8007d5e:	61fb      	str	r3, [r7, #28]
  /*Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 8007d60:	88bb      	ldrh	r3, [r7, #4]
 8007d62:	f003 0303 	and.w	r3, r3, #3
 8007d66:	837b      	strh	r3, [r7, #26]
  uint8_t *pBuf = pbUsrBuf;
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	617b      	str	r3, [r7, #20]

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 8007d6c:	88fb      	ldrh	r3, [r7, #6]
 8007d6e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007d72:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007d76:	623b      	str	r3, [r7, #32]

  /* if nbre of byte is not word aligned decrement the nbre of word*/
  if (remaining_bytes != 0U)
 8007d78:	8b7b      	ldrh	r3, [r7, #26]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d002      	beq.n	8007d84 <USB_ReadPMA+0x42>
  {
    NbWords--;
 8007d7e:	69fb      	ldr	r3, [r7, #28]
 8007d80:	3b01      	subs	r3, #1
 8007d82:	61fb      	str	r3, [r7, #28]
  }

  /*Read the Calculated Word From the PMA related Buffer*/
  for (count = NbWords; count != 0U; count--)
 8007d84:	69fb      	ldr	r3, [r7, #28]
 8007d86:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d88:	e015      	b.n	8007db6 <USB_ReadPMA+0x74>
  {
    __UNALIGNED_UINT32_WRITE(pBuf, *pdwVal);
 8007d8a:	6a3b      	ldr	r3, [r7, #32]
 8007d8c:	681a      	ldr	r2, [r3, #0]
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	601a      	str	r2, [r3, #0]

    pdwVal++;
 8007d92:	6a3b      	ldr	r3, [r7, #32]
 8007d94:	3304      	adds	r3, #4
 8007d96:	623b      	str	r3, [r7, #32]
    pBuf++;
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	3301      	adds	r3, #1
 8007d9c:	617b      	str	r3, [r7, #20]
    pBuf++;
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	3301      	adds	r3, #1
 8007da2:	617b      	str	r3, [r7, #20]
    pBuf++;
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	3301      	adds	r3, #1
 8007da8:	617b      	str	r3, [r7, #20]
    pBuf++;
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	3301      	adds	r3, #1
 8007dae:	617b      	str	r3, [r7, #20]
  for (count = NbWords; count != 0U; count--)
 8007db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007db2:	3b01      	subs	r3, #1
 8007db4:	627b      	str	r3, [r7, #36]	@ 0x24
 8007db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d1e6      	bne.n	8007d8a <USB_ReadPMA+0x48>
  }

  /*When Number of data is not word aligned, read the remaining byte*/
  if (remaining_bytes != 0U)
 8007dbc:	8b7b      	ldrh	r3, [r7, #26]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d017      	beq.n	8007df2 <USB_ReadPMA+0xb0>
  {
    RdVal = *(__IO uint32_t *)pdwVal;
 8007dc2:	6a3b      	ldr	r3, [r7, #32]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	613b      	str	r3, [r7, #16]

    do
    {
      *(uint8_t *)pBuf = (uint8_t)(RdVal >> (8U * (uint8_t)(count)));
 8007dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dca:	b2db      	uxtb	r3, r3
 8007dcc:	00db      	lsls	r3, r3, #3
 8007dce:	693a      	ldr	r2, [r7, #16]
 8007dd0:	fa22 f303 	lsr.w	r3, r2, r3
 8007dd4:	b2da      	uxtb	r2, r3
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	701a      	strb	r2, [r3, #0]
      count++;
 8007dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ddc:	3301      	adds	r3, #1
 8007dde:	627b      	str	r3, [r7, #36]	@ 0x24
      pBuf++;
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	3301      	adds	r3, #1
 8007de4:	617b      	str	r3, [r7, #20]
      remaining_bytes--;
 8007de6:	8b7b      	ldrh	r3, [r7, #26]
 8007de8:	3b01      	subs	r3, #1
 8007dea:	837b      	strh	r3, [r7, #26]
    } while (remaining_bytes != 0U);
 8007dec:	8b7b      	ldrh	r3, [r7, #26]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d1ea      	bne.n	8007dc8 <USB_ReadPMA+0x86>
  }
}
 8007df2:	bf00      	nop
 8007df4:	372c      	adds	r7, #44	@ 0x2c
 8007df6:	46bd      	mov	sp, r7
 8007df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfc:	4770      	bx	lr
	...

08007e00 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b084      	sub	sp, #16
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	460b      	mov	r3, r1
 8007e0a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007e0c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007e10:	f001 ff40 	bl	8009c94 <USBD_static_malloc>
 8007e14:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d10a      	bne.n	8007e32 <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007e22:	687a      	ldr	r2, [r7, #4]
 8007e24:	33b0      	adds	r3, #176	@ 0xb0
 8007e26:	009b      	lsls	r3, r3, #2
 8007e28:	4413      	add	r3, r2
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	605a      	str	r2, [r3, #4]
    return (uint8_t)USBD_EMEM;
 8007e2e:	2302      	movs	r3, #2
 8007e30:	e0fd      	b.n	800802e <USBD_CDC_Init+0x22e>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007e32:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8007e36:	2100      	movs	r1, #0
 8007e38:	68f8      	ldr	r0, [r7, #12]
 8007e3a:	f003 fd76 	bl	800b92a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007e44:	687a      	ldr	r2, [r7, #4]
 8007e46:	33b0      	adds	r3, #176	@ 0xb0
 8007e48:	009b      	lsls	r3, r3, #2
 8007e4a:	4413      	add	r3, r2
 8007e4c:	68fa      	ldr	r2, [r7, #12]
 8007e4e:	605a      	str	r2, [r3, #4]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007e56:	687a      	ldr	r2, [r7, #4]
 8007e58:	33b0      	adds	r3, #176	@ 0xb0
 8007e5a:	009b      	lsls	r3, r3, #2
 8007e5c:	4413      	add	r3, r2
 8007e5e:	685a      	ldr	r2, [r3, #4]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007e6c:	b2db      	uxtb	r3, r3
 8007e6e:	2202      	movs	r2, #2
 8007e70:	2180      	movs	r1, #128	@ 0x80
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f002 fbba 	bl	800a5ec <USBD_CoreGetEPAdd>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	4b6e      	ldr	r3, [pc, #440]	@ (8008038 <USBD_CDC_Init+0x238>)
 8007e7e:	701a      	strb	r2, [r3, #0]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007e86:	b2db      	uxtb	r3, r3
 8007e88:	2202      	movs	r2, #2
 8007e8a:	2100      	movs	r1, #0
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f002 fbad 	bl	800a5ec <USBD_CoreGetEPAdd>
 8007e92:	4603      	mov	r3, r0
 8007e94:	461a      	mov	r2, r3
 8007e96:	4b69      	ldr	r3, [pc, #420]	@ (800803c <USBD_CDC_Init+0x23c>)
 8007e98:	701a      	strb	r2, [r3, #0]
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007ea0:	b2db      	uxtb	r3, r3
 8007ea2:	2203      	movs	r2, #3
 8007ea4:	2180      	movs	r1, #128	@ 0x80
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f002 fba0 	bl	800a5ec <USBD_CoreGetEPAdd>
 8007eac:	4603      	mov	r3, r0
 8007eae:	461a      	mov	r2, r3
 8007eb0:	4b63      	ldr	r3, [pc, #396]	@ (8008040 <USBD_CDC_Init+0x240>)
 8007eb2:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	7c1b      	ldrb	r3, [r3, #16]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d138      	bne.n	8007f2e <USBD_CDC_Init+0x12e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007ebc:	4b5e      	ldr	r3, [pc, #376]	@ (8008038 <USBD_CDC_Init+0x238>)
 8007ebe:	7819      	ldrb	r1, [r3, #0]
 8007ec0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007ec4:	2202      	movs	r2, #2
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f001 fdeb 	bl	8009aa2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007ecc:	4b5a      	ldr	r3, [pc, #360]	@ (8008038 <USBD_CDC_Init+0x238>)
 8007ece:	781b      	ldrb	r3, [r3, #0]
 8007ed0:	f003 020f 	and.w	r2, r3, #15
 8007ed4:	6879      	ldr	r1, [r7, #4]
 8007ed6:	4613      	mov	r3, r2
 8007ed8:	009b      	lsls	r3, r3, #2
 8007eda:	4413      	add	r3, r2
 8007edc:	009b      	lsls	r3, r3, #2
 8007ede:	440b      	add	r3, r1
 8007ee0:	3324      	adds	r3, #36	@ 0x24
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007ee6:	4b55      	ldr	r3, [pc, #340]	@ (800803c <USBD_CDC_Init+0x23c>)
 8007ee8:	7819      	ldrb	r1, [r3, #0]
 8007eea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007eee:	2202      	movs	r2, #2
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f001 fdd6 	bl	8009aa2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007ef6:	4b51      	ldr	r3, [pc, #324]	@ (800803c <USBD_CDC_Init+0x23c>)
 8007ef8:	781b      	ldrb	r3, [r3, #0]
 8007efa:	f003 020f 	and.w	r2, r3, #15
 8007efe:	6879      	ldr	r1, [r7, #4]
 8007f00:	4613      	mov	r3, r2
 8007f02:	009b      	lsls	r3, r3, #2
 8007f04:	4413      	add	r3, r2
 8007f06:	009b      	lsls	r3, r3, #2
 8007f08:	440b      	add	r3, r1
 8007f0a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007f0e:	2201      	movs	r2, #1
 8007f10:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007f12:	4b4b      	ldr	r3, [pc, #300]	@ (8008040 <USBD_CDC_Init+0x240>)
 8007f14:	781b      	ldrb	r3, [r3, #0]
 8007f16:	f003 020f 	and.w	r2, r3, #15
 8007f1a:	6879      	ldr	r1, [r7, #4]
 8007f1c:	4613      	mov	r3, r2
 8007f1e:	009b      	lsls	r3, r3, #2
 8007f20:	4413      	add	r3, r2
 8007f22:	009b      	lsls	r3, r3, #2
 8007f24:	440b      	add	r3, r1
 8007f26:	3326      	adds	r3, #38	@ 0x26
 8007f28:	2210      	movs	r2, #16
 8007f2a:	801a      	strh	r2, [r3, #0]
 8007f2c:	e035      	b.n	8007f9a <USBD_CDC_Init+0x19a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007f2e:	4b42      	ldr	r3, [pc, #264]	@ (8008038 <USBD_CDC_Init+0x238>)
 8007f30:	7819      	ldrb	r1, [r3, #0]
 8007f32:	2340      	movs	r3, #64	@ 0x40
 8007f34:	2202      	movs	r2, #2
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f001 fdb3 	bl	8009aa2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007f3c:	4b3e      	ldr	r3, [pc, #248]	@ (8008038 <USBD_CDC_Init+0x238>)
 8007f3e:	781b      	ldrb	r3, [r3, #0]
 8007f40:	f003 020f 	and.w	r2, r3, #15
 8007f44:	6879      	ldr	r1, [r7, #4]
 8007f46:	4613      	mov	r3, r2
 8007f48:	009b      	lsls	r3, r3, #2
 8007f4a:	4413      	add	r3, r2
 8007f4c:	009b      	lsls	r3, r3, #2
 8007f4e:	440b      	add	r3, r1
 8007f50:	3324      	adds	r3, #36	@ 0x24
 8007f52:	2201      	movs	r2, #1
 8007f54:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007f56:	4b39      	ldr	r3, [pc, #228]	@ (800803c <USBD_CDC_Init+0x23c>)
 8007f58:	7819      	ldrb	r1, [r3, #0]
 8007f5a:	2340      	movs	r3, #64	@ 0x40
 8007f5c:	2202      	movs	r2, #2
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f001 fd9f 	bl	8009aa2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007f64:	4b35      	ldr	r3, [pc, #212]	@ (800803c <USBD_CDC_Init+0x23c>)
 8007f66:	781b      	ldrb	r3, [r3, #0]
 8007f68:	f003 020f 	and.w	r2, r3, #15
 8007f6c:	6879      	ldr	r1, [r7, #4]
 8007f6e:	4613      	mov	r3, r2
 8007f70:	009b      	lsls	r3, r3, #2
 8007f72:	4413      	add	r3, r2
 8007f74:	009b      	lsls	r3, r3, #2
 8007f76:	440b      	add	r3, r1
 8007f78:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007f7c:	2201      	movs	r2, #1
 8007f7e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007f80:	4b2f      	ldr	r3, [pc, #188]	@ (8008040 <USBD_CDC_Init+0x240>)
 8007f82:	781b      	ldrb	r3, [r3, #0]
 8007f84:	f003 020f 	and.w	r2, r3, #15
 8007f88:	6879      	ldr	r1, [r7, #4]
 8007f8a:	4613      	mov	r3, r2
 8007f8c:	009b      	lsls	r3, r3, #2
 8007f8e:	4413      	add	r3, r2
 8007f90:	009b      	lsls	r3, r3, #2
 8007f92:	440b      	add	r3, r1
 8007f94:	3326      	adds	r3, #38	@ 0x26
 8007f96:	2210      	movs	r2, #16
 8007f98:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007f9a:	4b29      	ldr	r3, [pc, #164]	@ (8008040 <USBD_CDC_Init+0x240>)
 8007f9c:	7819      	ldrb	r1, [r3, #0]
 8007f9e:	2308      	movs	r3, #8
 8007fa0:	2203      	movs	r2, #3
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f001 fd7d 	bl	8009aa2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007fa8:	4b25      	ldr	r3, [pc, #148]	@ (8008040 <USBD_CDC_Init+0x240>)
 8007faa:	781b      	ldrb	r3, [r3, #0]
 8007fac:	f003 020f 	and.w	r2, r3, #15
 8007fb0:	6879      	ldr	r1, [r7, #4]
 8007fb2:	4613      	mov	r3, r2
 8007fb4:	009b      	lsls	r3, r3, #2
 8007fb6:	4413      	add	r3, r2
 8007fb8:	009b      	lsls	r3, r3, #2
 8007fba:	440b      	add	r3, r1
 8007fbc:	3324      	adds	r3, #36	@ 0x24
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007fd0:	687a      	ldr	r2, [r7, #4]
 8007fd2:	33b2      	adds	r3, #178	@ 0xb2
 8007fd4:	009b      	lsls	r3, r3, #2
 8007fd6:	4413      	add	r3, r2
 8007fd8:	685b      	ldr	r3, [r3, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d101      	bne.n	8007ffc <USBD_CDC_Init+0x1fc>
  {
    return (uint8_t)USBD_EMEM;
 8007ff8:	2302      	movs	r3, #2
 8007ffa:	e018      	b.n	800802e <USBD_CDC_Init+0x22e>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	7c1b      	ldrb	r3, [r3, #16]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d10a      	bne.n	800801a <USBD_CDC_Init+0x21a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008004:	4b0d      	ldr	r3, [pc, #52]	@ (800803c <USBD_CDC_Init+0x23c>)
 8008006:	7819      	ldrb	r1, [r3, #0]
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800800e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f001 fe10 	bl	8009c38 <USBD_LL_PrepareReceive>
 8008018:	e008      	b.n	800802c <USBD_CDC_Init+0x22c>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800801a:	4b08      	ldr	r3, [pc, #32]	@ (800803c <USBD_CDC_Init+0x23c>)
 800801c:	7819      	ldrb	r1, [r3, #0]
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008024:	2340      	movs	r3, #64	@ 0x40
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f001 fe06 	bl	8009c38 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800802c:	2300      	movs	r3, #0
}
 800802e:	4618      	mov	r0, r3
 8008030:	3710      	adds	r7, #16
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}
 8008036:	bf00      	nop
 8008038:	20000048 	.word	0x20000048
 800803c:	20000049 	.word	0x20000049
 8008040:	2000004a 	.word	0x2000004a

08008044 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b082      	sub	sp, #8
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	460b      	mov	r3, r1
 800804e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);


#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this CDC class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008056:	b2db      	uxtb	r3, r3
 8008058:	2202      	movs	r2, #2
 800805a:	2180      	movs	r1, #128	@ 0x80
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f002 fac5 	bl	800a5ec <USBD_CoreGetEPAdd>
 8008062:	4603      	mov	r3, r0
 8008064:	461a      	mov	r2, r3
 8008066:	4b4a      	ldr	r3, [pc, #296]	@ (8008190 <USBD_CDC_DeInit+0x14c>)
 8008068:	701a      	strb	r2, [r3, #0]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008070:	b2db      	uxtb	r3, r3
 8008072:	2202      	movs	r2, #2
 8008074:	2100      	movs	r1, #0
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f002 fab8 	bl	800a5ec <USBD_CoreGetEPAdd>
 800807c:	4603      	mov	r3, r0
 800807e:	461a      	mov	r2, r3
 8008080:	4b44      	ldr	r3, [pc, #272]	@ (8008194 <USBD_CDC_DeInit+0x150>)
 8008082:	701a      	strb	r2, [r3, #0]
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800808a:	b2db      	uxtb	r3, r3
 800808c:	2203      	movs	r2, #3
 800808e:	2180      	movs	r1, #128	@ 0x80
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f002 faab 	bl	800a5ec <USBD_CoreGetEPAdd>
 8008096:	4603      	mov	r3, r0
 8008098:	461a      	mov	r2, r3
 800809a:	4b3f      	ldr	r3, [pc, #252]	@ (8008198 <USBD_CDC_DeInit+0x154>)
 800809c:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800809e:	4b3c      	ldr	r3, [pc, #240]	@ (8008190 <USBD_CDC_DeInit+0x14c>)
 80080a0:	781b      	ldrb	r3, [r3, #0]
 80080a2:	4619      	mov	r1, r3
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f001 fd1c 	bl	8009ae2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80080aa:	4b39      	ldr	r3, [pc, #228]	@ (8008190 <USBD_CDC_DeInit+0x14c>)
 80080ac:	781b      	ldrb	r3, [r3, #0]
 80080ae:	f003 020f 	and.w	r2, r3, #15
 80080b2:	6879      	ldr	r1, [r7, #4]
 80080b4:	4613      	mov	r3, r2
 80080b6:	009b      	lsls	r3, r3, #2
 80080b8:	4413      	add	r3, r2
 80080ba:	009b      	lsls	r3, r3, #2
 80080bc:	440b      	add	r3, r1
 80080be:	3324      	adds	r3, #36	@ 0x24
 80080c0:	2200      	movs	r2, #0
 80080c2:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80080c4:	4b33      	ldr	r3, [pc, #204]	@ (8008194 <USBD_CDC_DeInit+0x150>)
 80080c6:	781b      	ldrb	r3, [r3, #0]
 80080c8:	4619      	mov	r1, r3
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f001 fd09 	bl	8009ae2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80080d0:	4b30      	ldr	r3, [pc, #192]	@ (8008194 <USBD_CDC_DeInit+0x150>)
 80080d2:	781b      	ldrb	r3, [r3, #0]
 80080d4:	f003 020f 	and.w	r2, r3, #15
 80080d8:	6879      	ldr	r1, [r7, #4]
 80080da:	4613      	mov	r3, r2
 80080dc:	009b      	lsls	r3, r3, #2
 80080de:	4413      	add	r3, r2
 80080e0:	009b      	lsls	r3, r3, #2
 80080e2:	440b      	add	r3, r1
 80080e4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80080e8:	2200      	movs	r2, #0
 80080ea:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80080ec:	4b2a      	ldr	r3, [pc, #168]	@ (8008198 <USBD_CDC_DeInit+0x154>)
 80080ee:	781b      	ldrb	r3, [r3, #0]
 80080f0:	4619      	mov	r1, r3
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f001 fcf5 	bl	8009ae2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80080f8:	4b27      	ldr	r3, [pc, #156]	@ (8008198 <USBD_CDC_DeInit+0x154>)
 80080fa:	781b      	ldrb	r3, [r3, #0]
 80080fc:	f003 020f 	and.w	r2, r3, #15
 8008100:	6879      	ldr	r1, [r7, #4]
 8008102:	4613      	mov	r3, r2
 8008104:	009b      	lsls	r3, r3, #2
 8008106:	4413      	add	r3, r2
 8008108:	009b      	lsls	r3, r3, #2
 800810a:	440b      	add	r3, r1
 800810c:	3324      	adds	r3, #36	@ 0x24
 800810e:	2200      	movs	r2, #0
 8008110:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008112:	4b21      	ldr	r3, [pc, #132]	@ (8008198 <USBD_CDC_DeInit+0x154>)
 8008114:	781b      	ldrb	r3, [r3, #0]
 8008116:	f003 020f 	and.w	r2, r3, #15
 800811a:	6879      	ldr	r1, [r7, #4]
 800811c:	4613      	mov	r3, r2
 800811e:	009b      	lsls	r3, r3, #2
 8008120:	4413      	add	r3, r2
 8008122:	009b      	lsls	r3, r3, #2
 8008124:	440b      	add	r3, r1
 8008126:	3326      	adds	r3, #38	@ 0x26
 8008128:	2200      	movs	r2, #0
 800812a:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008132:	687a      	ldr	r2, [r7, #4]
 8008134:	33b0      	adds	r3, #176	@ 0xb0
 8008136:	009b      	lsls	r3, r3, #2
 8008138:	4413      	add	r3, r2
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d021      	beq.n	8008184 <USBD_CDC_DeInit+0x140>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008146:	687a      	ldr	r2, [r7, #4]
 8008148:	33b2      	adds	r3, #178	@ 0xb2
 800814a:	009b      	lsls	r3, r3, #2
 800814c:	4413      	add	r3, r2
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	685b      	ldr	r3, [r3, #4]
 8008152:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800815a:	687a      	ldr	r2, [r7, #4]
 800815c:	33b0      	adds	r3, #176	@ 0xb0
 800815e:	009b      	lsls	r3, r3, #2
 8008160:	4413      	add	r3, r2
 8008162:	685b      	ldr	r3, [r3, #4]
 8008164:	4618      	mov	r0, r3
 8008166:	f001 fda3 	bl	8009cb0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008170:	687a      	ldr	r2, [r7, #4]
 8008172:	33b0      	adds	r3, #176	@ 0xb0
 8008174:	009b      	lsls	r3, r3, #2
 8008176:	4413      	add	r3, r2
 8008178:	2200      	movs	r2, #0
 800817a:	605a      	str	r2, [r3, #4]
    pdev->pClassData = NULL;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2200      	movs	r2, #0
 8008180:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  }

  return (uint8_t)USBD_OK;
 8008184:	2300      	movs	r3, #0
}
 8008186:	4618      	mov	r0, r3
 8008188:	3708      	adds	r7, #8
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}
 800818e:	bf00      	nop
 8008190:	20000048 	.word	0x20000048
 8008194:	20000049 	.word	0x20000049
 8008198:	2000004a 	.word	0x2000004a

0800819c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b086      	sub	sp, #24
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80081ac:	687a      	ldr	r2, [r7, #4]
 80081ae:	33b0      	adds	r3, #176	@ 0xb0
 80081b0:	009b      	lsls	r3, r3, #2
 80081b2:	4413      	add	r3, r2
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80081b8:	2300      	movs	r3, #0
 80081ba:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80081bc:	2300      	movs	r3, #0
 80081be:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80081c0:	2300      	movs	r3, #0
 80081c2:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d101      	bne.n	80081ce <USBD_CDC_Setup+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80081ca:	2303      	movs	r3, #3
 80081cc:	e0c0      	b.n	8008350 <USBD_CDC_Setup+0x1b4>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	781b      	ldrb	r3, [r3, #0]
 80081d2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d050      	beq.n	800827c <USBD_CDC_Setup+0xe0>
 80081da:	2b20      	cmp	r3, #32
 80081dc:	f040 80b0 	bne.w	8008340 <USBD_CDC_Setup+0x1a4>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	88db      	ldrh	r3, [r3, #6]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d03a      	beq.n	800825e <USBD_CDC_Setup+0xc2>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	781b      	ldrb	r3, [r3, #0]
 80081ec:	b25b      	sxtb	r3, r3
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	da1b      	bge.n	800822a <USBD_CDC_Setup+0x8e>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80081f8:	687a      	ldr	r2, [r7, #4]
 80081fa:	33b2      	adds	r3, #178	@ 0xb2
 80081fc:	009b      	lsls	r3, r3, #2
 80081fe:	4413      	add	r3, r2
 8008200:	685b      	ldr	r3, [r3, #4]
 8008202:	689b      	ldr	r3, [r3, #8]
 8008204:	683a      	ldr	r2, [r7, #0]
 8008206:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008208:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800820a:	683a      	ldr	r2, [r7, #0]
 800820c:	88d2      	ldrh	r2, [r2, #6]
 800820e:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	88db      	ldrh	r3, [r3, #6]
 8008214:	2b07      	cmp	r3, #7
 8008216:	bf28      	it	cs
 8008218:	2307      	movcs	r3, #7
 800821a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	89fa      	ldrh	r2, [r7, #14]
 8008220:	4619      	mov	r1, r3
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f003 f9e1 	bl	800b5ea <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008228:	e091      	b.n	800834e <USBD_CDC_Setup+0x1b2>
          hcdc->CmdOpCode = req->bRequest;
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	785a      	ldrb	r2, [r3, #1]
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	88db      	ldrh	r3, [r3, #6]
 8008238:	2b3f      	cmp	r3, #63	@ 0x3f
 800823a:	d803      	bhi.n	8008244 <USBD_CDC_Setup+0xa8>
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	88db      	ldrh	r3, [r3, #6]
 8008240:	b2da      	uxtb	r2, r3
 8008242:	e000      	b.n	8008246 <USBD_CDC_Setup+0xaa>
 8008244:	2240      	movs	r2, #64	@ 0x40
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800824c:	6939      	ldr	r1, [r7, #16]
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8008254:	461a      	mov	r2, r3
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f003 f9f3 	bl	800b642 <USBD_CtlPrepareRx>
      break;
 800825c:	e077      	b.n	800834e <USBD_CDC_Setup+0x1b2>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008264:	687a      	ldr	r2, [r7, #4]
 8008266:	33b2      	adds	r3, #178	@ 0xb2
 8008268:	009b      	lsls	r3, r3, #2
 800826a:	4413      	add	r3, r2
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	689b      	ldr	r3, [r3, #8]
 8008270:	683a      	ldr	r2, [r7, #0]
 8008272:	7850      	ldrb	r0, [r2, #1]
 8008274:	2200      	movs	r2, #0
 8008276:	6839      	ldr	r1, [r7, #0]
 8008278:	4798      	blx	r3
      break;
 800827a:	e068      	b.n	800834e <USBD_CDC_Setup+0x1b2>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	785b      	ldrb	r3, [r3, #1]
 8008280:	2b0b      	cmp	r3, #11
 8008282:	d852      	bhi.n	800832a <USBD_CDC_Setup+0x18e>
 8008284:	a201      	add	r2, pc, #4	@ (adr r2, 800828c <USBD_CDC_Setup+0xf0>)
 8008286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800828a:	bf00      	nop
 800828c:	080082bd 	.word	0x080082bd
 8008290:	08008339 	.word	0x08008339
 8008294:	0800832b 	.word	0x0800832b
 8008298:	0800832b 	.word	0x0800832b
 800829c:	0800832b 	.word	0x0800832b
 80082a0:	0800832b 	.word	0x0800832b
 80082a4:	0800832b 	.word	0x0800832b
 80082a8:	0800832b 	.word	0x0800832b
 80082ac:	0800832b 	.word	0x0800832b
 80082b0:	0800832b 	.word	0x0800832b
 80082b4:	080082e7 	.word	0x080082e7
 80082b8:	08008311 	.word	0x08008311
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082c2:	b2db      	uxtb	r3, r3
 80082c4:	2b03      	cmp	r3, #3
 80082c6:	d107      	bne.n	80082d8 <USBD_CDC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80082c8:	f107 030a 	add.w	r3, r7, #10
 80082cc:	2202      	movs	r2, #2
 80082ce:	4619      	mov	r1, r3
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f003 f98a 	bl	800b5ea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80082d6:	e032      	b.n	800833e <USBD_CDC_Setup+0x1a2>
            USBD_CtlError(pdev, req);
 80082d8:	6839      	ldr	r1, [r7, #0]
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f003 f805 	bl	800b2ea <USBD_CtlError>
            ret = USBD_FAIL;
 80082e0:	2303      	movs	r3, #3
 80082e2:	75fb      	strb	r3, [r7, #23]
          break;
 80082e4:	e02b      	b.n	800833e <USBD_CDC_Setup+0x1a2>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082ec:	b2db      	uxtb	r3, r3
 80082ee:	2b03      	cmp	r3, #3
 80082f0:	d107      	bne.n	8008302 <USBD_CDC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80082f2:	f107 030d 	add.w	r3, r7, #13
 80082f6:	2201      	movs	r2, #1
 80082f8:	4619      	mov	r1, r3
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f003 f975 	bl	800b5ea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008300:	e01d      	b.n	800833e <USBD_CDC_Setup+0x1a2>
            USBD_CtlError(pdev, req);
 8008302:	6839      	ldr	r1, [r7, #0]
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f002 fff0 	bl	800b2ea <USBD_CtlError>
            ret = USBD_FAIL;
 800830a:	2303      	movs	r3, #3
 800830c:	75fb      	strb	r3, [r7, #23]
          break;
 800830e:	e016      	b.n	800833e <USBD_CDC_Setup+0x1a2>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008316:	b2db      	uxtb	r3, r3
 8008318:	2b03      	cmp	r3, #3
 800831a:	d00f      	beq.n	800833c <USBD_CDC_Setup+0x1a0>
          {
            USBD_CtlError(pdev, req);
 800831c:	6839      	ldr	r1, [r7, #0]
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f002 ffe3 	bl	800b2ea <USBD_CtlError>
            ret = USBD_FAIL;
 8008324:	2303      	movs	r3, #3
 8008326:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008328:	e008      	b.n	800833c <USBD_CDC_Setup+0x1a0>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800832a:	6839      	ldr	r1, [r7, #0]
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f002 ffdc 	bl	800b2ea <USBD_CtlError>
          ret = USBD_FAIL;
 8008332:	2303      	movs	r3, #3
 8008334:	75fb      	strb	r3, [r7, #23]
          break;
 8008336:	e002      	b.n	800833e <USBD_CDC_Setup+0x1a2>
          break;
 8008338:	bf00      	nop
 800833a:	e008      	b.n	800834e <USBD_CDC_Setup+0x1b2>
          break;
 800833c:	bf00      	nop
      }
      break;
 800833e:	e006      	b.n	800834e <USBD_CDC_Setup+0x1b2>

    default:
      USBD_CtlError(pdev, req);
 8008340:	6839      	ldr	r1, [r7, #0]
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f002 ffd1 	bl	800b2ea <USBD_CtlError>
      ret = USBD_FAIL;
 8008348:	2303      	movs	r3, #3
 800834a:	75fb      	strb	r3, [r7, #23]
      break;
 800834c:	bf00      	nop
  }

  return (uint8_t)ret;
 800834e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008350:	4618      	mov	r0, r3
 8008352:	3718      	adds	r7, #24
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}

08008358 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b084      	sub	sp, #16
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	460b      	mov	r3, r1
 8008362:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800836a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008372:	687a      	ldr	r2, [r7, #4]
 8008374:	33b0      	adds	r3, #176	@ 0xb0
 8008376:	009b      	lsls	r3, r3, #2
 8008378:	4413      	add	r3, r2
 800837a:	685b      	ldr	r3, [r3, #4]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d101      	bne.n	8008384 <USBD_CDC_DataIn+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8008380:	2303      	movs	r3, #3
 8008382:	e066      	b.n	8008452 <USBD_CDC_DataIn+0xfa>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800838a:	687a      	ldr	r2, [r7, #4]
 800838c:	33b0      	adds	r3, #176	@ 0xb0
 800838e:	009b      	lsls	r3, r3, #2
 8008390:	4413      	add	r3, r2
 8008392:	685b      	ldr	r3, [r3, #4]
 8008394:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008396:	78fb      	ldrb	r3, [r7, #3]
 8008398:	f003 020f 	and.w	r2, r3, #15
 800839c:	6879      	ldr	r1, [r7, #4]
 800839e:	4613      	mov	r3, r2
 80083a0:	009b      	lsls	r3, r3, #2
 80083a2:	4413      	add	r3, r2
 80083a4:	009b      	lsls	r3, r3, #2
 80083a6:	440b      	add	r3, r1
 80083a8:	3318      	adds	r3, #24
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d02f      	beq.n	8008410 <USBD_CDC_DataIn+0xb8>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80083b0:	78fb      	ldrb	r3, [r7, #3]
 80083b2:	f003 020f 	and.w	r2, r3, #15
 80083b6:	6879      	ldr	r1, [r7, #4]
 80083b8:	4613      	mov	r3, r2
 80083ba:	009b      	lsls	r3, r3, #2
 80083bc:	4413      	add	r3, r2
 80083be:	009b      	lsls	r3, r3, #2
 80083c0:	440b      	add	r3, r1
 80083c2:	3318      	adds	r3, #24
 80083c4:	681a      	ldr	r2, [r3, #0]
 80083c6:	78fb      	ldrb	r3, [r7, #3]
 80083c8:	f003 010f 	and.w	r1, r3, #15
 80083cc:	68f8      	ldr	r0, [r7, #12]
 80083ce:	460b      	mov	r3, r1
 80083d0:	009b      	lsls	r3, r3, #2
 80083d2:	440b      	add	r3, r1
 80083d4:	00db      	lsls	r3, r3, #3
 80083d6:	4403      	add	r3, r0
 80083d8:	3324      	adds	r3, #36	@ 0x24
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	fbb2 f1f3 	udiv	r1, r2, r3
 80083e0:	fb01 f303 	mul.w	r3, r1, r3
 80083e4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d112      	bne.n	8008410 <USBD_CDC_DataIn+0xb8>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80083ea:	78fb      	ldrb	r3, [r7, #3]
 80083ec:	f003 020f 	and.w	r2, r3, #15
 80083f0:	6879      	ldr	r1, [r7, #4]
 80083f2:	4613      	mov	r3, r2
 80083f4:	009b      	lsls	r3, r3, #2
 80083f6:	4413      	add	r3, r2
 80083f8:	009b      	lsls	r3, r3, #2
 80083fa:	440b      	add	r3, r1
 80083fc:	3318      	adds	r3, #24
 80083fe:	2200      	movs	r2, #0
 8008400:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008402:	78f9      	ldrb	r1, [r7, #3]
 8008404:	2300      	movs	r3, #0
 8008406:	2200      	movs	r2, #0
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f001 fbfa 	bl	8009c02 <USBD_LL_Transmit>
 800840e:	e01f      	b.n	8008450 <USBD_CDC_DataIn+0xf8>
  }
  else
  {
    hcdc->TxState = 0U;
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	2200      	movs	r2, #0
 8008414:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800841e:	687a      	ldr	r2, [r7, #4]
 8008420:	33b2      	adds	r3, #178	@ 0xb2
 8008422:	009b      	lsls	r3, r3, #2
 8008424:	4413      	add	r3, r2
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	691b      	ldr	r3, [r3, #16]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d010      	beq.n	8008450 <USBD_CDC_DataIn+0xf8>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008434:	687a      	ldr	r2, [r7, #4]
 8008436:	33b2      	adds	r3, #178	@ 0xb2
 8008438:	009b      	lsls	r3, r3, #2
 800843a:	4413      	add	r3, r2
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	691b      	ldr	r3, [r3, #16]
 8008440:	68ba      	ldr	r2, [r7, #8]
 8008442:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8008446:	68ba      	ldr	r2, [r7, #8]
 8008448:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800844c:	78fa      	ldrb	r2, [r7, #3]
 800844e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008450:	2300      	movs	r3, #0
}
 8008452:	4618      	mov	r0, r3
 8008454:	3710      	adds	r7, #16
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}

0800845a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800845a:	b580      	push	{r7, lr}
 800845c:	b084      	sub	sp, #16
 800845e:	af00      	add	r7, sp, #0
 8008460:	6078      	str	r0, [r7, #4]
 8008462:	460b      	mov	r3, r1
 8008464:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800846c:	687a      	ldr	r2, [r7, #4]
 800846e:	33b0      	adds	r3, #176	@ 0xb0
 8008470:	009b      	lsls	r3, r3, #2
 8008472:	4413      	add	r3, r2
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800847e:	687a      	ldr	r2, [r7, #4]
 8008480:	33b0      	adds	r3, #176	@ 0xb0
 8008482:	009b      	lsls	r3, r3, #2
 8008484:	4413      	add	r3, r2
 8008486:	685b      	ldr	r3, [r3, #4]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d101      	bne.n	8008490 <USBD_CDC_DataOut+0x36>
  {
    return (uint8_t)USBD_FAIL;
 800848c:	2303      	movs	r3, #3
 800848e:	e01a      	b.n	80084c6 <USBD_CDC_DataOut+0x6c>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008490:	78fb      	ldrb	r3, [r7, #3]
 8008492:	4619      	mov	r1, r3
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f001 fbea 	bl	8009c6e <USBD_LL_GetRxDataSize>
 800849a:	4602      	mov	r2, r0
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80084a8:	687a      	ldr	r2, [r7, #4]
 80084aa:	33b2      	adds	r3, #178	@ 0xb2
 80084ac:	009b      	lsls	r3, r3, #2
 80084ae:	4413      	add	r3, r2
 80084b0:	685b      	ldr	r3, [r3, #4]
 80084b2:	68db      	ldr	r3, [r3, #12]
 80084b4:	68fa      	ldr	r2, [r7, #12]
 80084b6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80084ba:	68fa      	ldr	r2, [r7, #12]
 80084bc:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80084c0:	4611      	mov	r1, r2
 80084c2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80084c4:	2300      	movs	r3, #0
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3710      	adds	r7, #16
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}

080084ce <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80084ce:	b580      	push	{r7, lr}
 80084d0:	b084      	sub	sp, #16
 80084d2:	af00      	add	r7, sp, #0
 80084d4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80084dc:	687a      	ldr	r2, [r7, #4]
 80084de:	33b0      	adds	r3, #176	@ 0xb0
 80084e0:	009b      	lsls	r3, r3, #2
 80084e2:	4413      	add	r3, r2
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d101      	bne.n	80084f2 <USBD_CDC_EP0_RxReady+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80084ee:	2303      	movs	r3, #3
 80084f0:	e024      	b.n	800853c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80084f8:	687a      	ldr	r2, [r7, #4]
 80084fa:	33b2      	adds	r3, #178	@ 0xb2
 80084fc:	009b      	lsls	r3, r3, #2
 80084fe:	4413      	add	r3, r2
 8008500:	685b      	ldr	r3, [r3, #4]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d019      	beq.n	800853a <USBD_CDC_EP0_RxReady+0x6c>
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800850c:	2bff      	cmp	r3, #255	@ 0xff
 800850e:	d014      	beq.n	800853a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008516:	687a      	ldr	r2, [r7, #4]
 8008518:	33b2      	adds	r3, #178	@ 0xb2
 800851a:	009b      	lsls	r3, r3, #2
 800851c:	4413      	add	r3, r2
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	689b      	ldr	r3, [r3, #8]
 8008522:	68fa      	ldr	r2, [r7, #12]
 8008524:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8008528:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800852a:	68fa      	ldr	r2, [r7, #12]
 800852c:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008530:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	22ff      	movs	r2, #255	@ 0xff
 8008536:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800853a:	2300      	movs	r3, #0
}
 800853c:	4618      	mov	r0, r3
 800853e:	3710      	adds	r7, #16
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}

08008544 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008544:	b480      	push	{r7}
 8008546:	b083      	sub	sp, #12
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
 800854c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d101      	bne.n	8008558 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008554:	2303      	movs	r3, #3
 8008556:	e009      	b.n	800856c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800855e:	687a      	ldr	r2, [r7, #4]
 8008560:	33b2      	adds	r3, #178	@ 0xb2
 8008562:	009b      	lsls	r3, r3, #2
 8008564:	4413      	add	r3, r2
 8008566:	683a      	ldr	r2, [r7, #0]
 8008568:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800856a:	2300      	movs	r3, #0
}
 800856c:	4618      	mov	r0, r3
 800856e:	370c      	adds	r7, #12
 8008570:	46bd      	mov	sp, r7
 8008572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008576:	4770      	bx	lr

08008578 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
#ifdef USE_USBD_COMPOSITE
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length, uint8_t ClassId)
{
 8008578:	b480      	push	{r7}
 800857a:	b087      	sub	sp, #28
 800857c:	af00      	add	r7, sp, #0
 800857e:	60f8      	str	r0, [r7, #12]
 8008580:	60b9      	str	r1, [r7, #8]
 8008582:	607a      	str	r2, [r7, #4]
 8008584:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
 8008586:	78fb      	ldrb	r3, [r7, #3]
 8008588:	68fa      	ldr	r2, [r7, #12]
 800858a:	33b0      	adds	r3, #176	@ 0xb0
 800858c:	009b      	lsls	r3, r3, #2
 800858e:	4413      	add	r3, r2
 8008590:	685b      	ldr	r3, [r3, #4]
 8008592:	617b      	str	r3, [r7, #20]
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d101      	bne.n	800859e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800859a:	2303      	movs	r3, #3
 800859c:	e008      	b.n	80085b0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	68ba      	ldr	r2, [r7, #8]
 80085a2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	687a      	ldr	r2, [r7, #4]
 80085aa:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80085ae:	2300      	movs	r3, #0
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	371c      	adds	r7, #28
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr

080085bc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80085bc:	b480      	push	{r7}
 80085be:	b085      	sub	sp, #20
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80085cc:	687a      	ldr	r2, [r7, #4]
 80085ce:	33b0      	adds	r3, #176	@ 0xb0
 80085d0:	009b      	lsls	r3, r3, #2
 80085d2:	4413      	add	r3, r2
 80085d4:	685b      	ldr	r3, [r3, #4]
 80085d6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d101      	bne.n	80085e2 <USBD_CDC_SetRxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80085de:	2303      	movs	r3, #3
 80085e0:	e004      	b.n	80085ec <USBD_CDC_SetRxBuffer+0x30>
  }

  hcdc->RxBuffer = pbuff;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	683a      	ldr	r2, [r7, #0]
 80085e6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80085ea:	2300      	movs	r3, #0
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	3714      	adds	r7, #20
 80085f0:	46bd      	mov	sp, r7
 80085f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f6:	4770      	bx	lr

080085f8 <USBD_CDC_TransmitPacket>:
  * @param  ClassId: The Class ID
  * @retval status
  */
#ifdef USE_USBD_COMPOSITE
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b084      	sub	sp, #16
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
 8008600:	460b      	mov	r3, r1
 8008602:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
 8008604:	78fb      	ldrb	r3, [r7, #3]
 8008606:	687a      	ldr	r2, [r7, #4]
 8008608:	33b0      	adds	r3, #176	@ 0xb0
 800860a:	009b      	lsls	r3, r3, #2
 800860c:	4413      	add	r3, r2
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	60bb      	str	r3, [r7, #8]
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8008612:	2301      	movs	r3, #1
 8008614:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
 8008616:	78fb      	ldrb	r3, [r7, #3]
 8008618:	2202      	movs	r2, #2
 800861a:	2180      	movs	r1, #128	@ 0x80
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f001 ffe5 	bl	800a5ec <USBD_CoreGetEPAdd>
 8008622:	4603      	mov	r3, r0
 8008624:	461a      	mov	r2, r3
 8008626:	4b18      	ldr	r3, [pc, #96]	@ (8008688 <USBD_CDC_TransmitPacket+0x90>)
 8008628:	701a      	strb	r2, [r3, #0]
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d101      	bne.n	8008634 <USBD_CDC_TransmitPacket+0x3c>
  {
    return (uint8_t)USBD_FAIL;
 8008630:	2303      	movs	r3, #3
 8008632:	e025      	b.n	8008680 <USBD_CDC_TransmitPacket+0x88>
  }

  if (hcdc->TxState == 0U)
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800863a:	2b00      	cmp	r3, #0
 800863c:	d11f      	bne.n	800867e <USBD_CDC_TransmitPacket+0x86>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	2201      	movs	r2, #1
 8008642:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008646:	4b10      	ldr	r3, [pc, #64]	@ (8008688 <USBD_CDC_TransmitPacket+0x90>)
 8008648:	781b      	ldrb	r3, [r3, #0]
 800864a:	f003 020f 	and.w	r2, r3, #15
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	4613      	mov	r3, r2
 8008658:	009b      	lsls	r3, r3, #2
 800865a:	4413      	add	r3, r2
 800865c:	009b      	lsls	r3, r3, #2
 800865e:	4403      	add	r3, r0
 8008660:	3318      	adds	r3, #24
 8008662:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008664:	4b08      	ldr	r3, [pc, #32]	@ (8008688 <USBD_CDC_TransmitPacket+0x90>)
 8008666:	7819      	ldrb	r1, [r3, #0]
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f001 fac4 	bl	8009c02 <USBD_LL_Transmit>

    ret = USBD_OK;
 800867a:	2300      	movs	r3, #0
 800867c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800867e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008680:	4618      	mov	r0, r3
 8008682:	3710      	adds	r7, #16
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}
 8008688:	20000048 	.word	0x20000048

0800868c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b084      	sub	sp, #16
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800869a:	687a      	ldr	r2, [r7, #4]
 800869c:	33b0      	adds	r3, #176	@ 0xb0
 800869e:	009b      	lsls	r3, r3, #2
 80086a0:	4413      	add	r3, r2
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	60fb      	str	r3, [r7, #12]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80086ac:	b2db      	uxtb	r3, r3
 80086ae:	2202      	movs	r2, #2
 80086b0:	2100      	movs	r1, #0
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f001 ff9a 	bl	800a5ec <USBD_CoreGetEPAdd>
 80086b8:	4603      	mov	r3, r0
 80086ba:	461a      	mov	r2, r3
 80086bc:	4b15      	ldr	r3, [pc, #84]	@ (8008714 <USBD_CDC_ReceivePacket+0x88>)
 80086be:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80086c6:	687a      	ldr	r2, [r7, #4]
 80086c8:	33b0      	adds	r3, #176	@ 0xb0
 80086ca:	009b      	lsls	r3, r3, #2
 80086cc:	4413      	add	r3, r2
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d101      	bne.n	80086d8 <USBD_CDC_ReceivePacket+0x4c>
  {
    return (uint8_t)USBD_FAIL;
 80086d4:	2303      	movs	r3, #3
 80086d6:	e018      	b.n	800870a <USBD_CDC_ReceivePacket+0x7e>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	7c1b      	ldrb	r3, [r3, #16]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d10a      	bne.n	80086f6 <USBD_CDC_ReceivePacket+0x6a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80086e0:	4b0c      	ldr	r3, [pc, #48]	@ (8008714 <USBD_CDC_ReceivePacket+0x88>)
 80086e2:	7819      	ldrb	r1, [r3, #0]
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80086ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f001 faa2 	bl	8009c38 <USBD_LL_PrepareReceive>
 80086f4:	e008      	b.n	8008708 <USBD_CDC_ReceivePacket+0x7c>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80086f6:	4b07      	ldr	r3, [pc, #28]	@ (8008714 <USBD_CDC_ReceivePacket+0x88>)
 80086f8:	7819      	ldrb	r1, [r3, #0]
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008700:	2340      	movs	r3, #64	@ 0x40
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f001 fa98 	bl	8009c38 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008708:	2300      	movs	r3, #0
}
 800870a:	4618      	mov	r0, r3
 800870c:	3710      	adds	r7, #16
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}
 8008712:	bf00      	nop
 8008714:	20000049 	.word	0x20000049

08008718 <TEMPLATE_Init>:
  *         Initializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Init(void)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	af00      	add	r7, sp, #0
	hUsbDeviceFS.classId = CDC_InstID;
 800871c:	4b09      	ldr	r3, [pc, #36]	@ (8008744 <TEMPLATE_Init+0x2c>)
 800871e:	781b      	ldrb	r3, [r3, #0]
 8008720:	461a      	mov	r2, r3
 8008722:	4b09      	ldr	r3, [pc, #36]	@ (8008748 <TEMPLATE_Init+0x30>)
 8008724:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, rxData, sizeof(rxData), CDC_InstID);
 8008728:	4b06      	ldr	r3, [pc, #24]	@ (8008744 <TEMPLATE_Init+0x2c>)
 800872a:	781b      	ldrb	r3, [r3, #0]
 800872c:	2208      	movs	r2, #8
 800872e:	4907      	ldr	r1, [pc, #28]	@ (800874c <TEMPLATE_Init+0x34>)
 8008730:	4805      	ldr	r0, [pc, #20]	@ (8008748 <TEMPLATE_Init+0x30>)
 8008732:	f7ff ff21 	bl	8008578 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBuffer);
 8008736:	4906      	ldr	r1, [pc, #24]	@ (8008750 <TEMPLATE_Init+0x38>)
 8008738:	4803      	ldr	r0, [pc, #12]	@ (8008748 <TEMPLATE_Init+0x30>)
 800873a:	f7ff ff3f 	bl	80085bc <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 800873e:	2300      	movs	r3, #0
}
 8008740:	4618      	mov	r0, r3
 8008742:	bd80      	pop	{r7, pc}
 8008744:	20000891 	.word	0x20000891
 8008748:	2000054c 	.word	0x2000054c
 800874c:	200008bc 	.word	0x200008bc
 8008750:	200008f4 	.word	0x200008f4

08008754 <TEMPLATE_DeInit>:
  *         DeInitializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_DeInit(void)
{
 8008754:	b480      	push	{r7}
 8008756:	af00      	add	r7, sp, #0
  /*
     Add your deinitialization code here
  */
  return (0);
 8008758:	2300      	movs	r3, #0
}
 800875a:	4618      	mov	r0, r3
 800875c:	46bd      	mov	sp, r7
 800875e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008762:	4770      	bx	lr

08008764 <TEMPLATE_Control>:
  * @param  Buf: Buffer containing command data (request parameters)
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Control(uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 8008764:	b480      	push	{r7}
 8008766:	b083      	sub	sp, #12
 8008768:	af00      	add	r7, sp, #0
 800876a:	4603      	mov	r3, r0
 800876c:	6039      	str	r1, [r7, #0]
 800876e:	71fb      	strb	r3, [r7, #7]
 8008770:	4613      	mov	r3, r2
 8008772:	80bb      	strh	r3, [r7, #4]
  UNUSED(length);

  switch (cmd)
 8008774:	79fb      	ldrb	r3, [r7, #7]
 8008776:	2b23      	cmp	r3, #35	@ 0x23
 8008778:	f200 8098 	bhi.w	80088ac <TEMPLATE_Control+0x148>
 800877c:	a201      	add	r2, pc, #4	@ (adr r2, 8008784 <TEMPLATE_Control+0x20>)
 800877e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008782:	bf00      	nop
 8008784:	080088ad 	.word	0x080088ad
 8008788:	080088ad 	.word	0x080088ad
 800878c:	080088ad 	.word	0x080088ad
 8008790:	080088ad 	.word	0x080088ad
 8008794:	080088ad 	.word	0x080088ad
 8008798:	080088ad 	.word	0x080088ad
 800879c:	080088ad 	.word	0x080088ad
 80087a0:	080088ad 	.word	0x080088ad
 80087a4:	080088ad 	.word	0x080088ad
 80087a8:	080088ad 	.word	0x080088ad
 80087ac:	080088ad 	.word	0x080088ad
 80087b0:	080088ad 	.word	0x080088ad
 80087b4:	080088ad 	.word	0x080088ad
 80087b8:	080088ad 	.word	0x080088ad
 80087bc:	080088ad 	.word	0x080088ad
 80087c0:	080088ad 	.word	0x080088ad
 80087c4:	080088ad 	.word	0x080088ad
 80087c8:	080088ad 	.word	0x080088ad
 80087cc:	080088ad 	.word	0x080088ad
 80087d0:	080088ad 	.word	0x080088ad
 80087d4:	080088ad 	.word	0x080088ad
 80087d8:	080088ad 	.word	0x080088ad
 80087dc:	080088ad 	.word	0x080088ad
 80087e0:	080088ad 	.word	0x080088ad
 80087e4:	080088ad 	.word	0x080088ad
 80087e8:	080088ad 	.word	0x080088ad
 80087ec:	080088ad 	.word	0x080088ad
 80087f0:	080088ad 	.word	0x080088ad
 80087f4:	080088ad 	.word	0x080088ad
 80087f8:	080088ad 	.word	0x080088ad
 80087fc:	080088ad 	.word	0x080088ad
 8008800:	080088ad 	.word	0x080088ad
 8008804:	08008815 	.word	0x08008815
 8008808:	08008859 	.word	0x08008859
 800880c:	080088ad 	.word	0x080088ad
 8008810:	080088ad 	.word	0x080088ad
    case CDC_CLEAR_COMM_FEATURE:
      /* Add your code here */
      break;

    case CDC_SET_LINE_CODING:
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	781b      	ldrb	r3, [r3, #0]
 8008818:	461a      	mov	r2, r3
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	3301      	adds	r3, #1
 800881e:	781b      	ldrb	r3, [r3, #0]
 8008820:	021b      	lsls	r3, r3, #8
 8008822:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	3302      	adds	r3, #2
 8008828:	781b      	ldrb	r3, [r3, #0]
 800882a:	041b      	lsls	r3, r3, #16
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800882c:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	3303      	adds	r3, #3
 8008832:	781b      	ldrb	r3, [r3, #0]
 8008834:	061b      	lsls	r3, r3, #24
 8008836:	4313      	orrs	r3, r2
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 8008838:	461a      	mov	r2, r3
 800883a:	4b20      	ldr	r3, [pc, #128]	@ (80088bc <TEMPLATE_Control+0x158>)
 800883c:	601a      	str	r2, [r3, #0]
      linecoding.format     = pbuf[4];
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	791a      	ldrb	r2, [r3, #4]
 8008842:	4b1e      	ldr	r3, [pc, #120]	@ (80088bc <TEMPLATE_Control+0x158>)
 8008844:	711a      	strb	r2, [r3, #4]
      linecoding.paritytype = pbuf[5];
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	795a      	ldrb	r2, [r3, #5]
 800884a:	4b1c      	ldr	r3, [pc, #112]	@ (80088bc <TEMPLATE_Control+0x158>)
 800884c:	715a      	strb	r2, [r3, #5]
      linecoding.datatype   = pbuf[6];
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	799a      	ldrb	r2, [r3, #6]
 8008852:	4b1a      	ldr	r3, [pc, #104]	@ (80088bc <TEMPLATE_Control+0x158>)
 8008854:	719a      	strb	r2, [r3, #6]

      /* Add your code here */
      break;
 8008856:	e02a      	b.n	80088ae <TEMPLATE_Control+0x14a>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(linecoding.bitrate);
 8008858:	4b18      	ldr	r3, [pc, #96]	@ (80088bc <TEMPLATE_Control+0x158>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	b2da      	uxtb	r2, r3
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(linecoding.bitrate >> 8);
 8008862:	4b16      	ldr	r3, [pc, #88]	@ (80088bc <TEMPLATE_Control+0x158>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	0a1a      	lsrs	r2, r3, #8
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	3301      	adds	r3, #1
 800886c:	b2d2      	uxtb	r2, r2
 800886e:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(linecoding.bitrate >> 16);
 8008870:	4b12      	ldr	r3, [pc, #72]	@ (80088bc <TEMPLATE_Control+0x158>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	0c1a      	lsrs	r2, r3, #16
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	3302      	adds	r3, #2
 800887a:	b2d2      	uxtb	r2, r2
 800887c:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(linecoding.bitrate >> 24);
 800887e:	4b0f      	ldr	r3, [pc, #60]	@ (80088bc <TEMPLATE_Control+0x158>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	0e1a      	lsrs	r2, r3, #24
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	3303      	adds	r3, #3
 8008888:	b2d2      	uxtb	r2, r2
 800888a:	701a      	strb	r2, [r3, #0]
      pbuf[4] = linecoding.format;
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	3304      	adds	r3, #4
 8008890:	4a0a      	ldr	r2, [pc, #40]	@ (80088bc <TEMPLATE_Control+0x158>)
 8008892:	7912      	ldrb	r2, [r2, #4]
 8008894:	701a      	strb	r2, [r3, #0]
      pbuf[5] = linecoding.paritytype;
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	3305      	adds	r3, #5
 800889a:	4a08      	ldr	r2, [pc, #32]	@ (80088bc <TEMPLATE_Control+0x158>)
 800889c:	7952      	ldrb	r2, [r2, #5]
 800889e:	701a      	strb	r2, [r3, #0]
      pbuf[6] = linecoding.datatype;
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	3306      	adds	r3, #6
 80088a4:	4a05      	ldr	r2, [pc, #20]	@ (80088bc <TEMPLATE_Control+0x158>)
 80088a6:	7992      	ldrb	r2, [r2, #6]
 80088a8:	701a      	strb	r2, [r3, #0]

      /* Add your code here */
      break;
 80088aa:	e000      	b.n	80088ae <TEMPLATE_Control+0x14a>
    case CDC_SEND_BREAK:
      /* Add your code here */
      break;

    default:
      break;
 80088ac:	bf00      	nop
  }

  return (0);
 80088ae:	2300      	movs	r3, #0
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	370c      	adds	r7, #12
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	4770      	bx	lr
 80088bc:	20000060 	.word	0x20000060

080088c0 <TEMPLATE_Receive>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Receive(uint8_t *Buf, uint32_t *Len)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b082      	sub	sp, #8
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
 80088c8:	6039      	str	r1, [r7, #0]
	/* Add your RX code here */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80088ca:	6879      	ldr	r1, [r7, #4]
 80088cc:	4805      	ldr	r0, [pc, #20]	@ (80088e4 <TEMPLATE_Receive+0x24>)
 80088ce:	f7ff fe75 	bl	80085bc <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80088d2:	4804      	ldr	r0, [pc, #16]	@ (80088e4 <TEMPLATE_Receive+0x24>)
 80088d4:	f7ff feda 	bl	800868c <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 80088d8:	2300      	movs	r3, #0
}
 80088da:	4618      	mov	r0, r3
 80088dc:	3708      	adds	r7, #8
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}
 80088e2:	bf00      	nop
 80088e4:	2000054c 	.word	0x2000054c

080088e8 <TEMPLATE_TransmitCplt>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_TransmitCplt(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b085      	sub	sp, #20
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	60f8      	str	r0, [r7, #12]
 80088f0:	60b9      	str	r1, [r7, #8]
 80088f2:	4613      	mov	r3, r2
 80088f4:	71fb      	strb	r3, [r7, #7]
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);

  return (0);
 80088f6:	2300      	movs	r3, #0
}
 80088f8:	4618      	mov	r0, r3
 80088fa:	3714      	adds	r7, #20
 80088fc:	46bd      	mov	sp, r7
 80088fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008902:	4770      	bx	lr

08008904 <USBD_CMPSIT_AddClass>:
  */
uint8_t  USBD_CMPSIT_AddClass(USBD_HandleTypeDef *pdev,
                              USBD_ClassTypeDef *pclass,
                              USBD_CompositeClassTypeDef class,
                              uint8_t cfgidx)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b084      	sub	sp, #16
 8008908:	af00      	add	r7, sp, #0
 800890a:	60f8      	str	r0, [r7, #12]
 800890c:	60b9      	str	r1, [r7, #8]
 800890e:	4611      	mov	r1, r2
 8008910:	461a      	mov	r2, r3
 8008912:	460b      	mov	r3, r1
 8008914:	71fb      	strb	r3, [r7, #7]
 8008916:	4613      	mov	r3, r2
 8008918:	71bb      	strb	r3, [r7, #6]
  if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) && (pdev->tclasslist[pdev->classId].Active == 0U))
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008920:	2b01      	cmp	r3, #1
 8008922:	d842      	bhi.n	80089aa <USBD_CMPSIT_AddClass+0xa6>
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800892a:	68fa      	ldr	r2, [r7, #12]
 800892c:	212c      	movs	r1, #44	@ 0x2c
 800892e:	fb01 f303 	mul.w	r3, r1, r3
 8008932:	4413      	add	r3, r2
 8008934:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d135      	bne.n	80089aa <USBD_CMPSIT_AddClass+0xa6>
  {
    /* Store the class parameters in the global tab */
    pdev->pClass[pdev->classId] = pclass;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	32ae      	adds	r2, #174	@ 0xae
 8008948:	68b9      	ldr	r1, [r7, #8]
 800894a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->tclasslist[pdev->classId].ClassId = pdev->classId;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008954:	68fa      	ldr	r2, [r7, #12]
 8008956:	f8d2 22e0 	ldr.w	r2, [r2, #736]	@ 0x2e0
 800895a:	68f9      	ldr	r1, [r7, #12]
 800895c:	202c      	movs	r0, #44	@ 0x2c
 800895e:	fb00 f303 	mul.w	r3, r0, r3
 8008962:	440b      	add	r3, r1
 8008964:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 8008968:	601a      	str	r2, [r3, #0]
    pdev->tclasslist[pdev->classId].Active = 1U;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008970:	68fa      	ldr	r2, [r7, #12]
 8008972:	212c      	movs	r1, #44	@ 0x2c
 8008974:	fb01 f303 	mul.w	r3, r1, r3
 8008978:	4413      	add	r3, r2
 800897a:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 800897e:	2201      	movs	r2, #1
 8008980:	601a      	str	r2, [r3, #0]
    pdev->tclasslist[pdev->classId].ClassType = class;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008988:	68fa      	ldr	r2, [r7, #12]
 800898a:	212c      	movs	r1, #44	@ 0x2c
 800898c:	fb01 f303 	mul.w	r3, r1, r3
 8008990:	4413      	add	r3, r2
 8008992:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 8008996:	79fa      	ldrb	r2, [r7, #7]
 8008998:	701a      	strb	r2, [r3, #0]

    /* Call configuration descriptor builder and endpoint configuration builder */
    if (USBD_CMPSIT_AddToConfDesc(pdev) != (uint8_t)USBD_OK)
 800899a:	68f8      	ldr	r0, [r7, #12]
 800899c:	f000 f80a 	bl	80089b4 <USBD_CMPSIT_AddToConfDesc>
 80089a0:	4603      	mov	r3, r0
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d001      	beq.n	80089aa <USBD_CMPSIT_AddClass+0xa6>
    {
      return (uint8_t)USBD_FAIL;
 80089a6:	2303      	movs	r3, #3
 80089a8:	e000      	b.n	80089ac <USBD_CMPSIT_AddClass+0xa8>
    }
  }

  UNUSED(cfgidx);

  return (uint8_t)USBD_OK;
 80089aa:	2300      	movs	r3, #0
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3710      	adds	r7, #16
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}

080089b4 <USBD_CMPSIT_AddToConfDesc>:
  *         Add a new class to the configuration descriptor
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CMPSIT_AddToConfDesc(USBD_HandleTypeDef *pdev)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b084      	sub	sp, #16
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  uint8_t idxIf = 0U;
 80089bc:	2300      	movs	r3, #0
 80089be:	73fb      	strb	r3, [r7, #15]
  uint8_t iEp = 0U;
 80089c0:	2300      	movs	r3, #0
 80089c2:	73bb      	strb	r3, [r7, #14]

  /* For the first class instance, start building the config descriptor common part */
  if (pdev->classId == 0U)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d105      	bne.n	80089da <USBD_CMPSIT_AddToConfDesc+0x26>
  {
    /* Add configuration and IAD descriptors */
    USBD_CMPSIT_AddConfDesc((uint32_t)pCmpstFSConfDesc, &CurrFSConfDescSz);
 80089ce:	4b88      	ldr	r3, [pc, #544]	@ (8008bf0 <USBD_CMPSIT_AddToConfDesc+0x23c>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4988      	ldr	r1, [pc, #544]	@ (8008bf4 <USBD_CMPSIT_AddToConfDesc+0x240>)
 80089d4:	4618      	mov	r0, r3
 80089d6:	f000 f976 	bl	8008cc6 <USBD_CMPSIT_AddConfDesc>
#ifdef USE_USB_HS
    USBD_CMPSIT_AddConfDesc((uint32_t)pCmpstHSConfDesc, &CurrHSConfDescSz);
#endif /* USE_USB_HS */
  }

  switch (pdev->tclasslist[pdev->classId].ClassType)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80089e0:	687a      	ldr	r2, [r7, #4]
 80089e2:	212c      	movs	r1, #44	@ 0x2c
 80089e4:	fb01 f303 	mul.w	r3, r1, r3
 80089e8:	4413      	add	r3, r2
 80089ea:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 80089ee:	781b      	ldrb	r3, [r3, #0]
 80089f0:	2b01      	cmp	r3, #1
 80089f2:	d002      	beq.n	80089fa <USBD_CMPSIT_AddToConfDesc+0x46>
 80089f4:	2b02      	cmp	r3, #2
 80089f6:	d05b      	beq.n	8008ab0 <USBD_CMPSIT_AddToConfDesc+0xfc>
    default:
      UNUSED(idxIf);
      UNUSED(iEp);
      UNUSED(USBD_CMPSIT_FindFreeIFNbr);
      UNUSED(USBD_CMPSIT_AssignEp);
      break;
 80089f8:	e0f4      	b.n	8008be4 <USBD_CMPSIT_AddToConfDesc+0x230>
      pdev->tclasslist[pdev->classId].CurrPcktSze = HID_EPIN_SIZE;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008a00:	687a      	ldr	r2, [r7, #4]
 8008a02:	212c      	movs	r1, #44	@ 0x2c
 8008a04:	fb01 f303 	mul.w	r3, r1, r3
 8008a08:	4413      	add	r3, r2
 8008a0a:	f503 7344 	add.w	r3, r3, #784	@ 0x310
 8008a0e:	2204      	movs	r2, #4
 8008a10:	601a      	str	r2, [r3, #0]
      idxIf = USBD_CMPSIT_FindFreeIFNbr(pdev);
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f000 f928 	bl	8008c68 <USBD_CMPSIT_FindFreeIFNbr>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	73fb      	strb	r3, [r7, #15]
      pdev->tclasslist[pdev->classId].NumIf = 1U;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008a22:	687a      	ldr	r2, [r7, #4]
 8008a24:	212c      	movs	r1, #44	@ 0x2c
 8008a26:	fb01 f303 	mul.w	r3, r1, r3
 8008a2a:	4413      	add	r3, r2
 8008a2c:	f503 7342 	add.w	r3, r3, #776	@ 0x308
 8008a30:	2201      	movs	r2, #1
 8008a32:	601a      	str	r2, [r3, #0]
      pdev->tclasslist[pdev->classId].Ifs[0] = idxIf;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008a3a:	687a      	ldr	r2, [r7, #4]
 8008a3c:	212c      	movs	r1, #44	@ 0x2c
 8008a3e:	fb01 f303 	mul.w	r3, r1, r3
 8008a42:	4413      	add	r3, r2
 8008a44:	f503 7343 	add.w	r3, r3, #780	@ 0x30c
 8008a48:	7bfa      	ldrb	r2, [r7, #15]
 8008a4a:	701a      	strb	r2, [r3, #0]
      pdev->tclasslist[pdev->classId].NumEps = 1U; /* EP1_IN */
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008a52:	687a      	ldr	r2, [r7, #4]
 8008a54:	212c      	movs	r1, #44	@ 0x2c
 8008a56:	fb01 f303 	mul.w	r3, r1, r3
 8008a5a:	4413      	add	r3, r2
 8008a5c:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 8008a60:	2201      	movs	r2, #1
 8008a62:	601a      	str	r2, [r3, #0]
      iEp = pdev->tclasslist[pdev->classId].EpAdd[0];
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008a6a:	687a      	ldr	r2, [r7, #4]
 8008a6c:	212c      	movs	r1, #44	@ 0x2c
 8008a6e:	fb01 f303 	mul.w	r3, r1, r3
 8008a72:	4413      	add	r3, r2
 8008a74:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	781b      	ldrb	r3, [r3, #0]
 8008a7c:	73bb      	strb	r3, [r7, #14]
      USBD_CMPSIT_AssignEp(pdev, iEp, USBD_EP_TYPE_INTR, pdev->tclasslist[pdev->classId].CurrPcktSze);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008a84:	687a      	ldr	r2, [r7, #4]
 8008a86:	212c      	movs	r1, #44	@ 0x2c
 8008a88:	fb01 f303 	mul.w	r3, r1, r3
 8008a8c:	4413      	add	r3, r2
 8008a8e:	f503 7344 	add.w	r3, r3, #784	@ 0x310
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	7bb9      	ldrb	r1, [r7, #14]
 8008a96:	2203      	movs	r2, #3
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f000 f941 	bl	8008d20 <USBD_CMPSIT_AssignEp>
      USBD_CMPSIT_HIDMouseDesc(pdev, (uint32_t)pCmpstFSConfDesc, &CurrFSConfDescSz, (uint8_t)USBD_SPEED_FULL);
 8008a9e:	4b54      	ldr	r3, [pc, #336]	@ (8008bf0 <USBD_CMPSIT_AddToConfDesc+0x23c>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	4619      	mov	r1, r3
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	4a53      	ldr	r2, [pc, #332]	@ (8008bf4 <USBD_CMPSIT_AddToConfDesc+0x240>)
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f000 f9af 	bl	8008e0c <USBD_CMPSIT_HIDMouseDesc>
      break;
 8008aae:	e099      	b.n	8008be4 <USBD_CMPSIT_AddToConfDesc+0x230>
      pdev->tclasslist[pdev->classId].CurrPcktSze = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008ab6:	687a      	ldr	r2, [r7, #4]
 8008ab8:	212c      	movs	r1, #44	@ 0x2c
 8008aba:	fb01 f303 	mul.w	r3, r1, r3
 8008abe:	4413      	add	r3, r2
 8008ac0:	f503 7344 	add.w	r3, r3, #784	@ 0x310
 8008ac4:	2240      	movs	r2, #64	@ 0x40
 8008ac6:	601a      	str	r2, [r3, #0]
      idxIf = USBD_CMPSIT_FindFreeIFNbr(pdev);
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f000 f8cd 	bl	8008c68 <USBD_CMPSIT_FindFreeIFNbr>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	73fb      	strb	r3, [r7, #15]
      pdev->tclasslist[pdev->classId].NumIf = 2U;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008ad8:	687a      	ldr	r2, [r7, #4]
 8008ada:	212c      	movs	r1, #44	@ 0x2c
 8008adc:	fb01 f303 	mul.w	r3, r1, r3
 8008ae0:	4413      	add	r3, r2
 8008ae2:	f503 7342 	add.w	r3, r3, #776	@ 0x308
 8008ae6:	2202      	movs	r2, #2
 8008ae8:	601a      	str	r2, [r3, #0]
      pdev->tclasslist[pdev->classId].Ifs[0] = idxIf;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008af0:	687a      	ldr	r2, [r7, #4]
 8008af2:	212c      	movs	r1, #44	@ 0x2c
 8008af4:	fb01 f303 	mul.w	r3, r1, r3
 8008af8:	4413      	add	r3, r2
 8008afa:	f503 7343 	add.w	r3, r3, #780	@ 0x30c
 8008afe:	7bfa      	ldrb	r2, [r7, #15]
 8008b00:	701a      	strb	r2, [r3, #0]
      pdev->tclasslist[pdev->classId].Ifs[1] = (uint8_t)(idxIf + 1U);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008b08:	7bfa      	ldrb	r2, [r7, #15]
 8008b0a:	3201      	adds	r2, #1
 8008b0c:	b2d0      	uxtb	r0, r2
 8008b0e:	687a      	ldr	r2, [r7, #4]
 8008b10:	212c      	movs	r1, #44	@ 0x2c
 8008b12:	fb01 f303 	mul.w	r3, r1, r3
 8008b16:	4413      	add	r3, r2
 8008b18:	f203 330d 	addw	r3, r3, #781	@ 0x30d
 8008b1c:	4602      	mov	r2, r0
 8008b1e:	701a      	strb	r2, [r3, #0]
      pdev->tclasslist[pdev->classId].NumEps = 3U;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008b26:	687a      	ldr	r2, [r7, #4]
 8008b28:	212c      	movs	r1, #44	@ 0x2c
 8008b2a:	fb01 f303 	mul.w	r3, r1, r3
 8008b2e:	4413      	add	r3, r2
 8008b30:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 8008b34:	2203      	movs	r2, #3
 8008b36:	601a      	str	r2, [r3, #0]
      iEp = pdev->tclasslist[pdev->classId].EpAdd[0];
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008b3e:	687a      	ldr	r2, [r7, #4]
 8008b40:	212c      	movs	r1, #44	@ 0x2c
 8008b42:	fb01 f303 	mul.w	r3, r1, r3
 8008b46:	4413      	add	r3, r2
 8008b48:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	781b      	ldrb	r3, [r3, #0]
 8008b50:	73bb      	strb	r3, [r7, #14]
      USBD_CMPSIT_AssignEp(pdev, iEp, USBD_EP_TYPE_BULK, pdev->tclasslist[pdev->classId].CurrPcktSze);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008b58:	687a      	ldr	r2, [r7, #4]
 8008b5a:	212c      	movs	r1, #44	@ 0x2c
 8008b5c:	fb01 f303 	mul.w	r3, r1, r3
 8008b60:	4413      	add	r3, r2
 8008b62:	f503 7344 	add.w	r3, r3, #784	@ 0x310
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	7bb9      	ldrb	r1, [r7, #14]
 8008b6a:	2202      	movs	r2, #2
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f000 f8d7 	bl	8008d20 <USBD_CMPSIT_AssignEp>
      iEp = pdev->tclasslist[pdev->classId].EpAdd[1];
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008b78:	687a      	ldr	r2, [r7, #4]
 8008b7a:	212c      	movs	r1, #44	@ 0x2c
 8008b7c:	fb01 f303 	mul.w	r3, r1, r3
 8008b80:	4413      	add	r3, r2
 8008b82:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	785b      	ldrb	r3, [r3, #1]
 8008b8a:	73bb      	strb	r3, [r7, #14]
      USBD_CMPSIT_AssignEp(pdev, iEp, USBD_EP_TYPE_BULK, pdev->tclasslist[pdev->classId].CurrPcktSze);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008b92:	687a      	ldr	r2, [r7, #4]
 8008b94:	212c      	movs	r1, #44	@ 0x2c
 8008b96:	fb01 f303 	mul.w	r3, r1, r3
 8008b9a:	4413      	add	r3, r2
 8008b9c:	f503 7344 	add.w	r3, r3, #784	@ 0x310
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	7bb9      	ldrb	r1, [r7, #14]
 8008ba4:	2202      	movs	r2, #2
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f000 f8ba 	bl	8008d20 <USBD_CMPSIT_AssignEp>
      iEp = pdev->tclasslist[pdev->classId].EpAdd[2];
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008bb2:	687a      	ldr	r2, [r7, #4]
 8008bb4:	212c      	movs	r1, #44	@ 0x2c
 8008bb6:	fb01 f303 	mul.w	r3, r1, r3
 8008bba:	4413      	add	r3, r2
 8008bbc:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	789b      	ldrb	r3, [r3, #2]
 8008bc4:	73bb      	strb	r3, [r7, #14]
      USBD_CMPSIT_AssignEp(pdev, iEp, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008bc6:	7bb9      	ldrb	r1, [r7, #14]
 8008bc8:	2308      	movs	r3, #8
 8008bca:	2203      	movs	r2, #3
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f000 f8a7 	bl	8008d20 <USBD_CMPSIT_AssignEp>
      USBD_CMPSIT_CDCDesc(pdev, (uint32_t)pCmpstFSConfDesc, &CurrFSConfDescSz, (uint8_t)USBD_SPEED_FULL);
 8008bd2:	4b07      	ldr	r3, [pc, #28]	@ (8008bf0 <USBD_CMPSIT_AddToConfDesc+0x23c>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	4619      	mov	r1, r3
 8008bd8:	2301      	movs	r3, #1
 8008bda:	4a06      	ldr	r2, [pc, #24]	@ (8008bf4 <USBD_CMPSIT_AddToConfDesc+0x240>)
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f000 f9e7 	bl	8008fb0 <USBD_CMPSIT_CDCDesc>
      break;
 8008be2:	bf00      	nop
  }

  return (uint8_t)USBD_OK;
 8008be4:	2300      	movs	r3, #0
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3710      	adds	r7, #16
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}
 8008bee:	bf00      	nop
 8008bf0:	200000a0 	.word	0x200000a0
 8008bf4:	20000a60 	.word	0x20000a60

08008bf8 <USBD_CMPSIT_GetFSCfgDesc>:
  *         return configuration descriptor for both FS and HS modes
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t  *USBD_CMPSIT_GetFSCfgDesc(uint16_t *length)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b083      	sub	sp, #12
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)CurrFSConfDescSz;
 8008c00:	4b05      	ldr	r3, [pc, #20]	@ (8008c18 <USBD_CMPSIT_GetFSCfgDesc+0x20>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	b29a      	uxth	r2, r3
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	801a      	strh	r2, [r3, #0]

  return USBD_CMPSIT_FSCfgDesc;
 8008c0a:	4b04      	ldr	r3, [pc, #16]	@ (8008c1c <USBD_CMPSIT_GetFSCfgDesc+0x24>)
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	370c      	adds	r7, #12
 8008c10:	46bd      	mov	sp, r7
 8008c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c16:	4770      	bx	lr
 8008c18:	20000a60 	.word	0x20000a60
 8008c1c:	20000934 	.word	0x20000934

08008c20 <USBD_CMPSIT_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t  *USBD_CMPSIT_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b083      	sub	sp, #12
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)CurrFSConfDescSz;
 8008c28:	4b05      	ldr	r3, [pc, #20]	@ (8008c40 <USBD_CMPSIT_GetOtherSpeedCfgDesc+0x20>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	b29a      	uxth	r2, r3
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	801a      	strh	r2, [r3, #0]

  return USBD_CMPSIT_FSCfgDesc;
 8008c32:	4b04      	ldr	r3, [pc, #16]	@ (8008c44 <USBD_CMPSIT_GetOtherSpeedCfgDesc+0x24>)
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	370c      	adds	r7, #12
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3e:	4770      	bx	lr
 8008c40:	20000a60 	.word	0x20000a60
 8008c44:	20000934 	.word	0x20000934

08008c48 <USBD_CMPSIT_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t  *USBD_CMPSIT_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b083      	sub	sp, #12
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)(sizeof(USBD_CMPSIT_DeviceQualifierDesc));
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	220a      	movs	r2, #10
 8008c54:	801a      	strh	r2, [r3, #0]
  return USBD_CMPSIT_DeviceQualifierDesc;
 8008c56:	4b03      	ldr	r3, [pc, #12]	@ (8008c64 <USBD_CMPSIT_GetDeviceQualifierDescriptor+0x1c>)
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	370c      	adds	r7, #12
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c62:	4770      	bx	lr
 8008c64:	200000a4 	.word	0x200000a4

08008c68 <USBD_CMPSIT_FindFreeIFNbr>:
  *         Find the first interface available slot
  * @param  pdev: device instance
  * @retval The interface number to be used
  */
static uint8_t USBD_CMPSIT_FindFreeIFNbr(USBD_HandleTypeDef *pdev)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b087      	sub	sp, #28
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
  uint32_t idx = 0U;
 8008c70:	2300      	movs	r3, #0
 8008c72:	617b      	str	r3, [r7, #20]

  /* Unroll all already activated classes */
  for (uint32_t i = 0U; i < pdev->NumClasses; i++)
 8008c74:	2300      	movs	r3, #0
 8008c76:	613b      	str	r3, [r7, #16]
 8008c78:	e017      	b.n	8008caa <USBD_CMPSIT_FindFreeIFNbr+0x42>
  {
    /* Unroll each class interfaces */
    for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	60fb      	str	r3, [r7, #12]
 8008c7e:	e005      	b.n	8008c8c <USBD_CMPSIT_FindFreeIFNbr+0x24>
    {
      /* Increment the interface counter index */
      idx++;
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	3301      	adds	r3, #1
 8008c84:	617b      	str	r3, [r7, #20]
    for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	3301      	adds	r3, #1
 8008c8a:	60fb      	str	r3, [r7, #12]
 8008c8c:	687a      	ldr	r2, [r7, #4]
 8008c8e:	693b      	ldr	r3, [r7, #16]
 8008c90:	212c      	movs	r1, #44	@ 0x2c
 8008c92:	fb01 f303 	mul.w	r3, r1, r3
 8008c96:	4413      	add	r3, r2
 8008c98:	f503 7342 	add.w	r3, r3, #776	@ 0x308
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	68fa      	ldr	r2, [r7, #12]
 8008ca0:	429a      	cmp	r2, r3
 8008ca2:	d3ed      	bcc.n	8008c80 <USBD_CMPSIT_FindFreeIFNbr+0x18>
  for (uint32_t i = 0U; i < pdev->NumClasses; i++)
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	3301      	adds	r3, #1
 8008ca8:	613b      	str	r3, [r7, #16]
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f8d3 32e4 	ldr.w	r3, [r3, #740]	@ 0x2e4
 8008cb0:	693a      	ldr	r2, [r7, #16]
 8008cb2:	429a      	cmp	r2, r3
 8008cb4:	d3e1      	bcc.n	8008c7a <USBD_CMPSIT_FindFreeIFNbr+0x12>
    }
  }

  /* Return the first available interface slot */
  return (uint8_t)idx;
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	b2db      	uxtb	r3, r3
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	371c      	adds	r7, #28
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc4:	4770      	bx	lr

08008cc6 <USBD_CMPSIT_AddConfDesc>:
  *         Add a new class to the configuration descriptor
  * @param  pdev: device instance
  * @retval none
  */
static void  USBD_CMPSIT_AddConfDesc(uint32_t Conf, __IO uint32_t *pSze)
{
 8008cc6:	b480      	push	{r7}
 8008cc8:	b085      	sub	sp, #20
 8008cca:	af00      	add	r7, sp, #0
 8008ccc:	6078      	str	r0, [r7, #4]
 8008cce:	6039      	str	r1, [r7, #0]
  /* Intermediate variable to comply with MISRA-C Rule 11.3 */
  USBD_ConfigDescTypeDef *ptr = (USBD_ConfigDescTypeDef *)Conf;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	60fb      	str	r3, [r7, #12]

  ptr->bLength = (uint8_t)sizeof(USBD_ConfigDescTypeDef);
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	2209      	movs	r2, #9
 8008cd8:	701a      	strb	r2, [r3, #0]
  ptr->bDescriptorType = USB_DESC_TYPE_CONFIGURATION;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	2202      	movs	r2, #2
 8008cde:	705a      	strb	r2, [r3, #1]
  ptr->wTotalLength = 0U;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	709a      	strb	r2, [r3, #2]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	70da      	strb	r2, [r3, #3]
  ptr->bNumInterfaces = 0U;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	2200      	movs	r2, #0
 8008cee:	711a      	strb	r2, [r3, #4]
  ptr->bConfigurationValue = 1U;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	715a      	strb	r2, [r3, #5]
  ptr->iConfiguration = USBD_CONFIG_STR_DESC_IDX;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	2204      	movs	r2, #4
 8008cfa:	719a      	strb	r2, [r3, #6]

#if (USBD_SELF_POWERED == 1U)
  ptr->bmAttributes = 0xC0U;   /* bmAttributes: Self Powered according to user configuration */
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	22c0      	movs	r2, #192	@ 0xc0
 8008d00:	71da      	strb	r2, [r3, #7]
#else
  ptr->bmAttributes = 0x80U;   /* bmAttributes: Bus Powered according to user configuration */
#endif /* USBD_SELF_POWERED */

  ptr->bMaxPower = USBD_MAX_POWER;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	2232      	movs	r2, #50	@ 0x32
 8008d06:	721a      	strb	r2, [r3, #8]

  *pSze += sizeof(USBD_ConfigDescTypeDef);
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f103 0209 	add.w	r2, r3, #9
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	601a      	str	r2, [r3, #0]
}
 8008d14:	bf00      	nop
 8008d16:	3714      	adds	r7, #20
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr

08008d20 <USBD_CMPSIT_AssignEp>:
  * @param  Type: Endpoint type
  * @param  Sze: Endpoint max packet size
  * @retval none
  */
static void  USBD_CMPSIT_AssignEp(USBD_HandleTypeDef *pdev, uint8_t Add, uint8_t Type, uint32_t Sze)
{
 8008d20:	b480      	push	{r7}
 8008d22:	b087      	sub	sp, #28
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	60f8      	str	r0, [r7, #12]
 8008d28:	607b      	str	r3, [r7, #4]
 8008d2a:	460b      	mov	r3, r1
 8008d2c:	72fb      	strb	r3, [r7, #11]
 8008d2e:	4613      	mov	r3, r2
 8008d30:	72bb      	strb	r3, [r7, #10]
  uint32_t idx = 0U;
 8008d32:	2300      	movs	r3, #0
 8008d34:	617b      	str	r3, [r7, #20]

  /* Find the first available endpoint slot */
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 8008d36:	e002      	b.n	8008d3e <USBD_CMPSIT_AssignEp+0x1e>
          ((pdev->tclasslist[pdev->classId].Eps[idx].is_used) != 0U)))
  {
    /* Increment the index */
    idx++;
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	3301      	adds	r3, #1
 8008d3c:	617b      	str	r3, [r7, #20]
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008d44:	68fa      	ldr	r2, [r7, #12]
 8008d46:	212c      	movs	r1, #44	@ 0x2c
 8008d48:	fb01 f303 	mul.w	r3, r1, r3
 8008d4c:	4413      	add	r3, r2
 8008d4e:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	697a      	ldr	r2, [r7, #20]
 8008d56:	429a      	cmp	r2, r3
 8008d58:	d210      	bcs.n	8008d7c <USBD_CMPSIT_AssignEp+0x5c>
          ((pdev->tclasslist[pdev->classId].Eps[idx].is_used) != 0U)))
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 8008d60:	68f9      	ldr	r1, [r7, #12]
 8008d62:	4613      	mov	r3, r2
 8008d64:	009b      	lsls	r3, r3, #2
 8008d66:	4413      	add	r3, r2
 8008d68:	005b      	lsls	r3, r3, #1
 8008d6a:	4413      	add	r3, r2
 8008d6c:	697a      	ldr	r2, [r7, #20]
 8008d6e:	4413      	add	r3, r2
 8008d70:	33be      	adds	r3, #190	@ 0xbe
 8008d72:	009b      	lsls	r3, r3, #2
 8008d74:	440b      	add	r3, r1
 8008d76:	78db      	ldrb	r3, [r3, #3]
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d1dd      	bne.n	8008d38 <USBD_CMPSIT_AssignEp+0x18>
  }

  /* Configure the endpoint */
  pdev->tclasslist[pdev->classId].Eps[idx].add = Add;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 8008d82:	68f9      	ldr	r1, [r7, #12]
 8008d84:	4613      	mov	r3, r2
 8008d86:	009b      	lsls	r3, r3, #2
 8008d88:	4413      	add	r3, r2
 8008d8a:	005b      	lsls	r3, r3, #1
 8008d8c:	4413      	add	r3, r2
 8008d8e:	697a      	ldr	r2, [r7, #20]
 8008d90:	4413      	add	r3, r2
 8008d92:	33be      	adds	r3, #190	@ 0xbe
 8008d94:	7afa      	ldrb	r2, [r7, #11]
 8008d96:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
  pdev->tclasslist[pdev->classId].Eps[idx].type = Type;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 8008da0:	68f9      	ldr	r1, [r7, #12]
 8008da2:	4613      	mov	r3, r2
 8008da4:	009b      	lsls	r3, r3, #2
 8008da6:	4413      	add	r3, r2
 8008da8:	005b      	lsls	r3, r3, #1
 8008daa:	4413      	add	r3, r2
 8008dac:	697a      	ldr	r2, [r7, #20]
 8008dae:	4413      	add	r3, r2
 8008db0:	33be      	adds	r3, #190	@ 0xbe
 8008db2:	009b      	lsls	r3, r3, #2
 8008db4:	440b      	add	r3, r1
 8008db6:	7aba      	ldrb	r2, [r7, #10]
 8008db8:	705a      	strb	r2, [r3, #1]
  pdev->tclasslist[pdev->classId].Eps[idx].size = (uint8_t)Sze;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	b2d8      	uxtb	r0, r3
 8008dc4:	68f9      	ldr	r1, [r7, #12]
 8008dc6:	4613      	mov	r3, r2
 8008dc8:	009b      	lsls	r3, r3, #2
 8008dca:	4413      	add	r3, r2
 8008dcc:	005b      	lsls	r3, r3, #1
 8008dce:	4413      	add	r3, r2
 8008dd0:	697a      	ldr	r2, [r7, #20]
 8008dd2:	4413      	add	r3, r2
 8008dd4:	33be      	adds	r3, #190	@ 0xbe
 8008dd6:	009b      	lsls	r3, r3, #2
 8008dd8:	440b      	add	r3, r1
 8008dda:	4602      	mov	r2, r0
 8008ddc:	709a      	strb	r2, [r3, #2]
  pdev->tclasslist[pdev->classId].Eps[idx].is_used = 1U;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 8008de4:	68f9      	ldr	r1, [r7, #12]
 8008de6:	4613      	mov	r3, r2
 8008de8:	009b      	lsls	r3, r3, #2
 8008dea:	4413      	add	r3, r2
 8008dec:	005b      	lsls	r3, r3, #1
 8008dee:	4413      	add	r3, r2
 8008df0:	697a      	ldr	r2, [r7, #20]
 8008df2:	4413      	add	r3, r2
 8008df4:	33be      	adds	r3, #190	@ 0xbe
 8008df6:	009b      	lsls	r3, r3, #2
 8008df8:	440b      	add	r3, r1
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	70da      	strb	r2, [r3, #3]
}
 8008dfe:	bf00      	nop
 8008e00:	371c      	adds	r7, #28
 8008e02:	46bd      	mov	sp, r7
 8008e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e08:	4770      	bx	lr
	...

08008e0c <USBD_CMPSIT_HIDMouseDesc>:
  * @param  Sze: pointer to the current configuration descriptor size
  * @retval None
  */
static void  USBD_CMPSIT_HIDMouseDesc(USBD_HandleTypeDef *pdev, uint32_t pConf,
                                      __IO uint32_t *Sze, uint8_t speed)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b085      	sub	sp, #20
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	60f8      	str	r0, [r7, #12]
 8008e14:	60b9      	str	r1, [r7, #8]
 8008e16:	607a      	str	r2, [r7, #4]
 8008e18:	70fb      	strb	r3, [r7, #3]
  static USBD_IfDescTypeDef *pIfDesc;
  static USBD_EpDescTypeDef *pEpDesc;
  static USBD_HIDDescTypeDef *pHidMouseDesc;

  /* Append HID Interface descriptor to Configuration descriptor */
  __USBD_CMPSIT_SET_IF(pdev->tclasslist[pdev->classId].Ifs[0], 0U, \
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681a      	ldr	r2, [r3, #0]
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	4413      	add	r3, r2
 8008e22:	461a      	mov	r2, r3
 8008e24:	4b5f      	ldr	r3, [pc, #380]	@ (8008fa4 <USBD_CMPSIT_HIDMouseDesc+0x198>)
 8008e26:	601a      	str	r2, [r3, #0]
 8008e28:	4b5e      	ldr	r3, [pc, #376]	@ (8008fa4 <USBD_CMPSIT_HIDMouseDesc+0x198>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	2209      	movs	r2, #9
 8008e2e:	701a      	strb	r2, [r3, #0]
 8008e30:	4b5c      	ldr	r3, [pc, #368]	@ (8008fa4 <USBD_CMPSIT_HIDMouseDesc+0x198>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	2204      	movs	r2, #4
 8008e36:	705a      	strb	r2, [r3, #1]
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 8008e3e:	4b59      	ldr	r3, [pc, #356]	@ (8008fa4 <USBD_CMPSIT_HIDMouseDesc+0x198>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	68f9      	ldr	r1, [r7, #12]
 8008e44:	202c      	movs	r0, #44	@ 0x2c
 8008e46:	fb00 f202 	mul.w	r2, r0, r2
 8008e4a:	440a      	add	r2, r1
 8008e4c:	f502 7243 	add.w	r2, r2, #780	@ 0x30c
 8008e50:	7812      	ldrb	r2, [r2, #0]
 8008e52:	709a      	strb	r2, [r3, #2]
 8008e54:	4b53      	ldr	r3, [pc, #332]	@ (8008fa4 <USBD_CMPSIT_HIDMouseDesc+0x198>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	2200      	movs	r2, #0
 8008e5a:	70da      	strb	r2, [r3, #3]
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008e62:	68fa      	ldr	r2, [r7, #12]
 8008e64:	212c      	movs	r1, #44	@ 0x2c
 8008e66:	fb01 f303 	mul.w	r3, r1, r3
 8008e6a:	4413      	add	r3, r2
 8008e6c:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 8008e70:	681a      	ldr	r2, [r3, #0]
 8008e72:	4b4c      	ldr	r3, [pc, #304]	@ (8008fa4 <USBD_CMPSIT_HIDMouseDesc+0x198>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	b2d2      	uxtb	r2, r2
 8008e78:	711a      	strb	r2, [r3, #4]
 8008e7a:	4b4a      	ldr	r3, [pc, #296]	@ (8008fa4 <USBD_CMPSIT_HIDMouseDesc+0x198>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	2203      	movs	r2, #3
 8008e80:	715a      	strb	r2, [r3, #5]
 8008e82:	4b48      	ldr	r3, [pc, #288]	@ (8008fa4 <USBD_CMPSIT_HIDMouseDesc+0x198>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	2201      	movs	r2, #1
 8008e88:	719a      	strb	r2, [r3, #6]
 8008e8a:	4b46      	ldr	r3, [pc, #280]	@ (8008fa4 <USBD_CMPSIT_HIDMouseDesc+0x198>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	2202      	movs	r2, #2
 8008e90:	71da      	strb	r2, [r3, #7]
 8008e92:	4b44      	ldr	r3, [pc, #272]	@ (8008fa4 <USBD_CMPSIT_HIDMouseDesc+0x198>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	2200      	movs	r2, #0
 8008e98:	721a      	strb	r2, [r3, #8]
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f103 0209 	add.w	r2, r3, #9
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	601a      	str	r2, [r3, #0]
                       (uint8_t)(pdev->tclasslist[pdev->classId].NumEps), 0x03U, 0x01U, 0x02U, 0U);

  /* Append HID Functional descriptor to Configuration descriptor */
  pHidMouseDesc = ((USBD_HIDDescTypeDef *)(pConf + *Sze));
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681a      	ldr	r2, [r3, #0]
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	4413      	add	r3, r2
 8008eae:	461a      	mov	r2, r3
 8008eb0:	4b3d      	ldr	r3, [pc, #244]	@ (8008fa8 <USBD_CMPSIT_HIDMouseDesc+0x19c>)
 8008eb2:	601a      	str	r2, [r3, #0]
  pHidMouseDesc->bLength = (uint8_t)sizeof(USBD_HIDDescTypeDef);
 8008eb4:	4b3c      	ldr	r3, [pc, #240]	@ (8008fa8 <USBD_CMPSIT_HIDMouseDesc+0x19c>)
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	2209      	movs	r2, #9
 8008eba:	701a      	strb	r2, [r3, #0]
  pHidMouseDesc->bDescriptorType = HID_DESCRIPTOR_TYPE;
 8008ebc:	4b3a      	ldr	r3, [pc, #232]	@ (8008fa8 <USBD_CMPSIT_HIDMouseDesc+0x19c>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	2221      	movs	r2, #33	@ 0x21
 8008ec2:	705a      	strb	r2, [r3, #1]
  pHidMouseDesc->bcdHID = 0x0111U;
 8008ec4:	4b38      	ldr	r3, [pc, #224]	@ (8008fa8 <USBD_CMPSIT_HIDMouseDesc+0x19c>)
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	f042 0211 	orr.w	r2, r2, #17
 8008ece:	709a      	strb	r2, [r3, #2]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	f042 0201 	orr.w	r2, r2, #1
 8008ed6:	70da      	strb	r2, [r3, #3]
  pHidMouseDesc->bCountryCode = 0x00U;
 8008ed8:	4b33      	ldr	r3, [pc, #204]	@ (8008fa8 <USBD_CMPSIT_HIDMouseDesc+0x19c>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	2200      	movs	r2, #0
 8008ede:	711a      	strb	r2, [r3, #4]
  pHidMouseDesc->bNumDescriptors = 0x01U;
 8008ee0:	4b31      	ldr	r3, [pc, #196]	@ (8008fa8 <USBD_CMPSIT_HIDMouseDesc+0x19c>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	2201      	movs	r2, #1
 8008ee6:	715a      	strb	r2, [r3, #5]
  pHidMouseDesc->bHIDDescriptorType = 0x22U;
 8008ee8:	4b2f      	ldr	r3, [pc, #188]	@ (8008fa8 <USBD_CMPSIT_HIDMouseDesc+0x19c>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	2222      	movs	r2, #34	@ 0x22
 8008eee:	719a      	strb	r2, [r3, #6]
  pHidMouseDesc->wItemLength = HID_MOUSE_REPORT_DESC_SIZE;
 8008ef0:	4b2d      	ldr	r3, [pc, #180]	@ (8008fa8 <USBD_CMPSIT_HIDMouseDesc+0x19c>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	f042 024a 	orr.w	r2, r2, #74	@ 0x4a
 8008efa:	71da      	strb	r2, [r3, #7]
 8008efc:	2200      	movs	r2, #0
 8008efe:	721a      	strb	r2, [r3, #8]
  *Sze += (uint32_t)sizeof(USBD_HIDDescTypeDef);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f103 0209 	add.w	r2, r3, #9
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	601a      	str	r2, [r3, #0]

  /* Append Endpoint descriptor to Configuration descriptor */
  __USBD_CMPSIT_SET_EP(pdev->tclasslist[pdev->classId].Eps[0].add, USBD_EP_TYPE_INTR, HID_EPIN_SIZE, \
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681a      	ldr	r2, [r3, #0]
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	4413      	add	r3, r2
 8008f14:	461a      	mov	r2, r3
 8008f16:	4b25      	ldr	r3, [pc, #148]	@ (8008fac <USBD_CMPSIT_HIDMouseDesc+0x1a0>)
 8008f18:	601a      	str	r2, [r3, #0]
 8008f1a:	4b24      	ldr	r3, [pc, #144]	@ (8008fac <USBD_CMPSIT_HIDMouseDesc+0x1a0>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	2207      	movs	r2, #7
 8008f20:	701a      	strb	r2, [r3, #0]
 8008f22:	4b22      	ldr	r3, [pc, #136]	@ (8008fac <USBD_CMPSIT_HIDMouseDesc+0x1a0>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	2205      	movs	r2, #5
 8008f28:	705a      	strb	r2, [r3, #1]
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 8008f30:	4b1e      	ldr	r3, [pc, #120]	@ (8008fac <USBD_CMPSIT_HIDMouseDesc+0x1a0>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	68f9      	ldr	r1, [r7, #12]
 8008f36:	202c      	movs	r0, #44	@ 0x2c
 8008f38:	fb00 f202 	mul.w	r2, r0, r2
 8008f3c:	440a      	add	r2, r1
 8008f3e:	f502 723e 	add.w	r2, r2, #760	@ 0x2f8
 8008f42:	7812      	ldrb	r2, [r2, #0]
 8008f44:	709a      	strb	r2, [r3, #2]
 8008f46:	4b19      	ldr	r3, [pc, #100]	@ (8008fac <USBD_CMPSIT_HIDMouseDesc+0x1a0>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	2203      	movs	r2, #3
 8008f4c:	70da      	strb	r2, [r3, #3]
 8008f4e:	4b17      	ldr	r3, [pc, #92]	@ (8008fac <USBD_CMPSIT_HIDMouseDesc+0x1a0>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	2200      	movs	r2, #0
 8008f54:	f042 0204 	orr.w	r2, r2, #4
 8008f58:	711a      	strb	r2, [r3, #4]
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	715a      	strb	r2, [r3, #5]
 8008f5e:	78fb      	ldrb	r3, [r7, #3]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d104      	bne.n	8008f6e <USBD_CMPSIT_HIDMouseDesc+0x162>
 8008f64:	4b11      	ldr	r3, [pc, #68]	@ (8008fac <USBD_CMPSIT_HIDMouseDesc+0x1a0>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	2207      	movs	r2, #7
 8008f6a:	719a      	strb	r2, [r3, #6]
 8008f6c:	e003      	b.n	8008f76 <USBD_CMPSIT_HIDMouseDesc+0x16a>
 8008f6e:	4b0f      	ldr	r3, [pc, #60]	@ (8008fac <USBD_CMPSIT_HIDMouseDesc+0x1a0>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	220a      	movs	r2, #10
 8008f74:	719a      	strb	r2, [r3, #6]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	1dda      	adds	r2, r3, #7
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	601a      	str	r2, [r3, #0]
                       HID_HS_BINTERVAL, HID_FS_BINTERVAL);

  /* Update Config Descriptor and IAD descriptor */
  ((USBD_ConfigDescTypeDef *)pConf)->bNumInterfaces += 1U;
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	791a      	ldrb	r2, [r3, #4]
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	3201      	adds	r2, #1
 8008f88:	b2d2      	uxtb	r2, r2
 8008f8a:	711a      	strb	r2, [r3, #4]
  ((USBD_ConfigDescTypeDef *)pConf)->wTotalLength  = (uint16_t)(*Sze);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681a      	ldr	r2, [r3, #0]
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	b292      	uxth	r2, r2
 8008f94:	805a      	strh	r2, [r3, #2]
}
 8008f96:	bf00      	nop
 8008f98:	3714      	adds	r7, #20
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa0:	4770      	bx	lr
 8008fa2:	bf00      	nop
 8008fa4:	20000a64 	.word	0x20000a64
 8008fa8:	20000a68 	.word	0x20000a68
 8008fac:	20000a6c 	.word	0x20000a6c

08008fb0 <USBD_CMPSIT_CDCDesc>:
  * @param  pConf: Configuration descriptor pointer
  * @param  Sze: pointer to the current configuration descriptor size
  * @retval None
  */
static void  USBD_CMPSIT_CDCDesc(USBD_HandleTypeDef *pdev, uint32_t pConf, __IO uint32_t *Sze, uint8_t speed)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b085      	sub	sp, #20
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	60f8      	str	r0, [r7, #12]
 8008fb8:	60b9      	str	r1, [r7, #8]
 8008fba:	607a      	str	r2, [r7, #4]
 8008fbc:	70fb      	strb	r3, [r7, #3]
#if USBD_COMPOSITE_USE_IAD == 1
  static USBD_IadDescTypeDef              *pIadDesc;
#endif /* USBD_COMPOSITE_USE_IAD == 1 */

#if USBD_COMPOSITE_USE_IAD == 1
  pIadDesc                          = ((USBD_IadDescTypeDef *)(pConf + *Sze));
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681a      	ldr	r2, [r3, #0]
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	4413      	add	r3, r2
 8008fc6:	461a      	mov	r2, r3
 8008fc8:	4b9c      	ldr	r3, [pc, #624]	@ (800923c <USBD_CMPSIT_CDCDesc+0x28c>)
 8008fca:	601a      	str	r2, [r3, #0]
  pIadDesc->bLength                 = (uint8_t)sizeof(USBD_IadDescTypeDef);
 8008fcc:	4b9b      	ldr	r3, [pc, #620]	@ (800923c <USBD_CMPSIT_CDCDesc+0x28c>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	2208      	movs	r2, #8
 8008fd2:	701a      	strb	r2, [r3, #0]
  pIadDesc->bDescriptorType         = USB_DESC_TYPE_IAD; /* IAD descriptor */
 8008fd4:	4b99      	ldr	r3, [pc, #612]	@ (800923c <USBD_CMPSIT_CDCDesc+0x28c>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	220b      	movs	r2, #11
 8008fda:	705a      	strb	r2, [r3, #1]
  pIadDesc->bFirstInterface         = pdev->tclasslist[pdev->classId].Ifs[0];
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 8008fe2:	4b96      	ldr	r3, [pc, #600]	@ (800923c <USBD_CMPSIT_CDCDesc+0x28c>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	68f9      	ldr	r1, [r7, #12]
 8008fe8:	202c      	movs	r0, #44	@ 0x2c
 8008fea:	fb00 f202 	mul.w	r2, r0, r2
 8008fee:	440a      	add	r2, r1
 8008ff0:	f502 7243 	add.w	r2, r2, #780	@ 0x30c
 8008ff4:	7812      	ldrb	r2, [r2, #0]
 8008ff6:	709a      	strb	r2, [r3, #2]
  pIadDesc->bInterfaceCount         = 2U;    /* 2 interfaces */
 8008ff8:	4b90      	ldr	r3, [pc, #576]	@ (800923c <USBD_CMPSIT_CDCDesc+0x28c>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	2202      	movs	r2, #2
 8008ffe:	70da      	strb	r2, [r3, #3]
  pIadDesc->bFunctionClass          = 0x02U;
 8009000:	4b8e      	ldr	r3, [pc, #568]	@ (800923c <USBD_CMPSIT_CDCDesc+0x28c>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	2202      	movs	r2, #2
 8009006:	711a      	strb	r2, [r3, #4]
  pIadDesc->bFunctionSubClass       = 0x02U;
 8009008:	4b8c      	ldr	r3, [pc, #560]	@ (800923c <USBD_CMPSIT_CDCDesc+0x28c>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	2202      	movs	r2, #2
 800900e:	715a      	strb	r2, [r3, #5]
  pIadDesc->bFunctionProtocol       = 0x01U;
 8009010:	4b8a      	ldr	r3, [pc, #552]	@ (800923c <USBD_CMPSIT_CDCDesc+0x28c>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	2201      	movs	r2, #1
 8009016:	719a      	strb	r2, [r3, #6]
  pIadDesc->iFunction               = 0U; /* String Index */
 8009018:	4b88      	ldr	r3, [pc, #544]	@ (800923c <USBD_CMPSIT_CDCDesc+0x28c>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	2200      	movs	r2, #0
 800901e:	71da      	strb	r2, [r3, #7]
  *Sze                              += (uint32_t)sizeof(USBD_IadDescTypeDef);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f103 0208 	add.w	r2, r3, #8
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	601a      	str	r2, [r3, #0]
#endif /* USBD_COMPOSITE_USE_IAD == 1 */

  /* Control Interface Descriptor */
  __USBD_CMPSIT_SET_IF(pdev->tclasslist[pdev->classId].Ifs[0], 0U, 1U, 0x02, 0x02U, 0x01U, 0U);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681a      	ldr	r2, [r3, #0]
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	4413      	add	r3, r2
 8009034:	461a      	mov	r2, r3
 8009036:	4b82      	ldr	r3, [pc, #520]	@ (8009240 <USBD_CMPSIT_CDCDesc+0x290>)
 8009038:	601a      	str	r2, [r3, #0]
 800903a:	4b81      	ldr	r3, [pc, #516]	@ (8009240 <USBD_CMPSIT_CDCDesc+0x290>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	2209      	movs	r2, #9
 8009040:	701a      	strb	r2, [r3, #0]
 8009042:	4b7f      	ldr	r3, [pc, #508]	@ (8009240 <USBD_CMPSIT_CDCDesc+0x290>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	2204      	movs	r2, #4
 8009048:	705a      	strb	r2, [r3, #1]
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 8009050:	4b7b      	ldr	r3, [pc, #492]	@ (8009240 <USBD_CMPSIT_CDCDesc+0x290>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	68f9      	ldr	r1, [r7, #12]
 8009056:	202c      	movs	r0, #44	@ 0x2c
 8009058:	fb00 f202 	mul.w	r2, r0, r2
 800905c:	440a      	add	r2, r1
 800905e:	f502 7243 	add.w	r2, r2, #780	@ 0x30c
 8009062:	7812      	ldrb	r2, [r2, #0]
 8009064:	709a      	strb	r2, [r3, #2]
 8009066:	4b76      	ldr	r3, [pc, #472]	@ (8009240 <USBD_CMPSIT_CDCDesc+0x290>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	2200      	movs	r2, #0
 800906c:	70da      	strb	r2, [r3, #3]
 800906e:	4b74      	ldr	r3, [pc, #464]	@ (8009240 <USBD_CMPSIT_CDCDesc+0x290>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	2201      	movs	r2, #1
 8009074:	711a      	strb	r2, [r3, #4]
 8009076:	4b72      	ldr	r3, [pc, #456]	@ (8009240 <USBD_CMPSIT_CDCDesc+0x290>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	2202      	movs	r2, #2
 800907c:	715a      	strb	r2, [r3, #5]
 800907e:	4b70      	ldr	r3, [pc, #448]	@ (8009240 <USBD_CMPSIT_CDCDesc+0x290>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	2202      	movs	r2, #2
 8009084:	719a      	strb	r2, [r3, #6]
 8009086:	4b6e      	ldr	r3, [pc, #440]	@ (8009240 <USBD_CMPSIT_CDCDesc+0x290>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	2201      	movs	r2, #1
 800908c:	71da      	strb	r2, [r3, #7]
 800908e:	4b6c      	ldr	r3, [pc, #432]	@ (8009240 <USBD_CMPSIT_CDCDesc+0x290>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	2200      	movs	r2, #0
 8009094:	721a      	strb	r2, [r3, #8]
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f103 0209 	add.w	r2, r3, #9
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	601a      	str	r2, [r3, #0]

  /* Control interface headers */
  pHeadDesc = ((USBD_CDCHeaderFuncDescTypeDef *)((uint32_t)pConf + *Sze));
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681a      	ldr	r2, [r3, #0]
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	4413      	add	r3, r2
 80090aa:	461a      	mov	r2, r3
 80090ac:	4b65      	ldr	r3, [pc, #404]	@ (8009244 <USBD_CMPSIT_CDCDesc+0x294>)
 80090ae:	601a      	str	r2, [r3, #0]
  /* Header Functional Descriptor*/
  pHeadDesc->bLength = 0x05U;
 80090b0:	4b64      	ldr	r3, [pc, #400]	@ (8009244 <USBD_CMPSIT_CDCDesc+0x294>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	2205      	movs	r2, #5
 80090b6:	701a      	strb	r2, [r3, #0]
  pHeadDesc->bDescriptorType = 0x24U;
 80090b8:	4b62      	ldr	r3, [pc, #392]	@ (8009244 <USBD_CMPSIT_CDCDesc+0x294>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	2224      	movs	r2, #36	@ 0x24
 80090be:	705a      	strb	r2, [r3, #1]
  pHeadDesc->bDescriptorSubtype = 0x00U;
 80090c0:	4b60      	ldr	r3, [pc, #384]	@ (8009244 <USBD_CMPSIT_CDCDesc+0x294>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	2200      	movs	r2, #0
 80090c6:	709a      	strb	r2, [r3, #2]
  pHeadDesc->bcdCDC = 0x0110U;
 80090c8:	4b5e      	ldr	r3, [pc, #376]	@ (8009244 <USBD_CMPSIT_CDCDesc+0x294>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	2200      	movs	r2, #0
 80090ce:	f042 0210 	orr.w	r2, r2, #16
 80090d2:	70da      	strb	r2, [r3, #3]
 80090d4:	2200      	movs	r2, #0
 80090d6:	f042 0201 	orr.w	r2, r2, #1
 80090da:	711a      	strb	r2, [r3, #4]
  *Sze += (uint32_t)sizeof(USBD_CDCHeaderFuncDescTypeDef);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	1d5a      	adds	r2, r3, #5
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	601a      	str	r2, [r3, #0]

  /* Call Management Functional Descriptor */
  pCallMgmDesc = ((USBD_CDCCallMgmFuncDescTypeDef *)((uint32_t)pConf + *Sze));
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681a      	ldr	r2, [r3, #0]
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	4413      	add	r3, r2
 80090ee:	461a      	mov	r2, r3
 80090f0:	4b55      	ldr	r3, [pc, #340]	@ (8009248 <USBD_CMPSIT_CDCDesc+0x298>)
 80090f2:	601a      	str	r2, [r3, #0]
  pCallMgmDesc->bLength = 0x05U;
 80090f4:	4b54      	ldr	r3, [pc, #336]	@ (8009248 <USBD_CMPSIT_CDCDesc+0x298>)
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	2205      	movs	r2, #5
 80090fa:	701a      	strb	r2, [r3, #0]
  pCallMgmDesc->bDescriptorType = 0x24U;
 80090fc:	4b52      	ldr	r3, [pc, #328]	@ (8009248 <USBD_CMPSIT_CDCDesc+0x298>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	2224      	movs	r2, #36	@ 0x24
 8009102:	705a      	strb	r2, [r3, #1]
  pCallMgmDesc->bDescriptorSubtype = 0x01U;
 8009104:	4b50      	ldr	r3, [pc, #320]	@ (8009248 <USBD_CMPSIT_CDCDesc+0x298>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	2201      	movs	r2, #1
 800910a:	709a      	strb	r2, [r3, #2]
  pCallMgmDesc->bmCapabilities = 0x00U;
 800910c:	4b4e      	ldr	r3, [pc, #312]	@ (8009248 <USBD_CMPSIT_CDCDesc+0x298>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	2200      	movs	r2, #0
 8009112:	70da      	strb	r2, [r3, #3]
  pCallMgmDesc->bDataInterface = pdev->tclasslist[pdev->classId].Ifs[1];
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 800911a:	4b4b      	ldr	r3, [pc, #300]	@ (8009248 <USBD_CMPSIT_CDCDesc+0x298>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	68f9      	ldr	r1, [r7, #12]
 8009120:	202c      	movs	r0, #44	@ 0x2c
 8009122:	fb00 f202 	mul.w	r2, r0, r2
 8009126:	440a      	add	r2, r1
 8009128:	f202 320d 	addw	r2, r2, #781	@ 0x30d
 800912c:	7812      	ldrb	r2, [r2, #0]
 800912e:	711a      	strb	r2, [r3, #4]
  *Sze += (uint32_t)sizeof(USBD_CDCCallMgmFuncDescTypeDef);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	1d5a      	adds	r2, r3, #5
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	601a      	str	r2, [r3, #0]

  /* ACM Functional Descriptor*/
  pACMDesc = ((USBD_CDCACMFuncDescTypeDef *)((uint32_t)pConf + *Sze));
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681a      	ldr	r2, [r3, #0]
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	4413      	add	r3, r2
 8009142:	461a      	mov	r2, r3
 8009144:	4b41      	ldr	r3, [pc, #260]	@ (800924c <USBD_CMPSIT_CDCDesc+0x29c>)
 8009146:	601a      	str	r2, [r3, #0]
  pACMDesc->bLength = 0x04U;
 8009148:	4b40      	ldr	r3, [pc, #256]	@ (800924c <USBD_CMPSIT_CDCDesc+0x29c>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	2204      	movs	r2, #4
 800914e:	701a      	strb	r2, [r3, #0]
  pACMDesc->bDescriptorType = 0x24U;
 8009150:	4b3e      	ldr	r3, [pc, #248]	@ (800924c <USBD_CMPSIT_CDCDesc+0x29c>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	2224      	movs	r2, #36	@ 0x24
 8009156:	705a      	strb	r2, [r3, #1]
  pACMDesc->bDescriptorSubtype = 0x02U;
 8009158:	4b3c      	ldr	r3, [pc, #240]	@ (800924c <USBD_CMPSIT_CDCDesc+0x29c>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	2202      	movs	r2, #2
 800915e:	709a      	strb	r2, [r3, #2]
  pACMDesc->bmCapabilities = 0x02U;
 8009160:	4b3a      	ldr	r3, [pc, #232]	@ (800924c <USBD_CMPSIT_CDCDesc+0x29c>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	2202      	movs	r2, #2
 8009166:	70da      	strb	r2, [r3, #3]
  *Sze += (uint32_t)sizeof(USBD_CDCACMFuncDescTypeDef);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	1d1a      	adds	r2, r3, #4
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	601a      	str	r2, [r3, #0]

  /* Union Functional Descriptor*/
  pUnionDesc = ((USBD_CDCUnionFuncDescTypeDef *)((uint32_t)pConf + *Sze));
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681a      	ldr	r2, [r3, #0]
 8009176:	68bb      	ldr	r3, [r7, #8]
 8009178:	4413      	add	r3, r2
 800917a:	461a      	mov	r2, r3
 800917c:	4b34      	ldr	r3, [pc, #208]	@ (8009250 <USBD_CMPSIT_CDCDesc+0x2a0>)
 800917e:	601a      	str	r2, [r3, #0]
  pUnionDesc->bLength = 0x05U;
 8009180:	4b33      	ldr	r3, [pc, #204]	@ (8009250 <USBD_CMPSIT_CDCDesc+0x2a0>)
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	2205      	movs	r2, #5
 8009186:	701a      	strb	r2, [r3, #0]
  pUnionDesc->bDescriptorType = 0x24U;
 8009188:	4b31      	ldr	r3, [pc, #196]	@ (8009250 <USBD_CMPSIT_CDCDesc+0x2a0>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	2224      	movs	r2, #36	@ 0x24
 800918e:	705a      	strb	r2, [r3, #1]
  pUnionDesc->bDescriptorSubtype = 0x06U;
 8009190:	4b2f      	ldr	r3, [pc, #188]	@ (8009250 <USBD_CMPSIT_CDCDesc+0x2a0>)
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	2206      	movs	r2, #6
 8009196:	709a      	strb	r2, [r3, #2]
  pUnionDesc->bMasterInterface = pdev->tclasslist[pdev->classId].Ifs[0];
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 800919e:	4b2c      	ldr	r3, [pc, #176]	@ (8009250 <USBD_CMPSIT_CDCDesc+0x2a0>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	68f9      	ldr	r1, [r7, #12]
 80091a4:	202c      	movs	r0, #44	@ 0x2c
 80091a6:	fb00 f202 	mul.w	r2, r0, r2
 80091aa:	440a      	add	r2, r1
 80091ac:	f502 7243 	add.w	r2, r2, #780	@ 0x30c
 80091b0:	7812      	ldrb	r2, [r2, #0]
 80091b2:	70da      	strb	r2, [r3, #3]
  pUnionDesc->bSlaveInterface = pdev->tclasslist[pdev->classId].Ifs[1];
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 80091ba:	4b25      	ldr	r3, [pc, #148]	@ (8009250 <USBD_CMPSIT_CDCDesc+0x2a0>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	68f9      	ldr	r1, [r7, #12]
 80091c0:	202c      	movs	r0, #44	@ 0x2c
 80091c2:	fb00 f202 	mul.w	r2, r0, r2
 80091c6:	440a      	add	r2, r1
 80091c8:	f202 320d 	addw	r2, r2, #781	@ 0x30d
 80091cc:	7812      	ldrb	r2, [r2, #0]
 80091ce:	711a      	strb	r2, [r3, #4]
  *Sze += (uint32_t)sizeof(USBD_CDCUnionFuncDescTypeDef);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	1d5a      	adds	r2, r3, #5
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	601a      	str	r2, [r3, #0]

  /* Append Endpoint descriptor to Configuration descriptor */
  __USBD_CMPSIT_SET_EP(pdev->tclasslist[pdev->classId].Eps[2].add, \
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681a      	ldr	r2, [r3, #0]
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	4413      	add	r3, r2
 80091e2:	461a      	mov	r2, r3
 80091e4:	4b1b      	ldr	r3, [pc, #108]	@ (8009254 <USBD_CMPSIT_CDCDesc+0x2a4>)
 80091e6:	601a      	str	r2, [r3, #0]
 80091e8:	4b1a      	ldr	r3, [pc, #104]	@ (8009254 <USBD_CMPSIT_CDCDesc+0x2a4>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	2207      	movs	r2, #7
 80091ee:	701a      	strb	r2, [r3, #0]
 80091f0:	4b18      	ldr	r3, [pc, #96]	@ (8009254 <USBD_CMPSIT_CDCDesc+0x2a4>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	2205      	movs	r2, #5
 80091f6:	705a      	strb	r2, [r3, #1]
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 80091fe:	4b15      	ldr	r3, [pc, #84]	@ (8009254 <USBD_CMPSIT_CDCDesc+0x2a4>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	68f9      	ldr	r1, [r7, #12]
 8009204:	202c      	movs	r0, #44	@ 0x2c
 8009206:	fb00 f202 	mul.w	r2, r0, r2
 800920a:	440a      	add	r2, r1
 800920c:	f502 7240 	add.w	r2, r2, #768	@ 0x300
 8009210:	7812      	ldrb	r2, [r2, #0]
 8009212:	709a      	strb	r2, [r3, #2]
 8009214:	4b0f      	ldr	r3, [pc, #60]	@ (8009254 <USBD_CMPSIT_CDCDesc+0x2a4>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	2203      	movs	r2, #3
 800921a:	70da      	strb	r2, [r3, #3]
 800921c:	4b0d      	ldr	r3, [pc, #52]	@ (8009254 <USBD_CMPSIT_CDCDesc+0x2a4>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	2200      	movs	r2, #0
 8009222:	f042 0208 	orr.w	r2, r2, #8
 8009226:	711a      	strb	r2, [r3, #4]
 8009228:	2200      	movs	r2, #0
 800922a:	715a      	strb	r2, [r3, #5]
 800922c:	78fb      	ldrb	r3, [r7, #3]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d112      	bne.n	8009258 <USBD_CMPSIT_CDCDesc+0x2a8>
 8009232:	4b08      	ldr	r3, [pc, #32]	@ (8009254 <USBD_CMPSIT_CDCDesc+0x2a4>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	2210      	movs	r2, #16
 8009238:	719a      	strb	r2, [r3, #6]
 800923a:	e011      	b.n	8009260 <USBD_CMPSIT_CDCDesc+0x2b0>
 800923c:	20000a70 	.word	0x20000a70
 8009240:	20000a74 	.word	0x20000a74
 8009244:	20000a78 	.word	0x20000a78
 8009248:	20000a7c 	.word	0x20000a7c
 800924c:	20000a80 	.word	0x20000a80
 8009250:	20000a84 	.word	0x20000a84
 8009254:	20000a88 	.word	0x20000a88
 8009258:	4b73      	ldr	r3, [pc, #460]	@ (8009428 <USBD_CMPSIT_CDCDesc+0x478>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	2210      	movs	r2, #16
 800925e:	719a      	strb	r2, [r3, #6]
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	1dda      	adds	r2, r3, #7
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	601a      	str	r2, [r3, #0]
                       USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE, CDC_HS_BINTERVAL, CDC_FS_BINTERVAL);

  /* Data Interface Descriptor */
  __USBD_CMPSIT_SET_IF(pdev->tclasslist[pdev->classId].Ifs[1], 0U, 2U, 0x0A, 0U, 0U, 0U);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681a      	ldr	r2, [r3, #0]
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	4413      	add	r3, r2
 8009272:	461a      	mov	r2, r3
 8009274:	4b6d      	ldr	r3, [pc, #436]	@ (800942c <USBD_CMPSIT_CDCDesc+0x47c>)
 8009276:	601a      	str	r2, [r3, #0]
 8009278:	4b6c      	ldr	r3, [pc, #432]	@ (800942c <USBD_CMPSIT_CDCDesc+0x47c>)
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	2209      	movs	r2, #9
 800927e:	701a      	strb	r2, [r3, #0]
 8009280:	4b6a      	ldr	r3, [pc, #424]	@ (800942c <USBD_CMPSIT_CDCDesc+0x47c>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	2204      	movs	r2, #4
 8009286:	705a      	strb	r2, [r3, #1]
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 800928e:	4b67      	ldr	r3, [pc, #412]	@ (800942c <USBD_CMPSIT_CDCDesc+0x47c>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	68f9      	ldr	r1, [r7, #12]
 8009294:	202c      	movs	r0, #44	@ 0x2c
 8009296:	fb00 f202 	mul.w	r2, r0, r2
 800929a:	440a      	add	r2, r1
 800929c:	f202 320d 	addw	r2, r2, #781	@ 0x30d
 80092a0:	7812      	ldrb	r2, [r2, #0]
 80092a2:	709a      	strb	r2, [r3, #2]
 80092a4:	4b61      	ldr	r3, [pc, #388]	@ (800942c <USBD_CMPSIT_CDCDesc+0x47c>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	2200      	movs	r2, #0
 80092aa:	70da      	strb	r2, [r3, #3]
 80092ac:	4b5f      	ldr	r3, [pc, #380]	@ (800942c <USBD_CMPSIT_CDCDesc+0x47c>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	2202      	movs	r2, #2
 80092b2:	711a      	strb	r2, [r3, #4]
 80092b4:	4b5d      	ldr	r3, [pc, #372]	@ (800942c <USBD_CMPSIT_CDCDesc+0x47c>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	220a      	movs	r2, #10
 80092ba:	715a      	strb	r2, [r3, #5]
 80092bc:	4b5b      	ldr	r3, [pc, #364]	@ (800942c <USBD_CMPSIT_CDCDesc+0x47c>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	2200      	movs	r2, #0
 80092c2:	719a      	strb	r2, [r3, #6]
 80092c4:	4b59      	ldr	r3, [pc, #356]	@ (800942c <USBD_CMPSIT_CDCDesc+0x47c>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	2200      	movs	r2, #0
 80092ca:	71da      	strb	r2, [r3, #7]
 80092cc:	4b57      	ldr	r3, [pc, #348]	@ (800942c <USBD_CMPSIT_CDCDesc+0x47c>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	2200      	movs	r2, #0
 80092d2:	721a      	strb	r2, [r3, #8]
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f103 0209 	add.w	r2, r3, #9
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	601a      	str	r2, [r3, #0]

  if (speed == (uint8_t)USBD_SPEED_HIGH)
 80092e0:	78fb      	ldrb	r3, [r7, #3]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d10c      	bne.n	8009300 <USBD_CMPSIT_CDCDesc+0x350>
  {
    pdev->tclasslist[pdev->classId].CurrPcktSze = CDC_DATA_HS_MAX_PACKET_SIZE;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80092ec:	68fa      	ldr	r2, [r7, #12]
 80092ee:	212c      	movs	r1, #44	@ 0x2c
 80092f0:	fb01 f303 	mul.w	r3, r1, r3
 80092f4:	4413      	add	r3, r2
 80092f6:	f503 7344 	add.w	r3, r3, #784	@ 0x310
 80092fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80092fe:	601a      	str	r2, [r3, #0]
  }

  /* Append Endpoint descriptor to Configuration descriptor */
  __USBD_CMPSIT_SET_EP((pdev->tclasslist[pdev->classId].Eps[0].add), \
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681a      	ldr	r2, [r3, #0]
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	4413      	add	r3, r2
 8009308:	461a      	mov	r2, r3
 800930a:	4b47      	ldr	r3, [pc, #284]	@ (8009428 <USBD_CMPSIT_CDCDesc+0x478>)
 800930c:	601a      	str	r2, [r3, #0]
 800930e:	4b46      	ldr	r3, [pc, #280]	@ (8009428 <USBD_CMPSIT_CDCDesc+0x478>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	2207      	movs	r2, #7
 8009314:	701a      	strb	r2, [r3, #0]
 8009316:	4b44      	ldr	r3, [pc, #272]	@ (8009428 <USBD_CMPSIT_CDCDesc+0x478>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	2205      	movs	r2, #5
 800931c:	705a      	strb	r2, [r3, #1]
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 8009324:	4b40      	ldr	r3, [pc, #256]	@ (8009428 <USBD_CMPSIT_CDCDesc+0x478>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	68f9      	ldr	r1, [r7, #12]
 800932a:	202c      	movs	r0, #44	@ 0x2c
 800932c:	fb00 f202 	mul.w	r2, r0, r2
 8009330:	440a      	add	r2, r1
 8009332:	f502 723e 	add.w	r2, r2, #760	@ 0x2f8
 8009336:	7812      	ldrb	r2, [r2, #0]
 8009338:	709a      	strb	r2, [r3, #2]
 800933a:	4b3b      	ldr	r3, [pc, #236]	@ (8009428 <USBD_CMPSIT_CDCDesc+0x478>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	2202      	movs	r2, #2
 8009340:	70da      	strb	r2, [r3, #3]
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8009348:	68fa      	ldr	r2, [r7, #12]
 800934a:	212c      	movs	r1, #44	@ 0x2c
 800934c:	fb01 f303 	mul.w	r3, r1, r3
 8009350:	4413      	add	r3, r2
 8009352:	f503 7344 	add.w	r3, r3, #784	@ 0x310
 8009356:	681a      	ldr	r2, [r3, #0]
 8009358:	4b33      	ldr	r3, [pc, #204]	@ (8009428 <USBD_CMPSIT_CDCDesc+0x478>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	b292      	uxth	r2, r2
 800935e:	809a      	strh	r2, [r3, #4]
 8009360:	78fb      	ldrb	r3, [r7, #3]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d104      	bne.n	8009370 <USBD_CMPSIT_CDCDesc+0x3c0>
 8009366:	4b30      	ldr	r3, [pc, #192]	@ (8009428 <USBD_CMPSIT_CDCDesc+0x478>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	2200      	movs	r2, #0
 800936c:	719a      	strb	r2, [r3, #6]
 800936e:	e003      	b.n	8009378 <USBD_CMPSIT_CDCDesc+0x3c8>
 8009370:	4b2d      	ldr	r3, [pc, #180]	@ (8009428 <USBD_CMPSIT_CDCDesc+0x478>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	2200      	movs	r2, #0
 8009376:	719a      	strb	r2, [r3, #6]
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	1dda      	adds	r2, r3, #7
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	601a      	str	r2, [r3, #0]
                       (USBD_EP_TYPE_BULK), (pdev->tclasslist[pdev->classId].CurrPcktSze), (0U), (0U));

  /* Append Endpoint descriptor to Configuration descriptor */
  __USBD_CMPSIT_SET_EP((pdev->tclasslist[pdev->classId].Eps[1].add), \
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681a      	ldr	r2, [r3, #0]
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	4413      	add	r3, r2
 800938a:	461a      	mov	r2, r3
 800938c:	4b26      	ldr	r3, [pc, #152]	@ (8009428 <USBD_CMPSIT_CDCDesc+0x478>)
 800938e:	601a      	str	r2, [r3, #0]
 8009390:	4b25      	ldr	r3, [pc, #148]	@ (8009428 <USBD_CMPSIT_CDCDesc+0x478>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	2207      	movs	r2, #7
 8009396:	701a      	strb	r2, [r3, #0]
 8009398:	4b23      	ldr	r3, [pc, #140]	@ (8009428 <USBD_CMPSIT_CDCDesc+0x478>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	2205      	movs	r2, #5
 800939e:	705a      	strb	r2, [r3, #1]
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 80093a6:	4b20      	ldr	r3, [pc, #128]	@ (8009428 <USBD_CMPSIT_CDCDesc+0x478>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	68f9      	ldr	r1, [r7, #12]
 80093ac:	202c      	movs	r0, #44	@ 0x2c
 80093ae:	fb00 f202 	mul.w	r2, r0, r2
 80093b2:	440a      	add	r2, r1
 80093b4:	f502 723f 	add.w	r2, r2, #764	@ 0x2fc
 80093b8:	7812      	ldrb	r2, [r2, #0]
 80093ba:	709a      	strb	r2, [r3, #2]
 80093bc:	4b1a      	ldr	r3, [pc, #104]	@ (8009428 <USBD_CMPSIT_CDCDesc+0x478>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	2202      	movs	r2, #2
 80093c2:	70da      	strb	r2, [r3, #3]
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80093ca:	68fa      	ldr	r2, [r7, #12]
 80093cc:	212c      	movs	r1, #44	@ 0x2c
 80093ce:	fb01 f303 	mul.w	r3, r1, r3
 80093d2:	4413      	add	r3, r2
 80093d4:	f503 7344 	add.w	r3, r3, #784	@ 0x310
 80093d8:	681a      	ldr	r2, [r3, #0]
 80093da:	4b13      	ldr	r3, [pc, #76]	@ (8009428 <USBD_CMPSIT_CDCDesc+0x478>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	b292      	uxth	r2, r2
 80093e0:	809a      	strh	r2, [r3, #4]
 80093e2:	78fb      	ldrb	r3, [r7, #3]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d104      	bne.n	80093f2 <USBD_CMPSIT_CDCDesc+0x442>
 80093e8:	4b0f      	ldr	r3, [pc, #60]	@ (8009428 <USBD_CMPSIT_CDCDesc+0x478>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	2200      	movs	r2, #0
 80093ee:	719a      	strb	r2, [r3, #6]
 80093f0:	e003      	b.n	80093fa <USBD_CMPSIT_CDCDesc+0x44a>
 80093f2:	4b0d      	ldr	r3, [pc, #52]	@ (8009428 <USBD_CMPSIT_CDCDesc+0x478>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	2200      	movs	r2, #0
 80093f8:	719a      	strb	r2, [r3, #6]
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	1dda      	adds	r2, r3, #7
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	601a      	str	r2, [r3, #0]
                       (USBD_EP_TYPE_BULK), (pdev->tclasslist[pdev->classId].CurrPcktSze), (0U), (0U));

  /* Update Config Descriptor and IAD descriptor */
  ((USBD_ConfigDescTypeDef *)pConf)->bNumInterfaces += 2U;
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	791a      	ldrb	r2, [r3, #4]
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	3202      	adds	r2, #2
 800940c:	b2d2      	uxtb	r2, r2
 800940e:	711a      	strb	r2, [r3, #4]
  ((USBD_ConfigDescTypeDef *)pConf)->wTotalLength = (uint16_t)(*Sze);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681a      	ldr	r2, [r3, #0]
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	b292      	uxth	r2, r2
 8009418:	805a      	strh	r2, [r3, #2]
}
 800941a:	bf00      	nop
 800941c:	3714      	adds	r7, #20
 800941e:	46bd      	mov	sp, r7
 8009420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009424:	4770      	bx	lr
 8009426:	bf00      	nop
 8009428:	20000a88 	.word	0x20000a88
 800942c:	20000a74 	.word	0x20000a74

08009430 <USBD_CMPSIT_SetClassID>:
  * @param  Class: Class type, can be CLASS_TYPE_NONE if requested to find class from setup request
  * @param  Instance: Instance number of the class (0 if first/unique instance, >0 otherwise)
  * @retval The Class ID, The pdev->classId is set with the value of the selected class ID.
  */
uint32_t  USBD_CMPSIT_SetClassID(USBD_HandleTypeDef *pdev, USBD_CompositeClassTypeDef Class, uint32_t Instance)
{
 8009430:	b480      	push	{r7}
 8009432:	b087      	sub	sp, #28
 8009434:	af00      	add	r7, sp, #0
 8009436:	60f8      	str	r0, [r7, #12]
 8009438:	460b      	mov	r3, r1
 800943a:	607a      	str	r2, [r7, #4]
 800943c:	72fb      	strb	r3, [r7, #11]
  uint32_t idx;
  uint32_t inst = 0U;
 800943e:	2300      	movs	r3, #0
 8009440:	613b      	str	r3, [r7, #16]

  /* Unroll all already activated classes */
  for (idx = 0U; idx < pdev->NumClasses; idx++)
 8009442:	2300      	movs	r3, #0
 8009444:	617b      	str	r3, [r7, #20]
 8009446:	e026      	b.n	8009496 <USBD_CMPSIT_SetClassID+0x66>
  {
    /* Check if the class correspond to the requested type and if it is active */
    if (((USBD_CompositeClassTypeDef)(pdev->tclasslist[idx].ClassType) == Class) &&
 8009448:	68fa      	ldr	r2, [r7, #12]
 800944a:	697b      	ldr	r3, [r7, #20]
 800944c:	212c      	movs	r1, #44	@ 0x2c
 800944e:	fb01 f303 	mul.w	r3, r1, r3
 8009452:	4413      	add	r3, r2
 8009454:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 8009458:	781b      	ldrb	r3, [r3, #0]
 800945a:	7afa      	ldrb	r2, [r7, #11]
 800945c:	429a      	cmp	r2, r3
 800945e:	d117      	bne.n	8009490 <USBD_CMPSIT_SetClassID+0x60>
        ((pdev->tclasslist[idx].Active) == 1U))
 8009460:	68fa      	ldr	r2, [r7, #12]
 8009462:	697b      	ldr	r3, [r7, #20]
 8009464:	212c      	movs	r1, #44	@ 0x2c
 8009466:	fb01 f303 	mul.w	r3, r1, r3
 800946a:	4413      	add	r3, r2
 800946c:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8009470:	681b      	ldr	r3, [r3, #0]
    if (((USBD_CompositeClassTypeDef)(pdev->tclasslist[idx].ClassType) == Class) &&
 8009472:	2b01      	cmp	r3, #1
 8009474:	d10c      	bne.n	8009490 <USBD_CMPSIT_SetClassID+0x60>
    {
      if (inst == Instance)
 8009476:	693a      	ldr	r2, [r7, #16]
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	429a      	cmp	r2, r3
 800947c:	d105      	bne.n	800948a <USBD_CMPSIT_SetClassID+0x5a>
      {
        /* Set the new class ID */
        pdev->classId = idx;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	697a      	ldr	r2, [r7, #20]
 8009482:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0

        /* Return the class ID value */
        return (idx);
 8009486:	697b      	ldr	r3, [r7, #20]
 8009488:	e00c      	b.n	80094a4 <USBD_CMPSIT_SetClassID+0x74>
      }
      else
      {
        /* Increment instance index and look for next instance */
        inst++;
 800948a:	693b      	ldr	r3, [r7, #16]
 800948c:	3301      	adds	r3, #1
 800948e:	613b      	str	r3, [r7, #16]
  for (idx = 0U; idx < pdev->NumClasses; idx++)
 8009490:	697b      	ldr	r3, [r7, #20]
 8009492:	3301      	adds	r3, #1
 8009494:	617b      	str	r3, [r7, #20]
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	f8d3 32e4 	ldr.w	r3, [r3, #740]	@ 0x2e4
 800949c:	697a      	ldr	r2, [r7, #20]
 800949e:	429a      	cmp	r2, r3
 80094a0:	d3d2      	bcc.n	8009448 <USBD_CMPSIT_SetClassID+0x18>
      }
    }
  }

  /* No class found, return 0xFF */
  return 0xFFU;
 80094a2:	23ff      	movs	r3, #255	@ 0xff
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	371c      	adds	r7, #28
 80094a8:	46bd      	mov	sp, r7
 80094aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ae:	4770      	bx	lr

080094b0 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b084      	sub	sp, #16
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
 80094b8:	460b      	mov	r3, r1
 80094ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80094bc:	2010      	movs	r0, #16
 80094be:	f000 fbe9 	bl	8009c94 <USBD_static_malloc>
 80094c2:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d10a      	bne.n	80094e0 <USBD_HID_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80094d0:	687a      	ldr	r2, [r7, #4]
 80094d2:	33b0      	adds	r3, #176	@ 0xb0
 80094d4:	009b      	lsls	r3, r3, #2
 80094d6:	4413      	add	r3, r2
 80094d8:	2200      	movs	r2, #0
 80094da:	605a      	str	r2, [r3, #4]
    return (uint8_t)USBD_EMEM;
 80094dc:	2302      	movs	r3, #2
 80094de:	e057      	b.n	8009590 <USBD_HID_Init+0xe0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80094e6:	687a      	ldr	r2, [r7, #4]
 80094e8:	33b0      	adds	r3, #176	@ 0xb0
 80094ea:	009b      	lsls	r3, r3, #2
 80094ec:	4413      	add	r3, r2
 80094ee:	68fa      	ldr	r2, [r7, #12]
 80094f0:	605a      	str	r2, [r3, #4]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80094f8:	687a      	ldr	r2, [r7, #4]
 80094fa:	33b0      	adds	r3, #176	@ 0xb0
 80094fc:	009b      	lsls	r3, r3, #2
 80094fe:	4413      	add	r3, r2
 8009500:	685a      	ldr	r2, [r3, #4]
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800950e:	b2db      	uxtb	r3, r3
 8009510:	2203      	movs	r2, #3
 8009512:	2180      	movs	r1, #128	@ 0x80
 8009514:	6878      	ldr	r0, [r7, #4]
 8009516:	f001 f869 	bl	800a5ec <USBD_CoreGetEPAdd>
 800951a:	4603      	mov	r3, r0
 800951c:	461a      	mov	r2, r3
 800951e:	4b1e      	ldr	r3, [pc, #120]	@ (8009598 <USBD_HID_Init+0xe8>)
 8009520:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	7c1b      	ldrb	r3, [r3, #16]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d10d      	bne.n	8009546 <USBD_HID_Init+0x96>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 800952a:	4b1b      	ldr	r3, [pc, #108]	@ (8009598 <USBD_HID_Init+0xe8>)
 800952c:	781b      	ldrb	r3, [r3, #0]
 800952e:	f003 020f 	and.w	r2, r3, #15
 8009532:	6879      	ldr	r1, [r7, #4]
 8009534:	4613      	mov	r3, r2
 8009536:	009b      	lsls	r3, r3, #2
 8009538:	4413      	add	r3, r2
 800953a:	009b      	lsls	r3, r3, #2
 800953c:	440b      	add	r3, r1
 800953e:	3326      	adds	r3, #38	@ 0x26
 8009540:	2207      	movs	r2, #7
 8009542:	801a      	strh	r2, [r3, #0]
 8009544:	e00c      	b.n	8009560 <USBD_HID_Init+0xb0>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8009546:	4b14      	ldr	r3, [pc, #80]	@ (8009598 <USBD_HID_Init+0xe8>)
 8009548:	781b      	ldrb	r3, [r3, #0]
 800954a:	f003 020f 	and.w	r2, r3, #15
 800954e:	6879      	ldr	r1, [r7, #4]
 8009550:	4613      	mov	r3, r2
 8009552:	009b      	lsls	r3, r3, #2
 8009554:	4413      	add	r3, r2
 8009556:	009b      	lsls	r3, r3, #2
 8009558:	440b      	add	r3, r1
 800955a:	3326      	adds	r3, #38	@ 0x26
 800955c:	220a      	movs	r2, #10
 800955e:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8009560:	4b0d      	ldr	r3, [pc, #52]	@ (8009598 <USBD_HID_Init+0xe8>)
 8009562:	7819      	ldrb	r1, [r3, #0]
 8009564:	2304      	movs	r3, #4
 8009566:	2203      	movs	r2, #3
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f000 fa9a 	bl	8009aa2 <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 800956e:	4b0a      	ldr	r3, [pc, #40]	@ (8009598 <USBD_HID_Init+0xe8>)
 8009570:	781b      	ldrb	r3, [r3, #0]
 8009572:	f003 020f 	and.w	r2, r3, #15
 8009576:	6879      	ldr	r1, [r7, #4]
 8009578:	4613      	mov	r3, r2
 800957a:	009b      	lsls	r3, r3, #2
 800957c:	4413      	add	r3, r2
 800957e:	009b      	lsls	r3, r3, #2
 8009580:	440b      	add	r3, r1
 8009582:	3324      	adds	r3, #36	@ 0x24
 8009584:	2201      	movs	r2, #1
 8009586:	801a      	strh	r2, [r3, #0]

  hhid->state = USBD_HID_IDLE;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	2200      	movs	r2, #0
 800958c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800958e:	2300      	movs	r3, #0
}
 8009590:	4618      	mov	r0, r3
 8009592:	3710      	adds	r7, #16
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}
 8009598:	2000013e 	.word	0x2000013e

0800959c <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b082      	sub	sp, #8
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
 80095a4:	460b      	mov	r3, r1
 80095a6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80095ae:	b2db      	uxtb	r3, r3
 80095b0:	2203      	movs	r2, #3
 80095b2:	2180      	movs	r1, #128	@ 0x80
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f001 f819 	bl	800a5ec <USBD_CoreGetEPAdd>
 80095ba:	4603      	mov	r3, r0
 80095bc:	461a      	mov	r2, r3
 80095be:	4b22      	ldr	r3, [pc, #136]	@ (8009648 <USBD_HID_DeInit+0xac>)
 80095c0:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 80095c2:	4b21      	ldr	r3, [pc, #132]	@ (8009648 <USBD_HID_DeInit+0xac>)
 80095c4:	781b      	ldrb	r3, [r3, #0]
 80095c6:	4619      	mov	r1, r3
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f000 fa8a 	bl	8009ae2 <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 80095ce:	4b1e      	ldr	r3, [pc, #120]	@ (8009648 <USBD_HID_DeInit+0xac>)
 80095d0:	781b      	ldrb	r3, [r3, #0]
 80095d2:	f003 020f 	and.w	r2, r3, #15
 80095d6:	6879      	ldr	r1, [r7, #4]
 80095d8:	4613      	mov	r3, r2
 80095da:	009b      	lsls	r3, r3, #2
 80095dc:	4413      	add	r3, r2
 80095de:	009b      	lsls	r3, r3, #2
 80095e0:	440b      	add	r3, r1
 80095e2:	3324      	adds	r3, #36	@ 0x24
 80095e4:	2200      	movs	r2, #0
 80095e6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 80095e8:	4b17      	ldr	r3, [pc, #92]	@ (8009648 <USBD_HID_DeInit+0xac>)
 80095ea:	781b      	ldrb	r3, [r3, #0]
 80095ec:	f003 020f 	and.w	r2, r3, #15
 80095f0:	6879      	ldr	r1, [r7, #4]
 80095f2:	4613      	mov	r3, r2
 80095f4:	009b      	lsls	r3, r3, #2
 80095f6:	4413      	add	r3, r2
 80095f8:	009b      	lsls	r3, r3, #2
 80095fa:	440b      	add	r3, r1
 80095fc:	3326      	adds	r3, #38	@ 0x26
 80095fe:	2200      	movs	r2, #0
 8009600:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8009608:	687a      	ldr	r2, [r7, #4]
 800960a:	33b0      	adds	r3, #176	@ 0xb0
 800960c:	009b      	lsls	r3, r3, #2
 800960e:	4413      	add	r3, r2
 8009610:	685b      	ldr	r3, [r3, #4]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d013      	beq.n	800963e <USBD_HID_DeInit+0xa2>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800961c:	687a      	ldr	r2, [r7, #4]
 800961e:	33b0      	adds	r3, #176	@ 0xb0
 8009620:	009b      	lsls	r3, r3, #2
 8009622:	4413      	add	r3, r2
 8009624:	685b      	ldr	r3, [r3, #4]
 8009626:	4618      	mov	r0, r3
 8009628:	f000 fb42 	bl	8009cb0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8009632:	687a      	ldr	r2, [r7, #4]
 8009634:	33b0      	adds	r3, #176	@ 0xb0
 8009636:	009b      	lsls	r3, r3, #2
 8009638:	4413      	add	r3, r2
 800963a:	2200      	movs	r2, #0
 800963c:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)USBD_OK;
 800963e:	2300      	movs	r3, #0
}
 8009640:	4618      	mov	r0, r3
 8009642:	3708      	adds	r7, #8
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}
 8009648:	2000013e 	.word	0x2000013e

0800964c <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b086      	sub	sp, #24
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
 8009654:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800965c:	687a      	ldr	r2, [r7, #4]
 800965e:	33b0      	adds	r3, #176	@ 0xb0
 8009660:	009b      	lsls	r3, r3, #2
 8009662:	4413      	add	r3, r2
 8009664:	685b      	ldr	r3, [r3, #4]
 8009666:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8009668:	2300      	movs	r3, #0
 800966a:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800966c:	2300      	movs	r3, #0
 800966e:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d101      	bne.n	800967a <USBD_HID_Setup+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009676:	2303      	movs	r3, #3
 8009678:	e0e7      	b.n	800984a <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	781b      	ldrb	r3, [r3, #0]
 800967e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009682:	2b00      	cmp	r3, #0
 8009684:	d045      	beq.n	8009712 <USBD_HID_Setup+0xc6>
 8009686:	2b20      	cmp	r3, #32
 8009688:	f040 80d7 	bne.w	800983a <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	785b      	ldrb	r3, [r3, #1]
 8009690:	3b02      	subs	r3, #2
 8009692:	2b09      	cmp	r3, #9
 8009694:	d835      	bhi.n	8009702 <USBD_HID_Setup+0xb6>
 8009696:	a201      	add	r2, pc, #4	@ (adr r2, 800969c <USBD_HID_Setup+0x50>)
 8009698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800969c:	080096f3 	.word	0x080096f3
 80096a0:	080096d3 	.word	0x080096d3
 80096a4:	08009703 	.word	0x08009703
 80096a8:	08009703 	.word	0x08009703
 80096ac:	08009703 	.word	0x08009703
 80096b0:	08009703 	.word	0x08009703
 80096b4:	08009703 	.word	0x08009703
 80096b8:	08009703 	.word	0x08009703
 80096bc:	080096e1 	.word	0x080096e1
 80096c0:	080096c5 	.word	0x080096c5
      {
        case USBD_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	885b      	ldrh	r3, [r3, #2]
 80096c8:	b2db      	uxtb	r3, r3
 80096ca:	461a      	mov	r2, r3
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	601a      	str	r2, [r3, #0]
          break;
 80096d0:	e01e      	b.n	8009710 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	2201      	movs	r2, #1
 80096d6:	4619      	mov	r1, r3
 80096d8:	6878      	ldr	r0, [r7, #4]
 80096da:	f001 ff86 	bl	800b5ea <USBD_CtlSendData>
          break;
 80096de:	e017      	b.n	8009710 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	885b      	ldrh	r3, [r3, #2]
 80096e4:	0a1b      	lsrs	r3, r3, #8
 80096e6:	b29b      	uxth	r3, r3
 80096e8:	b2db      	uxtb	r3, r3
 80096ea:	461a      	mov	r2, r3
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	605a      	str	r2, [r3, #4]
          break;
 80096f0:	e00e      	b.n	8009710 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	3304      	adds	r3, #4
 80096f6:	2201      	movs	r2, #1
 80096f8:	4619      	mov	r1, r3
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f001 ff75 	bl	800b5ea <USBD_CtlSendData>
          break;
 8009700:	e006      	b.n	8009710 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8009702:	6839      	ldr	r1, [r7, #0]
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f001 fdf0 	bl	800b2ea <USBD_CtlError>
          ret = USBD_FAIL;
 800970a:	2303      	movs	r3, #3
 800970c:	75fb      	strb	r3, [r7, #23]
          break;
 800970e:	bf00      	nop
      }
      break;
 8009710:	e09a      	b.n	8009848 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	785b      	ldrb	r3, [r3, #1]
 8009716:	2b0b      	cmp	r3, #11
 8009718:	f200 8086 	bhi.w	8009828 <USBD_HID_Setup+0x1dc>
 800971c:	a201      	add	r2, pc, #4	@ (adr r2, 8009724 <USBD_HID_Setup+0xd8>)
 800971e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009722:	bf00      	nop
 8009724:	08009755 	.word	0x08009755
 8009728:	08009837 	.word	0x08009837
 800972c:	08009829 	.word	0x08009829
 8009730:	08009829 	.word	0x08009829
 8009734:	08009829 	.word	0x08009829
 8009738:	08009829 	.word	0x08009829
 800973c:	0800977f 	.word	0x0800977f
 8009740:	08009829 	.word	0x08009829
 8009744:	08009829 	.word	0x08009829
 8009748:	08009829 	.word	0x08009829
 800974c:	080097d7 	.word	0x080097d7
 8009750:	08009801 	.word	0x08009801
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800975a:	b2db      	uxtb	r3, r3
 800975c:	2b03      	cmp	r3, #3
 800975e:	d107      	bne.n	8009770 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009760:	f107 030a 	add.w	r3, r7, #10
 8009764:	2202      	movs	r2, #2
 8009766:	4619      	mov	r1, r3
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	f001 ff3e 	bl	800b5ea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800976e:	e063      	b.n	8009838 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8009770:	6839      	ldr	r1, [r7, #0]
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f001 fdb9 	bl	800b2ea <USBD_CtlError>
            ret = USBD_FAIL;
 8009778:	2303      	movs	r3, #3
 800977a:	75fb      	strb	r3, [r7, #23]
          break;
 800977c:	e05c      	b.n	8009838 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	885b      	ldrh	r3, [r3, #2]
 8009782:	0a1b      	lsrs	r3, r3, #8
 8009784:	b29b      	uxth	r3, r3
 8009786:	2b22      	cmp	r3, #34	@ 0x22
 8009788:	d108      	bne.n	800979c <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	88db      	ldrh	r3, [r3, #6]
 800978e:	2b4a      	cmp	r3, #74	@ 0x4a
 8009790:	bf28      	it	cs
 8009792:	234a      	movcs	r3, #74	@ 0x4a
 8009794:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8009796:	4b2f      	ldr	r3, [pc, #188]	@ (8009854 <USBD_HID_Setup+0x208>)
 8009798:	613b      	str	r3, [r7, #16]
 800979a:	e015      	b.n	80097c8 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	885b      	ldrh	r3, [r3, #2]
 80097a0:	0a1b      	lsrs	r3, r3, #8
 80097a2:	b29b      	uxth	r3, r3
 80097a4:	2b21      	cmp	r3, #33	@ 0x21
 80097a6:	d108      	bne.n	80097ba <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 80097a8:	4b2b      	ldr	r3, [pc, #172]	@ (8009858 <USBD_HID_Setup+0x20c>)
 80097aa:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	88db      	ldrh	r3, [r3, #6]
 80097b0:	2b09      	cmp	r3, #9
 80097b2:	bf28      	it	cs
 80097b4:	2309      	movcs	r3, #9
 80097b6:	82bb      	strh	r3, [r7, #20]
 80097b8:	e006      	b.n	80097c8 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 80097ba:	6839      	ldr	r1, [r7, #0]
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f001 fd94 	bl	800b2ea <USBD_CtlError>
            ret = USBD_FAIL;
 80097c2:	2303      	movs	r3, #3
 80097c4:	75fb      	strb	r3, [r7, #23]
            break;
 80097c6:	e037      	b.n	8009838 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 80097c8:	8abb      	ldrh	r3, [r7, #20]
 80097ca:	461a      	mov	r2, r3
 80097cc:	6939      	ldr	r1, [r7, #16]
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f001 ff0b 	bl	800b5ea <USBD_CtlSendData>
          break;
 80097d4:	e030      	b.n	8009838 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80097dc:	b2db      	uxtb	r3, r3
 80097de:	2b03      	cmp	r3, #3
 80097e0:	d107      	bne.n	80097f2 <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	3308      	adds	r3, #8
 80097e6:	2201      	movs	r2, #1
 80097e8:	4619      	mov	r1, r3
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f001 fefd 	bl	800b5ea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80097f0:	e022      	b.n	8009838 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80097f2:	6839      	ldr	r1, [r7, #0]
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f001 fd78 	bl	800b2ea <USBD_CtlError>
            ret = USBD_FAIL;
 80097fa:	2303      	movs	r3, #3
 80097fc:	75fb      	strb	r3, [r7, #23]
          break;
 80097fe:	e01b      	b.n	8009838 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009806:	b2db      	uxtb	r3, r3
 8009808:	2b03      	cmp	r3, #3
 800980a:	d106      	bne.n	800981a <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	885b      	ldrh	r3, [r3, #2]
 8009810:	b2db      	uxtb	r3, r3
 8009812:	461a      	mov	r2, r3
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009818:	e00e      	b.n	8009838 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800981a:	6839      	ldr	r1, [r7, #0]
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f001 fd64 	bl	800b2ea <USBD_CtlError>
            ret = USBD_FAIL;
 8009822:	2303      	movs	r3, #3
 8009824:	75fb      	strb	r3, [r7, #23]
          break;
 8009826:	e007      	b.n	8009838 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009828:	6839      	ldr	r1, [r7, #0]
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f001 fd5d 	bl	800b2ea <USBD_CtlError>
          ret = USBD_FAIL;
 8009830:	2303      	movs	r3, #3
 8009832:	75fb      	strb	r3, [r7, #23]
          break;
 8009834:	e000      	b.n	8009838 <USBD_HID_Setup+0x1ec>
          break;
 8009836:	bf00      	nop
      }
      break;
 8009838:	e006      	b.n	8009848 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 800983a:	6839      	ldr	r1, [r7, #0]
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f001 fd54 	bl	800b2ea <USBD_CtlError>
      ret = USBD_FAIL;
 8009842:	2303      	movs	r3, #3
 8009844:	75fb      	strb	r3, [r7, #23]
      break;
 8009846:	bf00      	nop
  }

  return (uint8_t)ret;
 8009848:	7dfb      	ldrb	r3, [r7, #23]
}
 800984a:	4618      	mov	r0, r3
 800984c:	3718      	adds	r7, #24
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}
 8009852:	bf00      	nop
 8009854:	200000f4 	.word	0x200000f4
 8009858:	200000e8 	.word	0x200000e8

0800985c <USBD_HID_SendReport>:
  * @param  ClassId: The Class ID
  * @retval status
  */
#ifdef USE_USBD_COMPOSITE
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len, uint8_t ClassId)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b086      	sub	sp, #24
 8009860:	af00      	add	r7, sp, #0
 8009862:	60f8      	str	r0, [r7, #12]
 8009864:	60b9      	str	r1, [r7, #8]
 8009866:	4611      	mov	r1, r2
 8009868:	461a      	mov	r2, r3
 800986a:	460b      	mov	r3, r1
 800986c:	80fb      	strh	r3, [r7, #6]
 800986e:	4613      	mov	r3, r2
 8009870:	717b      	strb	r3, [r7, #5]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
 8009872:	797b      	ldrb	r3, [r7, #5]
 8009874:	68fa      	ldr	r2, [r7, #12]
 8009876:	33b0      	adds	r3, #176	@ 0xb0
 8009878:	009b      	lsls	r3, r3, #2
 800987a:	4413      	add	r3, r2
 800987c:	685b      	ldr	r3, [r3, #4]
 800987e:	617b      	str	r3, [r7, #20]
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 8009880:	697b      	ldr	r3, [r7, #20]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d101      	bne.n	800988a <USBD_HID_SendReport+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009886:	2303      	movs	r3, #3
 8009888:	e01e      	b.n	80098c8 <USBD_HID_SendReport+0x6c>
  }

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
 800988a:	797b      	ldrb	r3, [r7, #5]
 800988c:	2203      	movs	r2, #3
 800988e:	2180      	movs	r1, #128	@ 0x80
 8009890:	68f8      	ldr	r0, [r7, #12]
 8009892:	f000 feab 	bl	800a5ec <USBD_CoreGetEPAdd>
 8009896:	4603      	mov	r3, r0
 8009898:	461a      	mov	r2, r3
 800989a:	4b0d      	ldr	r3, [pc, #52]	@ (80098d0 <USBD_HID_SendReport+0x74>)
 800989c:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80098a4:	b2db      	uxtb	r3, r3
 80098a6:	2b03      	cmp	r3, #3
 80098a8:	d10d      	bne.n	80098c6 <USBD_HID_SendReport+0x6a>
  {
    if (hhid->state == USBD_HID_IDLE)
 80098aa:	697b      	ldr	r3, [r7, #20]
 80098ac:	7b1b      	ldrb	r3, [r3, #12]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d109      	bne.n	80098c6 <USBD_HID_SendReport+0x6a>
    {
      hhid->state = USBD_HID_BUSY;
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	2201      	movs	r2, #1
 80098b6:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 80098b8:	4b05      	ldr	r3, [pc, #20]	@ (80098d0 <USBD_HID_SendReport+0x74>)
 80098ba:	7819      	ldrb	r1, [r3, #0]
 80098bc:	88fb      	ldrh	r3, [r7, #6]
 80098be:	68ba      	ldr	r2, [r7, #8]
 80098c0:	68f8      	ldr	r0, [r7, #12]
 80098c2:	f000 f99e 	bl	8009c02 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 80098c6:	2300      	movs	r3, #0
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	3718      	adds	r7, #24
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}
 80098d0:	2000013e 	.word	0x2000013e

080098d4 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80098d4:	b480      	push	{r7}
 80098d6:	b083      	sub	sp, #12
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
 80098dc:	460b      	mov	r3, r1
 80098de:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80098e6:	687a      	ldr	r2, [r7, #4]
 80098e8:	33b0      	adds	r3, #176	@ 0xb0
 80098ea:	009b      	lsls	r3, r3, #2
 80098ec:	4413      	add	r3, r2
 80098ee:	685b      	ldr	r3, [r3, #4]
 80098f0:	2200      	movs	r2, #0
 80098f2:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80098f4:	2300      	movs	r3, #0
}
 80098f6:	4618      	mov	r0, r3
 80098f8:	370c      	adds	r7, #12
 80098fa:	46bd      	mov	sp, r7
 80098fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009900:	4770      	bx	lr

08009902 <HAL_PCD_SetupStageCallback>:
extern PCD_HandleTypeDef hpcd_USB_DRD_FS;
/* Private function prototypes -----------------------------------------------*/
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status);
/* Private functions ---------------------------------------------------------*/
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8009902:	b580      	push	{r7, lr}
 8009904:	b082      	sub	sp, #8
 8009906:	af00      	add	r7, sp, #0
 8009908:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	f8d3 22dc 	ldr.w	r2, [r3, #732]	@ 0x2dc
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 8009916:	4619      	mov	r1, r3
 8009918:	4610      	mov	r0, r2
 800991a:	f000 fb56 	bl	8009fca <USBD_LL_SetupStage>
}
 800991e:	bf00      	nop
 8009920:	3708      	adds	r7, #8
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}

08009926 <HAL_PCD_DataOutStageCallback>:
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8009926:	b580      	push	{r7, lr}
 8009928:	b082      	sub	sp, #8
 800992a:	af00      	add	r7, sp, #0
 800992c:	6078      	str	r0, [r7, #4]
 800992e:	460b      	mov	r3, r1
 8009930:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f8d3 02dc 	ldr.w	r0, [r3, #732]	@ 0x2dc
 8009938:	78fa      	ldrb	r2, [r7, #3]
 800993a:	6879      	ldr	r1, [r7, #4]
 800993c:	4613      	mov	r3, r2
 800993e:	009b      	lsls	r3, r3, #2
 8009940:	4413      	add	r3, r2
 8009942:	00db      	lsls	r3, r3, #3
 8009944:	440b      	add	r3, r1
 8009946:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800994a:	681a      	ldr	r2, [r3, #0]
 800994c:	78fb      	ldrb	r3, [r7, #3]
 800994e:	4619      	mov	r1, r3
 8009950:	f000 fb90 	bl	800a074 <USBD_LL_DataOutStage>
}
 8009954:	bf00      	nop
 8009956:	3708      	adds	r7, #8
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}

0800995c <HAL_PCD_DataInStageCallback>:
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b082      	sub	sp, #8
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
 8009964:	460b      	mov	r3, r1
 8009966:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f8d3 02dc 	ldr.w	r0, [r3, #732]	@ 0x2dc
 800996e:	78fa      	ldrb	r2, [r7, #3]
 8009970:	6879      	ldr	r1, [r7, #4]
 8009972:	4613      	mov	r3, r2
 8009974:	009b      	lsls	r3, r3, #2
 8009976:	4413      	add	r3, r2
 8009978:	00db      	lsls	r3, r3, #3
 800997a:	440b      	add	r3, r1
 800997c:	3328      	adds	r3, #40	@ 0x28
 800997e:	681a      	ldr	r2, [r3, #0]
 8009980:	78fb      	ldrb	r3, [r7, #3]
 8009982:	4619      	mov	r1, r3
 8009984:	f000 fc29 	bl	800a1da <USBD_LL_DataInStage>
}
 8009988:	bf00      	nop
 800998a:	3708      	adds	r7, #8
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}

08009990 <HAL_PCD_SOFCallback>:
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b082      	sub	sp, #8
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800999e:	4618      	mov	r0, r3
 80099a0:	f000 fd4d 	bl	800a43e <USBD_LL_SOF>
}
 80099a4:	bf00      	nop
 80099a6:	3708      	adds	r7, #8
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}

080099ac <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b084      	sub	sp, #16
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80099b4:	2301      	movs	r3, #1
 80099b6:	73fb      	strb	r3, [r7, #15]
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	79db      	ldrb	r3, [r3, #7]
 80099bc:	2b02      	cmp	r3, #2
 80099be:	d001      	beq.n	80099c4 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80099c0:	f7f6 feb8 	bl	8000734 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 80099ca:	7bfa      	ldrb	r2, [r7, #15]
 80099cc:	4611      	mov	r1, r2
 80099ce:	4618      	mov	r0, r3
 80099d0:	f000 fd25 	bl	800a41e <USBD_LL_SetSpeed>
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 80099da:	4618      	mov	r0, r3
 80099dc:	f000 fcaf 	bl	800a33e <USBD_LL_Reset>
}
 80099e0:	bf00      	nop
 80099e2:	3710      	adds	r7, #16
 80099e4:	46bd      	mov	sp, r7
 80099e6:	bd80      	pop	{r7, pc}

080099e8 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b082      	sub	sp, #8
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
	/* Link the driver to the stack */
	pdev->pData  = &hpcd_USB_DRD_FS;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	4a20      	ldr	r2, [pc, #128]	@ (8009a74 <USBD_LL_Init+0x8c>)
 80099f4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
	hpcd_USB_DRD_FS.pData = pdev;
 80099f8:	4a1e      	ldr	r2, [pc, #120]	@ (8009a74 <USBD_LL_Init+0x8c>)
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f8c2 32dc 	str.w	r3, [r2, #732]	@ 0x2dc
	/* Initialize LL Driver */
	MX_USB_PCD_Init();
 8009a00:	f7f6 fd90 	bl	8000524 <MX_USB_PCD_Init>
	/* Control Endpoints */
	HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x20);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8009a0a:	2320      	movs	r3, #32
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	2100      	movs	r1, #0
 8009a10:	f7f9 ffba 	bl	8003988 <HAL_PCDEx_PMAConfig>
	HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x60);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8009a1a:	2360      	movs	r3, #96	@ 0x60
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	2180      	movs	r1, #128	@ 0x80
 8009a20:	f7f9 ffb2 	bl	8003988 <HAL_PCDEx_PMAConfig>
	/* HID Endpoints */
	HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , HID_EPIN_ADDR , PCD_SNG_BUF, 0xA0);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8009a2a:	23a0      	movs	r3, #160	@ 0xa0
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	2181      	movs	r1, #129	@ 0x81
 8009a30:	f7f9 ffaa 	bl	8003988 <HAL_PCDEx_PMAConfig>
	/* CDC Endpoints */
	HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_OUT_EP , PCD_SNG_BUF, 0xE0);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8009a3a:	23e0      	movs	r3, #224	@ 0xe0
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	2101      	movs	r1, #1
 8009a40:	f7f9 ffa2 	bl	8003988 <HAL_PCDEx_PMAConfig>
	HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_IN_EP , PCD_SNG_BUF, 0x120);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8009a4a:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8009a4e:	2200      	movs	r2, #0
 8009a50:	2182      	movs	r1, #130	@ 0x82
 8009a52:	f7f9 ff99 	bl	8003988 <HAL_PCDEx_PMAConfig>
	HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_CMD_EP , PCD_SNG_BUF, 0x140);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8009a5c:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8009a60:	2200      	movs	r2, #0
 8009a62:	2183      	movs	r1, #131	@ 0x83
 8009a64:	f7f9 ff90 	bl	8003988 <HAL_PCDEx_PMAConfig>
	return USBD_OK;
 8009a68:	2300      	movs	r3, #0
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	3708      	adds	r7, #8
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bd80      	pop	{r7, pc}
 8009a72:	bf00      	nop
 8009a74:	2000026c 	.word	0x2000026c

08009a78 <USBD_LL_Start>:
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_DeInit(pdev->pData);
	return USBD_Get_USB_Status(hal_status);
}
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b084      	sub	sp, #16
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_Start(pdev->pData);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009a86:	4618      	mov	r0, r3
 8009a88:	f7f8 fc62 	bl	8002350 <HAL_PCD_Start>
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	73fb      	strb	r3, [r7, #15]
	return  USBD_Get_USB_Status(hal_status);
 8009a90:	7bfb      	ldrb	r3, [r7, #15]
 8009a92:	4618      	mov	r0, r3
 8009a94:	f000 f916 	bl	8009cc4 <USBD_Get_USB_Status>
 8009a98:	4603      	mov	r3, r0
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	3710      	adds	r7, #16
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}

08009aa2 <USBD_LL_OpenEP>:
	hal_status = HAL_PCD_Stop(pdev->pData);
	return USBD_Get_USB_Status(hal_status);
}
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
		uint8_t ep_type, uint16_t ep_mps)
{
 8009aa2:	b580      	push	{r7, lr}
 8009aa4:	b084      	sub	sp, #16
 8009aa6:	af00      	add	r7, sp, #0
 8009aa8:	6078      	str	r0, [r7, #4]
 8009aaa:	4608      	mov	r0, r1
 8009aac:	4611      	mov	r1, r2
 8009aae:	461a      	mov	r2, r3
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	70fb      	strb	r3, [r7, #3]
 8009ab4:	460b      	mov	r3, r1
 8009ab6:	70bb      	strb	r3, [r7, #2]
 8009ab8:	4613      	mov	r3, r2
 8009aba:	803b      	strh	r3, [r7, #0]
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8009ac2:	78bb      	ldrb	r3, [r7, #2]
 8009ac4:	883a      	ldrh	r2, [r7, #0]
 8009ac6:	78f9      	ldrb	r1, [r7, #3]
 8009ac8:	f7f8 fd91 	bl	80025ee <HAL_PCD_EP_Open>
 8009acc:	4603      	mov	r3, r0
 8009ace:	73fb      	strb	r3, [r7, #15]
	return USBD_Get_USB_Status(hal_status);
 8009ad0:	7bfb      	ldrb	r3, [r7, #15]
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	f000 f8f6 	bl	8009cc4 <USBD_Get_USB_Status>
 8009ad8:	4603      	mov	r3, r0
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	3710      	adds	r7, #16
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}

08009ae2 <USBD_LL_CloseEP>:
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ae2:	b580      	push	{r7, lr}
 8009ae4:	b084      	sub	sp, #16
 8009ae6:	af00      	add	r7, sp, #0
 8009ae8:	6078      	str	r0, [r7, #4]
 8009aea:	460b      	mov	r3, r1
 8009aec:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009af4:	78fa      	ldrb	r2, [r7, #3]
 8009af6:	4611      	mov	r1, r2
 8009af8:	4618      	mov	r0, r3
 8009afa:	f7f8 fdd9 	bl	80026b0 <HAL_PCD_EP_Close>
 8009afe:	4603      	mov	r3, r0
 8009b00:	73fb      	strb	r3, [r7, #15]
	return USBD_Get_USB_Status(hal_status);
 8009b02:	7bfb      	ldrb	r3, [r7, #15]
 8009b04:	4618      	mov	r0, r3
 8009b06:	f000 f8dd 	bl	8009cc4 <USBD_Get_USB_Status>
 8009b0a:	4603      	mov	r3, r0
}
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	3710      	adds	r7, #16
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd80      	pop	{r7, pc}

08009b14 <USBD_LL_StallEP>:
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
	return USBD_Get_USB_Status(hal_status);
}
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b084      	sub	sp, #16
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
 8009b1c:	460b      	mov	r3, r1
 8009b1e:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009b26:	78fa      	ldrb	r2, [r7, #3]
 8009b28:	4611      	mov	r1, r2
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f7f8 fe8c 	bl	8002848 <HAL_PCD_EP_SetStall>
 8009b30:	4603      	mov	r3, r0
 8009b32:	73fb      	strb	r3, [r7, #15]
	return USBD_Get_USB_Status(hal_status);
 8009b34:	7bfb      	ldrb	r3, [r7, #15]
 8009b36:	4618      	mov	r0, r3
 8009b38:	f000 f8c4 	bl	8009cc4 <USBD_Get_USB_Status>
 8009b3c:	4603      	mov	r3, r0
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	3710      	adds	r7, #16
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}

08009b46 <USBD_LL_ClearStallEP>:
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev,
		uint8_t ep_addr)
{
 8009b46:	b580      	push	{r7, lr}
 8009b48:	b084      	sub	sp, #16
 8009b4a:	af00      	add	r7, sp, #0
 8009b4c:	6078      	str	r0, [r7, #4]
 8009b4e:	460b      	mov	r3, r1
 8009b50:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009b58:	78fa      	ldrb	r2, [r7, #3]
 8009b5a:	4611      	mov	r1, r2
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	f7f8 fec7 	bl	80028f0 <HAL_PCD_EP_ClrStall>
 8009b62:	4603      	mov	r3, r0
 8009b64:	73fb      	strb	r3, [r7, #15]
	return USBD_Get_USB_Status(hal_status);
 8009b66:	7bfb      	ldrb	r3, [r7, #15]
 8009b68:	4618      	mov	r0, r3
 8009b6a:	f000 f8ab 	bl	8009cc4 <USBD_Get_USB_Status>
 8009b6e:	4603      	mov	r3, r0
}
 8009b70:	4618      	mov	r0, r3
 8009b72:	3710      	adds	r7, #16
 8009b74:	46bd      	mov	sp, r7
 8009b76:	bd80      	pop	{r7, pc}

08009b78 <USBD_LL_IsStallEP>:
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b085      	sub	sp, #20
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
 8009b80:	460b      	mov	r3, r1
 8009b82:	70fb      	strb	r3, [r7, #3]
	PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009b8a:	60fb      	str	r3, [r7, #12]
	if((ep_addr & 0x80) == 0x80)
 8009b8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	da0b      	bge.n	8009bac <USBD_LL_IsStallEP+0x34>
	{
		return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009b94:	78fb      	ldrb	r3, [r7, #3]
 8009b96:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009b9a:	68f9      	ldr	r1, [r7, #12]
 8009b9c:	4613      	mov	r3, r2
 8009b9e:	009b      	lsls	r3, r3, #2
 8009ba0:	4413      	add	r3, r2
 8009ba2:	00db      	lsls	r3, r3, #3
 8009ba4:	440b      	add	r3, r1
 8009ba6:	3316      	adds	r3, #22
 8009ba8:	781b      	ldrb	r3, [r3, #0]
 8009baa:	e00b      	b.n	8009bc4 <USBD_LL_IsStallEP+0x4c>
	}
	else
	{
		return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009bac:	78fb      	ldrb	r3, [r7, #3]
 8009bae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009bb2:	68f9      	ldr	r1, [r7, #12]
 8009bb4:	4613      	mov	r3, r2
 8009bb6:	009b      	lsls	r3, r3, #2
 8009bb8:	4413      	add	r3, r2
 8009bba:	00db      	lsls	r3, r3, #3
 8009bbc:	440b      	add	r3, r1
 8009bbe:	f503 73ab 	add.w	r3, r3, #342	@ 0x156
 8009bc2:	781b      	ldrb	r3, [r3, #0]
	}
}
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	3714      	adds	r7, #20
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bce:	4770      	bx	lr

08009bd0 <USBD_LL_SetUSBAddress>:
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev,
		uint8_t dev_addr)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b084      	sub	sp, #16
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
 8009bd8:	460b      	mov	r3, r1
 8009bda:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009be2:	78fa      	ldrb	r2, [r7, #3]
 8009be4:	4611      	mov	r1, r2
 8009be6:	4618      	mov	r0, r3
 8009be8:	f7f8 fcdd 	bl	80025a6 <HAL_PCD_SetAddress>
 8009bec:	4603      	mov	r3, r0
 8009bee:	73fb      	strb	r3, [r7, #15]
	return USBD_Get_USB_Status(hal_status);
 8009bf0:	7bfb      	ldrb	r3, [r7, #15]
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f000 f866 	bl	8009cc4 <USBD_Get_USB_Status>
 8009bf8:	4603      	mov	r3, r0
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	3710      	adds	r7, #16
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}

08009c02 <USBD_LL_Transmit>:
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
		uint8_t *pbuf, uint32_t size)
{
 8009c02:	b580      	push	{r7, lr}
 8009c04:	b086      	sub	sp, #24
 8009c06:	af00      	add	r7, sp, #0
 8009c08:	60f8      	str	r0, [r7, #12]
 8009c0a:	607a      	str	r2, [r7, #4]
 8009c0c:	603b      	str	r3, [r7, #0]
 8009c0e:	460b      	mov	r3, r1
 8009c10:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8009c18:	7af9      	ldrb	r1, [r7, #11]
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	687a      	ldr	r2, [r7, #4]
 8009c1e:	f7f8 fddb 	bl	80027d8 <HAL_PCD_EP_Transmit>
 8009c22:	4603      	mov	r3, r0
 8009c24:	75fb      	strb	r3, [r7, #23]
	return USBD_Get_USB_Status(hal_status);
 8009c26:	7dfb      	ldrb	r3, [r7, #23]
 8009c28:	4618      	mov	r0, r3
 8009c2a:	f000 f84b 	bl	8009cc4 <USBD_Get_USB_Status>
 8009c2e:	4603      	mov	r3, r0
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	3718      	adds	r7, #24
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd80      	pop	{r7, pc}

08009c38 <USBD_LL_PrepareReceive>:
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev,
		uint8_t ep_addr, uint8_t *pbuf,
		uint32_t size)
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b086      	sub	sp, #24
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	60f8      	str	r0, [r7, #12]
 8009c40:	607a      	str	r2, [r7, #4]
 8009c42:	603b      	str	r3, [r7, #0]
 8009c44:	460b      	mov	r3, r1
 8009c46:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8009c4e:	7af9      	ldrb	r1, [r7, #11]
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	687a      	ldr	r2, [r7, #4]
 8009c54:	f7f8 fd76 	bl	8002744 <HAL_PCD_EP_Receive>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	75fb      	strb	r3, [r7, #23]
	return USBD_Get_USB_Status(hal_status);
 8009c5c:	7dfb      	ldrb	r3, [r7, #23]
 8009c5e:	4618      	mov	r0, r3
 8009c60:	f000 f830 	bl	8009cc4 <USBD_Get_USB_Status>
 8009c64:	4603      	mov	r3, r0
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	3718      	adds	r7, #24
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}

08009c6e <USBD_LL_GetRxDataSize>:
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c6e:	b580      	push	{r7, lr}
 8009c70:	b082      	sub	sp, #8
 8009c72:	af00      	add	r7, sp, #0
 8009c74:	6078      	str	r0, [r7, #4]
 8009c76:	460b      	mov	r3, r1
 8009c78:	70fb      	strb	r3, [r7, #3]
	return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009c80:	78fa      	ldrb	r2, [r7, #3]
 8009c82:	4611      	mov	r1, r2
 8009c84:	4618      	mov	r0, r3
 8009c86:	f7f8 fd8f 	bl	80027a8 <HAL_PCD_EP_GetRxCount>
 8009c8a:	4603      	mov	r3, r0
}
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	3708      	adds	r7, #8
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}

08009c94 <USBD_static_malloc>:
void *USBD_static_malloc(uint32_t size)
{
 8009c94:	b480      	push	{r7}
 8009c96:	b083      	sub	sp, #12
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
	UNUSED(size);
	static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef) / 4) + 1]; /* On 32-bit boundary */
	return mem;
 8009c9c:	4b03      	ldr	r3, [pc, #12]	@ (8009cac <USBD_static_malloc+0x18>)
}
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	370c      	adds	r7, #12
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca8:	4770      	bx	lr
 8009caa:	bf00      	nop
 8009cac:	20000a8c 	.word	0x20000a8c

08009cb0 <USBD_static_free>:
void USBD_static_free(void *p)
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b083      	sub	sp, #12
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
	UNUSED(p);
}
 8009cb8:	bf00      	nop
 8009cba:	370c      	adds	r7, #12
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc2:	4770      	bx	lr

08009cc4 <USBD_Get_USB_Status>:
{
     HAL_Delay(Delay);
}

USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b085      	sub	sp, #20
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	4603      	mov	r3, r0
 8009ccc:	71fb      	strb	r3, [r7, #7]
	USBD_StatusTypeDef usb_status = USBD_OK;
 8009cce:	2300      	movs	r3, #0
 8009cd0:	73fb      	strb	r3, [r7, #15]
	switch (hal_status)
 8009cd2:	79fb      	ldrb	r3, [r7, #7]
 8009cd4:	2b03      	cmp	r3, #3
 8009cd6:	d817      	bhi.n	8009d08 <USBD_Get_USB_Status+0x44>
 8009cd8:	a201      	add	r2, pc, #4	@ (adr r2, 8009ce0 <USBD_Get_USB_Status+0x1c>)
 8009cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cde:	bf00      	nop
 8009ce0:	08009cf1 	.word	0x08009cf1
 8009ce4:	08009cf7 	.word	0x08009cf7
 8009ce8:	08009cfd 	.word	0x08009cfd
 8009cec:	08009d03 	.word	0x08009d03
	{
	case HAL_OK :
		usb_status = USBD_OK;
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	73fb      	strb	r3, [r7, #15]
		break;
 8009cf4:	e00b      	b.n	8009d0e <USBD_Get_USB_Status+0x4a>
	case HAL_ERROR :
		usb_status = USBD_FAIL;
 8009cf6:	2303      	movs	r3, #3
 8009cf8:	73fb      	strb	r3, [r7, #15]
		break;
 8009cfa:	e008      	b.n	8009d0e <USBD_Get_USB_Status+0x4a>
	case HAL_BUSY :
		usb_status = USBD_BUSY;
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	73fb      	strb	r3, [r7, #15]
		break;
 8009d00:	e005      	b.n	8009d0e <USBD_Get_USB_Status+0x4a>
	case HAL_TIMEOUT :
		usb_status = USBD_FAIL;
 8009d02:	2303      	movs	r3, #3
 8009d04:	73fb      	strb	r3, [r7, #15]
		break;
 8009d06:	e002      	b.n	8009d0e <USBD_Get_USB_Status+0x4a>
	default :
		usb_status = USBD_FAIL;
 8009d08:	2303      	movs	r3, #3
 8009d0a:	73fb      	strb	r3, [r7, #15]
		break;
 8009d0c:	bf00      	nop
	}
	return usb_status;
 8009d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	3714      	adds	r7, #20
 8009d14:	46bd      	mov	sp, r7
 8009d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1a:	4770      	bx	lr

08009d1c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b086      	sub	sp, #24
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	60f8      	str	r0, [r7, #12]
 8009d24:	60b9      	str	r1, [r7, #8]
 8009d26:	4613      	mov	r3, r2
 8009d28:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d10a      	bne.n	8009d46 <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 8009d30:	4827      	ldr	r0, [pc, #156]	@ (8009dd0 <USBD_Init+0xb4>)
 8009d32:	f001 fd9d 	bl	800b870 <iprintf>
 8009d36:	4827      	ldr	r0, [pc, #156]	@ (8009dd4 <USBD_Init+0xb8>)
 8009d38:	f001 fd9a 	bl	800b870 <iprintf>
 8009d3c:	200a      	movs	r0, #10
 8009d3e:	f001 fda9 	bl	800b894 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009d42:	2303      	movs	r3, #3
 8009d44:	e03f      	b.n	8009dc6 <USBD_Init+0xaa>
  }

#ifdef USE_USBD_COMPOSITE
  /* Parse the table of classes in use */
  for (uint32_t i = 0; i < USBD_MAX_SUPPORTED_CLASS; i++)
 8009d46:	2300      	movs	r3, #0
 8009d48:	617b      	str	r3, [r7, #20]
 8009d4a:	e021      	b.n	8009d90 <USBD_Init+0x74>
  {
    /* Unlink previous class*/
    pdev->pClass[i] = NULL;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	697a      	ldr	r2, [r7, #20]
 8009d50:	32ae      	adds	r2, #174	@ 0xae
 8009d52:	2100      	movs	r1, #0
 8009d54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pUserData[i] = NULL;
 8009d58:	68fa      	ldr	r2, [r7, #12]
 8009d5a:	697b      	ldr	r3, [r7, #20]
 8009d5c:	33b2      	adds	r3, #178	@ 0xb2
 8009d5e:	009b      	lsls	r3, r3, #2
 8009d60:	4413      	add	r3, r2
 8009d62:	2200      	movs	r2, #0
 8009d64:	605a      	str	r2, [r3, #4]

    /* Set class as inactive */
    pdev->tclasslist[i].Active = 0;
 8009d66:	68fa      	ldr	r2, [r7, #12]
 8009d68:	697b      	ldr	r3, [r7, #20]
 8009d6a:	212c      	movs	r1, #44	@ 0x2c
 8009d6c:	fb01 f303 	mul.w	r3, r1, r3
 8009d70:	4413      	add	r3, r2
 8009d72:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8009d76:	2200      	movs	r2, #0
 8009d78:	601a      	str	r2, [r3, #0]
    pdev->NumClasses = 0;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	f8c3 22e4 	str.w	r2, [r3, #740]	@ 0x2e4
    pdev->classId = 0;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	2200      	movs	r2, #0
 8009d86:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
  for (uint32_t i = 0; i < USBD_MAX_SUPPORTED_CLASS; i++)
 8009d8a:	697b      	ldr	r3, [r7, #20]
 8009d8c:	3301      	adds	r3, #1
 8009d8e:	617b      	str	r3, [r7, #20]
 8009d90:	697b      	ldr	r3, [r7, #20]
 8009d92:	2b01      	cmp	r3, #1
 8009d94:	d9da      	bls.n	8009d4c <USBD_Init+0x30>
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
  pdev->pUserData[0] = NULL;
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	2200      	movs	r2, #0
 8009d9a:	f8c3 22dc 	str.w	r2, [r3, #732]	@ 0x2dc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d003      	beq.n	8009dac <USBD_Init+0x90>
  {
    pdev->pDesc = pdesc;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	68ba      	ldr	r2, [r7, #8]
 8009da8:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	2201      	movs	r2, #1
 8009db0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	79fa      	ldrb	r2, [r7, #7]
 8009db8:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009dba:	68f8      	ldr	r0, [r7, #12]
 8009dbc:	f7ff fe14 	bl	80099e8 <USBD_LL_Init>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	74fb      	strb	r3, [r7, #19]

  return ret;
 8009dc4:	7cfb      	ldrb	r3, [r7, #19]
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3718      	adds	r7, #24
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}
 8009dce:	bf00      	nop
 8009dd0:	0800c600 	.word	0x0800c600
 8009dd4:	0800c608 	.word	0x0800c608

08009dd8 <USBD_RegisterClassComposite>:
  * @param  EpAddr: Endpoint Address handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClassComposite(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass,
                                                USBD_CompositeClassTypeDef classtype, uint8_t *EpAddr)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b086      	sub	sp, #24
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	60f8      	str	r0, [r7, #12]
 8009de0:	60b9      	str	r1, [r7, #8]
 8009de2:	603b      	str	r3, [r7, #0]
 8009de4:	4613      	mov	r3, r2
 8009de6:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009de8:	2300      	movs	r3, #0
 8009dea:	75fb      	strb	r3, [r7, #23]
  uint16_t len = 0U;
 8009dec:	2300      	movs	r3, #0
 8009dee:	82bb      	strh	r3, [r7, #20]

  if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) && (pdev->NumClasses < USBD_MAX_SUPPORTED_CLASS))
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8009df6:	2b01      	cmp	r3, #1
 8009df8:	d83d      	bhi.n	8009e76 <USBD_RegisterClassComposite+0x9e>
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	f8d3 32e4 	ldr.w	r3, [r3, #740]	@ 0x2e4
 8009e00:	2b01      	cmp	r3, #1
 8009e02:	d838      	bhi.n	8009e76 <USBD_RegisterClassComposite+0x9e>
  {
    if ((uint32_t)pclass != 0U)
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d02a      	beq.n	8009e60 <USBD_RegisterClassComposite+0x88>
    {
      /* Link the class to the USB Device handle */
      pdev->pClass[pdev->classId] = pclass;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	32ae      	adds	r2, #174	@ 0xae
 8009e14:	68b9      	ldr	r1, [r7, #8]
 8009e16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      ret = USBD_OK;
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	75fb      	strb	r3, [r7, #23]

      pdev->tclasslist[pdev->classId].EpAdd = EpAddr;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8009e24:	68fa      	ldr	r2, [r7, #12]
 8009e26:	212c      	movs	r1, #44	@ 0x2c
 8009e28:	fb01 f303 	mul.w	r3, r1, r3
 8009e2c:	4413      	add	r3, r2
 8009e2e:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8009e32:	683a      	ldr	r2, [r7, #0]
 8009e34:	601a      	str	r2, [r3, #0]

      /* Call the composite class builder */
      (void)USBD_CMPSIT_AddClass(pdev, pclass, classtype, 0);
 8009e36:	79fa      	ldrb	r2, [r7, #7]
 8009e38:	2300      	movs	r3, #0
 8009e3a:	68b9      	ldr	r1, [r7, #8]
 8009e3c:	68f8      	ldr	r0, [r7, #12]
 8009e3e:	f7fe fd61 	bl	8008904 <USBD_CMPSIT_AddClass>

      /* Increment the ClassId for the next occurrence */
      pdev->classId ++;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8009e48:	1c5a      	adds	r2, r3, #1
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
      pdev->NumClasses ++;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	f8d3 32e4 	ldr.w	r3, [r3, #740]	@ 0x2e4
 8009e56:	1c5a      	adds	r2, r3, #1
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	f8c3 22e4 	str.w	r2, [r3, #740]	@ 0x2e4
 8009e5e:	e00a      	b.n	8009e76 <USBD_RegisterClassComposite+0x9e>
    }
    else
    {
#if (USBD_DEBUG_LEVEL > 1U)
      USBD_ErrLog("Invalid Class handle");
 8009e60:	480e      	ldr	r0, [pc, #56]	@ (8009e9c <USBD_RegisterClassComposite+0xc4>)
 8009e62:	f001 fd05 	bl	800b870 <iprintf>
 8009e66:	480e      	ldr	r0, [pc, #56]	@ (8009ea0 <USBD_RegisterClassComposite+0xc8>)
 8009e68:	f001 fd02 	bl	800b870 <iprintf>
 8009e6c:	200a      	movs	r0, #10
 8009e6e:	f001 fd11 	bl	800b894 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
      ret = USBD_FAIL;
 8009e72:	2303      	movs	r3, #3
 8009e74:	75fb      	strb	r3, [r7, #23]
    }
  }

  if (ret == USBD_OK)
 8009e76:	7dfb      	ldrb	r3, [r7, #23]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d109      	bne.n	8009e90 <USBD_RegisterClassComposite+0xb8>
  {
    /* Get Device Configuration Descriptor */
#ifdef USE_USB_HS
    pdev->pConfDesc = USBD_CMPSIT.GetHSConfigDescriptor(&len);
#else /* Default USE_USB_FS */
    pdev->pConfDesc = USBD_CMPSIT.GetFSConfigDescriptor(&len);
 8009e7c:	4b09      	ldr	r3, [pc, #36]	@ (8009ea4 <USBD_RegisterClassComposite+0xcc>)
 8009e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e80:	f107 0214 	add.w	r2, r7, #20
 8009e84:	4610      	mov	r0, r2
 8009e86:	4798      	blx	r3
 8009e88:	4602      	mov	r2, r0
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	f8c3 22dc 	str.w	r2, [r3, #732]	@ 0x2dc
#endif /* USE_USB_FS */
  }

  return ret;
 8009e90:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	3718      	adds	r7, #24
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}
 8009e9a:	bf00      	nop
 8009e9c:	0800c600 	.word	0x0800c600
 8009ea0:	0800c620 	.word	0x0800c620
 8009ea4:	20000068 	.word	0x20000068

08009ea8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b082      	sub	sp, #8
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	f7ff fddd 	bl	8009a78 <USBD_LL_Start>
 8009ebe:	4603      	mov	r3, r0
}
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	3708      	adds	r7, #8
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bd80      	pop	{r7, pc}

08009ec8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009ec8:	b480      	push	{r7}
 8009eca:	b083      	sub	sp, #12
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009ed0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	370c      	adds	r7, #12
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009edc:	4770      	bx	lr

08009ede <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009ede:	b580      	push	{r7, lr}
 8009ee0:	b084      	sub	sp, #16
 8009ee2:	af00      	add	r7, sp, #0
 8009ee4:	6078      	str	r0, [r7, #4]
 8009ee6:	460b      	mov	r3, r1
 8009ee8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009eea:	2300      	movs	r3, #0
 8009eec:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Parse the table of classes in use */
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 8009eee:	2300      	movs	r3, #0
 8009ef0:	60bb      	str	r3, [r7, #8]
 8009ef2:	e027      	b.n	8009f44 <USBD_SetClassConfig+0x66>
  {
    /* Check if current class is in use */
    if ((pdev->tclasslist[i].Active) == 1U)
 8009ef4:	687a      	ldr	r2, [r7, #4]
 8009ef6:	68bb      	ldr	r3, [r7, #8]
 8009ef8:	212c      	movs	r1, #44	@ 0x2c
 8009efa:	fb01 f303 	mul.w	r3, r1, r3
 8009efe:	4413      	add	r3, r2
 8009f00:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	2b01      	cmp	r3, #1
 8009f08:	d119      	bne.n	8009f3e <USBD_SetClassConfig+0x60>
    {
      if (pdev->pClass[i] != NULL)
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	68ba      	ldr	r2, [r7, #8]
 8009f0e:	32ae      	adds	r2, #174	@ 0xae
 8009f10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d012      	beq.n	8009f3e <USBD_SetClassConfig+0x60>
      {
        pdev->classId = i;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	68ba      	ldr	r2, [r7, #8]
 8009f1c:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
        /* Set configuration  and Start the Class*/
        if (pdev->pClass[i]->Init(pdev, cfgidx) != 0U)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	68ba      	ldr	r2, [r7, #8]
 8009f24:	32ae      	adds	r2, #174	@ 0xae
 8009f26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	78fa      	ldrb	r2, [r7, #3]
 8009f2e:	4611      	mov	r1, r2
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	4798      	blx	r3
 8009f34:	4603      	mov	r3, r0
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d001      	beq.n	8009f3e <USBD_SetClassConfig+0x60>
        {
          ret = USBD_FAIL;
 8009f3a:	2303      	movs	r3, #3
 8009f3c:	73fb      	strb	r3, [r7, #15]
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	3301      	adds	r3, #1
 8009f42:	60bb      	str	r3, [r7, #8]
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	2b01      	cmp	r3, #1
 8009f48:	d9d4      	bls.n	8009ef4 <USBD_SetClassConfig+0x16>
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	3710      	adds	r7, #16
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bd80      	pop	{r7, pc}

08009f54 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b084      	sub	sp, #16
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
 8009f5c:	460b      	mov	r3, r1
 8009f5e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009f60:	2300      	movs	r3, #0
 8009f62:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Parse the table of classes in use */
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 8009f64:	2300      	movs	r3, #0
 8009f66:	60bb      	str	r3, [r7, #8]
 8009f68:	e027      	b.n	8009fba <USBD_ClrClassConfig+0x66>
  {
    /* Check if current class is in use */
    if ((pdev->tclasslist[i].Active) == 1U)
 8009f6a:	687a      	ldr	r2, [r7, #4]
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	212c      	movs	r1, #44	@ 0x2c
 8009f70:	fb01 f303 	mul.w	r3, r1, r3
 8009f74:	4413      	add	r3, r2
 8009f76:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	2b01      	cmp	r3, #1
 8009f7e:	d119      	bne.n	8009fb4 <USBD_ClrClassConfig+0x60>
    {
      if (pdev->pClass[i] != NULL)
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	68ba      	ldr	r2, [r7, #8]
 8009f84:	32ae      	adds	r2, #174	@ 0xae
 8009f86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d012      	beq.n	8009fb4 <USBD_ClrClassConfig+0x60>
      {
        pdev->classId = i;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	68ba      	ldr	r2, [r7, #8]
 8009f92:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
        /* Clear configuration  and De-initialize the Class process */
        if (pdev->pClass[i]->DeInit(pdev, cfgidx) != 0U)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	68ba      	ldr	r2, [r7, #8]
 8009f9a:	32ae      	adds	r2, #174	@ 0xae
 8009f9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fa0:	685b      	ldr	r3, [r3, #4]
 8009fa2:	78fa      	ldrb	r2, [r7, #3]
 8009fa4:	4611      	mov	r1, r2
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	4798      	blx	r3
 8009faa:	4603      	mov	r3, r0
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d001      	beq.n	8009fb4 <USBD_ClrClassConfig+0x60>
        {
          ret = USBD_FAIL;
 8009fb0:	2303      	movs	r3, #3
 8009fb2:	73fb      	strb	r3, [r7, #15]
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	3301      	adds	r3, #1
 8009fb8:	60bb      	str	r3, [r7, #8]
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	2b01      	cmp	r3, #1
 8009fbe:	d9d4      	bls.n	8009f6a <USBD_ClrClassConfig+0x16>
  {
    ret = USBD_FAIL;
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	3710      	adds	r7, #16
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}

08009fca <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009fca:	b580      	push	{r7, lr}
 8009fcc:	b084      	sub	sp, #16
 8009fce:	af00      	add	r7, sp, #0
 8009fd0:	6078      	str	r0, [r7, #4]
 8009fd2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009fda:	6839      	ldr	r1, [r7, #0]
 8009fdc:	4618      	mov	r0, r3
 8009fde:	f001 f94a 	bl	800b276 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2201      	movs	r2, #1
 8009fe6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8009ff0:	461a      	mov	r2, r3
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009ffe:	f003 031f 	and.w	r3, r3, #31
 800a002:	2b02      	cmp	r3, #2
 800a004:	d01a      	beq.n	800a03c <USBD_LL_SetupStage+0x72>
 800a006:	2b02      	cmp	r3, #2
 800a008:	d822      	bhi.n	800a050 <USBD_LL_SetupStage+0x86>
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d002      	beq.n	800a014 <USBD_LL_SetupStage+0x4a>
 800a00e:	2b01      	cmp	r3, #1
 800a010:	d00a      	beq.n	800a028 <USBD_LL_SetupStage+0x5e>
 800a012:	e01d      	b.n	800a050 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a01a:	4619      	mov	r1, r3
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	f000 fb67 	bl	800a6f0 <USBD_StdDevReq>
 800a022:	4603      	mov	r3, r0
 800a024:	73fb      	strb	r3, [r7, #15]
      break;
 800a026:	e020      	b.n	800a06a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a02e:	4619      	mov	r1, r3
 800a030:	6878      	ldr	r0, [r7, #4]
 800a032:	f000 fbcf 	bl	800a7d4 <USBD_StdItfReq>
 800a036:	4603      	mov	r3, r0
 800a038:	73fb      	strb	r3, [r7, #15]
      break;
 800a03a:	e016      	b.n	800a06a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a042:	4619      	mov	r1, r3
 800a044:	6878      	ldr	r0, [r7, #4]
 800a046:	f000 fc31 	bl	800a8ac <USBD_StdEPReq>
 800a04a:	4603      	mov	r3, r0
 800a04c:	73fb      	strb	r3, [r7, #15]
      break;
 800a04e:	e00c      	b.n	800a06a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a056:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a05a:	b2db      	uxtb	r3, r3
 800a05c:	4619      	mov	r1, r3
 800a05e:	6878      	ldr	r0, [r7, #4]
 800a060:	f7ff fd58 	bl	8009b14 <USBD_LL_StallEP>
 800a064:	4603      	mov	r3, r0
 800a066:	73fb      	strb	r3, [r7, #15]
      break;
 800a068:	bf00      	nop
  }

  return ret;
 800a06a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a06c:	4618      	mov	r0, r3
 800a06e:	3710      	adds	r7, #16
 800a070:	46bd      	mov	sp, r7
 800a072:	bd80      	pop	{r7, pc}

0800a074 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b086      	sub	sp, #24
 800a078:	af00      	add	r7, sp, #0
 800a07a:	60f8      	str	r0, [r7, #12]
 800a07c:	460b      	mov	r3, r1
 800a07e:	607a      	str	r2, [r7, #4]
 800a080:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a082:	2300      	movs	r3, #0
 800a084:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a086:	7afb      	ldrb	r3, [r7, #11]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d16e      	bne.n	800a16a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a092:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a09a:	2b03      	cmp	r3, #3
 800a09c:	f040 8098 	bne.w	800a1d0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a0a0:	693b      	ldr	r3, [r7, #16]
 800a0a2:	689a      	ldr	r2, [r3, #8]
 800a0a4:	693b      	ldr	r3, [r7, #16]
 800a0a6:	68db      	ldr	r3, [r3, #12]
 800a0a8:	429a      	cmp	r2, r3
 800a0aa:	d913      	bls.n	800a0d4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a0ac:	693b      	ldr	r3, [r7, #16]
 800a0ae:	689a      	ldr	r2, [r3, #8]
 800a0b0:	693b      	ldr	r3, [r7, #16]
 800a0b2:	68db      	ldr	r3, [r3, #12]
 800a0b4:	1ad2      	subs	r2, r2, r3
 800a0b6:	693b      	ldr	r3, [r7, #16]
 800a0b8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a0ba:	693b      	ldr	r3, [r7, #16]
 800a0bc:	68da      	ldr	r2, [r3, #12]
 800a0be:	693b      	ldr	r3, [r7, #16]
 800a0c0:	689b      	ldr	r3, [r3, #8]
 800a0c2:	4293      	cmp	r3, r2
 800a0c4:	bf28      	it	cs
 800a0c6:	4613      	movcs	r3, r2
 800a0c8:	461a      	mov	r2, r3
 800a0ca:	6879      	ldr	r1, [r7, #4]
 800a0cc:	68f8      	ldr	r0, [r7, #12]
 800a0ce:	f001 fad5 	bl	800b67c <USBD_CtlContinueRx>
 800a0d2:	e07d      	b.n	800a1d0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a0da:	f003 031f 	and.w	r3, r3, #31
 800a0de:	2b02      	cmp	r3, #2
 800a0e0:	d014      	beq.n	800a10c <USBD_LL_DataOutStage+0x98>
 800a0e2:	2b02      	cmp	r3, #2
 800a0e4:	d81d      	bhi.n	800a122 <USBD_LL_DataOutStage+0xae>
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d002      	beq.n	800a0f0 <USBD_LL_DataOutStage+0x7c>
 800a0ea:	2b01      	cmp	r3, #1
 800a0ec:	d003      	beq.n	800a0f6 <USBD_LL_DataOutStage+0x82>
 800a0ee:	e018      	b.n	800a122 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	75bb      	strb	r3, [r7, #22]
            break;
 800a0f4:	e018      	b.n	800a128 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a0fc:	b2db      	uxtb	r3, r3
 800a0fe:	4619      	mov	r1, r3
 800a100:	68f8      	ldr	r0, [r7, #12]
 800a102:	f000 f9da 	bl	800a4ba <USBD_CoreFindIF>
 800a106:	4603      	mov	r3, r0
 800a108:	75bb      	strb	r3, [r7, #22]
            break;
 800a10a:	e00d      	b.n	800a128 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a112:	b2db      	uxtb	r3, r3
 800a114:	4619      	mov	r1, r3
 800a116:	68f8      	ldr	r0, [r7, #12]
 800a118:	f000 fa1b 	bl	800a552 <USBD_CoreFindEP>
 800a11c:	4603      	mov	r3, r0
 800a11e:	75bb      	strb	r3, [r7, #22]
            break;
 800a120:	e002      	b.n	800a128 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a122:	2300      	movs	r3, #0
 800a124:	75bb      	strb	r3, [r7, #22]
            break;
 800a126:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a128:	7dbb      	ldrb	r3, [r7, #22]
 800a12a:	2b01      	cmp	r3, #1
 800a12c:	d819      	bhi.n	800a162 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a134:	b2db      	uxtb	r3, r3
 800a136:	2b03      	cmp	r3, #3
 800a138:	d113      	bne.n	800a162 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a13a:	7dba      	ldrb	r2, [r7, #22]
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	32ae      	adds	r2, #174	@ 0xae
 800a140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a144:	691b      	ldr	r3, [r3, #16]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d00b      	beq.n	800a162 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a14a:	7dba      	ldrb	r2, [r7, #22]
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a152:	7dba      	ldrb	r2, [r7, #22]
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	32ae      	adds	r2, #174	@ 0xae
 800a158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a15c:	691b      	ldr	r3, [r3, #16]
 800a15e:	68f8      	ldr	r0, [r7, #12]
 800a160:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a162:	68f8      	ldr	r0, [r7, #12]
 800a164:	f001 fa9b 	bl	800b69e <USBD_CtlSendStatus>
 800a168:	e032      	b.n	800a1d0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a16a:	7afb      	ldrb	r3, [r7, #11]
 800a16c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a170:	b2db      	uxtb	r3, r3
 800a172:	4619      	mov	r1, r3
 800a174:	68f8      	ldr	r0, [r7, #12]
 800a176:	f000 f9ec 	bl	800a552 <USBD_CoreFindEP>
 800a17a:	4603      	mov	r3, r0
 800a17c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a17e:	7dbb      	ldrb	r3, [r7, #22]
 800a180:	2bff      	cmp	r3, #255	@ 0xff
 800a182:	d025      	beq.n	800a1d0 <USBD_LL_DataOutStage+0x15c>
 800a184:	7dbb      	ldrb	r3, [r7, #22]
 800a186:	2b01      	cmp	r3, #1
 800a188:	d822      	bhi.n	800a1d0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a190:	b2db      	uxtb	r3, r3
 800a192:	2b03      	cmp	r3, #3
 800a194:	d117      	bne.n	800a1c6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a196:	7dba      	ldrb	r2, [r7, #22]
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	32ae      	adds	r2, #174	@ 0xae
 800a19c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1a0:	699b      	ldr	r3, [r3, #24]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d00f      	beq.n	800a1c6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a1a6:	7dba      	ldrb	r2, [r7, #22]
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a1ae:	7dba      	ldrb	r2, [r7, #22]
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	32ae      	adds	r2, #174	@ 0xae
 800a1b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1b8:	699b      	ldr	r3, [r3, #24]
 800a1ba:	7afa      	ldrb	r2, [r7, #11]
 800a1bc:	4611      	mov	r1, r2
 800a1be:	68f8      	ldr	r0, [r7, #12]
 800a1c0:	4798      	blx	r3
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a1c6:	7dfb      	ldrb	r3, [r7, #23]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d001      	beq.n	800a1d0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a1cc:	7dfb      	ldrb	r3, [r7, #23]
 800a1ce:	e000      	b.n	800a1d2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a1d0:	2300      	movs	r3, #0
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	3718      	adds	r7, #24
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}

0800a1da <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a1da:	b580      	push	{r7, lr}
 800a1dc:	b086      	sub	sp, #24
 800a1de:	af00      	add	r7, sp, #0
 800a1e0:	60f8      	str	r0, [r7, #12]
 800a1e2:	460b      	mov	r3, r1
 800a1e4:	607a      	str	r2, [r7, #4]
 800a1e6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a1e8:	7afb      	ldrb	r3, [r7, #11]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d16f      	bne.n	800a2ce <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	3314      	adds	r3, #20
 800a1f2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a1fa:	2b02      	cmp	r3, #2
 800a1fc:	d15a      	bne.n	800a2b4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a1fe:	693b      	ldr	r3, [r7, #16]
 800a200:	689a      	ldr	r2, [r3, #8]
 800a202:	693b      	ldr	r3, [r7, #16]
 800a204:	68db      	ldr	r3, [r3, #12]
 800a206:	429a      	cmp	r2, r3
 800a208:	d914      	bls.n	800a234 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a20a:	693b      	ldr	r3, [r7, #16]
 800a20c:	689a      	ldr	r2, [r3, #8]
 800a20e:	693b      	ldr	r3, [r7, #16]
 800a210:	68db      	ldr	r3, [r3, #12]
 800a212:	1ad2      	subs	r2, r2, r3
 800a214:	693b      	ldr	r3, [r7, #16]
 800a216:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a218:	693b      	ldr	r3, [r7, #16]
 800a21a:	689b      	ldr	r3, [r3, #8]
 800a21c:	461a      	mov	r2, r3
 800a21e:	6879      	ldr	r1, [r7, #4]
 800a220:	68f8      	ldr	r0, [r7, #12]
 800a222:	f001 f9fd 	bl	800b620 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a226:	2300      	movs	r3, #0
 800a228:	2200      	movs	r2, #0
 800a22a:	2100      	movs	r1, #0
 800a22c:	68f8      	ldr	r0, [r7, #12]
 800a22e:	f7ff fd03 	bl	8009c38 <USBD_LL_PrepareReceive>
 800a232:	e03f      	b.n	800a2b4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a234:	693b      	ldr	r3, [r7, #16]
 800a236:	68da      	ldr	r2, [r3, #12]
 800a238:	693b      	ldr	r3, [r7, #16]
 800a23a:	689b      	ldr	r3, [r3, #8]
 800a23c:	429a      	cmp	r2, r3
 800a23e:	d11c      	bne.n	800a27a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a240:	693b      	ldr	r3, [r7, #16]
 800a242:	685a      	ldr	r2, [r3, #4]
 800a244:	693b      	ldr	r3, [r7, #16]
 800a246:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a248:	429a      	cmp	r2, r3
 800a24a:	d316      	bcc.n	800a27a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a24c:	693b      	ldr	r3, [r7, #16]
 800a24e:	685a      	ldr	r2, [r3, #4]
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a256:	429a      	cmp	r2, r3
 800a258:	d20f      	bcs.n	800a27a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a25a:	2200      	movs	r2, #0
 800a25c:	2100      	movs	r1, #0
 800a25e:	68f8      	ldr	r0, [r7, #12]
 800a260:	f001 f9de 	bl	800b620 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	2200      	movs	r2, #0
 800a268:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a26c:	2300      	movs	r3, #0
 800a26e:	2200      	movs	r2, #0
 800a270:	2100      	movs	r1, #0
 800a272:	68f8      	ldr	r0, [r7, #12]
 800a274:	f7ff fce0 	bl	8009c38 <USBD_LL_PrepareReceive>
 800a278:	e01c      	b.n	800a2b4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a280:	b2db      	uxtb	r3, r3
 800a282:	2b03      	cmp	r3, #3
 800a284:	d10f      	bne.n	800a2a6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a28c:	68db      	ldr	r3, [r3, #12]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d009      	beq.n	800a2a6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	2200      	movs	r2, #0
 800a296:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2a0:	68db      	ldr	r3, [r3, #12]
 800a2a2:	68f8      	ldr	r0, [r7, #12]
 800a2a4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a2a6:	2180      	movs	r1, #128	@ 0x80
 800a2a8:	68f8      	ldr	r0, [r7, #12]
 800a2aa:	f7ff fc33 	bl	8009b14 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a2ae:	68f8      	ldr	r0, [r7, #12]
 800a2b0:	f001 fa08 	bl	800b6c4 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d03a      	beq.n	800a334 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a2be:	68f8      	ldr	r0, [r7, #12]
 800a2c0:	f7ff fe02 	bl	8009ec8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a2cc:	e032      	b.n	800a334 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a2ce:	7afb      	ldrb	r3, [r7, #11]
 800a2d0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a2d4:	b2db      	uxtb	r3, r3
 800a2d6:	4619      	mov	r1, r3
 800a2d8:	68f8      	ldr	r0, [r7, #12]
 800a2da:	f000 f93a 	bl	800a552 <USBD_CoreFindEP>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a2e2:	7dfb      	ldrb	r3, [r7, #23]
 800a2e4:	2bff      	cmp	r3, #255	@ 0xff
 800a2e6:	d025      	beq.n	800a334 <USBD_LL_DataInStage+0x15a>
 800a2e8:	7dfb      	ldrb	r3, [r7, #23]
 800a2ea:	2b01      	cmp	r3, #1
 800a2ec:	d822      	bhi.n	800a334 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a2f4:	b2db      	uxtb	r3, r3
 800a2f6:	2b03      	cmp	r3, #3
 800a2f8:	d11c      	bne.n	800a334 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a2fa:	7dfa      	ldrb	r2, [r7, #23]
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	32ae      	adds	r2, #174	@ 0xae
 800a300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a304:	695b      	ldr	r3, [r3, #20]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d014      	beq.n	800a334 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a30a:	7dfa      	ldrb	r2, [r7, #23]
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a312:	7dfa      	ldrb	r2, [r7, #23]
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	32ae      	adds	r2, #174	@ 0xae
 800a318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a31c:	695b      	ldr	r3, [r3, #20]
 800a31e:	7afa      	ldrb	r2, [r7, #11]
 800a320:	4611      	mov	r1, r2
 800a322:	68f8      	ldr	r0, [r7, #12]
 800a324:	4798      	blx	r3
 800a326:	4603      	mov	r3, r0
 800a328:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a32a:	7dbb      	ldrb	r3, [r7, #22]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d001      	beq.n	800a334 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a330:	7dbb      	ldrb	r3, [r7, #22]
 800a332:	e000      	b.n	800a336 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a334:	2300      	movs	r3, #0
}
 800a336:	4618      	mov	r0, r3
 800a338:	3718      	adds	r7, #24
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}

0800a33e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a33e:	b580      	push	{r7, lr}
 800a340:	b084      	sub	sp, #16
 800a342:	af00      	add	r7, sp, #0
 800a344:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a346:	2300      	movs	r3, #0
 800a348:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2201      	movs	r2, #1
 800a34e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2200      	movs	r2, #0
 800a356:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2200      	movs	r2, #0
 800a35e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2200      	movs	r2, #0
 800a364:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2200      	movs	r2, #0
 800a36c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0

#ifdef USE_USBD_COMPOSITE
  /* Parse the table of classes in use */
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 800a370:	2300      	movs	r3, #0
 800a372:	60bb      	str	r3, [r7, #8]
 800a374:	e031      	b.n	800a3da <USBD_LL_Reset+0x9c>
  {
    /* Check if current class is in use */
    if ((pdev->tclasslist[i].Active) == 1U)
 800a376:	687a      	ldr	r2, [r7, #4]
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	212c      	movs	r1, #44	@ 0x2c
 800a37c:	fb01 f303 	mul.w	r3, r1, r3
 800a380:	4413      	add	r3, r2
 800a382:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	2b01      	cmp	r3, #1
 800a38a:	d123      	bne.n	800a3d4 <USBD_LL_Reset+0x96>
    {
      if (pdev->pClass[i] != NULL)
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	68ba      	ldr	r2, [r7, #8]
 800a390:	32ae      	adds	r2, #174	@ 0xae
 800a392:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d01c      	beq.n	800a3d4 <USBD_LL_Reset+0x96>
      {
        pdev->classId = i;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	68ba      	ldr	r2, [r7, #8]
 800a39e:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
        /* Clear configuration  and De-initialize the Class process*/

        if (pdev->pClass[i]->DeInit != NULL)
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	68ba      	ldr	r2, [r7, #8]
 800a3a6:	32ae      	adds	r2, #174	@ 0xae
 800a3a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3ac:	685b      	ldr	r3, [r3, #4]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d010      	beq.n	800a3d4 <USBD_LL_Reset+0x96>
        {
          if (pdev->pClass[i]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	68ba      	ldr	r2, [r7, #8]
 800a3b6:	32ae      	adds	r2, #174	@ 0xae
 800a3b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3bc:	685b      	ldr	r3, [r3, #4]
 800a3be:	687a      	ldr	r2, [r7, #4]
 800a3c0:	6852      	ldr	r2, [r2, #4]
 800a3c2:	b2d2      	uxtb	r2, r2
 800a3c4:	4611      	mov	r1, r2
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	4798      	blx	r3
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d001      	beq.n	800a3d4 <USBD_LL_Reset+0x96>
          {
            ret = USBD_FAIL;
 800a3d0:	2303      	movs	r3, #3
 800a3d2:	73fb      	strb	r3, [r7, #15]
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	3301      	adds	r3, #1
 800a3d8:	60bb      	str	r3, [r7, #8]
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	2b01      	cmp	r3, #1
 800a3de:	d9ca      	bls.n	800a376 <USBD_LL_Reset+0x38>
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a3e0:	2340      	movs	r3, #64	@ 0x40
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	2100      	movs	r1, #0
 800a3e6:	6878      	ldr	r0, [r7, #4]
 800a3e8:	f7ff fb5b 	bl	8009aa2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2201      	movs	r2, #1
 800a3f0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2240      	movs	r2, #64	@ 0x40
 800a3f8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a3fc:	2340      	movs	r3, #64	@ 0x40
 800a3fe:	2200      	movs	r2, #0
 800a400:	2180      	movs	r1, #128	@ 0x80
 800a402:	6878      	ldr	r0, [r7, #4]
 800a404:	f7ff fb4d 	bl	8009aa2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2201      	movs	r2, #1
 800a40c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2240      	movs	r2, #64	@ 0x40
 800a412:	621a      	str	r2, [r3, #32]

  return ret;
 800a414:	7bfb      	ldrb	r3, [r7, #15]
}
 800a416:	4618      	mov	r0, r3
 800a418:	3710      	adds	r7, #16
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bd80      	pop	{r7, pc}

0800a41e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a41e:	b480      	push	{r7}
 800a420:	b083      	sub	sp, #12
 800a422:	af00      	add	r7, sp, #0
 800a424:	6078      	str	r0, [r7, #4]
 800a426:	460b      	mov	r3, r1
 800a428:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	78fa      	ldrb	r2, [r7, #3]
 800a42e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a430:	2300      	movs	r3, #0
}
 800a432:	4618      	mov	r0, r3
 800a434:	370c      	adds	r7, #12
 800a436:	46bd      	mov	sp, r7
 800a438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43c:	4770      	bx	lr

0800a43e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a43e:	b580      	push	{r7, lr}
 800a440:	b084      	sub	sp, #16
 800a442:	af00      	add	r7, sp, #0
 800a444:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a44c:	b2db      	uxtb	r3, r3
 800a44e:	2b03      	cmp	r3, #3
 800a450:	d12e      	bne.n	800a4b0 <USBD_LL_SOF+0x72>
  {
#ifdef USE_USBD_COMPOSITE
    /* Parse the table of classes in use */
    for (uint32_t i = 0; i < USBD_MAX_SUPPORTED_CLASS; i++)
 800a452:	2300      	movs	r3, #0
 800a454:	60fb      	str	r3, [r7, #12]
 800a456:	e028      	b.n	800a4aa <USBD_LL_SOF+0x6c>
    {
      /* Check if current class is in use */
      if ((pdev->tclasslist[i].Active) == 1U)
 800a458:	687a      	ldr	r2, [r7, #4]
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	212c      	movs	r1, #44	@ 0x2c
 800a45e:	fb01 f303 	mul.w	r3, r1, r3
 800a462:	4413      	add	r3, r2
 800a464:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	2b01      	cmp	r3, #1
 800a46c:	d11a      	bne.n	800a4a4 <USBD_LL_SOF+0x66>
      {
        if (pdev->pClass[i] != NULL)
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	68fa      	ldr	r2, [r7, #12]
 800a472:	32ae      	adds	r2, #174	@ 0xae
 800a474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d013      	beq.n	800a4a4 <USBD_LL_SOF+0x66>
        {
          if (pdev->pClass[i]->SOF != NULL)
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	68fa      	ldr	r2, [r7, #12]
 800a480:	32ae      	adds	r2, #174	@ 0xae
 800a482:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a486:	69db      	ldr	r3, [r3, #28]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d00b      	beq.n	800a4a4 <USBD_LL_SOF+0x66>
          {
            pdev->classId = i;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	68fa      	ldr	r2, [r7, #12]
 800a490:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
            (void)pdev->pClass[i]->SOF(pdev);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	68fa      	ldr	r2, [r7, #12]
 800a498:	32ae      	adds	r2, #174	@ 0xae
 800a49a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a49e:	69db      	ldr	r3, [r3, #28]
 800a4a0:	6878      	ldr	r0, [r7, #4]
 800a4a2:	4798      	blx	r3
    for (uint32_t i = 0; i < USBD_MAX_SUPPORTED_CLASS; i++)
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	3301      	adds	r3, #1
 800a4a8:	60fb      	str	r3, [r7, #12]
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	2b01      	cmp	r3, #1
 800a4ae:	d9d3      	bls.n	800a458 <USBD_LL_SOF+0x1a>
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a4b0:	2300      	movs	r3, #0
}
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	3710      	adds	r7, #16
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	bd80      	pop	{r7, pc}

0800a4ba <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a4ba:	b480      	push	{r7}
 800a4bc:	b085      	sub	sp, #20
 800a4be:	af00      	add	r7, sp, #0
 800a4c0:	6078      	str	r0, [r7, #4]
 800a4c2:	460b      	mov	r3, r1
 800a4c4:	70fb      	strb	r3, [r7, #3]
#ifdef USE_USBD_COMPOSITE
  /* Parse the table of classes in use */
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	60fb      	str	r3, [r7, #12]
 800a4ca:	e038      	b.n	800a53e <USBD_CoreFindIF+0x84>
  {
    /* Check if current class is in use */
    if ((pdev->tclasslist[i].Active) == 1U)
 800a4cc:	687a      	ldr	r2, [r7, #4]
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	212c      	movs	r1, #44	@ 0x2c
 800a4d2:	fb01 f303 	mul.w	r3, r1, r3
 800a4d6:	4413      	add	r3, r2
 800a4d8:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	2b01      	cmp	r3, #1
 800a4e0:	d12a      	bne.n	800a538 <USBD_CoreFindIF+0x7e>
    {
      /* Parse all interfaces listed in the current class */
      for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	60bb      	str	r3, [r7, #8]
 800a4e6:	e01b      	b.n	800a520 <USBD_CoreFindIF+0x66>
      {
        /* Check if requested Interface matches the current class interface */
        if (pdev->tclasslist[i].Ifs[j] == index)
 800a4e8:	687a      	ldr	r2, [r7, #4]
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	212c      	movs	r1, #44	@ 0x2c
 800a4ee:	fb01 f303 	mul.w	r3, r1, r3
 800a4f2:	441a      	add	r2, r3
 800a4f4:	68bb      	ldr	r3, [r7, #8]
 800a4f6:	4413      	add	r3, r2
 800a4f8:	f503 7343 	add.w	r3, r3, #780	@ 0x30c
 800a4fc:	781b      	ldrb	r3, [r3, #0]
 800a4fe:	78fa      	ldrb	r2, [r7, #3]
 800a500:	429a      	cmp	r2, r3
 800a502:	d10a      	bne.n	800a51a <USBD_CoreFindIF+0x60>
        {
          if (pdev->pClass[i]->Setup != NULL)
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	68fa      	ldr	r2, [r7, #12]
 800a508:	32ae      	adds	r2, #174	@ 0xae
 800a50a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a50e:	689b      	ldr	r3, [r3, #8]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d002      	beq.n	800a51a <USBD_CoreFindIF+0x60>
          {
            return (uint8_t)i;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	b2db      	uxtb	r3, r3
 800a518:	e015      	b.n	800a546 <USBD_CoreFindIF+0x8c>
      for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 800a51a:	68bb      	ldr	r3, [r7, #8]
 800a51c:	3301      	adds	r3, #1
 800a51e:	60bb      	str	r3, [r7, #8]
 800a520:	687a      	ldr	r2, [r7, #4]
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	212c      	movs	r1, #44	@ 0x2c
 800a526:	fb01 f303 	mul.w	r3, r1, r3
 800a52a:	4413      	add	r3, r2
 800a52c:	f503 7342 	add.w	r3, r3, #776	@ 0x308
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	68ba      	ldr	r2, [r7, #8]
 800a534:	429a      	cmp	r2, r3
 800a536:	d3d7      	bcc.n	800a4e8 <USBD_CoreFindIF+0x2e>
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	3301      	adds	r3, #1
 800a53c:	60fb      	str	r3, [r7, #12]
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	2b01      	cmp	r3, #1
 800a542:	d9c3      	bls.n	800a4cc <USBD_CoreFindIF+0x12>
        }
      }
    }
  }

  return 0xFFU;
 800a544:	23ff      	movs	r3, #255	@ 0xff
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 800a546:	4618      	mov	r0, r3
 800a548:	3714      	adds	r7, #20
 800a54a:	46bd      	mov	sp, r7
 800a54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a550:	4770      	bx	lr

0800a552 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a552:	b480      	push	{r7}
 800a554:	b085      	sub	sp, #20
 800a556:	af00      	add	r7, sp, #0
 800a558:	6078      	str	r0, [r7, #4]
 800a55a:	460b      	mov	r3, r1
 800a55c:	70fb      	strb	r3, [r7, #3]
#ifdef USE_USBD_COMPOSITE
  /* Parse the table of classes in use */
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 800a55e:	2300      	movs	r3, #0
 800a560:	60fb      	str	r3, [r7, #12]
 800a562:	e039      	b.n	800a5d8 <USBD_CoreFindEP+0x86>
  {
    /* Check if current class is in use */
    if ((pdev->tclasslist[i].Active) == 1U)
 800a564:	687a      	ldr	r2, [r7, #4]
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	212c      	movs	r1, #44	@ 0x2c
 800a56a:	fb01 f303 	mul.w	r3, r1, r3
 800a56e:	4413      	add	r3, r2
 800a570:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	2b01      	cmp	r3, #1
 800a578:	d12b      	bne.n	800a5d2 <USBD_CoreFindEP+0x80>
    {
      /* Parse all endpoints listed in the current class */
      for (uint32_t j = 0U; j < pdev->tclasslist[i].NumEps; j++)
 800a57a:	2300      	movs	r3, #0
 800a57c:	60bb      	str	r3, [r7, #8]
 800a57e:	e01c      	b.n	800a5ba <USBD_CoreFindEP+0x68>
      {
        /* Check if requested endpoint matches the current class endpoint */
        if (pdev->tclasslist[i].Eps[j].add == index)
 800a580:	6879      	ldr	r1, [r7, #4]
 800a582:	68fa      	ldr	r2, [r7, #12]
 800a584:	4613      	mov	r3, r2
 800a586:	009b      	lsls	r3, r3, #2
 800a588:	4413      	add	r3, r2
 800a58a:	005b      	lsls	r3, r3, #1
 800a58c:	4413      	add	r3, r2
 800a58e:	68ba      	ldr	r2, [r7, #8]
 800a590:	4413      	add	r3, r2
 800a592:	33be      	adds	r3, #190	@ 0xbe
 800a594:	f811 3023 	ldrb.w	r3, [r1, r3, lsl #2]
 800a598:	78fa      	ldrb	r2, [r7, #3]
 800a59a:	429a      	cmp	r2, r3
 800a59c:	d10a      	bne.n	800a5b4 <USBD_CoreFindEP+0x62>
        {
          if (pdev->pClass[i]->Setup != NULL)
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	68fa      	ldr	r2, [r7, #12]
 800a5a2:	32ae      	adds	r2, #174	@ 0xae
 800a5a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5a8:	689b      	ldr	r3, [r3, #8]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d002      	beq.n	800a5b4 <USBD_CoreFindEP+0x62>
          {
            return (uint8_t)i;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	b2db      	uxtb	r3, r3
 800a5b2:	e015      	b.n	800a5e0 <USBD_CoreFindEP+0x8e>
      for (uint32_t j = 0U; j < pdev->tclasslist[i].NumEps; j++)
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	3301      	adds	r3, #1
 800a5b8:	60bb      	str	r3, [r7, #8]
 800a5ba:	687a      	ldr	r2, [r7, #4]
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	212c      	movs	r1, #44	@ 0x2c
 800a5c0:	fb01 f303 	mul.w	r3, r1, r3
 800a5c4:	4413      	add	r3, r2
 800a5c6:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	68ba      	ldr	r2, [r7, #8]
 800a5ce:	429a      	cmp	r2, r3
 800a5d0:	d3d6      	bcc.n	800a580 <USBD_CoreFindEP+0x2e>
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	3301      	adds	r3, #1
 800a5d6:	60fb      	str	r3, [r7, #12]
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	2b01      	cmp	r3, #1
 800a5dc:	d9c2      	bls.n	800a564 <USBD_CoreFindEP+0x12>
        }
      }
    }
  }

  return 0xFFU;
 800a5de:	23ff      	movs	r3, #255	@ 0xff
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	3714      	adds	r7, #20
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ea:	4770      	bx	lr

0800a5ec <USBD_CoreGetEPAdd>:
  * @param  ep_type: USBD_EP_TYPE_CTRL, USBD_EP_TYPE_ISOC, USBD_EP_TYPE_BULK or USBD_EP_TYPE_INTR
  * @param  ClassId: The Class ID
  * @retval Address of the selected endpoint or 0xFFU if no endpoint found.
  */
uint8_t USBD_CoreGetEPAdd(USBD_HandleTypeDef *pdev, uint8_t ep_dir, uint8_t ep_type, uint8_t ClassId)
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b085      	sub	sp, #20
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
 800a5f4:	4608      	mov	r0, r1
 800a5f6:	4611      	mov	r1, r2
 800a5f8:	461a      	mov	r2, r3
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	70fb      	strb	r3, [r7, #3]
 800a5fe:	460b      	mov	r3, r1
 800a600:	70bb      	strb	r3, [r7, #2]
 800a602:	4613      	mov	r3, r2
 800a604:	707b      	strb	r3, [r7, #1]
  uint8_t idx;

  /* Find the EP address in the selected class table */
  for (idx = 0; idx < pdev->tclasslist[ClassId].NumEps; idx++)
 800a606:	2300      	movs	r3, #0
 800a608:	73fb      	strb	r3, [r7, #15]
 800a60a:	e03f      	b.n	800a68c <USBD_CoreGetEPAdd+0xa0>
  {
    if (((pdev->tclasslist[ClassId].Eps[idx].add & USBD_EP_IN) == ep_dir) && \
 800a60c:	787a      	ldrb	r2, [r7, #1]
 800a60e:	7bf8      	ldrb	r0, [r7, #15]
 800a610:	6879      	ldr	r1, [r7, #4]
 800a612:	4613      	mov	r3, r2
 800a614:	009b      	lsls	r3, r3, #2
 800a616:	4413      	add	r3, r2
 800a618:	005b      	lsls	r3, r3, #1
 800a61a:	4413      	add	r3, r2
 800a61c:	4403      	add	r3, r0
 800a61e:	33be      	adds	r3, #190	@ 0xbe
 800a620:	f811 3023 	ldrb.w	r3, [r1, r3, lsl #2]
 800a624:	f003 0280 	and.w	r2, r3, #128	@ 0x80
 800a628:	78fb      	ldrb	r3, [r7, #3]
 800a62a:	429a      	cmp	r2, r3
 800a62c:	d12b      	bne.n	800a686 <USBD_CoreGetEPAdd+0x9a>
        (pdev->tclasslist[ClassId].Eps[idx].type == ep_type) && \
 800a62e:	787a      	ldrb	r2, [r7, #1]
 800a630:	7bf8      	ldrb	r0, [r7, #15]
 800a632:	6879      	ldr	r1, [r7, #4]
 800a634:	4613      	mov	r3, r2
 800a636:	009b      	lsls	r3, r3, #2
 800a638:	4413      	add	r3, r2
 800a63a:	005b      	lsls	r3, r3, #1
 800a63c:	4413      	add	r3, r2
 800a63e:	4403      	add	r3, r0
 800a640:	33be      	adds	r3, #190	@ 0xbe
 800a642:	009b      	lsls	r3, r3, #2
 800a644:	440b      	add	r3, r1
 800a646:	785b      	ldrb	r3, [r3, #1]
    if (((pdev->tclasslist[ClassId].Eps[idx].add & USBD_EP_IN) == ep_dir) && \
 800a648:	78ba      	ldrb	r2, [r7, #2]
 800a64a:	429a      	cmp	r2, r3
 800a64c:	d11b      	bne.n	800a686 <USBD_CoreGetEPAdd+0x9a>
        (pdev->tclasslist[ClassId].Eps[idx].is_used != 0U))
 800a64e:	787a      	ldrb	r2, [r7, #1]
 800a650:	7bf8      	ldrb	r0, [r7, #15]
 800a652:	6879      	ldr	r1, [r7, #4]
 800a654:	4613      	mov	r3, r2
 800a656:	009b      	lsls	r3, r3, #2
 800a658:	4413      	add	r3, r2
 800a65a:	005b      	lsls	r3, r3, #1
 800a65c:	4413      	add	r3, r2
 800a65e:	4403      	add	r3, r0
 800a660:	33be      	adds	r3, #190	@ 0xbe
 800a662:	009b      	lsls	r3, r3, #2
 800a664:	440b      	add	r3, r1
 800a666:	78db      	ldrb	r3, [r3, #3]
        (pdev->tclasslist[ClassId].Eps[idx].type == ep_type) && \
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d00c      	beq.n	800a686 <USBD_CoreGetEPAdd+0x9a>
    {
      return (pdev->tclasslist[ClassId].Eps[idx].add);
 800a66c:	787a      	ldrb	r2, [r7, #1]
 800a66e:	7bf8      	ldrb	r0, [r7, #15]
 800a670:	6879      	ldr	r1, [r7, #4]
 800a672:	4613      	mov	r3, r2
 800a674:	009b      	lsls	r3, r3, #2
 800a676:	4413      	add	r3, r2
 800a678:	005b      	lsls	r3, r3, #1
 800a67a:	4413      	add	r3, r2
 800a67c:	4403      	add	r3, r0
 800a67e:	33be      	adds	r3, #190	@ 0xbe
 800a680:	f811 3023 	ldrb.w	r3, [r1, r3, lsl #2]
 800a684:	e00f      	b.n	800a6a6 <USBD_CoreGetEPAdd+0xba>
  for (idx = 0; idx < pdev->tclasslist[ClassId].NumEps; idx++)
 800a686:	7bfb      	ldrb	r3, [r7, #15]
 800a688:	3301      	adds	r3, #1
 800a68a:	73fb      	strb	r3, [r7, #15]
 800a68c:	7bfa      	ldrb	r2, [r7, #15]
 800a68e:	787b      	ldrb	r3, [r7, #1]
 800a690:	6879      	ldr	r1, [r7, #4]
 800a692:	202c      	movs	r0, #44	@ 0x2c
 800a694:	fb00 f303 	mul.w	r3, r0, r3
 800a698:	440b      	add	r3, r1
 800a69a:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	429a      	cmp	r2, r3
 800a6a2:	d3b3      	bcc.n	800a60c <USBD_CoreGetEPAdd+0x20>
    }
  }

  /* If reaching this point, then no endpoint was found */
  return 0xFFU;
 800a6a4:	23ff      	movs	r3, #255	@ 0xff
}
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	3714      	adds	r7, #20
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b0:	4770      	bx	lr

0800a6b2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a6b2:	b480      	push	{r7}
 800a6b4:	b087      	sub	sp, #28
 800a6b6:	af00      	add	r7, sp, #0
 800a6b8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a6be:	697b      	ldr	r3, [r7, #20]
 800a6c0:	781b      	ldrb	r3, [r3, #0]
 800a6c2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a6c4:	697b      	ldr	r3, [r7, #20]
 800a6c6:	3301      	adds	r3, #1
 800a6c8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a6ca:	697b      	ldr	r3, [r7, #20]
 800a6cc:	781b      	ldrb	r3, [r3, #0]
 800a6ce:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a6d0:	8a3b      	ldrh	r3, [r7, #16]
 800a6d2:	021b      	lsls	r3, r3, #8
 800a6d4:	b21a      	sxth	r2, r3
 800a6d6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a6da:	4313      	orrs	r3, r2
 800a6dc:	b21b      	sxth	r3, r3
 800a6de:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a6e0:	89fb      	ldrh	r3, [r7, #14]
}
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	371c      	adds	r7, #28
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ec:	4770      	bx	lr
	...

0800a6f0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b084      	sub	sp, #16
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
 800a6f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	781b      	ldrb	r3, [r3, #0]
 800a702:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a706:	2b40      	cmp	r3, #64	@ 0x40
 800a708:	d005      	beq.n	800a716 <USBD_StdDevReq+0x26>
 800a70a:	2b40      	cmp	r3, #64	@ 0x40
 800a70c:	d857      	bhi.n	800a7be <USBD_StdDevReq+0xce>
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d00f      	beq.n	800a732 <USBD_StdDevReq+0x42>
 800a712:	2b20      	cmp	r3, #32
 800a714:	d153      	bne.n	800a7be <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	32ae      	adds	r2, #174	@ 0xae
 800a720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a724:	689b      	ldr	r3, [r3, #8]
 800a726:	6839      	ldr	r1, [r7, #0]
 800a728:	6878      	ldr	r0, [r7, #4]
 800a72a:	4798      	blx	r3
 800a72c:	4603      	mov	r3, r0
 800a72e:	73fb      	strb	r3, [r7, #15]
      break;
 800a730:	e04a      	b.n	800a7c8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	785b      	ldrb	r3, [r3, #1]
 800a736:	2b09      	cmp	r3, #9
 800a738:	d83b      	bhi.n	800a7b2 <USBD_StdDevReq+0xc2>
 800a73a:	a201      	add	r2, pc, #4	@ (adr r2, 800a740 <USBD_StdDevReq+0x50>)
 800a73c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a740:	0800a795 	.word	0x0800a795
 800a744:	0800a7a9 	.word	0x0800a7a9
 800a748:	0800a7b3 	.word	0x0800a7b3
 800a74c:	0800a79f 	.word	0x0800a79f
 800a750:	0800a7b3 	.word	0x0800a7b3
 800a754:	0800a773 	.word	0x0800a773
 800a758:	0800a769 	.word	0x0800a769
 800a75c:	0800a7b3 	.word	0x0800a7b3
 800a760:	0800a78b 	.word	0x0800a78b
 800a764:	0800a77d 	.word	0x0800a77d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a768:	6839      	ldr	r1, [r7, #0]
 800a76a:	6878      	ldr	r0, [r7, #4]
 800a76c:	f000 fa3c 	bl	800abe8 <USBD_GetDescriptor>
          break;
 800a770:	e024      	b.n	800a7bc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a772:	6839      	ldr	r1, [r7, #0]
 800a774:	6878      	ldr	r0, [r7, #4]
 800a776:	f000 fbdb 	bl	800af30 <USBD_SetAddress>
          break;
 800a77a:	e01f      	b.n	800a7bc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a77c:	6839      	ldr	r1, [r7, #0]
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	f000 fc1a 	bl	800afb8 <USBD_SetConfig>
 800a784:	4603      	mov	r3, r0
 800a786:	73fb      	strb	r3, [r7, #15]
          break;
 800a788:	e018      	b.n	800a7bc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a78a:	6839      	ldr	r1, [r7, #0]
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	f000 fcbd 	bl	800b10c <USBD_GetConfig>
          break;
 800a792:	e013      	b.n	800a7bc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a794:	6839      	ldr	r1, [r7, #0]
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	f000 fcee 	bl	800b178 <USBD_GetStatus>
          break;
 800a79c:	e00e      	b.n	800a7bc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a79e:	6839      	ldr	r1, [r7, #0]
 800a7a0:	6878      	ldr	r0, [r7, #4]
 800a7a2:	f000 fd1d 	bl	800b1e0 <USBD_SetFeature>
          break;
 800a7a6:	e009      	b.n	800a7bc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a7a8:	6839      	ldr	r1, [r7, #0]
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f000 fd41 	bl	800b232 <USBD_ClrFeature>
          break;
 800a7b0:	e004      	b.n	800a7bc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a7b2:	6839      	ldr	r1, [r7, #0]
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	f000 fd98 	bl	800b2ea <USBD_CtlError>
          break;
 800a7ba:	bf00      	nop
      }
      break;
 800a7bc:	e004      	b.n	800a7c8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a7be:	6839      	ldr	r1, [r7, #0]
 800a7c0:	6878      	ldr	r0, [r7, #4]
 800a7c2:	f000 fd92 	bl	800b2ea <USBD_CtlError>
      break;
 800a7c6:	bf00      	nop
  }

  return ret;
 800a7c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	3710      	adds	r7, #16
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}
 800a7d2:	bf00      	nop

0800a7d4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b084      	sub	sp, #16
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
 800a7dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	781b      	ldrb	r3, [r3, #0]
 800a7e6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a7ea:	2b40      	cmp	r3, #64	@ 0x40
 800a7ec:	d005      	beq.n	800a7fa <USBD_StdItfReq+0x26>
 800a7ee:	2b40      	cmp	r3, #64	@ 0x40
 800a7f0:	d852      	bhi.n	800a898 <USBD_StdItfReq+0xc4>
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d001      	beq.n	800a7fa <USBD_StdItfReq+0x26>
 800a7f6:	2b20      	cmp	r3, #32
 800a7f8:	d14e      	bne.n	800a898 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a800:	b2db      	uxtb	r3, r3
 800a802:	3b01      	subs	r3, #1
 800a804:	2b02      	cmp	r3, #2
 800a806:	d840      	bhi.n	800a88a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	889b      	ldrh	r3, [r3, #4]
 800a80c:	b2db      	uxtb	r3, r3
 800a80e:	2b01      	cmp	r3, #1
 800a810:	d836      	bhi.n	800a880 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	889b      	ldrh	r3, [r3, #4]
 800a816:	b2db      	uxtb	r3, r3
 800a818:	4619      	mov	r1, r3
 800a81a:	6878      	ldr	r0, [r7, #4]
 800a81c:	f7ff fe4d 	bl	800a4ba <USBD_CoreFindIF>
 800a820:	4603      	mov	r3, r0
 800a822:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a824:	7bbb      	ldrb	r3, [r7, #14]
 800a826:	2bff      	cmp	r3, #255	@ 0xff
 800a828:	d01d      	beq.n	800a866 <USBD_StdItfReq+0x92>
 800a82a:	7bbb      	ldrb	r3, [r7, #14]
 800a82c:	2b01      	cmp	r3, #1
 800a82e:	d81a      	bhi.n	800a866 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a830:	7bba      	ldrb	r2, [r7, #14]
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	32ae      	adds	r2, #174	@ 0xae
 800a836:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a83a:	689b      	ldr	r3, [r3, #8]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d00f      	beq.n	800a860 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a840:	7bba      	ldrb	r2, [r7, #14]
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a848:	7bba      	ldrb	r2, [r7, #14]
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	32ae      	adds	r2, #174	@ 0xae
 800a84e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a852:	689b      	ldr	r3, [r3, #8]
 800a854:	6839      	ldr	r1, [r7, #0]
 800a856:	6878      	ldr	r0, [r7, #4]
 800a858:	4798      	blx	r3
 800a85a:	4603      	mov	r3, r0
 800a85c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a85e:	e004      	b.n	800a86a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a860:	2303      	movs	r3, #3
 800a862:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a864:	e001      	b.n	800a86a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a866:	2303      	movs	r3, #3
 800a868:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	88db      	ldrh	r3, [r3, #6]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d110      	bne.n	800a894 <USBD_StdItfReq+0xc0>
 800a872:	7bfb      	ldrb	r3, [r7, #15]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d10d      	bne.n	800a894 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	f000 ff10 	bl	800b69e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a87e:	e009      	b.n	800a894 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a880:	6839      	ldr	r1, [r7, #0]
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f000 fd31 	bl	800b2ea <USBD_CtlError>
          break;
 800a888:	e004      	b.n	800a894 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a88a:	6839      	ldr	r1, [r7, #0]
 800a88c:	6878      	ldr	r0, [r7, #4]
 800a88e:	f000 fd2c 	bl	800b2ea <USBD_CtlError>
          break;
 800a892:	e000      	b.n	800a896 <USBD_StdItfReq+0xc2>
          break;
 800a894:	bf00      	nop
      }
      break;
 800a896:	e004      	b.n	800a8a2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a898:	6839      	ldr	r1, [r7, #0]
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f000 fd25 	bl	800b2ea <USBD_CtlError>
      break;
 800a8a0:	bf00      	nop
  }

  return ret;
 800a8a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	3710      	adds	r7, #16
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	bd80      	pop	{r7, pc}

0800a8ac <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b084      	sub	sp, #16
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
 800a8b4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	889b      	ldrh	r3, [r3, #4]
 800a8be:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	781b      	ldrb	r3, [r3, #0]
 800a8c4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a8c8:	2b40      	cmp	r3, #64	@ 0x40
 800a8ca:	d007      	beq.n	800a8dc <USBD_StdEPReq+0x30>
 800a8cc:	2b40      	cmp	r3, #64	@ 0x40
 800a8ce:	f200 817f 	bhi.w	800abd0 <USBD_StdEPReq+0x324>
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d02a      	beq.n	800a92c <USBD_StdEPReq+0x80>
 800a8d6:	2b20      	cmp	r3, #32
 800a8d8:	f040 817a 	bne.w	800abd0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a8dc:	7bbb      	ldrb	r3, [r7, #14]
 800a8de:	4619      	mov	r1, r3
 800a8e0:	6878      	ldr	r0, [r7, #4]
 800a8e2:	f7ff fe36 	bl	800a552 <USBD_CoreFindEP>
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a8ea:	7b7b      	ldrb	r3, [r7, #13]
 800a8ec:	2bff      	cmp	r3, #255	@ 0xff
 800a8ee:	f000 8174 	beq.w	800abda <USBD_StdEPReq+0x32e>
 800a8f2:	7b7b      	ldrb	r3, [r7, #13]
 800a8f4:	2b01      	cmp	r3, #1
 800a8f6:	f200 8170 	bhi.w	800abda <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a8fa:	7b7a      	ldrb	r2, [r7, #13]
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a902:	7b7a      	ldrb	r2, [r7, #13]
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	32ae      	adds	r2, #174	@ 0xae
 800a908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a90c:	689b      	ldr	r3, [r3, #8]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	f000 8163 	beq.w	800abda <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a914:	7b7a      	ldrb	r2, [r7, #13]
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	32ae      	adds	r2, #174	@ 0xae
 800a91a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a91e:	689b      	ldr	r3, [r3, #8]
 800a920:	6839      	ldr	r1, [r7, #0]
 800a922:	6878      	ldr	r0, [r7, #4]
 800a924:	4798      	blx	r3
 800a926:	4603      	mov	r3, r0
 800a928:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a92a:	e156      	b.n	800abda <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	785b      	ldrb	r3, [r3, #1]
 800a930:	2b03      	cmp	r3, #3
 800a932:	d008      	beq.n	800a946 <USBD_StdEPReq+0x9a>
 800a934:	2b03      	cmp	r3, #3
 800a936:	f300 8145 	bgt.w	800abc4 <USBD_StdEPReq+0x318>
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	f000 809b 	beq.w	800aa76 <USBD_StdEPReq+0x1ca>
 800a940:	2b01      	cmp	r3, #1
 800a942:	d03c      	beq.n	800a9be <USBD_StdEPReq+0x112>
 800a944:	e13e      	b.n	800abc4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a94c:	b2db      	uxtb	r3, r3
 800a94e:	2b02      	cmp	r3, #2
 800a950:	d002      	beq.n	800a958 <USBD_StdEPReq+0xac>
 800a952:	2b03      	cmp	r3, #3
 800a954:	d016      	beq.n	800a984 <USBD_StdEPReq+0xd8>
 800a956:	e02c      	b.n	800a9b2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a958:	7bbb      	ldrb	r3, [r7, #14]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d00d      	beq.n	800a97a <USBD_StdEPReq+0xce>
 800a95e:	7bbb      	ldrb	r3, [r7, #14]
 800a960:	2b80      	cmp	r3, #128	@ 0x80
 800a962:	d00a      	beq.n	800a97a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a964:	7bbb      	ldrb	r3, [r7, #14]
 800a966:	4619      	mov	r1, r3
 800a968:	6878      	ldr	r0, [r7, #4]
 800a96a:	f7ff f8d3 	bl	8009b14 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a96e:	2180      	movs	r1, #128	@ 0x80
 800a970:	6878      	ldr	r0, [r7, #4]
 800a972:	f7ff f8cf 	bl	8009b14 <USBD_LL_StallEP>
 800a976:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a978:	e020      	b.n	800a9bc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a97a:	6839      	ldr	r1, [r7, #0]
 800a97c:	6878      	ldr	r0, [r7, #4]
 800a97e:	f000 fcb4 	bl	800b2ea <USBD_CtlError>
              break;
 800a982:	e01b      	b.n	800a9bc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	885b      	ldrh	r3, [r3, #2]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d10e      	bne.n	800a9aa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a98c:	7bbb      	ldrb	r3, [r7, #14]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d00b      	beq.n	800a9aa <USBD_StdEPReq+0xfe>
 800a992:	7bbb      	ldrb	r3, [r7, #14]
 800a994:	2b80      	cmp	r3, #128	@ 0x80
 800a996:	d008      	beq.n	800a9aa <USBD_StdEPReq+0xfe>
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	88db      	ldrh	r3, [r3, #6]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d104      	bne.n	800a9aa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a9a0:	7bbb      	ldrb	r3, [r7, #14]
 800a9a2:	4619      	mov	r1, r3
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	f7ff f8b5 	bl	8009b14 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	f000 fe77 	bl	800b69e <USBD_CtlSendStatus>

              break;
 800a9b0:	e004      	b.n	800a9bc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a9b2:	6839      	ldr	r1, [r7, #0]
 800a9b4:	6878      	ldr	r0, [r7, #4]
 800a9b6:	f000 fc98 	bl	800b2ea <USBD_CtlError>
              break;
 800a9ba:	bf00      	nop
          }
          break;
 800a9bc:	e107      	b.n	800abce <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a9c4:	b2db      	uxtb	r3, r3
 800a9c6:	2b02      	cmp	r3, #2
 800a9c8:	d002      	beq.n	800a9d0 <USBD_StdEPReq+0x124>
 800a9ca:	2b03      	cmp	r3, #3
 800a9cc:	d016      	beq.n	800a9fc <USBD_StdEPReq+0x150>
 800a9ce:	e04b      	b.n	800aa68 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a9d0:	7bbb      	ldrb	r3, [r7, #14]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d00d      	beq.n	800a9f2 <USBD_StdEPReq+0x146>
 800a9d6:	7bbb      	ldrb	r3, [r7, #14]
 800a9d8:	2b80      	cmp	r3, #128	@ 0x80
 800a9da:	d00a      	beq.n	800a9f2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a9dc:	7bbb      	ldrb	r3, [r7, #14]
 800a9de:	4619      	mov	r1, r3
 800a9e0:	6878      	ldr	r0, [r7, #4]
 800a9e2:	f7ff f897 	bl	8009b14 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a9e6:	2180      	movs	r1, #128	@ 0x80
 800a9e8:	6878      	ldr	r0, [r7, #4]
 800a9ea:	f7ff f893 	bl	8009b14 <USBD_LL_StallEP>
 800a9ee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a9f0:	e040      	b.n	800aa74 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a9f2:	6839      	ldr	r1, [r7, #0]
 800a9f4:	6878      	ldr	r0, [r7, #4]
 800a9f6:	f000 fc78 	bl	800b2ea <USBD_CtlError>
              break;
 800a9fa:	e03b      	b.n	800aa74 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	885b      	ldrh	r3, [r3, #2]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d136      	bne.n	800aa72 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800aa04:	7bbb      	ldrb	r3, [r7, #14]
 800aa06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d004      	beq.n	800aa18 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800aa0e:	7bbb      	ldrb	r3, [r7, #14]
 800aa10:	4619      	mov	r1, r3
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	f7ff f897 	bl	8009b46 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800aa18:	6878      	ldr	r0, [r7, #4]
 800aa1a:	f000 fe40 	bl	800b69e <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800aa1e:	7bbb      	ldrb	r3, [r7, #14]
 800aa20:	4619      	mov	r1, r3
 800aa22:	6878      	ldr	r0, [r7, #4]
 800aa24:	f7ff fd95 	bl	800a552 <USBD_CoreFindEP>
 800aa28:	4603      	mov	r3, r0
 800aa2a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aa2c:	7b7b      	ldrb	r3, [r7, #13]
 800aa2e:	2bff      	cmp	r3, #255	@ 0xff
 800aa30:	d01f      	beq.n	800aa72 <USBD_StdEPReq+0x1c6>
 800aa32:	7b7b      	ldrb	r3, [r7, #13]
 800aa34:	2b01      	cmp	r3, #1
 800aa36:	d81c      	bhi.n	800aa72 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800aa38:	7b7a      	ldrb	r2, [r7, #13]
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800aa40:	7b7a      	ldrb	r2, [r7, #13]
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	32ae      	adds	r2, #174	@ 0xae
 800aa46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa4a:	689b      	ldr	r3, [r3, #8]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d010      	beq.n	800aa72 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800aa50:	7b7a      	ldrb	r2, [r7, #13]
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	32ae      	adds	r2, #174	@ 0xae
 800aa56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa5a:	689b      	ldr	r3, [r3, #8]
 800aa5c:	6839      	ldr	r1, [r7, #0]
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	4798      	blx	r3
 800aa62:	4603      	mov	r3, r0
 800aa64:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800aa66:	e004      	b.n	800aa72 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800aa68:	6839      	ldr	r1, [r7, #0]
 800aa6a:	6878      	ldr	r0, [r7, #4]
 800aa6c:	f000 fc3d 	bl	800b2ea <USBD_CtlError>
              break;
 800aa70:	e000      	b.n	800aa74 <USBD_StdEPReq+0x1c8>
              break;
 800aa72:	bf00      	nop
          }
          break;
 800aa74:	e0ab      	b.n	800abce <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa7c:	b2db      	uxtb	r3, r3
 800aa7e:	2b02      	cmp	r3, #2
 800aa80:	d002      	beq.n	800aa88 <USBD_StdEPReq+0x1dc>
 800aa82:	2b03      	cmp	r3, #3
 800aa84:	d032      	beq.n	800aaec <USBD_StdEPReq+0x240>
 800aa86:	e097      	b.n	800abb8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aa88:	7bbb      	ldrb	r3, [r7, #14]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d007      	beq.n	800aa9e <USBD_StdEPReq+0x1f2>
 800aa8e:	7bbb      	ldrb	r3, [r7, #14]
 800aa90:	2b80      	cmp	r3, #128	@ 0x80
 800aa92:	d004      	beq.n	800aa9e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800aa94:	6839      	ldr	r1, [r7, #0]
 800aa96:	6878      	ldr	r0, [r7, #4]
 800aa98:	f000 fc27 	bl	800b2ea <USBD_CtlError>
                break;
 800aa9c:	e091      	b.n	800abc2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa9e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	da0b      	bge.n	800aabe <USBD_StdEPReq+0x212>
 800aaa6:	7bbb      	ldrb	r3, [r7, #14]
 800aaa8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800aaac:	4613      	mov	r3, r2
 800aaae:	009b      	lsls	r3, r3, #2
 800aab0:	4413      	add	r3, r2
 800aab2:	009b      	lsls	r3, r3, #2
 800aab4:	3310      	adds	r3, #16
 800aab6:	687a      	ldr	r2, [r7, #4]
 800aab8:	4413      	add	r3, r2
 800aaba:	3304      	adds	r3, #4
 800aabc:	e00b      	b.n	800aad6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aabe:	7bbb      	ldrb	r3, [r7, #14]
 800aac0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aac4:	4613      	mov	r3, r2
 800aac6:	009b      	lsls	r3, r3, #2
 800aac8:	4413      	add	r3, r2
 800aaca:	009b      	lsls	r3, r3, #2
 800aacc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800aad0:	687a      	ldr	r2, [r7, #4]
 800aad2:	4413      	add	r3, r2
 800aad4:	3304      	adds	r3, #4
 800aad6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800aad8:	68bb      	ldr	r3, [r7, #8]
 800aada:	2200      	movs	r2, #0
 800aadc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800aade:	68bb      	ldr	r3, [r7, #8]
 800aae0:	2202      	movs	r2, #2
 800aae2:	4619      	mov	r1, r3
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	f000 fd80 	bl	800b5ea <USBD_CtlSendData>
              break;
 800aaea:	e06a      	b.n	800abc2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800aaec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	da11      	bge.n	800ab18 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800aaf4:	7bbb      	ldrb	r3, [r7, #14]
 800aaf6:	f003 020f 	and.w	r2, r3, #15
 800aafa:	6879      	ldr	r1, [r7, #4]
 800aafc:	4613      	mov	r3, r2
 800aafe:	009b      	lsls	r3, r3, #2
 800ab00:	4413      	add	r3, r2
 800ab02:	009b      	lsls	r3, r3, #2
 800ab04:	440b      	add	r3, r1
 800ab06:	3324      	adds	r3, #36	@ 0x24
 800ab08:	881b      	ldrh	r3, [r3, #0]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d117      	bne.n	800ab3e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ab0e:	6839      	ldr	r1, [r7, #0]
 800ab10:	6878      	ldr	r0, [r7, #4]
 800ab12:	f000 fbea 	bl	800b2ea <USBD_CtlError>
                  break;
 800ab16:	e054      	b.n	800abc2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ab18:	7bbb      	ldrb	r3, [r7, #14]
 800ab1a:	f003 020f 	and.w	r2, r3, #15
 800ab1e:	6879      	ldr	r1, [r7, #4]
 800ab20:	4613      	mov	r3, r2
 800ab22:	009b      	lsls	r3, r3, #2
 800ab24:	4413      	add	r3, r2
 800ab26:	009b      	lsls	r3, r3, #2
 800ab28:	440b      	add	r3, r1
 800ab2a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ab2e:	881b      	ldrh	r3, [r3, #0]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d104      	bne.n	800ab3e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ab34:	6839      	ldr	r1, [r7, #0]
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	f000 fbd7 	bl	800b2ea <USBD_CtlError>
                  break;
 800ab3c:	e041      	b.n	800abc2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	da0b      	bge.n	800ab5e <USBD_StdEPReq+0x2b2>
 800ab46:	7bbb      	ldrb	r3, [r7, #14]
 800ab48:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ab4c:	4613      	mov	r3, r2
 800ab4e:	009b      	lsls	r3, r3, #2
 800ab50:	4413      	add	r3, r2
 800ab52:	009b      	lsls	r3, r3, #2
 800ab54:	3310      	adds	r3, #16
 800ab56:	687a      	ldr	r2, [r7, #4]
 800ab58:	4413      	add	r3, r2
 800ab5a:	3304      	adds	r3, #4
 800ab5c:	e00b      	b.n	800ab76 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ab5e:	7bbb      	ldrb	r3, [r7, #14]
 800ab60:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab64:	4613      	mov	r3, r2
 800ab66:	009b      	lsls	r3, r3, #2
 800ab68:	4413      	add	r3, r2
 800ab6a:	009b      	lsls	r3, r3, #2
 800ab6c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ab70:	687a      	ldr	r2, [r7, #4]
 800ab72:	4413      	add	r3, r2
 800ab74:	3304      	adds	r3, #4
 800ab76:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ab78:	7bbb      	ldrb	r3, [r7, #14]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d002      	beq.n	800ab84 <USBD_StdEPReq+0x2d8>
 800ab7e:	7bbb      	ldrb	r3, [r7, #14]
 800ab80:	2b80      	cmp	r3, #128	@ 0x80
 800ab82:	d103      	bne.n	800ab8c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800ab84:	68bb      	ldr	r3, [r7, #8]
 800ab86:	2200      	movs	r2, #0
 800ab88:	601a      	str	r2, [r3, #0]
 800ab8a:	e00e      	b.n	800abaa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ab8c:	7bbb      	ldrb	r3, [r7, #14]
 800ab8e:	4619      	mov	r1, r3
 800ab90:	6878      	ldr	r0, [r7, #4]
 800ab92:	f7fe fff1 	bl	8009b78 <USBD_LL_IsStallEP>
 800ab96:	4603      	mov	r3, r0
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d003      	beq.n	800aba4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800ab9c:	68bb      	ldr	r3, [r7, #8]
 800ab9e:	2201      	movs	r2, #1
 800aba0:	601a      	str	r2, [r3, #0]
 800aba2:	e002      	b.n	800abaa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800aba4:	68bb      	ldr	r3, [r7, #8]
 800aba6:	2200      	movs	r2, #0
 800aba8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800abaa:	68bb      	ldr	r3, [r7, #8]
 800abac:	2202      	movs	r2, #2
 800abae:	4619      	mov	r1, r3
 800abb0:	6878      	ldr	r0, [r7, #4]
 800abb2:	f000 fd1a 	bl	800b5ea <USBD_CtlSendData>
              break;
 800abb6:	e004      	b.n	800abc2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800abb8:	6839      	ldr	r1, [r7, #0]
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	f000 fb95 	bl	800b2ea <USBD_CtlError>
              break;
 800abc0:	bf00      	nop
          }
          break;
 800abc2:	e004      	b.n	800abce <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800abc4:	6839      	ldr	r1, [r7, #0]
 800abc6:	6878      	ldr	r0, [r7, #4]
 800abc8:	f000 fb8f 	bl	800b2ea <USBD_CtlError>
          break;
 800abcc:	bf00      	nop
      }
      break;
 800abce:	e005      	b.n	800abdc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800abd0:	6839      	ldr	r1, [r7, #0]
 800abd2:	6878      	ldr	r0, [r7, #4]
 800abd4:	f000 fb89 	bl	800b2ea <USBD_CtlError>
      break;
 800abd8:	e000      	b.n	800abdc <USBD_StdEPReq+0x330>
      break;
 800abda:	bf00      	nop
  }

  return ret;
 800abdc:	7bfb      	ldrb	r3, [r7, #15]
}
 800abde:	4618      	mov	r0, r3
 800abe0:	3710      	adds	r7, #16
 800abe2:	46bd      	mov	sp, r7
 800abe4:	bd80      	pop	{r7, pc}
	...

0800abe8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b084      	sub	sp, #16
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
 800abf0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800abf2:	2300      	movs	r3, #0
 800abf4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800abf6:	2300      	movs	r3, #0
 800abf8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800abfa:	2300      	movs	r3, #0
 800abfc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	885b      	ldrh	r3, [r3, #2]
 800ac02:	0a1b      	lsrs	r3, r3, #8
 800ac04:	b29b      	uxth	r3, r3
 800ac06:	3b01      	subs	r3, #1
 800ac08:	2b06      	cmp	r3, #6
 800ac0a:	f200 8163 	bhi.w	800aed4 <USBD_GetDescriptor+0x2ec>
 800ac0e:	a201      	add	r2, pc, #4	@ (adr r2, 800ac14 <USBD_GetDescriptor+0x2c>)
 800ac10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac14:	0800ac31 	.word	0x0800ac31
 800ac18:	0800ac49 	.word	0x0800ac49
 800ac1c:	0800acc1 	.word	0x0800acc1
 800ac20:	0800aed5 	.word	0x0800aed5
 800ac24:	0800aed5 	.word	0x0800aed5
 800ac28:	0800ae37 	.word	0x0800ae37
 800ac2c:	0800ae7f 	.word	0x0800ae7f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	687a      	ldr	r2, [r7, #4]
 800ac3a:	7c12      	ldrb	r2, [r2, #16]
 800ac3c:	f107 0108 	add.w	r1, r7, #8
 800ac40:	4610      	mov	r0, r2
 800ac42:	4798      	blx	r3
 800ac44:	60f8      	str	r0, [r7, #12]
      break;
 800ac46:	e14d      	b.n	800aee4 <USBD_GetDescriptor+0x2fc>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	7c1b      	ldrb	r3, [r3, #16]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d11b      	bne.n	800ac88 <USBD_GetDescriptor+0xa0>
      {
#ifdef USE_USBD_COMPOSITE
        if ((uint8_t)(pdev->NumClasses) > 0U)
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	f8d3 32e4 	ldr.w	r3, [r3, #740]	@ 0x2e4
 800ac56:	b2db      	uxtb	r3, r3
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d007      	beq.n	800ac6c <USBD_GetDescriptor+0x84>
        {
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
 800ac5c:	4b9c      	ldr	r3, [pc, #624]	@ (800aed0 <USBD_GetDescriptor+0x2e8>)
 800ac5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac60:	f107 0208 	add.w	r2, r7, #8
 800ac64:	4610      	mov	r0, r2
 800ac66:	4798      	blx	r3
 800ac68:	60f8      	str	r0, [r7, #12]
 800ac6a:	e008      	b.n	800ac7e <USBD_GetDescriptor+0x96>
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac74:	f107 0208 	add.w	r2, r7, #8
 800ac78:	4610      	mov	r0, r2
 800ac7a:	4798      	blx	r3
 800ac7c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	3301      	adds	r3, #1
 800ac82:	2202      	movs	r2, #2
 800ac84:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ac86:	e12d      	b.n	800aee4 <USBD_GetDescriptor+0x2fc>
        if ((uint8_t)(pdev->NumClasses) > 0U)
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	f8d3 32e4 	ldr.w	r3, [r3, #740]	@ 0x2e4
 800ac8e:	b2db      	uxtb	r3, r3
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d007      	beq.n	800aca4 <USBD_GetDescriptor+0xbc>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetFSConfigDescriptor(&len);
 800ac94:	4b8e      	ldr	r3, [pc, #568]	@ (800aed0 <USBD_GetDescriptor+0x2e8>)
 800ac96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac98:	f107 0208 	add.w	r2, r7, #8
 800ac9c:	4610      	mov	r0, r2
 800ac9e:	4798      	blx	r3
 800aca0:	60f8      	str	r0, [r7, #12]
 800aca2:	e008      	b.n	800acb6 <USBD_GetDescriptor+0xce>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800acaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acac:	f107 0208 	add.w	r2, r7, #8
 800acb0:	4610      	mov	r0, r2
 800acb2:	4798      	blx	r3
 800acb4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	3301      	adds	r3, #1
 800acba:	2202      	movs	r2, #2
 800acbc:	701a      	strb	r2, [r3, #0]
      break;
 800acbe:	e111      	b.n	800aee4 <USBD_GetDescriptor+0x2fc>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	885b      	ldrh	r3, [r3, #2]
 800acc4:	b2db      	uxtb	r3, r3
 800acc6:	2b05      	cmp	r3, #5
 800acc8:	f200 80ac 	bhi.w	800ae24 <USBD_GetDescriptor+0x23c>
 800accc:	a201      	add	r2, pc, #4	@ (adr r2, 800acd4 <USBD_GetDescriptor+0xec>)
 800acce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acd2:	bf00      	nop
 800acd4:	0800aced 	.word	0x0800aced
 800acd8:	0800ad21 	.word	0x0800ad21
 800acdc:	0800ad55 	.word	0x0800ad55
 800ace0:	0800ad89 	.word	0x0800ad89
 800ace4:	0800adbd 	.word	0x0800adbd
 800ace8:	0800adf1 	.word	0x0800adf1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800acf2:	685b      	ldr	r3, [r3, #4]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d00b      	beq.n	800ad10 <USBD_GetDescriptor+0x128>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800acfe:	685b      	ldr	r3, [r3, #4]
 800ad00:	687a      	ldr	r2, [r7, #4]
 800ad02:	7c12      	ldrb	r2, [r2, #16]
 800ad04:	f107 0108 	add.w	r1, r7, #8
 800ad08:	4610      	mov	r0, r2
 800ad0a:	4798      	blx	r3
 800ad0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad0e:	e091      	b.n	800ae34 <USBD_GetDescriptor+0x24c>
            USBD_CtlError(pdev, req);
 800ad10:	6839      	ldr	r1, [r7, #0]
 800ad12:	6878      	ldr	r0, [r7, #4]
 800ad14:	f000 fae9 	bl	800b2ea <USBD_CtlError>
            err++;
 800ad18:	7afb      	ldrb	r3, [r7, #11]
 800ad1a:	3301      	adds	r3, #1
 800ad1c:	72fb      	strb	r3, [r7, #11]
          break;
 800ad1e:	e089      	b.n	800ae34 <USBD_GetDescriptor+0x24c>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad26:	689b      	ldr	r3, [r3, #8]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d00b      	beq.n	800ad44 <USBD_GetDescriptor+0x15c>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad32:	689b      	ldr	r3, [r3, #8]
 800ad34:	687a      	ldr	r2, [r7, #4]
 800ad36:	7c12      	ldrb	r2, [r2, #16]
 800ad38:	f107 0108 	add.w	r1, r7, #8
 800ad3c:	4610      	mov	r0, r2
 800ad3e:	4798      	blx	r3
 800ad40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad42:	e077      	b.n	800ae34 <USBD_GetDescriptor+0x24c>
            USBD_CtlError(pdev, req);
 800ad44:	6839      	ldr	r1, [r7, #0]
 800ad46:	6878      	ldr	r0, [r7, #4]
 800ad48:	f000 facf 	bl	800b2ea <USBD_CtlError>
            err++;
 800ad4c:	7afb      	ldrb	r3, [r7, #11]
 800ad4e:	3301      	adds	r3, #1
 800ad50:	72fb      	strb	r3, [r7, #11]
          break;
 800ad52:	e06f      	b.n	800ae34 <USBD_GetDescriptor+0x24c>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad5a:	68db      	ldr	r3, [r3, #12]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d00b      	beq.n	800ad78 <USBD_GetDescriptor+0x190>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad66:	68db      	ldr	r3, [r3, #12]
 800ad68:	687a      	ldr	r2, [r7, #4]
 800ad6a:	7c12      	ldrb	r2, [r2, #16]
 800ad6c:	f107 0108 	add.w	r1, r7, #8
 800ad70:	4610      	mov	r0, r2
 800ad72:	4798      	blx	r3
 800ad74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad76:	e05d      	b.n	800ae34 <USBD_GetDescriptor+0x24c>
            USBD_CtlError(pdev, req);
 800ad78:	6839      	ldr	r1, [r7, #0]
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	f000 fab5 	bl	800b2ea <USBD_CtlError>
            err++;
 800ad80:	7afb      	ldrb	r3, [r7, #11]
 800ad82:	3301      	adds	r3, #1
 800ad84:	72fb      	strb	r3, [r7, #11]
          break;
 800ad86:	e055      	b.n	800ae34 <USBD_GetDescriptor+0x24c>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad8e:	691b      	ldr	r3, [r3, #16]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d00b      	beq.n	800adac <USBD_GetDescriptor+0x1c4>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad9a:	691b      	ldr	r3, [r3, #16]
 800ad9c:	687a      	ldr	r2, [r7, #4]
 800ad9e:	7c12      	ldrb	r2, [r2, #16]
 800ada0:	f107 0108 	add.w	r1, r7, #8
 800ada4:	4610      	mov	r0, r2
 800ada6:	4798      	blx	r3
 800ada8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800adaa:	e043      	b.n	800ae34 <USBD_GetDescriptor+0x24c>
            USBD_CtlError(pdev, req);
 800adac:	6839      	ldr	r1, [r7, #0]
 800adae:	6878      	ldr	r0, [r7, #4]
 800adb0:	f000 fa9b 	bl	800b2ea <USBD_CtlError>
            err++;
 800adb4:	7afb      	ldrb	r3, [r7, #11]
 800adb6:	3301      	adds	r3, #1
 800adb8:	72fb      	strb	r3, [r7, #11]
          break;
 800adba:	e03b      	b.n	800ae34 <USBD_GetDescriptor+0x24c>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800adc2:	695b      	ldr	r3, [r3, #20]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d00b      	beq.n	800ade0 <USBD_GetDescriptor+0x1f8>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800adce:	695b      	ldr	r3, [r3, #20]
 800add0:	687a      	ldr	r2, [r7, #4]
 800add2:	7c12      	ldrb	r2, [r2, #16]
 800add4:	f107 0108 	add.w	r1, r7, #8
 800add8:	4610      	mov	r0, r2
 800adda:	4798      	blx	r3
 800addc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800adde:	e029      	b.n	800ae34 <USBD_GetDescriptor+0x24c>
            USBD_CtlError(pdev, req);
 800ade0:	6839      	ldr	r1, [r7, #0]
 800ade2:	6878      	ldr	r0, [r7, #4]
 800ade4:	f000 fa81 	bl	800b2ea <USBD_CtlError>
            err++;
 800ade8:	7afb      	ldrb	r3, [r7, #11]
 800adea:	3301      	adds	r3, #1
 800adec:	72fb      	strb	r3, [r7, #11]
          break;
 800adee:	e021      	b.n	800ae34 <USBD_GetDescriptor+0x24c>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800adf6:	699b      	ldr	r3, [r3, #24]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d00b      	beq.n	800ae14 <USBD_GetDescriptor+0x22c>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae02:	699b      	ldr	r3, [r3, #24]
 800ae04:	687a      	ldr	r2, [r7, #4]
 800ae06:	7c12      	ldrb	r2, [r2, #16]
 800ae08:	f107 0108 	add.w	r1, r7, #8
 800ae0c:	4610      	mov	r0, r2
 800ae0e:	4798      	blx	r3
 800ae10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae12:	e00f      	b.n	800ae34 <USBD_GetDescriptor+0x24c>
            USBD_CtlError(pdev, req);
 800ae14:	6839      	ldr	r1, [r7, #0]
 800ae16:	6878      	ldr	r0, [r7, #4]
 800ae18:	f000 fa67 	bl	800b2ea <USBD_CtlError>
            err++;
 800ae1c:	7afb      	ldrb	r3, [r7, #11]
 800ae1e:	3301      	adds	r3, #1
 800ae20:	72fb      	strb	r3, [r7, #11]
          break;
 800ae22:	e007      	b.n	800ae34 <USBD_GetDescriptor+0x24c>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ae24:	6839      	ldr	r1, [r7, #0]
 800ae26:	6878      	ldr	r0, [r7, #4]
 800ae28:	f000 fa5f 	bl	800b2ea <USBD_CtlError>
          err++;
 800ae2c:	7afb      	ldrb	r3, [r7, #11]
 800ae2e:	3301      	adds	r3, #1
 800ae30:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ae32:	bf00      	nop
      }
      break;
 800ae34:	e056      	b.n	800aee4 <USBD_GetDescriptor+0x2fc>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	7c1b      	ldrb	r3, [r3, #16]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d117      	bne.n	800ae6e <USBD_GetDescriptor+0x286>
      {
#ifdef USE_USBD_COMPOSITE
        if ((uint8_t)(pdev->NumClasses) > 0U)
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	f8d3 32e4 	ldr.w	r3, [r3, #740]	@ 0x2e4
 800ae44:	b2db      	uxtb	r3, r3
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d007      	beq.n	800ae5a <USBD_GetDescriptor+0x272>
        {
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
 800ae4a:	4b21      	ldr	r3, [pc, #132]	@ (800aed0 <USBD_GetDescriptor+0x2e8>)
 800ae4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae4e:	f107 0208 	add.w	r2, r7, #8
 800ae52:	4610      	mov	r0, r2
 800ae54:	4798      	blx	r3
 800ae56:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ae58:	e044      	b.n	800aee4 <USBD_GetDescriptor+0x2fc>
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae62:	f107 0208 	add.w	r2, r7, #8
 800ae66:	4610      	mov	r0, r2
 800ae68:	4798      	blx	r3
 800ae6a:	60f8      	str	r0, [r7, #12]
      break;
 800ae6c:	e03a      	b.n	800aee4 <USBD_GetDescriptor+0x2fc>
        USBD_CtlError(pdev, req);
 800ae6e:	6839      	ldr	r1, [r7, #0]
 800ae70:	6878      	ldr	r0, [r7, #4]
 800ae72:	f000 fa3a 	bl	800b2ea <USBD_CtlError>
        err++;
 800ae76:	7afb      	ldrb	r3, [r7, #11]
 800ae78:	3301      	adds	r3, #1
 800ae7a:	72fb      	strb	r3, [r7, #11]
      break;
 800ae7c:	e032      	b.n	800aee4 <USBD_GetDescriptor+0x2fc>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	7c1b      	ldrb	r3, [r3, #16]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d11b      	bne.n	800aebe <USBD_GetDescriptor+0x2d6>
      {
#ifdef USE_USBD_COMPOSITE
        if ((uint8_t)(pdev->NumClasses) > 0U)
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	f8d3 32e4 	ldr.w	r3, [r3, #740]	@ 0x2e4
 800ae8c:	b2db      	uxtb	r3, r3
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d007      	beq.n	800aea2 <USBD_GetDescriptor+0x2ba>
        {
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
 800ae92:	4b0f      	ldr	r3, [pc, #60]	@ (800aed0 <USBD_GetDescriptor+0x2e8>)
 800ae94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae96:	f107 0208 	add.w	r2, r7, #8
 800ae9a:	4610      	mov	r0, r2
 800ae9c:	4798      	blx	r3
 800ae9e:	60f8      	str	r0, [r7, #12]
 800aea0:	e008      	b.n	800aeb4 <USBD_GetDescriptor+0x2cc>
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aeaa:	f107 0208 	add.w	r2, r7, #8
 800aeae:	4610      	mov	r0, r2
 800aeb0:	4798      	blx	r3
 800aeb2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	3301      	adds	r3, #1
 800aeb8:	2207      	movs	r2, #7
 800aeba:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aebc:	e012      	b.n	800aee4 <USBD_GetDescriptor+0x2fc>
        USBD_CtlError(pdev, req);
 800aebe:	6839      	ldr	r1, [r7, #0]
 800aec0:	6878      	ldr	r0, [r7, #4]
 800aec2:	f000 fa12 	bl	800b2ea <USBD_CtlError>
        err++;
 800aec6:	7afb      	ldrb	r3, [r7, #11]
 800aec8:	3301      	adds	r3, #1
 800aeca:	72fb      	strb	r3, [r7, #11]
      break;
 800aecc:	e00a      	b.n	800aee4 <USBD_GetDescriptor+0x2fc>
 800aece:	bf00      	nop
 800aed0:	20000068 	.word	0x20000068

    default:
      USBD_CtlError(pdev, req);
 800aed4:	6839      	ldr	r1, [r7, #0]
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	f000 fa07 	bl	800b2ea <USBD_CtlError>
      err++;
 800aedc:	7afb      	ldrb	r3, [r7, #11]
 800aede:	3301      	adds	r3, #1
 800aee0:	72fb      	strb	r3, [r7, #11]
      break;
 800aee2:	bf00      	nop
  }

  if (err != 0U)
 800aee4:	7afb      	ldrb	r3, [r7, #11]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d11e      	bne.n	800af28 <USBD_GetDescriptor+0x340>
  {
    return;
  }

  if (req->wLength != 0U)
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	88db      	ldrh	r3, [r3, #6]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d016      	beq.n	800af20 <USBD_GetDescriptor+0x338>
  {
    if (len != 0U)
 800aef2:	893b      	ldrh	r3, [r7, #8]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d00e      	beq.n	800af16 <USBD_GetDescriptor+0x32e>
    {
      len = MIN(len, req->wLength);
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	88da      	ldrh	r2, [r3, #6]
 800aefc:	893b      	ldrh	r3, [r7, #8]
 800aefe:	4293      	cmp	r3, r2
 800af00:	bf28      	it	cs
 800af02:	4613      	movcs	r3, r2
 800af04:	b29b      	uxth	r3, r3
 800af06:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800af08:	893b      	ldrh	r3, [r7, #8]
 800af0a:	461a      	mov	r2, r3
 800af0c:	68f9      	ldr	r1, [r7, #12]
 800af0e:	6878      	ldr	r0, [r7, #4]
 800af10:	f000 fb6b 	bl	800b5ea <USBD_CtlSendData>
 800af14:	e009      	b.n	800af2a <USBD_GetDescriptor+0x342>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800af16:	6839      	ldr	r1, [r7, #0]
 800af18:	6878      	ldr	r0, [r7, #4]
 800af1a:	f000 f9e6 	bl	800b2ea <USBD_CtlError>
 800af1e:	e004      	b.n	800af2a <USBD_GetDescriptor+0x342>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800af20:	6878      	ldr	r0, [r7, #4]
 800af22:	f000 fbbc 	bl	800b69e <USBD_CtlSendStatus>
 800af26:	e000      	b.n	800af2a <USBD_GetDescriptor+0x342>
    return;
 800af28:	bf00      	nop
  }
}
 800af2a:	3710      	adds	r7, #16
 800af2c:	46bd      	mov	sp, r7
 800af2e:	bd80      	pop	{r7, pc}

0800af30 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b084      	sub	sp, #16
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
 800af38:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	889b      	ldrh	r3, [r3, #4]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d131      	bne.n	800afa6 <USBD_SetAddress+0x76>
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	88db      	ldrh	r3, [r3, #6]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d12d      	bne.n	800afa6 <USBD_SetAddress+0x76>
 800af4a:	683b      	ldr	r3, [r7, #0]
 800af4c:	885b      	ldrh	r3, [r3, #2]
 800af4e:	2b7f      	cmp	r3, #127	@ 0x7f
 800af50:	d829      	bhi.n	800afa6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800af52:	683b      	ldr	r3, [r7, #0]
 800af54:	885b      	ldrh	r3, [r3, #2]
 800af56:	b2db      	uxtb	r3, r3
 800af58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800af5c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af64:	b2db      	uxtb	r3, r3
 800af66:	2b03      	cmp	r3, #3
 800af68:	d104      	bne.n	800af74 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800af6a:	6839      	ldr	r1, [r7, #0]
 800af6c:	6878      	ldr	r0, [r7, #4]
 800af6e:	f000 f9bc 	bl	800b2ea <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af72:	e01d      	b.n	800afb0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	7bfa      	ldrb	r2, [r7, #15]
 800af78:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800af7c:	7bfb      	ldrb	r3, [r7, #15]
 800af7e:	4619      	mov	r1, r3
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f7fe fe25 	bl	8009bd0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	f000 fb89 	bl	800b69e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800af8c:	7bfb      	ldrb	r3, [r7, #15]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d004      	beq.n	800af9c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	2202      	movs	r2, #2
 800af96:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af9a:	e009      	b.n	800afb0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2201      	movs	r2, #1
 800afa0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afa4:	e004      	b.n	800afb0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800afa6:	6839      	ldr	r1, [r7, #0]
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	f000 f99e 	bl	800b2ea <USBD_CtlError>
  }
}
 800afae:	bf00      	nop
 800afb0:	bf00      	nop
 800afb2:	3710      	adds	r7, #16
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bd80      	pop	{r7, pc}

0800afb8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b084      	sub	sp, #16
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
 800afc0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800afc2:	2300      	movs	r3, #0
 800afc4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	885b      	ldrh	r3, [r3, #2]
 800afca:	b2da      	uxtb	r2, r3
 800afcc:	4b4e      	ldr	r3, [pc, #312]	@ (800b108 <USBD_SetConfig+0x150>)
 800afce:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800afd0:	4b4d      	ldr	r3, [pc, #308]	@ (800b108 <USBD_SetConfig+0x150>)
 800afd2:	781b      	ldrb	r3, [r3, #0]
 800afd4:	2b01      	cmp	r3, #1
 800afd6:	d905      	bls.n	800afe4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800afd8:	6839      	ldr	r1, [r7, #0]
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	f000 f985 	bl	800b2ea <USBD_CtlError>
    return USBD_FAIL;
 800afe0:	2303      	movs	r3, #3
 800afe2:	e08c      	b.n	800b0fe <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800afea:	b2db      	uxtb	r3, r3
 800afec:	2b02      	cmp	r3, #2
 800afee:	d002      	beq.n	800aff6 <USBD_SetConfig+0x3e>
 800aff0:	2b03      	cmp	r3, #3
 800aff2:	d029      	beq.n	800b048 <USBD_SetConfig+0x90>
 800aff4:	e075      	b.n	800b0e2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800aff6:	4b44      	ldr	r3, [pc, #272]	@ (800b108 <USBD_SetConfig+0x150>)
 800aff8:	781b      	ldrb	r3, [r3, #0]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d020      	beq.n	800b040 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800affe:	4b42      	ldr	r3, [pc, #264]	@ (800b108 <USBD_SetConfig+0x150>)
 800b000:	781b      	ldrb	r3, [r3, #0]
 800b002:	461a      	mov	r2, r3
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b008:	4b3f      	ldr	r3, [pc, #252]	@ (800b108 <USBD_SetConfig+0x150>)
 800b00a:	781b      	ldrb	r3, [r3, #0]
 800b00c:	4619      	mov	r1, r3
 800b00e:	6878      	ldr	r0, [r7, #4]
 800b010:	f7fe ff65 	bl	8009ede <USBD_SetClassConfig>
 800b014:	4603      	mov	r3, r0
 800b016:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b018:	7bfb      	ldrb	r3, [r7, #15]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d008      	beq.n	800b030 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b01e:	6839      	ldr	r1, [r7, #0]
 800b020:	6878      	ldr	r0, [r7, #4]
 800b022:	f000 f962 	bl	800b2ea <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	2202      	movs	r2, #2
 800b02a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b02e:	e065      	b.n	800b0fc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b030:	6878      	ldr	r0, [r7, #4]
 800b032:	f000 fb34 	bl	800b69e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	2203      	movs	r2, #3
 800b03a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b03e:	e05d      	b.n	800b0fc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b040:	6878      	ldr	r0, [r7, #4]
 800b042:	f000 fb2c 	bl	800b69e <USBD_CtlSendStatus>
      break;
 800b046:	e059      	b.n	800b0fc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b048:	4b2f      	ldr	r3, [pc, #188]	@ (800b108 <USBD_SetConfig+0x150>)
 800b04a:	781b      	ldrb	r3, [r3, #0]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d112      	bne.n	800b076 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	2202      	movs	r2, #2
 800b054:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800b058:	4b2b      	ldr	r3, [pc, #172]	@ (800b108 <USBD_SetConfig+0x150>)
 800b05a:	781b      	ldrb	r3, [r3, #0]
 800b05c:	461a      	mov	r2, r3
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b062:	4b29      	ldr	r3, [pc, #164]	@ (800b108 <USBD_SetConfig+0x150>)
 800b064:	781b      	ldrb	r3, [r3, #0]
 800b066:	4619      	mov	r1, r3
 800b068:	6878      	ldr	r0, [r7, #4]
 800b06a:	f7fe ff73 	bl	8009f54 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b06e:	6878      	ldr	r0, [r7, #4]
 800b070:	f000 fb15 	bl	800b69e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b074:	e042      	b.n	800b0fc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b076:	4b24      	ldr	r3, [pc, #144]	@ (800b108 <USBD_SetConfig+0x150>)
 800b078:	781b      	ldrb	r3, [r3, #0]
 800b07a:	461a      	mov	r2, r3
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	685b      	ldr	r3, [r3, #4]
 800b080:	429a      	cmp	r2, r3
 800b082:	d02a      	beq.n	800b0da <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	685b      	ldr	r3, [r3, #4]
 800b088:	b2db      	uxtb	r3, r3
 800b08a:	4619      	mov	r1, r3
 800b08c:	6878      	ldr	r0, [r7, #4]
 800b08e:	f7fe ff61 	bl	8009f54 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b092:	4b1d      	ldr	r3, [pc, #116]	@ (800b108 <USBD_SetConfig+0x150>)
 800b094:	781b      	ldrb	r3, [r3, #0]
 800b096:	461a      	mov	r2, r3
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b09c:	4b1a      	ldr	r3, [pc, #104]	@ (800b108 <USBD_SetConfig+0x150>)
 800b09e:	781b      	ldrb	r3, [r3, #0]
 800b0a0:	4619      	mov	r1, r3
 800b0a2:	6878      	ldr	r0, [r7, #4]
 800b0a4:	f7fe ff1b 	bl	8009ede <USBD_SetClassConfig>
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b0ac:	7bfb      	ldrb	r3, [r7, #15]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d00f      	beq.n	800b0d2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b0b2:	6839      	ldr	r1, [r7, #0]
 800b0b4:	6878      	ldr	r0, [r7, #4]
 800b0b6:	f000 f918 	bl	800b2ea <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	685b      	ldr	r3, [r3, #4]
 800b0be:	b2db      	uxtb	r3, r3
 800b0c0:	4619      	mov	r1, r3
 800b0c2:	6878      	ldr	r0, [r7, #4]
 800b0c4:	f7fe ff46 	bl	8009f54 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2202      	movs	r2, #2
 800b0cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b0d0:	e014      	b.n	800b0fc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b0d2:	6878      	ldr	r0, [r7, #4]
 800b0d4:	f000 fae3 	bl	800b69e <USBD_CtlSendStatus>
      break;
 800b0d8:	e010      	b.n	800b0fc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b0da:	6878      	ldr	r0, [r7, #4]
 800b0dc:	f000 fadf 	bl	800b69e <USBD_CtlSendStatus>
      break;
 800b0e0:	e00c      	b.n	800b0fc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b0e2:	6839      	ldr	r1, [r7, #0]
 800b0e4:	6878      	ldr	r0, [r7, #4]
 800b0e6:	f000 f900 	bl	800b2ea <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b0ea:	4b07      	ldr	r3, [pc, #28]	@ (800b108 <USBD_SetConfig+0x150>)
 800b0ec:	781b      	ldrb	r3, [r3, #0]
 800b0ee:	4619      	mov	r1, r3
 800b0f0:	6878      	ldr	r0, [r7, #4]
 800b0f2:	f7fe ff2f 	bl	8009f54 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b0f6:	2303      	movs	r3, #3
 800b0f8:	73fb      	strb	r3, [r7, #15]
      break;
 800b0fa:	bf00      	nop
  }

  return ret;
 800b0fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0fe:	4618      	mov	r0, r3
 800b100:	3710      	adds	r7, #16
 800b102:	46bd      	mov	sp, r7
 800b104:	bd80      	pop	{r7, pc}
 800b106:	bf00      	nop
 800b108:	20000aa0 	.word	0x20000aa0

0800b10c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b082      	sub	sp, #8
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
 800b114:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	88db      	ldrh	r3, [r3, #6]
 800b11a:	2b01      	cmp	r3, #1
 800b11c:	d004      	beq.n	800b128 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b11e:	6839      	ldr	r1, [r7, #0]
 800b120:	6878      	ldr	r0, [r7, #4]
 800b122:	f000 f8e2 	bl	800b2ea <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b126:	e023      	b.n	800b170 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b12e:	b2db      	uxtb	r3, r3
 800b130:	2b02      	cmp	r3, #2
 800b132:	dc02      	bgt.n	800b13a <USBD_GetConfig+0x2e>
 800b134:	2b00      	cmp	r3, #0
 800b136:	dc03      	bgt.n	800b140 <USBD_GetConfig+0x34>
 800b138:	e015      	b.n	800b166 <USBD_GetConfig+0x5a>
 800b13a:	2b03      	cmp	r3, #3
 800b13c:	d00b      	beq.n	800b156 <USBD_GetConfig+0x4a>
 800b13e:	e012      	b.n	800b166 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2200      	movs	r2, #0
 800b144:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	3308      	adds	r3, #8
 800b14a:	2201      	movs	r2, #1
 800b14c:	4619      	mov	r1, r3
 800b14e:	6878      	ldr	r0, [r7, #4]
 800b150:	f000 fa4b 	bl	800b5ea <USBD_CtlSendData>
        break;
 800b154:	e00c      	b.n	800b170 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	3304      	adds	r3, #4
 800b15a:	2201      	movs	r2, #1
 800b15c:	4619      	mov	r1, r3
 800b15e:	6878      	ldr	r0, [r7, #4]
 800b160:	f000 fa43 	bl	800b5ea <USBD_CtlSendData>
        break;
 800b164:	e004      	b.n	800b170 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b166:	6839      	ldr	r1, [r7, #0]
 800b168:	6878      	ldr	r0, [r7, #4]
 800b16a:	f000 f8be 	bl	800b2ea <USBD_CtlError>
        break;
 800b16e:	bf00      	nop
}
 800b170:	bf00      	nop
 800b172:	3708      	adds	r7, #8
 800b174:	46bd      	mov	sp, r7
 800b176:	bd80      	pop	{r7, pc}

0800b178 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b082      	sub	sp, #8
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
 800b180:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b188:	b2db      	uxtb	r3, r3
 800b18a:	3b01      	subs	r3, #1
 800b18c:	2b02      	cmp	r3, #2
 800b18e:	d81e      	bhi.n	800b1ce <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b190:	683b      	ldr	r3, [r7, #0]
 800b192:	88db      	ldrh	r3, [r3, #6]
 800b194:	2b02      	cmp	r3, #2
 800b196:	d004      	beq.n	800b1a2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b198:	6839      	ldr	r1, [r7, #0]
 800b19a:	6878      	ldr	r0, [r7, #4]
 800b19c:	f000 f8a5 	bl	800b2ea <USBD_CtlError>
        break;
 800b1a0:	e01a      	b.n	800b1d8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	2201      	movs	r2, #1
 800b1a6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d005      	beq.n	800b1be <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	68db      	ldr	r3, [r3, #12]
 800b1b6:	f043 0202 	orr.w	r2, r3, #2
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	330c      	adds	r3, #12
 800b1c2:	2202      	movs	r2, #2
 800b1c4:	4619      	mov	r1, r3
 800b1c6:	6878      	ldr	r0, [r7, #4]
 800b1c8:	f000 fa0f 	bl	800b5ea <USBD_CtlSendData>
      break;
 800b1cc:	e004      	b.n	800b1d8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b1ce:	6839      	ldr	r1, [r7, #0]
 800b1d0:	6878      	ldr	r0, [r7, #4]
 800b1d2:	f000 f88a 	bl	800b2ea <USBD_CtlError>
      break;
 800b1d6:	bf00      	nop
  }
}
 800b1d8:	bf00      	nop
 800b1da:	3708      	adds	r7, #8
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	bd80      	pop	{r7, pc}

0800b1e0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b082      	sub	sp, #8
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
 800b1e8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	885b      	ldrh	r3, [r3, #2]
 800b1ee:	2b01      	cmp	r3, #1
 800b1f0:	d107      	bne.n	800b202 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	2201      	movs	r2, #1
 800b1f6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b1fa:	6878      	ldr	r0, [r7, #4]
 800b1fc:	f000 fa4f 	bl	800b69e <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b200:	e013      	b.n	800b22a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	885b      	ldrh	r3, [r3, #2]
 800b206:	2b02      	cmp	r3, #2
 800b208:	d10b      	bne.n	800b222 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	889b      	ldrh	r3, [r3, #4]
 800b20e:	0a1b      	lsrs	r3, r3, #8
 800b210:	b29b      	uxth	r3, r3
 800b212:	b2da      	uxtb	r2, r3
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b21a:	6878      	ldr	r0, [r7, #4]
 800b21c:	f000 fa3f 	bl	800b69e <USBD_CtlSendStatus>
}
 800b220:	e003      	b.n	800b22a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b222:	6839      	ldr	r1, [r7, #0]
 800b224:	6878      	ldr	r0, [r7, #4]
 800b226:	f000 f860 	bl	800b2ea <USBD_CtlError>
}
 800b22a:	bf00      	nop
 800b22c:	3708      	adds	r7, #8
 800b22e:	46bd      	mov	sp, r7
 800b230:	bd80      	pop	{r7, pc}

0800b232 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b232:	b580      	push	{r7, lr}
 800b234:	b082      	sub	sp, #8
 800b236:	af00      	add	r7, sp, #0
 800b238:	6078      	str	r0, [r7, #4]
 800b23a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b242:	b2db      	uxtb	r3, r3
 800b244:	3b01      	subs	r3, #1
 800b246:	2b02      	cmp	r3, #2
 800b248:	d80b      	bhi.n	800b262 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	885b      	ldrh	r3, [r3, #2]
 800b24e:	2b01      	cmp	r3, #1
 800b250:	d10c      	bne.n	800b26c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	2200      	movs	r2, #0
 800b256:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b25a:	6878      	ldr	r0, [r7, #4]
 800b25c:	f000 fa1f 	bl	800b69e <USBD_CtlSendStatus>
      }
      break;
 800b260:	e004      	b.n	800b26c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b262:	6839      	ldr	r1, [r7, #0]
 800b264:	6878      	ldr	r0, [r7, #4]
 800b266:	f000 f840 	bl	800b2ea <USBD_CtlError>
      break;
 800b26a:	e000      	b.n	800b26e <USBD_ClrFeature+0x3c>
      break;
 800b26c:	bf00      	nop
  }
}
 800b26e:	bf00      	nop
 800b270:	3708      	adds	r7, #8
 800b272:	46bd      	mov	sp, r7
 800b274:	bd80      	pop	{r7, pc}

0800b276 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b276:	b580      	push	{r7, lr}
 800b278:	b084      	sub	sp, #16
 800b27a:	af00      	add	r7, sp, #0
 800b27c:	6078      	str	r0, [r7, #4]
 800b27e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	781a      	ldrb	r2, [r3, #0]
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	3301      	adds	r3, #1
 800b290:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	781a      	ldrb	r2, [r3, #0]
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	3301      	adds	r3, #1
 800b29e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b2a0:	68f8      	ldr	r0, [r7, #12]
 800b2a2:	f7ff fa06 	bl	800a6b2 <SWAPBYTE>
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	461a      	mov	r2, r3
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	3301      	adds	r3, #1
 800b2b2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	3301      	adds	r3, #1
 800b2b8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b2ba:	68f8      	ldr	r0, [r7, #12]
 800b2bc:	f7ff f9f9 	bl	800a6b2 <SWAPBYTE>
 800b2c0:	4603      	mov	r3, r0
 800b2c2:	461a      	mov	r2, r3
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	3301      	adds	r3, #1
 800b2cc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	3301      	adds	r3, #1
 800b2d2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b2d4:	68f8      	ldr	r0, [r7, #12]
 800b2d6:	f7ff f9ec 	bl	800a6b2 <SWAPBYTE>
 800b2da:	4603      	mov	r3, r0
 800b2dc:	461a      	mov	r2, r3
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	80da      	strh	r2, [r3, #6]
}
 800b2e2:	bf00      	nop
 800b2e4:	3710      	adds	r7, #16
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd80      	pop	{r7, pc}

0800b2ea <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2ea:	b580      	push	{r7, lr}
 800b2ec:	b082      	sub	sp, #8
 800b2ee:	af00      	add	r7, sp, #0
 800b2f0:	6078      	str	r0, [r7, #4]
 800b2f2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b2f4:	2180      	movs	r1, #128	@ 0x80
 800b2f6:	6878      	ldr	r0, [r7, #4]
 800b2f8:	f7fe fc0c 	bl	8009b14 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b2fc:	2100      	movs	r1, #0
 800b2fe:	6878      	ldr	r0, [r7, #4]
 800b300:	f7fe fc08 	bl	8009b14 <USBD_LL_StallEP>
}
 800b304:	bf00      	nop
 800b306:	3708      	adds	r7, #8
 800b308:	46bd      	mov	sp, r7
 800b30a:	bd80      	pop	{r7, pc}

0800b30c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b086      	sub	sp, #24
 800b310:	af00      	add	r7, sp, #0
 800b312:	60f8      	str	r0, [r7, #12]
 800b314:	60b9      	str	r1, [r7, #8]
 800b316:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b318:	2300      	movs	r3, #0
 800b31a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d036      	beq.n	800b390 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b326:	6938      	ldr	r0, [r7, #16]
 800b328:	f000 f836 	bl	800b398 <USBD_GetLen>
 800b32c:	4603      	mov	r3, r0
 800b32e:	3301      	adds	r3, #1
 800b330:	b29b      	uxth	r3, r3
 800b332:	005b      	lsls	r3, r3, #1
 800b334:	b29a      	uxth	r2, r3
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b33a:	7dfb      	ldrb	r3, [r7, #23]
 800b33c:	68ba      	ldr	r2, [r7, #8]
 800b33e:	4413      	add	r3, r2
 800b340:	687a      	ldr	r2, [r7, #4]
 800b342:	7812      	ldrb	r2, [r2, #0]
 800b344:	701a      	strb	r2, [r3, #0]
  idx++;
 800b346:	7dfb      	ldrb	r3, [r7, #23]
 800b348:	3301      	adds	r3, #1
 800b34a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b34c:	7dfb      	ldrb	r3, [r7, #23]
 800b34e:	68ba      	ldr	r2, [r7, #8]
 800b350:	4413      	add	r3, r2
 800b352:	2203      	movs	r2, #3
 800b354:	701a      	strb	r2, [r3, #0]
  idx++;
 800b356:	7dfb      	ldrb	r3, [r7, #23]
 800b358:	3301      	adds	r3, #1
 800b35a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b35c:	e013      	b.n	800b386 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b35e:	7dfb      	ldrb	r3, [r7, #23]
 800b360:	68ba      	ldr	r2, [r7, #8]
 800b362:	4413      	add	r3, r2
 800b364:	693a      	ldr	r2, [r7, #16]
 800b366:	7812      	ldrb	r2, [r2, #0]
 800b368:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b36a:	693b      	ldr	r3, [r7, #16]
 800b36c:	3301      	adds	r3, #1
 800b36e:	613b      	str	r3, [r7, #16]
    idx++;
 800b370:	7dfb      	ldrb	r3, [r7, #23]
 800b372:	3301      	adds	r3, #1
 800b374:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b376:	7dfb      	ldrb	r3, [r7, #23]
 800b378:	68ba      	ldr	r2, [r7, #8]
 800b37a:	4413      	add	r3, r2
 800b37c:	2200      	movs	r2, #0
 800b37e:	701a      	strb	r2, [r3, #0]
    idx++;
 800b380:	7dfb      	ldrb	r3, [r7, #23]
 800b382:	3301      	adds	r3, #1
 800b384:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b386:	693b      	ldr	r3, [r7, #16]
 800b388:	781b      	ldrb	r3, [r3, #0]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d1e7      	bne.n	800b35e <USBD_GetString+0x52>
 800b38e:	e000      	b.n	800b392 <USBD_GetString+0x86>
    return;
 800b390:	bf00      	nop
  }
}
 800b392:	3718      	adds	r7, #24
 800b394:	46bd      	mov	sp, r7
 800b396:	bd80      	pop	{r7, pc}

0800b398 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b398:	b480      	push	{r7}
 800b39a:	b085      	sub	sp, #20
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b3a8:	e005      	b.n	800b3b6 <USBD_GetLen+0x1e>
  {
    len++;
 800b3aa:	7bfb      	ldrb	r3, [r7, #15]
 800b3ac:	3301      	adds	r3, #1
 800b3ae:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	3301      	adds	r3, #1
 800b3b4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b3b6:	68bb      	ldr	r3, [r7, #8]
 800b3b8:	781b      	ldrb	r3, [r3, #0]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d1f5      	bne.n	800b3aa <USBD_GetLen+0x12>
  }

  return len;
 800b3be:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	3714      	adds	r7, #20
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ca:	4770      	bx	lr

0800b3cc <USBD_Class_DeviceDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b3cc:	b480      	push	{r7}
 800b3ce:	b083      	sub	sp, #12
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	4603      	mov	r3, r0
 800b3d4:	6039      	str	r1, [r7, #0]
 800b3d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = sizeof(USBD_DeviceDesc);
 800b3d8:	683b      	ldr	r3, [r7, #0]
 800b3da:	2212      	movs	r2, #18
 800b3dc:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)USBD_DeviceDesc;
 800b3de:	4b03      	ldr	r3, [pc, #12]	@ (800b3ec <USBD_Class_DeviceDescriptor+0x20>)
}
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	370c      	adds	r7, #12
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ea:	4770      	bx	lr
 800b3ec:	2000015c 	.word	0x2000015c

0800b3f0 <USBD_Class_LangIDStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b3f0:	b480      	push	{r7}
 800b3f2:	b083      	sub	sp, #12
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	4603      	mov	r3, r0
 800b3f8:	6039      	str	r1, [r7, #0]
 800b3fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = sizeof(USBD_LangIDDesc);
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	2204      	movs	r2, #4
 800b400:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)USBD_LangIDDesc;
 800b402:	4b03      	ldr	r3, [pc, #12]	@ (800b410 <USBD_Class_LangIDStrDescriptor+0x20>)
}
 800b404:	4618      	mov	r0, r3
 800b406:	370c      	adds	r7, #12
 800b408:	46bd      	mov	sp, r7
 800b40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40e:	4770      	bx	lr
 800b410:	20000170 	.word	0x20000170

0800b414 <USBD_Class_ProductStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b082      	sub	sp, #8
 800b418:	af00      	add	r7, sp, #0
 800b41a:	4603      	mov	r3, r0
 800b41c:	6039      	str	r1, [r7, #0]
 800b41e:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 800b420:	79fb      	ldrb	r3, [r7, #7]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d105      	bne.n	800b432 <USBD_Class_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_HS_STRING, USBD_StrDesc, length);
 800b426:	683a      	ldr	r2, [r7, #0]
 800b428:	4907      	ldr	r1, [pc, #28]	@ (800b448 <USBD_Class_ProductStrDescriptor+0x34>)
 800b42a:	4808      	ldr	r0, [pc, #32]	@ (800b44c <USBD_Class_ProductStrDescriptor+0x38>)
 800b42c:	f7ff ff6e 	bl	800b30c <USBD_GetString>
 800b430:	e004      	b.n	800b43c <USBD_Class_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);
 800b432:	683a      	ldr	r2, [r7, #0]
 800b434:	4904      	ldr	r1, [pc, #16]	@ (800b448 <USBD_Class_ProductStrDescriptor+0x34>)
 800b436:	4806      	ldr	r0, [pc, #24]	@ (800b450 <USBD_Class_ProductStrDescriptor+0x3c>)
 800b438:	f7ff ff68 	bl	800b30c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b43c:	4b02      	ldr	r3, [pc, #8]	@ (800b448 <USBD_Class_ProductStrDescriptor+0x34>)
}
 800b43e:	4618      	mov	r0, r3
 800b440:	3708      	adds	r7, #8
 800b442:	46bd      	mov	sp, r7
 800b444:	bd80      	pop	{r7, pc}
 800b446:	bf00      	nop
 800b448:	20000aa4 	.word	0x20000aa4
 800b44c:	0800c678 	.word	0x0800c678
 800b450:	0800c69c 	.word	0x0800c69c

0800b454 <USBD_Class_ManufacturerStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b082      	sub	sp, #8
 800b458:	af00      	add	r7, sp, #0
 800b45a:	4603      	mov	r3, r0
 800b45c:	6039      	str	r1, [r7, #0]
 800b45e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b460:	683a      	ldr	r2, [r7, #0]
 800b462:	4904      	ldr	r1, [pc, #16]	@ (800b474 <USBD_Class_ManufacturerStrDescriptor+0x20>)
 800b464:	4804      	ldr	r0, [pc, #16]	@ (800b478 <USBD_Class_ManufacturerStrDescriptor+0x24>)
 800b466:	f7ff ff51 	bl	800b30c <USBD_GetString>
  return USBD_StrDesc;
 800b46a:	4b02      	ldr	r3, [pc, #8]	@ (800b474 <USBD_Class_ManufacturerStrDescriptor+0x20>)
}
 800b46c:	4618      	mov	r0, r3
 800b46e:	3708      	adds	r7, #8
 800b470:	46bd      	mov	sp, r7
 800b472:	bd80      	pop	{r7, pc}
 800b474:	20000aa4 	.word	0x20000aa4
 800b478:	0800c6c0 	.word	0x0800c6c0

0800b47c <USBD_Class_SerialStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b082      	sub	sp, #8
 800b480:	af00      	add	r7, sp, #0
 800b482:	4603      	mov	r3, r0
 800b484:	6039      	str	r1, [r7, #0]
 800b486:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = USB_SIZ_STRING_SERIAL;
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	221a      	movs	r2, #26
 800b48c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique ID*/
  Get_SerialNum();
 800b48e:	f000 f843 	bl	800b518 <Get_SerialNum>

  return (uint8_t *)USBD_StringSerial;
 800b492:	4b02      	ldr	r3, [pc, #8]	@ (800b49c <USBD_Class_SerialStrDescriptor+0x20>)
}
 800b494:	4618      	mov	r0, r3
 800b496:	3708      	adds	r7, #8
 800b498:	46bd      	mov	sp, r7
 800b49a:	bd80      	pop	{r7, pc}
 800b49c:	20000174 	.word	0x20000174

0800b4a0 <USBD_Class_ConfigStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b082      	sub	sp, #8
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	6039      	str	r1, [r7, #0]
 800b4aa:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 800b4ac:	79fb      	ldrb	r3, [r7, #7]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d105      	bne.n	800b4be <USBD_Class_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_HS_STRING, USBD_StrDesc, length);
 800b4b2:	683a      	ldr	r2, [r7, #0]
 800b4b4:	4907      	ldr	r1, [pc, #28]	@ (800b4d4 <USBD_Class_ConfigStrDescriptor+0x34>)
 800b4b6:	4808      	ldr	r0, [pc, #32]	@ (800b4d8 <USBD_Class_ConfigStrDescriptor+0x38>)
 800b4b8:	f7ff ff28 	bl	800b30c <USBD_GetString>
 800b4bc:	e004      	b.n	800b4c8 <USBD_Class_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length);
 800b4be:	683a      	ldr	r2, [r7, #0]
 800b4c0:	4904      	ldr	r1, [pc, #16]	@ (800b4d4 <USBD_Class_ConfigStrDescriptor+0x34>)
 800b4c2:	4805      	ldr	r0, [pc, #20]	@ (800b4d8 <USBD_Class_ConfigStrDescriptor+0x38>)
 800b4c4:	f7ff ff22 	bl	800b30c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b4c8:	4b02      	ldr	r3, [pc, #8]	@ (800b4d4 <USBD_Class_ConfigStrDescriptor+0x34>)
}
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	3708      	adds	r7, #8
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	bd80      	pop	{r7, pc}
 800b4d2:	bf00      	nop
 800b4d4:	20000aa4 	.word	0x20000aa4
 800b4d8:	0800c6d4 	.word	0x0800c6d4

0800b4dc <USBD_Class_InterfaceStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b082      	sub	sp, #8
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	6039      	str	r1, [r7, #0]
 800b4e6:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 800b4e8:	79fb      	ldrb	r3, [r7, #7]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d105      	bne.n	800b4fa <USBD_Class_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_HS_STRING, USBD_StrDesc, length);
 800b4ee:	683a      	ldr	r2, [r7, #0]
 800b4f0:	4907      	ldr	r1, [pc, #28]	@ (800b510 <USBD_Class_InterfaceStrDescriptor+0x34>)
 800b4f2:	4808      	ldr	r0, [pc, #32]	@ (800b514 <USBD_Class_InterfaceStrDescriptor+0x38>)
 800b4f4:	f7ff ff0a 	bl	800b30c <USBD_GetString>
 800b4f8:	e004      	b.n	800b504 <USBD_Class_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 800b4fa:	683a      	ldr	r2, [r7, #0]
 800b4fc:	4904      	ldr	r1, [pc, #16]	@ (800b510 <USBD_Class_InterfaceStrDescriptor+0x34>)
 800b4fe:	4805      	ldr	r0, [pc, #20]	@ (800b514 <USBD_Class_InterfaceStrDescriptor+0x38>)
 800b500:	f7ff ff04 	bl	800b30c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b504:	4b02      	ldr	r3, [pc, #8]	@ (800b510 <USBD_Class_InterfaceStrDescriptor+0x34>)
}
 800b506:	4618      	mov	r0, r3
 800b508:	3708      	adds	r7, #8
 800b50a:	46bd      	mov	sp, r7
 800b50c:	bd80      	pop	{r7, pc}
 800b50e:	bf00      	nop
 800b510:	20000aa4 	.word	0x20000aa4
 800b514:	0800c6f4 	.word	0x0800c6f4

0800b518 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b084      	sub	sp, #16
 800b51c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *)DEVICE_ID1;
 800b51e:	4b0f      	ldr	r3, [pc, #60]	@ (800b55c <Get_SerialNum+0x44>)
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *)DEVICE_ID2;
 800b524:	4b0e      	ldr	r3, [pc, #56]	@ (800b560 <Get_SerialNum+0x48>)
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *)DEVICE_ID3;
 800b52a:	4b0e      	ldr	r3, [pc, #56]	@ (800b564 <Get_SerialNum+0x4c>)
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b530:	68fa      	ldr	r2, [r7, #12]
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	4413      	add	r3, r2
 800b536:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0U)
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d009      	beq.n	800b552 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8U);
 800b53e:	2208      	movs	r2, #8
 800b540:	4909      	ldr	r1, [pc, #36]	@ (800b568 <Get_SerialNum+0x50>)
 800b542:	68f8      	ldr	r0, [r7, #12]
 800b544:	f000 f814 	bl	800b570 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4U);
 800b548:	2204      	movs	r2, #4
 800b54a:	4908      	ldr	r1, [pc, #32]	@ (800b56c <Get_SerialNum+0x54>)
 800b54c:	68b8      	ldr	r0, [r7, #8]
 800b54e:	f000 f80f 	bl	800b570 <IntToUnicode>
  }
}
 800b552:	bf00      	nop
 800b554:	3710      	adds	r7, #16
 800b556:	46bd      	mov	sp, r7
 800b558:	bd80      	pop	{r7, pc}
 800b55a:	bf00      	nop
 800b55c:	08fff800 	.word	0x08fff800
 800b560:	08fff804 	.word	0x08fff804
 800b564:	08fff808 	.word	0x08fff808
 800b568:	20000176 	.word	0x20000176
 800b56c:	20000186 	.word	0x20000186

0800b570 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t *pbuf, uint8_t len)
{
 800b570:	b480      	push	{r7}
 800b572:	b087      	sub	sp, #28
 800b574:	af00      	add	r7, sp, #0
 800b576:	60f8      	str	r0, [r7, #12]
 800b578:	60b9      	str	r1, [r7, #8]
 800b57a:	4613      	mov	r3, r2
 800b57c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0U;
 800b57e:	2300      	movs	r3, #0
 800b580:	75fb      	strb	r3, [r7, #23]

  for (idx = 0U ; idx < len ; idx ++)
 800b582:	2300      	movs	r3, #0
 800b584:	75fb      	strb	r3, [r7, #23]
 800b586:	e025      	b.n	800b5d4 <IntToUnicode+0x64>
  {
    if (((value >> 28)) < 0xAU)
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	0f1b      	lsrs	r3, r3, #28
 800b58c:	2b09      	cmp	r3, #9
 800b58e:	d80a      	bhi.n	800b5a6 <IntToUnicode+0x36>
    {
      pbuf[ 2U * idx] = (value >> 28) + '0';
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	0f1b      	lsrs	r3, r3, #28
 800b594:	b2da      	uxtb	r2, r3
 800b596:	7dfb      	ldrb	r3, [r7, #23]
 800b598:	005b      	lsls	r3, r3, #1
 800b59a:	68b9      	ldr	r1, [r7, #8]
 800b59c:	440b      	add	r3, r1
 800b59e:	3230      	adds	r2, #48	@ 0x30
 800b5a0:	b2d2      	uxtb	r2, r2
 800b5a2:	701a      	strb	r2, [r3, #0]
 800b5a4:	e009      	b.n	800b5ba <IntToUnicode+0x4a>
    }
    else
    {
      pbuf[2U * idx] = (value >> 28) + 'A' - 10U;
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	0f1b      	lsrs	r3, r3, #28
 800b5aa:	b2da      	uxtb	r2, r3
 800b5ac:	7dfb      	ldrb	r3, [r7, #23]
 800b5ae:	005b      	lsls	r3, r3, #1
 800b5b0:	68b9      	ldr	r1, [r7, #8]
 800b5b2:	440b      	add	r3, r1
 800b5b4:	3237      	adds	r2, #55	@ 0x37
 800b5b6:	b2d2      	uxtb	r2, r2
 800b5b8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	011b      	lsls	r3, r3, #4
 800b5be:	60fb      	str	r3, [r7, #12]

    pbuf[2U * idx + 1] = 0U;
 800b5c0:	7dfb      	ldrb	r3, [r7, #23]
 800b5c2:	005b      	lsls	r3, r3, #1
 800b5c4:	3301      	adds	r3, #1
 800b5c6:	68ba      	ldr	r2, [r7, #8]
 800b5c8:	4413      	add	r3, r2
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	701a      	strb	r2, [r3, #0]
  for (idx = 0U ; idx < len ; idx ++)
 800b5ce:	7dfb      	ldrb	r3, [r7, #23]
 800b5d0:	3301      	adds	r3, #1
 800b5d2:	75fb      	strb	r3, [r7, #23]
 800b5d4:	7dfa      	ldrb	r2, [r7, #23]
 800b5d6:	79fb      	ldrb	r3, [r7, #7]
 800b5d8:	429a      	cmp	r2, r3
 800b5da:	d3d5      	bcc.n	800b588 <IntToUnicode+0x18>
  }
}
 800b5dc:	bf00      	nop
 800b5de:	bf00      	nop
 800b5e0:	371c      	adds	r7, #28
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e8:	4770      	bx	lr

0800b5ea <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b5ea:	b580      	push	{r7, lr}
 800b5ec:	b084      	sub	sp, #16
 800b5ee:	af00      	add	r7, sp, #0
 800b5f0:	60f8      	str	r0, [r7, #12]
 800b5f2:	60b9      	str	r1, [r7, #8]
 800b5f4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	2202      	movs	r2, #2
 800b5fa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	687a      	ldr	r2, [r7, #4]
 800b602:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	687a      	ldr	r2, [r7, #4]
 800b608:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	68ba      	ldr	r2, [r7, #8]
 800b60e:	2100      	movs	r1, #0
 800b610:	68f8      	ldr	r0, [r7, #12]
 800b612:	f7fe faf6 	bl	8009c02 <USBD_LL_Transmit>

  return USBD_OK;
 800b616:	2300      	movs	r3, #0
}
 800b618:	4618      	mov	r0, r3
 800b61a:	3710      	adds	r7, #16
 800b61c:	46bd      	mov	sp, r7
 800b61e:	bd80      	pop	{r7, pc}

0800b620 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b084      	sub	sp, #16
 800b624:	af00      	add	r7, sp, #0
 800b626:	60f8      	str	r0, [r7, #12]
 800b628:	60b9      	str	r1, [r7, #8]
 800b62a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	68ba      	ldr	r2, [r7, #8]
 800b630:	2100      	movs	r1, #0
 800b632:	68f8      	ldr	r0, [r7, #12]
 800b634:	f7fe fae5 	bl	8009c02 <USBD_LL_Transmit>

  return USBD_OK;
 800b638:	2300      	movs	r3, #0
}
 800b63a:	4618      	mov	r0, r3
 800b63c:	3710      	adds	r7, #16
 800b63e:	46bd      	mov	sp, r7
 800b640:	bd80      	pop	{r7, pc}

0800b642 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b642:	b580      	push	{r7, lr}
 800b644:	b084      	sub	sp, #16
 800b646:	af00      	add	r7, sp, #0
 800b648:	60f8      	str	r0, [r7, #12]
 800b64a:	60b9      	str	r1, [r7, #8]
 800b64c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	2203      	movs	r2, #3
 800b652:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	687a      	ldr	r2, [r7, #4]
 800b65a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	687a      	ldr	r2, [r7, #4]
 800b662:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	68ba      	ldr	r2, [r7, #8]
 800b66a:	2100      	movs	r1, #0
 800b66c:	68f8      	ldr	r0, [r7, #12]
 800b66e:	f7fe fae3 	bl	8009c38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b672:	2300      	movs	r3, #0
}
 800b674:	4618      	mov	r0, r3
 800b676:	3710      	adds	r7, #16
 800b678:	46bd      	mov	sp, r7
 800b67a:	bd80      	pop	{r7, pc}

0800b67c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b084      	sub	sp, #16
 800b680:	af00      	add	r7, sp, #0
 800b682:	60f8      	str	r0, [r7, #12]
 800b684:	60b9      	str	r1, [r7, #8]
 800b686:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	68ba      	ldr	r2, [r7, #8]
 800b68c:	2100      	movs	r1, #0
 800b68e:	68f8      	ldr	r0, [r7, #12]
 800b690:	f7fe fad2 	bl	8009c38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b694:	2300      	movs	r3, #0
}
 800b696:	4618      	mov	r0, r3
 800b698:	3710      	adds	r7, #16
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bd80      	pop	{r7, pc}

0800b69e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b69e:	b580      	push	{r7, lr}
 800b6a0:	b082      	sub	sp, #8
 800b6a2:	af00      	add	r7, sp, #0
 800b6a4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	2204      	movs	r2, #4
 800b6aa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	2100      	movs	r1, #0
 800b6b4:	6878      	ldr	r0, [r7, #4]
 800b6b6:	f7fe faa4 	bl	8009c02 <USBD_LL_Transmit>

  return USBD_OK;
 800b6ba:	2300      	movs	r3, #0
}
 800b6bc:	4618      	mov	r0, r3
 800b6be:	3708      	adds	r7, #8
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	bd80      	pop	{r7, pc}

0800b6c4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b082      	sub	sp, #8
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	2205      	movs	r2, #5
 800b6d0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	2100      	movs	r1, #0
 800b6da:	6878      	ldr	r0, [r7, #4]
 800b6dc:	f7fe faac 	bl	8009c38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b6e0:	2300      	movs	r3, #0
}
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	3708      	adds	r7, #8
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	bd80      	pop	{r7, pc}
	...

0800b6ec <std>:
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	b510      	push	{r4, lr}
 800b6f0:	4604      	mov	r4, r0
 800b6f2:	6083      	str	r3, [r0, #8]
 800b6f4:	8181      	strh	r1, [r0, #12]
 800b6f6:	4619      	mov	r1, r3
 800b6f8:	6643      	str	r3, [r0, #100]	@ 0x64
 800b6fa:	81c2      	strh	r2, [r0, #14]
 800b6fc:	2208      	movs	r2, #8
 800b6fe:	6183      	str	r3, [r0, #24]
 800b700:	e9c0 3300 	strd	r3, r3, [r0]
 800b704:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b708:	305c      	adds	r0, #92	@ 0x5c
 800b70a:	f000 f90e 	bl	800b92a <memset>
 800b70e:	4b0d      	ldr	r3, [pc, #52]	@ (800b744 <std+0x58>)
 800b710:	6224      	str	r4, [r4, #32]
 800b712:	6263      	str	r3, [r4, #36]	@ 0x24
 800b714:	4b0c      	ldr	r3, [pc, #48]	@ (800b748 <std+0x5c>)
 800b716:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b718:	4b0c      	ldr	r3, [pc, #48]	@ (800b74c <std+0x60>)
 800b71a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b71c:	4b0c      	ldr	r3, [pc, #48]	@ (800b750 <std+0x64>)
 800b71e:	6323      	str	r3, [r4, #48]	@ 0x30
 800b720:	4b0c      	ldr	r3, [pc, #48]	@ (800b754 <std+0x68>)
 800b722:	429c      	cmp	r4, r3
 800b724:	d006      	beq.n	800b734 <std+0x48>
 800b726:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b72a:	4294      	cmp	r4, r2
 800b72c:	d002      	beq.n	800b734 <std+0x48>
 800b72e:	33d0      	adds	r3, #208	@ 0xd0
 800b730:	429c      	cmp	r4, r3
 800b732:	d105      	bne.n	800b740 <std+0x54>
 800b734:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b73c:	f000 b96e 	b.w	800ba1c <__retarget_lock_init_recursive>
 800b740:	bd10      	pop	{r4, pc}
 800b742:	bf00      	nop
 800b744:	0800b8a5 	.word	0x0800b8a5
 800b748:	0800b8c7 	.word	0x0800b8c7
 800b74c:	0800b8ff 	.word	0x0800b8ff
 800b750:	0800b923 	.word	0x0800b923
 800b754:	20000ba4 	.word	0x20000ba4

0800b758 <stdio_exit_handler>:
 800b758:	4a02      	ldr	r2, [pc, #8]	@ (800b764 <stdio_exit_handler+0xc>)
 800b75a:	4903      	ldr	r1, [pc, #12]	@ (800b768 <stdio_exit_handler+0x10>)
 800b75c:	4803      	ldr	r0, [pc, #12]	@ (800b76c <stdio_exit_handler+0x14>)
 800b75e:	f000 b869 	b.w	800b834 <_fwalk_sglue>
 800b762:	bf00      	nop
 800b764:	20000190 	.word	0x20000190
 800b768:	0800c2c5 	.word	0x0800c2c5
 800b76c:	200001a0 	.word	0x200001a0

0800b770 <cleanup_stdio>:
 800b770:	6841      	ldr	r1, [r0, #4]
 800b772:	4b0c      	ldr	r3, [pc, #48]	@ (800b7a4 <cleanup_stdio+0x34>)
 800b774:	4299      	cmp	r1, r3
 800b776:	b510      	push	{r4, lr}
 800b778:	4604      	mov	r4, r0
 800b77a:	d001      	beq.n	800b780 <cleanup_stdio+0x10>
 800b77c:	f000 fda2 	bl	800c2c4 <_fflush_r>
 800b780:	68a1      	ldr	r1, [r4, #8]
 800b782:	4b09      	ldr	r3, [pc, #36]	@ (800b7a8 <cleanup_stdio+0x38>)
 800b784:	4299      	cmp	r1, r3
 800b786:	d002      	beq.n	800b78e <cleanup_stdio+0x1e>
 800b788:	4620      	mov	r0, r4
 800b78a:	f000 fd9b 	bl	800c2c4 <_fflush_r>
 800b78e:	68e1      	ldr	r1, [r4, #12]
 800b790:	4b06      	ldr	r3, [pc, #24]	@ (800b7ac <cleanup_stdio+0x3c>)
 800b792:	4299      	cmp	r1, r3
 800b794:	d004      	beq.n	800b7a0 <cleanup_stdio+0x30>
 800b796:	4620      	mov	r0, r4
 800b798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b79c:	f000 bd92 	b.w	800c2c4 <_fflush_r>
 800b7a0:	bd10      	pop	{r4, pc}
 800b7a2:	bf00      	nop
 800b7a4:	20000ba4 	.word	0x20000ba4
 800b7a8:	20000c0c 	.word	0x20000c0c
 800b7ac:	20000c74 	.word	0x20000c74

0800b7b0 <global_stdio_init.part.0>:
 800b7b0:	b510      	push	{r4, lr}
 800b7b2:	4b0b      	ldr	r3, [pc, #44]	@ (800b7e0 <global_stdio_init.part.0+0x30>)
 800b7b4:	2104      	movs	r1, #4
 800b7b6:	4c0b      	ldr	r4, [pc, #44]	@ (800b7e4 <global_stdio_init.part.0+0x34>)
 800b7b8:	4a0b      	ldr	r2, [pc, #44]	@ (800b7e8 <global_stdio_init.part.0+0x38>)
 800b7ba:	4620      	mov	r0, r4
 800b7bc:	601a      	str	r2, [r3, #0]
 800b7be:	2200      	movs	r2, #0
 800b7c0:	f7ff ff94 	bl	800b6ec <std>
 800b7c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b7c8:	2201      	movs	r2, #1
 800b7ca:	2109      	movs	r1, #9
 800b7cc:	f7ff ff8e 	bl	800b6ec <std>
 800b7d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b7d4:	2202      	movs	r2, #2
 800b7d6:	2112      	movs	r1, #18
 800b7d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b7dc:	f7ff bf86 	b.w	800b6ec <std>
 800b7e0:	20000cdc 	.word	0x20000cdc
 800b7e4:	20000ba4 	.word	0x20000ba4
 800b7e8:	0800b759 	.word	0x0800b759

0800b7ec <__sfp_lock_acquire>:
 800b7ec:	4801      	ldr	r0, [pc, #4]	@ (800b7f4 <__sfp_lock_acquire+0x8>)
 800b7ee:	f000 b916 	b.w	800ba1e <__retarget_lock_acquire_recursive>
 800b7f2:	bf00      	nop
 800b7f4:	20000ce5 	.word	0x20000ce5

0800b7f8 <__sfp_lock_release>:
 800b7f8:	4801      	ldr	r0, [pc, #4]	@ (800b800 <__sfp_lock_release+0x8>)
 800b7fa:	f000 b911 	b.w	800ba20 <__retarget_lock_release_recursive>
 800b7fe:	bf00      	nop
 800b800:	20000ce5 	.word	0x20000ce5

0800b804 <__sinit>:
 800b804:	b510      	push	{r4, lr}
 800b806:	4604      	mov	r4, r0
 800b808:	f7ff fff0 	bl	800b7ec <__sfp_lock_acquire>
 800b80c:	6a23      	ldr	r3, [r4, #32]
 800b80e:	b11b      	cbz	r3, 800b818 <__sinit+0x14>
 800b810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b814:	f7ff bff0 	b.w	800b7f8 <__sfp_lock_release>
 800b818:	4b04      	ldr	r3, [pc, #16]	@ (800b82c <__sinit+0x28>)
 800b81a:	6223      	str	r3, [r4, #32]
 800b81c:	4b04      	ldr	r3, [pc, #16]	@ (800b830 <__sinit+0x2c>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d1f5      	bne.n	800b810 <__sinit+0xc>
 800b824:	f7ff ffc4 	bl	800b7b0 <global_stdio_init.part.0>
 800b828:	e7f2      	b.n	800b810 <__sinit+0xc>
 800b82a:	bf00      	nop
 800b82c:	0800b771 	.word	0x0800b771
 800b830:	20000cdc 	.word	0x20000cdc

0800b834 <_fwalk_sglue>:
 800b834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b838:	4607      	mov	r7, r0
 800b83a:	4688      	mov	r8, r1
 800b83c:	4614      	mov	r4, r2
 800b83e:	2600      	movs	r6, #0
 800b840:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b844:	f1b9 0901 	subs.w	r9, r9, #1
 800b848:	d505      	bpl.n	800b856 <_fwalk_sglue+0x22>
 800b84a:	6824      	ldr	r4, [r4, #0]
 800b84c:	2c00      	cmp	r4, #0
 800b84e:	d1f7      	bne.n	800b840 <_fwalk_sglue+0xc>
 800b850:	4630      	mov	r0, r6
 800b852:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b856:	89ab      	ldrh	r3, [r5, #12]
 800b858:	2b01      	cmp	r3, #1
 800b85a:	d907      	bls.n	800b86c <_fwalk_sglue+0x38>
 800b85c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b860:	3301      	adds	r3, #1
 800b862:	d003      	beq.n	800b86c <_fwalk_sglue+0x38>
 800b864:	4629      	mov	r1, r5
 800b866:	4638      	mov	r0, r7
 800b868:	47c0      	blx	r8
 800b86a:	4306      	orrs	r6, r0
 800b86c:	3568      	adds	r5, #104	@ 0x68
 800b86e:	e7e9      	b.n	800b844 <_fwalk_sglue+0x10>

0800b870 <iprintf>:
 800b870:	b40f      	push	{r0, r1, r2, r3}
 800b872:	b507      	push	{r0, r1, r2, lr}
 800b874:	4906      	ldr	r1, [pc, #24]	@ (800b890 <iprintf+0x20>)
 800b876:	ab04      	add	r3, sp, #16
 800b878:	6808      	ldr	r0, [r1, #0]
 800b87a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b87e:	6881      	ldr	r1, [r0, #8]
 800b880:	9301      	str	r3, [sp, #4]
 800b882:	f000 f9f1 	bl	800bc68 <_vfiprintf_r>
 800b886:	b003      	add	sp, #12
 800b888:	f85d eb04 	ldr.w	lr, [sp], #4
 800b88c:	b004      	add	sp, #16
 800b88e:	4770      	bx	lr
 800b890:	2000019c 	.word	0x2000019c

0800b894 <putchar>:
 800b894:	4b02      	ldr	r3, [pc, #8]	@ (800b8a0 <putchar+0xc>)
 800b896:	4601      	mov	r1, r0
 800b898:	6818      	ldr	r0, [r3, #0]
 800b89a:	6882      	ldr	r2, [r0, #8]
 800b89c:	f000 bd3a 	b.w	800c314 <_putc_r>
 800b8a0:	2000019c 	.word	0x2000019c

0800b8a4 <__sread>:
 800b8a4:	b510      	push	{r4, lr}
 800b8a6:	460c      	mov	r4, r1
 800b8a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8ac:	f000 f868 	bl	800b980 <_read_r>
 800b8b0:	2800      	cmp	r0, #0
 800b8b2:	bfab      	itete	ge
 800b8b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b8b6:	89a3      	ldrhlt	r3, [r4, #12]
 800b8b8:	181b      	addge	r3, r3, r0
 800b8ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b8be:	bfac      	ite	ge
 800b8c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b8c2:	81a3      	strhlt	r3, [r4, #12]
 800b8c4:	bd10      	pop	{r4, pc}

0800b8c6 <__swrite>:
 800b8c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8ca:	461f      	mov	r7, r3
 800b8cc:	898b      	ldrh	r3, [r1, #12]
 800b8ce:	4605      	mov	r5, r0
 800b8d0:	460c      	mov	r4, r1
 800b8d2:	05db      	lsls	r3, r3, #23
 800b8d4:	4616      	mov	r6, r2
 800b8d6:	d505      	bpl.n	800b8e4 <__swrite+0x1e>
 800b8d8:	2302      	movs	r3, #2
 800b8da:	2200      	movs	r2, #0
 800b8dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8e0:	f000 f83c 	bl	800b95c <_lseek_r>
 800b8e4:	89a3      	ldrh	r3, [r4, #12]
 800b8e6:	4632      	mov	r2, r6
 800b8e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b8ec:	4628      	mov	r0, r5
 800b8ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b8f2:	81a3      	strh	r3, [r4, #12]
 800b8f4:	463b      	mov	r3, r7
 800b8f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b8fa:	f000 b853 	b.w	800b9a4 <_write_r>

0800b8fe <__sseek>:
 800b8fe:	b510      	push	{r4, lr}
 800b900:	460c      	mov	r4, r1
 800b902:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b906:	f000 f829 	bl	800b95c <_lseek_r>
 800b90a:	1c43      	adds	r3, r0, #1
 800b90c:	89a3      	ldrh	r3, [r4, #12]
 800b90e:	bf15      	itete	ne
 800b910:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b912:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b916:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b91a:	81a3      	strheq	r3, [r4, #12]
 800b91c:	bf18      	it	ne
 800b91e:	81a3      	strhne	r3, [r4, #12]
 800b920:	bd10      	pop	{r4, pc}

0800b922 <__sclose>:
 800b922:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b926:	f000 b809 	b.w	800b93c <_close_r>

0800b92a <memset>:
 800b92a:	4402      	add	r2, r0
 800b92c:	4603      	mov	r3, r0
 800b92e:	4293      	cmp	r3, r2
 800b930:	d100      	bne.n	800b934 <memset+0xa>
 800b932:	4770      	bx	lr
 800b934:	f803 1b01 	strb.w	r1, [r3], #1
 800b938:	e7f9      	b.n	800b92e <memset+0x4>
	...

0800b93c <_close_r>:
 800b93c:	b538      	push	{r3, r4, r5, lr}
 800b93e:	2300      	movs	r3, #0
 800b940:	4d05      	ldr	r5, [pc, #20]	@ (800b958 <_close_r+0x1c>)
 800b942:	4604      	mov	r4, r0
 800b944:	4608      	mov	r0, r1
 800b946:	602b      	str	r3, [r5, #0]
 800b948:	f7f5 f835 	bl	80009b6 <_close>
 800b94c:	1c43      	adds	r3, r0, #1
 800b94e:	d102      	bne.n	800b956 <_close_r+0x1a>
 800b950:	682b      	ldr	r3, [r5, #0]
 800b952:	b103      	cbz	r3, 800b956 <_close_r+0x1a>
 800b954:	6023      	str	r3, [r4, #0]
 800b956:	bd38      	pop	{r3, r4, r5, pc}
 800b958:	20000ce0 	.word	0x20000ce0

0800b95c <_lseek_r>:
 800b95c:	b538      	push	{r3, r4, r5, lr}
 800b95e:	4604      	mov	r4, r0
 800b960:	4d06      	ldr	r5, [pc, #24]	@ (800b97c <_lseek_r+0x20>)
 800b962:	4608      	mov	r0, r1
 800b964:	4611      	mov	r1, r2
 800b966:	2200      	movs	r2, #0
 800b968:	602a      	str	r2, [r5, #0]
 800b96a:	461a      	mov	r2, r3
 800b96c:	f7f5 f84a 	bl	8000a04 <_lseek>
 800b970:	1c43      	adds	r3, r0, #1
 800b972:	d102      	bne.n	800b97a <_lseek_r+0x1e>
 800b974:	682b      	ldr	r3, [r5, #0]
 800b976:	b103      	cbz	r3, 800b97a <_lseek_r+0x1e>
 800b978:	6023      	str	r3, [r4, #0]
 800b97a:	bd38      	pop	{r3, r4, r5, pc}
 800b97c:	20000ce0 	.word	0x20000ce0

0800b980 <_read_r>:
 800b980:	b538      	push	{r3, r4, r5, lr}
 800b982:	4604      	mov	r4, r0
 800b984:	4d06      	ldr	r5, [pc, #24]	@ (800b9a0 <_read_r+0x20>)
 800b986:	4608      	mov	r0, r1
 800b988:	4611      	mov	r1, r2
 800b98a:	2200      	movs	r2, #0
 800b98c:	602a      	str	r2, [r5, #0]
 800b98e:	461a      	mov	r2, r3
 800b990:	f7f4 ffd8 	bl	8000944 <_read>
 800b994:	1c43      	adds	r3, r0, #1
 800b996:	d102      	bne.n	800b99e <_read_r+0x1e>
 800b998:	682b      	ldr	r3, [r5, #0]
 800b99a:	b103      	cbz	r3, 800b99e <_read_r+0x1e>
 800b99c:	6023      	str	r3, [r4, #0]
 800b99e:	bd38      	pop	{r3, r4, r5, pc}
 800b9a0:	20000ce0 	.word	0x20000ce0

0800b9a4 <_write_r>:
 800b9a4:	b538      	push	{r3, r4, r5, lr}
 800b9a6:	4604      	mov	r4, r0
 800b9a8:	4d06      	ldr	r5, [pc, #24]	@ (800b9c4 <_write_r+0x20>)
 800b9aa:	4608      	mov	r0, r1
 800b9ac:	4611      	mov	r1, r2
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	602a      	str	r2, [r5, #0]
 800b9b2:	461a      	mov	r2, r3
 800b9b4:	f7f4 ffe3 	bl	800097e <_write>
 800b9b8:	1c43      	adds	r3, r0, #1
 800b9ba:	d102      	bne.n	800b9c2 <_write_r+0x1e>
 800b9bc:	682b      	ldr	r3, [r5, #0]
 800b9be:	b103      	cbz	r3, 800b9c2 <_write_r+0x1e>
 800b9c0:	6023      	str	r3, [r4, #0]
 800b9c2:	bd38      	pop	{r3, r4, r5, pc}
 800b9c4:	20000ce0 	.word	0x20000ce0

0800b9c8 <__errno>:
 800b9c8:	4b01      	ldr	r3, [pc, #4]	@ (800b9d0 <__errno+0x8>)
 800b9ca:	6818      	ldr	r0, [r3, #0]
 800b9cc:	4770      	bx	lr
 800b9ce:	bf00      	nop
 800b9d0:	2000019c 	.word	0x2000019c

0800b9d4 <__libc_init_array>:
 800b9d4:	b570      	push	{r4, r5, r6, lr}
 800b9d6:	4d0d      	ldr	r5, [pc, #52]	@ (800ba0c <__libc_init_array+0x38>)
 800b9d8:	2600      	movs	r6, #0
 800b9da:	4c0d      	ldr	r4, [pc, #52]	@ (800ba10 <__libc_init_array+0x3c>)
 800b9dc:	1b64      	subs	r4, r4, r5
 800b9de:	10a4      	asrs	r4, r4, #2
 800b9e0:	42a6      	cmp	r6, r4
 800b9e2:	d109      	bne.n	800b9f8 <__libc_init_array+0x24>
 800b9e4:	4d0b      	ldr	r5, [pc, #44]	@ (800ba14 <__libc_init_array+0x40>)
 800b9e6:	2600      	movs	r6, #0
 800b9e8:	4c0b      	ldr	r4, [pc, #44]	@ (800ba18 <__libc_init_array+0x44>)
 800b9ea:	f000 fdfd 	bl	800c5e8 <_init>
 800b9ee:	1b64      	subs	r4, r4, r5
 800b9f0:	10a4      	asrs	r4, r4, #2
 800b9f2:	42a6      	cmp	r6, r4
 800b9f4:	d105      	bne.n	800ba02 <__libc_init_array+0x2e>
 800b9f6:	bd70      	pop	{r4, r5, r6, pc}
 800b9f8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9fc:	3601      	adds	r6, #1
 800b9fe:	4798      	blx	r3
 800ba00:	e7ee      	b.n	800b9e0 <__libc_init_array+0xc>
 800ba02:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba06:	3601      	adds	r6, #1
 800ba08:	4798      	blx	r3
 800ba0a:	e7f2      	b.n	800b9f2 <__libc_init_array+0x1e>
 800ba0c:	0800c768 	.word	0x0800c768
 800ba10:	0800c768 	.word	0x0800c768
 800ba14:	0800c768 	.word	0x0800c768
 800ba18:	0800c76c 	.word	0x0800c76c

0800ba1c <__retarget_lock_init_recursive>:
 800ba1c:	4770      	bx	lr

0800ba1e <__retarget_lock_acquire_recursive>:
 800ba1e:	4770      	bx	lr

0800ba20 <__retarget_lock_release_recursive>:
 800ba20:	4770      	bx	lr
	...

0800ba24 <_free_r>:
 800ba24:	b538      	push	{r3, r4, r5, lr}
 800ba26:	4605      	mov	r5, r0
 800ba28:	2900      	cmp	r1, #0
 800ba2a:	d041      	beq.n	800bab0 <_free_r+0x8c>
 800ba2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba30:	1f0c      	subs	r4, r1, #4
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	bfb8      	it	lt
 800ba36:	18e4      	addlt	r4, r4, r3
 800ba38:	f000 f8e0 	bl	800bbfc <__malloc_lock>
 800ba3c:	4a1d      	ldr	r2, [pc, #116]	@ (800bab4 <_free_r+0x90>)
 800ba3e:	6813      	ldr	r3, [r2, #0]
 800ba40:	b933      	cbnz	r3, 800ba50 <_free_r+0x2c>
 800ba42:	6063      	str	r3, [r4, #4]
 800ba44:	6014      	str	r4, [r2, #0]
 800ba46:	4628      	mov	r0, r5
 800ba48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba4c:	f000 b8dc 	b.w	800bc08 <__malloc_unlock>
 800ba50:	42a3      	cmp	r3, r4
 800ba52:	d908      	bls.n	800ba66 <_free_r+0x42>
 800ba54:	6820      	ldr	r0, [r4, #0]
 800ba56:	1821      	adds	r1, r4, r0
 800ba58:	428b      	cmp	r3, r1
 800ba5a:	bf01      	itttt	eq
 800ba5c:	6819      	ldreq	r1, [r3, #0]
 800ba5e:	685b      	ldreq	r3, [r3, #4]
 800ba60:	1809      	addeq	r1, r1, r0
 800ba62:	6021      	streq	r1, [r4, #0]
 800ba64:	e7ed      	b.n	800ba42 <_free_r+0x1e>
 800ba66:	461a      	mov	r2, r3
 800ba68:	685b      	ldr	r3, [r3, #4]
 800ba6a:	b10b      	cbz	r3, 800ba70 <_free_r+0x4c>
 800ba6c:	42a3      	cmp	r3, r4
 800ba6e:	d9fa      	bls.n	800ba66 <_free_r+0x42>
 800ba70:	6811      	ldr	r1, [r2, #0]
 800ba72:	1850      	adds	r0, r2, r1
 800ba74:	42a0      	cmp	r0, r4
 800ba76:	d10b      	bne.n	800ba90 <_free_r+0x6c>
 800ba78:	6820      	ldr	r0, [r4, #0]
 800ba7a:	4401      	add	r1, r0
 800ba7c:	1850      	adds	r0, r2, r1
 800ba7e:	6011      	str	r1, [r2, #0]
 800ba80:	4283      	cmp	r3, r0
 800ba82:	d1e0      	bne.n	800ba46 <_free_r+0x22>
 800ba84:	6818      	ldr	r0, [r3, #0]
 800ba86:	685b      	ldr	r3, [r3, #4]
 800ba88:	4408      	add	r0, r1
 800ba8a:	6053      	str	r3, [r2, #4]
 800ba8c:	6010      	str	r0, [r2, #0]
 800ba8e:	e7da      	b.n	800ba46 <_free_r+0x22>
 800ba90:	d902      	bls.n	800ba98 <_free_r+0x74>
 800ba92:	230c      	movs	r3, #12
 800ba94:	602b      	str	r3, [r5, #0]
 800ba96:	e7d6      	b.n	800ba46 <_free_r+0x22>
 800ba98:	6820      	ldr	r0, [r4, #0]
 800ba9a:	1821      	adds	r1, r4, r0
 800ba9c:	428b      	cmp	r3, r1
 800ba9e:	bf02      	ittt	eq
 800baa0:	6819      	ldreq	r1, [r3, #0]
 800baa2:	685b      	ldreq	r3, [r3, #4]
 800baa4:	1809      	addeq	r1, r1, r0
 800baa6:	6063      	str	r3, [r4, #4]
 800baa8:	bf08      	it	eq
 800baaa:	6021      	streq	r1, [r4, #0]
 800baac:	6054      	str	r4, [r2, #4]
 800baae:	e7ca      	b.n	800ba46 <_free_r+0x22>
 800bab0:	bd38      	pop	{r3, r4, r5, pc}
 800bab2:	bf00      	nop
 800bab4:	20000cec 	.word	0x20000cec

0800bab8 <sbrk_aligned>:
 800bab8:	b570      	push	{r4, r5, r6, lr}
 800baba:	4e0f      	ldr	r6, [pc, #60]	@ (800baf8 <sbrk_aligned+0x40>)
 800babc:	460c      	mov	r4, r1
 800babe:	4605      	mov	r5, r0
 800bac0:	6831      	ldr	r1, [r6, #0]
 800bac2:	b911      	cbnz	r1, 800baca <sbrk_aligned+0x12>
 800bac4:	f000 fcee 	bl	800c4a4 <_sbrk_r>
 800bac8:	6030      	str	r0, [r6, #0]
 800baca:	4621      	mov	r1, r4
 800bacc:	4628      	mov	r0, r5
 800bace:	f000 fce9 	bl	800c4a4 <_sbrk_r>
 800bad2:	1c43      	adds	r3, r0, #1
 800bad4:	d103      	bne.n	800bade <sbrk_aligned+0x26>
 800bad6:	f04f 34ff 	mov.w	r4, #4294967295
 800bada:	4620      	mov	r0, r4
 800badc:	bd70      	pop	{r4, r5, r6, pc}
 800bade:	1cc4      	adds	r4, r0, #3
 800bae0:	f024 0403 	bic.w	r4, r4, #3
 800bae4:	42a0      	cmp	r0, r4
 800bae6:	d0f8      	beq.n	800bada <sbrk_aligned+0x22>
 800bae8:	1a21      	subs	r1, r4, r0
 800baea:	4628      	mov	r0, r5
 800baec:	f000 fcda 	bl	800c4a4 <_sbrk_r>
 800baf0:	3001      	adds	r0, #1
 800baf2:	d1f2      	bne.n	800bada <sbrk_aligned+0x22>
 800baf4:	e7ef      	b.n	800bad6 <sbrk_aligned+0x1e>
 800baf6:	bf00      	nop
 800baf8:	20000ce8 	.word	0x20000ce8

0800bafc <_malloc_r>:
 800bafc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb00:	1ccd      	adds	r5, r1, #3
 800bb02:	4606      	mov	r6, r0
 800bb04:	f025 0503 	bic.w	r5, r5, #3
 800bb08:	3508      	adds	r5, #8
 800bb0a:	2d0c      	cmp	r5, #12
 800bb0c:	bf38      	it	cc
 800bb0e:	250c      	movcc	r5, #12
 800bb10:	2d00      	cmp	r5, #0
 800bb12:	db01      	blt.n	800bb18 <_malloc_r+0x1c>
 800bb14:	42a9      	cmp	r1, r5
 800bb16:	d904      	bls.n	800bb22 <_malloc_r+0x26>
 800bb18:	230c      	movs	r3, #12
 800bb1a:	6033      	str	r3, [r6, #0]
 800bb1c:	2000      	movs	r0, #0
 800bb1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb22:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bbf8 <_malloc_r+0xfc>
 800bb26:	f000 f869 	bl	800bbfc <__malloc_lock>
 800bb2a:	f8d8 3000 	ldr.w	r3, [r8]
 800bb2e:	461c      	mov	r4, r3
 800bb30:	bb44      	cbnz	r4, 800bb84 <_malloc_r+0x88>
 800bb32:	4629      	mov	r1, r5
 800bb34:	4630      	mov	r0, r6
 800bb36:	f7ff ffbf 	bl	800bab8 <sbrk_aligned>
 800bb3a:	1c43      	adds	r3, r0, #1
 800bb3c:	4604      	mov	r4, r0
 800bb3e:	d158      	bne.n	800bbf2 <_malloc_r+0xf6>
 800bb40:	f8d8 4000 	ldr.w	r4, [r8]
 800bb44:	4627      	mov	r7, r4
 800bb46:	2f00      	cmp	r7, #0
 800bb48:	d143      	bne.n	800bbd2 <_malloc_r+0xd6>
 800bb4a:	2c00      	cmp	r4, #0
 800bb4c:	d04b      	beq.n	800bbe6 <_malloc_r+0xea>
 800bb4e:	6823      	ldr	r3, [r4, #0]
 800bb50:	4639      	mov	r1, r7
 800bb52:	4630      	mov	r0, r6
 800bb54:	eb04 0903 	add.w	r9, r4, r3
 800bb58:	f000 fca4 	bl	800c4a4 <_sbrk_r>
 800bb5c:	4581      	cmp	r9, r0
 800bb5e:	d142      	bne.n	800bbe6 <_malloc_r+0xea>
 800bb60:	6821      	ldr	r1, [r4, #0]
 800bb62:	4630      	mov	r0, r6
 800bb64:	1a6d      	subs	r5, r5, r1
 800bb66:	4629      	mov	r1, r5
 800bb68:	f7ff ffa6 	bl	800bab8 <sbrk_aligned>
 800bb6c:	3001      	adds	r0, #1
 800bb6e:	d03a      	beq.n	800bbe6 <_malloc_r+0xea>
 800bb70:	6823      	ldr	r3, [r4, #0]
 800bb72:	442b      	add	r3, r5
 800bb74:	6023      	str	r3, [r4, #0]
 800bb76:	f8d8 3000 	ldr.w	r3, [r8]
 800bb7a:	685a      	ldr	r2, [r3, #4]
 800bb7c:	bb62      	cbnz	r2, 800bbd8 <_malloc_r+0xdc>
 800bb7e:	f8c8 7000 	str.w	r7, [r8]
 800bb82:	e00f      	b.n	800bba4 <_malloc_r+0xa8>
 800bb84:	6822      	ldr	r2, [r4, #0]
 800bb86:	1b52      	subs	r2, r2, r5
 800bb88:	d420      	bmi.n	800bbcc <_malloc_r+0xd0>
 800bb8a:	2a0b      	cmp	r2, #11
 800bb8c:	d917      	bls.n	800bbbe <_malloc_r+0xc2>
 800bb8e:	1961      	adds	r1, r4, r5
 800bb90:	42a3      	cmp	r3, r4
 800bb92:	6025      	str	r5, [r4, #0]
 800bb94:	bf18      	it	ne
 800bb96:	6059      	strne	r1, [r3, #4]
 800bb98:	6863      	ldr	r3, [r4, #4]
 800bb9a:	bf08      	it	eq
 800bb9c:	f8c8 1000 	streq.w	r1, [r8]
 800bba0:	5162      	str	r2, [r4, r5]
 800bba2:	604b      	str	r3, [r1, #4]
 800bba4:	4630      	mov	r0, r6
 800bba6:	f000 f82f 	bl	800bc08 <__malloc_unlock>
 800bbaa:	f104 000b 	add.w	r0, r4, #11
 800bbae:	1d23      	adds	r3, r4, #4
 800bbb0:	f020 0007 	bic.w	r0, r0, #7
 800bbb4:	1ac2      	subs	r2, r0, r3
 800bbb6:	bf1c      	itt	ne
 800bbb8:	1a1b      	subne	r3, r3, r0
 800bbba:	50a3      	strne	r3, [r4, r2]
 800bbbc:	e7af      	b.n	800bb1e <_malloc_r+0x22>
 800bbbe:	6862      	ldr	r2, [r4, #4]
 800bbc0:	42a3      	cmp	r3, r4
 800bbc2:	bf0c      	ite	eq
 800bbc4:	f8c8 2000 	streq.w	r2, [r8]
 800bbc8:	605a      	strne	r2, [r3, #4]
 800bbca:	e7eb      	b.n	800bba4 <_malloc_r+0xa8>
 800bbcc:	4623      	mov	r3, r4
 800bbce:	6864      	ldr	r4, [r4, #4]
 800bbd0:	e7ae      	b.n	800bb30 <_malloc_r+0x34>
 800bbd2:	463c      	mov	r4, r7
 800bbd4:	687f      	ldr	r7, [r7, #4]
 800bbd6:	e7b6      	b.n	800bb46 <_malloc_r+0x4a>
 800bbd8:	461a      	mov	r2, r3
 800bbda:	685b      	ldr	r3, [r3, #4]
 800bbdc:	42a3      	cmp	r3, r4
 800bbde:	d1fb      	bne.n	800bbd8 <_malloc_r+0xdc>
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	6053      	str	r3, [r2, #4]
 800bbe4:	e7de      	b.n	800bba4 <_malloc_r+0xa8>
 800bbe6:	230c      	movs	r3, #12
 800bbe8:	4630      	mov	r0, r6
 800bbea:	6033      	str	r3, [r6, #0]
 800bbec:	f000 f80c 	bl	800bc08 <__malloc_unlock>
 800bbf0:	e794      	b.n	800bb1c <_malloc_r+0x20>
 800bbf2:	6005      	str	r5, [r0, #0]
 800bbf4:	e7d6      	b.n	800bba4 <_malloc_r+0xa8>
 800bbf6:	bf00      	nop
 800bbf8:	20000cec 	.word	0x20000cec

0800bbfc <__malloc_lock>:
 800bbfc:	4801      	ldr	r0, [pc, #4]	@ (800bc04 <__malloc_lock+0x8>)
 800bbfe:	f7ff bf0e 	b.w	800ba1e <__retarget_lock_acquire_recursive>
 800bc02:	bf00      	nop
 800bc04:	20000ce4 	.word	0x20000ce4

0800bc08 <__malloc_unlock>:
 800bc08:	4801      	ldr	r0, [pc, #4]	@ (800bc10 <__malloc_unlock+0x8>)
 800bc0a:	f7ff bf09 	b.w	800ba20 <__retarget_lock_release_recursive>
 800bc0e:	bf00      	nop
 800bc10:	20000ce4 	.word	0x20000ce4

0800bc14 <__sfputc_r>:
 800bc14:	6893      	ldr	r3, [r2, #8]
 800bc16:	3b01      	subs	r3, #1
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	6093      	str	r3, [r2, #8]
 800bc1c:	b410      	push	{r4}
 800bc1e:	da08      	bge.n	800bc32 <__sfputc_r+0x1e>
 800bc20:	6994      	ldr	r4, [r2, #24]
 800bc22:	42a3      	cmp	r3, r4
 800bc24:	db01      	blt.n	800bc2a <__sfputc_r+0x16>
 800bc26:	290a      	cmp	r1, #10
 800bc28:	d103      	bne.n	800bc32 <__sfputc_r+0x1e>
 800bc2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc2e:	f000 bba5 	b.w	800c37c <__swbuf_r>
 800bc32:	6813      	ldr	r3, [r2, #0]
 800bc34:	1c58      	adds	r0, r3, #1
 800bc36:	6010      	str	r0, [r2, #0]
 800bc38:	4608      	mov	r0, r1
 800bc3a:	7019      	strb	r1, [r3, #0]
 800bc3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc40:	4770      	bx	lr

0800bc42 <__sfputs_r>:
 800bc42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc44:	4606      	mov	r6, r0
 800bc46:	460f      	mov	r7, r1
 800bc48:	4614      	mov	r4, r2
 800bc4a:	18d5      	adds	r5, r2, r3
 800bc4c:	42ac      	cmp	r4, r5
 800bc4e:	d101      	bne.n	800bc54 <__sfputs_r+0x12>
 800bc50:	2000      	movs	r0, #0
 800bc52:	e007      	b.n	800bc64 <__sfputs_r+0x22>
 800bc54:	463a      	mov	r2, r7
 800bc56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc5a:	4630      	mov	r0, r6
 800bc5c:	f7ff ffda 	bl	800bc14 <__sfputc_r>
 800bc60:	1c43      	adds	r3, r0, #1
 800bc62:	d1f3      	bne.n	800bc4c <__sfputs_r+0xa>
 800bc64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bc68 <_vfiprintf_r>:
 800bc68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc6c:	460d      	mov	r5, r1
 800bc6e:	b09d      	sub	sp, #116	@ 0x74
 800bc70:	4614      	mov	r4, r2
 800bc72:	4698      	mov	r8, r3
 800bc74:	4606      	mov	r6, r0
 800bc76:	b118      	cbz	r0, 800bc80 <_vfiprintf_r+0x18>
 800bc78:	6a03      	ldr	r3, [r0, #32]
 800bc7a:	b90b      	cbnz	r3, 800bc80 <_vfiprintf_r+0x18>
 800bc7c:	f7ff fdc2 	bl	800b804 <__sinit>
 800bc80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bc82:	07d9      	lsls	r1, r3, #31
 800bc84:	d405      	bmi.n	800bc92 <_vfiprintf_r+0x2a>
 800bc86:	89ab      	ldrh	r3, [r5, #12]
 800bc88:	059a      	lsls	r2, r3, #22
 800bc8a:	d402      	bmi.n	800bc92 <_vfiprintf_r+0x2a>
 800bc8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bc8e:	f7ff fec6 	bl	800ba1e <__retarget_lock_acquire_recursive>
 800bc92:	89ab      	ldrh	r3, [r5, #12]
 800bc94:	071b      	lsls	r3, r3, #28
 800bc96:	d501      	bpl.n	800bc9c <_vfiprintf_r+0x34>
 800bc98:	692b      	ldr	r3, [r5, #16]
 800bc9a:	b99b      	cbnz	r3, 800bcc4 <_vfiprintf_r+0x5c>
 800bc9c:	4629      	mov	r1, r5
 800bc9e:	4630      	mov	r0, r6
 800bca0:	f000 fbaa 	bl	800c3f8 <__swsetup_r>
 800bca4:	b170      	cbz	r0, 800bcc4 <_vfiprintf_r+0x5c>
 800bca6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bca8:	07dc      	lsls	r4, r3, #31
 800bcaa:	d504      	bpl.n	800bcb6 <_vfiprintf_r+0x4e>
 800bcac:	f04f 30ff 	mov.w	r0, #4294967295
 800bcb0:	b01d      	add	sp, #116	@ 0x74
 800bcb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcb6:	89ab      	ldrh	r3, [r5, #12]
 800bcb8:	0598      	lsls	r0, r3, #22
 800bcba:	d4f7      	bmi.n	800bcac <_vfiprintf_r+0x44>
 800bcbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bcbe:	f7ff feaf 	bl	800ba20 <__retarget_lock_release_recursive>
 800bcc2:	e7f3      	b.n	800bcac <_vfiprintf_r+0x44>
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	f8cd 800c 	str.w	r8, [sp, #12]
 800bcca:	f04f 0901 	mov.w	r9, #1
 800bcce:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800be84 <_vfiprintf_r+0x21c>
 800bcd2:	9309      	str	r3, [sp, #36]	@ 0x24
 800bcd4:	2320      	movs	r3, #32
 800bcd6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bcda:	2330      	movs	r3, #48	@ 0x30
 800bcdc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bce0:	4623      	mov	r3, r4
 800bce2:	469a      	mov	sl, r3
 800bce4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bce8:	b10a      	cbz	r2, 800bcee <_vfiprintf_r+0x86>
 800bcea:	2a25      	cmp	r2, #37	@ 0x25
 800bcec:	d1f9      	bne.n	800bce2 <_vfiprintf_r+0x7a>
 800bcee:	ebba 0b04 	subs.w	fp, sl, r4
 800bcf2:	d00b      	beq.n	800bd0c <_vfiprintf_r+0xa4>
 800bcf4:	465b      	mov	r3, fp
 800bcf6:	4622      	mov	r2, r4
 800bcf8:	4629      	mov	r1, r5
 800bcfa:	4630      	mov	r0, r6
 800bcfc:	f7ff ffa1 	bl	800bc42 <__sfputs_r>
 800bd00:	3001      	adds	r0, #1
 800bd02:	f000 80a7 	beq.w	800be54 <_vfiprintf_r+0x1ec>
 800bd06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bd08:	445a      	add	r2, fp
 800bd0a:	9209      	str	r2, [sp, #36]	@ 0x24
 800bd0c:	f89a 3000 	ldrb.w	r3, [sl]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	f000 809f 	beq.w	800be54 <_vfiprintf_r+0x1ec>
 800bd16:	2300      	movs	r3, #0
 800bd18:	f04f 32ff 	mov.w	r2, #4294967295
 800bd1c:	f10a 0a01 	add.w	sl, sl, #1
 800bd20:	9304      	str	r3, [sp, #16]
 800bd22:	9307      	str	r3, [sp, #28]
 800bd24:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bd28:	931a      	str	r3, [sp, #104]	@ 0x68
 800bd2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd2e:	4654      	mov	r4, sl
 800bd30:	2205      	movs	r2, #5
 800bd32:	4854      	ldr	r0, [pc, #336]	@ (800be84 <_vfiprintf_r+0x21c>)
 800bd34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd38:	f000 fbc4 	bl	800c4c4 <memchr>
 800bd3c:	9a04      	ldr	r2, [sp, #16]
 800bd3e:	b9d8      	cbnz	r0, 800bd78 <_vfiprintf_r+0x110>
 800bd40:	06d1      	lsls	r1, r2, #27
 800bd42:	bf44      	itt	mi
 800bd44:	2320      	movmi	r3, #32
 800bd46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bd4a:	0713      	lsls	r3, r2, #28
 800bd4c:	bf44      	itt	mi
 800bd4e:	232b      	movmi	r3, #43	@ 0x2b
 800bd50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bd54:	f89a 3000 	ldrb.w	r3, [sl]
 800bd58:	2b2a      	cmp	r3, #42	@ 0x2a
 800bd5a:	d015      	beq.n	800bd88 <_vfiprintf_r+0x120>
 800bd5c:	9a07      	ldr	r2, [sp, #28]
 800bd5e:	4654      	mov	r4, sl
 800bd60:	2000      	movs	r0, #0
 800bd62:	f04f 0c0a 	mov.w	ip, #10
 800bd66:	4621      	mov	r1, r4
 800bd68:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd6c:	3b30      	subs	r3, #48	@ 0x30
 800bd6e:	2b09      	cmp	r3, #9
 800bd70:	d94b      	bls.n	800be0a <_vfiprintf_r+0x1a2>
 800bd72:	b1b0      	cbz	r0, 800bda2 <_vfiprintf_r+0x13a>
 800bd74:	9207      	str	r2, [sp, #28]
 800bd76:	e014      	b.n	800bda2 <_vfiprintf_r+0x13a>
 800bd78:	eba0 0308 	sub.w	r3, r0, r8
 800bd7c:	46a2      	mov	sl, r4
 800bd7e:	fa09 f303 	lsl.w	r3, r9, r3
 800bd82:	4313      	orrs	r3, r2
 800bd84:	9304      	str	r3, [sp, #16]
 800bd86:	e7d2      	b.n	800bd2e <_vfiprintf_r+0xc6>
 800bd88:	9b03      	ldr	r3, [sp, #12]
 800bd8a:	1d19      	adds	r1, r3, #4
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	9103      	str	r1, [sp, #12]
 800bd92:	bfbb      	ittet	lt
 800bd94:	425b      	neglt	r3, r3
 800bd96:	f042 0202 	orrlt.w	r2, r2, #2
 800bd9a:	9307      	strge	r3, [sp, #28]
 800bd9c:	9307      	strlt	r3, [sp, #28]
 800bd9e:	bfb8      	it	lt
 800bda0:	9204      	strlt	r2, [sp, #16]
 800bda2:	7823      	ldrb	r3, [r4, #0]
 800bda4:	2b2e      	cmp	r3, #46	@ 0x2e
 800bda6:	d10a      	bne.n	800bdbe <_vfiprintf_r+0x156>
 800bda8:	7863      	ldrb	r3, [r4, #1]
 800bdaa:	2b2a      	cmp	r3, #42	@ 0x2a
 800bdac:	d132      	bne.n	800be14 <_vfiprintf_r+0x1ac>
 800bdae:	9b03      	ldr	r3, [sp, #12]
 800bdb0:	3402      	adds	r4, #2
 800bdb2:	1d1a      	adds	r2, r3, #4
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bdba:	9203      	str	r2, [sp, #12]
 800bdbc:	9305      	str	r3, [sp, #20]
 800bdbe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800be94 <_vfiprintf_r+0x22c>
 800bdc2:	2203      	movs	r2, #3
 800bdc4:	7821      	ldrb	r1, [r4, #0]
 800bdc6:	4650      	mov	r0, sl
 800bdc8:	f000 fb7c 	bl	800c4c4 <memchr>
 800bdcc:	b138      	cbz	r0, 800bdde <_vfiprintf_r+0x176>
 800bdce:	eba0 000a 	sub.w	r0, r0, sl
 800bdd2:	2240      	movs	r2, #64	@ 0x40
 800bdd4:	9b04      	ldr	r3, [sp, #16]
 800bdd6:	3401      	adds	r4, #1
 800bdd8:	4082      	lsls	r2, r0
 800bdda:	4313      	orrs	r3, r2
 800bddc:	9304      	str	r3, [sp, #16]
 800bdde:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bde2:	2206      	movs	r2, #6
 800bde4:	4828      	ldr	r0, [pc, #160]	@ (800be88 <_vfiprintf_r+0x220>)
 800bde6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bdea:	f000 fb6b 	bl	800c4c4 <memchr>
 800bdee:	2800      	cmp	r0, #0
 800bdf0:	d03f      	beq.n	800be72 <_vfiprintf_r+0x20a>
 800bdf2:	4b26      	ldr	r3, [pc, #152]	@ (800be8c <_vfiprintf_r+0x224>)
 800bdf4:	bb1b      	cbnz	r3, 800be3e <_vfiprintf_r+0x1d6>
 800bdf6:	9b03      	ldr	r3, [sp, #12]
 800bdf8:	3307      	adds	r3, #7
 800bdfa:	f023 0307 	bic.w	r3, r3, #7
 800bdfe:	3308      	adds	r3, #8
 800be00:	9303      	str	r3, [sp, #12]
 800be02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be04:	443b      	add	r3, r7
 800be06:	9309      	str	r3, [sp, #36]	@ 0x24
 800be08:	e76a      	b.n	800bce0 <_vfiprintf_r+0x78>
 800be0a:	fb0c 3202 	mla	r2, ip, r2, r3
 800be0e:	460c      	mov	r4, r1
 800be10:	2001      	movs	r0, #1
 800be12:	e7a8      	b.n	800bd66 <_vfiprintf_r+0xfe>
 800be14:	2300      	movs	r3, #0
 800be16:	3401      	adds	r4, #1
 800be18:	f04f 0c0a 	mov.w	ip, #10
 800be1c:	4619      	mov	r1, r3
 800be1e:	9305      	str	r3, [sp, #20]
 800be20:	4620      	mov	r0, r4
 800be22:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be26:	3a30      	subs	r2, #48	@ 0x30
 800be28:	2a09      	cmp	r2, #9
 800be2a:	d903      	bls.n	800be34 <_vfiprintf_r+0x1cc>
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d0c6      	beq.n	800bdbe <_vfiprintf_r+0x156>
 800be30:	9105      	str	r1, [sp, #20]
 800be32:	e7c4      	b.n	800bdbe <_vfiprintf_r+0x156>
 800be34:	fb0c 2101 	mla	r1, ip, r1, r2
 800be38:	4604      	mov	r4, r0
 800be3a:	2301      	movs	r3, #1
 800be3c:	e7f0      	b.n	800be20 <_vfiprintf_r+0x1b8>
 800be3e:	ab03      	add	r3, sp, #12
 800be40:	462a      	mov	r2, r5
 800be42:	a904      	add	r1, sp, #16
 800be44:	4630      	mov	r0, r6
 800be46:	9300      	str	r3, [sp, #0]
 800be48:	4b11      	ldr	r3, [pc, #68]	@ (800be90 <_vfiprintf_r+0x228>)
 800be4a:	f3af 8000 	nop.w
 800be4e:	4607      	mov	r7, r0
 800be50:	1c78      	adds	r0, r7, #1
 800be52:	d1d6      	bne.n	800be02 <_vfiprintf_r+0x19a>
 800be54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800be56:	07d9      	lsls	r1, r3, #31
 800be58:	d405      	bmi.n	800be66 <_vfiprintf_r+0x1fe>
 800be5a:	89ab      	ldrh	r3, [r5, #12]
 800be5c:	059a      	lsls	r2, r3, #22
 800be5e:	d402      	bmi.n	800be66 <_vfiprintf_r+0x1fe>
 800be60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800be62:	f7ff fddd 	bl	800ba20 <__retarget_lock_release_recursive>
 800be66:	89ab      	ldrh	r3, [r5, #12]
 800be68:	065b      	lsls	r3, r3, #25
 800be6a:	f53f af1f 	bmi.w	800bcac <_vfiprintf_r+0x44>
 800be6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800be70:	e71e      	b.n	800bcb0 <_vfiprintf_r+0x48>
 800be72:	ab03      	add	r3, sp, #12
 800be74:	462a      	mov	r2, r5
 800be76:	a904      	add	r1, sp, #16
 800be78:	4630      	mov	r0, r6
 800be7a:	9300      	str	r3, [sp, #0]
 800be7c:	4b04      	ldr	r3, [pc, #16]	@ (800be90 <_vfiprintf_r+0x228>)
 800be7e:	f000 f87d 	bl	800bf7c <_printf_i>
 800be82:	e7e4      	b.n	800be4e <_vfiprintf_r+0x1e6>
 800be84:	0800c734 	.word	0x0800c734
 800be88:	0800c73e 	.word	0x0800c73e
 800be8c:	00000000 	.word	0x00000000
 800be90:	0800bc43 	.word	0x0800bc43
 800be94:	0800c73a 	.word	0x0800c73a

0800be98 <_printf_common>:
 800be98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be9c:	4616      	mov	r6, r2
 800be9e:	4698      	mov	r8, r3
 800bea0:	688a      	ldr	r2, [r1, #8]
 800bea2:	4607      	mov	r7, r0
 800bea4:	690b      	ldr	r3, [r1, #16]
 800bea6:	460c      	mov	r4, r1
 800bea8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800beac:	4293      	cmp	r3, r2
 800beae:	bfb8      	it	lt
 800beb0:	4613      	movlt	r3, r2
 800beb2:	6033      	str	r3, [r6, #0]
 800beb4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800beb8:	b10a      	cbz	r2, 800bebe <_printf_common+0x26>
 800beba:	3301      	adds	r3, #1
 800bebc:	6033      	str	r3, [r6, #0]
 800bebe:	6823      	ldr	r3, [r4, #0]
 800bec0:	0699      	lsls	r1, r3, #26
 800bec2:	bf42      	ittt	mi
 800bec4:	6833      	ldrmi	r3, [r6, #0]
 800bec6:	3302      	addmi	r3, #2
 800bec8:	6033      	strmi	r3, [r6, #0]
 800beca:	6825      	ldr	r5, [r4, #0]
 800becc:	f015 0506 	ands.w	r5, r5, #6
 800bed0:	d106      	bne.n	800bee0 <_printf_common+0x48>
 800bed2:	f104 0a19 	add.w	sl, r4, #25
 800bed6:	68e3      	ldr	r3, [r4, #12]
 800bed8:	6832      	ldr	r2, [r6, #0]
 800beda:	1a9b      	subs	r3, r3, r2
 800bedc:	42ab      	cmp	r3, r5
 800bede:	dc2b      	bgt.n	800bf38 <_printf_common+0xa0>
 800bee0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bee4:	6822      	ldr	r2, [r4, #0]
 800bee6:	3b00      	subs	r3, #0
 800bee8:	bf18      	it	ne
 800beea:	2301      	movne	r3, #1
 800beec:	0692      	lsls	r2, r2, #26
 800beee:	d430      	bmi.n	800bf52 <_printf_common+0xba>
 800bef0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bef4:	4641      	mov	r1, r8
 800bef6:	4638      	mov	r0, r7
 800bef8:	47c8      	blx	r9
 800befa:	3001      	adds	r0, #1
 800befc:	d023      	beq.n	800bf46 <_printf_common+0xae>
 800befe:	6823      	ldr	r3, [r4, #0]
 800bf00:	341a      	adds	r4, #26
 800bf02:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800bf06:	f003 0306 	and.w	r3, r3, #6
 800bf0a:	2b04      	cmp	r3, #4
 800bf0c:	bf0a      	itet	eq
 800bf0e:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800bf12:	2500      	movne	r5, #0
 800bf14:	6833      	ldreq	r3, [r6, #0]
 800bf16:	f04f 0600 	mov.w	r6, #0
 800bf1a:	bf08      	it	eq
 800bf1c:	1aed      	subeq	r5, r5, r3
 800bf1e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800bf22:	bf08      	it	eq
 800bf24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bf28:	4293      	cmp	r3, r2
 800bf2a:	bfc4      	itt	gt
 800bf2c:	1a9b      	subgt	r3, r3, r2
 800bf2e:	18ed      	addgt	r5, r5, r3
 800bf30:	42b5      	cmp	r5, r6
 800bf32:	d11a      	bne.n	800bf6a <_printf_common+0xd2>
 800bf34:	2000      	movs	r0, #0
 800bf36:	e008      	b.n	800bf4a <_printf_common+0xb2>
 800bf38:	2301      	movs	r3, #1
 800bf3a:	4652      	mov	r2, sl
 800bf3c:	4641      	mov	r1, r8
 800bf3e:	4638      	mov	r0, r7
 800bf40:	47c8      	blx	r9
 800bf42:	3001      	adds	r0, #1
 800bf44:	d103      	bne.n	800bf4e <_printf_common+0xb6>
 800bf46:	f04f 30ff 	mov.w	r0, #4294967295
 800bf4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf4e:	3501      	adds	r5, #1
 800bf50:	e7c1      	b.n	800bed6 <_printf_common+0x3e>
 800bf52:	18e1      	adds	r1, r4, r3
 800bf54:	1c5a      	adds	r2, r3, #1
 800bf56:	2030      	movs	r0, #48	@ 0x30
 800bf58:	3302      	adds	r3, #2
 800bf5a:	4422      	add	r2, r4
 800bf5c:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bf60:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bf64:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bf68:	e7c2      	b.n	800bef0 <_printf_common+0x58>
 800bf6a:	2301      	movs	r3, #1
 800bf6c:	4622      	mov	r2, r4
 800bf6e:	4641      	mov	r1, r8
 800bf70:	4638      	mov	r0, r7
 800bf72:	47c8      	blx	r9
 800bf74:	3001      	adds	r0, #1
 800bf76:	d0e6      	beq.n	800bf46 <_printf_common+0xae>
 800bf78:	3601      	adds	r6, #1
 800bf7a:	e7d9      	b.n	800bf30 <_printf_common+0x98>

0800bf7c <_printf_i>:
 800bf7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bf80:	7e0f      	ldrb	r7, [r1, #24]
 800bf82:	4691      	mov	r9, r2
 800bf84:	4680      	mov	r8, r0
 800bf86:	460c      	mov	r4, r1
 800bf88:	2f78      	cmp	r7, #120	@ 0x78
 800bf8a:	469a      	mov	sl, r3
 800bf8c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bf8e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bf92:	d807      	bhi.n	800bfa4 <_printf_i+0x28>
 800bf94:	2f62      	cmp	r7, #98	@ 0x62
 800bf96:	d80a      	bhi.n	800bfae <_printf_i+0x32>
 800bf98:	2f00      	cmp	r7, #0
 800bf9a:	f000 80d2 	beq.w	800c142 <_printf_i+0x1c6>
 800bf9e:	2f58      	cmp	r7, #88	@ 0x58
 800bfa0:	f000 80b9 	beq.w	800c116 <_printf_i+0x19a>
 800bfa4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bfa8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bfac:	e03a      	b.n	800c024 <_printf_i+0xa8>
 800bfae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bfb2:	2b15      	cmp	r3, #21
 800bfb4:	d8f6      	bhi.n	800bfa4 <_printf_i+0x28>
 800bfb6:	a101      	add	r1, pc, #4	@ (adr r1, 800bfbc <_printf_i+0x40>)
 800bfb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bfbc:	0800c015 	.word	0x0800c015
 800bfc0:	0800c029 	.word	0x0800c029
 800bfc4:	0800bfa5 	.word	0x0800bfa5
 800bfc8:	0800bfa5 	.word	0x0800bfa5
 800bfcc:	0800bfa5 	.word	0x0800bfa5
 800bfd0:	0800bfa5 	.word	0x0800bfa5
 800bfd4:	0800c029 	.word	0x0800c029
 800bfd8:	0800bfa5 	.word	0x0800bfa5
 800bfdc:	0800bfa5 	.word	0x0800bfa5
 800bfe0:	0800bfa5 	.word	0x0800bfa5
 800bfe4:	0800bfa5 	.word	0x0800bfa5
 800bfe8:	0800c129 	.word	0x0800c129
 800bfec:	0800c053 	.word	0x0800c053
 800bff0:	0800c0e3 	.word	0x0800c0e3
 800bff4:	0800bfa5 	.word	0x0800bfa5
 800bff8:	0800bfa5 	.word	0x0800bfa5
 800bffc:	0800c14b 	.word	0x0800c14b
 800c000:	0800bfa5 	.word	0x0800bfa5
 800c004:	0800c053 	.word	0x0800c053
 800c008:	0800bfa5 	.word	0x0800bfa5
 800c00c:	0800bfa5 	.word	0x0800bfa5
 800c010:	0800c0eb 	.word	0x0800c0eb
 800c014:	6833      	ldr	r3, [r6, #0]
 800c016:	1d1a      	adds	r2, r3, #4
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	6032      	str	r2, [r6, #0]
 800c01c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c020:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c024:	2301      	movs	r3, #1
 800c026:	e09d      	b.n	800c164 <_printf_i+0x1e8>
 800c028:	6833      	ldr	r3, [r6, #0]
 800c02a:	6820      	ldr	r0, [r4, #0]
 800c02c:	1d19      	adds	r1, r3, #4
 800c02e:	6031      	str	r1, [r6, #0]
 800c030:	0606      	lsls	r6, r0, #24
 800c032:	d501      	bpl.n	800c038 <_printf_i+0xbc>
 800c034:	681d      	ldr	r5, [r3, #0]
 800c036:	e003      	b.n	800c040 <_printf_i+0xc4>
 800c038:	0645      	lsls	r5, r0, #25
 800c03a:	d5fb      	bpl.n	800c034 <_printf_i+0xb8>
 800c03c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c040:	2d00      	cmp	r5, #0
 800c042:	da03      	bge.n	800c04c <_printf_i+0xd0>
 800c044:	232d      	movs	r3, #45	@ 0x2d
 800c046:	426d      	negs	r5, r5
 800c048:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c04c:	4859      	ldr	r0, [pc, #356]	@ (800c1b4 <_printf_i+0x238>)
 800c04e:	230a      	movs	r3, #10
 800c050:	e011      	b.n	800c076 <_printf_i+0xfa>
 800c052:	6821      	ldr	r1, [r4, #0]
 800c054:	6833      	ldr	r3, [r6, #0]
 800c056:	0608      	lsls	r0, r1, #24
 800c058:	f853 5b04 	ldr.w	r5, [r3], #4
 800c05c:	d402      	bmi.n	800c064 <_printf_i+0xe8>
 800c05e:	0649      	lsls	r1, r1, #25
 800c060:	bf48      	it	mi
 800c062:	b2ad      	uxthmi	r5, r5
 800c064:	2f6f      	cmp	r7, #111	@ 0x6f
 800c066:	6033      	str	r3, [r6, #0]
 800c068:	4852      	ldr	r0, [pc, #328]	@ (800c1b4 <_printf_i+0x238>)
 800c06a:	bf14      	ite	ne
 800c06c:	230a      	movne	r3, #10
 800c06e:	2308      	moveq	r3, #8
 800c070:	2100      	movs	r1, #0
 800c072:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c076:	6866      	ldr	r6, [r4, #4]
 800c078:	2e00      	cmp	r6, #0
 800c07a:	60a6      	str	r6, [r4, #8]
 800c07c:	bfa2      	ittt	ge
 800c07e:	6821      	ldrge	r1, [r4, #0]
 800c080:	f021 0104 	bicge.w	r1, r1, #4
 800c084:	6021      	strge	r1, [r4, #0]
 800c086:	b90d      	cbnz	r5, 800c08c <_printf_i+0x110>
 800c088:	2e00      	cmp	r6, #0
 800c08a:	d04b      	beq.n	800c124 <_printf_i+0x1a8>
 800c08c:	4616      	mov	r6, r2
 800c08e:	fbb5 f1f3 	udiv	r1, r5, r3
 800c092:	fb03 5711 	mls	r7, r3, r1, r5
 800c096:	5dc7      	ldrb	r7, [r0, r7]
 800c098:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c09c:	462f      	mov	r7, r5
 800c09e:	460d      	mov	r5, r1
 800c0a0:	42bb      	cmp	r3, r7
 800c0a2:	d9f4      	bls.n	800c08e <_printf_i+0x112>
 800c0a4:	2b08      	cmp	r3, #8
 800c0a6:	d10b      	bne.n	800c0c0 <_printf_i+0x144>
 800c0a8:	6823      	ldr	r3, [r4, #0]
 800c0aa:	07df      	lsls	r7, r3, #31
 800c0ac:	d508      	bpl.n	800c0c0 <_printf_i+0x144>
 800c0ae:	6923      	ldr	r3, [r4, #16]
 800c0b0:	6861      	ldr	r1, [r4, #4]
 800c0b2:	4299      	cmp	r1, r3
 800c0b4:	bfde      	ittt	le
 800c0b6:	2330      	movle	r3, #48	@ 0x30
 800c0b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c0bc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c0c0:	1b92      	subs	r2, r2, r6
 800c0c2:	6122      	str	r2, [r4, #16]
 800c0c4:	464b      	mov	r3, r9
 800c0c6:	aa03      	add	r2, sp, #12
 800c0c8:	4621      	mov	r1, r4
 800c0ca:	4640      	mov	r0, r8
 800c0cc:	f8cd a000 	str.w	sl, [sp]
 800c0d0:	f7ff fee2 	bl	800be98 <_printf_common>
 800c0d4:	3001      	adds	r0, #1
 800c0d6:	d14a      	bne.n	800c16e <_printf_i+0x1f2>
 800c0d8:	f04f 30ff 	mov.w	r0, #4294967295
 800c0dc:	b004      	add	sp, #16
 800c0de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0e2:	6823      	ldr	r3, [r4, #0]
 800c0e4:	f043 0320 	orr.w	r3, r3, #32
 800c0e8:	6023      	str	r3, [r4, #0]
 800c0ea:	2778      	movs	r7, #120	@ 0x78
 800c0ec:	4832      	ldr	r0, [pc, #200]	@ (800c1b8 <_printf_i+0x23c>)
 800c0ee:	6823      	ldr	r3, [r4, #0]
 800c0f0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c0f4:	061f      	lsls	r7, r3, #24
 800c0f6:	6831      	ldr	r1, [r6, #0]
 800c0f8:	f851 5b04 	ldr.w	r5, [r1], #4
 800c0fc:	d402      	bmi.n	800c104 <_printf_i+0x188>
 800c0fe:	065f      	lsls	r7, r3, #25
 800c100:	bf48      	it	mi
 800c102:	b2ad      	uxthmi	r5, r5
 800c104:	6031      	str	r1, [r6, #0]
 800c106:	07d9      	lsls	r1, r3, #31
 800c108:	bf44      	itt	mi
 800c10a:	f043 0320 	orrmi.w	r3, r3, #32
 800c10e:	6023      	strmi	r3, [r4, #0]
 800c110:	b11d      	cbz	r5, 800c11a <_printf_i+0x19e>
 800c112:	2310      	movs	r3, #16
 800c114:	e7ac      	b.n	800c070 <_printf_i+0xf4>
 800c116:	4827      	ldr	r0, [pc, #156]	@ (800c1b4 <_printf_i+0x238>)
 800c118:	e7e9      	b.n	800c0ee <_printf_i+0x172>
 800c11a:	6823      	ldr	r3, [r4, #0]
 800c11c:	f023 0320 	bic.w	r3, r3, #32
 800c120:	6023      	str	r3, [r4, #0]
 800c122:	e7f6      	b.n	800c112 <_printf_i+0x196>
 800c124:	4616      	mov	r6, r2
 800c126:	e7bd      	b.n	800c0a4 <_printf_i+0x128>
 800c128:	6833      	ldr	r3, [r6, #0]
 800c12a:	6825      	ldr	r5, [r4, #0]
 800c12c:	1d18      	adds	r0, r3, #4
 800c12e:	6961      	ldr	r1, [r4, #20]
 800c130:	6030      	str	r0, [r6, #0]
 800c132:	062e      	lsls	r6, r5, #24
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	d501      	bpl.n	800c13c <_printf_i+0x1c0>
 800c138:	6019      	str	r1, [r3, #0]
 800c13a:	e002      	b.n	800c142 <_printf_i+0x1c6>
 800c13c:	0668      	lsls	r0, r5, #25
 800c13e:	d5fb      	bpl.n	800c138 <_printf_i+0x1bc>
 800c140:	8019      	strh	r1, [r3, #0]
 800c142:	2300      	movs	r3, #0
 800c144:	4616      	mov	r6, r2
 800c146:	6123      	str	r3, [r4, #16]
 800c148:	e7bc      	b.n	800c0c4 <_printf_i+0x148>
 800c14a:	6833      	ldr	r3, [r6, #0]
 800c14c:	2100      	movs	r1, #0
 800c14e:	1d1a      	adds	r2, r3, #4
 800c150:	6032      	str	r2, [r6, #0]
 800c152:	681e      	ldr	r6, [r3, #0]
 800c154:	6862      	ldr	r2, [r4, #4]
 800c156:	4630      	mov	r0, r6
 800c158:	f000 f9b4 	bl	800c4c4 <memchr>
 800c15c:	b108      	cbz	r0, 800c162 <_printf_i+0x1e6>
 800c15e:	1b80      	subs	r0, r0, r6
 800c160:	6060      	str	r0, [r4, #4]
 800c162:	6863      	ldr	r3, [r4, #4]
 800c164:	6123      	str	r3, [r4, #16]
 800c166:	2300      	movs	r3, #0
 800c168:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c16c:	e7aa      	b.n	800c0c4 <_printf_i+0x148>
 800c16e:	6923      	ldr	r3, [r4, #16]
 800c170:	4632      	mov	r2, r6
 800c172:	4649      	mov	r1, r9
 800c174:	4640      	mov	r0, r8
 800c176:	47d0      	blx	sl
 800c178:	3001      	adds	r0, #1
 800c17a:	d0ad      	beq.n	800c0d8 <_printf_i+0x15c>
 800c17c:	6823      	ldr	r3, [r4, #0]
 800c17e:	079b      	lsls	r3, r3, #30
 800c180:	d413      	bmi.n	800c1aa <_printf_i+0x22e>
 800c182:	68e0      	ldr	r0, [r4, #12]
 800c184:	9b03      	ldr	r3, [sp, #12]
 800c186:	4298      	cmp	r0, r3
 800c188:	bfb8      	it	lt
 800c18a:	4618      	movlt	r0, r3
 800c18c:	e7a6      	b.n	800c0dc <_printf_i+0x160>
 800c18e:	2301      	movs	r3, #1
 800c190:	4632      	mov	r2, r6
 800c192:	4649      	mov	r1, r9
 800c194:	4640      	mov	r0, r8
 800c196:	47d0      	blx	sl
 800c198:	3001      	adds	r0, #1
 800c19a:	d09d      	beq.n	800c0d8 <_printf_i+0x15c>
 800c19c:	3501      	adds	r5, #1
 800c19e:	68e3      	ldr	r3, [r4, #12]
 800c1a0:	9903      	ldr	r1, [sp, #12]
 800c1a2:	1a5b      	subs	r3, r3, r1
 800c1a4:	42ab      	cmp	r3, r5
 800c1a6:	dcf2      	bgt.n	800c18e <_printf_i+0x212>
 800c1a8:	e7eb      	b.n	800c182 <_printf_i+0x206>
 800c1aa:	2500      	movs	r5, #0
 800c1ac:	f104 0619 	add.w	r6, r4, #25
 800c1b0:	e7f5      	b.n	800c19e <_printf_i+0x222>
 800c1b2:	bf00      	nop
 800c1b4:	0800c745 	.word	0x0800c745
 800c1b8:	0800c756 	.word	0x0800c756

0800c1bc <__sflush_r>:
 800c1bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c1c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1c4:	0716      	lsls	r6, r2, #28
 800c1c6:	4605      	mov	r5, r0
 800c1c8:	460c      	mov	r4, r1
 800c1ca:	d454      	bmi.n	800c276 <__sflush_r+0xba>
 800c1cc:	684b      	ldr	r3, [r1, #4]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	dc02      	bgt.n	800c1d8 <__sflush_r+0x1c>
 800c1d2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	dd48      	ble.n	800c26a <__sflush_r+0xae>
 800c1d8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c1da:	2e00      	cmp	r6, #0
 800c1dc:	d045      	beq.n	800c26a <__sflush_r+0xae>
 800c1de:	2300      	movs	r3, #0
 800c1e0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c1e4:	682f      	ldr	r7, [r5, #0]
 800c1e6:	6a21      	ldr	r1, [r4, #32]
 800c1e8:	602b      	str	r3, [r5, #0]
 800c1ea:	d030      	beq.n	800c24e <__sflush_r+0x92>
 800c1ec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c1ee:	89a3      	ldrh	r3, [r4, #12]
 800c1f0:	0759      	lsls	r1, r3, #29
 800c1f2:	d505      	bpl.n	800c200 <__sflush_r+0x44>
 800c1f4:	6863      	ldr	r3, [r4, #4]
 800c1f6:	1ad2      	subs	r2, r2, r3
 800c1f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c1fa:	b10b      	cbz	r3, 800c200 <__sflush_r+0x44>
 800c1fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c1fe:	1ad2      	subs	r2, r2, r3
 800c200:	2300      	movs	r3, #0
 800c202:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c204:	6a21      	ldr	r1, [r4, #32]
 800c206:	4628      	mov	r0, r5
 800c208:	47b0      	blx	r6
 800c20a:	1c43      	adds	r3, r0, #1
 800c20c:	89a3      	ldrh	r3, [r4, #12]
 800c20e:	d106      	bne.n	800c21e <__sflush_r+0x62>
 800c210:	6829      	ldr	r1, [r5, #0]
 800c212:	291d      	cmp	r1, #29
 800c214:	d82b      	bhi.n	800c26e <__sflush_r+0xb2>
 800c216:	4a2a      	ldr	r2, [pc, #168]	@ (800c2c0 <__sflush_r+0x104>)
 800c218:	410a      	asrs	r2, r1
 800c21a:	07d6      	lsls	r6, r2, #31
 800c21c:	d427      	bmi.n	800c26e <__sflush_r+0xb2>
 800c21e:	2200      	movs	r2, #0
 800c220:	04d9      	lsls	r1, r3, #19
 800c222:	6062      	str	r2, [r4, #4]
 800c224:	6922      	ldr	r2, [r4, #16]
 800c226:	6022      	str	r2, [r4, #0]
 800c228:	d504      	bpl.n	800c234 <__sflush_r+0x78>
 800c22a:	1c42      	adds	r2, r0, #1
 800c22c:	d101      	bne.n	800c232 <__sflush_r+0x76>
 800c22e:	682b      	ldr	r3, [r5, #0]
 800c230:	b903      	cbnz	r3, 800c234 <__sflush_r+0x78>
 800c232:	6560      	str	r0, [r4, #84]	@ 0x54
 800c234:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c236:	602f      	str	r7, [r5, #0]
 800c238:	b1b9      	cbz	r1, 800c26a <__sflush_r+0xae>
 800c23a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c23e:	4299      	cmp	r1, r3
 800c240:	d002      	beq.n	800c248 <__sflush_r+0x8c>
 800c242:	4628      	mov	r0, r5
 800c244:	f7ff fbee 	bl	800ba24 <_free_r>
 800c248:	2300      	movs	r3, #0
 800c24a:	6363      	str	r3, [r4, #52]	@ 0x34
 800c24c:	e00d      	b.n	800c26a <__sflush_r+0xae>
 800c24e:	2301      	movs	r3, #1
 800c250:	4628      	mov	r0, r5
 800c252:	47b0      	blx	r6
 800c254:	4602      	mov	r2, r0
 800c256:	1c50      	adds	r0, r2, #1
 800c258:	d1c9      	bne.n	800c1ee <__sflush_r+0x32>
 800c25a:	682b      	ldr	r3, [r5, #0]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d0c6      	beq.n	800c1ee <__sflush_r+0x32>
 800c260:	2b1d      	cmp	r3, #29
 800c262:	d001      	beq.n	800c268 <__sflush_r+0xac>
 800c264:	2b16      	cmp	r3, #22
 800c266:	d11d      	bne.n	800c2a4 <__sflush_r+0xe8>
 800c268:	602f      	str	r7, [r5, #0]
 800c26a:	2000      	movs	r0, #0
 800c26c:	e021      	b.n	800c2b2 <__sflush_r+0xf6>
 800c26e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c272:	b21b      	sxth	r3, r3
 800c274:	e01a      	b.n	800c2ac <__sflush_r+0xf0>
 800c276:	690f      	ldr	r7, [r1, #16]
 800c278:	2f00      	cmp	r7, #0
 800c27a:	d0f6      	beq.n	800c26a <__sflush_r+0xae>
 800c27c:	0793      	lsls	r3, r2, #30
 800c27e:	680e      	ldr	r6, [r1, #0]
 800c280:	600f      	str	r7, [r1, #0]
 800c282:	bf0c      	ite	eq
 800c284:	694b      	ldreq	r3, [r1, #20]
 800c286:	2300      	movne	r3, #0
 800c288:	eba6 0807 	sub.w	r8, r6, r7
 800c28c:	608b      	str	r3, [r1, #8]
 800c28e:	f1b8 0f00 	cmp.w	r8, #0
 800c292:	ddea      	ble.n	800c26a <__sflush_r+0xae>
 800c294:	4643      	mov	r3, r8
 800c296:	463a      	mov	r2, r7
 800c298:	6a21      	ldr	r1, [r4, #32]
 800c29a:	4628      	mov	r0, r5
 800c29c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c29e:	47b0      	blx	r6
 800c2a0:	2800      	cmp	r0, #0
 800c2a2:	dc08      	bgt.n	800c2b6 <__sflush_r+0xfa>
 800c2a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c2ac:	f04f 30ff 	mov.w	r0, #4294967295
 800c2b0:	81a3      	strh	r3, [r4, #12]
 800c2b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2b6:	4407      	add	r7, r0
 800c2b8:	eba8 0800 	sub.w	r8, r8, r0
 800c2bc:	e7e7      	b.n	800c28e <__sflush_r+0xd2>
 800c2be:	bf00      	nop
 800c2c0:	dfbffffe 	.word	0xdfbffffe

0800c2c4 <_fflush_r>:
 800c2c4:	b538      	push	{r3, r4, r5, lr}
 800c2c6:	690b      	ldr	r3, [r1, #16]
 800c2c8:	4605      	mov	r5, r0
 800c2ca:	460c      	mov	r4, r1
 800c2cc:	b913      	cbnz	r3, 800c2d4 <_fflush_r+0x10>
 800c2ce:	2500      	movs	r5, #0
 800c2d0:	4628      	mov	r0, r5
 800c2d2:	bd38      	pop	{r3, r4, r5, pc}
 800c2d4:	b118      	cbz	r0, 800c2de <_fflush_r+0x1a>
 800c2d6:	6a03      	ldr	r3, [r0, #32]
 800c2d8:	b90b      	cbnz	r3, 800c2de <_fflush_r+0x1a>
 800c2da:	f7ff fa93 	bl	800b804 <__sinit>
 800c2de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d0f3      	beq.n	800c2ce <_fflush_r+0xa>
 800c2e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c2e8:	07d0      	lsls	r0, r2, #31
 800c2ea:	d404      	bmi.n	800c2f6 <_fflush_r+0x32>
 800c2ec:	0599      	lsls	r1, r3, #22
 800c2ee:	d402      	bmi.n	800c2f6 <_fflush_r+0x32>
 800c2f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c2f2:	f7ff fb94 	bl	800ba1e <__retarget_lock_acquire_recursive>
 800c2f6:	4628      	mov	r0, r5
 800c2f8:	4621      	mov	r1, r4
 800c2fa:	f7ff ff5f 	bl	800c1bc <__sflush_r>
 800c2fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c300:	4605      	mov	r5, r0
 800c302:	07da      	lsls	r2, r3, #31
 800c304:	d4e4      	bmi.n	800c2d0 <_fflush_r+0xc>
 800c306:	89a3      	ldrh	r3, [r4, #12]
 800c308:	059b      	lsls	r3, r3, #22
 800c30a:	d4e1      	bmi.n	800c2d0 <_fflush_r+0xc>
 800c30c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c30e:	f7ff fb87 	bl	800ba20 <__retarget_lock_release_recursive>
 800c312:	e7dd      	b.n	800c2d0 <_fflush_r+0xc>

0800c314 <_putc_r>:
 800c314:	b570      	push	{r4, r5, r6, lr}
 800c316:	460d      	mov	r5, r1
 800c318:	4614      	mov	r4, r2
 800c31a:	4606      	mov	r6, r0
 800c31c:	b118      	cbz	r0, 800c326 <_putc_r+0x12>
 800c31e:	6a03      	ldr	r3, [r0, #32]
 800c320:	b90b      	cbnz	r3, 800c326 <_putc_r+0x12>
 800c322:	f7ff fa6f 	bl	800b804 <__sinit>
 800c326:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c328:	07d8      	lsls	r0, r3, #31
 800c32a:	d405      	bmi.n	800c338 <_putc_r+0x24>
 800c32c:	89a3      	ldrh	r3, [r4, #12]
 800c32e:	0599      	lsls	r1, r3, #22
 800c330:	d402      	bmi.n	800c338 <_putc_r+0x24>
 800c332:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c334:	f7ff fb73 	bl	800ba1e <__retarget_lock_acquire_recursive>
 800c338:	68a3      	ldr	r3, [r4, #8]
 800c33a:	3b01      	subs	r3, #1
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	60a3      	str	r3, [r4, #8]
 800c340:	da05      	bge.n	800c34e <_putc_r+0x3a>
 800c342:	69a2      	ldr	r2, [r4, #24]
 800c344:	4293      	cmp	r3, r2
 800c346:	db12      	blt.n	800c36e <_putc_r+0x5a>
 800c348:	b2eb      	uxtb	r3, r5
 800c34a:	2b0a      	cmp	r3, #10
 800c34c:	d00f      	beq.n	800c36e <_putc_r+0x5a>
 800c34e:	6823      	ldr	r3, [r4, #0]
 800c350:	1c5a      	adds	r2, r3, #1
 800c352:	6022      	str	r2, [r4, #0]
 800c354:	701d      	strb	r5, [r3, #0]
 800c356:	b2ed      	uxtb	r5, r5
 800c358:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c35a:	07da      	lsls	r2, r3, #31
 800c35c:	d405      	bmi.n	800c36a <_putc_r+0x56>
 800c35e:	89a3      	ldrh	r3, [r4, #12]
 800c360:	059b      	lsls	r3, r3, #22
 800c362:	d402      	bmi.n	800c36a <_putc_r+0x56>
 800c364:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c366:	f7ff fb5b 	bl	800ba20 <__retarget_lock_release_recursive>
 800c36a:	4628      	mov	r0, r5
 800c36c:	bd70      	pop	{r4, r5, r6, pc}
 800c36e:	4629      	mov	r1, r5
 800c370:	4622      	mov	r2, r4
 800c372:	4630      	mov	r0, r6
 800c374:	f000 f802 	bl	800c37c <__swbuf_r>
 800c378:	4605      	mov	r5, r0
 800c37a:	e7ed      	b.n	800c358 <_putc_r+0x44>

0800c37c <__swbuf_r>:
 800c37c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c37e:	460e      	mov	r6, r1
 800c380:	4614      	mov	r4, r2
 800c382:	4605      	mov	r5, r0
 800c384:	b118      	cbz	r0, 800c38e <__swbuf_r+0x12>
 800c386:	6a03      	ldr	r3, [r0, #32]
 800c388:	b90b      	cbnz	r3, 800c38e <__swbuf_r+0x12>
 800c38a:	f7ff fa3b 	bl	800b804 <__sinit>
 800c38e:	69a3      	ldr	r3, [r4, #24]
 800c390:	60a3      	str	r3, [r4, #8]
 800c392:	89a3      	ldrh	r3, [r4, #12]
 800c394:	071a      	lsls	r2, r3, #28
 800c396:	d501      	bpl.n	800c39c <__swbuf_r+0x20>
 800c398:	6923      	ldr	r3, [r4, #16]
 800c39a:	b943      	cbnz	r3, 800c3ae <__swbuf_r+0x32>
 800c39c:	4621      	mov	r1, r4
 800c39e:	4628      	mov	r0, r5
 800c3a0:	f000 f82a 	bl	800c3f8 <__swsetup_r>
 800c3a4:	b118      	cbz	r0, 800c3ae <__swbuf_r+0x32>
 800c3a6:	f04f 37ff 	mov.w	r7, #4294967295
 800c3aa:	4638      	mov	r0, r7
 800c3ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c3ae:	6823      	ldr	r3, [r4, #0]
 800c3b0:	b2f6      	uxtb	r6, r6
 800c3b2:	6922      	ldr	r2, [r4, #16]
 800c3b4:	4637      	mov	r7, r6
 800c3b6:	1a98      	subs	r0, r3, r2
 800c3b8:	6963      	ldr	r3, [r4, #20]
 800c3ba:	4283      	cmp	r3, r0
 800c3bc:	dc05      	bgt.n	800c3ca <__swbuf_r+0x4e>
 800c3be:	4621      	mov	r1, r4
 800c3c0:	4628      	mov	r0, r5
 800c3c2:	f7ff ff7f 	bl	800c2c4 <_fflush_r>
 800c3c6:	2800      	cmp	r0, #0
 800c3c8:	d1ed      	bne.n	800c3a6 <__swbuf_r+0x2a>
 800c3ca:	68a3      	ldr	r3, [r4, #8]
 800c3cc:	3b01      	subs	r3, #1
 800c3ce:	60a3      	str	r3, [r4, #8]
 800c3d0:	6823      	ldr	r3, [r4, #0]
 800c3d2:	1c5a      	adds	r2, r3, #1
 800c3d4:	6022      	str	r2, [r4, #0]
 800c3d6:	701e      	strb	r6, [r3, #0]
 800c3d8:	1c43      	adds	r3, r0, #1
 800c3da:	6962      	ldr	r2, [r4, #20]
 800c3dc:	429a      	cmp	r2, r3
 800c3de:	d004      	beq.n	800c3ea <__swbuf_r+0x6e>
 800c3e0:	89a3      	ldrh	r3, [r4, #12]
 800c3e2:	07db      	lsls	r3, r3, #31
 800c3e4:	d5e1      	bpl.n	800c3aa <__swbuf_r+0x2e>
 800c3e6:	2e0a      	cmp	r6, #10
 800c3e8:	d1df      	bne.n	800c3aa <__swbuf_r+0x2e>
 800c3ea:	4621      	mov	r1, r4
 800c3ec:	4628      	mov	r0, r5
 800c3ee:	f7ff ff69 	bl	800c2c4 <_fflush_r>
 800c3f2:	2800      	cmp	r0, #0
 800c3f4:	d0d9      	beq.n	800c3aa <__swbuf_r+0x2e>
 800c3f6:	e7d6      	b.n	800c3a6 <__swbuf_r+0x2a>

0800c3f8 <__swsetup_r>:
 800c3f8:	b538      	push	{r3, r4, r5, lr}
 800c3fa:	4b29      	ldr	r3, [pc, #164]	@ (800c4a0 <__swsetup_r+0xa8>)
 800c3fc:	4605      	mov	r5, r0
 800c3fe:	460c      	mov	r4, r1
 800c400:	6818      	ldr	r0, [r3, #0]
 800c402:	b118      	cbz	r0, 800c40c <__swsetup_r+0x14>
 800c404:	6a03      	ldr	r3, [r0, #32]
 800c406:	b90b      	cbnz	r3, 800c40c <__swsetup_r+0x14>
 800c408:	f7ff f9fc 	bl	800b804 <__sinit>
 800c40c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c410:	0719      	lsls	r1, r3, #28
 800c412:	d422      	bmi.n	800c45a <__swsetup_r+0x62>
 800c414:	06da      	lsls	r2, r3, #27
 800c416:	d407      	bmi.n	800c428 <__swsetup_r+0x30>
 800c418:	2209      	movs	r2, #9
 800c41a:	602a      	str	r2, [r5, #0]
 800c41c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c420:	f04f 30ff 	mov.w	r0, #4294967295
 800c424:	81a3      	strh	r3, [r4, #12]
 800c426:	e033      	b.n	800c490 <__swsetup_r+0x98>
 800c428:	0758      	lsls	r0, r3, #29
 800c42a:	d512      	bpl.n	800c452 <__swsetup_r+0x5a>
 800c42c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c42e:	b141      	cbz	r1, 800c442 <__swsetup_r+0x4a>
 800c430:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c434:	4299      	cmp	r1, r3
 800c436:	d002      	beq.n	800c43e <__swsetup_r+0x46>
 800c438:	4628      	mov	r0, r5
 800c43a:	f7ff faf3 	bl	800ba24 <_free_r>
 800c43e:	2300      	movs	r3, #0
 800c440:	6363      	str	r3, [r4, #52]	@ 0x34
 800c442:	89a3      	ldrh	r3, [r4, #12]
 800c444:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c448:	81a3      	strh	r3, [r4, #12]
 800c44a:	2300      	movs	r3, #0
 800c44c:	6063      	str	r3, [r4, #4]
 800c44e:	6923      	ldr	r3, [r4, #16]
 800c450:	6023      	str	r3, [r4, #0]
 800c452:	89a3      	ldrh	r3, [r4, #12]
 800c454:	f043 0308 	orr.w	r3, r3, #8
 800c458:	81a3      	strh	r3, [r4, #12]
 800c45a:	6923      	ldr	r3, [r4, #16]
 800c45c:	b94b      	cbnz	r3, 800c472 <__swsetup_r+0x7a>
 800c45e:	89a3      	ldrh	r3, [r4, #12]
 800c460:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c464:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c468:	d003      	beq.n	800c472 <__swsetup_r+0x7a>
 800c46a:	4621      	mov	r1, r4
 800c46c:	4628      	mov	r0, r5
 800c46e:	f000 f85c 	bl	800c52a <__smakebuf_r>
 800c472:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c476:	f013 0201 	ands.w	r2, r3, #1
 800c47a:	d00a      	beq.n	800c492 <__swsetup_r+0x9a>
 800c47c:	2200      	movs	r2, #0
 800c47e:	60a2      	str	r2, [r4, #8]
 800c480:	6962      	ldr	r2, [r4, #20]
 800c482:	4252      	negs	r2, r2
 800c484:	61a2      	str	r2, [r4, #24]
 800c486:	6922      	ldr	r2, [r4, #16]
 800c488:	b942      	cbnz	r2, 800c49c <__swsetup_r+0xa4>
 800c48a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c48e:	d1c5      	bne.n	800c41c <__swsetup_r+0x24>
 800c490:	bd38      	pop	{r3, r4, r5, pc}
 800c492:	0799      	lsls	r1, r3, #30
 800c494:	bf58      	it	pl
 800c496:	6962      	ldrpl	r2, [r4, #20]
 800c498:	60a2      	str	r2, [r4, #8]
 800c49a:	e7f4      	b.n	800c486 <__swsetup_r+0x8e>
 800c49c:	2000      	movs	r0, #0
 800c49e:	e7f7      	b.n	800c490 <__swsetup_r+0x98>
 800c4a0:	2000019c 	.word	0x2000019c

0800c4a4 <_sbrk_r>:
 800c4a4:	b538      	push	{r3, r4, r5, lr}
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	4d05      	ldr	r5, [pc, #20]	@ (800c4c0 <_sbrk_r+0x1c>)
 800c4aa:	4604      	mov	r4, r0
 800c4ac:	4608      	mov	r0, r1
 800c4ae:	602b      	str	r3, [r5, #0]
 800c4b0:	f7f4 fab6 	bl	8000a20 <_sbrk>
 800c4b4:	1c43      	adds	r3, r0, #1
 800c4b6:	d102      	bne.n	800c4be <_sbrk_r+0x1a>
 800c4b8:	682b      	ldr	r3, [r5, #0]
 800c4ba:	b103      	cbz	r3, 800c4be <_sbrk_r+0x1a>
 800c4bc:	6023      	str	r3, [r4, #0]
 800c4be:	bd38      	pop	{r3, r4, r5, pc}
 800c4c0:	20000ce0 	.word	0x20000ce0

0800c4c4 <memchr>:
 800c4c4:	b2c9      	uxtb	r1, r1
 800c4c6:	4603      	mov	r3, r0
 800c4c8:	4402      	add	r2, r0
 800c4ca:	b510      	push	{r4, lr}
 800c4cc:	4293      	cmp	r3, r2
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	d101      	bne.n	800c4d6 <memchr+0x12>
 800c4d2:	2000      	movs	r0, #0
 800c4d4:	e003      	b.n	800c4de <memchr+0x1a>
 800c4d6:	7804      	ldrb	r4, [r0, #0]
 800c4d8:	3301      	adds	r3, #1
 800c4da:	428c      	cmp	r4, r1
 800c4dc:	d1f6      	bne.n	800c4cc <memchr+0x8>
 800c4de:	bd10      	pop	{r4, pc}

0800c4e0 <__swhatbuf_r>:
 800c4e0:	b570      	push	{r4, r5, r6, lr}
 800c4e2:	460c      	mov	r4, r1
 800c4e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4e8:	b096      	sub	sp, #88	@ 0x58
 800c4ea:	4615      	mov	r5, r2
 800c4ec:	2900      	cmp	r1, #0
 800c4ee:	461e      	mov	r6, r3
 800c4f0:	da0c      	bge.n	800c50c <__swhatbuf_r+0x2c>
 800c4f2:	89a3      	ldrh	r3, [r4, #12]
 800c4f4:	2100      	movs	r1, #0
 800c4f6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c4fa:	bf14      	ite	ne
 800c4fc:	2340      	movne	r3, #64	@ 0x40
 800c4fe:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c502:	2000      	movs	r0, #0
 800c504:	6031      	str	r1, [r6, #0]
 800c506:	602b      	str	r3, [r5, #0]
 800c508:	b016      	add	sp, #88	@ 0x58
 800c50a:	bd70      	pop	{r4, r5, r6, pc}
 800c50c:	466a      	mov	r2, sp
 800c50e:	f000 f849 	bl	800c5a4 <_fstat_r>
 800c512:	2800      	cmp	r0, #0
 800c514:	dbed      	blt.n	800c4f2 <__swhatbuf_r+0x12>
 800c516:	9901      	ldr	r1, [sp, #4]
 800c518:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c51c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c520:	4259      	negs	r1, r3
 800c522:	4159      	adcs	r1, r3
 800c524:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c528:	e7eb      	b.n	800c502 <__swhatbuf_r+0x22>

0800c52a <__smakebuf_r>:
 800c52a:	898b      	ldrh	r3, [r1, #12]
 800c52c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c52e:	079d      	lsls	r5, r3, #30
 800c530:	4606      	mov	r6, r0
 800c532:	460c      	mov	r4, r1
 800c534:	d507      	bpl.n	800c546 <__smakebuf_r+0x1c>
 800c536:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c53a:	6023      	str	r3, [r4, #0]
 800c53c:	6123      	str	r3, [r4, #16]
 800c53e:	2301      	movs	r3, #1
 800c540:	6163      	str	r3, [r4, #20]
 800c542:	b003      	add	sp, #12
 800c544:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c546:	ab01      	add	r3, sp, #4
 800c548:	466a      	mov	r2, sp
 800c54a:	f7ff ffc9 	bl	800c4e0 <__swhatbuf_r>
 800c54e:	9f00      	ldr	r7, [sp, #0]
 800c550:	4605      	mov	r5, r0
 800c552:	4630      	mov	r0, r6
 800c554:	4639      	mov	r1, r7
 800c556:	f7ff fad1 	bl	800bafc <_malloc_r>
 800c55a:	b948      	cbnz	r0, 800c570 <__smakebuf_r+0x46>
 800c55c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c560:	059a      	lsls	r2, r3, #22
 800c562:	d4ee      	bmi.n	800c542 <__smakebuf_r+0x18>
 800c564:	f023 0303 	bic.w	r3, r3, #3
 800c568:	f043 0302 	orr.w	r3, r3, #2
 800c56c:	81a3      	strh	r3, [r4, #12]
 800c56e:	e7e2      	b.n	800c536 <__smakebuf_r+0xc>
 800c570:	89a3      	ldrh	r3, [r4, #12]
 800c572:	6020      	str	r0, [r4, #0]
 800c574:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c578:	81a3      	strh	r3, [r4, #12]
 800c57a:	9b01      	ldr	r3, [sp, #4]
 800c57c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c580:	b15b      	cbz	r3, 800c59a <__smakebuf_r+0x70>
 800c582:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c586:	4630      	mov	r0, r6
 800c588:	f000 f81e 	bl	800c5c8 <_isatty_r>
 800c58c:	b128      	cbz	r0, 800c59a <__smakebuf_r+0x70>
 800c58e:	89a3      	ldrh	r3, [r4, #12]
 800c590:	f023 0303 	bic.w	r3, r3, #3
 800c594:	f043 0301 	orr.w	r3, r3, #1
 800c598:	81a3      	strh	r3, [r4, #12]
 800c59a:	89a3      	ldrh	r3, [r4, #12]
 800c59c:	431d      	orrs	r5, r3
 800c59e:	81a5      	strh	r5, [r4, #12]
 800c5a0:	e7cf      	b.n	800c542 <__smakebuf_r+0x18>
	...

0800c5a4 <_fstat_r>:
 800c5a4:	b538      	push	{r3, r4, r5, lr}
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	4d06      	ldr	r5, [pc, #24]	@ (800c5c4 <_fstat_r+0x20>)
 800c5aa:	4604      	mov	r4, r0
 800c5ac:	4608      	mov	r0, r1
 800c5ae:	4611      	mov	r1, r2
 800c5b0:	602b      	str	r3, [r5, #0]
 800c5b2:	f7f4 fa0c 	bl	80009ce <_fstat>
 800c5b6:	1c43      	adds	r3, r0, #1
 800c5b8:	d102      	bne.n	800c5c0 <_fstat_r+0x1c>
 800c5ba:	682b      	ldr	r3, [r5, #0]
 800c5bc:	b103      	cbz	r3, 800c5c0 <_fstat_r+0x1c>
 800c5be:	6023      	str	r3, [r4, #0]
 800c5c0:	bd38      	pop	{r3, r4, r5, pc}
 800c5c2:	bf00      	nop
 800c5c4:	20000ce0 	.word	0x20000ce0

0800c5c8 <_isatty_r>:
 800c5c8:	b538      	push	{r3, r4, r5, lr}
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	4d05      	ldr	r5, [pc, #20]	@ (800c5e4 <_isatty_r+0x1c>)
 800c5ce:	4604      	mov	r4, r0
 800c5d0:	4608      	mov	r0, r1
 800c5d2:	602b      	str	r3, [r5, #0]
 800c5d4:	f7f4 fa0b 	bl	80009ee <_isatty>
 800c5d8:	1c43      	adds	r3, r0, #1
 800c5da:	d102      	bne.n	800c5e2 <_isatty_r+0x1a>
 800c5dc:	682b      	ldr	r3, [r5, #0]
 800c5de:	b103      	cbz	r3, 800c5e2 <_isatty_r+0x1a>
 800c5e0:	6023      	str	r3, [r4, #0]
 800c5e2:	bd38      	pop	{r3, r4, r5, pc}
 800c5e4:	20000ce0 	.word	0x20000ce0

0800c5e8 <_init>:
 800c5e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5ea:	bf00      	nop
 800c5ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5ee:	bc08      	pop	{r3}
 800c5f0:	469e      	mov	lr, r3
 800c5f2:	4770      	bx	lr

0800c5f4 <_fini>:
 800c5f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5f6:	bf00      	nop
 800c5f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5fa:	bc08      	pop	{r3}
 800c5fc:	469e      	mov	lr, r3
 800c5fe:	4770      	bx	lr
