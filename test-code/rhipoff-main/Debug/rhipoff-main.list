
rhipoff-main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000254  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b888  08000254  08000254  00001254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  0800badc  0800badc  0000cadc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc34  0800bc34  0000d22c  2**0
                  CONTENTS
  4 .ARM          00000000  0800bc34  0800bc34  0000d22c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bc34  0800bc34  0000d22c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bc34  0800bc34  0000cc34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bc38  0800bc38  0000cc38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000022c  20000000  0800bc3c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000aac  2000022c  0800be68  0000d22c  2**2
                  ALLOC
 10 ._user_heap_stack 00000d00  20000cd8  0800be68  0000dcd8  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000d22c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001724f  00000000  00000000  0000d262  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038bf  00000000  00000000  000244b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001210  00000000  00000000  00027d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d74  00000000  00000000  00028f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002df61  00000000  00000000  00029cf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001756e  00000000  00000000  00057c55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00110717  00000000  00000000  0006f1c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017f8da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051ac  00000000  00000000  0017f920  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00184acc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000254 <__do_global_dtors_aux>:
 8000254:	b510      	push	{r4, lr}
 8000256:	4c05      	ldr	r4, [pc, #20]	@ (800026c <__do_global_dtors_aux+0x18>)
 8000258:	7823      	ldrb	r3, [r4, #0]
 800025a:	b933      	cbnz	r3, 800026a <__do_global_dtors_aux+0x16>
 800025c:	4b04      	ldr	r3, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x1c>)
 800025e:	b113      	cbz	r3, 8000266 <__do_global_dtors_aux+0x12>
 8000260:	4804      	ldr	r0, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x20>)
 8000262:	f3af 8000 	nop.w
 8000266:	2301      	movs	r3, #1
 8000268:	7023      	strb	r3, [r4, #0]
 800026a:	bd10      	pop	{r4, pc}
 800026c:	2000022c 	.word	0x2000022c
 8000270:	00000000 	.word	0x00000000
 8000274:	0800bac4 	.word	0x0800bac4

08000278 <frame_dummy>:
 8000278:	b508      	push	{r3, lr}
 800027a:	4b03      	ldr	r3, [pc, #12]	@ (8000288 <frame_dummy+0x10>)
 800027c:	b11b      	cbz	r3, 8000286 <frame_dummy+0xe>
 800027e:	4903      	ldr	r1, [pc, #12]	@ (800028c <frame_dummy+0x14>)
 8000280:	4803      	ldr	r0, [pc, #12]	@ (8000290 <frame_dummy+0x18>)
 8000282:	f3af 8000 	nop.w
 8000286:	bd08      	pop	{r3, pc}
 8000288:	00000000 	.word	0x00000000
 800028c:	20000230 	.word	0x20000230
 8000290:	0800bac4 	.word	0x0800bac4

08000294 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN 1 */
	hid_report_buffer[0] = 0;   /* Buttons â€“ first 3 bits [LSB] */
 8000298:	4b30      	ldr	r3, [pc, #192]	@ (800035c <main+0xc8>)
 800029a:	2200      	movs	r2, #0
 800029c:	701a      	strb	r2, [r3, #0]
	hid_report_buffer[1] = 001; /* X axis 8 bits value signed */
 800029e:	4b2f      	ldr	r3, [pc, #188]	@ (800035c <main+0xc8>)
 80002a0:	2201      	movs	r2, #1
 80002a2:	705a      	strb	r2, [r3, #1]
	hid_report_buffer[2] = 0;   /* Y axis 8 bits value signed*/
 80002a4:	4b2d      	ldr	r3, [pc, #180]	@ (800035c <main+0xc8>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	709a      	strb	r2, [r3, #2]
	hid_report_buffer[3] = 0;   /* Wheel 8 bits value signed*/
 80002aa:	4b2c      	ldr	r3, [pc, #176]	@ (800035c <main+0xc8>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	70da      	strb	r2, [r3, #3]
	/* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002b0:	f000 fbf0 	bl	8000a94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002b4:	f000 f866 	bl	8000384 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002b8:	f000 f952 	bl	8000560 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 80002bc:	f000 f8d8 	bl	8000470 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  /* Initialize the USB Device Library */
  if(USBD_Init(&hUsbDeviceFS, &Class_Desc, 0) != USBD_OK)
 80002c0:	2200      	movs	r2, #0
 80002c2:	4927      	ldr	r1, [pc, #156]	@ (8000360 <main+0xcc>)
 80002c4:	4827      	ldr	r0, [pc, #156]	@ (8000364 <main+0xd0>)
 80002c6:	f008 ff97 	bl	80091f8 <USBD_Init>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d001      	beq.n	80002d4 <main+0x40>
  	Error_Handler();
 80002d0:	f000 f9a0 	bl	8000614 <Error_Handler>
  /* Store HID Instance Class ID */
  HID_InstID = hUsbDeviceFS.classId;
 80002d4:	4b23      	ldr	r3, [pc, #140]	@ (8000364 <main+0xd0>)
 80002d6:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80002da:	b2da      	uxtb	r2, r3
 80002dc:	4b22      	ldr	r3, [pc, #136]	@ (8000368 <main+0xd4>)
 80002de:	701a      	strb	r2, [r3, #0]
  /* Register the HID Class */
  if(USBD_RegisterClassComposite(&hUsbDeviceFS, USBD_HID_CLASS, CLASS_TYPE_HID, &HID_EpAdd_Inst) != USBD_OK)
 80002e0:	4b22      	ldr	r3, [pc, #136]	@ (800036c <main+0xd8>)
 80002e2:	2201      	movs	r2, #1
 80002e4:	4922      	ldr	r1, [pc, #136]	@ (8000370 <main+0xdc>)
 80002e6:	481f      	ldr	r0, [pc, #124]	@ (8000364 <main+0xd0>)
 80002e8:	f008 ffe4 	bl	80092b4 <USBD_RegisterClassComposite>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d001      	beq.n	80002f6 <main+0x62>
  	Error_Handler();
 80002f2:	f000 f98f 	bl	8000614 <Error_Handler>
  /* Store the HID Class */
  CDC_InstID = hUsbDeviceFS.classId;
 80002f6:	4b1b      	ldr	r3, [pc, #108]	@ (8000364 <main+0xd0>)
 80002f8:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80002fc:	b2da      	uxtb	r2, r3
 80002fe:	4b1d      	ldr	r3, [pc, #116]	@ (8000374 <main+0xe0>)
 8000300:	701a      	strb	r2, [r3, #0]
  /* Register CDC Class First Instance */
  if(USBD_RegisterClassComposite(&hUsbDeviceFS, USBD_CDC_CLASS, CLASS_TYPE_CDC, CDC_EpAdd_Inst) != USBD_OK)
 8000302:	4b1d      	ldr	r3, [pc, #116]	@ (8000378 <main+0xe4>)
 8000304:	2202      	movs	r2, #2
 8000306:	491d      	ldr	r1, [pc, #116]	@ (800037c <main+0xe8>)
 8000308:	4816      	ldr	r0, [pc, #88]	@ (8000364 <main+0xd0>)
 800030a:	f008 ffd3 	bl	80092b4 <USBD_RegisterClassComposite>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d001      	beq.n	8000318 <main+0x84>
  	Error_Handler();
 8000314:	f000 f97e 	bl	8000614 <Error_Handler>
  /* Add CDC Interface Class */
  if (USBD_CMPSIT_SetClassID(&hUsbDeviceFS, CLASS_TYPE_CDC, 0) != 0xFF)
 8000318:	2200      	movs	r2, #0
 800031a:	2102      	movs	r1, #2
 800031c:	4811      	ldr	r0, [pc, #68]	@ (8000364 <main+0xd0>)
 800031e:	f008 faf5 	bl	800890c <USBD_CMPSIT_SetClassID>
 8000322:	4603      	mov	r3, r0
 8000324:	2bff      	cmp	r3, #255	@ 0xff
 8000326:	d003      	beq.n	8000330 <main+0x9c>
  {
  	USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_CDC_Template_fops);
 8000328:	4915      	ldr	r1, [pc, #84]	@ (8000380 <main+0xec>)
 800032a:	480e      	ldr	r0, [pc, #56]	@ (8000364 <main+0xd0>)
 800032c:	f007 fb78 	bl	8007a20 <USBD_CDC_RegisterInterface>
  }
  USBD_Start(&hUsbDeviceFS);
 8000330:	480c      	ldr	r0, [pc, #48]	@ (8000364 <main+0xd0>)
 8000332:	f009 f827 	bl	8009384 <USBD_Start>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//  	if(HAL_GPIO_ReadPin(USER_BT_GPIO_Port, USER_BT_Pin) == GPIO_PIN_SET)
//  	{
  		USBD_HID_SendReport(&hUsbDeviceFS, hid_report_buffer, 4, HID_InstID);
 8000336:	4b0c      	ldr	r3, [pc, #48]	@ (8000368 <main+0xd4>)
 8000338:	781b      	ldrb	r3, [r3, #0]
 800033a:	2204      	movs	r2, #4
 800033c:	4907      	ldr	r1, [pc, #28]	@ (800035c <main+0xc8>)
 800033e:	4809      	ldr	r0, [pc, #36]	@ (8000364 <main+0xd0>)
 8000340:	f008 fcfa 	bl	8008d38 <USBD_HID_SendReport>
  		USBD_CDC_TransmitPacket(&hUsbDeviceFS, CDC_InstID);
 8000344:	4b0b      	ldr	r3, [pc, #44]	@ (8000374 <main+0xe0>)
 8000346:	781b      	ldrb	r3, [r3, #0]
 8000348:	4619      	mov	r1, r3
 800034a:	4806      	ldr	r0, [pc, #24]	@ (8000364 <main+0xd0>)
 800034c:	f007 fbc2 	bl	8007ad4 <USBD_CDC_TransmitPacket>
  		HAL_Delay(1000);
 8000350:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000354:	f000 fc5c 	bl	8000c10 <HAL_Delay>
  		USBD_HID_SendReport(&hUsbDeviceFS, hid_report_buffer, 4, HID_InstID);
 8000358:	bf00      	nop
 800035a:	e7ec      	b.n	8000336 <main+0xa2>
 800035c:	200008cc 	.word	0x200008cc
 8000360:	20000180 	.word	0x20000180
 8000364:	2000058c 	.word	0x2000058c
 8000368:	200008d0 	.word	0x200008d0
 800036c:	20000003 	.word	0x20000003
 8000370:	200000f0 	.word	0x200000f0
 8000374:	200008d1 	.word	0x200008d1
 8000378:	20000000 	.word	0x20000000
 800037c:	20000010 	.word	0x20000010
 8000380:	2000004c 	.word	0x2000004c

08000384 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b09c      	sub	sp, #112	@ 0x70
 8000388:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800038a:	f107 0320 	add.w	r3, r7, #32
 800038e:	2250      	movs	r2, #80	@ 0x50
 8000390:	2100      	movs	r1, #0
 8000392:	4618      	mov	r0, r3
 8000394:	f00a fd37 	bl	800ae06 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000398:	f107 0308 	add.w	r3, r7, #8
 800039c:	2200      	movs	r2, #0
 800039e:	601a      	str	r2, [r3, #0]
 80003a0:	605a      	str	r2, [r3, #4]
 80003a2:	609a      	str	r2, [r3, #8]
 80003a4:	60da      	str	r2, [r3, #12]
 80003a6:	611a      	str	r2, [r3, #16]
 80003a8:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80003aa:	4b2f      	ldr	r3, [pc, #188]	@ (8000468 <SystemClock_Config+0xe4>)
 80003ac:	691b      	ldr	r3, [r3, #16]
 80003ae:	4a2e      	ldr	r2, [pc, #184]	@ (8000468 <SystemClock_Config+0xe4>)
 80003b0:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80003b4:	6113      	str	r3, [r2, #16]
 80003b6:	4b2c      	ldr	r3, [pc, #176]	@ (8000468 <SystemClock_Config+0xe4>)
 80003b8:	691b      	ldr	r3, [r3, #16]
 80003ba:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80003be:	607b      	str	r3, [r7, #4]
 80003c0:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80003c2:	bf00      	nop
 80003c4:	4b28      	ldr	r3, [pc, #160]	@ (8000468 <SystemClock_Config+0xe4>)
 80003c6:	695b      	ldr	r3, [r3, #20]
 80003c8:	f003 0308 	and.w	r3, r3, #8
 80003cc:	2b08      	cmp	r3, #8
 80003ce:	d1f9      	bne.n	80003c4 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_CSI;
 80003d0:	2330      	movs	r3, #48	@ 0x30
 80003d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80003d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80003d8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 80003da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80003de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 80003e0:	2320      	movs	r3, #32
 80003e2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003e4:	2302      	movs	r3, #2
 80003e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_CSI;
 80003e8:	2302      	movs	r3, #2
 80003ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80003ec:	2301      	movs	r3, #1
 80003ee:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 125;
 80003f0:	237d      	movs	r3, #125	@ 0x7d
 80003f2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80003f4:	2302      	movs	r3, #2
 80003f6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80003f8:	2302      	movs	r3, #2
 80003fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80003fc:	2302      	movs	r3, #2
 80003fe:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_2;
 8000400:	2308      	movs	r3, #8
 8000402:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8000404:	2300      	movs	r3, #0
 8000406:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000408:	2300      	movs	r3, #0
 800040a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800040c:	f107 0320 	add.w	r3, r7, #32
 8000410:	4618      	mov	r0, r3
 8000412:	f002 fdab 	bl	8002f6c <HAL_RCC_OscConfig>
 8000416:	4603      	mov	r3, r0
 8000418:	2b00      	cmp	r3, #0
 800041a:	d001      	beq.n	8000420 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800041c:	f000 f8fa 	bl	8000614 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000420:	231f      	movs	r3, #31
 8000422:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000424:	2303      	movs	r3, #3
 8000426:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000428:	2300      	movs	r3, #0
 800042a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800042c:	2300      	movs	r3, #0
 800042e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000430:	2300      	movs	r3, #0
 8000432:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000434:	2300      	movs	r3, #0
 8000436:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000438:	f107 0308 	add.w	r3, r7, #8
 800043c:	2105      	movs	r1, #5
 800043e:	4618      	mov	r0, r3
 8000440:	f003 f9cc 	bl	80037dc <HAL_RCC_ClockConfig>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d001      	beq.n	800044e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800044a:	f000 f8e3 	bl	8000614 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 800044e:	4b07      	ldr	r3, [pc, #28]	@ (800046c <SystemClock_Config+0xe8>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000456:	4a05      	ldr	r2, [pc, #20]	@ (800046c <SystemClock_Config+0xe8>)
 8000458:	f043 0320 	orr.w	r3, r3, #32
 800045c:	6013      	str	r3, [r2, #0]
}
 800045e:	bf00      	nop
 8000460:	3770      	adds	r7, #112	@ 0x70
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	44020800 	.word	0x44020800
 800046c:	40022000 	.word	0x40022000

08000470 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000474:	4b1f      	ldr	r3, [pc, #124]	@ (80004f4 <MX_FDCAN1_Init+0x84>)
 8000476:	4a20      	ldr	r2, [pc, #128]	@ (80004f8 <MX_FDCAN1_Init+0x88>)
 8000478:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800047a:	4b1e      	ldr	r3, [pc, #120]	@ (80004f4 <MX_FDCAN1_Init+0x84>)
 800047c:	2200      	movs	r2, #0
 800047e:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000480:	4b1c      	ldr	r3, [pc, #112]	@ (80004f4 <MX_FDCAN1_Init+0x84>)
 8000482:	2200      	movs	r2, #0
 8000484:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000486:	4b1b      	ldr	r3, [pc, #108]	@ (80004f4 <MX_FDCAN1_Init+0x84>)
 8000488:	2200      	movs	r2, #0
 800048a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800048c:	4b19      	ldr	r3, [pc, #100]	@ (80004f4 <MX_FDCAN1_Init+0x84>)
 800048e:	2200      	movs	r2, #0
 8000490:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000492:	4b18      	ldr	r3, [pc, #96]	@ (80004f4 <MX_FDCAN1_Init+0x84>)
 8000494:	2200      	movs	r2, #0
 8000496:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000498:	4b16      	ldr	r3, [pc, #88]	@ (80004f4 <MX_FDCAN1_Init+0x84>)
 800049a:	2200      	movs	r2, #0
 800049c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 800049e:	4b15      	ldr	r3, [pc, #84]	@ (80004f4 <MX_FDCAN1_Init+0x84>)
 80004a0:	2210      	movs	r2, #16
 80004a2:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80004a4:	4b13      	ldr	r3, [pc, #76]	@ (80004f4 <MX_FDCAN1_Init+0x84>)
 80004a6:	2201      	movs	r2, #1
 80004a8:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 1;
 80004aa:	4b12      	ldr	r3, [pc, #72]	@ (80004f4 <MX_FDCAN1_Init+0x84>)
 80004ac:	2201      	movs	r2, #1
 80004ae:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 1;
 80004b0:	4b10      	ldr	r3, [pc, #64]	@ (80004f4 <MX_FDCAN1_Init+0x84>)
 80004b2:	2201      	movs	r2, #1
 80004b4:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80004b6:	4b0f      	ldr	r3, [pc, #60]	@ (80004f4 <MX_FDCAN1_Init+0x84>)
 80004b8:	2201      	movs	r2, #1
 80004ba:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80004bc:	4b0d      	ldr	r3, [pc, #52]	@ (80004f4 <MX_FDCAN1_Init+0x84>)
 80004be:	2201      	movs	r2, #1
 80004c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80004c2:	4b0c      	ldr	r3, [pc, #48]	@ (80004f4 <MX_FDCAN1_Init+0x84>)
 80004c4:	2201      	movs	r2, #1
 80004c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80004c8:	4b0a      	ldr	r3, [pc, #40]	@ (80004f4 <MX_FDCAN1_Init+0x84>)
 80004ca:	2201      	movs	r2, #1
 80004cc:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80004ce:	4b09      	ldr	r3, [pc, #36]	@ (80004f4 <MX_FDCAN1_Init+0x84>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80004d4:	4b07      	ldr	r3, [pc, #28]	@ (80004f4 <MX_FDCAN1_Init+0x84>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80004da:	4b06      	ldr	r3, [pc, #24]	@ (80004f4 <MX_FDCAN1_Init+0x84>)
 80004dc:	2200      	movs	r2, #0
 80004de:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80004e0:	4804      	ldr	r0, [pc, #16]	@ (80004f4 <MX_FDCAN1_Init+0x84>)
 80004e2:	f000 fd49 	bl	8000f78 <HAL_FDCAN_Init>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d001      	beq.n	80004f0 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80004ec:	f000 f892 	bl	8000614 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80004f0:	bf00      	nop
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	20000248 	.word	0x20000248
 80004f8:	4000a400 	.word	0x4000a400

080004fc <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
void MX_USB_PCD_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 8000500:	4b15      	ldr	r3, [pc, #84]	@ (8000558 <MX_USB_PCD_Init+0x5c>)
 8000502:	4a16      	ldr	r2, [pc, #88]	@ (800055c <MX_USB_PCD_Init+0x60>)
 8000504:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 8000506:	4b14      	ldr	r3, [pc, #80]	@ (8000558 <MX_USB_PCD_Init+0x5c>)
 8000508:	2208      	movs	r2, #8
 800050a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 800050c:	4b12      	ldr	r3, [pc, #72]	@ (8000558 <MX_USB_PCD_Init+0x5c>)
 800050e:	2202      	movs	r2, #2
 8000510:	71da      	strb	r2, [r3, #7]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000512:	4b11      	ldr	r3, [pc, #68]	@ (8000558 <MX_USB_PCD_Init+0x5c>)
 8000514:	2202      	movs	r2, #2
 8000516:	725a      	strb	r2, [r3, #9]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 8000518:	4b0f      	ldr	r3, [pc, #60]	@ (8000558 <MX_USB_PCD_Init+0x5c>)
 800051a:	2200      	movs	r2, #0
 800051c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 800051e:	4b0e      	ldr	r3, [pc, #56]	@ (8000558 <MX_USB_PCD_Init+0x5c>)
 8000520:	2200      	movs	r2, #0
 8000522:	72da      	strb	r2, [r3, #11]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 8000524:	4b0c      	ldr	r3, [pc, #48]	@ (8000558 <MX_USB_PCD_Init+0x5c>)
 8000526:	2200      	movs	r2, #0
 8000528:	731a      	strb	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 800052a:	4b0b      	ldr	r3, [pc, #44]	@ (8000558 <MX_USB_PCD_Init+0x5c>)
 800052c:	2200      	movs	r2, #0
 800052e:	735a      	strb	r2, [r3, #13]
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 8000530:	4b09      	ldr	r3, [pc, #36]	@ (8000558 <MX_USB_PCD_Init+0x5c>)
 8000532:	2200      	movs	r2, #0
 8000534:	739a      	strb	r2, [r3, #14]
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 8000536:	4b08      	ldr	r3, [pc, #32]	@ (8000558 <MX_USB_PCD_Init+0x5c>)
 8000538:	2200      	movs	r2, #0
 800053a:	73da      	strb	r2, [r3, #15]
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 800053c:	4b06      	ldr	r3, [pc, #24]	@ (8000558 <MX_USB_PCD_Init+0x5c>)
 800053e:	2200      	movs	r2, #0
 8000540:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 8000542:	4805      	ldr	r0, [pc, #20]	@ (8000558 <MX_USB_PCD_Init+0x5c>)
 8000544:	f001 f8a1 	bl	800168a <HAL_PCD_Init>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <MX_USB_PCD_Init+0x56>
  {
    Error_Handler();
 800054e:	f000 f861 	bl	8000614 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000552:	bf00      	nop
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	200002ac 	.word	0x200002ac
 800055c:	40016000 	.word	0x40016000

08000560 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b088      	sub	sp, #32
 8000564:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000566:	f107 030c 	add.w	r3, r7, #12
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	609a      	str	r2, [r3, #8]
 8000572:	60da      	str	r2, [r3, #12]
 8000574:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000576:	4b24      	ldr	r3, [pc, #144]	@ (8000608 <MX_GPIO_Init+0xa8>)
 8000578:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800057c:	4a22      	ldr	r2, [pc, #136]	@ (8000608 <MX_GPIO_Init+0xa8>)
 800057e:	f043 0301 	orr.w	r3, r3, #1
 8000582:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000586:	4b20      	ldr	r3, [pc, #128]	@ (8000608 <MX_GPIO_Init+0xa8>)
 8000588:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800058c:	f003 0301 	and.w	r3, r3, #1
 8000590:	60bb      	str	r3, [r7, #8]
 8000592:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000594:	4b1c      	ldr	r3, [pc, #112]	@ (8000608 <MX_GPIO_Init+0xa8>)
 8000596:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800059a:	4a1b      	ldr	r2, [pc, #108]	@ (8000608 <MX_GPIO_Init+0xa8>)
 800059c:	f043 0302 	orr.w	r3, r3, #2
 80005a0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80005a4:	4b18      	ldr	r3, [pc, #96]	@ (8000608 <MX_GPIO_Init+0xa8>)
 80005a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80005aa:	f003 0302 	and.w	r3, r3, #2
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80005b2:	2200      	movs	r2, #0
 80005b4:	21ff      	movs	r1, #255	@ 0xff
 80005b6:	4815      	ldr	r0, [pc, #84]	@ (800060c <MX_GPIO_Init+0xac>)
 80005b8:	f000 ffec 	bl	8001594 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80005bc:	2200      	movs	r2, #0
 80005be:	210f      	movs	r1, #15
 80005c0:	4813      	ldr	r0, [pc, #76]	@ (8000610 <MX_GPIO_Init+0xb0>)
 80005c2:	f000 ffe7 	bl	8001594 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80005c6:	23ff      	movs	r3, #255	@ 0xff
 80005c8:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ca:	2301      	movs	r3, #1
 80005cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ce:	2300      	movs	r3, #0
 80005d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d2:	2300      	movs	r3, #0
 80005d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d6:	f107 030c 	add.w	r3, r7, #12
 80005da:	4619      	mov	r1, r3
 80005dc:	480b      	ldr	r0, [pc, #44]	@ (800060c <MX_GPIO_Init+0xac>)
 80005de:	f000 fe87 	bl	80012f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80005e2:	230f      	movs	r3, #15
 80005e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e6:	2301      	movs	r3, #1
 80005e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ea:	2300      	movs	r3, #0
 80005ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ee:	2300      	movs	r3, #0
 80005f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005f2:	f107 030c 	add.w	r3, r7, #12
 80005f6:	4619      	mov	r1, r3
 80005f8:	4805      	ldr	r0, [pc, #20]	@ (8000610 <MX_GPIO_Init+0xb0>)
 80005fa:	f000 fe79 	bl	80012f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005fe:	bf00      	nop
 8000600:	3720      	adds	r7, #32
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	44020c00 	.word	0x44020c00
 800060c:	42020000 	.word	0x42020000
 8000610:	42020400 	.word	0x42020400

08000614 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000618:	b672      	cpsid	i
}
 800061a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800061c:	bf00      	nop
 800061e:	e7fd      	b.n	800061c <Error_Handler+0x8>

08000620 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000624:	bf00      	nop
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr
	...

08000630 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b0be      	sub	sp, #248	@ 0xf8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000638:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000648:	f107 0310 	add.w	r3, r7, #16
 800064c:	22d0      	movs	r2, #208	@ 0xd0
 800064e:	2100      	movs	r1, #0
 8000650:	4618      	mov	r0, r3
 8000652:	f00a fbd8 	bl	800ae06 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4a27      	ldr	r2, [pc, #156]	@ (80006f8 <HAL_FDCAN_MspInit+0xc8>)
 800065c:	4293      	cmp	r3, r2
 800065e:	d147      	bne.n	80006f0 <HAL_FDCAN_MspInit+0xc0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000660:	f04f 0200 	mov.w	r2, #0
 8000664:	f04f 0304 	mov.w	r3, #4
 8000668:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL1Q;
 800066c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000670:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000674:	f107 0310 	add.w	r3, r7, #16
 8000678:	4618      	mov	r0, r3
 800067a:	f003 fbaf 	bl	8003ddc <HAL_RCCEx_PeriphCLKConfig>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8000684:	f7ff ffc6 	bl	8000614 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000688:	4b1c      	ldr	r3, [pc, #112]	@ (80006fc <HAL_FDCAN_MspInit+0xcc>)
 800068a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800068e:	4a1b      	ldr	r2, [pc, #108]	@ (80006fc <HAL_FDCAN_MspInit+0xcc>)
 8000690:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000694:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 8000698:	4b18      	ldr	r3, [pc, #96]	@ (80006fc <HAL_FDCAN_MspInit+0xcc>)
 800069a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800069e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a6:	4b15      	ldr	r3, [pc, #84]	@ (80006fc <HAL_FDCAN_MspInit+0xcc>)
 80006a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006ac:	4a13      	ldr	r2, [pc, #76]	@ (80006fc <HAL_FDCAN_MspInit+0xcc>)
 80006ae:	f043 0302 	orr.w	r3, r3, #2
 80006b2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80006b6:	4b11      	ldr	r3, [pc, #68]	@ (80006fc <HAL_FDCAN_MspInit+0xcc>)
 80006b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006bc:	f003 0302 	and.w	r3, r3, #2
 80006c0:	60bb      	str	r3, [r7, #8]
 80006c2:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB7     ------> FDCAN1_TX
    PB8     ------> FDCAN1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80006c4:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80006c8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006cc:	2302      	movs	r3, #2
 80006ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d2:	2300      	movs	r3, #0
 80006d4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d8:	2300      	movs	r3, #0
 80006da:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80006de:	2309      	movs	r3, #9
 80006e0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80006e8:	4619      	mov	r1, r3
 80006ea:	4805      	ldr	r0, [pc, #20]	@ (8000700 <HAL_FDCAN_MspInit+0xd0>)
 80006ec:	f000 fe00 	bl	80012f0 <HAL_GPIO_Init>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 80006f0:	bf00      	nop
 80006f2:	37f8      	adds	r7, #248	@ 0xf8
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	4000a400 	.word	0x4000a400
 80006fc:	44020c00 	.word	0x44020c00
 8000700:	42020400 	.word	0x42020400

08000704 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b0b8      	sub	sp, #224	@ 0xe0
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800070c:	f107 0310 	add.w	r3, r7, #16
 8000710:	22d0      	movs	r2, #208	@ 0xd0
 8000712:	2100      	movs	r1, #0
 8000714:	4618      	mov	r0, r3
 8000716:	f00a fb76 	bl	800ae06 <memset>
  if(hpcd->Instance==USB_DRD_FS)
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	4a19      	ldr	r2, [pc, #100]	@ (8000784 <HAL_PCD_MspInit+0x80>)
 8000720:	4293      	cmp	r3, r2
 8000722:	d12b      	bne.n	800077c <HAL_PCD_MspInit+0x78>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000724:	f04f 0200 	mov.w	r2, #0
 8000728:	f04f 0310 	mov.w	r3, #16
 800072c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000730:	2330      	movs	r3, #48	@ 0x30
 8000732:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000736:	f107 0310 	add.w	r3, r7, #16
 800073a:	4618      	mov	r0, r3
 800073c:	f003 fb4e 	bl	8003ddc <HAL_RCCEx_PeriphCLKConfig>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <HAL_PCD_MspInit+0x46>
    {
      Error_Handler();
 8000746:	f7ff ff65 	bl	8000614 <Error_Handler>
    }

  /* Enable VDDUSB */
  HAL_PWREx_EnableVddUSB();
 800074a:	f002 fbff 	bl	8002f4c <HAL_PWREx_EnableVddUSB>
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800074e:	4b0e      	ldr	r3, [pc, #56]	@ (8000788 <HAL_PCD_MspInit+0x84>)
 8000750:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000754:	4a0c      	ldr	r2, [pc, #48]	@ (8000788 <HAL_PCD_MspInit+0x84>)
 8000756:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800075a:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800075e:	4b0a      	ldr	r3, [pc, #40]	@ (8000788 <HAL_PCD_MspInit+0x84>)
 8000760:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000764:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000768:	60fb      	str	r3, [r7, #12]
 800076a:	68fb      	ldr	r3, [r7, #12]
    /* USB_DRD_FS interrupt Init */
    HAL_NVIC_SetPriority(USB_DRD_FS_IRQn, 0, 0);
 800076c:	2200      	movs	r2, #0
 800076e:	2100      	movs	r1, #0
 8000770:	204a      	movs	r0, #74	@ 0x4a
 8000772:	f000 fb29 	bl	8000dc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_DRD_FS_IRQn);
 8000776:	204a      	movs	r0, #74	@ 0x4a
 8000778:	f000 fb40 	bl	8000dfc <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_DRD_FS_MspInit 1 */

  }

}
 800077c:	bf00      	nop
 800077e:	37e0      	adds	r7, #224	@ 0xe0
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	40016000 	.word	0x40016000
 8000788:	44020c00 	.word	0x44020c00

0800078c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000790:	bf00      	nop
 8000792:	e7fd      	b.n	8000790 <NMI_Handler+0x4>

08000794 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000798:	bf00      	nop
 800079a:	e7fd      	b.n	8000798 <HardFault_Handler+0x4>

0800079c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007a0:	bf00      	nop
 80007a2:	e7fd      	b.n	80007a0 <MemManage_Handler+0x4>

080007a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007a8:	bf00      	nop
 80007aa:	e7fd      	b.n	80007a8 <BusFault_Handler+0x4>

080007ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007b0:	bf00      	nop
 80007b2:	e7fd      	b.n	80007b0 <UsageFault_Handler+0x4>

080007b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007b8:	bf00      	nop
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr

080007c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007c2:	b480      	push	{r7}
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007c6:	bf00      	nop
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr

080007d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007d4:	bf00      	nop
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr

080007de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007de:	b580      	push	{r7, lr}
 80007e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007e2:	f000 f9f5 	bl	8000bd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
	...

080007ec <USB_DRD_FS_IRQHandler>:

/**
  * @brief This function handles USB FS global interrupt.
  */
void USB_DRD_FS_IRQHandler(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DRD_FS_IRQn 0 */

  /* USER CODE END USB_DRD_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_DRD_FS);
 80007f0:	4802      	ldr	r0, [pc, #8]	@ (80007fc <USB_DRD_FS_IRQHandler+0x10>)
 80007f2:	f001 f83d 	bl	8001870 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_DRD_FS_IRQn 1 */

  /* USER CODE END USB_DRD_FS_IRQn 1 */
}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	200002ac 	.word	0x200002ac

08000800 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b086      	sub	sp, #24
 8000804:	af00      	add	r7, sp, #0
 8000806:	60f8      	str	r0, [r7, #12]
 8000808:	60b9      	str	r1, [r7, #8]
 800080a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800080c:	2300      	movs	r3, #0
 800080e:	617b      	str	r3, [r7, #20]
 8000810:	e00a      	b.n	8000828 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000812:	f3af 8000 	nop.w
 8000816:	4601      	mov	r1, r0
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	1c5a      	adds	r2, r3, #1
 800081c:	60ba      	str	r2, [r7, #8]
 800081e:	b2ca      	uxtb	r2, r1
 8000820:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000822:	697b      	ldr	r3, [r7, #20]
 8000824:	3301      	adds	r3, #1
 8000826:	617b      	str	r3, [r7, #20]
 8000828:	697a      	ldr	r2, [r7, #20]
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	429a      	cmp	r2, r3
 800082e:	dbf0      	blt.n	8000812 <_read+0x12>
  }

  return len;
 8000830:	687b      	ldr	r3, [r7, #4]
}
 8000832:	4618      	mov	r0, r3
 8000834:	3718      	adds	r7, #24
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}

0800083a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800083a:	b580      	push	{r7, lr}
 800083c:	b086      	sub	sp, #24
 800083e:	af00      	add	r7, sp, #0
 8000840:	60f8      	str	r0, [r7, #12]
 8000842:	60b9      	str	r1, [r7, #8]
 8000844:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000846:	2300      	movs	r3, #0
 8000848:	617b      	str	r3, [r7, #20]
 800084a:	e009      	b.n	8000860 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	1c5a      	adds	r2, r3, #1
 8000850:	60ba      	str	r2, [r7, #8]
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	4618      	mov	r0, r3
 8000856:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800085a:	697b      	ldr	r3, [r7, #20]
 800085c:	3301      	adds	r3, #1
 800085e:	617b      	str	r3, [r7, #20]
 8000860:	697a      	ldr	r2, [r7, #20]
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	429a      	cmp	r2, r3
 8000866:	dbf1      	blt.n	800084c <_write+0x12>
  }
  return len;
 8000868:	687b      	ldr	r3, [r7, #4]
}
 800086a:	4618      	mov	r0, r3
 800086c:	3718      	adds	r7, #24
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}

08000872 <_close>:

int _close(int file)
{
 8000872:	b480      	push	{r7}
 8000874:	b083      	sub	sp, #12
 8000876:	af00      	add	r7, sp, #0
 8000878:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800087a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800087e:	4618      	mov	r0, r3
 8000880:	370c      	adds	r7, #12
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr

0800088a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800088a:	b480      	push	{r7}
 800088c:	b083      	sub	sp, #12
 800088e:	af00      	add	r7, sp, #0
 8000890:	6078      	str	r0, [r7, #4]
 8000892:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800089a:	605a      	str	r2, [r3, #4]
  return 0;
 800089c:	2300      	movs	r3, #0
}
 800089e:	4618      	mov	r0, r3
 80008a0:	370c      	adds	r7, #12
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr

080008aa <_isatty>:

int _isatty(int file)
{
 80008aa:	b480      	push	{r7}
 80008ac:	b083      	sub	sp, #12
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80008b2:	2301      	movs	r3, #1
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	370c      	adds	r7, #12
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr

080008c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b085      	sub	sp, #20
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	60f8      	str	r0, [r7, #12]
 80008c8:	60b9      	str	r1, [r7, #8]
 80008ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80008cc:	2300      	movs	r3, #0
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	3714      	adds	r7, #20
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
	...

080008dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b086      	sub	sp, #24
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008e4:	4a14      	ldr	r2, [pc, #80]	@ (8000938 <_sbrk+0x5c>)
 80008e6:	4b15      	ldr	r3, [pc, #84]	@ (800093c <_sbrk+0x60>)
 80008e8:	1ad3      	subs	r3, r2, r3
 80008ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008f0:	4b13      	ldr	r3, [pc, #76]	@ (8000940 <_sbrk+0x64>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d102      	bne.n	80008fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008f8:	4b11      	ldr	r3, [pc, #68]	@ (8000940 <_sbrk+0x64>)
 80008fa:	4a12      	ldr	r2, [pc, #72]	@ (8000944 <_sbrk+0x68>)
 80008fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008fe:	4b10      	ldr	r3, [pc, #64]	@ (8000940 <_sbrk+0x64>)
 8000900:	681a      	ldr	r2, [r3, #0]
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	4413      	add	r3, r2
 8000906:	693a      	ldr	r2, [r7, #16]
 8000908:	429a      	cmp	r2, r3
 800090a:	d207      	bcs.n	800091c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800090c:	f00a faca 	bl	800aea4 <__errno>
 8000910:	4603      	mov	r3, r0
 8000912:	220c      	movs	r2, #12
 8000914:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000916:	f04f 33ff 	mov.w	r3, #4294967295
 800091a:	e009      	b.n	8000930 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800091c:	4b08      	ldr	r3, [pc, #32]	@ (8000940 <_sbrk+0x64>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000922:	4b07      	ldr	r3, [pc, #28]	@ (8000940 <_sbrk+0x64>)
 8000924:	681a      	ldr	r2, [r3, #0]
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	4413      	add	r3, r2
 800092a:	4a05      	ldr	r2, [pc, #20]	@ (8000940 <_sbrk+0x64>)
 800092c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800092e:	68fb      	ldr	r3, [r7, #12]
}
 8000930:	4618      	mov	r0, r3
 8000932:	3718      	adds	r7, #24
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	20044000 	.word	0x20044000
 800093c:	00000700 	.word	0x00000700
 8000940:	200008d4 	.word	0x200008d4
 8000944:	20000cd8 	.word	0x20000cd8

08000948 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800094e:	4b35      	ldr	r3, [pc, #212]	@ (8000a24 <SystemInit+0xdc>)
 8000950:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000954:	4a33      	ldr	r2, [pc, #204]	@ (8000a24 <SystemInit+0xdc>)
 8000956:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800095a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 800095e:	4b32      	ldr	r3, [pc, #200]	@ (8000a28 <SystemInit+0xe0>)
 8000960:	2201      	movs	r2, #1
 8000962:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000964:	4b30      	ldr	r3, [pc, #192]	@ (8000a28 <SystemInit+0xe0>)
 8000966:	2200      	movs	r2, #0
 8000968:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 800096a:	4b2f      	ldr	r3, [pc, #188]	@ (8000a28 <SystemInit+0xe0>)
 800096c:	2200      	movs	r2, #0
 800096e:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8000970:	4b2d      	ldr	r3, [pc, #180]	@ (8000a28 <SystemInit+0xe0>)
 8000972:	681a      	ldr	r2, [r3, #0]
 8000974:	492c      	ldr	r1, [pc, #176]	@ (8000a28 <SystemInit+0xe0>)
 8000976:	4b2d      	ldr	r3, [pc, #180]	@ (8000a2c <SystemInit+0xe4>)
 8000978:	4013      	ands	r3, r2
 800097a:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 800097c:	4b2a      	ldr	r3, [pc, #168]	@ (8000a28 <SystemInit+0xe0>)
 800097e:	2200      	movs	r2, #0
 8000980:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8000982:	4b29      	ldr	r3, [pc, #164]	@ (8000a28 <SystemInit+0xe0>)
 8000984:	2200      	movs	r2, #0
 8000986:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8000988:	4b27      	ldr	r3, [pc, #156]	@ (8000a28 <SystemInit+0xe0>)
 800098a:	2200      	movs	r2, #0
 800098c:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 800098e:	4b26      	ldr	r3, [pc, #152]	@ (8000a28 <SystemInit+0xe0>)
 8000990:	4a27      	ldr	r2, [pc, #156]	@ (8000a30 <SystemInit+0xe8>)
 8000992:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8000994:	4b24      	ldr	r3, [pc, #144]	@ (8000a28 <SystemInit+0xe0>)
 8000996:	2200      	movs	r2, #0
 8000998:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 800099a:	4b23      	ldr	r3, [pc, #140]	@ (8000a28 <SystemInit+0xe0>)
 800099c:	4a24      	ldr	r2, [pc, #144]	@ (8000a30 <SystemInit+0xe8>)
 800099e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 80009a0:	4b21      	ldr	r3, [pc, #132]	@ (8000a28 <SystemInit+0xe0>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 80009a6:	4b20      	ldr	r3, [pc, #128]	@ (8000a28 <SystemInit+0xe0>)
 80009a8:	4a21      	ldr	r2, [pc, #132]	@ (8000a30 <SystemInit+0xe8>)
 80009aa:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 80009ac:	4b1e      	ldr	r3, [pc, #120]	@ (8000a28 <SystemInit+0xe0>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80009b2:	4b1d      	ldr	r3, [pc, #116]	@ (8000a28 <SystemInit+0xe0>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4a1c      	ldr	r2, [pc, #112]	@ (8000a28 <SystemInit+0xe0>)
 80009b8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80009bc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80009be:	4b1a      	ldr	r3, [pc, #104]	@ (8000a28 <SystemInit+0xe0>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009c4:	4b17      	ldr	r3, [pc, #92]	@ (8000a24 <SystemInit+0xdc>)
 80009c6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80009ca:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 80009cc:	4b19      	ldr	r3, [pc, #100]	@ (8000a34 <SystemInit+0xec>)
 80009ce:	699b      	ldr	r3, [r3, #24]
 80009d0:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 80009d4:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 80009dc:	d003      	beq.n	80009e6 <SystemInit+0x9e>
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80009e4:	d117      	bne.n	8000a16 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 80009e6:	4b13      	ldr	r3, [pc, #76]	@ (8000a34 <SystemInit+0xec>)
 80009e8:	69db      	ldr	r3, [r3, #28]
 80009ea:	f003 0301 	and.w	r3, r3, #1
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d005      	beq.n	80009fe <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 80009f2:	4b10      	ldr	r3, [pc, #64]	@ (8000a34 <SystemInit+0xec>)
 80009f4:	4a10      	ldr	r2, [pc, #64]	@ (8000a38 <SystemInit+0xf0>)
 80009f6:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 80009f8:	4b0e      	ldr	r3, [pc, #56]	@ (8000a34 <SystemInit+0xec>)
 80009fa:	4a10      	ldr	r2, [pc, #64]	@ (8000a3c <SystemInit+0xf4>)
 80009fc:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 80009fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000a34 <SystemInit+0xec>)
 8000a00:	69db      	ldr	r3, [r3, #28]
 8000a02:	4a0c      	ldr	r2, [pc, #48]	@ (8000a34 <SystemInit+0xec>)
 8000a04:	f043 0302 	orr.w	r3, r3, #2
 8000a08:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8000a0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a34 <SystemInit+0xec>)
 8000a0c:	69db      	ldr	r3, [r3, #28]
 8000a0e:	4a09      	ldr	r2, [pc, #36]	@ (8000a34 <SystemInit+0xec>)
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	61d3      	str	r3, [r2, #28]
  }
}
 8000a16:	bf00      	nop
 8000a18:	370c      	adds	r7, #12
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	e000ed00 	.word	0xe000ed00
 8000a28:	44020c00 	.word	0x44020c00
 8000a2c:	eae2eae3 	.word	0xeae2eae3
 8000a30:	01010280 	.word	0x01010280
 8000a34:	40022000 	.word	0x40022000
 8000a38:	08192a3b 	.word	0x08192a3b
 8000a3c:	4c5d6e7f 	.word	0x4c5d6e7f

08000a40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a40:	480d      	ldr	r0, [pc, #52]	@ (8000a78 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a42:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a44:	f7ff ff80 	bl	8000948 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a48:	480c      	ldr	r0, [pc, #48]	@ (8000a7c <LoopForever+0x6>)
  ldr r1, =_edata
 8000a4a:	490d      	ldr	r1, [pc, #52]	@ (8000a80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000a84 <LoopForever+0xe>)
  movs r3, #0
 8000a4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a50:	e002      	b.n	8000a58 <LoopCopyDataInit>

08000a52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a56:	3304      	adds	r3, #4

08000a58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a5c:	d3f9      	bcc.n	8000a52 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a60:	4c0a      	ldr	r4, [pc, #40]	@ (8000a8c <LoopForever+0x16>)
  movs r3, #0
 8000a62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a64:	e001      	b.n	8000a6a <LoopFillZerobss>

08000a66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a68:	3204      	adds	r2, #4

08000a6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a6c:	d3fb      	bcc.n	8000a66 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a6e:	f00a fa1f 	bl	800aeb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a72:	f7ff fc0f 	bl	8000294 <main>

08000a76 <LoopForever>:

LoopForever:
    b LoopForever
 8000a76:	e7fe      	b.n	8000a76 <LoopForever>
  ldr   r0, =_estack
 8000a78:	20044000 	.word	0x20044000
  ldr r0, =_sdata
 8000a7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a80:	2000022c 	.word	0x2000022c
  ldr r2, =_sidata
 8000a84:	0800bc3c 	.word	0x0800bc3c
  ldr r2, =_sbss
 8000a88:	2000022c 	.word	0x2000022c
  ldr r4, =_ebss
 8000a8c:	20000cd8 	.word	0x20000cd8

08000a90 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a90:	e7fe      	b.n	8000a90 <ADC1_IRQHandler>
	...

08000a94 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a98:	2003      	movs	r0, #3
 8000a9a:	f000 f98a 	bl	8000db2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000a9e:	f003 f855 	bl	8003b4c <HAL_RCC_GetSysClockFreq>
 8000aa2:	4602      	mov	r2, r0
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad8 <HAL_Init+0x44>)
 8000aa6:	6a1b      	ldr	r3, [r3, #32]
 8000aa8:	f003 030f 	and.w	r3, r3, #15
 8000aac:	490b      	ldr	r1, [pc, #44]	@ (8000adc <HAL_Init+0x48>)
 8000aae:	5ccb      	ldrb	r3, [r1, r3]
 8000ab0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ab4:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae0 <HAL_Init+0x4c>)
 8000ab6:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000ab8:	2004      	movs	r0, #4
 8000aba:	f000 f9cf 	bl	8000e5c <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000abe:	200f      	movs	r0, #15
 8000ac0:	f000 f810 	bl	8000ae4 <HAL_InitTick>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8000aca:	2301      	movs	r3, #1
 8000acc:	e002      	b.n	8000ad4 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000ace:	f7ff fda7 	bl	8000620 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ad2:	2300      	movs	r3, #0
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	44020c00 	.word	0x44020c00
 8000adc:	0800bbf0 	.word	0x0800bbf0
 8000ae0:	20000004 	.word	0x20000004

08000ae4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8000aec:	2300      	movs	r3, #0
 8000aee:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000af0:	4b33      	ldr	r3, [pc, #204]	@ (8000bc0 <HAL_InitTick+0xdc>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d101      	bne.n	8000afc <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8000af8:	2301      	movs	r3, #1
 8000afa:	e05c      	b.n	8000bb6 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8000afc:	4b31      	ldr	r3, [pc, #196]	@ (8000bc4 <HAL_InitTick+0xe0>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f003 0304 	and.w	r3, r3, #4
 8000b04:	2b04      	cmp	r3, #4
 8000b06:	d10c      	bne.n	8000b22 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8000b08:	4b2f      	ldr	r3, [pc, #188]	@ (8000bc8 <HAL_InitTick+0xe4>)
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	4b2c      	ldr	r3, [pc, #176]	@ (8000bc0 <HAL_InitTick+0xdc>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	4619      	mov	r1, r3
 8000b12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	e037      	b.n	8000b92 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8000b22:	f000 f9f3 	bl	8000f0c <HAL_SYSTICK_GetCLKSourceConfig>
 8000b26:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	2b02      	cmp	r3, #2
 8000b2c:	d023      	beq.n	8000b76 <HAL_InitTick+0x92>
 8000b2e:	68bb      	ldr	r3, [r7, #8]
 8000b30:	2b02      	cmp	r3, #2
 8000b32:	d82d      	bhi.n	8000b90 <HAL_InitTick+0xac>
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d003      	beq.n	8000b42 <HAL_InitTick+0x5e>
 8000b3a:	68bb      	ldr	r3, [r7, #8]
 8000b3c:	2b01      	cmp	r3, #1
 8000b3e:	d00d      	beq.n	8000b5c <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8000b40:	e026      	b.n	8000b90 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8000b42:	4b21      	ldr	r3, [pc, #132]	@ (8000bc8 <HAL_InitTick+0xe4>)
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	4b1e      	ldr	r3, [pc, #120]	@ (8000bc0 <HAL_InitTick+0xdc>)
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8000b50:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b58:	60fb      	str	r3, [r7, #12]
        break;
 8000b5a:	e01a      	b.n	8000b92 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000b5c:	4b18      	ldr	r3, [pc, #96]	@ (8000bc0 <HAL_InitTick+0xdc>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	461a      	mov	r2, r3
 8000b62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b66:	fbb3 f3f2 	udiv	r3, r3, r2
 8000b6a:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b72:	60fb      	str	r3, [r7, #12]
        break;
 8000b74:	e00d      	b.n	8000b92 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000b76:	4b12      	ldr	r3, [pc, #72]	@ (8000bc0 <HAL_InitTick+0xdc>)
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b80:	fbb3 f3f2 	udiv	r3, r3, r2
 8000b84:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b8c:	60fb      	str	r3, [r7, #12]
        break;
 8000b8e:	e000      	b.n	8000b92 <HAL_InitTick+0xae>
        break;
 8000b90:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8000b92:	68f8      	ldr	r0, [r7, #12]
 8000b94:	f000 f940 	bl	8000e18 <HAL_SYSTICK_Config>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	e009      	b.n	8000bb6 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	6879      	ldr	r1, [r7, #4]
 8000ba6:	f04f 30ff 	mov.w	r0, #4294967295
 8000baa:	f000 f90d 	bl	8000dc8 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8000bae:	4a07      	ldr	r2, [pc, #28]	@ (8000bcc <HAL_InitTick+0xe8>)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000bb4:	2300      	movs	r3, #0
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3710      	adds	r7, #16
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	2000000c 	.word	0x2000000c
 8000bc4:	e000e010 	.word	0xe000e010
 8000bc8:	20000004 	.word	0x20000004
 8000bcc:	20000008 	.word	0x20000008

08000bd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bd4:	4b06      	ldr	r3, [pc, #24]	@ (8000bf0 <HAL_IncTick+0x20>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	461a      	mov	r2, r3
 8000bda:	4b06      	ldr	r3, [pc, #24]	@ (8000bf4 <HAL_IncTick+0x24>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4413      	add	r3, r2
 8000be0:	4a04      	ldr	r2, [pc, #16]	@ (8000bf4 <HAL_IncTick+0x24>)
 8000be2:	6013      	str	r3, [r2, #0]
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	2000000c 	.word	0x2000000c
 8000bf4:	200008d8 	.word	0x200008d8

08000bf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000bfc:	4b03      	ldr	r3, [pc, #12]	@ (8000c0c <HAL_GetTick+0x14>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	200008d8 	.word	0x200008d8

08000c10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c18:	f7ff ffee 	bl	8000bf8 <HAL_GetTick>
 8000c1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c28:	d005      	beq.n	8000c36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c2a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c54 <HAL_Delay+0x44>)
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	461a      	mov	r2, r3
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	4413      	add	r3, r2
 8000c34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c36:	bf00      	nop
 8000c38:	f7ff ffde 	bl	8000bf8 <HAL_GetTick>
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	68bb      	ldr	r3, [r7, #8]
 8000c40:	1ad3      	subs	r3, r2, r3
 8000c42:	68fa      	ldr	r2, [r7, #12]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d8f7      	bhi.n	8000c38 <HAL_Delay+0x28>
  {
  }
}
 8000c48:	bf00      	nop
 8000c4a:	bf00      	nop
 8000c4c:	3710      	adds	r7, #16
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	2000000c 	.word	0x2000000c

08000c58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	f003 0307 	and.w	r3, r3, #7
 8000c66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c68:	4b0c      	ldr	r3, [pc, #48]	@ (8000c9c <__NVIC_SetPriorityGrouping+0x44>)
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c6e:	68ba      	ldr	r2, [r7, #8]
 8000c70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c74:	4013      	ands	r3, r2
 8000c76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c8a:	4a04      	ldr	r2, [pc, #16]	@ (8000c9c <__NVIC_SetPriorityGrouping+0x44>)
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	60d3      	str	r3, [r2, #12]
}
 8000c90:	bf00      	nop
 8000c92:	3714      	adds	r7, #20
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	e000ed00 	.word	0xe000ed00

08000ca0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ca4:	4b04      	ldr	r3, [pc, #16]	@ (8000cb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	0a1b      	lsrs	r3, r3, #8
 8000caa:	f003 0307 	and.w	r3, r3, #7
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000cc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	db0b      	blt.n	8000ce6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cce:	88fb      	ldrh	r3, [r7, #6]
 8000cd0:	f003 021f 	and.w	r2, r3, #31
 8000cd4:	4907      	ldr	r1, [pc, #28]	@ (8000cf4 <__NVIC_EnableIRQ+0x38>)
 8000cd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cda:	095b      	lsrs	r3, r3, #5
 8000cdc:	2001      	movs	r0, #1
 8000cde:	fa00 f202 	lsl.w	r2, r0, r2
 8000ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ce6:	bf00      	nop
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	e000e100 	.word	0xe000e100

08000cf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	6039      	str	r1, [r7, #0]
 8000d02:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000d04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	db0a      	blt.n	8000d22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	b2da      	uxtb	r2, r3
 8000d10:	490c      	ldr	r1, [pc, #48]	@ (8000d44 <__NVIC_SetPriority+0x4c>)
 8000d12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d16:	0112      	lsls	r2, r2, #4
 8000d18:	b2d2      	uxtb	r2, r2
 8000d1a:	440b      	add	r3, r1
 8000d1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d20:	e00a      	b.n	8000d38 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	b2da      	uxtb	r2, r3
 8000d26:	4908      	ldr	r1, [pc, #32]	@ (8000d48 <__NVIC_SetPriority+0x50>)
 8000d28:	88fb      	ldrh	r3, [r7, #6]
 8000d2a:	f003 030f 	and.w	r3, r3, #15
 8000d2e:	3b04      	subs	r3, #4
 8000d30:	0112      	lsls	r2, r2, #4
 8000d32:	b2d2      	uxtb	r2, r2
 8000d34:	440b      	add	r3, r1
 8000d36:	761a      	strb	r2, [r3, #24]
}
 8000d38:	bf00      	nop
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	e000e100 	.word	0xe000e100
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b089      	sub	sp, #36	@ 0x24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	60f8      	str	r0, [r7, #12]
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	f003 0307 	and.w	r3, r3, #7
 8000d5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	f1c3 0307 	rsb	r3, r3, #7
 8000d66:	2b04      	cmp	r3, #4
 8000d68:	bf28      	it	cs
 8000d6a:	2304      	movcs	r3, #4
 8000d6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	3304      	adds	r3, #4
 8000d72:	2b06      	cmp	r3, #6
 8000d74:	d902      	bls.n	8000d7c <NVIC_EncodePriority+0x30>
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	3b03      	subs	r3, #3
 8000d7a:	e000      	b.n	8000d7e <NVIC_EncodePriority+0x32>
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d80:	f04f 32ff 	mov.w	r2, #4294967295
 8000d84:	69bb      	ldr	r3, [r7, #24]
 8000d86:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8a:	43da      	mvns	r2, r3
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	401a      	ands	r2, r3
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d94:	f04f 31ff 	mov.w	r1, #4294967295
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d9e:	43d9      	mvns	r1, r3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da4:	4313      	orrs	r3, r2
         );
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3724      	adds	r7, #36	@ 0x24
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr

08000db2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b082      	sub	sp, #8
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	f7ff ff4c 	bl	8000c58 <__NVIC_SetPriorityGrouping>
}
 8000dc0:	bf00      	nop
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b086      	sub	sp, #24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	60b9      	str	r1, [r7, #8]
 8000dd2:	607a      	str	r2, [r7, #4]
 8000dd4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000dd6:	f7ff ff63 	bl	8000ca0 <__NVIC_GetPriorityGrouping>
 8000dda:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ddc:	687a      	ldr	r2, [r7, #4]
 8000dde:	68b9      	ldr	r1, [r7, #8]
 8000de0:	6978      	ldr	r0, [r7, #20]
 8000de2:	f7ff ffb3 	bl	8000d4c <NVIC_EncodePriority>
 8000de6:	4602      	mov	r2, r0
 8000de8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000dec:	4611      	mov	r1, r2
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff ff82 	bl	8000cf8 <__NVIC_SetPriority>
}
 8000df4:	bf00      	nop
 8000df6:	3718      	adds	r7, #24
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff ff56 	bl	8000cbc <__NVIC_EnableIRQ>
}
 8000e10:	bf00      	nop
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	3b01      	subs	r3, #1
 8000e24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e28:	d301      	bcc.n	8000e2e <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e00d      	b.n	8000e4a <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8000e2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e58 <HAL_SYSTICK_Config+0x40>)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	3b01      	subs	r3, #1
 8000e34:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8000e36:	4b08      	ldr	r3, [pc, #32]	@ (8000e58 <HAL_SYSTICK_Config+0x40>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8000e3c:	4b06      	ldr	r3, [pc, #24]	@ (8000e58 <HAL_SYSTICK_Config+0x40>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a05      	ldr	r2, [pc, #20]	@ (8000e58 <HAL_SYSTICK_Config+0x40>)
 8000e42:	f043 0303 	orr.w	r3, r3, #3
 8000e46:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8000e48:	2300      	movs	r3, #0
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	e000e010 	.word	0xe000e010

08000e5c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2b04      	cmp	r3, #4
 8000e68:	d844      	bhi.n	8000ef4 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8000e6a:	a201      	add	r2, pc, #4	@ (adr r2, 8000e70 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8000e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e70:	08000e93 	.word	0x08000e93
 8000e74:	08000eb1 	.word	0x08000eb1
 8000e78:	08000ed3 	.word	0x08000ed3
 8000e7c:	08000ef5 	.word	0x08000ef5
 8000e80:	08000e85 	.word	0x08000e85
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000e84:	4b1f      	ldr	r3, [pc, #124]	@ (8000f04 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a1e      	ldr	r2, [pc, #120]	@ (8000f04 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000e8a:	f043 0304 	orr.w	r3, r3, #4
 8000e8e:	6013      	str	r3, [r2, #0]
      break;
 8000e90:	e031      	b.n	8000ef6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000e92:	4b1c      	ldr	r3, [pc, #112]	@ (8000f04 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a1b      	ldr	r2, [pc, #108]	@ (8000f04 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000e98:	f023 0304 	bic.w	r3, r3, #4
 8000e9c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8000e9e:	4b1a      	ldr	r3, [pc, #104]	@ (8000f08 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000ea0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000ea4:	4a18      	ldr	r2, [pc, #96]	@ (8000f08 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000ea6:	f023 030c 	bic.w	r3, r3, #12
 8000eaa:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8000eae:	e022      	b.n	8000ef6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000eb0:	4b14      	ldr	r3, [pc, #80]	@ (8000f04 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a13      	ldr	r2, [pc, #76]	@ (8000f04 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000eb6:	f023 0304 	bic.w	r3, r3, #4
 8000eba:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8000ebc:	4b12      	ldr	r3, [pc, #72]	@ (8000f08 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000ebe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000ec2:	f023 030c 	bic.w	r3, r3, #12
 8000ec6:	4a10      	ldr	r2, [pc, #64]	@ (8000f08 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000ec8:	f043 0304 	orr.w	r3, r3, #4
 8000ecc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8000ed0:	e011      	b.n	8000ef6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000ed2:	4b0c      	ldr	r3, [pc, #48]	@ (8000f04 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a0b      	ldr	r2, [pc, #44]	@ (8000f04 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000ed8:	f023 0304 	bic.w	r3, r3, #4
 8000edc:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8000ede:	4b0a      	ldr	r3, [pc, #40]	@ (8000f08 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000ee0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000ee4:	f023 030c 	bic.w	r3, r3, #12
 8000ee8:	4a07      	ldr	r2, [pc, #28]	@ (8000f08 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000eea:	f043 0308 	orr.w	r3, r3, #8
 8000eee:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8000ef2:	e000      	b.n	8000ef6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8000ef4:	bf00      	nop
  }
}
 8000ef6:	bf00      	nop
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	e000e010 	.word	0xe000e010
 8000f08:	44020c00 	.word	0x44020c00

08000f0c <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8000f12:	4b17      	ldr	r3, [pc, #92]	@ (8000f70 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f003 0304 	and.w	r3, r3, #4
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d002      	beq.n	8000f24 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8000f1e:	2304      	movs	r3, #4
 8000f20:	607b      	str	r3, [r7, #4]
 8000f22:	e01e      	b.n	8000f62 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8000f24:	4b13      	ldr	r3, [pc, #76]	@ (8000f74 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8000f26:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000f2a:	f003 030c 	and.w	r3, r3, #12
 8000f2e:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	2b08      	cmp	r3, #8
 8000f34:	d00f      	beq.n	8000f56 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	2b08      	cmp	r3, #8
 8000f3a:	d80f      	bhi.n	8000f5c <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d003      	beq.n	8000f4a <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	2b04      	cmp	r3, #4
 8000f46:	d003      	beq.n	8000f50 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8000f48:	e008      	b.n	8000f5c <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	607b      	str	r3, [r7, #4]
        break;
 8000f4e:	e008      	b.n	8000f62 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8000f50:	2301      	movs	r3, #1
 8000f52:	607b      	str	r3, [r7, #4]
        break;
 8000f54:	e005      	b.n	8000f62 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8000f56:	2302      	movs	r3, #2
 8000f58:	607b      	str	r3, [r7, #4]
        break;
 8000f5a:	e002      	b.n	8000f62 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	607b      	str	r3, [r7, #4]
        break;
 8000f60:	bf00      	nop
    }
  }
  return systick_source;
 8000f62:	687b      	ldr	r3, [r7, #4]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	e000e010 	.word	0xe000e010
 8000f74:	44020c00 	.word	0x44020c00

08000f78 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d101      	bne.n	8000f8a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	e147      	b.n	800121a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d106      	bne.n	8000fa4 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f7ff fb46 	bl	8000630 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	699a      	ldr	r2, [r3, #24]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f022 0210 	bic.w	r2, r2, #16
 8000fb2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000fb4:	f7ff fe20 	bl	8000bf8 <HAL_GetTick>
 8000fb8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000fba:	e012      	b.n	8000fe2 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000fbc:	f7ff fe1c 	bl	8000bf8 <HAL_GetTick>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	2b0a      	cmp	r3, #10
 8000fc8:	d90b      	bls.n	8000fe2 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fce:	f043 0201 	orr.w	r2, r3, #1
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2203      	movs	r2, #3
 8000fda:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e11b      	b.n	800121a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	699b      	ldr	r3, [r3, #24]
 8000fe8:	f003 0308 	and.w	r3, r3, #8
 8000fec:	2b08      	cmp	r3, #8
 8000fee:	d0e5      	beq.n	8000fbc <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	699a      	ldr	r2, [r3, #24]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f042 0201 	orr.w	r2, r2, #1
 8000ffe:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001000:	f7ff fdfa 	bl	8000bf8 <HAL_GetTick>
 8001004:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001006:	e012      	b.n	800102e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001008:	f7ff fdf6 	bl	8000bf8 <HAL_GetTick>
 800100c:	4602      	mov	r2, r0
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	2b0a      	cmp	r3, #10
 8001014:	d90b      	bls.n	800102e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800101a:	f043 0201 	orr.w	r2, r3, #1
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2203      	movs	r2, #3
 8001026:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	e0f5      	b.n	800121a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	699b      	ldr	r3, [r3, #24]
 8001034:	f003 0301 	and.w	r3, r3, #1
 8001038:	2b00      	cmp	r3, #0
 800103a:	d0e5      	beq.n	8001008 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	699a      	ldr	r2, [r3, #24]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f042 0202 	orr.w	r2, r2, #2
 800104a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a74      	ldr	r2, [pc, #464]	@ (8001224 <HAL_FDCAN_Init+0x2ac>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d103      	bne.n	800105e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8001056:	4a74      	ldr	r2, [pc, #464]	@ (8001228 <HAL_FDCAN_Init+0x2b0>)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	7c1b      	ldrb	r3, [r3, #16]
 8001062:	2b01      	cmp	r3, #1
 8001064:	d108      	bne.n	8001078 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	699a      	ldr	r2, [r3, #24]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001074:	619a      	str	r2, [r3, #24]
 8001076:	e007      	b.n	8001088 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	699a      	ldr	r2, [r3, #24]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001086:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	7c5b      	ldrb	r3, [r3, #17]
 800108c:	2b01      	cmp	r3, #1
 800108e:	d108      	bne.n	80010a2 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	699a      	ldr	r2, [r3, #24]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800109e:	619a      	str	r2, [r3, #24]
 80010a0:	e007      	b.n	80010b2 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	699a      	ldr	r2, [r3, #24]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80010b0:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	7c9b      	ldrb	r3, [r3, #18]
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d108      	bne.n	80010cc <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	699a      	ldr	r2, [r3, #24]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80010c8:	619a      	str	r2, [r3, #24]
 80010ca:	e007      	b.n	80010dc <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	699a      	ldr	r2, [r3, #24]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80010da:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	699b      	ldr	r3, [r3, #24]
 80010e2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	689a      	ldr	r2, [r3, #8]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	430a      	orrs	r2, r1
 80010f0:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	699a      	ldr	r2, [r3, #24]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8001100:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	691a      	ldr	r2, [r3, #16]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f022 0210 	bic.w	r2, r2, #16
 8001110:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	68db      	ldr	r3, [r3, #12]
 8001116:	2b01      	cmp	r3, #1
 8001118:	d108      	bne.n	800112c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	699a      	ldr	r2, [r3, #24]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f042 0204 	orr.w	r2, r2, #4
 8001128:	619a      	str	r2, [r3, #24]
 800112a:	e02c      	b.n	8001186 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d028      	beq.n	8001186 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	2b02      	cmp	r3, #2
 800113a:	d01c      	beq.n	8001176 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	699a      	ldr	r2, [r3, #24]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800114a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	691a      	ldr	r2, [r3, #16]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f042 0210 	orr.w	r2, r2, #16
 800115a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	2b03      	cmp	r3, #3
 8001162:	d110      	bne.n	8001186 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	699a      	ldr	r2, [r3, #24]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f042 0220 	orr.w	r2, r2, #32
 8001172:	619a      	str	r2, [r3, #24]
 8001174:	e007      	b.n	8001186 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	699a      	ldr	r2, [r3, #24]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f042 0220 	orr.w	r2, r2, #32
 8001184:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	699b      	ldr	r3, [r3, #24]
 800118a:	3b01      	subs	r3, #1
 800118c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	69db      	ldr	r3, [r3, #28]
 8001192:	3b01      	subs	r3, #1
 8001194:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001196:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6a1b      	ldr	r3, [r3, #32]
 800119c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800119e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	695b      	ldr	r3, [r3, #20]
 80011a6:	3b01      	subs	r3, #1
 80011a8:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80011ae:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80011b0:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80011ba:	d115      	bne.n	80011e8 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011c0:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011c6:	3b01      	subs	r3, #1
 80011c8:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80011ca:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d0:	3b01      	subs	r3, #1
 80011d2:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80011d4:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011dc:	3b01      	subs	r3, #1
 80011de:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80011e4:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80011e6:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	430a      	orrs	r2, r1
 80011fa:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f000 f814 	bl	800122c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2200      	movs	r2, #0
 8001208:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2200      	movs	r2, #0
 800120e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2201      	movs	r2, #1
 8001214:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	4000a400 	.word	0x4000a400
 8001228:	4000a500 	.word	0x4000a500

0800122c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800122c:	b480      	push	{r7}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001234:	4b2c      	ldr	r3, [pc, #176]	@ (80012e8 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 8001236:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a2b      	ldr	r2, [pc, #172]	@ (80012ec <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d103      	bne.n	800124a <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001248:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	68ba      	ldr	r2, [r7, #8]
 800124e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001258:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001260:	041a      	lsls	r2, r3, #16
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	430a      	orrs	r2, r1
 8001268:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800127e:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001286:	061a      	lsls	r2, r3, #24
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	430a      	orrs	r2, r1
 800128e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	e005      	b.n	80012cc <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	3304      	adds	r3, #4
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80012d2:	68fa      	ldr	r2, [r7, #12]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d3f3      	bcc.n	80012c0 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 80012d8:	bf00      	nop
 80012da:	bf00      	nop
 80012dc:	3714      	adds	r7, #20
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	4000ac00 	.word	0x4000ac00
 80012ec:	4000a800 	.word	0x4000a800

080012f0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b087      	sub	sp, #28
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80012fa:	2300      	movs	r3, #0
 80012fc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80012fe:	e136      	b.n	800156e <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	2101      	movs	r1, #1
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	fa01 f303 	lsl.w	r3, r1, r3
 800130c:	4013      	ands	r3, r2
 800130e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	2b00      	cmp	r3, #0
 8001314:	f000 8128 	beq.w	8001568 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	2b02      	cmp	r3, #2
 800131e:	d003      	beq.n	8001328 <HAL_GPIO_Init+0x38>
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	2b12      	cmp	r3, #18
 8001326:	d125      	bne.n	8001374 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	08da      	lsrs	r2, r3, #3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	3208      	adds	r2, #8
 8001330:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001334:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	f003 0307 	and.w	r3, r3, #7
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	220f      	movs	r2, #15
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	43db      	mvns	r3, r3
 8001346:	697a      	ldr	r2, [r7, #20]
 8001348:	4013      	ands	r3, r2
 800134a:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	691b      	ldr	r3, [r3, #16]
 8001350:	f003 020f 	and.w	r2, r3, #15
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	f003 0307 	and.w	r3, r3, #7
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	697a      	ldr	r2, [r7, #20]
 8001362:	4313      	orrs	r3, r2
 8001364:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	08da      	lsrs	r2, r3, #3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	3208      	adds	r2, #8
 800136e:	6979      	ldr	r1, [r7, #20]
 8001370:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	2203      	movs	r2, #3
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	43db      	mvns	r3, r3
 8001386:	697a      	ldr	r2, [r7, #20]
 8001388:	4013      	ands	r3, r2
 800138a:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f003 0203 	and.w	r2, r3, #3
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	697a      	ldr	r2, [r7, #20]
 800139e:	4313      	orrs	r3, r2
 80013a0:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	697a      	ldr	r2, [r7, #20]
 80013a6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d00b      	beq.n	80013c8 <HAL_GPIO_Init+0xd8>
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d007      	beq.n	80013c8 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013bc:	2b11      	cmp	r3, #17
 80013be:	d003      	beq.n	80013c8 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	2b12      	cmp	r3, #18
 80013c6:	d130      	bne.n	800142a <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	2203      	movs	r2, #3
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	43db      	mvns	r3, r3
 80013da:	697a      	ldr	r2, [r7, #20]
 80013dc:	4013      	ands	r3, r2
 80013de:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	68da      	ldr	r2, [r3, #12]
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	697a      	ldr	r2, [r7, #20]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	697a      	ldr	r2, [r7, #20]
 80013f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013fe:	2201      	movs	r2, #1
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	43db      	mvns	r3, r3
 8001408:	697a      	ldr	r2, [r7, #20]
 800140a:	4013      	ands	r3, r2
 800140c:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	091b      	lsrs	r3, r3, #4
 8001414:	f003 0201 	and.w	r2, r3, #1
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	697a      	ldr	r2, [r7, #20]
 8001420:	4313      	orrs	r3, r2
 8001422:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	697a      	ldr	r2, [r7, #20]
 8001428:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	2b03      	cmp	r3, #3
 8001430:	d017      	beq.n	8001462 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	68db      	ldr	r3, [r3, #12]
 8001436:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	2203      	movs	r2, #3
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	43db      	mvns	r3, r3
 8001444:	697a      	ldr	r2, [r7, #20]
 8001446:	4013      	ands	r3, r2
 8001448:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	689a      	ldr	r2, [r3, #8]
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	697a      	ldr	r2, [r7, #20]
 8001458:	4313      	orrs	r3, r2
 800145a:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	697a      	ldr	r2, [r7, #20]
 8001460:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d07c      	beq.n	8001568 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800146e:	4a47      	ldr	r2, [pc, #284]	@ (800158c <HAL_GPIO_Init+0x29c>)
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	089b      	lsrs	r3, r3, #2
 8001474:	3318      	adds	r3, #24
 8001476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800147a:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	f003 0303 	and.w	r3, r3, #3
 8001482:	00db      	lsls	r3, r3, #3
 8001484:	220f      	movs	r2, #15
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	43db      	mvns	r3, r3
 800148c:	697a      	ldr	r2, [r7, #20]
 800148e:	4013      	ands	r3, r2
 8001490:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	0a9a      	lsrs	r2, r3, #10
 8001496:	4b3e      	ldr	r3, [pc, #248]	@ (8001590 <HAL_GPIO_Init+0x2a0>)
 8001498:	4013      	ands	r3, r2
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	f002 0203 	and.w	r2, r2, #3
 80014a0:	00d2      	lsls	r2, r2, #3
 80014a2:	4093      	lsls	r3, r2
 80014a4:	697a      	ldr	r2, [r7, #20]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80014aa:	4938      	ldr	r1, [pc, #224]	@ (800158c <HAL_GPIO_Init+0x29c>)
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	089b      	lsrs	r3, r3, #2
 80014b0:	3318      	adds	r3, #24
 80014b2:	697a      	ldr	r2, [r7, #20]
 80014b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80014b8:	4b34      	ldr	r3, [pc, #208]	@ (800158c <HAL_GPIO_Init+0x29c>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	43db      	mvns	r3, r3
 80014c2:	697a      	ldr	r2, [r7, #20]
 80014c4:	4013      	ands	r3, r2
 80014c6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d003      	beq.n	80014dc <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 80014d4:	697a      	ldr	r2, [r7, #20]
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	4313      	orrs	r3, r2
 80014da:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80014dc:	4a2b      	ldr	r2, [pc, #172]	@ (800158c <HAL_GPIO_Init+0x29c>)
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80014e2:	4b2a      	ldr	r3, [pc, #168]	@ (800158c <HAL_GPIO_Init+0x29c>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	43db      	mvns	r3, r3
 80014ec:	697a      	ldr	r2, [r7, #20]
 80014ee:	4013      	ands	r3, r2
 80014f0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d003      	beq.n	8001506 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 80014fe:	697a      	ldr	r2, [r7, #20]
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	4313      	orrs	r3, r2
 8001504:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001506:	4a21      	ldr	r2, [pc, #132]	@ (800158c <HAL_GPIO_Init+0x29c>)
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 800150c:	4b1f      	ldr	r3, [pc, #124]	@ (800158c <HAL_GPIO_Init+0x29c>)
 800150e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001512:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	43db      	mvns	r3, r3
 8001518:	697a      	ldr	r2, [r7, #20]
 800151a:	4013      	ands	r3, r2
 800151c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d003      	beq.n	8001532 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 800152a:	697a      	ldr	r2, [r7, #20]
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	4313      	orrs	r3, r2
 8001530:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001532:	4a16      	ldr	r2, [pc, #88]	@ (800158c <HAL_GPIO_Init+0x29c>)
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800153a:	4b14      	ldr	r3, [pc, #80]	@ (800158c <HAL_GPIO_Init+0x29c>)
 800153c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001540:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	43db      	mvns	r3, r3
 8001546:	697a      	ldr	r2, [r7, #20]
 8001548:	4013      	ands	r3, r2
 800154a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d003      	beq.n	8001560 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8001558:	697a      	ldr	r2, [r7, #20]
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	4313      	orrs	r3, r2
 800155e:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001560:	4a0a      	ldr	r2, [pc, #40]	@ (800158c <HAL_GPIO_Init+0x29c>)
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	3301      	adds	r3, #1
 800156c:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	fa22 f303 	lsr.w	r3, r2, r3
 8001578:	2b00      	cmp	r3, #0
 800157a:	f47f aec1 	bne.w	8001300 <HAL_GPIO_Init+0x10>
  }
}
 800157e:	bf00      	nop
 8001580:	bf00      	nop
 8001582:	371c      	adds	r7, #28
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	44022000 	.word	0x44022000
 8001590:	002f7f7f 	.word	0x002f7f7f

08001594 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	460b      	mov	r3, r1
 800159e:	807b      	strh	r3, [r7, #2]
 80015a0:	4613      	mov	r3, r2
 80015a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015a4:	787b      	ldrb	r3, [r7, #1]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d003      	beq.n	80015b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015aa:	887a      	ldrh	r2, [r7, #2]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015b0:	e002      	b.n	80015b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015b2:	887a      	ldrh	r2, [r7, #2]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <PCD_GET_EP_RX_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_RX_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b085      	sub	sp, #20
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	460b      	mov	r3, r1
 80015ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 80015d0:	230a      	movs	r3, #10
 80015d2:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 80015d4:	e002      	b.n	80015dc <PCD_GET_EP_RX_CNT+0x18>
  {
    count--;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	3b01      	subs	r3, #1
 80015da:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d1f9      	bne.n	80015d6 <PCD_GET_EP_RX_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_RX_CNT((Instance), (bEpNum));
 80015e2:	887b      	ldrh	r3, [r7, #2]
 80015e4:	00db      	lsls	r3, r3, #3
 80015e6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80015ea:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	0c1b      	lsrs	r3, r3, #16
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80015f8:	b29b      	uxth	r3, r3
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3714      	adds	r7, #20
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr

08001606 <PCD_GET_EP_DBUF0_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF0_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8001606:	b480      	push	{r7}
 8001608:	b085      	sub	sp, #20
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
 800160e:	460b      	mov	r3, r1
 8001610:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8001612:	230a      	movs	r3, #10
 8001614:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8001616:	e002      	b.n	800161e <PCD_GET_EP_DBUF0_CNT+0x18>
  {
    count--;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	3b01      	subs	r3, #1
 800161c:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d1f9      	bne.n	8001618 <PCD_GET_EP_DBUF0_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF0_CNT((Instance), (bEpNum));
 8001624:	887b      	ldrh	r3, [r7, #2]
 8001626:	00db      	lsls	r3, r3, #3
 8001628:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800162c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	0c1b      	lsrs	r3, r3, #16
 8001634:	b29b      	uxth	r3, r3
 8001636:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800163a:	b29b      	uxth	r3, r3
}
 800163c:	4618      	mov	r0, r3
 800163e:	3714      	adds	r7, #20
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <PCD_GET_EP_DBUF1_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF1_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8001648:	b480      	push	{r7}
 800164a:	b085      	sub	sp, #20
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	460b      	mov	r3, r1
 8001652:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8001654:	230a      	movs	r3, #10
 8001656:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8001658:	e002      	b.n	8001660 <PCD_GET_EP_DBUF1_CNT+0x18>
  {
    count--;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	3b01      	subs	r3, #1
 800165e:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d1f9      	bne.n	800165a <PCD_GET_EP_DBUF1_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF1_CNT((Instance), (bEpNum));
 8001666:	887b      	ldrh	r3, [r7, #2]
 8001668:	00db      	lsls	r3, r3, #3
 800166a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800166e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	0c1b      	lsrs	r3, r3, #16
 8001676:	b29b      	uxth	r3, r3
 8001678:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800167c:	b29b      	uxth	r3, r3
}
 800167e:	4618      	mov	r0, r3
 8001680:	3714      	adds	r7, #20
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	b086      	sub	sp, #24
 800168e:	af02      	add	r7, sp, #8
 8001690:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d101      	bne.n	800169c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e0c3      	b.n	8001824 <HAL_PCD_Init+0x19a>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f893 3295 	ldrb.w	r3, [r3, #661]	@ 0x295
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d106      	bne.n	80016b6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f7ff f827 	bl	8000704 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2203      	movs	r2, #3
 80016ba:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f003 fe8e 	bl	80053e4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016c8:	2300      	movs	r3, #0
 80016ca:	73fb      	strb	r3, [r7, #15]
 80016cc:	e03f      	b.n	800174e <HAL_PCD_Init+0xc4>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80016ce:	7bfa      	ldrb	r2, [r7, #15]
 80016d0:	6879      	ldr	r1, [r7, #4]
 80016d2:	4613      	mov	r3, r2
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	4413      	add	r3, r2
 80016d8:	00db      	lsls	r3, r3, #3
 80016da:	440b      	add	r3, r1
 80016dc:	3315      	adds	r3, #21
 80016de:	2201      	movs	r2, #1
 80016e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80016e2:	7bfa      	ldrb	r2, [r7, #15]
 80016e4:	6879      	ldr	r1, [r7, #4]
 80016e6:	4613      	mov	r3, r2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	4413      	add	r3, r2
 80016ec:	00db      	lsls	r3, r3, #3
 80016ee:	440b      	add	r3, r1
 80016f0:	3314      	adds	r3, #20
 80016f2:	7bfa      	ldrb	r2, [r7, #15]
 80016f4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80016f6:	7bfa      	ldrb	r2, [r7, #15]
 80016f8:	6879      	ldr	r1, [r7, #4]
 80016fa:	4613      	mov	r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	4413      	add	r3, r2
 8001700:	00db      	lsls	r3, r3, #3
 8001702:	440b      	add	r3, r1
 8001704:	3317      	adds	r3, #23
 8001706:	2200      	movs	r2, #0
 8001708:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800170a:	7bfa      	ldrb	r2, [r7, #15]
 800170c:	6879      	ldr	r1, [r7, #4]
 800170e:	4613      	mov	r3, r2
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	4413      	add	r3, r2
 8001714:	00db      	lsls	r3, r3, #3
 8001716:	440b      	add	r3, r1
 8001718:	3324      	adds	r3, #36	@ 0x24
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800171e:	7bfa      	ldrb	r2, [r7, #15]
 8001720:	6879      	ldr	r1, [r7, #4]
 8001722:	4613      	mov	r3, r2
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	4413      	add	r3, r2
 8001728:	00db      	lsls	r3, r3, #3
 800172a:	440b      	add	r3, r1
 800172c:	3328      	adds	r3, #40	@ 0x28
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001732:	7bfb      	ldrb	r3, [r7, #15]
 8001734:	6879      	ldr	r1, [r7, #4]
 8001736:	1c5a      	adds	r2, r3, #1
 8001738:	4613      	mov	r3, r2
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	4413      	add	r3, r2
 800173e:	00db      	lsls	r3, r3, #3
 8001740:	440b      	add	r3, r1
 8001742:	3304      	adds	r3, #4
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001748:	7bfb      	ldrb	r3, [r7, #15]
 800174a:	3301      	adds	r3, #1
 800174c:	73fb      	strb	r3, [r7, #15]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	791b      	ldrb	r3, [r3, #4]
 8001752:	7bfa      	ldrb	r2, [r7, #15]
 8001754:	429a      	cmp	r2, r3
 8001756:	d3ba      	bcc.n	80016ce <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001758:	2300      	movs	r3, #0
 800175a:	73fb      	strb	r3, [r7, #15]
 800175c:	e044      	b.n	80017e8 <HAL_PCD_Init+0x15e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800175e:	7bfa      	ldrb	r2, [r7, #15]
 8001760:	6879      	ldr	r1, [r7, #4]
 8001762:	4613      	mov	r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	4413      	add	r3, r2
 8001768:	00db      	lsls	r3, r3, #3
 800176a:	440b      	add	r3, r1
 800176c:	f203 1355 	addw	r3, r3, #341	@ 0x155
 8001770:	2200      	movs	r2, #0
 8001772:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001774:	7bfa      	ldrb	r2, [r7, #15]
 8001776:	6879      	ldr	r1, [r7, #4]
 8001778:	4613      	mov	r3, r2
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	4413      	add	r3, r2
 800177e:	00db      	lsls	r3, r3, #3
 8001780:	440b      	add	r3, r1
 8001782:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8001786:	7bfa      	ldrb	r2, [r7, #15]
 8001788:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800178a:	7bfa      	ldrb	r2, [r7, #15]
 800178c:	6879      	ldr	r1, [r7, #4]
 800178e:	4613      	mov	r3, r2
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	4413      	add	r3, r2
 8001794:	00db      	lsls	r3, r3, #3
 8001796:	440b      	add	r3, r1
 8001798:	f203 1357 	addw	r3, r3, #343	@ 0x157
 800179c:	2200      	movs	r2, #0
 800179e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80017a0:	7bfa      	ldrb	r2, [r7, #15]
 80017a2:	6879      	ldr	r1, [r7, #4]
 80017a4:	4613      	mov	r3, r2
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	4413      	add	r3, r2
 80017aa:	00db      	lsls	r3, r3, #3
 80017ac:	440b      	add	r3, r1
 80017ae:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80017b2:	2200      	movs	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80017b6:	7bfa      	ldrb	r2, [r7, #15]
 80017b8:	6879      	ldr	r1, [r7, #4]
 80017ba:	4613      	mov	r3, r2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	4413      	add	r3, r2
 80017c0:	00db      	lsls	r3, r3, #3
 80017c2:	440b      	add	r3, r1
 80017c4:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80017cc:	7bfa      	ldrb	r2, [r7, #15]
 80017ce:	6879      	ldr	r1, [r7, #4]
 80017d0:	4613      	mov	r3, r2
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	4413      	add	r3, r2
 80017d6:	00db      	lsls	r3, r3, #3
 80017d8:	440b      	add	r3, r1
 80017da:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017e2:	7bfb      	ldrb	r3, [r7, #15]
 80017e4:	3301      	adds	r3, #1
 80017e6:	73fb      	strb	r3, [r7, #15]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	791b      	ldrb	r3, [r3, #4]
 80017ec:	7bfa      	ldrb	r2, [r7, #15]
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d3b5      	bcc.n	800175e <HAL_PCD_Init+0xd4>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6818      	ldr	r0, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	7c1a      	ldrb	r2, [r3, #16]
 80017fa:	f88d 2000 	strb.w	r2, [sp]
 80017fe:	3304      	adds	r3, #4
 8001800:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001802:	f003 fe27 	bl	8005454 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2201      	movs	r2, #1
 8001810:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	7b1b      	ldrb	r3, [r3, #12]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d102      	bne.n	8001822 <HAL_PCD_Init+0x198>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f001 fb66 	bl	8002eee <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001822:	2300      	movs	r3, #0
}
 8001824:	4618      	mov	r0, r3
 8001826:	3710      	adds	r7, #16
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 800183a:	2b01      	cmp	r3, #1
 800183c:	d101      	bne.n	8001842 <HAL_PCD_Start+0x16>
 800183e:	2302      	movs	r3, #2
 8001840:	e012      	b.n	8001868 <HAL_PCD_Start+0x3c>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2201      	movs	r2, #1
 8001846:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  __HAL_PCD_ENABLE(hpcd);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4618      	mov	r0, r3
 8001850:	f003 fdb4 	bl	80053bc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4618      	mov	r0, r3
 800185a:	f005 fc60 	bl	800711e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8001866:	2300      	movs	r3, #0
}
 8001868:	4618      	mov	r0, r3
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}

08001870 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4618      	mov	r0, r3
 800187e:	f005 fc5f 	bl	8007140 <USB_ReadInterrupts>
 8001882:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d003      	beq.n	8001896 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f000 faf2 	bl	8001e78 <PCD_EP_ISR_Handler>

    return;
 8001894:	e0de      	b.n	8001a54 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800189c:	2b00      	cmp	r3, #0
 800189e:	d010      	beq.n	80018c2 <HAL_PCD_IRQHandler+0x52>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	f64f 33ff 	movw	r3, #64511	@ 0xfbff
 80018ae:	400b      	ands	r3, r1
 80018b0:	6453      	str	r3, [r2, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f007 fae8 	bl	8008e88 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80018b8:	2100      	movs	r1, #0
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f000 f8e1 	bl	8001a82 <HAL_PCD_SetAddress>

    return;
 80018c0:	e0c8      	b.n	8001a54 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d009      	beq.n	80018e0 <HAL_PCD_IRQHandler+0x70>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	f64b 73ff 	movw	r3, #49151	@ 0xbfff
 80018da:	400b      	ands	r3, r1
 80018dc:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 80018de:	e0b9      	b.n	8001a54 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d009      	beq.n	80018fe <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	f64d 73ff 	movw	r3, #57343	@ 0xdfff
 80018f8:	400b      	ands	r3, r1
 80018fa:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 80018fc:	e0aa      	b.n	8001a54 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d029      	beq.n	800195c <HAL_PCD_IRQHandler+0xec>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPRDY);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f022 0204 	bic.w	r2, r2, #4
 8001916:	641a      	str	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPEN);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f022 0208 	bic.w	r2, r2, #8
 8001926:	641a      	str	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 800192e:	2b01      	cmp	r3, #1
 8001930:	d107      	bne.n	8001942 <HAL_PCD_IRQHandler+0xd2>
    {
      hpcd->LPM_State = LPM_L0;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800193a:	2100      	movs	r1, #0
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f001 faf8 	bl	8002f32 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f000 f893 	bl	8001a6e <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8001956:	400b      	ands	r3, r1
 8001958:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 800195a:	e07b      	b.n	8001a54 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001962:	2b00      	cmp	r3, #0
 8001964:	d01c      	beq.n	80019a0 <HAL_PCD_IRQHandler+0x130>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f042 0208 	orr.w	r2, r2, #8
 8001974:	641a      	str	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	f24f 73ff 	movw	r3, #63487	@ 0xf7ff
 8001984:	400b      	ands	r3, r1
 8001986:	6453      	str	r3, [r2, #68]	@ 0x44

    hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f042 0204 	orr.w	r2, r2, #4
 8001996:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f000 f85e 	bl	8001a5a <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800199e:	e059      	b.n	8001a54 <HAL_PCD_IRQHandler+0x1e4>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d033      	beq.n	8001a12 <HAL_PCD_IRQHandler+0x1a2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	f64f 737f 	movw	r3, #65407	@ 0xff7f
 80019b8:	400b      	ands	r3, r1
 80019ba:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d121      	bne.n	8001a0a <HAL_PCD_IRQHandler+0x19a>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f042 0204 	orr.w	r2, r2, #4
 80019d4:	641a      	str	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f042 0208 	orr.w	r2, r2, #8
 80019e4:	641a      	str	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2201      	movs	r2, #1
 80019ea:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019f4:	089b      	lsrs	r3, r3, #2
 80019f6:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001a00:	2101      	movs	r1, #1
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f001 fa95 	bl	8002f32 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8001a08:	e024      	b.n	8001a54 <HAL_PCD_IRQHandler+0x1e4>
      HAL_PCD_SuspendCallback(hpcd);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f000 f825 	bl	8001a5a <HAL_PCD_SuspendCallback>
    return;
 8001a10:	e020      	b.n	8001a54 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d00c      	beq.n	8001a36 <HAL_PCD_IRQHandler+0x1c6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	f64f 53ff 	movw	r3, #65023	@ 0xfdff
 8001a2a:	400b      	ands	r3, r1
 8001a2c:	6453      	str	r3, [r2, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f007 fa1c 	bl	8008e6c <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001a34:	e00e      	b.n	8001a54 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d009      	beq.n	8001a54 <HAL_PCD_IRQHandler+0x1e4>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8001a4e:	400b      	ands	r3, r1
 8001a50:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8001a52:	bf00      	nop
  }
}
 8001a54:	3710      	adds	r7, #16
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	b083      	sub	sp, #12
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8001a62:	bf00      	nop
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr

08001a6e <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	b083      	sub	sp, #12
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8001a76:	bf00      	nop
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr

08001a82 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b082      	sub	sp, #8
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d101      	bne.n	8001a9c <HAL_PCD_SetAddress+0x1a>
 8001a98:	2302      	movs	r3, #2
 8001a9a:	e012      	b.n	8001ac2 <HAL_PCD_SetAddress+0x40>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  hpcd->USB_Address = address;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	78fa      	ldrb	r2, [r7, #3]
 8001aa8:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	78fa      	ldrb	r2, [r7, #3]
 8001ab0:	4611      	mov	r1, r2
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f005 fb20 	bl	80070f8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b084      	sub	sp, #16
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
 8001ad2:	4608      	mov	r0, r1
 8001ad4:	4611      	mov	r1, r2
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	4603      	mov	r3, r0
 8001ada:	70fb      	strb	r3, [r7, #3]
 8001adc:	460b      	mov	r3, r1
 8001ade:	803b      	strh	r3, [r7, #0]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ae8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	da0f      	bge.n	8001b10 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001af0:	78fb      	ldrb	r3, [r7, #3]
 8001af2:	f003 0207 	and.w	r2, r3, #7
 8001af6:	4613      	mov	r3, r2
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	4413      	add	r3, r2
 8001afc:	00db      	lsls	r3, r3, #3
 8001afe:	3310      	adds	r3, #16
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	4413      	add	r3, r2
 8001b04:	3304      	adds	r3, #4
 8001b06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	705a      	strb	r2, [r3, #1]
 8001b0e:	e00f      	b.n	8001b30 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b10:	78fb      	ldrb	r3, [r7, #3]
 8001b12:	f003 0207 	and.w	r2, r3, #7
 8001b16:	4613      	mov	r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	4413      	add	r3, r2
 8001b1c:	00db      	lsls	r3, r3, #3
 8001b1e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	4413      	add	r3, r2
 8001b26:	3304      	adds	r3, #4
 8001b28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001b30:	78fb      	ldrb	r3, [r7, #3]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	b2da      	uxtb	r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001b3c:	883b      	ldrh	r3, [r7, #0]
 8001b3e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	78ba      	ldrb	r2, [r7, #2]
 8001b4a:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001b4c:	78bb      	ldrb	r3, [r7, #2]
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d102      	bne.n	8001b58 <HAL_PCD_EP_Open+0x8e>
  {
    ep->data_pid_start = 0U;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2200      	movs	r2, #0
 8001b56:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d101      	bne.n	8001b66 <HAL_PCD_EP_Open+0x9c>
 8001b62:	2302      	movs	r3, #2
 8001b64:	e00e      	b.n	8001b84 <HAL_PCD_EP_Open+0xba>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	68f9      	ldr	r1, [r7, #12]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f003 fc91 	bl	800549c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return ret;
 8001b82:	7afb      	ldrb	r3, [r7, #11]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3710      	adds	r7, #16
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	460b      	mov	r3, r1
 8001b96:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	da0f      	bge.n	8001bc0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ba0:	78fb      	ldrb	r3, [r7, #3]
 8001ba2:	f003 0207 	and.w	r2, r3, #7
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	4413      	add	r3, r2
 8001bac:	00db      	lsls	r3, r3, #3
 8001bae:	3310      	adds	r3, #16
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	3304      	adds	r3, #4
 8001bb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	705a      	strb	r2, [r3, #1]
 8001bbe:	e00f      	b.n	8001be0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bc0:	78fb      	ldrb	r3, [r7, #3]
 8001bc2:	f003 0207 	and.w	r2, r3, #7
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	4413      	add	r3, r2
 8001bcc:	00db      	lsls	r3, r3, #3
 8001bce:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	3304      	adds	r3, #4
 8001bd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001be0:	78fb      	ldrb	r3, [r7, #3]
 8001be2:	f003 0307 	and.w	r3, r3, #7
 8001be6:	b2da      	uxtb	r2, r3
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d101      	bne.n	8001bfa <HAL_PCD_EP_Close+0x6e>
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	e00e      	b.n	8001c18 <HAL_PCD_EP_Close+0x8c>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	68f9      	ldr	r1, [r7, #12]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f003 ffa7 	bl	8005b5c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  return HAL_OK;
 8001c16:	2300      	movs	r3, #0
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3710      	adds	r7, #16
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b086      	sub	sp, #24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	607a      	str	r2, [r7, #4]
 8001c2a:	603b      	str	r3, [r7, #0]
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c30:	7afb      	ldrb	r3, [r7, #11]
 8001c32:	f003 0207 	and.w	r2, r3, #7
 8001c36:	4613      	mov	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	4413      	add	r3, r2
 8001c3c:	00db      	lsls	r3, r3, #3
 8001c3e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001c42:	68fa      	ldr	r2, [r7, #12]
 8001c44:	4413      	add	r3, r2
 8001c46:	3304      	adds	r3, #4
 8001c48:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	683a      	ldr	r2, [r7, #0]
 8001c54:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c62:	7afb      	ldrb	r3, [r7, #11]
 8001c64:	f003 0307 	and.w	r3, r3, #7
 8001c68:	b2da      	uxtb	r2, r3
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	6979      	ldr	r1, [r7, #20]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f004 f8fb 	bl	8005e70 <USB_EPStartXfer>

  return HAL_OK;
 8001c7a:	2300      	movs	r3, #0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3718      	adds	r7, #24
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001c90:	78fb      	ldrb	r3, [r7, #3]
 8001c92:	f003 0207 	and.w	r2, r3, #7
 8001c96:	6879      	ldr	r1, [r7, #4]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	4413      	add	r3, r2
 8001c9e:	00db      	lsls	r3, r3, #3
 8001ca0:	440b      	add	r3, r1
 8001ca2:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 8001ca6:	681b      	ldr	r3, [r3, #0]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b086      	sub	sp, #24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	607a      	str	r2, [r7, #4]
 8001cbe:	603b      	str	r3, [r7, #0]
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cc4:	7afb      	ldrb	r3, [r7, #11]
 8001cc6:	f003 0207 	and.w	r2, r3, #7
 8001cca:	4613      	mov	r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	4413      	add	r3, r2
 8001cd0:	00db      	lsls	r3, r3, #3
 8001cd2:	3310      	adds	r3, #16
 8001cd4:	68fa      	ldr	r2, [r7, #12]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	3304      	adds	r3, #4
 8001cda:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	683a      	ldr	r2, [r7, #0]
 8001ce6:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	683a      	ldr	r2, [r7, #0]
 8001cf4:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d02:	7afb      	ldrb	r3, [r7, #11]
 8001d04:	f003 0307 	and.w	r3, r3, #7
 8001d08:	b2da      	uxtb	r2, r3
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	6979      	ldr	r1, [r7, #20]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f004 f8ab 	bl	8005e70 <USB_EPStartXfer>

  return HAL_OK;
 8001d1a:	2300      	movs	r3, #0
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3718      	adds	r7, #24
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001d30:	78fb      	ldrb	r3, [r7, #3]
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	7912      	ldrb	r2, [r2, #4]
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d901      	bls.n	8001d42 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e040      	b.n	8001dc4 <HAL_PCD_EP_SetStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	da0f      	bge.n	8001d6a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d4a:	78fb      	ldrb	r3, [r7, #3]
 8001d4c:	f003 0207 	and.w	r2, r3, #7
 8001d50:	4613      	mov	r3, r2
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	4413      	add	r3, r2
 8001d56:	00db      	lsls	r3, r3, #3
 8001d58:	3310      	adds	r3, #16
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	3304      	adds	r3, #4
 8001d60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2201      	movs	r2, #1
 8001d66:	705a      	strb	r2, [r3, #1]
 8001d68:	e00d      	b.n	8001d86 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001d6a:	78fa      	ldrb	r2, [r7, #3]
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	4413      	add	r3, r2
 8001d72:	00db      	lsls	r3, r3, #3
 8001d74:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	3304      	adds	r3, #4
 8001d7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2200      	movs	r2, #0
 8001d84:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2201      	movs	r2, #1
 8001d8a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d8c:	78fb      	ldrb	r3, [r7, #3]
 8001d8e:	f003 0307 	and.w	r3, r3, #7
 8001d92:	b2da      	uxtb	r2, r3
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d101      	bne.n	8001da6 <HAL_PCD_EP_SetStall+0x82>
 8001da2:	2302      	movs	r3, #2
 8001da4:	e00e      	b.n	8001dc4 <HAL_PCD_EP_SetStall+0xa0>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2201      	movs	r2, #1
 8001daa:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	68f9      	ldr	r1, [r7, #12]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f005 f8c5 	bl	8006f44 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8001dc2:	2300      	movs	r3, #0
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3710      	adds	r7, #16
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001dd8:	78fb      	ldrb	r3, [r7, #3]
 8001dda:	f003 030f 	and.w	r3, r3, #15
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	7912      	ldrb	r2, [r2, #4]
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d901      	bls.n	8001dea <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e042      	b.n	8001e70 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001dea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	da0f      	bge.n	8001e12 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001df2:	78fb      	ldrb	r3, [r7, #3]
 8001df4:	f003 0207 	and.w	r2, r3, #7
 8001df8:	4613      	mov	r3, r2
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	4413      	add	r3, r2
 8001dfe:	00db      	lsls	r3, r3, #3
 8001e00:	3310      	adds	r3, #16
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	4413      	add	r3, r2
 8001e06:	3304      	adds	r3, #4
 8001e08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	705a      	strb	r2, [r3, #1]
 8001e10:	e00f      	b.n	8001e32 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e12:	78fb      	ldrb	r3, [r7, #3]
 8001e14:	f003 0207 	and.w	r2, r3, #7
 8001e18:	4613      	mov	r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	4413      	add	r3, r2
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	4413      	add	r3, r2
 8001e28:	3304      	adds	r3, #4
 8001e2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2200      	movs	r2, #0
 8001e36:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e38:	78fb      	ldrb	r3, [r7, #3]
 8001e3a:	f003 0307 	and.w	r3, r3, #7
 8001e3e:	b2da      	uxtb	r2, r3
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d101      	bne.n	8001e52 <HAL_PCD_EP_ClrStall+0x86>
 8001e4e:	2302      	movs	r3, #2
 8001e50:	e00e      	b.n	8001e70 <HAL_PCD_EP_ClrStall+0xa4>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2201      	movs	r2, #1
 8001e56:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	68f9      	ldr	r1, [r7, #12]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f005 f8b5 	bl	8006fd0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3710      	adds	r7, #16
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b08e      	sub	sp, #56	@ 0x38
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001e80:	e326      	b.n	80024d0 <PCD_EP_ISR_Handler+0x658>
  {
    wIstr = (uint16_t)hpcd->Instance->ISTR;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e88:	847b      	strh	r3, [r7, #34]	@ 0x22

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_IDN);
 8001e8a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	f003 030f 	and.w	r3, r3, #15
 8001e92:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

    if (epindex == 0U)
 8001e96:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f040 8124 	bne.w	80020e8 <PCD_EP_ISR_Handler+0x270>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001ea0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001ea2:	f003 0310 	and.w	r3, r3, #16
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d13e      	bne.n	8001f28 <PCD_EP_ISR_Handler+0xb0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	4b89      	ldr	r3, [pc, #548]	@ (80020d8 <PCD_EP_ISR_Handler+0x260>)
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	60bb      	str	r3, [r7, #8]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68ba      	ldr	r2, [r7, #8]
 8001ebc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001ec0:	601a      	str	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	3314      	adds	r3, #20
 8001ec6:	637b      	str	r3, [r7, #52]	@ 0x34

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001ec8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001ed2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	0c1b      	lsrs	r3, r3, #16
 8001eda:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001ede:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ee0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001ee2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ee4:	695a      	ldr	r2, [r3, #20]
 8001ee6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ee8:	69db      	ldr	r3, [r3, #28]
 8001eea:	441a      	add	r2, r3
 8001eec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001eee:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f006 ffa0 	bl	8008e38 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	7c5b      	ldrb	r3, [r3, #17]
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	f000 82e6 	beq.w	80024d0 <PCD_EP_ISR_Handler+0x658>
 8001f04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	f040 82e1 	bne.w	80024d0 <PCD_EP_ISR_Handler+0x658>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	7c5b      	ldrb	r3, [r3, #17]
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001f18:	b2da      	uxtb	r2, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	64da      	str	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	745a      	strb	r2, [r3, #17]
 8001f26:	e2d3      	b.n	80024d0 <PCD_EP_ISR_Handler+0x658>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8001f2e:	637b      	str	r3, [r7, #52]	@ 0x34
        wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	867b      	strh	r3, [r7, #50]	@ 0x32

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001f38:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001f3a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d027      	beq.n	8001f92 <PCD_EP_ISR_Handler+0x11a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4610      	mov	r0, r2
 8001f4e:	f7ff fb39 	bl	80015c4 <PCD_GET_EP_RX_CNT>
 8001f52:	4603      	mov	r3, r0
 8001f54:	461a      	mov	r2, r3
 8001f56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f58:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6818      	ldr	r0, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f503 7127 	add.w	r1, r3, #668	@ 0x29c
 8001f64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f66:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001f68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f6a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	f005 f956 	bl	800721e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	4b58      	ldr	r3, [pc, #352]	@ (80020dc <PCD_EP_ISR_Handler+0x264>)
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	60fb      	str	r3, [r7, #12]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	68fa      	ldr	r2, [r7, #12]
 8001f84:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001f88:	601a      	str	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f006 ff27 	bl	8008dde <HAL_PCD_SetupStageCallback>
 8001f90:	e29e      	b.n	80024d0 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_VTRX) != 0U)
 8001f92:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f280 829a 	bge.w	80024d0 <PCD_EP_ISR_Handler+0x658>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	4b4e      	ldr	r3, [pc, #312]	@ (80020dc <PCD_EP_ISR_Handler+0x264>)
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001fae:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001fb2:	601a      	str	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	4610      	mov	r0, r2
 8001fc0:	f7ff fb00 	bl	80015c4 <PCD_GET_EP_RX_CNT>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fca:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001fcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fce:	69db      	ldr	r3, [r3, #28]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d019      	beq.n	8002008 <PCD_EP_ISR_Handler+0x190>
 8001fd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fd6:	695b      	ldr	r3, [r3, #20]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d015      	beq.n	8002008 <PCD_EP_ISR_Handler+0x190>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6818      	ldr	r0, [r3, #0]
 8001fe0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fe2:	6959      	ldr	r1, [r3, #20]
 8001fe4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fe6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001fe8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fea:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	f005 f916 	bl	800721e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001ff2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ff4:	695a      	ldr	r2, [r3, #20]
 8001ff6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ff8:	69db      	ldr	r3, [r3, #28]
 8001ffa:	441a      	add	r2, r3
 8001ffc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ffe:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002000:	2100      	movs	r1, #0
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f006 fefd 	bl	8008e02 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	867b      	strh	r3, [r7, #50]	@ 0x32

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002010:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002012:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002016:	2b00      	cmp	r3, #0
 8002018:	f040 825a 	bne.w	80024d0 <PCD_EP_ISR_Handler+0x658>
 800201c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800201e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002022:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002026:	f000 8253 	beq.w	80024d0 <PCD_EP_ISR_Handler+0x658>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800202a:	4b2d      	ldr	r3, [pc, #180]	@ (80020e0 <PCD_EP_ISR_Handler+0x268>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	4a2c      	ldr	r2, [pc, #176]	@ (80020e0 <PCD_EP_ISR_Handler+0x268>)
 8002030:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8002034:	6053      	str	r3, [r2, #4]
 8002036:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d106      	bne.n	800204c <PCD_EP_ISR_Handler+0x1d4>
 800203e:	4b28      	ldr	r3, [pc, #160]	@ (80020e0 <PCD_EP_ISR_Handler+0x268>)
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	4a27      	ldr	r2, [pc, #156]	@ (80020e0 <PCD_EP_ISR_Handler+0x268>)
 8002044:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002048:	6053      	str	r3, [r2, #4]
 800204a:	e02e      	b.n	80020aa <PCD_EP_ISR_Handler+0x232>
 800204c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800204e:	691b      	ldr	r3, [r3, #16]
 8002050:	2b3e      	cmp	r3, #62	@ 0x3e
 8002052:	d814      	bhi.n	800207e <PCD_EP_ISR_Handler+0x206>
 8002054:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002056:	691b      	ldr	r3, [r3, #16]
 8002058:	085b      	lsrs	r3, r3, #1
 800205a:	617b      	str	r3, [r7, #20]
 800205c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800205e:	691b      	ldr	r3, [r3, #16]
 8002060:	f003 0301 	and.w	r3, r3, #1
 8002064:	2b00      	cmp	r3, #0
 8002066:	d002      	beq.n	800206e <PCD_EP_ISR_Handler+0x1f6>
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	3301      	adds	r3, #1
 800206c:	617b      	str	r3, [r7, #20]
 800206e:	4b1c      	ldr	r3, [pc, #112]	@ (80020e0 <PCD_EP_ISR_Handler+0x268>)
 8002070:	685a      	ldr	r2, [r3, #4]
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	069b      	lsls	r3, r3, #26
 8002076:	491a      	ldr	r1, [pc, #104]	@ (80020e0 <PCD_EP_ISR_Handler+0x268>)
 8002078:	4313      	orrs	r3, r2
 800207a:	604b      	str	r3, [r1, #4]
 800207c:	e015      	b.n	80020aa <PCD_EP_ISR_Handler+0x232>
 800207e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	095b      	lsrs	r3, r3, #5
 8002084:	617b      	str	r3, [r7, #20]
 8002086:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002088:	691b      	ldr	r3, [r3, #16]
 800208a:	f003 031f 	and.w	r3, r3, #31
 800208e:	2b00      	cmp	r3, #0
 8002090:	d102      	bne.n	8002098 <PCD_EP_ISR_Handler+0x220>
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	3b01      	subs	r3, #1
 8002096:	617b      	str	r3, [r7, #20]
 8002098:	4b11      	ldr	r3, [pc, #68]	@ (80020e0 <PCD_EP_ISR_Handler+0x268>)
 800209a:	685a      	ldr	r2, [r3, #4]
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	069b      	lsls	r3, r3, #26
 80020a0:	4313      	orrs	r3, r2
 80020a2:	4a0f      	ldr	r2, [pc, #60]	@ (80020e0 <PCD_EP_ISR_Handler+0x268>)
 80020a4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80020a8:	6053      	str	r3, [r2, #4]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	4b0c      	ldr	r3, [pc, #48]	@ (80020e4 <PCD_EP_ISR_Handler+0x26c>)
 80020b2:	4013      	ands	r3, r2
 80020b4:	613b      	str	r3, [r7, #16]
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80020bc:	613b      	str	r3, [r7, #16]
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80020c4:	613b      	str	r3, [r7, #16]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020d4:	6013      	str	r3, [r2, #0]
 80020d6:	e1fb      	b.n	80024d0 <PCD_EP_ISR_Handler+0x658>
 80020d8:	07ff8f0f 	.word	0x07ff8f0f
 80020dc:	07ff0f8f 	.word	0x07ff0f8f
 80020e0:	40016400 	.word	0x40016400
 80020e4:	07ffbf8f 	.word	0x07ffbf8f
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	461a      	mov	r2, r3
 80020ee:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	4413      	add	r3, r2
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	867b      	strh	r3, [r7, #50]	@ 0x32

      if ((wEPVal & USB_EP_VTRX) != 0U)
 80020fa:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 80020fe:	2b00      	cmp	r3, #0
 8002100:	f280 80bd 	bge.w	800227e <PCD_EP_ISR_Handler+0x406>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	461a      	mov	r2, r3
 800210a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	4413      	add	r3, r2
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	4b9e      	ldr	r3, [pc, #632]	@ (8002390 <PCD_EP_ISR_Handler+0x518>)
 8002116:	4013      	ands	r3, r2
 8002118:	61fb      	str	r3, [r7, #28]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	461a      	mov	r2, r3
 8002120:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	4413      	add	r3, r2
 8002128:	69fa      	ldr	r2, [r7, #28]
 800212a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800212e:	601a      	str	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002130:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8002134:	4613      	mov	r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	4413      	add	r3, r2
 800213a:	00db      	lsls	r3, r3, #3
 800213c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	4413      	add	r3, r2
 8002144:	3304      	adds	r3, #4
 8002146:	637b      	str	r3, [r7, #52]	@ 0x34

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002148:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800214a:	7b1b      	ldrb	r3, [r3, #12]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d116      	bne.n	800217e <PCD_EP_ISR_Handler+0x306>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	4619      	mov	r1, r3
 800215a:	4610      	mov	r0, r2
 800215c:	f7ff fa32 	bl	80015c4 <PCD_GET_EP_RX_CNT>
 8002160:	4603      	mov	r3, r0
 8002162:	84bb      	strh	r3, [r7, #36]	@ 0x24

          if (count != 0U)
 8002164:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002166:	2b00      	cmp	r3, #0
 8002168:	d067      	beq.n	800223a <PCD_EP_ISR_Handler+0x3c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6818      	ldr	r0, [r3, #0]
 800216e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002170:	6959      	ldr	r1, [r3, #20]
 8002172:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002174:	88da      	ldrh	r2, [r3, #6]
 8002176:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002178:	f005 f851 	bl	800721e <USB_ReadPMA>
 800217c:	e05d      	b.n	800223a <PCD_EP_ISR_Handler+0x3c2>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800217e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002180:	78db      	ldrb	r3, [r3, #3]
 8002182:	2b02      	cmp	r3, #2
 8002184:	d108      	bne.n	8002198 <PCD_EP_ISR_Handler+0x320>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002186:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002188:	461a      	mov	r2, r3
 800218a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f000 f9ad 	bl	80024ec <HAL_PCD_EP_DB_Receive>
 8002192:	4603      	mov	r3, r0
 8002194:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8002196:	e050      	b.n	800223a <PCD_EP_ISR_Handler+0x3c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	461a      	mov	r2, r3
 800219e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	4413      	add	r3, r2
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	4b7a      	ldr	r3, [pc, #488]	@ (8002394 <PCD_EP_ISR_Handler+0x51c>)
 80021aa:	4013      	ands	r3, r2
 80021ac:	61bb      	str	r3, [r7, #24]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	461a      	mov	r2, r3
 80021b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	441a      	add	r2, r3
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80021c2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80021c6:	6013      	str	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	461a      	mov	r2, r3
 80021ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	4413      	add	r3, r2
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d016      	beq.n	800220e <PCD_EP_ISR_Handler+0x396>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	4619      	mov	r1, r3
 80021ea:	4610      	mov	r0, r2
 80021ec:	f7ff fa0b 	bl	8001606 <PCD_GET_EP_DBUF0_CNT>
 80021f0:	4603      	mov	r3, r0
 80021f2:	84bb      	strh	r3, [r7, #36]	@ 0x24

              if (count != 0U)
 80021f4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d01f      	beq.n	800223a <PCD_EP_ISR_Handler+0x3c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6818      	ldr	r0, [r3, #0]
 80021fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002200:	6959      	ldr	r1, [r3, #20]
 8002202:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002204:	891a      	ldrh	r2, [r3, #8]
 8002206:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002208:	f005 f809 	bl	800721e <USB_ReadPMA>
 800220c:	e015      	b.n	800223a <PCD_EP_ISR_Handler+0x3c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	4619      	mov	r1, r3
 8002218:	4610      	mov	r0, r2
 800221a:	f7ff fa15 	bl	8001648 <PCD_GET_EP_DBUF1_CNT>
 800221e:	4603      	mov	r3, r0
 8002220:	84bb      	strh	r3, [r7, #36]	@ 0x24

              if (count != 0U)
 8002222:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002224:	2b00      	cmp	r3, #0
 8002226:	d008      	beq.n	800223a <PCD_EP_ISR_Handler+0x3c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6818      	ldr	r0, [r3, #0]
 800222c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800222e:	6959      	ldr	r1, [r3, #20]
 8002230:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002232:	895a      	ldrh	r2, [r3, #10]
 8002234:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002236:	f004 fff2 	bl	800721e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800223a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800223c:	69da      	ldr	r2, [r3, #28]
 800223e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002240:	441a      	add	r2, r3
 8002242:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002244:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002248:	695a      	ldr	r2, [r3, #20]
 800224a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800224c:	441a      	add	r2, r3
 800224e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002250:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002252:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002254:	699b      	ldr	r3, [r3, #24]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d004      	beq.n	8002264 <PCD_EP_ISR_Handler+0x3ec>
 800225a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800225c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800225e:	691b      	ldr	r3, [r3, #16]
 8002260:	429a      	cmp	r2, r3
 8002262:	d206      	bcs.n	8002272 <PCD_EP_ISR_Handler+0x3fa>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002264:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	4619      	mov	r1, r3
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f006 fdc9 	bl	8008e02 <HAL_PCD_DataOutStageCallback>
 8002270:	e005      	b.n	800227e <PCD_EP_ISR_Handler+0x406>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002278:	4618      	mov	r0, r3
 800227a:	f003 fdf9 	bl	8005e70 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_VTTX) != 0U)
 800227e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002280:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002284:	2b00      	cmp	r3, #0
 8002286:	f000 8123 	beq.w	80024d0 <PCD_EP_ISR_Handler+0x658>
      {
        ep = &hpcd->IN_ep[epindex];
 800228a:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800228e:	4613      	mov	r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	4413      	add	r3, r2
 8002294:	00db      	lsls	r3, r3, #3
 8002296:	3310      	adds	r3, #16
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	4413      	add	r3, r2
 800229c:	3304      	adds	r3, #4
 800229e:	637b      	str	r3, [r7, #52]	@ 0x34

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	461a      	mov	r2, r3
 80022a6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	4413      	add	r3, r2
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	4b39      	ldr	r3, [pc, #228]	@ (8002398 <PCD_EP_ISR_Handler+0x520>)
 80022b2:	4013      	ands	r3, r2
 80022b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	461a      	mov	r2, r3
 80022bc:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	4413      	add	r3, r2
 80022c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80022c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80022ca:	601a      	str	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 80022cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022ce:	78db      	ldrb	r3, [r3, #3]
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	f040 80b8 	bne.w	8002446 <PCD_EP_ISR_Handler+0x5ce>
        {
          ep->xfer_len = 0U;
 80022d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022d8:	2200      	movs	r2, #0
 80022da:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80022dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022de:	7b1b      	ldrb	r3, [r3, #12]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	f000 80a9 	beq.w	8002438 <PCD_EP_ISR_Handler+0x5c0>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80022e6:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80022e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d055      	beq.n	800239c <PCD_EP_ISR_Handler+0x524>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80022f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022f2:	785b      	ldrb	r3, [r3, #1]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d124      	bne.n	8002342 <PCD_EP_ISR_Handler+0x4ca>
 80022f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	00db      	lsls	r3, r3, #3
 80022fe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002302:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	00db      	lsls	r3, r3, #3
 800230e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002312:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002316:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	00db      	lsls	r3, r3, #3
 8002322:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002326:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	00db      	lsls	r3, r3, #3
 8002332:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002336:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800233a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	e07a      	b.n	8002438 <PCD_EP_ISR_Handler+0x5c0>
 8002342:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002344:	785b      	ldrb	r3, [r3, #1]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d176      	bne.n	8002438 <PCD_EP_ISR_Handler+0x5c0>
 800234a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002354:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002364:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002368:	b292      	uxth	r2, r2
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	00db      	lsls	r3, r3, #3
 8002372:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8002376:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 800237a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002384:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002388:	6812      	ldr	r2, [r2, #0]
 800238a:	601a      	str	r2, [r3, #0]
 800238c:	e054      	b.n	8002438 <PCD_EP_ISR_Handler+0x5c0>
 800238e:	bf00      	nop
 8002390:	07ff0f8f 	.word	0x07ff0f8f
 8002394:	07ff8f8f 	.word	0x07ff8f8f
 8002398:	07ff8f0f 	.word	0x07ff8f0f
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800239c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800239e:	785b      	ldrb	r3, [r3, #1]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d124      	bne.n	80023ee <PCD_EP_ISR_Handler+0x576>
 80023a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	00db      	lsls	r3, r3, #3
 80023aa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80023ae:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80023b2:	685a      	ldr	r2, [r3, #4]
 80023b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	00db      	lsls	r3, r3, #3
 80023ba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80023be:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80023c2:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80023c6:	605a      	str	r2, [r3, #4]
 80023c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	00db      	lsls	r3, r3, #3
 80023ce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80023d2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80023d6:	685a      	ldr	r2, [r3, #4]
 80023d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	00db      	lsls	r3, r3, #3
 80023de:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80023e2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80023e6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80023ea:	605a      	str	r2, [r3, #4]
 80023ec:	e024      	b.n	8002438 <PCD_EP_ISR_Handler+0x5c0>
 80023ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023f0:	785b      	ldrb	r3, [r3, #1]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d120      	bne.n	8002438 <PCD_EP_ISR_Handler+0x5c0>
 80023f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002400:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002404:	685a      	ldr	r2, [r3, #4]
 8002406:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	00db      	lsls	r3, r3, #3
 800240c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002410:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002414:	b292      	uxth	r2, r2
 8002416:	605a      	str	r2, [r3, #4]
 8002418:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	00db      	lsls	r3, r3, #3
 800241e:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8002422:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8002426:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002430:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002434:	6852      	ldr	r2, [r2, #4]
 8002436:	605a      	str	r2, [r3, #4]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002438:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	4619      	mov	r1, r3
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f006 fcfa 	bl	8008e38 <HAL_PCD_DataInStageCallback>
 8002444:	e044      	b.n	80024d0 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002446:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002448:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800244c:	2b00      	cmp	r3, #0
 800244e:	d139      	bne.n	80024c4 <PCD_EP_ISR_Handler+0x64c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002450:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	00db      	lsls	r3, r3, #3
 8002456:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800245a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	0c1b      	lsrs	r3, r3, #16
 8002462:	b29b      	uxth	r3, r3
 8002464:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002468:	84fb      	strh	r3, [r7, #38]	@ 0x26

            if (ep->xfer_len > TxPctSize)
 800246a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800246c:	699a      	ldr	r2, [r3, #24]
 800246e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002470:	429a      	cmp	r2, r3
 8002472:	d906      	bls.n	8002482 <PCD_EP_ISR_Handler+0x60a>
            {
              ep->xfer_len -= TxPctSize;
 8002474:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002476:	699a      	ldr	r2, [r3, #24]
 8002478:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800247a:	1ad2      	subs	r2, r2, r3
 800247c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800247e:	619a      	str	r2, [r3, #24]
 8002480:	e002      	b.n	8002488 <PCD_EP_ISR_Handler+0x610>
            }
            else
            {
              ep->xfer_len = 0U;
 8002482:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002484:	2200      	movs	r2, #0
 8002486:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002488:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800248a:	699b      	ldr	r3, [r3, #24]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d106      	bne.n	800249e <PCD_EP_ISR_Handler+0x626>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002490:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	4619      	mov	r1, r3
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f006 fcce 	bl	8008e38 <HAL_PCD_DataInStageCallback>
 800249c:	e018      	b.n	80024d0 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800249e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024a0:	695a      	ldr	r2, [r3, #20]
 80024a2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80024a4:	441a      	add	r2, r3
 80024a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024a8:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80024aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024ac:	69da      	ldr	r2, [r3, #28]
 80024ae:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80024b0:	441a      	add	r2, r3
 80024b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024b4:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80024bc:	4618      	mov	r0, r3
 80024be:	f003 fcd7 	bl	8005e70 <USB_EPStartXfer>
 80024c2:	e005      	b.n	80024d0 <PCD_EP_ISR_Handler+0x658>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80024c4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80024c6:	461a      	mov	r2, r3
 80024c8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 f8e8 	bl	80026a0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f47f acd1 	bne.w	8001e82 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3738      	adds	r7, #56	@ 0x38
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop

080024ec <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b08a      	sub	sp, #40	@ 0x28
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	4613      	mov	r3, r2
 80024f8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80024fa:	88fb      	ldrh	r3, [r7, #6]
 80024fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d062      	beq.n	80025ca <HAL_PCD_EP_DB_Receive+0xde>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	4619      	mov	r1, r3
 800250e:	4610      	mov	r0, r2
 8002510:	f7ff f879 	bl	8001606 <PCD_GET_EP_DBUF0_CNT>
 8002514:	4603      	mov	r3, r0
 8002516:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	699a      	ldr	r2, [r3, #24]
 800251c:	8bfb      	ldrh	r3, [r7, #30]
 800251e:	429a      	cmp	r2, r3
 8002520:	d306      	bcc.n	8002530 <HAL_PCD_EP_DB_Receive+0x44>
    {
      ep->xfer_len -= count;
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	699a      	ldr	r2, [r3, #24]
 8002526:	8bfb      	ldrh	r3, [r7, #30]
 8002528:	1ad2      	subs	r2, r2, r3
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	619a      	str	r2, [r3, #24]
 800252e:	e002      	b.n	8002536 <HAL_PCD_EP_DB_Receive+0x4a>
    }
    else
    {
      ep->xfer_len = 0U;
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	2200      	movs	r2, #0
 8002534:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	699b      	ldr	r3, [r3, #24]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d11b      	bne.n	8002576 <HAL_PCD_EP_DB_Receive+0x8a>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	461a      	mov	r2, r3
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	4413      	add	r3, r2
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	4b52      	ldr	r3, [pc, #328]	@ (8002698 <HAL_PCD_EP_DB_Receive+0x1ac>)
 8002550:	4013      	ands	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800255a:	61bb      	str	r3, [r7, #24]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	461a      	mov	r2, r3
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	441a      	add	r2, r3
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002570:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002574:	6013      	str	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002576:	88fb      	ldrh	r3, [r7, #6]
 8002578:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800257c:	2b00      	cmp	r3, #0
 800257e:	d017      	beq.n	80025b0 <HAL_PCD_EP_DB_Receive+0xc4>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	461a      	mov	r2, r3
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	4413      	add	r3, r2
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	4b42      	ldr	r3, [pc, #264]	@ (800269c <HAL_PCD_EP_DB_Receive+0x1b0>)
 8002592:	4013      	ands	r3, r2
 8002594:	617b      	str	r3, [r7, #20]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	461a      	mov	r2, r3
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	441a      	add	r2, r3
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80025aa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80025ae:	6013      	str	r3, [r2, #0]
    }

    if (count != 0U)
 80025b0:	8bfb      	ldrh	r3, [r7, #30]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d06b      	beq.n	800268e <HAL_PCD_EP_DB_Receive+0x1a2>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6818      	ldr	r0, [r3, #0]
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	6959      	ldr	r1, [r3, #20]
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	891a      	ldrh	r2, [r3, #8]
 80025c2:	8bfb      	ldrh	r3, [r7, #30]
 80025c4:	f004 fe2b 	bl	800721e <USB_ReadPMA>
 80025c8:	e061      	b.n	800268e <HAL_PCD_EP_DB_Receive+0x1a2>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	4619      	mov	r1, r3
 80025d4:	4610      	mov	r0, r2
 80025d6:	f7ff f837 	bl	8001648 <PCD_GET_EP_DBUF1_CNT>
 80025da:	4603      	mov	r3, r0
 80025dc:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	699a      	ldr	r2, [r3, #24]
 80025e2:	8bfb      	ldrh	r3, [r7, #30]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d306      	bcc.n	80025f6 <HAL_PCD_EP_DB_Receive+0x10a>
    {
      ep->xfer_len -= count;
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	699a      	ldr	r2, [r3, #24]
 80025ec:	8bfb      	ldrh	r3, [r7, #30]
 80025ee:	1ad2      	subs	r2, r2, r3
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	619a      	str	r2, [r3, #24]
 80025f4:	e002      	b.n	80025fc <HAL_PCD_EP_DB_Receive+0x110>
    }
    else
    {
      ep->xfer_len = 0U;
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	2200      	movs	r2, #0
 80025fa:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d11b      	bne.n	800263c <HAL_PCD_EP_DB_Receive+0x150>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	461a      	mov	r2, r3
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	4413      	add	r3, r2
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	4b20      	ldr	r3, [pc, #128]	@ (8002698 <HAL_PCD_EP_DB_Receive+0x1ac>)
 8002616:	4013      	ands	r3, r2
 8002618:	627b      	str	r3, [r7, #36]	@ 0x24
 800261a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800261c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002620:	627b      	str	r3, [r7, #36]	@ 0x24
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	461a      	mov	r2, r3
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	441a      	add	r2, r3
 8002630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002632:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002636:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800263a:	6013      	str	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800263c:	88fb      	ldrh	r3, [r7, #6]
 800263e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002642:	2b00      	cmp	r3, #0
 8002644:	d117      	bne.n	8002676 <HAL_PCD_EP_DB_Receive+0x18a>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	461a      	mov	r2, r3
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	4413      	add	r3, r2
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	4b11      	ldr	r3, [pc, #68]	@ (800269c <HAL_PCD_EP_DB_Receive+0x1b0>)
 8002658:	4013      	ands	r3, r2
 800265a:	623b      	str	r3, [r7, #32]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	461a      	mov	r2, r3
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	441a      	add	r2, r3
 800266a:	6a3b      	ldr	r3, [r7, #32]
 800266c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002670:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002674:	6013      	str	r3, [r2, #0]
    }

    if (count != 0U)
 8002676:	8bfb      	ldrh	r3, [r7, #30]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d008      	beq.n	800268e <HAL_PCD_EP_DB_Receive+0x1a2>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6818      	ldr	r0, [r3, #0]
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	6959      	ldr	r1, [r3, #20]
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	895a      	ldrh	r2, [r3, #10]
 8002688:	8bfb      	ldrh	r3, [r7, #30]
 800268a:	f004 fdc8 	bl	800721e <USB_ReadPMA>
    }
  }

  return count;
 800268e:	8bfb      	ldrh	r3, [r7, #30]
}
 8002690:	4618      	mov	r0, r3
 8002692:	3728      	adds	r7, #40	@ 0x28
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	07ffbf8f 	.word	0x07ffbf8f
 800269c:	07ff8f8f 	.word	0x07ff8f8f

080026a0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b08e      	sub	sp, #56	@ 0x38
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	4613      	mov	r3, r2
 80026ac:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80026ae:	88fb      	ldrh	r3, [r7, #6]
 80026b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	f000 81d5 	beq.w	8002a64 <HAL_PCD_EP_DB_Transmit+0x3c4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	4619      	mov	r1, r3
 80026c4:	4610      	mov	r0, r2
 80026c6:	f7fe ff9e 	bl	8001606 <PCD_GET_EP_DBUF0_CNT>
 80026ca:	4603      	mov	r3, r0
 80026cc:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len > TxPctSize)
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	699a      	ldr	r2, [r3, #24]
 80026d2:	8bfb      	ldrh	r3, [r7, #30]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d906      	bls.n	80026e6 <HAL_PCD_EP_DB_Transmit+0x46>
    {
      ep->xfer_len -= TxPctSize;
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	699a      	ldr	r2, [r3, #24]
 80026dc:	8bfb      	ldrh	r3, [r7, #30]
 80026de:	1ad2      	subs	r2, r2, r3
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	619a      	str	r2, [r3, #24]
 80026e4:	e002      	b.n	80026ec <HAL_PCD_EP_DB_Transmit+0x4c>
    }
    else
    {
      ep->xfer_len = 0U;
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	2200      	movs	r2, #0
 80026ea:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	f040 80c1 	bne.w	8002878 <HAL_PCD_EP_DB_Transmit+0x1d8>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	785b      	ldrb	r3, [r3, #1]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d124      	bne.n	8002748 <HAL_PCD_EP_DB_Transmit+0xa8>
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	00db      	lsls	r3, r3, #3
 8002704:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002708:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	00db      	lsls	r3, r3, #3
 8002714:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002718:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800271c:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8002720:	601a      	str	r2, [r3, #0]
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800272c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	00db      	lsls	r3, r3, #3
 8002738:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800273c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002740:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002744:	601a      	str	r2, [r3, #0]
 8002746:	e024      	b.n	8002792 <HAL_PCD_EP_DB_Transmit+0xf2>
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	785b      	ldrb	r3, [r3, #1]
 800274c:	2b01      	cmp	r3, #1
 800274e:	d120      	bne.n	8002792 <HAL_PCD_EP_DB_Transmit+0xf2>
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	00db      	lsls	r3, r3, #3
 8002756:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800275a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	00db      	lsls	r3, r3, #3
 8002766:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800276a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800276e:	b292      	uxth	r2, r2
 8002770:	601a      	str	r2, [r3, #0]
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 800277c:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	00db      	lsls	r3, r3, #3
 8002786:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800278a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800278e:	6812      	ldr	r2, [r2, #0]
 8002790:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	785b      	ldrb	r3, [r3, #1]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d124      	bne.n	80027e4 <HAL_PCD_EP_DB_Transmit+0x144>
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	00db      	lsls	r3, r3, #3
 80027a0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80027a4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80027a8:	685a      	ldr	r2, [r3, #4]
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	00db      	lsls	r3, r3, #3
 80027b0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80027b4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80027b8:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80027bc:	605a      	str	r2, [r3, #4]
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80027c8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80027cc:	685a      	ldr	r2, [r3, #4]
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	00db      	lsls	r3, r3, #3
 80027d4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80027d8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80027dc:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80027e0:	605a      	str	r2, [r3, #4]
 80027e2:	e024      	b.n	800282e <HAL_PCD_EP_DB_Transmit+0x18e>
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	785b      	ldrb	r3, [r3, #1]
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d120      	bne.n	800282e <HAL_PCD_EP_DB_Transmit+0x18e>
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	00db      	lsls	r3, r3, #3
 80027f2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80027f6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80027fa:	685a      	ldr	r2, [r3, #4]
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	00db      	lsls	r3, r3, #3
 8002802:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002806:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800280a:	b292      	uxth	r2, r2
 800280c:	605a      	str	r2, [r3, #4]
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8002818:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	00db      	lsls	r3, r3, #3
 8002822:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002826:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800282a:	6852      	ldr	r2, [r2, #4]
 800282c:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	4619      	mov	r1, r3
 8002834:	68f8      	ldr	r0, [r7, #12]
 8002836:	f006 faff 	bl	8008e38 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800283a:	88fb      	ldrh	r3, [r7, #6]
 800283c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002840:	2b00      	cmp	r3, #0
 8002842:	f000 82e5 	beq.w	8002e10 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	461a      	mov	r2, r3
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	4413      	add	r3, r2
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	4b8e      	ldr	r3, [pc, #568]	@ (8002a90 <HAL_PCD_EP_DB_Transmit+0x3f0>)
 8002858:	4013      	ands	r3, r2
 800285a:	637b      	str	r3, [r7, #52]	@ 0x34
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	461a      	mov	r2, r3
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	441a      	add	r2, r3
 800286a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800286c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002870:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002874:	6013      	str	r3, [r2, #0]
 8002876:	e2cb      	b.n	8002e10 <HAL_PCD_EP_DB_Transmit+0x770>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002878:	88fb      	ldrh	r3, [r7, #6]
 800287a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d017      	beq.n	80028b2 <HAL_PCD_EP_DB_Transmit+0x212>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	461a      	mov	r2, r3
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	4413      	add	r3, r2
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	4b7f      	ldr	r3, [pc, #508]	@ (8002a90 <HAL_PCD_EP_DB_Transmit+0x3f0>)
 8002894:	4013      	ands	r3, r2
 8002896:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	461a      	mov	r2, r3
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	441a      	add	r2, r3
 80028a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028a8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80028ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028b0:	6013      	str	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	f040 82a9 	bne.w	8002e10 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        ep->xfer_buff += TxPctSize;
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	695a      	ldr	r2, [r3, #20]
 80028c2:	8bfb      	ldrh	r3, [r7, #30]
 80028c4:	441a      	add	r2, r3
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	69da      	ldr	r2, [r3, #28]
 80028ce:	8bfb      	ldrh	r3, [r7, #30]
 80028d0:	441a      	add	r2, r3
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	6a1a      	ldr	r2, [r3, #32]
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	429a      	cmp	r2, r3
 80028e0:	d309      	bcc.n	80028f6 <HAL_PCD_EP_DB_Transmit+0x256>
        {
          len = ep->maxpacket;
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	6a1a      	ldr	r2, [r3, #32]
 80028ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ee:	1ad2      	subs	r2, r2, r3
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	621a      	str	r2, [r3, #32]
 80028f4:	e014      	b.n	8002920 <HAL_PCD_EP_DB_Transmit+0x280>
        }
        else if (ep->xfer_len_db == 0U)
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	6a1b      	ldr	r3, [r3, #32]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d106      	bne.n	800290c <HAL_PCD_EP_DB_Transmit+0x26c>
        {
          len = TxPctSize;
 80028fe:	8bfb      	ldrh	r3, [r7, #30]
 8002900:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800290a:	e009      	b.n	8002920 <HAL_PCD_EP_DB_Transmit+0x280>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	6a1b      	ldr	r3, [r3, #32]
 8002918:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	2200      	movs	r2, #0
 800291e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	785b      	ldrb	r3, [r3, #1]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d16a      	bne.n	80029fe <HAL_PCD_EP_DB_Transmit+0x35e>
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	00db      	lsls	r3, r3, #3
 800292e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002932:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	00db      	lsls	r3, r3, #3
 800293e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002942:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002946:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800294a:	601a      	str	r2, [r3, #0]
 800294c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800294e:	2b00      	cmp	r3, #0
 8002950:	d112      	bne.n	8002978 <HAL_PCD_EP_DB_Transmit+0x2d8>
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800295c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800296c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002970:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002974:	601a      	str	r2, [r3, #0]
 8002976:	e06a      	b.n	8002a4e <HAL_PCD_EP_DB_Transmit+0x3ae>
 8002978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800297a:	2b3e      	cmp	r3, #62	@ 0x3e
 800297c:	d81e      	bhi.n	80029bc <HAL_PCD_EP_DB_Transmit+0x31c>
 800297e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002980:	085b      	lsrs	r3, r3, #1
 8002982:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	2b00      	cmp	r3, #0
 800298c:	d002      	beq.n	8002994 <HAL_PCD_EP_DB_Transmit+0x2f4>
 800298e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002990:	3301      	adds	r3, #1
 8002992:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	00db      	lsls	r3, r3, #3
 800299a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800299e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80029a2:	6819      	ldr	r1, [r3, #0]
 80029a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029a6:	069a      	lsls	r2, r3, #26
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	00db      	lsls	r3, r3, #3
 80029ae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80029b2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80029b6:	430a      	orrs	r2, r1
 80029b8:	601a      	str	r2, [r3, #0]
 80029ba:	e048      	b.n	8002a4e <HAL_PCD_EP_DB_Transmit+0x3ae>
 80029bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029be:	095b      	lsrs	r3, r3, #5
 80029c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c4:	f003 031f 	and.w	r3, r3, #31
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d102      	bne.n	80029d2 <HAL_PCD_EP_DB_Transmit+0x332>
 80029cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029ce:	3b01      	subs	r3, #1
 80029d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80029dc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029e4:	069b      	lsls	r3, r3, #26
 80029e6:	431a      	orrs	r2, r3
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80029f2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80029f6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80029fa:	601a      	str	r2, [r3, #0]
 80029fc:	e027      	b.n	8002a4e <HAL_PCD_EP_DB_Transmit+0x3ae>
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	785b      	ldrb	r3, [r3, #1]
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d123      	bne.n	8002a4e <HAL_PCD_EP_DB_Transmit+0x3ae>
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	00db      	lsls	r3, r3, #3
 8002a0c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002a10:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	00db      	lsls	r3, r3, #3
 8002a1c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002a20:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002a24:	b292      	uxth	r2, r2
 8002a26:	601a      	str	r2, [r3, #0]
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	00db      	lsls	r3, r3, #3
 8002a2e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002a32:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002a36:	6819      	ldr	r1, [r3, #0]
 8002a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a3a:	041a      	lsls	r2, r3, #16
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	00db      	lsls	r3, r3, #3
 8002a42:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002a46:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	601a      	str	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6818      	ldr	r0, [r3, #0]
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	6959      	ldr	r1, [r3, #20]
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	891a      	ldrh	r2, [r3, #8]
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	f004 fb7d 	bl	800715c <USB_WritePMA>
 8002a62:	e1d5      	b.n	8002e10 <HAL_PCD_EP_DB_Transmit+0x770>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	4610      	mov	r0, r2
 8002a70:	f7fe fdea 	bl	8001648 <PCD_GET_EP_DBUF1_CNT>
 8002a74:	4603      	mov	r3, r0
 8002a76:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= TxPctSize)
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	699a      	ldr	r2, [r3, #24]
 8002a7c:	8bfb      	ldrh	r3, [r7, #30]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d308      	bcc.n	8002a94 <HAL_PCD_EP_DB_Transmit+0x3f4>
    {
      ep->xfer_len -= TxPctSize;
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	699a      	ldr	r2, [r3, #24]
 8002a86:	8bfb      	ldrh	r3, [r7, #30]
 8002a88:	1ad2      	subs	r2, r2, r3
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	619a      	str	r2, [r3, #24]
 8002a8e:	e004      	b.n	8002a9a <HAL_PCD_EP_DB_Transmit+0x3fa>
 8002a90:	07ff8f8f 	.word	0x07ff8f8f
    }
    else
    {
      ep->xfer_len = 0U;
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	2200      	movs	r2, #0
 8002a98:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f040 80c1 	bne.w	8002c26 <HAL_PCD_EP_DB_Transmit+0x586>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	785b      	ldrb	r3, [r3, #1]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d124      	bne.n	8002af6 <HAL_PCD_EP_DB_Transmit+0x456>
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	00db      	lsls	r3, r3, #3
 8002ab2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002ab6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	00db      	lsls	r3, r3, #3
 8002ac2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002ac6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002aca:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8002ace:	601a      	str	r2, [r3, #0]
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	00db      	lsls	r3, r3, #3
 8002ad6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002ada:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	00db      	lsls	r3, r3, #3
 8002ae6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002aea:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002aee:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002af2:	601a      	str	r2, [r3, #0]
 8002af4:	e024      	b.n	8002b40 <HAL_PCD_EP_DB_Transmit+0x4a0>
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	785b      	ldrb	r3, [r3, #1]
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d120      	bne.n	8002b40 <HAL_PCD_EP_DB_Transmit+0x4a0>
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002b08:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002b18:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002b1c:	b292      	uxth	r2, r2
 8002b1e:	601a      	str	r2, [r3, #0]
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	00db      	lsls	r3, r3, #3
 8002b26:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8002b2a:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002b38:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002b3c:	6812      	ldr	r2, [r2, #0]
 8002b3e:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	785b      	ldrb	r3, [r3, #1]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d124      	bne.n	8002b92 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	00db      	lsls	r3, r3, #3
 8002b4e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002b52:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002b56:	685a      	ldr	r2, [r3, #4]
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	00db      	lsls	r3, r3, #3
 8002b5e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002b62:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002b66:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8002b6a:	605a      	str	r2, [r3, #4]
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	00db      	lsls	r3, r3, #3
 8002b72:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002b76:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002b7a:	685a      	ldr	r2, [r3, #4]
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	00db      	lsls	r3, r3, #3
 8002b82:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002b86:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002b8a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002b8e:	605a      	str	r2, [r3, #4]
 8002b90:	e024      	b.n	8002bdc <HAL_PCD_EP_DB_Transmit+0x53c>
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	785b      	ldrb	r3, [r3, #1]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d120      	bne.n	8002bdc <HAL_PCD_EP_DB_Transmit+0x53c>
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002ba4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002ba8:	685a      	ldr	r2, [r3, #4]
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002bb4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002bb8:	b292      	uxth	r2, r2
 8002bba:	605a      	str	r2, [r3, #4]
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	00db      	lsls	r3, r3, #3
 8002bc2:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8002bc6:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002bd4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002bd8:	6852      	ldr	r2, [r2, #4]
 8002bda:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	4619      	mov	r1, r3
 8002be2:	68f8      	ldr	r0, [r7, #12]
 8002be4:	f006 f928 	bl	8008e38 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002be8:	88fb      	ldrh	r3, [r7, #6]
 8002bea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	f040 810e 	bne.w	8002e10 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	4413      	add	r3, r2
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	4b95      	ldr	r3, [pc, #596]	@ (8002e5c <HAL_PCD_EP_DB_Transmit+0x7bc>)
 8002c06:	4013      	ands	r3, r2
 8002c08:	623b      	str	r3, [r7, #32]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	461a      	mov	r2, r3
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	441a      	add	r2, r3
 8002c18:	6a3b      	ldr	r3, [r7, #32]
 8002c1a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002c1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c22:	6013      	str	r3, [r2, #0]
 8002c24:	e0f4      	b.n	8002e10 <HAL_PCD_EP_DB_Transmit+0x770>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002c26:	88fb      	ldrh	r3, [r7, #6]
 8002c28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d117      	bne.n	8002c60 <HAL_PCD_EP_DB_Transmit+0x5c0>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	461a      	mov	r2, r3
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	4413      	add	r3, r2
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	4b86      	ldr	r3, [pc, #536]	@ (8002e5c <HAL_PCD_EP_DB_Transmit+0x7bc>)
 8002c42:	4013      	ands	r3, r2
 8002c44:	617b      	str	r3, [r7, #20]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	441a      	add	r2, r3
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002c5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c5e:	6013      	str	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	f040 80d2 	bne.w	8002e10 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        ep->xfer_buff += TxPctSize;
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	695a      	ldr	r2, [r3, #20]
 8002c70:	8bfb      	ldrh	r3, [r7, #30]
 8002c72:	441a      	add	r2, r3
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	69da      	ldr	r2, [r3, #28]
 8002c7c:	8bfb      	ldrh	r3, [r7, #30]
 8002c7e:	441a      	add	r2, r3
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	6a1a      	ldr	r2, [r3, #32]
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	691b      	ldr	r3, [r3, #16]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d309      	bcc.n	8002ca4 <HAL_PCD_EP_DB_Transmit+0x604>
        {
          len = ep->maxpacket;
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	6a1a      	ldr	r2, [r3, #32]
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c9c:	1ad2      	subs	r2, r2, r3
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	621a      	str	r2, [r3, #32]
 8002ca2:	e014      	b.n	8002cce <HAL_PCD_EP_DB_Transmit+0x62e>
        }
        else if (ep->xfer_len_db == 0U)
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	6a1b      	ldr	r3, [r3, #32]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d106      	bne.n	8002cba <HAL_PCD_EP_DB_Transmit+0x61a>
        {
          len = TxPctSize;
 8002cac:	8bfb      	ldrh	r3, [r7, #30]
 8002cae:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002cb8:	e009      	b.n	8002cce <HAL_PCD_EP_DB_Transmit+0x62e>
        }
        else
        {
          len = ep->xfer_len_db;
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	6a1b      	ldr	r3, [r3, #32]
 8002cbe:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	785b      	ldrb	r3, [r3, #1]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d16a      	bne.n	8002dac <HAL_PCD_EP_DB_Transmit+0x70c>
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	00db      	lsls	r3, r3, #3
 8002cdc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002ce0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002ce4:	685a      	ldr	r2, [r3, #4]
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	00db      	lsls	r3, r3, #3
 8002cec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002cf0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002cf4:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8002cf8:	605a      	str	r2, [r3, #4]
 8002cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d112      	bne.n	8002d26 <HAL_PCD_EP_DB_Transmit+0x686>
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002d0a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002d0e:	685a      	ldr	r2, [r3, #4]
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	00db      	lsls	r3, r3, #3
 8002d16:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002d1a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002d1e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002d22:	605a      	str	r2, [r3, #4]
 8002d24:	e06a      	b.n	8002dfc <HAL_PCD_EP_DB_Transmit+0x75c>
 8002d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d28:	2b3e      	cmp	r3, #62	@ 0x3e
 8002d2a:	d81e      	bhi.n	8002d6a <HAL_PCD_EP_DB_Transmit+0x6ca>
 8002d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d2e:	085b      	lsrs	r3, r3, #1
 8002d30:	61bb      	str	r3, [r7, #24]
 8002d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d34:	f003 0301 	and.w	r3, r3, #1
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d002      	beq.n	8002d42 <HAL_PCD_EP_DB_Transmit+0x6a2>
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	3301      	adds	r3, #1
 8002d40:	61bb      	str	r3, [r7, #24]
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002d4c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002d50:	6859      	ldr	r1, [r3, #4]
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	069a      	lsls	r2, r3, #26
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	00db      	lsls	r3, r3, #3
 8002d5c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002d60:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002d64:	430a      	orrs	r2, r1
 8002d66:	605a      	str	r2, [r3, #4]
 8002d68:	e048      	b.n	8002dfc <HAL_PCD_EP_DB_Transmit+0x75c>
 8002d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d6c:	095b      	lsrs	r3, r3, #5
 8002d6e:	61bb      	str	r3, [r7, #24]
 8002d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d72:	f003 031f 	and.w	r3, r3, #31
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d102      	bne.n	8002d80 <HAL_PCD_EP_DB_Transmit+0x6e0>
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	3b01      	subs	r3, #1
 8002d7e:	61bb      	str	r3, [r7, #24]
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	00db      	lsls	r3, r3, #3
 8002d86:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002d8a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002d8e:	685a      	ldr	r2, [r3, #4]
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	069b      	lsls	r3, r3, #26
 8002d94:	431a      	orrs	r2, r3
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002da0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002da4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002da8:	605a      	str	r2, [r3, #4]
 8002daa:	e027      	b.n	8002dfc <HAL_PCD_EP_DB_Transmit+0x75c>
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	785b      	ldrb	r3, [r3, #1]
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d123      	bne.n	8002dfc <HAL_PCD_EP_DB_Transmit+0x75c>
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	00db      	lsls	r3, r3, #3
 8002dba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002dbe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002dc2:	685a      	ldr	r2, [r3, #4]
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	00db      	lsls	r3, r3, #3
 8002dca:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002dce:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002dd2:	b292      	uxth	r2, r2
 8002dd4:	605a      	str	r2, [r3, #4]
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002de0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002de4:	6859      	ldr	r1, [r3, #4]
 8002de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de8:	041a      	lsls	r2, r3, #16
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002df4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	605a      	str	r2, [r3, #4]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6818      	ldr	r0, [r3, #0]
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	6959      	ldr	r1, [r3, #20]
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	895a      	ldrh	r2, [r3, #10]
 8002e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	f004 f9a6 	bl	800715c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	461a      	mov	r2, r3
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	4413      	add	r3, r2
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	4b0f      	ldr	r3, [pc, #60]	@ (8002e60 <HAL_PCD_EP_DB_Transmit+0x7c0>)
 8002e22:	4013      	ands	r3, r2
 8002e24:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e28:	f083 0310 	eor.w	r3, r3, #16
 8002e2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e30:	f083 0320 	eor.w	r3, r3, #32
 8002e34:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	441a      	add	r2, r3
 8002e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e4e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3738      	adds	r7, #56	@ 0x38
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	07ff8f8f 	.word	0x07ff8f8f
 8002e60:	07ff8fbf 	.word	0x07ff8fbf

08002e64 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b087      	sub	sp, #28
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	607b      	str	r3, [r7, #4]
 8002e6e:	460b      	mov	r3, r1
 8002e70:	817b      	strh	r3, [r7, #10]
 8002e72:	4613      	mov	r3, r2
 8002e74:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002e76:	897b      	ldrh	r3, [r7, #10]
 8002e78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d00c      	beq.n	8002e9c <HAL_PCDEx_PMAConfig+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e82:	897b      	ldrh	r3, [r7, #10]
 8002e84:	f003 0207 	and.w	r2, r3, #7
 8002e88:	4613      	mov	r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	4413      	add	r3, r2
 8002e8e:	00db      	lsls	r3, r3, #3
 8002e90:	3310      	adds	r3, #16
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	4413      	add	r3, r2
 8002e96:	3304      	adds	r3, #4
 8002e98:	617b      	str	r3, [r7, #20]
 8002e9a:	e00a      	b.n	8002eb2 <HAL_PCDEx_PMAConfig+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e9c:	897a      	ldrh	r2, [r7, #10]
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	4413      	add	r3, r2
 8002ea4:	00db      	lsls	r3, r3, #3
 8002ea6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	4413      	add	r3, r2
 8002eae:	3304      	adds	r3, #4
 8002eb0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002eb2:	893b      	ldrh	r3, [r7, #8]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d107      	bne.n	8002ec8 <HAL_PCDEx_PMAConfig+0x64>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	b29a      	uxth	r2, r3
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	80da      	strh	r2, [r3, #6]
 8002ec6:	e00b      	b.n	8002ee0 <HAL_PCDEx_PMAConfig+0x7c>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	b29a      	uxth	r2, r3
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	0c1b      	lsrs	r3, r3, #16
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	371c      	adds	r7, #28
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr

08002eee <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	b085      	sub	sp, #20
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
  hpcd->LPM_State = LPM_L0;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f10:	f043 0201 	orr.w	r2, r3, #1
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	655a      	str	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f1c:	f043 0202 	orr.w	r2, r3, #2
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	655a      	str	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3714      	adds	r7, #20
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr

08002f32 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002f32:	b480      	push	{r7}
 8002f34:	b083      	sub	sp, #12
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002f3e:	bf00      	nop
 8002f40:	370c      	adds	r7, #12
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
	...

08002f4c <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->USBSCR, PWR_USBSCR_USB33SV);
 8002f50:	4b05      	ldr	r3, [pc, #20]	@ (8002f68 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002f52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f54:	4a04      	ldr	r2, [pc, #16]	@ (8002f68 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002f56:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002f5a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002f5c:	bf00      	nop
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	44020800 	.word	0x44020800

08002f6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b088      	sub	sp, #32
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d102      	bne.n	8002f80 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	f000 bc28 	b.w	80037d0 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f80:	4b94      	ldr	r3, [pc, #592]	@ (80031d4 <HAL_RCC_OscConfig+0x268>)
 8002f82:	69db      	ldr	r3, [r3, #28]
 8002f84:	f003 0318 	and.w	r3, r3, #24
 8002f88:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8002f8a:	4b92      	ldr	r3, [pc, #584]	@ (80031d4 <HAL_RCC_OscConfig+0x268>)
 8002f8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f8e:	f003 0303 	and.w	r3, r3, #3
 8002f92:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0310 	and.w	r3, r3, #16
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d05b      	beq.n	8003058 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	2b08      	cmp	r3, #8
 8002fa4:	d005      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x46>
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	2b18      	cmp	r3, #24
 8002faa:	d114      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d111      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	69db      	ldr	r3, [r3, #28]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d102      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	f000 bc08 	b.w	80037d0 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8002fc0:	4b84      	ldr	r3, [pc, #528]	@ (80031d4 <HAL_RCC_OscConfig+0x268>)
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a1b      	ldr	r3, [r3, #32]
 8002fcc:	041b      	lsls	r3, r3, #16
 8002fce:	4981      	ldr	r1, [pc, #516]	@ (80031d4 <HAL_RCC_OscConfig+0x268>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8002fd4:	e040      	b.n	8003058 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	69db      	ldr	r3, [r3, #28]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d023      	beq.n	8003026 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002fde:	4b7d      	ldr	r3, [pc, #500]	@ (80031d4 <HAL_RCC_OscConfig+0x268>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a7c      	ldr	r2, [pc, #496]	@ (80031d4 <HAL_RCC_OscConfig+0x268>)
 8002fe4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fe8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fea:	f7fd fe05 	bl	8000bf8 <HAL_GetTick>
 8002fee:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002ff0:	e008      	b.n	8003004 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8002ff2:	f7fd fe01 	bl	8000bf8 <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d901      	bls.n	8003004 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e3e5      	b.n	80037d0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003004:	4b73      	ldr	r3, [pc, #460]	@ (80031d4 <HAL_RCC_OscConfig+0x268>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800300c:	2b00      	cmp	r3, #0
 800300e:	d0f0      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8003010:	4b70      	ldr	r3, [pc, #448]	@ (80031d4 <HAL_RCC_OscConfig+0x268>)
 8003012:	699b      	ldr	r3, [r3, #24]
 8003014:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a1b      	ldr	r3, [r3, #32]
 800301c:	041b      	lsls	r3, r3, #16
 800301e:	496d      	ldr	r1, [pc, #436]	@ (80031d4 <HAL_RCC_OscConfig+0x268>)
 8003020:	4313      	orrs	r3, r2
 8003022:	618b      	str	r3, [r1, #24]
 8003024:	e018      	b.n	8003058 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003026:	4b6b      	ldr	r3, [pc, #428]	@ (80031d4 <HAL_RCC_OscConfig+0x268>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a6a      	ldr	r2, [pc, #424]	@ (80031d4 <HAL_RCC_OscConfig+0x268>)
 800302c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003030:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003032:	f7fd fde1 	bl	8000bf8 <HAL_GetTick>
 8003036:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003038:	e008      	b.n	800304c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800303a:	f7fd fddd 	bl	8000bf8 <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	2b02      	cmp	r3, #2
 8003046:	d901      	bls.n	800304c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e3c1      	b.n	80037d0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 800304c:	4b61      	ldr	r3, [pc, #388]	@ (80031d4 <HAL_RCC_OscConfig+0x268>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003054:	2b00      	cmp	r3, #0
 8003056:	d1f0      	bne.n	800303a <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0301 	and.w	r3, r3, #1
 8003060:	2b00      	cmp	r3, #0
 8003062:	f000 80a0 	beq.w	80031a6 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	2b10      	cmp	r3, #16
 800306a:	d005      	beq.n	8003078 <HAL_RCC_OscConfig+0x10c>
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	2b18      	cmp	r3, #24
 8003070:	d109      	bne.n	8003086 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	2b03      	cmp	r3, #3
 8003076:	d106      	bne.n	8003086 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	2b00      	cmp	r3, #0
 800307e:	f040 8092 	bne.w	80031a6 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e3a4      	b.n	80037d0 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800308e:	d106      	bne.n	800309e <HAL_RCC_OscConfig+0x132>
 8003090:	4b50      	ldr	r3, [pc, #320]	@ (80031d4 <HAL_RCC_OscConfig+0x268>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a4f      	ldr	r2, [pc, #316]	@ (80031d4 <HAL_RCC_OscConfig+0x268>)
 8003096:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800309a:	6013      	str	r3, [r2, #0]
 800309c:	e058      	b.n	8003150 <HAL_RCC_OscConfig+0x1e4>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d112      	bne.n	80030cc <HAL_RCC_OscConfig+0x160>
 80030a6:	4b4b      	ldr	r3, [pc, #300]	@ (80031d4 <HAL_RCC_OscConfig+0x268>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a4a      	ldr	r2, [pc, #296]	@ (80031d4 <HAL_RCC_OscConfig+0x268>)
 80030ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030b0:	6013      	str	r3, [r2, #0]
 80030b2:	4b48      	ldr	r3, [pc, #288]	@ (80031d4 <HAL_RCC_OscConfig+0x268>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a47      	ldr	r2, [pc, #284]	@ (80031d4 <HAL_RCC_OscConfig+0x268>)
 80030b8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80030bc:	6013      	str	r3, [r2, #0]
 80030be:	4b45      	ldr	r3, [pc, #276]	@ (80031d4 <HAL_RCC_OscConfig+0x268>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a44      	ldr	r2, [pc, #272]	@ (80031d4 <HAL_RCC_OscConfig+0x268>)
 80030c4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030c8:	6013      	str	r3, [r2, #0]
 80030ca:	e041      	b.n	8003150 <HAL_RCC_OscConfig+0x1e4>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030d4:	d112      	bne.n	80030fc <HAL_RCC_OscConfig+0x190>
 80030d6:	4b3f      	ldr	r3, [pc, #252]	@ (80031d4 <HAL_RCC_OscConfig+0x268>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a3e      	ldr	r2, [pc, #248]	@ (80031d4 <HAL_RCC_OscConfig+0x268>)
 80030dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030e0:	6013      	str	r3, [r2, #0]
 80030e2:	4b3c      	ldr	r3, [pc, #240]	@ (80031d4 <HAL_RCC_OscConfig+0x268>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a3b      	ldr	r2, [pc, #236]	@ (80031d4 <HAL_RCC_OscConfig+0x268>)
 80030e8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80030ec:	6013      	str	r3, [r2, #0]
 80030ee:	4b39      	ldr	r3, [pc, #228]	@ (80031d4 <HAL_RCC_OscConfig+0x268>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a38      	ldr	r2, [pc, #224]	@ (80031d4 <HAL_RCC_OscConfig+0x268>)
 80030f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030f8:	6013      	str	r3, [r2, #0]
 80030fa:	e029      	b.n	8003150 <HAL_RCC_OscConfig+0x1e4>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8003104:	d112      	bne.n	800312c <HAL_RCC_OscConfig+0x1c0>
 8003106:	4b33      	ldr	r3, [pc, #204]	@ (80031d4 <HAL_RCC_OscConfig+0x268>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a32      	ldr	r2, [pc, #200]	@ (80031d4 <HAL_RCC_OscConfig+0x268>)
 800310c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003110:	6013      	str	r3, [r2, #0]
 8003112:	4b30      	ldr	r3, [pc, #192]	@ (80031d4 <HAL_RCC_OscConfig+0x268>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a2f      	ldr	r2, [pc, #188]	@ (80031d4 <HAL_RCC_OscConfig+0x268>)
 8003118:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800311c:	6013      	str	r3, [r2, #0]
 800311e:	4b2d      	ldr	r3, [pc, #180]	@ (80031d4 <HAL_RCC_OscConfig+0x268>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a2c      	ldr	r2, [pc, #176]	@ (80031d4 <HAL_RCC_OscConfig+0x268>)
 8003124:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003128:	6013      	str	r3, [r2, #0]
 800312a:	e011      	b.n	8003150 <HAL_RCC_OscConfig+0x1e4>
 800312c:	4b29      	ldr	r3, [pc, #164]	@ (80031d4 <HAL_RCC_OscConfig+0x268>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a28      	ldr	r2, [pc, #160]	@ (80031d4 <HAL_RCC_OscConfig+0x268>)
 8003132:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003136:	6013      	str	r3, [r2, #0]
 8003138:	4b26      	ldr	r3, [pc, #152]	@ (80031d4 <HAL_RCC_OscConfig+0x268>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a25      	ldr	r2, [pc, #148]	@ (80031d4 <HAL_RCC_OscConfig+0x268>)
 800313e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003142:	6013      	str	r3, [r2, #0]
 8003144:	4b23      	ldr	r3, [pc, #140]	@ (80031d4 <HAL_RCC_OscConfig+0x268>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a22      	ldr	r2, [pc, #136]	@ (80031d4 <HAL_RCC_OscConfig+0x268>)
 800314a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800314e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d013      	beq.n	8003180 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003158:	f7fd fd4e 	bl	8000bf8 <HAL_GetTick>
 800315c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800315e:	e008      	b.n	8003172 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003160:	f7fd fd4a 	bl	8000bf8 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b64      	cmp	r3, #100	@ 0x64
 800316c:	d901      	bls.n	8003172 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e32e      	b.n	80037d0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003172:	4b18      	ldr	r3, [pc, #96]	@ (80031d4 <HAL_RCC_OscConfig+0x268>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d0f0      	beq.n	8003160 <HAL_RCC_OscConfig+0x1f4>
 800317e:	e012      	b.n	80031a6 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003180:	f7fd fd3a 	bl	8000bf8 <HAL_GetTick>
 8003184:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003186:	e008      	b.n	800319a <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003188:	f7fd fd36 	bl	8000bf8 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	2b64      	cmp	r3, #100	@ 0x64
 8003194:	d901      	bls.n	800319a <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e31a      	b.n	80037d0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800319a:	4b0e      	ldr	r3, [pc, #56]	@ (80031d4 <HAL_RCC_OscConfig+0x268>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1f0      	bne.n	8003188 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	f000 809a 	beq.w	80032e8 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d005      	beq.n	80031c6 <HAL_RCC_OscConfig+0x25a>
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	2b18      	cmp	r3, #24
 80031be:	d149      	bne.n	8003254 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d146      	bne.n	8003254 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d104      	bne.n	80031d8 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e2fe      	b.n	80037d0 <HAL_RCC_OscConfig+0x864>
 80031d2:	bf00      	nop
 80031d4:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d11c      	bne.n	8003218 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 80031de:	4b9a      	ldr	r3, [pc, #616]	@ (8003448 <HAL_RCC_OscConfig+0x4dc>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0218 	and.w	r2, r3, #24
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d014      	beq.n	8003218 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80031ee:	4b96      	ldr	r3, [pc, #600]	@ (8003448 <HAL_RCC_OscConfig+0x4dc>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f023 0218 	bic.w	r2, r3, #24
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	4993      	ldr	r1, [pc, #588]	@ (8003448 <HAL_RCC_OscConfig+0x4dc>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8003200:	f000 fdd0 	bl	8003da4 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003204:	4b91      	ldr	r3, [pc, #580]	@ (800344c <HAL_RCC_OscConfig+0x4e0>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4618      	mov	r0, r3
 800320a:	f7fd fc6b 	bl	8000ae4 <HAL_InitTick>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d001      	beq.n	8003218 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e2db      	b.n	80037d0 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003218:	f7fd fcee 	bl	8000bf8 <HAL_GetTick>
 800321c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800321e:	e008      	b.n	8003232 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003220:	f7fd fcea 	bl	8000bf8 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b02      	cmp	r3, #2
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e2ce      	b.n	80037d0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003232:	4b85      	ldr	r3, [pc, #532]	@ (8003448 <HAL_RCC_OscConfig+0x4dc>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d0f0      	beq.n	8003220 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800323e:	4b82      	ldr	r3, [pc, #520]	@ (8003448 <HAL_RCC_OscConfig+0x4dc>)
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	041b      	lsls	r3, r3, #16
 800324c:	497e      	ldr	r1, [pc, #504]	@ (8003448 <HAL_RCC_OscConfig+0x4dc>)
 800324e:	4313      	orrs	r3, r2
 8003250:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8003252:	e049      	b.n	80032e8 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d02c      	beq.n	80032b6 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800325c:	4b7a      	ldr	r3, [pc, #488]	@ (8003448 <HAL_RCC_OscConfig+0x4dc>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f023 0218 	bic.w	r2, r3, #24
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	691b      	ldr	r3, [r3, #16]
 8003268:	4977      	ldr	r1, [pc, #476]	@ (8003448 <HAL_RCC_OscConfig+0x4dc>)
 800326a:	4313      	orrs	r3, r2
 800326c:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 800326e:	4b76      	ldr	r3, [pc, #472]	@ (8003448 <HAL_RCC_OscConfig+0x4dc>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a75      	ldr	r2, [pc, #468]	@ (8003448 <HAL_RCC_OscConfig+0x4dc>)
 8003274:	f043 0301 	orr.w	r3, r3, #1
 8003278:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800327a:	f7fd fcbd 	bl	8000bf8 <HAL_GetTick>
 800327e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003280:	e008      	b.n	8003294 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003282:	f7fd fcb9 	bl	8000bf8 <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	2b02      	cmp	r3, #2
 800328e:	d901      	bls.n	8003294 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e29d      	b.n	80037d0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003294:	4b6c      	ldr	r3, [pc, #432]	@ (8003448 <HAL_RCC_OscConfig+0x4dc>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0302 	and.w	r3, r3, #2
 800329c:	2b00      	cmp	r3, #0
 800329e:	d0f0      	beq.n	8003282 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80032a0:	4b69      	ldr	r3, [pc, #420]	@ (8003448 <HAL_RCC_OscConfig+0x4dc>)
 80032a2:	691b      	ldr	r3, [r3, #16]
 80032a4:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	695b      	ldr	r3, [r3, #20]
 80032ac:	041b      	lsls	r3, r3, #16
 80032ae:	4966      	ldr	r1, [pc, #408]	@ (8003448 <HAL_RCC_OscConfig+0x4dc>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	610b      	str	r3, [r1, #16]
 80032b4:	e018      	b.n	80032e8 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032b6:	4b64      	ldr	r3, [pc, #400]	@ (8003448 <HAL_RCC_OscConfig+0x4dc>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a63      	ldr	r2, [pc, #396]	@ (8003448 <HAL_RCC_OscConfig+0x4dc>)
 80032bc:	f023 0301 	bic.w	r3, r3, #1
 80032c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c2:	f7fd fc99 	bl	8000bf8 <HAL_GetTick>
 80032c6:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032c8:	e008      	b.n	80032dc <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80032ca:	f7fd fc95 	bl	8000bf8 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d901      	bls.n	80032dc <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e279      	b.n	80037d0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032dc:	4b5a      	ldr	r3, [pc, #360]	@ (8003448 <HAL_RCC_OscConfig+0x4dc>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0302 	and.w	r3, r3, #2
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d1f0      	bne.n	80032ca <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0308 	and.w	r3, r3, #8
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d03c      	beq.n	800336e <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d01c      	beq.n	8003336 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032fc:	4b52      	ldr	r3, [pc, #328]	@ (8003448 <HAL_RCC_OscConfig+0x4dc>)
 80032fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003302:	4a51      	ldr	r2, [pc, #324]	@ (8003448 <HAL_RCC_OscConfig+0x4dc>)
 8003304:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003308:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800330c:	f7fd fc74 	bl	8000bf8 <HAL_GetTick>
 8003310:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003312:	e008      	b.n	8003326 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003314:	f7fd fc70 	bl	8000bf8 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b02      	cmp	r3, #2
 8003320:	d901      	bls.n	8003326 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e254      	b.n	80037d0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003326:	4b48      	ldr	r3, [pc, #288]	@ (8003448 <HAL_RCC_OscConfig+0x4dc>)
 8003328:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800332c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d0ef      	beq.n	8003314 <HAL_RCC_OscConfig+0x3a8>
 8003334:	e01b      	b.n	800336e <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003336:	4b44      	ldr	r3, [pc, #272]	@ (8003448 <HAL_RCC_OscConfig+0x4dc>)
 8003338:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800333c:	4a42      	ldr	r2, [pc, #264]	@ (8003448 <HAL_RCC_OscConfig+0x4dc>)
 800333e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003342:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003346:	f7fd fc57 	bl	8000bf8 <HAL_GetTick>
 800334a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800334c:	e008      	b.n	8003360 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800334e:	f7fd fc53 	bl	8000bf8 <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	2b02      	cmp	r3, #2
 800335a:	d901      	bls.n	8003360 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e237      	b.n	80037d0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003360:	4b39      	ldr	r3, [pc, #228]	@ (8003448 <HAL_RCC_OscConfig+0x4dc>)
 8003362:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003366:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1ef      	bne.n	800334e <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0304 	and.w	r3, r3, #4
 8003376:	2b00      	cmp	r3, #0
 8003378:	f000 80d2 	beq.w	8003520 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800337c:	4b34      	ldr	r3, [pc, #208]	@ (8003450 <HAL_RCC_OscConfig+0x4e4>)
 800337e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003380:	f003 0301 	and.w	r3, r3, #1
 8003384:	2b00      	cmp	r3, #0
 8003386:	d118      	bne.n	80033ba <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8003388:	4b31      	ldr	r3, [pc, #196]	@ (8003450 <HAL_RCC_OscConfig+0x4e4>)
 800338a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800338c:	4a30      	ldr	r2, [pc, #192]	@ (8003450 <HAL_RCC_OscConfig+0x4e4>)
 800338e:	f043 0301 	orr.w	r3, r3, #1
 8003392:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003394:	f7fd fc30 	bl	8000bf8 <HAL_GetTick>
 8003398:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800339a:	e008      	b.n	80033ae <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800339c:	f7fd fc2c 	bl	8000bf8 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e210      	b.n	80037d0 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80033ae:	4b28      	ldr	r3, [pc, #160]	@ (8003450 <HAL_RCC_OscConfig+0x4e4>)
 80033b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d0f0      	beq.n	800339c <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d108      	bne.n	80033d4 <HAL_RCC_OscConfig+0x468>
 80033c2:	4b21      	ldr	r3, [pc, #132]	@ (8003448 <HAL_RCC_OscConfig+0x4dc>)
 80033c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80033c8:	4a1f      	ldr	r2, [pc, #124]	@ (8003448 <HAL_RCC_OscConfig+0x4dc>)
 80033ca:	f043 0301 	orr.w	r3, r3, #1
 80033ce:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80033d2:	e074      	b.n	80034be <HAL_RCC_OscConfig+0x552>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d118      	bne.n	800340e <HAL_RCC_OscConfig+0x4a2>
 80033dc:	4b1a      	ldr	r3, [pc, #104]	@ (8003448 <HAL_RCC_OscConfig+0x4dc>)
 80033de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80033e2:	4a19      	ldr	r2, [pc, #100]	@ (8003448 <HAL_RCC_OscConfig+0x4dc>)
 80033e4:	f023 0301 	bic.w	r3, r3, #1
 80033e8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80033ec:	4b16      	ldr	r3, [pc, #88]	@ (8003448 <HAL_RCC_OscConfig+0x4dc>)
 80033ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80033f2:	4a15      	ldr	r2, [pc, #84]	@ (8003448 <HAL_RCC_OscConfig+0x4dc>)
 80033f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80033f8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80033fc:	4b12      	ldr	r3, [pc, #72]	@ (8003448 <HAL_RCC_OscConfig+0x4dc>)
 80033fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003402:	4a11      	ldr	r2, [pc, #68]	@ (8003448 <HAL_RCC_OscConfig+0x4dc>)
 8003404:	f023 0304 	bic.w	r3, r3, #4
 8003408:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800340c:	e057      	b.n	80034be <HAL_RCC_OscConfig+0x552>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	2b05      	cmp	r3, #5
 8003414:	d11e      	bne.n	8003454 <HAL_RCC_OscConfig+0x4e8>
 8003416:	4b0c      	ldr	r3, [pc, #48]	@ (8003448 <HAL_RCC_OscConfig+0x4dc>)
 8003418:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800341c:	4a0a      	ldr	r2, [pc, #40]	@ (8003448 <HAL_RCC_OscConfig+0x4dc>)
 800341e:	f043 0304 	orr.w	r3, r3, #4
 8003422:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003426:	4b08      	ldr	r3, [pc, #32]	@ (8003448 <HAL_RCC_OscConfig+0x4dc>)
 8003428:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800342c:	4a06      	ldr	r2, [pc, #24]	@ (8003448 <HAL_RCC_OscConfig+0x4dc>)
 800342e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003432:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003436:	4b04      	ldr	r3, [pc, #16]	@ (8003448 <HAL_RCC_OscConfig+0x4dc>)
 8003438:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800343c:	4a02      	ldr	r2, [pc, #8]	@ (8003448 <HAL_RCC_OscConfig+0x4dc>)
 800343e:	f043 0301 	orr.w	r3, r3, #1
 8003442:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003446:	e03a      	b.n	80034be <HAL_RCC_OscConfig+0x552>
 8003448:	44020c00 	.word	0x44020c00
 800344c:	20000008 	.word	0x20000008
 8003450:	44020800 	.word	0x44020800
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	2b85      	cmp	r3, #133	@ 0x85
 800345a:	d118      	bne.n	800348e <HAL_RCC_OscConfig+0x522>
 800345c:	4ba2      	ldr	r3, [pc, #648]	@ (80036e8 <HAL_RCC_OscConfig+0x77c>)
 800345e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003462:	4aa1      	ldr	r2, [pc, #644]	@ (80036e8 <HAL_RCC_OscConfig+0x77c>)
 8003464:	f043 0304 	orr.w	r3, r3, #4
 8003468:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800346c:	4b9e      	ldr	r3, [pc, #632]	@ (80036e8 <HAL_RCC_OscConfig+0x77c>)
 800346e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003472:	4a9d      	ldr	r2, [pc, #628]	@ (80036e8 <HAL_RCC_OscConfig+0x77c>)
 8003474:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003478:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800347c:	4b9a      	ldr	r3, [pc, #616]	@ (80036e8 <HAL_RCC_OscConfig+0x77c>)
 800347e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003482:	4a99      	ldr	r2, [pc, #612]	@ (80036e8 <HAL_RCC_OscConfig+0x77c>)
 8003484:	f043 0301 	orr.w	r3, r3, #1
 8003488:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800348c:	e017      	b.n	80034be <HAL_RCC_OscConfig+0x552>
 800348e:	4b96      	ldr	r3, [pc, #600]	@ (80036e8 <HAL_RCC_OscConfig+0x77c>)
 8003490:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003494:	4a94      	ldr	r2, [pc, #592]	@ (80036e8 <HAL_RCC_OscConfig+0x77c>)
 8003496:	f023 0301 	bic.w	r3, r3, #1
 800349a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800349e:	4b92      	ldr	r3, [pc, #584]	@ (80036e8 <HAL_RCC_OscConfig+0x77c>)
 80034a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80034a4:	4a90      	ldr	r2, [pc, #576]	@ (80036e8 <HAL_RCC_OscConfig+0x77c>)
 80034a6:	f023 0304 	bic.w	r3, r3, #4
 80034aa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80034ae:	4b8e      	ldr	r3, [pc, #568]	@ (80036e8 <HAL_RCC_OscConfig+0x77c>)
 80034b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80034b4:	4a8c      	ldr	r2, [pc, #560]	@ (80036e8 <HAL_RCC_OscConfig+0x77c>)
 80034b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80034ba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d016      	beq.n	80034f4 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034c6:	f7fd fb97 	bl	8000bf8 <HAL_GetTick>
 80034ca:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034cc:	e00a      	b.n	80034e4 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ce:	f7fd fb93 	bl	8000bf8 <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034dc:	4293      	cmp	r3, r2
 80034de:	d901      	bls.n	80034e4 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e175      	b.n	80037d0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034e4:	4b80      	ldr	r3, [pc, #512]	@ (80036e8 <HAL_RCC_OscConfig+0x77c>)
 80034e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80034ea:	f003 0302 	and.w	r3, r3, #2
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d0ed      	beq.n	80034ce <HAL_RCC_OscConfig+0x562>
 80034f2:	e015      	b.n	8003520 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f4:	f7fd fb80 	bl	8000bf8 <HAL_GetTick>
 80034f8:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034fa:	e00a      	b.n	8003512 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034fc:	f7fd fb7c 	bl	8000bf8 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	f241 3288 	movw	r2, #5000	@ 0x1388
 800350a:	4293      	cmp	r3, r2
 800350c:	d901      	bls.n	8003512 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e15e      	b.n	80037d0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003512:	4b75      	ldr	r3, [pc, #468]	@ (80036e8 <HAL_RCC_OscConfig+0x77c>)
 8003514:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003518:	f003 0302 	and.w	r3, r3, #2
 800351c:	2b00      	cmp	r3, #0
 800351e:	d1ed      	bne.n	80034fc <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0320 	and.w	r3, r3, #32
 8003528:	2b00      	cmp	r3, #0
 800352a:	d036      	beq.n	800359a <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003530:	2b00      	cmp	r3, #0
 8003532:	d019      	beq.n	8003568 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003534:	4b6c      	ldr	r3, [pc, #432]	@ (80036e8 <HAL_RCC_OscConfig+0x77c>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a6b      	ldr	r2, [pc, #428]	@ (80036e8 <HAL_RCC_OscConfig+0x77c>)
 800353a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800353e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003540:	f7fd fb5a 	bl	8000bf8 <HAL_GetTick>
 8003544:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003546:	e008      	b.n	800355a <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8003548:	f7fd fb56 	bl	8000bf8 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	2b02      	cmp	r3, #2
 8003554:	d901      	bls.n	800355a <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e13a      	b.n	80037d0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800355a:	4b63      	ldr	r3, [pc, #396]	@ (80036e8 <HAL_RCC_OscConfig+0x77c>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d0f0      	beq.n	8003548 <HAL_RCC_OscConfig+0x5dc>
 8003566:	e018      	b.n	800359a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003568:	4b5f      	ldr	r3, [pc, #380]	@ (80036e8 <HAL_RCC_OscConfig+0x77c>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a5e      	ldr	r2, [pc, #376]	@ (80036e8 <HAL_RCC_OscConfig+0x77c>)
 800356e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003572:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003574:	f7fd fb40 	bl	8000bf8 <HAL_GetTick>
 8003578:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800357a:	e008      	b.n	800358e <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 800357c:	f7fd fb3c 	bl	8000bf8 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	2b02      	cmp	r3, #2
 8003588:	d901      	bls.n	800358e <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e120      	b.n	80037d0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800358e:	4b56      	ldr	r3, [pc, #344]	@ (80036e8 <HAL_RCC_OscConfig+0x77c>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d1f0      	bne.n	800357c <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800359e:	2b00      	cmp	r3, #0
 80035a0:	f000 8115 	beq.w	80037ce <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	2b18      	cmp	r3, #24
 80035a8:	f000 80af 	beq.w	800370a <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	f040 8086 	bne.w	80036c2 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80035b6:	4b4c      	ldr	r3, [pc, #304]	@ (80036e8 <HAL_RCC_OscConfig+0x77c>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a4b      	ldr	r2, [pc, #300]	@ (80036e8 <HAL_RCC_OscConfig+0x77c>)
 80035bc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80035c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c2:	f7fd fb19 	bl	8000bf8 <HAL_GetTick>
 80035c6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80035c8:	e008      	b.n	80035dc <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80035ca:	f7fd fb15 	bl	8000bf8 <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d901      	bls.n	80035dc <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	e0f9      	b.n	80037d0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80035dc:	4b42      	ldr	r3, [pc, #264]	@ (80036e8 <HAL_RCC_OscConfig+0x77c>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d1f0      	bne.n	80035ca <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 80035e8:	4b3f      	ldr	r3, [pc, #252]	@ (80036e8 <HAL_RCC_OscConfig+0x77c>)
 80035ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ec:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80035f0:	f023 0303 	bic.w	r3, r3, #3
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80035fc:	0212      	lsls	r2, r2, #8
 80035fe:	430a      	orrs	r2, r1
 8003600:	4939      	ldr	r1, [pc, #228]	@ (80036e8 <HAL_RCC_OscConfig+0x77c>)
 8003602:	4313      	orrs	r3, r2
 8003604:	628b      	str	r3, [r1, #40]	@ 0x28
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800360a:	3b01      	subs	r3, #1
 800360c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003614:	3b01      	subs	r3, #1
 8003616:	025b      	lsls	r3, r3, #9
 8003618:	b29b      	uxth	r3, r3
 800361a:	431a      	orrs	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003620:	3b01      	subs	r3, #1
 8003622:	041b      	lsls	r3, r3, #16
 8003624:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003628:	431a      	orrs	r2, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800362e:	3b01      	subs	r3, #1
 8003630:	061b      	lsls	r3, r3, #24
 8003632:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003636:	492c      	ldr	r1, [pc, #176]	@ (80036e8 <HAL_RCC_OscConfig+0x77c>)
 8003638:	4313      	orrs	r3, r2
 800363a:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 800363c:	4b2a      	ldr	r3, [pc, #168]	@ (80036e8 <HAL_RCC_OscConfig+0x77c>)
 800363e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003640:	4a29      	ldr	r2, [pc, #164]	@ (80036e8 <HAL_RCC_OscConfig+0x77c>)
 8003642:	f023 0310 	bic.w	r3, r3, #16
 8003646:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800364c:	4a26      	ldr	r2, [pc, #152]	@ (80036e8 <HAL_RCC_OscConfig+0x77c>)
 800364e:	00db      	lsls	r3, r3, #3
 8003650:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8003652:	4b25      	ldr	r3, [pc, #148]	@ (80036e8 <HAL_RCC_OscConfig+0x77c>)
 8003654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003656:	4a24      	ldr	r2, [pc, #144]	@ (80036e8 <HAL_RCC_OscConfig+0x77c>)
 8003658:	f043 0310 	orr.w	r3, r3, #16
 800365c:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 800365e:	4b22      	ldr	r3, [pc, #136]	@ (80036e8 <HAL_RCC_OscConfig+0x77c>)
 8003660:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003662:	f023 020c 	bic.w	r2, r3, #12
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800366a:	491f      	ldr	r1, [pc, #124]	@ (80036e8 <HAL_RCC_OscConfig+0x77c>)
 800366c:	4313      	orrs	r3, r2
 800366e:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8003670:	4b1d      	ldr	r3, [pc, #116]	@ (80036e8 <HAL_RCC_OscConfig+0x77c>)
 8003672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003674:	f023 0220 	bic.w	r2, r3, #32
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800367c:	491a      	ldr	r1, [pc, #104]	@ (80036e8 <HAL_RCC_OscConfig+0x77c>)
 800367e:	4313      	orrs	r3, r2
 8003680:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003682:	4b19      	ldr	r3, [pc, #100]	@ (80036e8 <HAL_RCC_OscConfig+0x77c>)
 8003684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003686:	4a18      	ldr	r2, [pc, #96]	@ (80036e8 <HAL_RCC_OscConfig+0x77c>)
 8003688:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800368c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 800368e:	4b16      	ldr	r3, [pc, #88]	@ (80036e8 <HAL_RCC_OscConfig+0x77c>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a15      	ldr	r2, [pc, #84]	@ (80036e8 <HAL_RCC_OscConfig+0x77c>)
 8003694:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003698:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800369a:	f7fd faad 	bl	8000bf8 <HAL_GetTick>
 800369e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80036a0:	e008      	b.n	80036b4 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80036a2:	f7fd faa9 	bl	8000bf8 <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d901      	bls.n	80036b4 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e08d      	b.n	80037d0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80036b4:	4b0c      	ldr	r3, [pc, #48]	@ (80036e8 <HAL_RCC_OscConfig+0x77c>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d0f0      	beq.n	80036a2 <HAL_RCC_OscConfig+0x736>
 80036c0:	e085      	b.n	80037ce <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80036c2:	4b09      	ldr	r3, [pc, #36]	@ (80036e8 <HAL_RCC_OscConfig+0x77c>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a08      	ldr	r2, [pc, #32]	@ (80036e8 <HAL_RCC_OscConfig+0x77c>)
 80036c8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80036cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ce:	f7fd fa93 	bl	8000bf8 <HAL_GetTick>
 80036d2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80036d4:	e00a      	b.n	80036ec <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80036d6:	f7fd fa8f 	bl	8000bf8 <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d903      	bls.n	80036ec <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e073      	b.n	80037d0 <HAL_RCC_OscConfig+0x864>
 80036e8:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80036ec:	4b3a      	ldr	r3, [pc, #232]	@ (80037d8 <HAL_RCC_OscConfig+0x86c>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d1ee      	bne.n	80036d6 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80036f8:	4b37      	ldr	r3, [pc, #220]	@ (80037d8 <HAL_RCC_OscConfig+0x86c>)
 80036fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036fc:	4a36      	ldr	r2, [pc, #216]	@ (80037d8 <HAL_RCC_OscConfig+0x86c>)
 80036fe:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8003702:	f023 0303 	bic.w	r3, r3, #3
 8003706:	6293      	str	r3, [r2, #40]	@ 0x28
 8003708:	e061      	b.n	80037ce <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800370a:	4b33      	ldr	r3, [pc, #204]	@ (80037d8 <HAL_RCC_OscConfig+0x86c>)
 800370c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800370e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003710:	4b31      	ldr	r3, [pc, #196]	@ (80037d8 <HAL_RCC_OscConfig+0x86c>)
 8003712:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003714:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800371a:	2b01      	cmp	r3, #1
 800371c:	d031      	beq.n	8003782 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	f003 0203 	and.w	r2, r3, #3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003728:	429a      	cmp	r2, r3
 800372a:	d12a      	bne.n	8003782 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	0a1b      	lsrs	r3, r3, #8
 8003730:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8003738:	429a      	cmp	r2, r3
 800373a:	d122      	bne.n	8003782 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003746:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8003748:	429a      	cmp	r2, r3
 800374a:	d11a      	bne.n	8003782 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	0a5b      	lsrs	r3, r3, #9
 8003750:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003758:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800375a:	429a      	cmp	r2, r3
 800375c:	d111      	bne.n	8003782 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	0c1b      	lsrs	r3, r3, #16
 8003762:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800376a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 800376c:	429a      	cmp	r2, r3
 800376e:	d108      	bne.n	8003782 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	0e1b      	lsrs	r3, r3, #24
 8003774:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800377c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800377e:	429a      	cmp	r2, r3
 8003780:	d001      	beq.n	8003786 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e024      	b.n	80037d0 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003786:	4b14      	ldr	r3, [pc, #80]	@ (80037d8 <HAL_RCC_OscConfig+0x86c>)
 8003788:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800378a:	08db      	lsrs	r3, r3, #3
 800378c:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003794:	429a      	cmp	r2, r3
 8003796:	d01a      	beq.n	80037ce <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8003798:	4b0f      	ldr	r3, [pc, #60]	@ (80037d8 <HAL_RCC_OscConfig+0x86c>)
 800379a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800379c:	4a0e      	ldr	r2, [pc, #56]	@ (80037d8 <HAL_RCC_OscConfig+0x86c>)
 800379e:	f023 0310 	bic.w	r3, r3, #16
 80037a2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a4:	f7fd fa28 	bl	8000bf8 <HAL_GetTick>
 80037a8:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 80037aa:	bf00      	nop
 80037ac:	f7fd fa24 	bl	8000bf8 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d0f9      	beq.n	80037ac <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037bc:	4a06      	ldr	r2, [pc, #24]	@ (80037d8 <HAL_RCC_OscConfig+0x86c>)
 80037be:	00db      	lsls	r3, r3, #3
 80037c0:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80037c2:	4b05      	ldr	r3, [pc, #20]	@ (80037d8 <HAL_RCC_OscConfig+0x86c>)
 80037c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037c6:	4a04      	ldr	r2, [pc, #16]	@ (80037d8 <HAL_RCC_OscConfig+0x86c>)
 80037c8:	f043 0310 	orr.w	r3, r3, #16
 80037cc:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3720      	adds	r7, #32
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	44020c00 	.word	0x44020c00

080037dc <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d101      	bne.n	80037f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e19e      	b.n	8003b2e <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037f0:	4b83      	ldr	r3, [pc, #524]	@ (8003a00 <HAL_RCC_ClockConfig+0x224>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 030f 	and.w	r3, r3, #15
 80037f8:	683a      	ldr	r2, [r7, #0]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d910      	bls.n	8003820 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037fe:	4b80      	ldr	r3, [pc, #512]	@ (8003a00 <HAL_RCC_ClockConfig+0x224>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f023 020f 	bic.w	r2, r3, #15
 8003806:	497e      	ldr	r1, [pc, #504]	@ (8003a00 <HAL_RCC_ClockConfig+0x224>)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	4313      	orrs	r3, r2
 800380c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800380e:	4b7c      	ldr	r3, [pc, #496]	@ (8003a00 <HAL_RCC_ClockConfig+0x224>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 030f 	and.w	r3, r3, #15
 8003816:	683a      	ldr	r2, [r7, #0]
 8003818:	429a      	cmp	r2, r3
 800381a:	d001      	beq.n	8003820 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e186      	b.n	8003b2e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0310 	and.w	r3, r3, #16
 8003828:	2b00      	cmp	r3, #0
 800382a:	d012      	beq.n	8003852 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	695a      	ldr	r2, [r3, #20]
 8003830:	4b74      	ldr	r3, [pc, #464]	@ (8003a04 <HAL_RCC_ClockConfig+0x228>)
 8003832:	6a1b      	ldr	r3, [r3, #32]
 8003834:	0a1b      	lsrs	r3, r3, #8
 8003836:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800383a:	429a      	cmp	r2, r3
 800383c:	d909      	bls.n	8003852 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 800383e:	4b71      	ldr	r3, [pc, #452]	@ (8003a04 <HAL_RCC_ClockConfig+0x228>)
 8003840:	6a1b      	ldr	r3, [r3, #32]
 8003842:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	695b      	ldr	r3, [r3, #20]
 800384a:	021b      	lsls	r3, r3, #8
 800384c:	496d      	ldr	r1, [pc, #436]	@ (8003a04 <HAL_RCC_ClockConfig+0x228>)
 800384e:	4313      	orrs	r3, r2
 8003850:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0308 	and.w	r3, r3, #8
 800385a:	2b00      	cmp	r3, #0
 800385c:	d012      	beq.n	8003884 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	691a      	ldr	r2, [r3, #16]
 8003862:	4b68      	ldr	r3, [pc, #416]	@ (8003a04 <HAL_RCC_ClockConfig+0x228>)
 8003864:	6a1b      	ldr	r3, [r3, #32]
 8003866:	091b      	lsrs	r3, r3, #4
 8003868:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800386c:	429a      	cmp	r2, r3
 800386e:	d909      	bls.n	8003884 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8003870:	4b64      	ldr	r3, [pc, #400]	@ (8003a04 <HAL_RCC_ClockConfig+0x228>)
 8003872:	6a1b      	ldr	r3, [r3, #32]
 8003874:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	011b      	lsls	r3, r3, #4
 800387e:	4961      	ldr	r1, [pc, #388]	@ (8003a04 <HAL_RCC_ClockConfig+0x228>)
 8003880:	4313      	orrs	r3, r2
 8003882:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0304 	and.w	r3, r3, #4
 800388c:	2b00      	cmp	r3, #0
 800388e:	d010      	beq.n	80038b2 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	68da      	ldr	r2, [r3, #12]
 8003894:	4b5b      	ldr	r3, [pc, #364]	@ (8003a04 <HAL_RCC_ClockConfig+0x228>)
 8003896:	6a1b      	ldr	r3, [r3, #32]
 8003898:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800389c:	429a      	cmp	r2, r3
 800389e:	d908      	bls.n	80038b2 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80038a0:	4b58      	ldr	r3, [pc, #352]	@ (8003a04 <HAL_RCC_ClockConfig+0x228>)
 80038a2:	6a1b      	ldr	r3, [r3, #32]
 80038a4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	4955      	ldr	r1, [pc, #340]	@ (8003a04 <HAL_RCC_ClockConfig+0x228>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d010      	beq.n	80038e0 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	689a      	ldr	r2, [r3, #8]
 80038c2:	4b50      	ldr	r3, [pc, #320]	@ (8003a04 <HAL_RCC_ClockConfig+0x228>)
 80038c4:	6a1b      	ldr	r3, [r3, #32]
 80038c6:	f003 030f 	and.w	r3, r3, #15
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d908      	bls.n	80038e0 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80038ce:	4b4d      	ldr	r3, [pc, #308]	@ (8003a04 <HAL_RCC_ClockConfig+0x228>)
 80038d0:	6a1b      	ldr	r3, [r3, #32]
 80038d2:	f023 020f 	bic.w	r2, r3, #15
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	494a      	ldr	r1, [pc, #296]	@ (8003a04 <HAL_RCC_ClockConfig+0x228>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0301 	and.w	r3, r3, #1
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	f000 8093 	beq.w	8003a14 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	2b03      	cmp	r3, #3
 80038f4:	d107      	bne.n	8003906 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80038f6:	4b43      	ldr	r3, [pc, #268]	@ (8003a04 <HAL_RCC_ClockConfig+0x228>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d121      	bne.n	8003946 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e113      	b.n	8003b2e <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	2b02      	cmp	r3, #2
 800390c:	d107      	bne.n	800391e <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800390e:	4b3d      	ldr	r3, [pc, #244]	@ (8003a04 <HAL_RCC_ClockConfig+0x228>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d115      	bne.n	8003946 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e107      	b.n	8003b2e <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	2b01      	cmp	r3, #1
 8003924:	d107      	bne.n	8003936 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003926:	4b37      	ldr	r3, [pc, #220]	@ (8003a04 <HAL_RCC_ClockConfig+0x228>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800392e:	2b00      	cmp	r3, #0
 8003930:	d109      	bne.n	8003946 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e0fb      	b.n	8003b2e <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003936:	4b33      	ldr	r3, [pc, #204]	@ (8003a04 <HAL_RCC_ClockConfig+0x228>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0302 	and.w	r3, r3, #2
 800393e:	2b00      	cmp	r3, #0
 8003940:	d101      	bne.n	8003946 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e0f3      	b.n	8003b2e <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8003946:	4b2f      	ldr	r3, [pc, #188]	@ (8003a04 <HAL_RCC_ClockConfig+0x228>)
 8003948:	69db      	ldr	r3, [r3, #28]
 800394a:	f023 0203 	bic.w	r2, r3, #3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	492c      	ldr	r1, [pc, #176]	@ (8003a04 <HAL_RCC_ClockConfig+0x228>)
 8003954:	4313      	orrs	r3, r2
 8003956:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003958:	f7fd f94e 	bl	8000bf8 <HAL_GetTick>
 800395c:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	2b03      	cmp	r3, #3
 8003964:	d112      	bne.n	800398c <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003966:	e00a      	b.n	800397e <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003968:	f7fd f946 	bl	8000bf8 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003976:	4293      	cmp	r3, r2
 8003978:	d901      	bls.n	800397e <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e0d7      	b.n	8003b2e <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800397e:	4b21      	ldr	r3, [pc, #132]	@ (8003a04 <HAL_RCC_ClockConfig+0x228>)
 8003980:	69db      	ldr	r3, [r3, #28]
 8003982:	f003 0318 	and.w	r3, r3, #24
 8003986:	2b18      	cmp	r3, #24
 8003988:	d1ee      	bne.n	8003968 <HAL_RCC_ClockConfig+0x18c>
 800398a:	e043      	b.n	8003a14 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	2b02      	cmp	r3, #2
 8003992:	d112      	bne.n	80039ba <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003994:	e00a      	b.n	80039ac <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003996:	f7fd f92f 	bl	8000bf8 <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d901      	bls.n	80039ac <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e0c0      	b.n	8003b2e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80039ac:	4b15      	ldr	r3, [pc, #84]	@ (8003a04 <HAL_RCC_ClockConfig+0x228>)
 80039ae:	69db      	ldr	r3, [r3, #28]
 80039b0:	f003 0318 	and.w	r3, r3, #24
 80039b4:	2b10      	cmp	r3, #16
 80039b6:	d1ee      	bne.n	8003996 <HAL_RCC_ClockConfig+0x1ba>
 80039b8:	e02c      	b.n	8003a14 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d122      	bne.n	8003a08 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80039c2:	e00a      	b.n	80039da <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80039c4:	f7fd f918 	bl	8000bf8 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d901      	bls.n	80039da <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e0a9      	b.n	8003b2e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80039da:	4b0a      	ldr	r3, [pc, #40]	@ (8003a04 <HAL_RCC_ClockConfig+0x228>)
 80039dc:	69db      	ldr	r3, [r3, #28]
 80039de:	f003 0318 	and.w	r3, r3, #24
 80039e2:	2b08      	cmp	r3, #8
 80039e4:	d1ee      	bne.n	80039c4 <HAL_RCC_ClockConfig+0x1e8>
 80039e6:	e015      	b.n	8003a14 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80039e8:	f7fd f906 	bl	8000bf8 <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d906      	bls.n	8003a08 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e097      	b.n	8003b2e <HAL_RCC_ClockConfig+0x352>
 80039fe:	bf00      	nop
 8003a00:	40022000 	.word	0x40022000
 8003a04:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a08:	4b4b      	ldr	r3, [pc, #300]	@ (8003b38 <HAL_RCC_ClockConfig+0x35c>)
 8003a0a:	69db      	ldr	r3, [r3, #28]
 8003a0c:	f003 0318 	and.w	r3, r3, #24
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d1e9      	bne.n	80039e8 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0302 	and.w	r3, r3, #2
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d010      	beq.n	8003a42 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	689a      	ldr	r2, [r3, #8]
 8003a24:	4b44      	ldr	r3, [pc, #272]	@ (8003b38 <HAL_RCC_ClockConfig+0x35c>)
 8003a26:	6a1b      	ldr	r3, [r3, #32]
 8003a28:	f003 030f 	and.w	r3, r3, #15
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d208      	bcs.n	8003a42 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8003a30:	4b41      	ldr	r3, [pc, #260]	@ (8003b38 <HAL_RCC_ClockConfig+0x35c>)
 8003a32:	6a1b      	ldr	r3, [r3, #32]
 8003a34:	f023 020f 	bic.w	r2, r3, #15
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	493e      	ldr	r1, [pc, #248]	@ (8003b38 <HAL_RCC_ClockConfig+0x35c>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a42:	4b3e      	ldr	r3, [pc, #248]	@ (8003b3c <HAL_RCC_ClockConfig+0x360>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 030f 	and.w	r3, r3, #15
 8003a4a:	683a      	ldr	r2, [r7, #0]
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d210      	bcs.n	8003a72 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a50:	4b3a      	ldr	r3, [pc, #232]	@ (8003b3c <HAL_RCC_ClockConfig+0x360>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f023 020f 	bic.w	r2, r3, #15
 8003a58:	4938      	ldr	r1, [pc, #224]	@ (8003b3c <HAL_RCC_ClockConfig+0x360>)
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a60:	4b36      	ldr	r3, [pc, #216]	@ (8003b3c <HAL_RCC_ClockConfig+0x360>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 030f 	and.w	r3, r3, #15
 8003a68:	683a      	ldr	r2, [r7, #0]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d001      	beq.n	8003a72 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e05d      	b.n	8003b2e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0304 	and.w	r3, r3, #4
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d010      	beq.n	8003aa0 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	68da      	ldr	r2, [r3, #12]
 8003a82:	4b2d      	ldr	r3, [pc, #180]	@ (8003b38 <HAL_RCC_ClockConfig+0x35c>)
 8003a84:	6a1b      	ldr	r3, [r3, #32]
 8003a86:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d208      	bcs.n	8003aa0 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8003a8e:	4b2a      	ldr	r3, [pc, #168]	@ (8003b38 <HAL_RCC_ClockConfig+0x35c>)
 8003a90:	6a1b      	ldr	r3, [r3, #32]
 8003a92:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	4927      	ldr	r1, [pc, #156]	@ (8003b38 <HAL_RCC_ClockConfig+0x35c>)
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0308 	and.w	r3, r3, #8
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d012      	beq.n	8003ad2 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	691a      	ldr	r2, [r3, #16]
 8003ab0:	4b21      	ldr	r3, [pc, #132]	@ (8003b38 <HAL_RCC_ClockConfig+0x35c>)
 8003ab2:	6a1b      	ldr	r3, [r3, #32]
 8003ab4:	091b      	lsrs	r3, r3, #4
 8003ab6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d209      	bcs.n	8003ad2 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8003abe:	4b1e      	ldr	r3, [pc, #120]	@ (8003b38 <HAL_RCC_ClockConfig+0x35c>)
 8003ac0:	6a1b      	ldr	r3, [r3, #32]
 8003ac2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	011b      	lsls	r3, r3, #4
 8003acc:	491a      	ldr	r1, [pc, #104]	@ (8003b38 <HAL_RCC_ClockConfig+0x35c>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0310 	and.w	r3, r3, #16
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d012      	beq.n	8003b04 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	695a      	ldr	r2, [r3, #20]
 8003ae2:	4b15      	ldr	r3, [pc, #84]	@ (8003b38 <HAL_RCC_ClockConfig+0x35c>)
 8003ae4:	6a1b      	ldr	r3, [r3, #32]
 8003ae6:	0a1b      	lsrs	r3, r3, #8
 8003ae8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d209      	bcs.n	8003b04 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8003af0:	4b11      	ldr	r3, [pc, #68]	@ (8003b38 <HAL_RCC_ClockConfig+0x35c>)
 8003af2:	6a1b      	ldr	r3, [r3, #32]
 8003af4:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	695b      	ldr	r3, [r3, #20]
 8003afc:	021b      	lsls	r3, r3, #8
 8003afe:	490e      	ldr	r1, [pc, #56]	@ (8003b38 <HAL_RCC_ClockConfig+0x35c>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003b04:	f000 f822 	bl	8003b4c <HAL_RCC_GetSysClockFreq>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	4b0b      	ldr	r3, [pc, #44]	@ (8003b38 <HAL_RCC_ClockConfig+0x35c>)
 8003b0c:	6a1b      	ldr	r3, [r3, #32]
 8003b0e:	f003 030f 	and.w	r3, r3, #15
 8003b12:	490b      	ldr	r1, [pc, #44]	@ (8003b40 <HAL_RCC_ClockConfig+0x364>)
 8003b14:	5ccb      	ldrb	r3, [r1, r3]
 8003b16:	fa22 f303 	lsr.w	r3, r2, r3
 8003b1a:	4a0a      	ldr	r2, [pc, #40]	@ (8003b44 <HAL_RCC_ClockConfig+0x368>)
 8003b1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003b1e:	4b0a      	ldr	r3, [pc, #40]	@ (8003b48 <HAL_RCC_ClockConfig+0x36c>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7fc ffde 	bl	8000ae4 <HAL_InitTick>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8003b2c:	7afb      	ldrb	r3, [r7, #11]
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3710      	adds	r7, #16
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	44020c00 	.word	0x44020c00
 8003b3c:	40022000 	.word	0x40022000
 8003b40:	0800bbf0 	.word	0x0800bbf0
 8003b44:	20000004 	.word	0x20000004
 8003b48:	20000008 	.word	0x20000008

08003b4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b089      	sub	sp, #36	@ 0x24
 8003b50:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8003b52:	4b8c      	ldr	r3, [pc, #560]	@ (8003d84 <HAL_RCC_GetSysClockFreq+0x238>)
 8003b54:	69db      	ldr	r3, [r3, #28]
 8003b56:	f003 0318 	and.w	r3, r3, #24
 8003b5a:	2b08      	cmp	r3, #8
 8003b5c:	d102      	bne.n	8003b64 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003b5e:	4b8a      	ldr	r3, [pc, #552]	@ (8003d88 <HAL_RCC_GetSysClockFreq+0x23c>)
 8003b60:	61fb      	str	r3, [r7, #28]
 8003b62:	e107      	b.n	8003d74 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b64:	4b87      	ldr	r3, [pc, #540]	@ (8003d84 <HAL_RCC_GetSysClockFreq+0x238>)
 8003b66:	69db      	ldr	r3, [r3, #28]
 8003b68:	f003 0318 	and.w	r3, r3, #24
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d112      	bne.n	8003b96 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8003b70:	4b84      	ldr	r3, [pc, #528]	@ (8003d84 <HAL_RCC_GetSysClockFreq+0x238>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0320 	and.w	r3, r3, #32
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d009      	beq.n	8003b90 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003b7c:	4b81      	ldr	r3, [pc, #516]	@ (8003d84 <HAL_RCC_GetSysClockFreq+0x238>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	08db      	lsrs	r3, r3, #3
 8003b82:	f003 0303 	and.w	r3, r3, #3
 8003b86:	4a81      	ldr	r2, [pc, #516]	@ (8003d8c <HAL_RCC_GetSysClockFreq+0x240>)
 8003b88:	fa22 f303 	lsr.w	r3, r2, r3
 8003b8c:	61fb      	str	r3, [r7, #28]
 8003b8e:	e0f1      	b.n	8003d74 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8003b90:	4b7e      	ldr	r3, [pc, #504]	@ (8003d8c <HAL_RCC_GetSysClockFreq+0x240>)
 8003b92:	61fb      	str	r3, [r7, #28]
 8003b94:	e0ee      	b.n	8003d74 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b96:	4b7b      	ldr	r3, [pc, #492]	@ (8003d84 <HAL_RCC_GetSysClockFreq+0x238>)
 8003b98:	69db      	ldr	r3, [r3, #28]
 8003b9a:	f003 0318 	and.w	r3, r3, #24
 8003b9e:	2b10      	cmp	r3, #16
 8003ba0:	d102      	bne.n	8003ba8 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ba2:	4b7b      	ldr	r3, [pc, #492]	@ (8003d90 <HAL_RCC_GetSysClockFreq+0x244>)
 8003ba4:	61fb      	str	r3, [r7, #28]
 8003ba6:	e0e5      	b.n	8003d74 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ba8:	4b76      	ldr	r3, [pc, #472]	@ (8003d84 <HAL_RCC_GetSysClockFreq+0x238>)
 8003baa:	69db      	ldr	r3, [r3, #28]
 8003bac:	f003 0318 	and.w	r3, r3, #24
 8003bb0:	2b18      	cmp	r3, #24
 8003bb2:	f040 80dd 	bne.w	8003d70 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003bb6:	4b73      	ldr	r3, [pc, #460]	@ (8003d84 <HAL_RCC_GetSysClockFreq+0x238>)
 8003bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bba:	f003 0303 	and.w	r3, r3, #3
 8003bbe:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8003bc0:	4b70      	ldr	r3, [pc, #448]	@ (8003d84 <HAL_RCC_GetSysClockFreq+0x238>)
 8003bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bc4:	0a1b      	lsrs	r3, r3, #8
 8003bc6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003bca:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003bcc:	4b6d      	ldr	r3, [pc, #436]	@ (8003d84 <HAL_RCC_GetSysClockFreq+0x238>)
 8003bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bd0:	091b      	lsrs	r3, r3, #4
 8003bd2:	f003 0301 	and.w	r3, r3, #1
 8003bd6:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8003bd8:	4b6a      	ldr	r3, [pc, #424]	@ (8003d84 <HAL_RCC_GetSysClockFreq+0x238>)
 8003bda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8003bdc:	08db      	lsrs	r3, r3, #3
 8003bde:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8003be2:	68fa      	ldr	r2, [r7, #12]
 8003be4:	fb02 f303 	mul.w	r3, r2, r3
 8003be8:	ee07 3a90 	vmov	s15, r3
 8003bec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bf0:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	f000 80b7 	beq.w	8003d6a <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d003      	beq.n	8003c0a <HAL_RCC_GetSysClockFreq+0xbe>
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	2b03      	cmp	r3, #3
 8003c06:	d056      	beq.n	8003cb6 <HAL_RCC_GetSysClockFreq+0x16a>
 8003c08:	e077      	b.n	8003cfa <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8003c0a:	4b5e      	ldr	r3, [pc, #376]	@ (8003d84 <HAL_RCC_GetSysClockFreq+0x238>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0320 	and.w	r3, r3, #32
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d02d      	beq.n	8003c72 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003c16:	4b5b      	ldr	r3, [pc, #364]	@ (8003d84 <HAL_RCC_GetSysClockFreq+0x238>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	08db      	lsrs	r3, r3, #3
 8003c1c:	f003 0303 	and.w	r3, r3, #3
 8003c20:	4a5a      	ldr	r2, [pc, #360]	@ (8003d8c <HAL_RCC_GetSysClockFreq+0x240>)
 8003c22:	fa22 f303 	lsr.w	r3, r2, r3
 8003c26:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	ee07 3a90 	vmov	s15, r3
 8003c2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	ee07 3a90 	vmov	s15, r3
 8003c38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c40:	4b50      	ldr	r3, [pc, #320]	@ (8003d84 <HAL_RCC_GetSysClockFreq+0x238>)
 8003c42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c48:	ee07 3a90 	vmov	s15, r3
 8003c4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8003c50:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c54:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8003d94 <HAL_RCC_GetSysClockFreq+0x248>
 8003c58:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003c5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8003c60:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c64:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003c68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c6c:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8003c70:	e065      	b.n	8003d3e <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	ee07 3a90 	vmov	s15, r3
 8003c78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c7c:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8003d98 <HAL_RCC_GetSysClockFreq+0x24c>
 8003c80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c84:	4b3f      	ldr	r3, [pc, #252]	@ (8003d84 <HAL_RCC_GetSysClockFreq+0x238>)
 8003c86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c8c:	ee07 3a90 	vmov	s15, r3
 8003c90:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8003c94:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c98:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8003d94 <HAL_RCC_GetSysClockFreq+0x248>
 8003c9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003ca0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ca4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ca8:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003cac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cb0:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8003cb4:	e043      	b.n	8003d3e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	ee07 3a90 	vmov	s15, r3
 8003cbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cc0:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8003d9c <HAL_RCC_GetSysClockFreq+0x250>
 8003cc4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cc8:	4b2e      	ldr	r3, [pc, #184]	@ (8003d84 <HAL_RCC_GetSysClockFreq+0x238>)
 8003cca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ccc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cd0:	ee07 3a90 	vmov	s15, r3
 8003cd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003cd8:	ed97 6a02 	vldr	s12, [r7, #8]
 8003cdc:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8003d94 <HAL_RCC_GetSysClockFreq+0x248>
 8003ce0:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003ce4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ce8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003cec:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003cf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cf4:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8003cf8:	e021      	b.n	8003d3e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	ee07 3a90 	vmov	s15, r3
 8003d00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d04:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003da0 <HAL_RCC_GetSysClockFreq+0x254>
 8003d08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d0c:	4b1d      	ldr	r3, [pc, #116]	@ (8003d84 <HAL_RCC_GetSysClockFreq+0x238>)
 8003d0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d14:	ee07 3a90 	vmov	s15, r3
 8003d18:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d1c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d20:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8003d94 <HAL_RCC_GetSysClockFreq+0x248>
 8003d24:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003d28:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d2c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d30:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003d34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d38:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8003d3c:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8003d3e:	4b11      	ldr	r3, [pc, #68]	@ (8003d84 <HAL_RCC_GetSysClockFreq+0x238>)
 8003d40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d42:	0a5b      	lsrs	r3, r3, #9
 8003d44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d48:	3301      	adds	r3, #1
 8003d4a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	ee07 3a90 	vmov	s15, r3
 8003d52:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003d56:	edd7 6a06 	vldr	s13, [r7, #24]
 8003d5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d62:	ee17 3a90 	vmov	r3, s15
 8003d66:	61fb      	str	r3, [r7, #28]
 8003d68:	e004      	b.n	8003d74 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	61fb      	str	r3, [r7, #28]
 8003d6e:	e001      	b.n	8003d74 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8003d70:	4b06      	ldr	r3, [pc, #24]	@ (8003d8c <HAL_RCC_GetSysClockFreq+0x240>)
 8003d72:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8003d74:	69fb      	ldr	r3, [r7, #28]
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3724      	adds	r7, #36	@ 0x24
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop
 8003d84:	44020c00 	.word	0x44020c00
 8003d88:	003d0900 	.word	0x003d0900
 8003d8c:	03d09000 	.word	0x03d09000
 8003d90:	017d7840 	.word	0x017d7840
 8003d94:	46000000 	.word	0x46000000
 8003d98:	4c742400 	.word	0x4c742400
 8003d9c:	4bbebc20 	.word	0x4bbebc20
 8003da0:	4a742400 	.word	0x4a742400

08003da4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003da8:	f7ff fed0 	bl	8003b4c <HAL_RCC_GetSysClockFreq>
 8003dac:	4602      	mov	r2, r0
 8003dae:	4b08      	ldr	r3, [pc, #32]	@ (8003dd0 <HAL_RCC_GetHCLKFreq+0x2c>)
 8003db0:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8003db2:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003db6:	4907      	ldr	r1, [pc, #28]	@ (8003dd4 <HAL_RCC_GetHCLKFreq+0x30>)
 8003db8:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8003dba:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003dbe:	fa22 f303 	lsr.w	r3, r2, r3
 8003dc2:	4a05      	ldr	r2, [pc, #20]	@ (8003dd8 <HAL_RCC_GetHCLKFreq+0x34>)
 8003dc4:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8003dc6:	4b04      	ldr	r3, [pc, #16]	@ (8003dd8 <HAL_RCC_GetHCLKFreq+0x34>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	44020c00 	.word	0x44020c00
 8003dd4:	0800bbf0 	.word	0x0800bbf0
 8003dd8:	20000004 	.word	0x20000004

08003ddc <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8003ddc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003de0:	b0ba      	sub	sp, #232	@ 0xe8
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003de8:	2300      	movs	r3, #0
 8003dea:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003dee:	2300      	movs	r3, #0
 8003df0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003df4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dfc:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8003e00:	2500      	movs	r5, #0
 8003e02:	ea54 0305 	orrs.w	r3, r4, r5
 8003e06:	d00b      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8003e08:	4bcd      	ldr	r3, [pc, #820]	@ (8004140 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003e0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003e0e:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8003e12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e18:	4ac9      	ldr	r2, [pc, #804]	@ (8004140 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003e1a:	430b      	orrs	r3, r1
 8003e1c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e20:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e28:	f002 0801 	and.w	r8, r2, #1
 8003e2c:	f04f 0900 	mov.w	r9, #0
 8003e30:	ea58 0309 	orrs.w	r3, r8, r9
 8003e34:	d042      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8003e36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e3c:	2b05      	cmp	r3, #5
 8003e3e:	d823      	bhi.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8003e40:	a201      	add	r2, pc, #4	@ (adr r2, 8003e48 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8003e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e46:	bf00      	nop
 8003e48:	08003e91 	.word	0x08003e91
 8003e4c:	08003e61 	.word	0x08003e61
 8003e50:	08003e75 	.word	0x08003e75
 8003e54:	08003e91 	.word	0x08003e91
 8003e58:	08003e91 	.word	0x08003e91
 8003e5c:	08003e91 	.word	0x08003e91
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003e60:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e64:	3308      	adds	r3, #8
 8003e66:	4618      	mov	r0, r3
 8003e68:	f001 f978 	bl	800515c <RCCEx_PLL2_Config>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 8003e72:	e00e      	b.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003e74:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e78:	3330      	adds	r3, #48	@ 0x30
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f001 fa06 	bl	800528c <RCCEx_PLL3_Config>
 8003e80:	4603      	mov	r3, r0
 8003e82:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART1 clock source config set later after clock selection check */
        break;
 8003e86:	e004      	b.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003e8e:	e000      	b.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8003e90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e92:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d10c      	bne.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8003e9a:	4ba9      	ldr	r3, [pc, #676]	@ (8004140 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003e9c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003ea0:	f023 0107 	bic.w	r1, r3, #7
 8003ea4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003ea8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eaa:	4aa5      	ldr	r2, [pc, #660]	@ (8004140 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003eac:	430b      	orrs	r3, r1
 8003eae:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003eb2:	e003      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eb4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003eb8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ebc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec4:	f002 0a02 	and.w	sl, r2, #2
 8003ec8:	f04f 0b00 	mov.w	fp, #0
 8003ecc:	ea5a 030b 	orrs.w	r3, sl, fp
 8003ed0:	f000 8088 	beq.w	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8003ed4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003ed8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003eda:	2b28      	cmp	r3, #40	@ 0x28
 8003edc:	d868      	bhi.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8003ede:	a201      	add	r2, pc, #4	@ (adr r2, 8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8003ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee4:	08003fb9 	.word	0x08003fb9
 8003ee8:	08003fb1 	.word	0x08003fb1
 8003eec:	08003fb1 	.word	0x08003fb1
 8003ef0:	08003fb1 	.word	0x08003fb1
 8003ef4:	08003fb1 	.word	0x08003fb1
 8003ef8:	08003fb1 	.word	0x08003fb1
 8003efc:	08003fb1 	.word	0x08003fb1
 8003f00:	08003fb1 	.word	0x08003fb1
 8003f04:	08003f89 	.word	0x08003f89
 8003f08:	08003fb1 	.word	0x08003fb1
 8003f0c:	08003fb1 	.word	0x08003fb1
 8003f10:	08003fb1 	.word	0x08003fb1
 8003f14:	08003fb1 	.word	0x08003fb1
 8003f18:	08003fb1 	.word	0x08003fb1
 8003f1c:	08003fb1 	.word	0x08003fb1
 8003f20:	08003fb1 	.word	0x08003fb1
 8003f24:	08003f9d 	.word	0x08003f9d
 8003f28:	08003fb1 	.word	0x08003fb1
 8003f2c:	08003fb1 	.word	0x08003fb1
 8003f30:	08003fb1 	.word	0x08003fb1
 8003f34:	08003fb1 	.word	0x08003fb1
 8003f38:	08003fb1 	.word	0x08003fb1
 8003f3c:	08003fb1 	.word	0x08003fb1
 8003f40:	08003fb1 	.word	0x08003fb1
 8003f44:	08003fb9 	.word	0x08003fb9
 8003f48:	08003fb1 	.word	0x08003fb1
 8003f4c:	08003fb1 	.word	0x08003fb1
 8003f50:	08003fb1 	.word	0x08003fb1
 8003f54:	08003fb1 	.word	0x08003fb1
 8003f58:	08003fb1 	.word	0x08003fb1
 8003f5c:	08003fb1 	.word	0x08003fb1
 8003f60:	08003fb1 	.word	0x08003fb1
 8003f64:	08003fb9 	.word	0x08003fb9
 8003f68:	08003fb1 	.word	0x08003fb1
 8003f6c:	08003fb1 	.word	0x08003fb1
 8003f70:	08003fb1 	.word	0x08003fb1
 8003f74:	08003fb1 	.word	0x08003fb1
 8003f78:	08003fb1 	.word	0x08003fb1
 8003f7c:	08003fb1 	.word	0x08003fb1
 8003f80:	08003fb1 	.word	0x08003fb1
 8003f84:	08003fb9 	.word	0x08003fb9
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003f88:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f8c:	3308      	adds	r3, #8
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f001 f8e4 	bl	800515c <RCCEx_PLL2_Config>
 8003f94:	4603      	mov	r3, r0
 8003f96:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 8003f9a:	e00e      	b.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003f9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003fa0:	3330      	adds	r3, #48	@ 0x30
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f001 f972 	bl	800528c <RCCEx_PLL3_Config>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART2 clock source config set later after clock selection check */
        break;
 8003fae:	e004      	b.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8003fb6:	e000      	b.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8003fb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fba:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d10c      	bne.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8003fc2:	4b5f      	ldr	r3, [pc, #380]	@ (8004140 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003fc4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003fc8:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003fcc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003fd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fd2:	4a5b      	ldr	r2, [pc, #364]	@ (8004140 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003fd4:	430b      	orrs	r3, r1
 8003fd6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003fda:	e003      	b.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fdc:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8003fe0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003fe4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fec:	f002 0304 	and.w	r3, r2, #4
 8003ff0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003ffa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003ffe:	460b      	mov	r3, r1
 8004000:	4313      	orrs	r3, r2
 8004002:	d04e      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8004004:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004008:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800400a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800400e:	d02c      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8004010:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004014:	d825      	bhi.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004016:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800401a:	d028      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x292>
 800401c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004020:	d81f      	bhi.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004022:	2bc0      	cmp	r3, #192	@ 0xc0
 8004024:	d025      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8004026:	2bc0      	cmp	r3, #192	@ 0xc0
 8004028:	d81b      	bhi.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800402a:	2b80      	cmp	r3, #128	@ 0x80
 800402c:	d00f      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x272>
 800402e:	2b80      	cmp	r3, #128	@ 0x80
 8004030:	d817      	bhi.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004032:	2b00      	cmp	r3, #0
 8004034:	d01f      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8004036:	2b40      	cmp	r3, #64	@ 0x40
 8004038:	d113      	bne.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800403a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800403e:	3308      	adds	r3, #8
 8004040:	4618      	mov	r0, r3
 8004042:	f001 f88b 	bl	800515c <RCCEx_PLL2_Config>
 8004046:	4603      	mov	r3, r0
 8004048:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 800404c:	e014      	b.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800404e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004052:	3330      	adds	r3, #48	@ 0x30
 8004054:	4618      	mov	r0, r3
 8004056:	f001 f919 	bl	800528c <RCCEx_PLL3_Config>
 800405a:	4603      	mov	r3, r0
 800405c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART3 clock source config set later after clock selection check */
        break;
 8004060:	e00a      	b.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004068:	e006      	b.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800406a:	bf00      	nop
 800406c:	e004      	b.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800406e:	bf00      	nop
 8004070:	e002      	b.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004072:	bf00      	nop
 8004074:	e000      	b.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004076:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004078:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800407c:	2b00      	cmp	r3, #0
 800407e:	d10c      	bne.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8004080:	4b2f      	ldr	r3, [pc, #188]	@ (8004140 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004082:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004086:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800408a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800408e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004090:	4a2b      	ldr	r2, [pc, #172]	@ (8004140 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004092:	430b      	orrs	r3, r1
 8004094:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004098:	e003      	b.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800409a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800409e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80040a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80040a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040aa:	f002 0308 	and.w	r3, r2, #8
 80040ae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80040b2:	2300      	movs	r3, #0
 80040b4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80040b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80040bc:	460b      	mov	r3, r1
 80040be:	4313      	orrs	r3, r2
 80040c0:	d056      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 80040c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80040c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040c8:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80040cc:	d031      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x356>
 80040ce:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80040d2:	d82a      	bhi.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80040d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80040d8:	d02d      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80040da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80040de:	d824      	bhi.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80040e0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80040e4:	d029      	beq.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x35e>
 80040e6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80040ea:	d81e      	bhi.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80040ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040f0:	d011      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 80040f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040f6:	d818      	bhi.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d023      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80040fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004100:	d113      	bne.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004102:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004106:	3308      	adds	r3, #8
 8004108:	4618      	mov	r0, r3
 800410a:	f001 f827 	bl	800515c <RCCEx_PLL2_Config>
 800410e:	4603      	mov	r3, r0
 8004110:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 8004114:	e017      	b.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004116:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800411a:	3330      	adds	r3, #48	@ 0x30
 800411c:	4618      	mov	r0, r3
 800411e:	f001 f8b5 	bl	800528c <RCCEx_PLL3_Config>
 8004122:	4603      	mov	r3, r0
 8004124:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART4 clock source config set later after clock selection check */
        break;
 8004128:	e00d      	b.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004130:	e009      	b.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8004132:	bf00      	nop
 8004134:	e007      	b.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8004136:	bf00      	nop
 8004138:	e005      	b.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800413a:	bf00      	nop
 800413c:	e003      	b.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800413e:	bf00      	nop
 8004140:	44020c00 	.word	0x44020c00
        break;
 8004144:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004146:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800414a:	2b00      	cmp	r3, #0
 800414c:	d10c      	bne.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800414e:	4bb9      	ldr	r3, [pc, #740]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004150:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004154:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8004158:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800415c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800415e:	4ab5      	ldr	r2, [pc, #724]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004160:	430b      	orrs	r3, r1
 8004162:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004166:	e003      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004168:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800416c:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004170:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004178:	f002 0310 	and.w	r3, r2, #16
 800417c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004180:	2300      	movs	r3, #0
 8004182:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004186:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800418a:	460b      	mov	r3, r1
 800418c:	4313      	orrs	r3, r2
 800418e:	d053      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8004190:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004194:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004196:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800419a:	d031      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x424>
 800419c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80041a0:	d82a      	bhi.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80041a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80041a6:	d02d      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x428>
 80041a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80041ac:	d824      	bhi.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80041ae:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80041b2:	d029      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 80041b4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80041b8:	d81e      	bhi.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80041ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041be:	d011      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80041c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041c4:	d818      	bhi.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d020      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x430>
 80041ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041ce:	d113      	bne.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80041d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80041d4:	3308      	adds	r3, #8
 80041d6:	4618      	mov	r0, r3
 80041d8:	f000 ffc0 	bl	800515c <RCCEx_PLL2_Config>
 80041dc:	4603      	mov	r3, r0
 80041de:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 80041e2:	e014      	b.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80041e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80041e8:	3330      	adds	r3, #48	@ 0x30
 80041ea:	4618      	mov	r0, r3
 80041ec:	f001 f84e 	bl	800528c <RCCEx_PLL3_Config>
 80041f0:	4603      	mov	r3, r0
 80041f2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* UART5 clock source config set later after clock selection check */
        break;
 80041f6:	e00a      	b.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80041fe:	e006      	b.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004200:	bf00      	nop
 8004202:	e004      	b.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004204:	bf00      	nop
 8004206:	e002      	b.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004208:	bf00      	nop
 800420a:	e000      	b.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800420c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800420e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004212:	2b00      	cmp	r3, #0
 8004214:	d10c      	bne.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8004216:	4b87      	ldr	r3, [pc, #540]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004218:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800421c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004220:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004224:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004226:	4a83      	ldr	r2, [pc, #524]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004228:	430b      	orrs	r3, r1
 800422a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800422e:	e003      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004230:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004234:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004238:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800423c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004240:	f002 0320 	and.w	r3, r2, #32
 8004244:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004248:	2300      	movs	r3, #0
 800424a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800424e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004252:	460b      	mov	r3, r1
 8004254:	4313      	orrs	r3, r2
 8004256:	d053      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8004258:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800425c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800425e:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8004262:	d031      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8004264:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8004268:	d82a      	bhi.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800426a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800426e:	d02d      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004270:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004274:	d824      	bhi.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004276:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800427a:	d029      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 800427c:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8004280:	d81e      	bhi.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004282:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004286:	d011      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8004288:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800428c:	d818      	bhi.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800428e:	2b00      	cmp	r3, #0
 8004290:	d020      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8004292:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004296:	d113      	bne.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004298:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800429c:	3308      	adds	r3, #8
 800429e:	4618      	mov	r0, r3
 80042a0:	f000 ff5c 	bl	800515c <RCCEx_PLL2_Config>
 80042a4:	4603      	mov	r3, r0
 80042a6:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 80042aa:	e014      	b.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80042ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80042b0:	3330      	adds	r3, #48	@ 0x30
 80042b2:	4618      	mov	r0, r3
 80042b4:	f000 ffea 	bl	800528c <RCCEx_PLL3_Config>
 80042b8:	4603      	mov	r3, r0
 80042ba:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* USART6 clock source config set later after clock selection check */
        break;
 80042be:	e00a      	b.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80042c6:	e006      	b.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80042c8:	bf00      	nop
 80042ca:	e004      	b.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80042cc:	bf00      	nop
 80042ce:	e002      	b.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80042d0:	bf00      	nop
 80042d2:	e000      	b.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80042d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042d6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d10c      	bne.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 80042de:	4b55      	ldr	r3, [pc, #340]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80042e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80042e4:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 80042e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80042ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042ee:	4a51      	ldr	r2, [pc, #324]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80042f0:	430b      	orrs	r3, r1
 80042f2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80042f6:	e003      	b.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042f8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80042fc:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004300:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004308:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800430c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004310:	2300      	movs	r3, #0
 8004312:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004316:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800431a:	460b      	mov	r3, r1
 800431c:	4313      	orrs	r3, r2
 800431e:	d053      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8004320:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004324:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004326:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800432a:	d031      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 800432c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004330:	d82a      	bhi.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004332:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004336:	d02d      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8004338:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800433c:	d824      	bhi.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800433e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004342:	d029      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004344:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004348:	d81e      	bhi.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800434a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800434e:	d011      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8004350:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004354:	d818      	bhi.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004356:	2b00      	cmp	r3, #0
 8004358:	d020      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800435a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800435e:	d113      	bne.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004360:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004364:	3308      	adds	r3, #8
 8004366:	4618      	mov	r0, r3
 8004368:	f000 fef8 	bl	800515c <RCCEx_PLL2_Config>
 800436c:	4603      	mov	r3, r0
 800436e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8004372:	e014      	b.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x5c2>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004374:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004378:	3330      	adds	r3, #48	@ 0x30
 800437a:	4618      	mov	r0, r3
 800437c:	f000 ff86 	bl	800528c <RCCEx_PLL3_Config>
 8004380:	4603      	mov	r3, r0
 8004382:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8004386:	e00a      	b.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800438e:	e006      	b.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004390:	bf00      	nop
 8004392:	e004      	b.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004394:	bf00      	nop
 8004396:	e002      	b.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004398:	bf00      	nop
 800439a:	e000      	b.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800439c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800439e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d10c      	bne.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80043a6:	4b23      	ldr	r3, [pc, #140]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80043a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80043ac:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80043b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80043b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043b6:	4a1f      	ldr	r2, [pc, #124]	@ (8004434 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80043b8:	430b      	orrs	r3, r1
 80043ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80043be:	e003      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043c0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80043c4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80043cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d0:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80043d4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80043d8:	2300      	movs	r3, #0
 80043da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80043de:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80043e2:	460b      	mov	r3, r1
 80043e4:	4313      	orrs	r3, r2
 80043e6:	d03d      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x688>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 80043e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80043ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80043ee:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80043f2:	d01b      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x650>
 80043f4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80043f8:	d814      	bhi.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x648>
 80043fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80043fe:	d017      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x654>
 8004400:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004404:	d80e      	bhi.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x648>
 8004406:	2b00      	cmp	r3, #0
 8004408:	d016      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 800440a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800440e:	d109      	bne.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x648>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004410:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004414:	3330      	adds	r3, #48	@ 0x30
 8004416:	4618      	mov	r0, r3
 8004418:	f000 ff38 	bl	800528c <RCCEx_PLL3_Config>
 800441c:	4603      	mov	r3, r0
 800441e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8004422:	e00a      	b.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x65e>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800442a:	e006      	b.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 800442c:	bf00      	nop
 800442e:	e004      	b.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x65e>
        break;
 8004430:	bf00      	nop
 8004432:	e002      	b.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x65e>
 8004434:	44020c00 	.word	0x44020c00
        break;
 8004438:	bf00      	nop
    }

    if (ret == HAL_OK)
 800443a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800443e:	2b00      	cmp	r3, #0
 8004440:	d10c      	bne.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x680>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004442:	4b99      	ldr	r3, [pc, #612]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004444:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004448:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800444c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004450:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004452:	4a95      	ldr	r2, [pc, #596]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004454:	430b      	orrs	r3, r1
 8004456:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800445a:	e003      	b.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x688>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800445c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004460:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004464:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800446c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004470:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004474:	2300      	movs	r3, #0
 8004476:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800447a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800447e:	460b      	mov	r3, r1
 8004480:	4313      	orrs	r3, r2
 8004482:	d03b      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x720>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8004484:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004488:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800448a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800448e:	d01b      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
 8004490:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004494:	d814      	bhi.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 8004496:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800449a:	d017      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 800449c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80044a0:	d80e      	bhi.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d014      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 80044a6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80044aa:	d109      	bne.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80044ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80044b0:	3330      	adds	r3, #48	@ 0x30
 80044b2:	4618      	mov	r0, r3
 80044b4:	f000 feea 	bl	800528c <RCCEx_PLL3_Config>
 80044b8:	4603      	mov	r3, r0
 80044ba:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 80044be:	e008      	b.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80044c6:	e004      	b.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 80044c8:	bf00      	nop
 80044ca:	e002      	b.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 80044cc:	bf00      	nop
 80044ce:	e000      	b.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
        break;
 80044d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044d2:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d10c      	bne.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x718>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80044da:	4b73      	ldr	r3, [pc, #460]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80044dc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80044e0:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80044e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80044e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044ea:	4a6f      	ldr	r2, [pc, #444]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80044ec:	430b      	orrs	r3, r1
 80044ee:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80044f2:	e003      	b.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x720>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044f4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80044f8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80044fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004504:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004508:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800450c:	2300      	movs	r3, #0
 800450e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004512:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004516:	460b      	mov	r3, r1
 8004518:	4313      	orrs	r3, r2
 800451a:	d03d      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 800451c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004520:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004524:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004528:	d01b      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x786>
 800452a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800452e:	d814      	bhi.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8004530:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004534:	d017      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x78a>
 8004536:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800453a:	d80e      	bhi.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x77e>
 800453c:	2b00      	cmp	r3, #0
 800453e:	d014      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x78e>
 8004540:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004544:	d109      	bne.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x77e>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004546:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800454a:	3330      	adds	r3, #48	@ 0x30
 800454c:	4618      	mov	r0, r3
 800454e:	f000 fe9d 	bl	800528c <RCCEx_PLL3_Config>
 8004552:	4603      	mov	r3, r0
 8004554:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* I2C3 clock source config set later after clock selection check */
        break;
 8004558:	e008      	b.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x790>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004560:	e004      	b.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8004562:	bf00      	nop
 8004564:	e002      	b.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 8004566:	bf00      	nop
 8004568:	e000      	b.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x790>
        break;
 800456a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800456c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004570:	2b00      	cmp	r3, #0
 8004572:	d10d      	bne.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8004574:	4b4c      	ldr	r3, [pc, #304]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004576:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800457a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800457e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004582:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004586:	4a48      	ldr	r2, [pc, #288]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004588:	430b      	orrs	r3, r1
 800458a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800458e:	e003      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004590:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004594:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8004598:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800459c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a0:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80045a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80045a8:	2300      	movs	r3, #0
 80045aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80045ae:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80045b2:	460b      	mov	r3, r1
 80045b4:	4313      	orrs	r3, r2
 80045b6:	d035      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x848>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 80045b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80045bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80045c4:	d015      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x816>
 80045c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80045ca:	d80e      	bhi.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x80e>
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d012      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 80045d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80045d4:	d109      	bne.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x80e>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80045d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80045da:	3330      	adds	r3, #48	@ 0x30
 80045dc:	4618      	mov	r0, r3
 80045de:	f000 fe55 	bl	800528c <RCCEx_PLL3_Config>
 80045e2:	4603      	mov	r3, r0
 80045e4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 80045e8:	e006      	b.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80045f0:	e002      	b.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 80045f2:	bf00      	nop
 80045f4:	e000      	b.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
 80045f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045f8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d10d      	bne.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8004600:	4b29      	ldr	r3, [pc, #164]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004602:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004606:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 800460a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800460e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004612:	4a25      	ldr	r2, [pc, #148]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004614:	430b      	orrs	r3, r1
 8004616:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800461a:	e003      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x848>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800461c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004620:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 8004624:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800462c:	2100      	movs	r1, #0
 800462e:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 8004632:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004636:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800463a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800463e:	460b      	mov	r3, r1
 8004640:	4313      	orrs	r3, r2
 8004642:	d037      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 8004644:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004648:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800464c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004650:	d015      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8004652:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004656:	d80e      	bhi.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x89a>
 8004658:	2b00      	cmp	r3, #0
 800465a:	d012      	beq.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 800465c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004660:	d109      	bne.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x89a>
        break;

#if defined(RCC_I3C2CLKSOURCE_PLL3R)
      case RCC_I3C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004662:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004666:	3330      	adds	r3, #48	@ 0x30
 8004668:	4618      	mov	r0, r3
 800466a:	f000 fe0f 	bl	800528c <RCCEx_PLL3_Config>
 800466e:	4603      	mov	r3, r0
 8004670:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 8004674:	e006      	b.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800467c:	e002      	b.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 800467e:	bf00      	nop
 8004680:	e000      	b.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
        break;
 8004682:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004684:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004688:	2b00      	cmp	r3, #0
 800468a:	d10f      	bne.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x8d0>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 800468c:	4b06      	ldr	r3, [pc, #24]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800468e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004692:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004696:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800469a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800469e:	4a02      	ldr	r2, [pc, #8]	@ (80046a8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80046a0:	430b      	orrs	r3, r1
 80046a2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80046a6:	e005      	b.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 80046a8:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046ac:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80046b0:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80046b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80046b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046bc:	2100      	movs	r1, #0
 80046be:	67b9      	str	r1, [r7, #120]	@ 0x78
 80046c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80046c6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80046ca:	460b      	mov	r3, r1
 80046cc:	4313      	orrs	r3, r2
 80046ce:	d00e      	beq.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x912>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 80046d0:	4bb8      	ldr	r3, [pc, #736]	@ (80049b4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80046d2:	69db      	ldr	r3, [r3, #28]
 80046d4:	4ab7      	ldr	r2, [pc, #732]	@ (80049b4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80046d6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80046da:	61d3      	str	r3, [r2, #28]
 80046dc:	4bb5      	ldr	r3, [pc, #724]	@ (80049b4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80046de:	69d9      	ldr	r1, [r3, #28]
 80046e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80046e4:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80046e8:	4ab2      	ldr	r2, [pc, #712]	@ (80049b4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80046ea:	430b      	orrs	r3, r1
 80046ec:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80046ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80046f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80046fa:	673b      	str	r3, [r7, #112]	@ 0x70
 80046fc:	2300      	movs	r3, #0
 80046fe:	677b      	str	r3, [r7, #116]	@ 0x74
 8004700:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004704:	460b      	mov	r3, r1
 8004706:	4313      	orrs	r3, r2
 8004708:	d055      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 800470a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800470e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004712:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004716:	d031      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 8004718:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800471c:	d82a      	bhi.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x998>
 800471e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004722:	d02d      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x9a4>
 8004724:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004728:	d824      	bhi.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x998>
 800472a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800472e:	d029      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
 8004730:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004734:	d81e      	bhi.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8004736:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800473a:	d011      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800473c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004740:	d818      	bhi.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x998>
 8004742:	2b00      	cmp	r3, #0
 8004744:	d020      	beq.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
 8004746:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800474a:	d113      	bne.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x998>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800474c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004750:	3308      	adds	r3, #8
 8004752:	4618      	mov	r0, r3
 8004754:	f000 fd02 	bl	800515c <RCCEx_PLL2_Config>
 8004758:	4603      	mov	r3, r0
 800475a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800475e:	e014      	b.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x9ae>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004760:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004764:	3330      	adds	r3, #48	@ 0x30
 8004766:	4618      	mov	r0, r3
 8004768:	f000 fd90 	bl	800528c <RCCEx_PLL3_Config>
 800476c:	4603      	mov	r3, r0
 800476e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8004772:	e00a      	b.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x9ae>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 800477a:	e006      	b.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 800477c:	bf00      	nop
 800477e:	e004      	b.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8004780:	bf00      	nop
 8004782:	e002      	b.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8004784:	bf00      	nop
 8004786:	e000      	b.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x9ae>
        break;
 8004788:	bf00      	nop
    }

    if (ret == HAL_OK)
 800478a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800478e:	2b00      	cmp	r3, #0
 8004790:	d10d      	bne.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x9d2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004792:	4b88      	ldr	r3, [pc, #544]	@ (80049b4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004794:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004798:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800479c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80047a4:	4a83      	ldr	r2, [pc, #524]	@ (80049b4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80047a6:	430b      	orrs	r3, r1
 80047a8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80047ac:	e003      	b.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047ae:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80047b2:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80047b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047be:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80047c2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80047c4:	2300      	movs	r3, #0
 80047c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80047c8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80047cc:	460b      	mov	r3, r1
 80047ce:	4313      	orrs	r3, r2
 80047d0:	d055      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 80047d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047da:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80047de:	d031      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0xa68>
 80047e0:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80047e4:	d82a      	bhi.n	800483c <HAL_RCCEx_PeriphCLKConfig+0xa60>
 80047e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80047ea:	d02d      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
 80047ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80047f0:	d824      	bhi.n	800483c <HAL_RCCEx_PeriphCLKConfig+0xa60>
 80047f2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80047f6:	d029      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80047f8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80047fc:	d81e      	bhi.n	800483c <HAL_RCCEx_PeriphCLKConfig+0xa60>
 80047fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004802:	d011      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8004804:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004808:	d818      	bhi.n	800483c <HAL_RCCEx_PeriphCLKConfig+0xa60>
 800480a:	2b00      	cmp	r3, #0
 800480c:	d020      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800480e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004812:	d113      	bne.n	800483c <HAL_RCCEx_PeriphCLKConfig+0xa60>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004814:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004818:	3308      	adds	r3, #8
 800481a:	4618      	mov	r0, r3
 800481c:	f000 fc9e 	bl	800515c <RCCEx_PLL2_Config>
 8004820:	4603      	mov	r3, r0
 8004822:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8004826:	e014      	b.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0xa76>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004828:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800482c:	3330      	adds	r3, #48	@ 0x30
 800482e:	4618      	mov	r0, r3
 8004830:	f000 fd2c 	bl	800528c <RCCEx_PLL3_Config>
 8004834:	4603      	mov	r3, r0
 8004836:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800483a:	e00a      	b.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0xa76>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004842:	e006      	b.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8004844:	bf00      	nop
 8004846:	e004      	b.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8004848:	bf00      	nop
 800484a:	e002      	b.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 800484c:	bf00      	nop
 800484e:	e000      	b.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        break;
 8004850:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004852:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004856:	2b00      	cmp	r3, #0
 8004858:	d10d      	bne.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0xa9a>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800485a:	4b56      	ldr	r3, [pc, #344]	@ (80049b4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800485c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004860:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004864:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004868:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800486c:	4a51      	ldr	r2, [pc, #324]	@ (80049b4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800486e:	430b      	orrs	r3, r1
 8004870:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004874:	e003      	b.n	800487e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004876:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800487a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800487e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004886:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800488a:	663b      	str	r3, [r7, #96]	@ 0x60
 800488c:	2300      	movs	r3, #0
 800488e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004890:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004894:	460b      	mov	r3, r1
 8004896:	4313      	orrs	r3, r2
 8004898:	d032      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0xb24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800489a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800489e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80048a2:	2b05      	cmp	r3, #5
 80048a4:	d80f      	bhi.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0xaea>
 80048a6:	2b03      	cmp	r3, #3
 80048a8:	d211      	bcs.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d911      	bls.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	d109      	bne.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0xaea>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80048b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80048b6:	3308      	adds	r3, #8
 80048b8:	4618      	mov	r0, r3
 80048ba:	f000 fc4f 	bl	800515c <RCCEx_PLL2_Config>
 80048be:	4603      	mov	r3, r0
 80048c0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80048c4:	e006      	b.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80048cc:	e002      	b.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 80048ce:	bf00      	nop
 80048d0:	e000      	b.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
 80048d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048d4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d10d      	bne.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80048dc:	4b35      	ldr	r3, [pc, #212]	@ (80049b4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80048de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80048e2:	f023 0107 	bic.w	r1, r3, #7
 80048e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80048ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80048ee:	4a31      	ldr	r2, [pc, #196]	@ (80049b4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80048f0:	430b      	orrs	r3, r1
 80048f2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80048f6:	e003      	b.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0xb24>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048f8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80048fc:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8004900:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004908:	2100      	movs	r1, #0
 800490a:	65b9      	str	r1, [r7, #88]	@ 0x58
 800490c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004910:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004912:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004916:	460b      	mov	r3, r1
 8004918:	4313      	orrs	r3, r2
 800491a:	d024      	beq.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 800491c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004920:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004924:	2b00      	cmp	r3, #0
 8004926:	d005      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0xb58>
 8004928:	2b08      	cmp	r3, #8
 800492a:	d005      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004932:	e002      	b.n	800493a <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 8004934:	bf00      	nop
 8004936:	e000      	b.n	800493a <HAL_RCCEx_PeriphCLKConfig+0xb5e>
        break;
 8004938:	bf00      	nop
    }

    if (ret == HAL_OK)
 800493a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800493e:	2b00      	cmp	r3, #0
 8004940:	d10d      	bne.n	800495e <HAL_RCCEx_PeriphCLKConfig+0xb82>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8004942:	4b1c      	ldr	r3, [pc, #112]	@ (80049b4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004944:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004948:	f023 0108 	bic.w	r1, r3, #8
 800494c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004950:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004954:	4a17      	ldr	r2, [pc, #92]	@ (80049b4 <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8004956:	430b      	orrs	r3, r1
 8004958:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800495c:	e003      	b.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800495e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004962:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004966:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800496a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800496e:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004972:	653b      	str	r3, [r7, #80]	@ 0x50
 8004974:	2300      	movs	r3, #0
 8004976:	657b      	str	r3, [r7, #84]	@ 0x54
 8004978:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800497c:	460b      	mov	r3, r1
 800497e:	4313      	orrs	r3, r2
 8004980:	f000 80b9 	beq.w	8004af6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8004984:	4b0c      	ldr	r3, [pc, #48]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 8004986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004988:	4a0b      	ldr	r2, [pc, #44]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 800498a:	f043 0301 	orr.w	r3, r3, #1
 800498e:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004990:	f7fc f932 	bl	8000bf8 <HAL_GetTick>
 8004994:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004998:	e010      	b.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0xbe0>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800499a:	f7fc f92d 	bl	8000bf8 <HAL_GetTick>
 800499e:	4602      	mov	r2, r0
 80049a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d908      	bls.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0xbe0>
      {
        ret = HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80049b0:	e00a      	b.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0xbec>
 80049b2:	bf00      	nop
 80049b4:	44020c00 	.word	0x44020c00
 80049b8:	44020800 	.word	0x44020800
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80049bc:	4bba      	ldr	r3, [pc, #744]	@ (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0xecc>)
 80049be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c0:	f003 0301 	and.w	r3, r3, #1
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d0e8      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0xbbe>
      }
    }

    if (ret == HAL_OK)
 80049c8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	f040 808e 	bne.w	8004aee <HAL_RCCEx_PeriphCLKConfig+0xd12>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80049d2:	4bb6      	ldr	r3, [pc, #728]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80049d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80049d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049dc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80049e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d023      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 80049e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80049ec:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 80049f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d01b      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0xc54>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80049f8:	4bac      	ldr	r3, [pc, #688]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 80049fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80049fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a02:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a06:	4ba9      	ldr	r3, [pc, #676]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004a08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a0c:	4aa7      	ldr	r2, [pc, #668]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004a0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a12:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a16:	4ba5      	ldr	r3, [pc, #660]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004a18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a1c:	4aa3      	ldr	r2, [pc, #652]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004a1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a22:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004a26:	4aa1      	ldr	r2, [pc, #644]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004a28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a2c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004a30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a34:	f003 0301 	and.w	r3, r3, #1
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d019      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a3c:	f7fc f8dc 	bl	8000bf8 <HAL_GetTick>
 8004a40:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a44:	e00d      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0xc86>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a46:	f7fc f8d7 	bl	8000bf8 <HAL_GetTick>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a50:	1ad2      	subs	r2, r2, r3
 8004a52:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d903      	bls.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0xc86>
          {
            ret = HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
            break;
 8004a60:	e006      	b.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0xc94>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a62:	4b92      	ldr	r3, [pc, #584]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004a64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a68:	f003 0302 	and.w	r3, r3, #2
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d0ea      	beq.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
          }
        }
      }

      if (ret == HAL_OK)
 8004a70:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d135      	bne.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8004a78:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a7c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004a80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a84:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a88:	d110      	bne.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0xcd0>
 8004a8a:	4b88      	ldr	r3, [pc, #544]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004a8c:	69db      	ldr	r3, [r3, #28]
 8004a8e:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004a92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a96:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004a9a:	091b      	lsrs	r3, r3, #4
 8004a9c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004aa0:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8004aa4:	4a81      	ldr	r2, [pc, #516]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004aa6:	430b      	orrs	r3, r1
 8004aa8:	61d3      	str	r3, [r2, #28]
 8004aaa:	e005      	b.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8004aac:	4b7f      	ldr	r3, [pc, #508]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004aae:	69db      	ldr	r3, [r3, #28]
 8004ab0:	4a7e      	ldr	r2, [pc, #504]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004ab2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004ab6:	61d3      	str	r3, [r2, #28]
 8004ab8:	4b7c      	ldr	r3, [pc, #496]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004aba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004abe:	4a7b      	ldr	r2, [pc, #492]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004ac0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ac4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004ac8:	4b78      	ldr	r3, [pc, #480]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004aca:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8004ace:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ad2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004ad6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ada:	4a74      	ldr	r2, [pc, #464]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004adc:	430b      	orrs	r3, r1
 8004ade:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004ae2:	e008      	b.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004ae4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004ae8:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 8004aec:	e003      	b.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aee:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004af2:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004af6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004afe:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8004b02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b04:	2300      	movs	r3, #0
 8004b06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b08:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	d035      	beq.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0xda2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8004b12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b16:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004b1a:	2b30      	cmp	r3, #48	@ 0x30
 8004b1c:	d014      	beq.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
 8004b1e:	2b30      	cmp	r3, #48	@ 0x30
 8004b20:	d80e      	bhi.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0xd64>
 8004b22:	2b20      	cmp	r3, #32
 8004b24:	d012      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0xd70>
 8004b26:	2b20      	cmp	r3, #32
 8004b28:	d80a      	bhi.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0xd64>
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d010      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0xd74>
 8004b2e:	2b10      	cmp	r3, #16
 8004b30:	d106      	bne.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0xd64>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b32:	4b5e      	ldr	r3, [pc, #376]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004b34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b36:	4a5d      	ldr	r2, [pc, #372]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004b38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b3c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8004b3e:	e008      	b.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0xd76>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004b46:	e004      	b.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8004b48:	bf00      	nop
 8004b4a:	e002      	b.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8004b4c:	bf00      	nop
 8004b4e:	e000      	b.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0xd76>
        break;
 8004b50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b52:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d10d      	bne.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8004b5a:	4b54      	ldr	r3, [pc, #336]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004b5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004b60:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004b64:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b68:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004b6c:	4a4f      	ldr	r2, [pc, #316]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004b6e:	430b      	orrs	r3, r1
 8004b70:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004b74:	e003      	b.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0xda2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b76:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004b7a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004b7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b86:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004b8a:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b90:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004b94:	460b      	mov	r3, r1
 8004b96:	4313      	orrs	r3, r2
 8004b98:	d033      	beq.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8004b9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d002      	beq.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0xdd0>
 8004ba6:	2b40      	cmp	r3, #64	@ 0x40
 8004ba8:	d007      	beq.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004baa:	e010      	b.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0xdf2>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bac:	4b3f      	ldr	r3, [pc, #252]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bb0:	4a3e      	ldr	r2, [pc, #248]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004bb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bb6:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8004bb8:	e00d      	b.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004bba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004bbe:	3308      	adds	r3, #8
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f000 facb 	bl	800515c <RCCEx_PLL2_Config>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8004bcc:	e003      	b.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0xdfa>

      default:
        ret = HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004bd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bd6:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d10d      	bne.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8004bde:	4b33      	ldr	r3, [pc, #204]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004be0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004be4:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8004be8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004bec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004bf0:	4a2e      	ldr	r2, [pc, #184]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004bf2:	430b      	orrs	r3, r1
 8004bf4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004bf8:	e003      	b.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0xe26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bfa:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004bfe:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8004c02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c0a:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8004c0e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004c10:	2300      	movs	r3, #0
 8004c12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c14:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004c18:	460b      	mov	r3, r1
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	d04c      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0xedc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8004c1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c22:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004c26:	2b04      	cmp	r3, #4
 8004c28:	d827      	bhi.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8004c2a:	a201      	add	r2, pc, #4	@ (adr r2, 8004c30 <HAL_RCCEx_PeriphCLKConfig+0xe54>)
 8004c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c30:	08004c45 	.word	0x08004c45
 8004c34:	08004c53 	.word	0x08004c53
 8004c38:	08004c67 	.word	0x08004c67
 8004c3c:	08004c83 	.word	0x08004c83
 8004c40:	08004c83 	.word	0x08004c83
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c44:	4b19      	ldr	r3, [pc, #100]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c48:	4a18      	ldr	r2, [pc, #96]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004c4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c4e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004c50:	e018      	b.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0xea8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004c52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c56:	3308      	adds	r3, #8
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f000 fa7f 	bl	800515c <RCCEx_PLL2_Config>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004c64:	e00e      	b.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0xea8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004c66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c6a:	3330      	adds	r3, #48	@ 0x30
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f000 fb0d 	bl	800528c <RCCEx_PLL3_Config>
 8004c72:	4603      	mov	r3, r0
 8004c74:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004c78:	e004      	b.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0xea8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004c80:	e000      	b.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0xea8>
        break;
 8004c82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c84:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d111      	bne.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xed4>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8004c8c:	4b07      	ldr	r3, [pc, #28]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004c8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c92:	f023 0107 	bic.w	r1, r3, #7
 8004c96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c9a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004c9e:	4a03      	ldr	r2, [pc, #12]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0xed0>)
 8004ca0:	430b      	orrs	r3, r1
 8004ca2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004ca6:	e007      	b.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0xedc>
 8004ca8:	44020800 	.word	0x44020800
 8004cac:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cb0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004cb4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8004cb8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004cc4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cca:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004cce:	460b      	mov	r3, r1
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	f000 8081 	beq.w	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0xffc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8004cd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004cda:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004cde:	2b20      	cmp	r3, #32
 8004ce0:	d85f      	bhi.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0xfc6>
 8004ce2:	a201      	add	r2, pc, #4	@ (adr r2, 8004ce8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>)
 8004ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce8:	08004d6d 	.word	0x08004d6d
 8004cec:	08004da3 	.word	0x08004da3
 8004cf0:	08004da3 	.word	0x08004da3
 8004cf4:	08004da3 	.word	0x08004da3
 8004cf8:	08004da3 	.word	0x08004da3
 8004cfc:	08004da3 	.word	0x08004da3
 8004d00:	08004da3 	.word	0x08004da3
 8004d04:	08004da3 	.word	0x08004da3
 8004d08:	08004d7b 	.word	0x08004d7b
 8004d0c:	08004da3 	.word	0x08004da3
 8004d10:	08004da3 	.word	0x08004da3
 8004d14:	08004da3 	.word	0x08004da3
 8004d18:	08004da3 	.word	0x08004da3
 8004d1c:	08004da3 	.word	0x08004da3
 8004d20:	08004da3 	.word	0x08004da3
 8004d24:	08004da3 	.word	0x08004da3
 8004d28:	08004d8f 	.word	0x08004d8f
 8004d2c:	08004da3 	.word	0x08004da3
 8004d30:	08004da3 	.word	0x08004da3
 8004d34:	08004da3 	.word	0x08004da3
 8004d38:	08004da3 	.word	0x08004da3
 8004d3c:	08004da3 	.word	0x08004da3
 8004d40:	08004da3 	.word	0x08004da3
 8004d44:	08004da3 	.word	0x08004da3
 8004d48:	08004dab 	.word	0x08004dab
 8004d4c:	08004da3 	.word	0x08004da3
 8004d50:	08004da3 	.word	0x08004da3
 8004d54:	08004da3 	.word	0x08004da3
 8004d58:	08004da3 	.word	0x08004da3
 8004d5c:	08004da3 	.word	0x08004da3
 8004d60:	08004da3 	.word	0x08004da3
 8004d64:	08004da3 	.word	0x08004da3
 8004d68:	08004dab 	.word	0x08004dab
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d6c:	4bb9      	ldr	r3, [pc, #740]	@ (8005054 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8004d6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d70:	4ab8      	ldr	r2, [pc, #736]	@ (8005054 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8004d72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d76:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004d78:	e018      	b.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0xfd0>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004d7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d7e:	3308      	adds	r3, #8
 8004d80:	4618      	mov	r0, r3
 8004d82:	f000 f9eb 	bl	800515c <RCCEx_PLL2_Config>
 8004d86:	4603      	mov	r3, r0
 8004d88:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004d8c:	e00e      	b.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0xfd0>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004d8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d92:	3330      	adds	r3, #48	@ 0x30
 8004d94:	4618      	mov	r0, r3
 8004d96:	f000 fa79 	bl	800528c <RCCEx_PLL3_Config>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004da0:	e004      	b.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004da8:	e000      	b.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0xfd0>
        break;
 8004daa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dac:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d10d      	bne.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0xff4>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8004db4:	4ba7      	ldr	r3, [pc, #668]	@ (8005054 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8004db6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004dba:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004dbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004dc2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004dc6:	4aa3      	ldr	r2, [pc, #652]	@ (8005054 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8004dc8:	430b      	orrs	r3, r1
 8004dca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004dce:	e003      	b.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0xffc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dd0:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004dd4:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8004dd8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004de4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004de6:	2300      	movs	r3, #0
 8004de8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004dea:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004dee:	460b      	mov	r3, r1
 8004df0:	4313      	orrs	r3, r2
 8004df2:	d04e      	beq.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x10b6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8004df4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004df8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004dfc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e00:	d02e      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004e02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e06:	d827      	bhi.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8004e08:	2bc0      	cmp	r3, #192	@ 0xc0
 8004e0a:	d02b      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x1088>
 8004e0c:	2bc0      	cmp	r3, #192	@ 0xc0
 8004e0e:	d823      	bhi.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8004e10:	2b80      	cmp	r3, #128	@ 0x80
 8004e12:	d017      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1068>
 8004e14:	2b80      	cmp	r3, #128	@ 0x80
 8004e16:	d81f      	bhi.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d002      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x1046>
 8004e1c:	2b40      	cmp	r3, #64	@ 0x40
 8004e1e:	d007      	beq.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1054>
 8004e20:	e01a      	b.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e22:	4b8c      	ldr	r3, [pc, #560]	@ (8005054 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8004e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e26:	4a8b      	ldr	r2, [pc, #556]	@ (8005054 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8004e28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e2c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004e2e:	e01a      	b.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x108a>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004e30:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e34:	3308      	adds	r3, #8
 8004e36:	4618      	mov	r0, r3
 8004e38:	f000 f990 	bl	800515c <RCCEx_PLL2_Config>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004e42:	e010      	b.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x108a>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004e44:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e48:	3330      	adds	r3, #48	@ 0x30
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f000 fa1e 	bl	800528c <RCCEx_PLL3_Config>
 8004e50:	4603      	mov	r3, r0
 8004e52:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004e56:	e006      	b.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x108a>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004e5e:	e002      	b.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 8004e60:	bf00      	nop
 8004e62:	e000      	b.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x108a>
        break;
 8004e64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e66:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d10d      	bne.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x10ae>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8004e6e:	4b79      	ldr	r3, [pc, #484]	@ (8005054 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8004e70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e74:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 8004e78:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e7c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004e80:	4974      	ldr	r1, [pc, #464]	@ (8005054 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8004e88:	e003      	b.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x10b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e8a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004e8e:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8004e92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e9a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004e9e:	623b      	str	r3, [r7, #32]
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ea4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004ea8:	460b      	mov	r3, r1
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	d055      	beq.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x117e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8004eae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004eb2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004eb6:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004eba:	d031      	beq.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x1144>
 8004ebc:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004ec0:	d82a      	bhi.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8004ec2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ec6:	d02d      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x1148>
 8004ec8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ecc:	d824      	bhi.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8004ece:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004ed2:	d029      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x114c>
 8004ed4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004ed8:	d81e      	bhi.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8004eda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ede:	d011      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1128>
 8004ee0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ee4:	d818      	bhi.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x113c>
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d020      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x1150>
 8004eea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004eee:	d113      	bne.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x113c>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004ef0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ef4:	3308      	adds	r3, #8
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f000 f930 	bl	800515c <RCCEx_PLL2_Config>
 8004efc:	4603      	mov	r3, r0
 8004efe:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8004f02:	e014      	b.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x1152>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004f04:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f08:	3330      	adds	r3, #48	@ 0x30
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f000 f9be 	bl	800528c <RCCEx_PLL3_Config>
 8004f10:	4603      	mov	r3, r0
 8004f12:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8004f16:	e00a      	b.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x1152>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004f1e:	e006      	b.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8004f20:	bf00      	nop
 8004f22:	e004      	b.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8004f24:	bf00      	nop
 8004f26:	e002      	b.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8004f28:	bf00      	nop
 8004f2a:	e000      	b.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x1152>
        break;
 8004f2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f2e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d10d      	bne.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x1176>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8004f36:	4b47      	ldr	r3, [pc, #284]	@ (8005054 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8004f38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f3c:	f423 6260 	bic.w	r2, r3, #3584	@ 0xe00
 8004f40:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f44:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004f48:	4942      	ldr	r1, [pc, #264]	@ (8005054 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8004f50:	e003      	b.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x117e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f52:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004f56:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004f5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f62:	2100      	movs	r1, #0
 8004f64:	61b9      	str	r1, [r7, #24]
 8004f66:	f003 0302 	and.w	r3, r3, #2
 8004f6a:	61fb      	str	r3, [r7, #28]
 8004f6c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004f70:	460b      	mov	r3, r1
 8004f72:	4313      	orrs	r3, r2
 8004f74:	d03c      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8004f76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f7a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004f7e:	2b03      	cmp	r3, #3
 8004f80:	d81b      	bhi.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x11de>
 8004f82:	a201      	add	r2, pc, #4	@ (adr r2, 8004f88 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
 8004f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f88:	08004fc3 	.word	0x08004fc3
 8004f8c:	08004f99 	.word	0x08004f99
 8004f90:	08004fa7 	.word	0x08004fa7
 8004f94:	08004fc3 	.word	0x08004fc3
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f98:	4b2e      	ldr	r3, [pc, #184]	@ (8005054 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8004f9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f9c:	4a2d      	ldr	r2, [pc, #180]	@ (8005054 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8004f9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004fa2:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8004fa4:	e00e      	b.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x11e8>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004fa6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004faa:	3308      	adds	r3, #8
 8004fac:	4618      	mov	r0, r3
 8004fae:	f000 f8d5 	bl	800515c <RCCEx_PLL2_Config>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8004fb8:	e004      	b.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8004fc0:	e000      	b.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
        break;
 8004fc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fc4:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d10d      	bne.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x120c>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8004fcc:	4b21      	ldr	r3, [pc, #132]	@ (8005054 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8004fce:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004fd2:	f023 0203 	bic.w	r2, r3, #3
 8004fd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004fda:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004fde:	491d      	ldr	r1, [pc, #116]	@ (8005054 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8004fe6:	e003      	b.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fe8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8004fec:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004ff0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff8:	2100      	movs	r1, #0
 8004ffa:	6139      	str	r1, [r7, #16]
 8004ffc:	f003 0304 	and.w	r3, r3, #4
 8005000:	617b      	str	r3, [r7, #20]
 8005002:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005006:	460b      	mov	r3, r1
 8005008:	4313      	orrs	r3, r2
 800500a:	d03c      	beq.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x12aa>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 800500c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005010:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005014:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005018:	d00e      	beq.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 800501a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800501e:	d815      	bhi.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x1270>
 8005020:	2b00      	cmp	r3, #0
 8005022:	d019      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x127c>
 8005024:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005028:	d110      	bne.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x1270>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800502a:	4b0a      	ldr	r3, [pc, #40]	@ (8005054 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 800502c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800502e:	4a09      	ldr	r2, [pc, #36]	@ (8005054 <HAL_RCCEx_PeriphCLKConfig+0x1278>)
 8005030:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005034:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005036:	e010      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x127e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005038:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800503c:	3308      	adds	r3, #8
 800503e:	4618      	mov	r0, r3
 8005040:	f000 f88c 	bl	800515c <RCCEx_PLL2_Config>
 8005044:	4603      	mov	r3, r0
 8005046:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800504a:	e006      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x127e>

      default:
        ret = HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 8005052:	e002      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x127e>
 8005054:	44020c00 	.word	0x44020c00
        break;
 8005058:	bf00      	nop
    }

    if (ret == HAL_OK)
 800505a:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800505e:	2b00      	cmp	r3, #0
 8005060:	d10d      	bne.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x12a2>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8005062:	4b3d      	ldr	r3, [pc, #244]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005064:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005068:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800506c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005070:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005074:	4938      	ldr	r1, [pc, #224]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005076:	4313      	orrs	r3, r2
 8005078:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 800507c:	e003      	b.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x12aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800507e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005082:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005086:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800508a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800508e:	2100      	movs	r1, #0
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	f003 0310 	and.w	r3, r3, #16
 8005096:	60fb      	str	r3, [r7, #12]
 8005098:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800509c:	460b      	mov	r3, r1
 800509e:	4313      	orrs	r3, r2
 80050a0:	d038      	beq.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x1338>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 80050a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050a6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80050aa:	2b30      	cmp	r3, #48	@ 0x30
 80050ac:	d01b      	beq.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x130a>
 80050ae:	2b30      	cmp	r3, #48	@ 0x30
 80050b0:	d815      	bhi.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x1302>
 80050b2:	2b10      	cmp	r3, #16
 80050b4:	d002      	beq.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
 80050b6:	2b20      	cmp	r3, #32
 80050b8:	d007      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x12ee>
 80050ba:	e010      	b.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x1302>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050bc:	4b26      	ldr	r3, [pc, #152]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80050be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050c0:	4a25      	ldr	r2, [pc, #148]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80050c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050c6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 80050c8:	e00e      	b.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x130c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80050ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050ce:	3330      	adds	r3, #48	@ 0x30
 80050d0:	4618      	mov	r0, r3
 80050d2:	f000 f8db 	bl	800528c <RCCEx_PLL3_Config>
 80050d6:	4603      	mov	r3, r0
 80050d8:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 80050dc:	e004      	b.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x130c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
        break;
 80050e4:	e000      	b.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x130c>
        break;
 80050e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050e8:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d10d      	bne.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x1330>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 80050f0:	4b19      	ldr	r3, [pc, #100]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 80050f2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80050f6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80050fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050fe:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005102:	4915      	ldr	r1, [pc, #84]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005104:	4313      	orrs	r3, r2
 8005106:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800510a:	e003      	b.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x1338>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800510c:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8005110:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005114:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800511c:	2100      	movs	r1, #0
 800511e:	6039      	str	r1, [r7, #0]
 8005120:	f003 0308 	and.w	r3, r3, #8
 8005124:	607b      	str	r3, [r7, #4]
 8005126:	e9d7 1200 	ldrd	r1, r2, [r7]
 800512a:	460b      	mov	r3, r1
 800512c:	4313      	orrs	r3, r2
 800512e:	d00c      	beq.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x136e>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8005130:	4b09      	ldr	r3, [pc, #36]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005132:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005136:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800513a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800513e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005142:	4905      	ldr	r1, [pc, #20]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x137c>)
 8005144:	4313      	orrs	r3, r2
 8005146:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 800514a:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
}
 800514e:	4618      	mov	r0, r3
 8005150:	37e8      	adds	r7, #232	@ 0xe8
 8005152:	46bd      	mov	sp, r7
 8005154:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005158:	44020c00 	.word	0x44020c00

0800515c <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8005164:	4b48      	ldr	r3, [pc, #288]	@ (8005288 <RCCEx_PLL2_Config+0x12c>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a47      	ldr	r2, [pc, #284]	@ (8005288 <RCCEx_PLL2_Config+0x12c>)
 800516a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800516e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005170:	f7fb fd42 	bl	8000bf8 <HAL_GetTick>
 8005174:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005176:	e008      	b.n	800518a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005178:	f7fb fd3e 	bl	8000bf8 <HAL_GetTick>
 800517c:	4602      	mov	r2, r0
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	2b02      	cmp	r3, #2
 8005184:	d901      	bls.n	800518a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	e07a      	b.n	8005280 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800518a:	4b3f      	ldr	r3, [pc, #252]	@ (8005288 <RCCEx_PLL2_Config+0x12c>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005192:	2b00      	cmp	r3, #0
 8005194:	d1f0      	bne.n	8005178 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8005196:	4b3c      	ldr	r3, [pc, #240]	@ (8005288 <RCCEx_PLL2_Config+0x12c>)
 8005198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800519a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800519e:	f023 0303 	bic.w	r3, r3, #3
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	6811      	ldr	r1, [r2, #0]
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	6852      	ldr	r2, [r2, #4]
 80051aa:	0212      	lsls	r2, r2, #8
 80051ac:	430a      	orrs	r2, r1
 80051ae:	4936      	ldr	r1, [pc, #216]	@ (8005288 <RCCEx_PLL2_Config+0x12c>)
 80051b0:	4313      	orrs	r3, r2
 80051b2:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	3b01      	subs	r3, #1
 80051ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	3b01      	subs	r3, #1
 80051c4:	025b      	lsls	r3, r3, #9
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	431a      	orrs	r2, r3
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	3b01      	subs	r3, #1
 80051d0:	041b      	lsls	r3, r3, #16
 80051d2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80051d6:	431a      	orrs	r2, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	695b      	ldr	r3, [r3, #20]
 80051dc:	3b01      	subs	r3, #1
 80051de:	061b      	lsls	r3, r3, #24
 80051e0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80051e4:	4928      	ldr	r1, [pc, #160]	@ (8005288 <RCCEx_PLL2_Config+0x12c>)
 80051e6:	4313      	orrs	r3, r2
 80051e8:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80051ea:	4b27      	ldr	r3, [pc, #156]	@ (8005288 <RCCEx_PLL2_Config+0x12c>)
 80051ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ee:	f023 020c 	bic.w	r2, r3, #12
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	699b      	ldr	r3, [r3, #24]
 80051f6:	4924      	ldr	r1, [pc, #144]	@ (8005288 <RCCEx_PLL2_Config+0x12c>)
 80051f8:	4313      	orrs	r3, r2
 80051fa:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 80051fc:	4b22      	ldr	r3, [pc, #136]	@ (8005288 <RCCEx_PLL2_Config+0x12c>)
 80051fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005200:	f023 0220 	bic.w	r2, r3, #32
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	69db      	ldr	r3, [r3, #28]
 8005208:	491f      	ldr	r1, [pc, #124]	@ (8005288 <RCCEx_PLL2_Config+0x12c>)
 800520a:	4313      	orrs	r3, r2
 800520c:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800520e:	4b1e      	ldr	r3, [pc, #120]	@ (8005288 <RCCEx_PLL2_Config+0x12c>)
 8005210:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005216:	491c      	ldr	r1, [pc, #112]	@ (8005288 <RCCEx_PLL2_Config+0x12c>)
 8005218:	4313      	orrs	r3, r2
 800521a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 800521c:	4b1a      	ldr	r3, [pc, #104]	@ (8005288 <RCCEx_PLL2_Config+0x12c>)
 800521e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005220:	4a19      	ldr	r2, [pc, #100]	@ (8005288 <RCCEx_PLL2_Config+0x12c>)
 8005222:	f023 0310 	bic.w	r3, r3, #16
 8005226:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8005228:	4b17      	ldr	r3, [pc, #92]	@ (8005288 <RCCEx_PLL2_Config+0x12c>)
 800522a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800522c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005230:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	6a12      	ldr	r2, [r2, #32]
 8005238:	00d2      	lsls	r2, r2, #3
 800523a:	4913      	ldr	r1, [pc, #76]	@ (8005288 <RCCEx_PLL2_Config+0x12c>)
 800523c:	4313      	orrs	r3, r2
 800523e:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8005240:	4b11      	ldr	r3, [pc, #68]	@ (8005288 <RCCEx_PLL2_Config+0x12c>)
 8005242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005244:	4a10      	ldr	r2, [pc, #64]	@ (8005288 <RCCEx_PLL2_Config+0x12c>)
 8005246:	f043 0310 	orr.w	r3, r3, #16
 800524a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 800524c:	4b0e      	ldr	r3, [pc, #56]	@ (8005288 <RCCEx_PLL2_Config+0x12c>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a0d      	ldr	r2, [pc, #52]	@ (8005288 <RCCEx_PLL2_Config+0x12c>)
 8005252:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005256:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005258:	f7fb fcce 	bl	8000bf8 <HAL_GetTick>
 800525c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800525e:	e008      	b.n	8005272 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005260:	f7fb fcca 	bl	8000bf8 <HAL_GetTick>
 8005264:	4602      	mov	r2, r0
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	2b02      	cmp	r3, #2
 800526c:	d901      	bls.n	8005272 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800526e:	2303      	movs	r3, #3
 8005270:	e006      	b.n	8005280 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005272:	4b05      	ldr	r3, [pc, #20]	@ (8005288 <RCCEx_PLL2_Config+0x12c>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800527a:	2b00      	cmp	r3, #0
 800527c:	d0f0      	beq.n	8005260 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800527e:	2300      	movs	r3, #0

}
 8005280:	4618      	mov	r0, r3
 8005282:	3710      	adds	r7, #16
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}
 8005288:	44020c00 	.word	0x44020c00

0800528c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8005294:	4b48      	ldr	r3, [pc, #288]	@ (80053b8 <RCCEx_PLL3_Config+0x12c>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a47      	ldr	r2, [pc, #284]	@ (80053b8 <RCCEx_PLL3_Config+0x12c>)
 800529a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800529e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80052a0:	f7fb fcaa 	bl	8000bf8 <HAL_GetTick>
 80052a4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80052a6:	e008      	b.n	80052ba <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80052a8:	f7fb fca6 	bl	8000bf8 <HAL_GetTick>
 80052ac:	4602      	mov	r2, r0
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	d901      	bls.n	80052ba <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80052b6:	2303      	movs	r3, #3
 80052b8:	e07a      	b.n	80053b0 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80052ba:	4b3f      	ldr	r3, [pc, #252]	@ (80053b8 <RCCEx_PLL3_Config+0x12c>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d1f0      	bne.n	80052a8 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 80052c6:	4b3c      	ldr	r3, [pc, #240]	@ (80053b8 <RCCEx_PLL3_Config+0x12c>)
 80052c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052ca:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80052ce:	f023 0303 	bic.w	r3, r3, #3
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	6811      	ldr	r1, [r2, #0]
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	6852      	ldr	r2, [r2, #4]
 80052da:	0212      	lsls	r2, r2, #8
 80052dc:	430a      	orrs	r2, r1
 80052de:	4936      	ldr	r1, [pc, #216]	@ (80053b8 <RCCEx_PLL3_Config+0x12c>)
 80052e0:	4313      	orrs	r3, r2
 80052e2:	630b      	str	r3, [r1, #48]	@ 0x30
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	3b01      	subs	r3, #1
 80052ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	3b01      	subs	r3, #1
 80052f4:	025b      	lsls	r3, r3, #9
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	431a      	orrs	r2, r3
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	691b      	ldr	r3, [r3, #16]
 80052fe:	3b01      	subs	r3, #1
 8005300:	041b      	lsls	r3, r3, #16
 8005302:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005306:	431a      	orrs	r2, r3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	695b      	ldr	r3, [r3, #20]
 800530c:	3b01      	subs	r3, #1
 800530e:	061b      	lsls	r3, r3, #24
 8005310:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005314:	4928      	ldr	r1, [pc, #160]	@ (80053b8 <RCCEx_PLL3_Config+0x12c>)
 8005316:	4313      	orrs	r3, r2
 8005318:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800531a:	4b27      	ldr	r3, [pc, #156]	@ (80053b8 <RCCEx_PLL3_Config+0x12c>)
 800531c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800531e:	f023 020c 	bic.w	r2, r3, #12
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	4924      	ldr	r1, [pc, #144]	@ (80053b8 <RCCEx_PLL3_Config+0x12c>)
 8005328:	4313      	orrs	r3, r2
 800532a:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 800532c:	4b22      	ldr	r3, [pc, #136]	@ (80053b8 <RCCEx_PLL3_Config+0x12c>)
 800532e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005330:	f023 0220 	bic.w	r2, r3, #32
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	69db      	ldr	r3, [r3, #28]
 8005338:	491f      	ldr	r1, [pc, #124]	@ (80053b8 <RCCEx_PLL3_Config+0x12c>)
 800533a:	4313      	orrs	r3, r2
 800533c:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800533e:	4b1e      	ldr	r3, [pc, #120]	@ (80053b8 <RCCEx_PLL3_Config+0x12c>)
 8005340:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005346:	491c      	ldr	r1, [pc, #112]	@ (80053b8 <RCCEx_PLL3_Config+0x12c>)
 8005348:	4313      	orrs	r3, r2
 800534a:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 800534c:	4b1a      	ldr	r3, [pc, #104]	@ (80053b8 <RCCEx_PLL3_Config+0x12c>)
 800534e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005350:	4a19      	ldr	r2, [pc, #100]	@ (80053b8 <RCCEx_PLL3_Config+0x12c>)
 8005352:	f023 0310 	bic.w	r3, r3, #16
 8005356:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8005358:	4b17      	ldr	r3, [pc, #92]	@ (80053b8 <RCCEx_PLL3_Config+0x12c>)
 800535a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800535c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005360:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	6a12      	ldr	r2, [r2, #32]
 8005368:	00d2      	lsls	r2, r2, #3
 800536a:	4913      	ldr	r1, [pc, #76]	@ (80053b8 <RCCEx_PLL3_Config+0x12c>)
 800536c:	4313      	orrs	r3, r2
 800536e:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8005370:	4b11      	ldr	r3, [pc, #68]	@ (80053b8 <RCCEx_PLL3_Config+0x12c>)
 8005372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005374:	4a10      	ldr	r2, [pc, #64]	@ (80053b8 <RCCEx_PLL3_Config+0x12c>)
 8005376:	f043 0310 	orr.w	r3, r3, #16
 800537a:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 800537c:	4b0e      	ldr	r3, [pc, #56]	@ (80053b8 <RCCEx_PLL3_Config+0x12c>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a0d      	ldr	r2, [pc, #52]	@ (80053b8 <RCCEx_PLL3_Config+0x12c>)
 8005382:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005386:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005388:	f7fb fc36 	bl	8000bf8 <HAL_GetTick>
 800538c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800538e:	e008      	b.n	80053a2 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005390:	f7fb fc32 	bl	8000bf8 <HAL_GetTick>
 8005394:	4602      	mov	r2, r0
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	2b02      	cmp	r3, #2
 800539c:	d901      	bls.n	80053a2 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 800539e:	2303      	movs	r3, #3
 80053a0:	e006      	b.n	80053b0 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80053a2:	4b05      	ldr	r3, [pc, #20]	@ (80053b8 <RCCEx_PLL3_Config+0x12c>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d0f0      	beq.n	8005390 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 80053ae:	2300      	movs	r3, #0
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3710      	adds	r7, #16
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	44020c00 	.word	0x44020c00

080053bc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_DRD_TypeDef *USBx)
{
 80053bc:	b480      	push	{r7}
 80053be:	b085      	sub	sp, #20
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80053ca:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80053ce:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = winterruptmask;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80053d6:	2300      	movs	r3, #0
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3714      	adds	r7, #20
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr

080053e4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b085      	sub	sp, #20
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80053ec:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80053f0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	43db      	mvns	r3, r3
 80053fa:	401a      	ands	r2, r3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	3714      	adds	r7, #20
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr

0800540e <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 800540e:	b480      	push	{r7}
 8005410:	b083      	sub	sp, #12
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
 8005416:	460b      	mov	r3, r1
 8005418:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 800541a:	78fb      	ldrb	r3, [r7, #3]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d106      	bne.n	800542e <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005424:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	641a      	str	r2, [r3, #64]	@ 0x40
 800542c:	e00b      	b.n	8005446 <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 800542e:	78fb      	ldrb	r3, [r7, #3]
 8005430:	2b01      	cmp	r3, #1
 8005432:	d106      	bne.n	8005442 <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005438:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	641a      	str	r2, [r3, #64]	@ 0x40
 8005440:	e001      	b.n	8005446 <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e000      	b.n	8005448 <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 8005446:	2300      	movs	r3, #0
}
 8005448:	4618      	mov	r0, r3
 800544a:	370c      	adds	r7, #12
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 8005454:	b084      	sub	sp, #16
 8005456:	b580      	push	{r7, lr}
 8005458:	b084      	sub	sp, #16
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
 800545e:	f107 001c 	add.w	r0, r7, #28
 8005462:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2201      	movs	r2, #1
 800546a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005470:	f023 0201 	bic.w	r2, r3, #1
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 8005478:	2100      	movs	r1, #0
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f7ff ffc7 	bl	800540e <USB_SetCurrentMode>
 8005480:	4603      	mov	r3, r0
 8005482:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 800548a:	7bfb      	ldrb	r3, [r7, #15]
}
 800548c:	4618      	mov	r0, r3
 800548e:	3710      	adds	r7, #16
 8005490:	46bd      	mov	sp, r7
 8005492:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005496:	b004      	add	sp, #16
 8005498:	4770      	bx	lr
	...

0800549c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800549c:	b480      	push	{r7}
 800549e:	b09f      	sub	sp, #124	@ 0x7c
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80054a6:	2300      	movs	r3, #0
 80054a8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  uint32_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	4413      	add	r3, r2
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	4ba0      	ldr	r3, [pc, #640]	@ (800573c <USB_ActivateEndpoint+0x2a0>)
 80054ba:	4013      	ands	r3, r2
 80054bc:	673b      	str	r3, [r7, #112]	@ 0x70

  /* initialize Endpoint */
  switch (ep->type)
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	78db      	ldrb	r3, [r3, #3]
 80054c2:	2b03      	cmp	r3, #3
 80054c4:	d819      	bhi.n	80054fa <USB_ActivateEndpoint+0x5e>
 80054c6:	a201      	add	r2, pc, #4	@ (adr r2, 80054cc <USB_ActivateEndpoint+0x30>)
 80054c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054cc:	080054dd 	.word	0x080054dd
 80054d0:	080054f1 	.word	0x080054f1
 80054d4:	08005503 	.word	0x08005503
 80054d8:	080054e7 	.word	0x080054e7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80054dc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80054de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80054e2:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 80054e4:	e00e      	b.n	8005504 <USB_ActivateEndpoint+0x68>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80054e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80054e8:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80054ec:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 80054ee:	e009      	b.n	8005504 <USB_ActivateEndpoint+0x68>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80054f0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80054f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80054f6:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 80054f8:	e004      	b.n	8005504 <USB_ActivateEndpoint+0x68>

    default:
      ret = HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      break;
 8005500:	e000      	b.n	8005504 <USB_ActivateEndpoint+0x68>
      break;
 8005502:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_VTRX | USB_EP_VTTX));
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	441a      	add	r2, r3
 800550e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005510:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005514:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005518:	6013      	str	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	4413      	add	r3, r2
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	4b86      	ldr	r3, [pc, #536]	@ (8005740 <USB_ActivateEndpoint+0x2a4>)
 8005528:	4013      	ands	r3, r2
 800552a:	683a      	ldr	r2, [r7, #0]
 800552c:	7812      	ldrb	r2, [r2, #0]
 800552e:	4313      	orrs	r3, r2
 8005530:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	441a      	add	r2, r3
 800553c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800553e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005542:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005546:	6013      	str	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	7b1b      	ldrb	r3, [r3, #12]
 800554c:	2b00      	cmp	r3, #0
 800554e:	f040 8177 	bne.w	8005840 <USB_ActivateEndpoint+0x3a4>
  {
    if (ep->is_in != 0U)
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	785b      	ldrb	r3, [r3, #1]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d079      	beq.n	800564e <USB_ActivateEndpoint+0x1b2>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	00db      	lsls	r3, r3, #3
 8005560:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005564:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	00db      	lsls	r3, r3, #3
 8005570:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005574:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005578:	0c12      	lsrs	r2, r2, #16
 800557a:	0412      	lsls	r2, r2, #16
 800557c:	601a      	str	r2, [r3, #0]
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	00db      	lsls	r3, r3, #3
 8005584:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005588:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800558c:	6819      	ldr	r1, [r3, #0]
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	88db      	ldrh	r3, [r3, #6]
 8005592:	089b      	lsrs	r3, r3, #2
 8005594:	b29b      	uxth	r3, r3
 8005596:	009a      	lsls	r2, r3, #2
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	00db      	lsls	r3, r3, #3
 800559e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80055a2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80055a6:	430a      	orrs	r2, r1
 80055a8:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	4413      	add	r3, r2
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	61bb      	str	r3, [r7, #24]
 80055b8:	69bb      	ldr	r3, [r7, #24]
 80055ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d013      	beq.n	80055ea <USB_ActivateEndpoint+0x14e>
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	4413      	add	r3, r2
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	4b5c      	ldr	r3, [pc, #368]	@ (8005740 <USB_ActivateEndpoint+0x2a4>)
 80055d0:	4013      	ands	r3, r2
 80055d2:	617b      	str	r3, [r7, #20]
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	441a      	add	r2, r3
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055e4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80055e8:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	78db      	ldrb	r3, [r3, #3]
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d018      	beq.n	8005624 <USB_ActivateEndpoint+0x188>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	4413      	add	r3, r2
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	4b51      	ldr	r3, [pc, #324]	@ (8005744 <USB_ActivateEndpoint+0x2a8>)
 8005600:	4013      	ands	r3, r2
 8005602:	60fb      	str	r3, [r7, #12]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f083 0320 	eor.w	r3, r3, #32
 800560a:	60fb      	str	r3, [r7, #12]
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	441a      	add	r2, r3
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800561c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005620:	6013      	str	r3, [r2, #0]
 8005622:	e28c      	b.n	8005b3e <USB_ActivateEndpoint+0x6a2>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	4413      	add	r3, r2
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	4b44      	ldr	r3, [pc, #272]	@ (8005744 <USB_ActivateEndpoint+0x2a8>)
 8005632:	4013      	ands	r3, r2
 8005634:	613b      	str	r3, [r7, #16]
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	441a      	add	r2, r3
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005646:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800564a:	6013      	str	r3, [r2, #0]
 800564c:	e277      	b.n	8005b3e <USB_ActivateEndpoint+0x6a2>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	00db      	lsls	r3, r3, #3
 8005654:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005658:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800565c:	685a      	ldr	r2, [r3, #4]
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	00db      	lsls	r3, r3, #3
 8005664:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005668:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800566c:	0c12      	lsrs	r2, r2, #16
 800566e:	0412      	lsls	r2, r2, #16
 8005670:	605a      	str	r2, [r3, #4]
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	00db      	lsls	r3, r3, #3
 8005678:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800567c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005680:	6859      	ldr	r1, [r3, #4]
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	88db      	ldrh	r3, [r3, #6]
 8005686:	089b      	lsrs	r3, r3, #2
 8005688:	b29b      	uxth	r3, r3
 800568a:	009a      	lsls	r2, r3, #2
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	00db      	lsls	r3, r3, #3
 8005692:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005696:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800569a:	430a      	orrs	r2, r1
 800569c:	605a      	str	r2, [r3, #4]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	781b      	ldrb	r3, [r3, #0]
 80056a2:	00db      	lsls	r3, r3, #3
 80056a4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80056a8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80056ac:	685a      	ldr	r2, [r3, #4]
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	00db      	lsls	r3, r3, #3
 80056b4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80056b8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80056bc:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80056c0:	605a      	str	r2, [r3, #4]
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d112      	bne.n	80056f0 <USB_ActivateEndpoint+0x254>
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	00db      	lsls	r3, r3, #3
 80056d0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80056d4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80056d8:	685a      	ldr	r2, [r3, #4]
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	00db      	lsls	r3, r3, #3
 80056e0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80056e4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80056e8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80056ec:	605a      	str	r2, [r3, #4]
 80056ee:	e04d      	b.n	800578c <USB_ActivateEndpoint+0x2f0>
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	691b      	ldr	r3, [r3, #16]
 80056f4:	2b3e      	cmp	r3, #62	@ 0x3e
 80056f6:	d827      	bhi.n	8005748 <USB_ActivateEndpoint+0x2ac>
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	691b      	ldr	r3, [r3, #16]
 80056fc:	085b      	lsrs	r3, r3, #1
 80056fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	691b      	ldr	r3, [r3, #16]
 8005704:	f003 0301 	and.w	r3, r3, #1
 8005708:	2b00      	cmp	r3, #0
 800570a:	d002      	beq.n	8005712 <USB_ActivateEndpoint+0x276>
 800570c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800570e:	3301      	adds	r3, #1
 8005710:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	00db      	lsls	r3, r3, #3
 8005718:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800571c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005720:	6859      	ldr	r1, [r3, #4]
 8005722:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005724:	069a      	lsls	r2, r3, #26
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	00db      	lsls	r3, r3, #3
 800572c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005730:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005734:	430a      	orrs	r2, r1
 8005736:	605a      	str	r2, [r3, #4]
 8005738:	e028      	b.n	800578c <USB_ActivateEndpoint+0x2f0>
 800573a:	bf00      	nop
 800573c:	07ff898f 	.word	0x07ff898f
 8005740:	07ff8f8f 	.word	0x07ff8f8f
 8005744:	07ff8fbf 	.word	0x07ff8fbf
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	691b      	ldr	r3, [r3, #16]
 800574c:	095b      	lsrs	r3, r3, #5
 800574e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	691b      	ldr	r3, [r3, #16]
 8005754:	f003 031f 	and.w	r3, r3, #31
 8005758:	2b00      	cmp	r3, #0
 800575a:	d102      	bne.n	8005762 <USB_ActivateEndpoint+0x2c6>
 800575c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800575e:	3b01      	subs	r3, #1
 8005760:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	00db      	lsls	r3, r3, #3
 8005768:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800576c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005770:	685a      	ldr	r2, [r3, #4]
 8005772:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005774:	069b      	lsls	r3, r3, #26
 8005776:	431a      	orrs	r2, r3
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	00db      	lsls	r3, r3, #3
 800577e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005782:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005786:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800578a:	605a      	str	r2, [r3, #4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	4413      	add	r3, r2
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	62bb      	str	r3, [r7, #40]	@ 0x28
 800579a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800579c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d013      	beq.n	80057cc <USB_ActivateEndpoint+0x330>
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	4413      	add	r3, r2
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	4b9c      	ldr	r3, [pc, #624]	@ (8005a24 <USB_ActivateEndpoint+0x588>)
 80057b2:	4013      	ands	r3, r2
 80057b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	441a      	add	r2, r3
 80057c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057c2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80057c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057ca:	6013      	str	r3, [r2, #0]

      if (ep->num == 0U)
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d11c      	bne.n	800580e <USB_ActivateEndpoint+0x372>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	4413      	add	r3, r2
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	4b91      	ldr	r3, [pc, #580]	@ (8005a28 <USB_ActivateEndpoint+0x58c>)
 80057e2:	4013      	ands	r3, r2
 80057e4:	61fb      	str	r3, [r7, #28]
 80057e6:	69fb      	ldr	r3, [r7, #28]
 80057e8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80057ec:	61fb      	str	r3, [r7, #28]
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80057f4:	61fb      	str	r3, [r7, #28]
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	441a      	add	r2, r3
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005806:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800580a:	6013      	str	r3, [r2, #0]
 800580c:	e197      	b.n	8005b3e <USB_ActivateEndpoint+0x6a2>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	4413      	add	r3, r2
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	4b83      	ldr	r3, [pc, #524]	@ (8005a28 <USB_ActivateEndpoint+0x58c>)
 800581c:	4013      	ands	r3, r2
 800581e:	623b      	str	r3, [r7, #32]
 8005820:	6a3b      	ldr	r3, [r7, #32]
 8005822:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005826:	623b      	str	r3, [r7, #32]
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	441a      	add	r2, r3
 8005832:	6a3b      	ldr	r3, [r7, #32]
 8005834:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005838:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800583c:	6013      	str	r3, [r2, #0]
 800583e:	e17e      	b.n	8005b3e <USB_ActivateEndpoint+0x6a2>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	78db      	ldrb	r3, [r3, #3]
 8005844:	2b02      	cmp	r3, #2
 8005846:	d114      	bne.n	8005872 <USB_ActivateEndpoint+0x3d6>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	4413      	add	r3, r2
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	4b73      	ldr	r3, [pc, #460]	@ (8005a24 <USB_ActivateEndpoint+0x588>)
 8005856:	4013      	ands	r3, r2
 8005858:	663b      	str	r3, [r7, #96]	@ 0x60
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	441a      	add	r2, r3
 8005864:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005866:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800586a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800586e:	6013      	str	r3, [r2, #0]
 8005870:	e013      	b.n	800589a <USB_ActivateEndpoint+0x3fe>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	4413      	add	r3, r2
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	4b6b      	ldr	r3, [pc, #428]	@ (8005a2c <USB_ActivateEndpoint+0x590>)
 8005880:	4013      	ands	r3, r2
 8005882:	667b      	str	r3, [r7, #100]	@ 0x64
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	441a      	add	r2, r3
 800588e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005890:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005894:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005898:	6013      	str	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	00db      	lsls	r3, r3, #3
 80058a0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80058a4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	00db      	lsls	r3, r3, #3
 80058b0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80058b4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80058b8:	0c12      	lsrs	r2, r2, #16
 80058ba:	0412      	lsls	r2, r2, #16
 80058bc:	601a      	str	r2, [r3, #0]
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	00db      	lsls	r3, r3, #3
 80058c4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80058c8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80058cc:	6819      	ldr	r1, [r3, #0]
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	891b      	ldrh	r3, [r3, #8]
 80058d2:	089b      	lsrs	r3, r3, #2
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	009a      	lsls	r2, r3, #2
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	00db      	lsls	r3, r3, #3
 80058de:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80058e2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80058e6:	430a      	orrs	r2, r1
 80058e8:	601a      	str	r2, [r3, #0]
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	00db      	lsls	r3, r3, #3
 80058f0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80058f4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80058f8:	685a      	ldr	r2, [r3, #4]
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	00db      	lsls	r3, r3, #3
 8005900:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005904:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005908:	0c12      	lsrs	r2, r2, #16
 800590a:	0412      	lsls	r2, r2, #16
 800590c:	605a      	str	r2, [r3, #4]
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	00db      	lsls	r3, r3, #3
 8005914:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005918:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800591c:	6859      	ldr	r1, [r3, #4]
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	895b      	ldrh	r3, [r3, #10]
 8005922:	089b      	lsrs	r3, r3, #2
 8005924:	b29b      	uxth	r3, r3
 8005926:	009a      	lsls	r2, r3, #2
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	00db      	lsls	r3, r3, #3
 800592e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005932:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005936:	430a      	orrs	r2, r1
 8005938:	605a      	str	r2, [r3, #4]

    if (ep->is_in == 0U)
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	785b      	ldrb	r3, [r3, #1]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d178      	bne.n	8005a34 <USB_ActivateEndpoint+0x598>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	4413      	add	r3, r2
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005950:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005952:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005956:	2b00      	cmp	r3, #0
 8005958:	d013      	beq.n	8005982 <USB_ActivateEndpoint+0x4e6>
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	4413      	add	r3, r2
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	4b2f      	ldr	r3, [pc, #188]	@ (8005a24 <USB_ActivateEndpoint+0x588>)
 8005968:	4013      	ands	r3, r2
 800596a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	441a      	add	r2, r3
 8005976:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005978:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800597c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005980:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	4413      	add	r3, r2
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005992:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005996:	2b00      	cmp	r3, #0
 8005998:	d013      	beq.n	80059c2 <USB_ActivateEndpoint+0x526>
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	4413      	add	r3, r2
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	4b1f      	ldr	r3, [pc, #124]	@ (8005a24 <USB_ActivateEndpoint+0x588>)
 80059a8:	4013      	ands	r3, r2
 80059aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	441a      	add	r2, r3
 80059b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059bc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80059c0:	6013      	str	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80059c2:	687a      	ldr	r2, [r7, #4]
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	4413      	add	r3, r2
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	4b16      	ldr	r3, [pc, #88]	@ (8005a28 <USB_ActivateEndpoint+0x58c>)
 80059d0:	4013      	ands	r3, r2
 80059d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80059d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059d6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80059da:	633b      	str	r3, [r7, #48]	@ 0x30
 80059dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059de:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80059e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	441a      	add	r2, r3
 80059ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059f8:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	009b      	lsls	r3, r3, #2
 8005a02:	4413      	add	r3, r2
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	4b0a      	ldr	r3, [pc, #40]	@ (8005a30 <USB_ActivateEndpoint+0x594>)
 8005a08:	4013      	ands	r3, r2
 8005a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	441a      	add	r2, r3
 8005a16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a20:	6013      	str	r3, [r2, #0]
 8005a22:	e08c      	b.n	8005b3e <USB_ActivateEndpoint+0x6a2>
 8005a24:	07ff8f8f 	.word	0x07ff8f8f
 8005a28:	07ffbf8f 	.word	0x07ffbf8f
 8005a2c:	07ff8e8f 	.word	0x07ff8e8f
 8005a30:	07ff8fbf 	.word	0x07ff8fbf
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005a34:	687a      	ldr	r2, [r7, #4]
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	781b      	ldrb	r3, [r3, #0]
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	4413      	add	r3, r2
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d013      	beq.n	8005a74 <USB_ActivateEndpoint+0x5d8>
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	4413      	add	r3, r2
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	4b3d      	ldr	r3, [pc, #244]	@ (8005b50 <USB_ActivateEndpoint+0x6b4>)
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	441a      	add	r2, r3
 8005a68:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005a6a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005a6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a72:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	4413      	add	r3, r2
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	657b      	str	r3, [r7, #84]	@ 0x54
 8005a82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d013      	beq.n	8005ab4 <USB_ActivateEndpoint+0x618>
 8005a8c:	687a      	ldr	r2, [r7, #4]
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	4413      	add	r3, r2
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	4b2d      	ldr	r3, [pc, #180]	@ (8005b50 <USB_ActivateEndpoint+0x6b4>)
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	653b      	str	r3, [r7, #80]	@ 0x50
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	441a      	add	r2, r3
 8005aa8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005aaa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005aae:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005ab2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	78db      	ldrb	r3, [r3, #3]
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d018      	beq.n	8005aee <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	4413      	add	r3, r2
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	4b22      	ldr	r3, [pc, #136]	@ (8005b54 <USB_ActivateEndpoint+0x6b8>)
 8005aca:	4013      	ands	r3, r2
 8005acc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ace:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ad0:	f083 0320 	eor.w	r3, r3, #32
 8005ad4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	441a      	add	r2, r3
 8005ae0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ae2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ae6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005aea:	6013      	str	r3, [r2, #0]
 8005aec:	e013      	b.n	8005b16 <USB_ActivateEndpoint+0x67a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	781b      	ldrb	r3, [r3, #0]
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	4413      	add	r3, r2
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	4b16      	ldr	r3, [pc, #88]	@ (8005b54 <USB_ActivateEndpoint+0x6b8>)
 8005afc:	4013      	ands	r3, r2
 8005afe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	441a      	add	r2, r3
 8005b0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b14:	6013      	str	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	009b      	lsls	r3, r3, #2
 8005b1e:	4413      	add	r3, r2
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	4b0d      	ldr	r3, [pc, #52]	@ (8005b58 <USB_ActivateEndpoint+0x6bc>)
 8005b24:	4013      	ands	r3, r2
 8005b26:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	441a      	add	r2, r3
 8005b32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b3c:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005b3e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	377c      	adds	r7, #124	@ 0x7c
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr
 8005b4e:	bf00      	nop
 8005b50:	07ff8f8f 	.word	0x07ff8f8f
 8005b54:	07ff8fbf 	.word	0x07ff8fbf
 8005b58:	07ffbf8f 	.word	0x07ffbf8f

08005b5c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b097      	sub	sp, #92	@ 0x5c
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	7b1b      	ldrb	r3, [r3, #12]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d16d      	bne.n	8005c4a <USB_DeactivateEndpoint+0xee>
  {
    if (ep->is_in != 0U)
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	785b      	ldrb	r3, [r3, #1]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d034      	beq.n	8005be0 <USB_DeactivateEndpoint+0x84>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	4413      	add	r3, r2
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	613b      	str	r3, [r7, #16]
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d013      	beq.n	8005bb6 <USB_DeactivateEndpoint+0x5a>
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	4413      	add	r3, r2
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	4b6d      	ldr	r3, [pc, #436]	@ (8005d50 <USB_DeactivateEndpoint+0x1f4>)
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	60fb      	str	r3, [r7, #12]
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	441a      	add	r2, r3
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bb0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005bb4:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	4413      	add	r3, r2
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	4b64      	ldr	r3, [pc, #400]	@ (8005d54 <USB_DeactivateEndpoint+0x1f8>)
 8005bc4:	4013      	ands	r3, r2
 8005bc6:	60bb      	str	r3, [r7, #8]
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	781b      	ldrb	r3, [r3, #0]
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	441a      	add	r2, r3
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bdc:	6013      	str	r3, [r2, #0]
 8005bde:	e139      	b.n	8005e54 <USB_DeactivateEndpoint+0x2f8>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	009b      	lsls	r3, r3, #2
 8005be8:	4413      	add	r3, r2
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	61fb      	str	r3, [r7, #28]
 8005bee:	69fb      	ldr	r3, [r7, #28]
 8005bf0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d013      	beq.n	8005c20 <USB_DeactivateEndpoint+0xc4>
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	4413      	add	r3, r2
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	4b52      	ldr	r3, [pc, #328]	@ (8005d50 <USB_DeactivateEndpoint+0x1f4>)
 8005c06:	4013      	ands	r3, r2
 8005c08:	61bb      	str	r3, [r7, #24]
 8005c0a:	687a      	ldr	r2, [r7, #4]
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	441a      	add	r2, r3
 8005c14:	69bb      	ldr	r3, [r7, #24]
 8005c16:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005c1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c1e:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	4413      	add	r3, r2
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	4b4a      	ldr	r3, [pc, #296]	@ (8005d58 <USB_DeactivateEndpoint+0x1fc>)
 8005c2e:	4013      	ands	r3, r2
 8005c30:	617b      	str	r3, [r7, #20]
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	441a      	add	r2, r3
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c46:	6013      	str	r3, [r2, #0]
 8005c48:	e104      	b.n	8005e54 <USB_DeactivateEndpoint+0x2f8>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	785b      	ldrb	r3, [r3, #1]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	f040 8084 	bne.w	8005d5c <USB_DeactivateEndpoint+0x200>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	009b      	lsls	r3, r3, #2
 8005c5c:	4413      	add	r3, r2
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005c62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d013      	beq.n	8005c94 <USB_DeactivateEndpoint+0x138>
 8005c6c:	687a      	ldr	r2, [r7, #4]
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	009b      	lsls	r3, r3, #2
 8005c74:	4413      	add	r3, r2
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	4b35      	ldr	r3, [pc, #212]	@ (8005d50 <USB_DeactivateEndpoint+0x1f4>)
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	441a      	add	r2, r3
 8005c88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c8a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005c8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c92:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	781b      	ldrb	r3, [r3, #0]
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	4413      	add	r3, r2
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ca4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d013      	beq.n	8005cd4 <USB_DeactivateEndpoint+0x178>
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	009b      	lsls	r3, r3, #2
 8005cb4:	4413      	add	r3, r2
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	4b25      	ldr	r3, [pc, #148]	@ (8005d50 <USB_DeactivateEndpoint+0x1f4>)
 8005cba:	4013      	ands	r3, r2
 8005cbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	441a      	add	r2, r3
 8005cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005cce:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005cd2:	6013      	str	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	4413      	add	r3, r2
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	4b1b      	ldr	r3, [pc, #108]	@ (8005d50 <USB_DeactivateEndpoint+0x1f4>)
 8005ce2:	4013      	ands	r3, r2
 8005ce4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	441a      	add	r2, r3
 8005cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cf2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005cf6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005cfa:	6013      	str	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005cfc:	687a      	ldr	r2, [r7, #4]
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	4413      	add	r3, r2
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	4b13      	ldr	r3, [pc, #76]	@ (8005d58 <USB_DeactivateEndpoint+0x1fc>)
 8005d0a:	4013      	ands	r3, r2
 8005d0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	441a      	add	r2, r3
 8005d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d22:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	4413      	add	r3, r2
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	4b08      	ldr	r3, [pc, #32]	@ (8005d54 <USB_DeactivateEndpoint+0x1f8>)
 8005d32:	4013      	ands	r3, r2
 8005d34:	623b      	str	r3, [r7, #32]
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	441a      	add	r2, r3
 8005d40:	6a3b      	ldr	r3, [r7, #32]
 8005d42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d4a:	6013      	str	r3, [r2, #0]
 8005d4c:	e082      	b.n	8005e54 <USB_DeactivateEndpoint+0x2f8>
 8005d4e:	bf00      	nop
 8005d50:	07ff8f8f 	.word	0x07ff8f8f
 8005d54:	07ff8fbf 	.word	0x07ff8fbf
 8005d58:	07ffbf8f 	.word	0x07ffbf8f
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	4413      	add	r3, r2
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	657b      	str	r3, [r7, #84]	@ 0x54
 8005d6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d013      	beq.n	8005d9c <USB_DeactivateEndpoint+0x240>
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	4413      	add	r3, r2
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	4b38      	ldr	r3, [pc, #224]	@ (8005e64 <USB_DeactivateEndpoint+0x308>)
 8005d82:	4013      	ands	r3, r2
 8005d84:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	441a      	add	r2, r3
 8005d90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d92:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005d96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d9a:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	781b      	ldrb	r3, [r3, #0]
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	4413      	add	r3, r2
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005daa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005dac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d013      	beq.n	8005ddc <USB_DeactivateEndpoint+0x280>
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	4413      	add	r3, r2
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	4b28      	ldr	r3, [pc, #160]	@ (8005e64 <USB_DeactivateEndpoint+0x308>)
 8005dc2:	4013      	ands	r3, r2
 8005dc4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	009b      	lsls	r3, r3, #2
 8005dce:	441a      	add	r2, r3
 8005dd0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005dd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005dd6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005dda:	6013      	str	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	4413      	add	r3, r2
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	4b1e      	ldr	r3, [pc, #120]	@ (8005e64 <USB_DeactivateEndpoint+0x308>)
 8005dea:	4013      	ands	r3, r2
 8005dec:	647b      	str	r3, [r7, #68]	@ 0x44
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	441a      	add	r2, r3
 8005df8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005dfa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005dfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e02:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	4413      	add	r3, r2
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	4b15      	ldr	r3, [pc, #84]	@ (8005e68 <USB_DeactivateEndpoint+0x30c>)
 8005e12:	4013      	ands	r3, r2
 8005e14:	643b      	str	r3, [r7, #64]	@ 0x40
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	441a      	add	r2, r3
 8005e20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e2a:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	4413      	add	r3, r2
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	4b0c      	ldr	r3, [pc, #48]	@ (8005e6c <USB_DeactivateEndpoint+0x310>)
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	441a      	add	r2, r3
 8005e48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e52:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005e54:	2300      	movs	r3, #0
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	375c      	adds	r7, #92	@ 0x5c
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr
 8005e62:	bf00      	nop
 8005e64:	07ff8f8f 	.word	0x07ff8f8f
 8005e68:	07ff8fbf 	.word	0x07ff8fbf
 8005e6c:	07ffbf8f 	.word	0x07ffbf8f

08005e70 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b096      	sub	sp, #88	@ 0x58
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	785b      	ldrb	r3, [r3, #1]
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	f040 84ed 	bne.w	800685e <USB_EPStartXfer+0x9ee>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	699a      	ldr	r2, [r3, #24]
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	691b      	ldr	r3, [r3, #16]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d903      	bls.n	8005e98 <USB_EPStartXfer+0x28>
    {
      len = ep->maxpacket;
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	691b      	ldr	r3, [r3, #16]
 8005e94:	657b      	str	r3, [r7, #84]	@ 0x54
 8005e96:	e002      	b.n	8005e9e <USB_EPStartXfer+0x2e>
    }
    else
    {
      len = ep->xfer_len;
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	699b      	ldr	r3, [r3, #24]
 8005e9c:	657b      	str	r3, [r7, #84]	@ 0x54
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	7b1b      	ldrb	r3, [r3, #12]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d12e      	bne.n	8005f04 <USB_EPStartXfer+0x94>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	6959      	ldr	r1, [r3, #20]
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	88da      	ldrh	r2, [r3, #6]
 8005eae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f001 f952 	bl	800715c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	00db      	lsls	r3, r3, #3
 8005ebe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005ec2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	00db      	lsls	r3, r3, #3
 8005ece:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005ed2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005ed6:	b292      	uxth	r2, r2
 8005ed8:	601a      	str	r2, [r3, #0]
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	00db      	lsls	r3, r3, #3
 8005ee0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005ee4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005ee8:	6819      	ldr	r1, [r3, #0]
 8005eea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005eec:	041a      	lsls	r2, r3, #16
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	00db      	lsls	r3, r3, #3
 8005ef4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005ef8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005efc:	430a      	orrs	r2, r1
 8005efe:	601a      	str	r2, [r3, #0]
 8005f00:	f000 bc90 	b.w	8006824 <USB_EPStartXfer+0x9b4>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	78db      	ldrb	r3, [r3, #3]
 8005f08:	2b02      	cmp	r3, #2
 8005f0a:	f040 8332 	bne.w	8006572 <USB_EPStartXfer+0x702>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	6a1a      	ldr	r2, [r3, #32]
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	429a      	cmp	r2, r3
 8005f18:	f240 82e4 	bls.w	80064e4 <USB_EPStartXfer+0x674>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005f1c:	687a      	ldr	r2, [r7, #4]
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	4413      	add	r3, r2
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	4ba4      	ldr	r3, [pc, #656]	@ (80061bc <USB_EPStartXfer+0x34c>)
 8005f2a:	4013      	ands	r3, r2
 8005f2c:	613b      	str	r3, [r7, #16]
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	441a      	add	r2, r3
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005f3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f42:	6013      	str	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	6a1a      	ldr	r2, [r3, #32]
 8005f48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f4a:	1ad2      	subs	r2, r2, r3
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	4413      	add	r3, r2
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	f000 8161 	beq.w	8006228 <USB_EPStartXfer+0x3b8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	785b      	ldrb	r3, [r3, #1]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d16a      	bne.n	8006044 <USB_EPStartXfer+0x1d4>
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	781b      	ldrb	r3, [r3, #0]
 8005f72:	00db      	lsls	r3, r3, #3
 8005f74:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005f78:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005f7c:	685a      	ldr	r2, [r3, #4]
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	781b      	ldrb	r3, [r3, #0]
 8005f82:	00db      	lsls	r3, r3, #3
 8005f84:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005f88:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005f8c:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8005f90:	605a      	str	r2, [r3, #4]
 8005f92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d112      	bne.n	8005fbe <USB_EPStartXfer+0x14e>
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	00db      	lsls	r3, r3, #3
 8005f9e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005fa2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005fa6:	685a      	ldr	r2, [r3, #4]
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	00db      	lsls	r3, r3, #3
 8005fae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005fb2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005fb6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8005fba:	605a      	str	r2, [r3, #4]
 8005fbc:	e06a      	b.n	8006094 <USB_EPStartXfer+0x224>
 8005fbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005fc0:	2b3e      	cmp	r3, #62	@ 0x3e
 8005fc2:	d81e      	bhi.n	8006002 <USB_EPStartXfer+0x192>
 8005fc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005fc6:	085b      	lsrs	r3, r3, #1
 8005fc8:	653b      	str	r3, [r7, #80]	@ 0x50
 8005fca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005fcc:	f003 0301 	and.w	r3, r3, #1
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d002      	beq.n	8005fda <USB_EPStartXfer+0x16a>
 8005fd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	653b      	str	r3, [r7, #80]	@ 0x50
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	00db      	lsls	r3, r3, #3
 8005fe0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005fe4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005fe8:	6859      	ldr	r1, [r3, #4]
 8005fea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005fec:	069a      	lsls	r2, r3, #26
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	00db      	lsls	r3, r3, #3
 8005ff4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005ff8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005ffc:	430a      	orrs	r2, r1
 8005ffe:	605a      	str	r2, [r3, #4]
 8006000:	e048      	b.n	8006094 <USB_EPStartXfer+0x224>
 8006002:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006004:	095b      	lsrs	r3, r3, #5
 8006006:	653b      	str	r3, [r7, #80]	@ 0x50
 8006008:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800600a:	f003 031f 	and.w	r3, r3, #31
 800600e:	2b00      	cmp	r3, #0
 8006010:	d102      	bne.n	8006018 <USB_EPStartXfer+0x1a8>
 8006012:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006014:	3b01      	subs	r3, #1
 8006016:	653b      	str	r3, [r7, #80]	@ 0x50
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	00db      	lsls	r3, r3, #3
 800601e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006022:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006026:	685a      	ldr	r2, [r3, #4]
 8006028:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800602a:	069b      	lsls	r3, r3, #26
 800602c:	431a      	orrs	r2, r3
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	781b      	ldrb	r3, [r3, #0]
 8006032:	00db      	lsls	r3, r3, #3
 8006034:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006038:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800603c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006040:	605a      	str	r2, [r3, #4]
 8006042:	e027      	b.n	8006094 <USB_EPStartXfer+0x224>
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	785b      	ldrb	r3, [r3, #1]
 8006048:	2b01      	cmp	r3, #1
 800604a:	d123      	bne.n	8006094 <USB_EPStartXfer+0x224>
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	00db      	lsls	r3, r3, #3
 8006052:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006056:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800605a:	685a      	ldr	r2, [r3, #4]
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	00db      	lsls	r3, r3, #3
 8006062:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006066:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800606a:	b292      	uxth	r2, r2
 800606c:	605a      	str	r2, [r3, #4]
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	00db      	lsls	r3, r3, #3
 8006074:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006078:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800607c:	6859      	ldr	r1, [r3, #4]
 800607e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006080:	041a      	lsls	r2, r3, #16
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	00db      	lsls	r3, r3, #3
 8006088:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800608c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006090:	430a      	orrs	r2, r1
 8006092:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	895b      	ldrh	r3, [r3, #10]
 8006098:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	6959      	ldr	r1, [r3, #20]
 800609e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	8b7a      	ldrh	r2, [r7, #26]
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f001 f859 	bl	800715c <USB_WritePMA>
            ep->xfer_buff += len;
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	695a      	ldr	r2, [r3, #20]
 80060ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060b0:	441a      	add	r2, r3
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	6a1a      	ldr	r2, [r3, #32]
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	691b      	ldr	r3, [r3, #16]
 80060be:	429a      	cmp	r2, r3
 80060c0:	d906      	bls.n	80060d0 <USB_EPStartXfer+0x260>
            {
              ep->xfer_len_db -= len;
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	6a1a      	ldr	r2, [r3, #32]
 80060c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060c8:	1ad2      	subs	r2, r2, r3
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	621a      	str	r2, [r3, #32]
 80060ce:	e005      	b.n	80060dc <USB_EPStartXfer+0x26c>
            }
            else
            {
              len = ep->xfer_len_db;
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	6a1b      	ldr	r3, [r3, #32]
 80060d4:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	2200      	movs	r2, #0
 80060da:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	785b      	ldrb	r3, [r3, #1]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d16d      	bne.n	80061c0 <USB_EPStartXfer+0x350>
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	781b      	ldrb	r3, [r3, #0]
 80060e8:	00db      	lsls	r3, r3, #3
 80060ea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80060ee:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	00db      	lsls	r3, r3, #3
 80060fa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80060fe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006102:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8006106:	601a      	str	r2, [r3, #0]
 8006108:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800610a:	2b00      	cmp	r3, #0
 800610c:	d112      	bne.n	8006134 <USB_EPStartXfer+0x2c4>
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	00db      	lsls	r3, r3, #3
 8006114:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006118:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	00db      	lsls	r3, r3, #3
 8006124:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006128:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800612c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006130:	601a      	str	r2, [r3, #0]
 8006132:	e06d      	b.n	8006210 <USB_EPStartXfer+0x3a0>
 8006134:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006136:	2b3e      	cmp	r3, #62	@ 0x3e
 8006138:	d81e      	bhi.n	8006178 <USB_EPStartXfer+0x308>
 800613a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800613c:	085b      	lsrs	r3, r3, #1
 800613e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006140:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006142:	f003 0301 	and.w	r3, r3, #1
 8006146:	2b00      	cmp	r3, #0
 8006148:	d002      	beq.n	8006150 <USB_EPStartXfer+0x2e0>
 800614a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800614c:	3301      	adds	r3, #1
 800614e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	00db      	lsls	r3, r3, #3
 8006156:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800615a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800615e:	6819      	ldr	r1, [r3, #0]
 8006160:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006162:	069a      	lsls	r2, r3, #26
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	00db      	lsls	r3, r3, #3
 800616a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800616e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006172:	430a      	orrs	r2, r1
 8006174:	601a      	str	r2, [r3, #0]
 8006176:	e04b      	b.n	8006210 <USB_EPStartXfer+0x3a0>
 8006178:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800617a:	095b      	lsrs	r3, r3, #5
 800617c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800617e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006180:	f003 031f 	and.w	r3, r3, #31
 8006184:	2b00      	cmp	r3, #0
 8006186:	d102      	bne.n	800618e <USB_EPStartXfer+0x31e>
 8006188:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800618a:	3b01      	subs	r3, #1
 800618c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	00db      	lsls	r3, r3, #3
 8006194:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006198:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061a0:	069b      	lsls	r3, r3, #26
 80061a2:	431a      	orrs	r2, r3
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	00db      	lsls	r3, r3, #3
 80061aa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80061ae:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80061b2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80061b6:	601a      	str	r2, [r3, #0]
 80061b8:	e02a      	b.n	8006210 <USB_EPStartXfer+0x3a0>
 80061ba:	bf00      	nop
 80061bc:	07ff8f8f 	.word	0x07ff8f8f
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	785b      	ldrb	r3, [r3, #1]
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d123      	bne.n	8006210 <USB_EPStartXfer+0x3a0>
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	00db      	lsls	r3, r3, #3
 80061ce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80061d2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	00db      	lsls	r3, r3, #3
 80061de:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80061e2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80061e6:	b292      	uxth	r2, r2
 80061e8:	601a      	str	r2, [r3, #0]
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	00db      	lsls	r3, r3, #3
 80061f0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80061f4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80061f8:	6819      	ldr	r1, [r3, #0]
 80061fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061fc:	041a      	lsls	r2, r3, #16
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	00db      	lsls	r3, r3, #3
 8006204:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006208:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800620c:	430a      	orrs	r2, r1
 800620e:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	891b      	ldrh	r3, [r3, #8]
 8006214:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	6959      	ldr	r1, [r3, #20]
 800621a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800621c:	b29b      	uxth	r3, r3
 800621e:	8b7a      	ldrh	r2, [r7, #26]
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f000 ff9b 	bl	800715c <USB_WritePMA>
 8006226:	e2fd      	b.n	8006824 <USB_EPStartXfer+0x9b4>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	785b      	ldrb	r3, [r3, #1]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d16a      	bne.n	8006306 <USB_EPStartXfer+0x496>
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	00db      	lsls	r3, r3, #3
 8006236:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800623a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	00db      	lsls	r3, r3, #3
 8006246:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800624a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800624e:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8006252:	601a      	str	r2, [r3, #0]
 8006254:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006256:	2b00      	cmp	r3, #0
 8006258:	d112      	bne.n	8006280 <USB_EPStartXfer+0x410>
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	00db      	lsls	r3, r3, #3
 8006260:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006264:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	781b      	ldrb	r3, [r3, #0]
 800626e:	00db      	lsls	r3, r3, #3
 8006270:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006274:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006278:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800627c:	601a      	str	r2, [r3, #0]
 800627e:	e06a      	b.n	8006356 <USB_EPStartXfer+0x4e6>
 8006280:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006282:	2b3e      	cmp	r3, #62	@ 0x3e
 8006284:	d81e      	bhi.n	80062c4 <USB_EPStartXfer+0x454>
 8006286:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006288:	085b      	lsrs	r3, r3, #1
 800628a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800628c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800628e:	f003 0301 	and.w	r3, r3, #1
 8006292:	2b00      	cmp	r3, #0
 8006294:	d002      	beq.n	800629c <USB_EPStartXfer+0x42c>
 8006296:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006298:	3301      	adds	r3, #1
 800629a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	00db      	lsls	r3, r3, #3
 80062a2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80062a6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80062aa:	6819      	ldr	r1, [r3, #0]
 80062ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80062ae:	069a      	lsls	r2, r3, #26
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	00db      	lsls	r3, r3, #3
 80062b6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80062ba:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80062be:	430a      	orrs	r2, r1
 80062c0:	601a      	str	r2, [r3, #0]
 80062c2:	e048      	b.n	8006356 <USB_EPStartXfer+0x4e6>
 80062c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062c6:	095b      	lsrs	r3, r3, #5
 80062c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80062ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062cc:	f003 031f 	and.w	r3, r3, #31
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d102      	bne.n	80062da <USB_EPStartXfer+0x46a>
 80062d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80062d6:	3b01      	subs	r3, #1
 80062d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	00db      	lsls	r3, r3, #3
 80062e0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80062e4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80062ec:	069b      	lsls	r3, r3, #26
 80062ee:	431a      	orrs	r2, r3
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	00db      	lsls	r3, r3, #3
 80062f6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80062fa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80062fe:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006302:	601a      	str	r2, [r3, #0]
 8006304:	e027      	b.n	8006356 <USB_EPStartXfer+0x4e6>
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	785b      	ldrb	r3, [r3, #1]
 800630a:	2b01      	cmp	r3, #1
 800630c:	d123      	bne.n	8006356 <USB_EPStartXfer+0x4e6>
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	00db      	lsls	r3, r3, #3
 8006314:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006318:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	00db      	lsls	r3, r3, #3
 8006324:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006328:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800632c:	b292      	uxth	r2, r2
 800632e:	601a      	str	r2, [r3, #0]
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	00db      	lsls	r3, r3, #3
 8006336:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800633a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800633e:	6819      	ldr	r1, [r3, #0]
 8006340:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006342:	041a      	lsls	r2, r3, #16
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	00db      	lsls	r3, r3, #3
 800634a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800634e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006352:	430a      	orrs	r2, r1
 8006354:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	891b      	ldrh	r3, [r3, #8]
 800635a:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	6959      	ldr	r1, [r3, #20]
 8006360:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006362:	b29b      	uxth	r3, r3
 8006364:	8b7a      	ldrh	r2, [r7, #26]
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 fef8 	bl	800715c <USB_WritePMA>
            ep->xfer_buff += len;
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	695a      	ldr	r2, [r3, #20]
 8006370:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006372:	441a      	add	r2, r3
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	6a1a      	ldr	r2, [r3, #32]
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	691b      	ldr	r3, [r3, #16]
 8006380:	429a      	cmp	r2, r3
 8006382:	d906      	bls.n	8006392 <USB_EPStartXfer+0x522>
            {
              ep->xfer_len_db -= len;
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	6a1a      	ldr	r2, [r3, #32]
 8006388:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800638a:	1ad2      	subs	r2, r2, r3
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	621a      	str	r2, [r3, #32]
 8006390:	e005      	b.n	800639e <USB_EPStartXfer+0x52e>
            }
            else
            {
              len = ep->xfer_len_db;
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	6a1b      	ldr	r3, [r3, #32]
 8006396:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	2200      	movs	r2, #0
 800639c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	785b      	ldrb	r3, [r3, #1]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d16a      	bne.n	800647c <USB_EPStartXfer+0x60c>
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	781b      	ldrb	r3, [r3, #0]
 80063aa:	00db      	lsls	r3, r3, #3
 80063ac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80063b0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80063b4:	685a      	ldr	r2, [r3, #4]
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	781b      	ldrb	r3, [r3, #0]
 80063ba:	00db      	lsls	r3, r3, #3
 80063bc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80063c0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80063c4:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80063c8:	605a      	str	r2, [r3, #4]
 80063ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d112      	bne.n	80063f6 <USB_EPStartXfer+0x586>
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	00db      	lsls	r3, r3, #3
 80063d6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80063da:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80063de:	685a      	ldr	r2, [r3, #4]
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	781b      	ldrb	r3, [r3, #0]
 80063e4:	00db      	lsls	r3, r3, #3
 80063e6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80063ea:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80063ee:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80063f2:	605a      	str	r2, [r3, #4]
 80063f4:	e06a      	b.n	80064cc <USB_EPStartXfer+0x65c>
 80063f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063f8:	2b3e      	cmp	r3, #62	@ 0x3e
 80063fa:	d81e      	bhi.n	800643a <USB_EPStartXfer+0x5ca>
 80063fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063fe:	085b      	lsrs	r3, r3, #1
 8006400:	647b      	str	r3, [r7, #68]	@ 0x44
 8006402:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006404:	f003 0301 	and.w	r3, r3, #1
 8006408:	2b00      	cmp	r3, #0
 800640a:	d002      	beq.n	8006412 <USB_EPStartXfer+0x5a2>
 800640c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800640e:	3301      	adds	r3, #1
 8006410:	647b      	str	r3, [r7, #68]	@ 0x44
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	00db      	lsls	r3, r3, #3
 8006418:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800641c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006420:	6859      	ldr	r1, [r3, #4]
 8006422:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006424:	069a      	lsls	r2, r3, #26
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	00db      	lsls	r3, r3, #3
 800642c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006430:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006434:	430a      	orrs	r2, r1
 8006436:	605a      	str	r2, [r3, #4]
 8006438:	e048      	b.n	80064cc <USB_EPStartXfer+0x65c>
 800643a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800643c:	095b      	lsrs	r3, r3, #5
 800643e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006440:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006442:	f003 031f 	and.w	r3, r3, #31
 8006446:	2b00      	cmp	r3, #0
 8006448:	d102      	bne.n	8006450 <USB_EPStartXfer+0x5e0>
 800644a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800644c:	3b01      	subs	r3, #1
 800644e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	00db      	lsls	r3, r3, #3
 8006456:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800645a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800645e:	685a      	ldr	r2, [r3, #4]
 8006460:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006462:	069b      	lsls	r3, r3, #26
 8006464:	431a      	orrs	r2, r3
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	781b      	ldrb	r3, [r3, #0]
 800646a:	00db      	lsls	r3, r3, #3
 800646c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006470:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006474:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006478:	605a      	str	r2, [r3, #4]
 800647a:	e027      	b.n	80064cc <USB_EPStartXfer+0x65c>
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	785b      	ldrb	r3, [r3, #1]
 8006480:	2b01      	cmp	r3, #1
 8006482:	d123      	bne.n	80064cc <USB_EPStartXfer+0x65c>
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	00db      	lsls	r3, r3, #3
 800648a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800648e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006492:	685a      	ldr	r2, [r3, #4]
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	00db      	lsls	r3, r3, #3
 800649a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800649e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80064a2:	b292      	uxth	r2, r2
 80064a4:	605a      	str	r2, [r3, #4]
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	00db      	lsls	r3, r3, #3
 80064ac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80064b0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80064b4:	6859      	ldr	r1, [r3, #4]
 80064b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064b8:	041a      	lsls	r2, r3, #16
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	00db      	lsls	r3, r3, #3
 80064c0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80064c4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80064c8:	430a      	orrs	r2, r1
 80064ca:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	895b      	ldrh	r3, [r3, #10]
 80064d0:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	6959      	ldr	r1, [r3, #20]
 80064d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064d8:	b29b      	uxth	r3, r3
 80064da:	8b7a      	ldrh	r2, [r7, #26]
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f000 fe3d 	bl	800715c <USB_WritePMA>
 80064e2:	e19f      	b.n	8006824 <USB_EPStartXfer+0x9b4>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	6a1b      	ldr	r3, [r3, #32]
 80064e8:	657b      	str	r3, [r7, #84]	@ 0x54

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	009b      	lsls	r3, r3, #2
 80064f2:	4413      	add	r3, r2
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	4ba0      	ldr	r3, [pc, #640]	@ (8006778 <USB_EPStartXfer+0x908>)
 80064f8:	4013      	ands	r3, r2
 80064fa:	617b      	str	r3, [r7, #20]
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	781b      	ldrb	r3, [r3, #0]
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	441a      	add	r2, r3
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800650c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006510:	6013      	str	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	00db      	lsls	r3, r3, #3
 8006518:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800651c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	00db      	lsls	r3, r3, #3
 8006528:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800652c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006530:	b292      	uxth	r2, r2
 8006532:	601a      	str	r2, [r3, #0]
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	00db      	lsls	r3, r3, #3
 800653a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800653e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006542:	6819      	ldr	r1, [r3, #0]
 8006544:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006546:	041a      	lsls	r2, r3, #16
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	00db      	lsls	r3, r3, #3
 800654e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006552:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006556:	430a      	orrs	r2, r1
 8006558:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	891b      	ldrh	r3, [r3, #8]
 800655e:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	6959      	ldr	r1, [r3, #20]
 8006564:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006566:	b29b      	uxth	r3, r3
 8006568:	8b7a      	ldrh	r2, [r7, #26]
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 fdf6 	bl	800715c <USB_WritePMA>
 8006570:	e158      	b.n	8006824 <USB_EPStartXfer+0x9b4>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	6a1a      	ldr	r2, [r3, #32]
 8006576:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006578:	1ad2      	subs	r2, r2, r3
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	4413      	add	r3, r2
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800658e:	2b00      	cmp	r3, #0
 8006590:	f000 80a3 	beq.w	80066da <USB_EPStartXfer+0x86a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	785b      	ldrb	r3, [r3, #1]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d16a      	bne.n	8006672 <USB_EPStartXfer+0x802>
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	00db      	lsls	r3, r3, #3
 80065a2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80065a6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80065aa:	685a      	ldr	r2, [r3, #4]
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	00db      	lsls	r3, r3, #3
 80065b2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80065b6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80065ba:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80065be:	605a      	str	r2, [r3, #4]
 80065c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d112      	bne.n	80065ec <USB_EPStartXfer+0x77c>
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	00db      	lsls	r3, r3, #3
 80065cc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80065d0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80065d4:	685a      	ldr	r2, [r3, #4]
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	00db      	lsls	r3, r3, #3
 80065dc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80065e0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80065e4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80065e8:	605a      	str	r2, [r3, #4]
 80065ea:	e06a      	b.n	80066c2 <USB_EPStartXfer+0x852>
 80065ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80065ee:	2b3e      	cmp	r3, #62	@ 0x3e
 80065f0:	d81e      	bhi.n	8006630 <USB_EPStartXfer+0x7c0>
 80065f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80065f4:	085b      	lsrs	r3, r3, #1
 80065f6:	643b      	str	r3, [r7, #64]	@ 0x40
 80065f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80065fa:	f003 0301 	and.w	r3, r3, #1
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d002      	beq.n	8006608 <USB_EPStartXfer+0x798>
 8006602:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006604:	3301      	adds	r3, #1
 8006606:	643b      	str	r3, [r7, #64]	@ 0x40
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	00db      	lsls	r3, r3, #3
 800660e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006612:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006616:	6859      	ldr	r1, [r3, #4]
 8006618:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800661a:	069a      	lsls	r2, r3, #26
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	781b      	ldrb	r3, [r3, #0]
 8006620:	00db      	lsls	r3, r3, #3
 8006622:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006626:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800662a:	430a      	orrs	r2, r1
 800662c:	605a      	str	r2, [r3, #4]
 800662e:	e048      	b.n	80066c2 <USB_EPStartXfer+0x852>
 8006630:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006632:	095b      	lsrs	r3, r3, #5
 8006634:	643b      	str	r3, [r7, #64]	@ 0x40
 8006636:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006638:	f003 031f 	and.w	r3, r3, #31
 800663c:	2b00      	cmp	r3, #0
 800663e:	d102      	bne.n	8006646 <USB_EPStartXfer+0x7d6>
 8006640:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006642:	3b01      	subs	r3, #1
 8006644:	643b      	str	r3, [r7, #64]	@ 0x40
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	00db      	lsls	r3, r3, #3
 800664c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006650:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006654:	685a      	ldr	r2, [r3, #4]
 8006656:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006658:	069b      	lsls	r3, r3, #26
 800665a:	431a      	orrs	r2, r3
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	00db      	lsls	r3, r3, #3
 8006662:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006666:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800666a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800666e:	605a      	str	r2, [r3, #4]
 8006670:	e027      	b.n	80066c2 <USB_EPStartXfer+0x852>
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	785b      	ldrb	r3, [r3, #1]
 8006676:	2b01      	cmp	r3, #1
 8006678:	d123      	bne.n	80066c2 <USB_EPStartXfer+0x852>
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	00db      	lsls	r3, r3, #3
 8006680:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006684:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006688:	685a      	ldr	r2, [r3, #4]
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	00db      	lsls	r3, r3, #3
 8006690:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006694:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006698:	b292      	uxth	r2, r2
 800669a:	605a      	str	r2, [r3, #4]
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	00db      	lsls	r3, r3, #3
 80066a2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80066a6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80066aa:	6859      	ldr	r1, [r3, #4]
 80066ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066ae:	041a      	lsls	r2, r3, #16
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	00db      	lsls	r3, r3, #3
 80066b6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80066ba:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80066be:	430a      	orrs	r2, r1
 80066c0:	605a      	str	r2, [r3, #4]
          pmabuffer = ep->pmaaddr1;
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	895b      	ldrh	r3, [r3, #10]
 80066c6:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	6959      	ldr	r1, [r3, #20]
 80066cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	8b7a      	ldrh	r2, [r7, #26]
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 fd42 	bl	800715c <USB_WritePMA>
 80066d8:	e0a4      	b.n	8006824 <USB_EPStartXfer+0x9b4>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	785b      	ldrb	r3, [r3, #1]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d16d      	bne.n	80067be <USB_EPStartXfer+0x94e>
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	00db      	lsls	r3, r3, #3
 80066e8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80066ec:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	00db      	lsls	r3, r3, #3
 80066f8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80066fc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006700:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8006704:	601a      	str	r2, [r3, #0]
 8006706:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006708:	2b00      	cmp	r3, #0
 800670a:	d112      	bne.n	8006732 <USB_EPStartXfer+0x8c2>
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	00db      	lsls	r3, r3, #3
 8006712:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006716:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	00db      	lsls	r3, r3, #3
 8006722:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006726:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800672a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800672e:	601a      	str	r2, [r3, #0]
 8006730:	e06d      	b.n	800680e <USB_EPStartXfer+0x99e>
 8006732:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006734:	2b3e      	cmp	r3, #62	@ 0x3e
 8006736:	d821      	bhi.n	800677c <USB_EPStartXfer+0x90c>
 8006738:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800673a:	085b      	lsrs	r3, r3, #1
 800673c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800673e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006740:	f003 0301 	and.w	r3, r3, #1
 8006744:	2b00      	cmp	r3, #0
 8006746:	d002      	beq.n	800674e <USB_EPStartXfer+0x8de>
 8006748:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800674a:	3301      	adds	r3, #1
 800674c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	781b      	ldrb	r3, [r3, #0]
 8006752:	00db      	lsls	r3, r3, #3
 8006754:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006758:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800675c:	6819      	ldr	r1, [r3, #0]
 800675e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006760:	069a      	lsls	r2, r3, #26
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	781b      	ldrb	r3, [r3, #0]
 8006766:	00db      	lsls	r3, r3, #3
 8006768:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800676c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006770:	430a      	orrs	r2, r1
 8006772:	601a      	str	r2, [r3, #0]
 8006774:	e04b      	b.n	800680e <USB_EPStartXfer+0x99e>
 8006776:	bf00      	nop
 8006778:	07ff8e8f 	.word	0x07ff8e8f
 800677c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800677e:	095b      	lsrs	r3, r3, #5
 8006780:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006782:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006784:	f003 031f 	and.w	r3, r3, #31
 8006788:	2b00      	cmp	r3, #0
 800678a:	d102      	bne.n	8006792 <USB_EPStartXfer+0x922>
 800678c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800678e:	3b01      	subs	r3, #1
 8006790:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	00db      	lsls	r3, r3, #3
 8006798:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800679c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80067a0:	681a      	ldr	r2, [r3, #0]
 80067a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067a4:	069b      	lsls	r3, r3, #26
 80067a6:	431a      	orrs	r2, r3
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	00db      	lsls	r3, r3, #3
 80067ae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80067b2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80067b6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80067ba:	601a      	str	r2, [r3, #0]
 80067bc:	e027      	b.n	800680e <USB_EPStartXfer+0x99e>
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	785b      	ldrb	r3, [r3, #1]
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d123      	bne.n	800680e <USB_EPStartXfer+0x99e>
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	00db      	lsls	r3, r3, #3
 80067cc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80067d0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	00db      	lsls	r3, r3, #3
 80067dc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80067e0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80067e4:	b292      	uxth	r2, r2
 80067e6:	601a      	str	r2, [r3, #0]
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	781b      	ldrb	r3, [r3, #0]
 80067ec:	00db      	lsls	r3, r3, #3
 80067ee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80067f2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80067f6:	6819      	ldr	r1, [r3, #0]
 80067f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067fa:	041a      	lsls	r2, r3, #16
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	00db      	lsls	r3, r3, #3
 8006802:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006806:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800680a:	430a      	orrs	r2, r1
 800680c:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	891b      	ldrh	r3, [r3, #8]
 8006812:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	6959      	ldr	r1, [r3, #20]
 8006818:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800681a:	b29b      	uxth	r3, r3
 800681c:	8b7a      	ldrh	r2, [r7, #26]
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f000 fc9c 	bl	800715c <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	4413      	add	r3, r2
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	4b8b      	ldr	r3, [pc, #556]	@ (8006a60 <USB_EPStartXfer+0xbf0>)
 8006832:	4013      	ands	r3, r2
 8006834:	60fb      	str	r3, [r7, #12]
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f083 0310 	eor.w	r3, r3, #16
 800683c:	60fb      	str	r3, [r7, #12]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	f083 0320 	eor.w	r3, r3, #32
 8006844:	60fb      	str	r3, [r7, #12]
 8006846:	687a      	ldr	r2, [r7, #4]
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	009b      	lsls	r3, r3, #2
 800684e:	441a      	add	r2, r3
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006856:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800685a:	6013      	str	r3, [r2, #0]
 800685c:	e36b      	b.n	8006f36 <USB_EPStartXfer+0x10c6>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	7b1b      	ldrb	r3, [r3, #12]
 8006862:	2b00      	cmp	r3, #0
 8006864:	f040 8081 	bne.w	800696a <USB_EPStartXfer+0xafa>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	699a      	ldr	r2, [r3, #24]
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	691b      	ldr	r3, [r3, #16]
 8006870:	429a      	cmp	r2, r3
 8006872:	d909      	bls.n	8006888 <USB_EPStartXfer+0xa18>
      {
        len = ep->maxpacket;
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	691b      	ldr	r3, [r3, #16]
 8006878:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len -= len;
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	699a      	ldr	r2, [r3, #24]
 800687e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006880:	1ad2      	subs	r2, r2, r3
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	619a      	str	r2, [r3, #24]
 8006886:	e005      	b.n	8006894 <USB_EPStartXfer+0xa24>
      }
      else
      {
        len = ep->xfer_len;
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	699b      	ldr	r3, [r3, #24]
 800688c:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len = 0U;
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	2200      	movs	r2, #0
 8006892:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	00db      	lsls	r3, r3, #3
 800689a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800689e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80068a2:	685a      	ldr	r2, [r3, #4]
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	00db      	lsls	r3, r3, #3
 80068aa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80068ae:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80068b2:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80068b6:	605a      	str	r2, [r3, #4]
 80068b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d112      	bne.n	80068e4 <USB_EPStartXfer+0xa74>
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	00db      	lsls	r3, r3, #3
 80068c4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80068c8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80068cc:	685a      	ldr	r2, [r3, #4]
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	00db      	lsls	r3, r3, #3
 80068d4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80068d8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80068dc:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80068e0:	605a      	str	r2, [r3, #4]
 80068e2:	e30c      	b.n	8006efe <USB_EPStartXfer+0x108e>
 80068e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80068e6:	2b3e      	cmp	r3, #62	@ 0x3e
 80068e8:	d81e      	bhi.n	8006928 <USB_EPStartXfer+0xab8>
 80068ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80068ec:	085b      	lsrs	r3, r3, #1
 80068ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 80068f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80068f2:	f003 0301 	and.w	r3, r3, #1
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d002      	beq.n	8006900 <USB_EPStartXfer+0xa90>
 80068fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068fc:	3301      	adds	r3, #1
 80068fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	00db      	lsls	r3, r3, #3
 8006906:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800690a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800690e:	6859      	ldr	r1, [r3, #4]
 8006910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006912:	069a      	lsls	r2, r3, #26
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	00db      	lsls	r3, r3, #3
 800691a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800691e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006922:	430a      	orrs	r2, r1
 8006924:	605a      	str	r2, [r3, #4]
 8006926:	e2ea      	b.n	8006efe <USB_EPStartXfer+0x108e>
 8006928:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800692a:	095b      	lsrs	r3, r3, #5
 800692c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800692e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006930:	f003 031f 	and.w	r3, r3, #31
 8006934:	2b00      	cmp	r3, #0
 8006936:	d102      	bne.n	800693e <USB_EPStartXfer+0xace>
 8006938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800693a:	3b01      	subs	r3, #1
 800693c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	781b      	ldrb	r3, [r3, #0]
 8006942:	00db      	lsls	r3, r3, #3
 8006944:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006948:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800694c:	685a      	ldr	r2, [r3, #4]
 800694e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006950:	069b      	lsls	r3, r3, #26
 8006952:	431a      	orrs	r2, r3
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	00db      	lsls	r3, r3, #3
 800695a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800695e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006962:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006966:	605a      	str	r2, [r3, #4]
 8006968:	e2c9      	b.n	8006efe <USB_EPStartXfer+0x108e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	78db      	ldrb	r3, [r3, #3]
 800696e:	2b02      	cmp	r3, #2
 8006970:	f040 8176 	bne.w	8006c60 <USB_EPStartXfer+0xdf0>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	785b      	ldrb	r3, [r3, #1]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d173      	bne.n	8006a64 <USB_EPStartXfer+0xbf4>
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	00db      	lsls	r3, r3, #3
 8006982:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006986:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	00db      	lsls	r3, r3, #3
 8006992:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006996:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800699a:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800699e:	601a      	str	r2, [r3, #0]
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	691b      	ldr	r3, [r3, #16]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d112      	bne.n	80069ce <USB_EPStartXfer+0xb5e>
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	00db      	lsls	r3, r3, #3
 80069ae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80069b2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	00db      	lsls	r3, r3, #3
 80069be:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80069c2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80069c6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80069ca:	601a      	str	r2, [r3, #0]
 80069cc:	e073      	b.n	8006ab6 <USB_EPStartXfer+0xc46>
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	691b      	ldr	r3, [r3, #16]
 80069d2:	2b3e      	cmp	r3, #62	@ 0x3e
 80069d4:	d820      	bhi.n	8006a18 <USB_EPStartXfer+0xba8>
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	691b      	ldr	r3, [r3, #16]
 80069da:	085b      	lsrs	r3, r3, #1
 80069dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	691b      	ldr	r3, [r3, #16]
 80069e2:	f003 0301 	and.w	r3, r3, #1
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d002      	beq.n	80069f0 <USB_EPStartXfer+0xb80>
 80069ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069ec:	3301      	adds	r3, #1
 80069ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	781b      	ldrb	r3, [r3, #0]
 80069f4:	00db      	lsls	r3, r3, #3
 80069f6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80069fa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80069fe:	6819      	ldr	r1, [r3, #0]
 8006a00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a02:	069a      	lsls	r2, r3, #26
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	00db      	lsls	r3, r3, #3
 8006a0a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006a0e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006a12:	430a      	orrs	r2, r1
 8006a14:	601a      	str	r2, [r3, #0]
 8006a16:	e04e      	b.n	8006ab6 <USB_EPStartXfer+0xc46>
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	691b      	ldr	r3, [r3, #16]
 8006a1c:	095b      	lsrs	r3, r3, #5
 8006a1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	691b      	ldr	r3, [r3, #16]
 8006a24:	f003 031f 	and.w	r3, r3, #31
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d102      	bne.n	8006a32 <USB_EPStartXfer+0xbc2>
 8006a2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a2e:	3b01      	subs	r3, #1
 8006a30:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	00db      	lsls	r3, r3, #3
 8006a38:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006a3c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a44:	069b      	lsls	r3, r3, #26
 8006a46:	431a      	orrs	r2, r3
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	781b      	ldrb	r3, [r3, #0]
 8006a4c:	00db      	lsls	r3, r3, #3
 8006a4e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006a52:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006a56:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006a5a:	601a      	str	r2, [r3, #0]
 8006a5c:	e02b      	b.n	8006ab6 <USB_EPStartXfer+0xc46>
 8006a5e:	bf00      	nop
 8006a60:	07ff8fbf 	.word	0x07ff8fbf
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	785b      	ldrb	r3, [r3, #1]
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d124      	bne.n	8006ab6 <USB_EPStartXfer+0xc46>
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	00db      	lsls	r3, r3, #3
 8006a72:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006a76:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	00db      	lsls	r3, r3, #3
 8006a82:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006a86:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006a8a:	b292      	uxth	r2, r2
 8006a8c:	601a      	str	r2, [r3, #0]
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	781b      	ldrb	r3, [r3, #0]
 8006a92:	00db      	lsls	r3, r3, #3
 8006a94:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006a98:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006a9c:	6819      	ldr	r1, [r3, #0]
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	691b      	ldr	r3, [r3, #16]
 8006aa2:	041a      	lsls	r2, r3, #16
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	00db      	lsls	r3, r3, #3
 8006aaa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006aae:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006ab2:	430a      	orrs	r2, r1
 8006ab4:	601a      	str	r2, [r3, #0]
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	785b      	ldrb	r3, [r3, #1]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d170      	bne.n	8006ba0 <USB_EPStartXfer+0xd30>
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	00db      	lsls	r3, r3, #3
 8006ac4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006ac8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006acc:	685a      	ldr	r2, [r3, #4]
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	781b      	ldrb	r3, [r3, #0]
 8006ad2:	00db      	lsls	r3, r3, #3
 8006ad4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006ad8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006adc:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8006ae0:	605a      	str	r2, [r3, #4]
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	691b      	ldr	r3, [r3, #16]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d112      	bne.n	8006b10 <USB_EPStartXfer+0xca0>
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	781b      	ldrb	r3, [r3, #0]
 8006aee:	00db      	lsls	r3, r3, #3
 8006af0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006af4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006af8:	685a      	ldr	r2, [r3, #4]
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	781b      	ldrb	r3, [r3, #0]
 8006afe:	00db      	lsls	r3, r3, #3
 8006b00:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006b04:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006b08:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006b0c:	605a      	str	r2, [r3, #4]
 8006b0e:	e070      	b.n	8006bf2 <USB_EPStartXfer+0xd82>
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	691b      	ldr	r3, [r3, #16]
 8006b14:	2b3e      	cmp	r3, #62	@ 0x3e
 8006b16:	d820      	bhi.n	8006b5a <USB_EPStartXfer+0xcea>
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	691b      	ldr	r3, [r3, #16]
 8006b1c:	085b      	lsrs	r3, r3, #1
 8006b1e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	691b      	ldr	r3, [r3, #16]
 8006b24:	f003 0301 	and.w	r3, r3, #1
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d002      	beq.n	8006b32 <USB_EPStartXfer+0xcc2>
 8006b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b2e:	3301      	adds	r3, #1
 8006b30:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	781b      	ldrb	r3, [r3, #0]
 8006b36:	00db      	lsls	r3, r3, #3
 8006b38:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006b3c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006b40:	6859      	ldr	r1, [r3, #4]
 8006b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b44:	069a      	lsls	r2, r3, #26
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	00db      	lsls	r3, r3, #3
 8006b4c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006b50:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006b54:	430a      	orrs	r2, r1
 8006b56:	605a      	str	r2, [r3, #4]
 8006b58:	e04b      	b.n	8006bf2 <USB_EPStartXfer+0xd82>
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	691b      	ldr	r3, [r3, #16]
 8006b5e:	095b      	lsrs	r3, r3, #5
 8006b60:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	691b      	ldr	r3, [r3, #16]
 8006b66:	f003 031f 	and.w	r3, r3, #31
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d102      	bne.n	8006b74 <USB_EPStartXfer+0xd04>
 8006b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b70:	3b01      	subs	r3, #1
 8006b72:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	00db      	lsls	r3, r3, #3
 8006b7a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006b7e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006b82:	685a      	ldr	r2, [r3, #4]
 8006b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b86:	069b      	lsls	r3, r3, #26
 8006b88:	431a      	orrs	r2, r3
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	781b      	ldrb	r3, [r3, #0]
 8006b8e:	00db      	lsls	r3, r3, #3
 8006b90:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006b94:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006b98:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006b9c:	605a      	str	r2, [r3, #4]
 8006b9e:	e028      	b.n	8006bf2 <USB_EPStartXfer+0xd82>
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	785b      	ldrb	r3, [r3, #1]
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d124      	bne.n	8006bf2 <USB_EPStartXfer+0xd82>
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	00db      	lsls	r3, r3, #3
 8006bae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006bb2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006bb6:	685a      	ldr	r2, [r3, #4]
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	00db      	lsls	r3, r3, #3
 8006bbe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006bc2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006bc6:	b292      	uxth	r2, r2
 8006bc8:	605a      	str	r2, [r3, #4]
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	781b      	ldrb	r3, [r3, #0]
 8006bce:	00db      	lsls	r3, r3, #3
 8006bd0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006bd4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006bd8:	6859      	ldr	r1, [r3, #4]
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	691b      	ldr	r3, [r3, #16]
 8006bde:	041a      	lsls	r2, r3, #16
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	781b      	ldrb	r3, [r3, #0]
 8006be4:	00db      	lsls	r3, r3, #3
 8006be6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006bea:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006bee:	430a      	orrs	r2, r1
 8006bf0:	605a      	str	r2, [r3, #4]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	69db      	ldr	r3, [r3, #28]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	f000 8181 	beq.w	8006efe <USB_EPStartXfer+0x108e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(USBx, ep->num);
 8006bfc:	687a      	ldr	r2, [r7, #4]
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	4413      	add	r3, r2
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	84fb      	strh	r3, [r7, #38]	@ 0x26

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006c0a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006c0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d004      	beq.n	8006c1e <USB_EPStartXfer+0xdae>
 8006c14:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006c16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d10b      	bne.n	8006c36 <USB_EPStartXfer+0xdc6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006c1e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006c20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	f040 816a 	bne.w	8006efe <USB_EPStartXfer+0x108e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006c2a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006c2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	f040 8164 	bne.w	8006efe <USB_EPStartXfer+0x108e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006c36:	687a      	ldr	r2, [r7, #4]
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	781b      	ldrb	r3, [r3, #0]
 8006c3c:	009b      	lsls	r3, r3, #2
 8006c3e:	4413      	add	r3, r2
 8006c40:	681a      	ldr	r2, [r3, #0]
 8006c42:	4b98      	ldr	r3, [pc, #608]	@ (8006ea4 <USB_EPStartXfer+0x1034>)
 8006c44:	4013      	ands	r3, r2
 8006c46:	623b      	str	r3, [r7, #32]
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	009b      	lsls	r3, r3, #2
 8006c50:	441a      	add	r2, r3
 8006c52:	6a3b      	ldr	r3, [r7, #32]
 8006c54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c58:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006c5c:	6013      	str	r3, [r2, #0]
 8006c5e:	e14e      	b.n	8006efe <USB_EPStartXfer+0x108e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	78db      	ldrb	r3, [r3, #3]
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	f040 8148 	bne.w	8006efa <USB_EPStartXfer+0x108a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	699a      	ldr	r2, [r3, #24]
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	691b      	ldr	r3, [r3, #16]
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d909      	bls.n	8006c8a <USB_EPStartXfer+0xe1a>
        {
          len = ep->maxpacket;
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	691b      	ldr	r3, [r3, #16]
 8006c7a:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len -= len;
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	699a      	ldr	r2, [r3, #24]
 8006c80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c82:	1ad2      	subs	r2, r2, r3
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	619a      	str	r2, [r3, #24]
 8006c88:	e005      	b.n	8006c96 <USB_EPStartXfer+0xe26>
        }
        else
        {
          len = ep->xfer_len;
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	699b      	ldr	r3, [r3, #24]
 8006c8e:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len = 0U;
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	2200      	movs	r2, #0
 8006c94:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	785b      	ldrb	r3, [r3, #1]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d16a      	bne.n	8006d74 <USB_EPStartXfer+0xf04>
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	00db      	lsls	r3, r3, #3
 8006ca4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006ca8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006cac:	681a      	ldr	r2, [r3, #0]
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	00db      	lsls	r3, r3, #3
 8006cb4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006cb8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006cbc:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8006cc0:	601a      	str	r2, [r3, #0]
 8006cc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d112      	bne.n	8006cee <USB_EPStartXfer+0xe7e>
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	00db      	lsls	r3, r3, #3
 8006cce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006cd2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	781b      	ldrb	r3, [r3, #0]
 8006cdc:	00db      	lsls	r3, r3, #3
 8006cde:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006ce2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006ce6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006cea:	601a      	str	r2, [r3, #0]
 8006cec:	e06a      	b.n	8006dc4 <USB_EPStartXfer+0xf54>
 8006cee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006cf0:	2b3e      	cmp	r3, #62	@ 0x3e
 8006cf2:	d81e      	bhi.n	8006d32 <USB_EPStartXfer+0xec2>
 8006cf4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006cf6:	085b      	lsrs	r3, r3, #1
 8006cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006cfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006cfc:	f003 0301 	and.w	r3, r3, #1
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d002      	beq.n	8006d0a <USB_EPStartXfer+0xe9a>
 8006d04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d06:	3301      	adds	r3, #1
 8006d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	781b      	ldrb	r3, [r3, #0]
 8006d0e:	00db      	lsls	r3, r3, #3
 8006d10:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006d14:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006d18:	6819      	ldr	r1, [r3, #0]
 8006d1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d1c:	069a      	lsls	r2, r3, #26
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	00db      	lsls	r3, r3, #3
 8006d24:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006d28:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006d2c:	430a      	orrs	r2, r1
 8006d2e:	601a      	str	r2, [r3, #0]
 8006d30:	e048      	b.n	8006dc4 <USB_EPStartXfer+0xf54>
 8006d32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d34:	095b      	lsrs	r3, r3, #5
 8006d36:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d3a:	f003 031f 	and.w	r3, r3, #31
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d102      	bne.n	8006d48 <USB_EPStartXfer+0xed8>
 8006d42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d44:	3b01      	subs	r3, #1
 8006d46:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	781b      	ldrb	r3, [r3, #0]
 8006d4c:	00db      	lsls	r3, r3, #3
 8006d4e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006d52:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006d56:	681a      	ldr	r2, [r3, #0]
 8006d58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d5a:	069b      	lsls	r3, r3, #26
 8006d5c:	431a      	orrs	r2, r3
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	781b      	ldrb	r3, [r3, #0]
 8006d62:	00db      	lsls	r3, r3, #3
 8006d64:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006d68:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006d6c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006d70:	601a      	str	r2, [r3, #0]
 8006d72:	e027      	b.n	8006dc4 <USB_EPStartXfer+0xf54>
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	785b      	ldrb	r3, [r3, #1]
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d123      	bne.n	8006dc4 <USB_EPStartXfer+0xf54>
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	00db      	lsls	r3, r3, #3
 8006d82:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006d86:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	781b      	ldrb	r3, [r3, #0]
 8006d90:	00db      	lsls	r3, r3, #3
 8006d92:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006d96:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006d9a:	b292      	uxth	r2, r2
 8006d9c:	601a      	str	r2, [r3, #0]
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	781b      	ldrb	r3, [r3, #0]
 8006da2:	00db      	lsls	r3, r3, #3
 8006da4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006da8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006dac:	6819      	ldr	r1, [r3, #0]
 8006dae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006db0:	041a      	lsls	r2, r3, #16
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	00db      	lsls	r3, r3, #3
 8006db8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006dbc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006dc0:	430a      	orrs	r2, r1
 8006dc2:	601a      	str	r2, [r3, #0]
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	785b      	ldrb	r3, [r3, #1]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d16d      	bne.n	8006ea8 <USB_EPStartXfer+0x1038>
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	781b      	ldrb	r3, [r3, #0]
 8006dd0:	00db      	lsls	r3, r3, #3
 8006dd2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006dd6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006dda:	685a      	ldr	r2, [r3, #4]
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	00db      	lsls	r3, r3, #3
 8006de2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006de6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006dea:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8006dee:	605a      	str	r2, [r3, #4]
 8006df0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d112      	bne.n	8006e1c <USB_EPStartXfer+0xfac>
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	00db      	lsls	r3, r3, #3
 8006dfc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006e00:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006e04:	685a      	ldr	r2, [r3, #4]
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	781b      	ldrb	r3, [r3, #0]
 8006e0a:	00db      	lsls	r3, r3, #3
 8006e0c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006e10:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006e14:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006e18:	605a      	str	r2, [r3, #4]
 8006e1a:	e070      	b.n	8006efe <USB_EPStartXfer+0x108e>
 8006e1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e1e:	2b3e      	cmp	r3, #62	@ 0x3e
 8006e20:	d81e      	bhi.n	8006e60 <USB_EPStartXfer+0xff0>
 8006e22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e24:	085b      	lsrs	r3, r3, #1
 8006e26:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e2a:	f003 0301 	and.w	r3, r3, #1
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d002      	beq.n	8006e38 <USB_EPStartXfer+0xfc8>
 8006e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e34:	3301      	adds	r3, #1
 8006e36:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	00db      	lsls	r3, r3, #3
 8006e3e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006e42:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006e46:	6859      	ldr	r1, [r3, #4]
 8006e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e4a:	069a      	lsls	r2, r3, #26
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	00db      	lsls	r3, r3, #3
 8006e52:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006e56:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006e5a:	430a      	orrs	r2, r1
 8006e5c:	605a      	str	r2, [r3, #4]
 8006e5e:	e04e      	b.n	8006efe <USB_EPStartXfer+0x108e>
 8006e60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e62:	095b      	lsrs	r3, r3, #5
 8006e64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e68:	f003 031f 	and.w	r3, r3, #31
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d102      	bne.n	8006e76 <USB_EPStartXfer+0x1006>
 8006e70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e72:	3b01      	subs	r3, #1
 8006e74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	781b      	ldrb	r3, [r3, #0]
 8006e7a:	00db      	lsls	r3, r3, #3
 8006e7c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006e80:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006e84:	685a      	ldr	r2, [r3, #4]
 8006e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e88:	069b      	lsls	r3, r3, #26
 8006e8a:	431a      	orrs	r2, r3
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	781b      	ldrb	r3, [r3, #0]
 8006e90:	00db      	lsls	r3, r3, #3
 8006e92:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006e96:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006e9a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006e9e:	605a      	str	r2, [r3, #4]
 8006ea0:	e02d      	b.n	8006efe <USB_EPStartXfer+0x108e>
 8006ea2:	bf00      	nop
 8006ea4:	07ff8f8f 	.word	0x07ff8f8f
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	785b      	ldrb	r3, [r3, #1]
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d126      	bne.n	8006efe <USB_EPStartXfer+0x108e>
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	00db      	lsls	r3, r3, #3
 8006eb6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006eba:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006ebe:	685a      	ldr	r2, [r3, #4]
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	00db      	lsls	r3, r3, #3
 8006ec6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006eca:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006ece:	b292      	uxth	r2, r2
 8006ed0:	605a      	str	r2, [r3, #4]
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	781b      	ldrb	r3, [r3, #0]
 8006ed6:	00db      	lsls	r3, r3, #3
 8006ed8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006edc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006ee0:	6859      	ldr	r1, [r3, #4]
 8006ee2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ee4:	041a      	lsls	r2, r3, #16
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	781b      	ldrb	r3, [r3, #0]
 8006eea:	00db      	lsls	r3, r3, #3
 8006eec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006ef0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8006ef4:	430a      	orrs	r2, r1
 8006ef6:	605a      	str	r2, [r3, #4]
 8006ef8:	e001      	b.n	8006efe <USB_EPStartXfer+0x108e>
      }
      else
      {
        return HAL_ERROR;
 8006efa:	2301      	movs	r3, #1
 8006efc:	e01c      	b.n	8006f38 <USB_EPStartXfer+0x10c8>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006efe:	687a      	ldr	r2, [r7, #4]
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	781b      	ldrb	r3, [r3, #0]
 8006f04:	009b      	lsls	r3, r3, #2
 8006f06:	4413      	add	r3, r2
 8006f08:	681a      	ldr	r2, [r3, #0]
 8006f0a:	4b0d      	ldr	r3, [pc, #52]	@ (8006f40 <USB_EPStartXfer+0x10d0>)
 8006f0c:	4013      	ands	r3, r2
 8006f0e:	61fb      	str	r3, [r7, #28]
 8006f10:	69fb      	ldr	r3, [r7, #28]
 8006f12:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006f16:	61fb      	str	r3, [r7, #28]
 8006f18:	69fb      	ldr	r3, [r7, #28]
 8006f1a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006f1e:	61fb      	str	r3, [r7, #28]
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	781b      	ldrb	r3, [r3, #0]
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	441a      	add	r2, r3
 8006f2a:	69fb      	ldr	r3, [r7, #28]
 8006f2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f34:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006f36:	2300      	movs	r3, #0
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3758      	adds	r7, #88	@ 0x58
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}
 8006f40:	07ffbf8f 	.word	0x07ffbf8f

08006f44 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b085      	sub	sp, #20
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	785b      	ldrb	r3, [r3, #1]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d018      	beq.n	8006f88 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006f56:	687a      	ldr	r2, [r7, #4]
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	781b      	ldrb	r3, [r3, #0]
 8006f5c:	009b      	lsls	r3, r3, #2
 8006f5e:	4413      	add	r3, r2
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	4b19      	ldr	r3, [pc, #100]	@ (8006fc8 <USB_EPSetStall+0x84>)
 8006f64:	4013      	ands	r3, r2
 8006f66:	60bb      	str	r3, [r7, #8]
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	f083 0310 	eor.w	r3, r3, #16
 8006f6e:	60bb      	str	r3, [r7, #8]
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	781b      	ldrb	r3, [r3, #0]
 8006f76:	009b      	lsls	r3, r3, #2
 8006f78:	441a      	add	r2, r3
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f84:	6013      	str	r3, [r2, #0]
 8006f86:	e017      	b.n	8006fb8 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006f88:	687a      	ldr	r2, [r7, #4]
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	009b      	lsls	r3, r3, #2
 8006f90:	4413      	add	r3, r2
 8006f92:	681a      	ldr	r2, [r3, #0]
 8006f94:	4b0d      	ldr	r3, [pc, #52]	@ (8006fcc <USB_EPSetStall+0x88>)
 8006f96:	4013      	ands	r3, r2
 8006f98:	60fb      	str	r3, [r7, #12]
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006fa0:	60fb      	str	r3, [r7, #12]
 8006fa2:	687a      	ldr	r2, [r7, #4]
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	781b      	ldrb	r3, [r3, #0]
 8006fa8:	009b      	lsls	r3, r3, #2
 8006faa:	441a      	add	r2, r3
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006fb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fb6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006fb8:	2300      	movs	r3, #0
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3714      	adds	r7, #20
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr
 8006fc6:	bf00      	nop
 8006fc8:	07ff8fbf 	.word	0x07ff8fbf
 8006fcc:	07ffbf8f 	.word	0x07ffbf8f

08006fd0 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b089      	sub	sp, #36	@ 0x24
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	7b1b      	ldrb	r3, [r3, #12]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d17c      	bne.n	80070dc <USB_EPClearStall+0x10c>
  {
    if (ep->is_in != 0U)
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	785b      	ldrb	r3, [r3, #1]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d03c      	beq.n	8007064 <USB_EPClearStall+0x94>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006fea:	687a      	ldr	r2, [r7, #4]
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	009b      	lsls	r3, r3, #2
 8006ff2:	4413      	add	r3, r2
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	613b      	str	r3, [r7, #16]
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d013      	beq.n	800702a <USB_EPClearStall+0x5a>
 8007002:	687a      	ldr	r2, [r7, #4]
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	009b      	lsls	r3, r3, #2
 800700a:	4413      	add	r3, r2
 800700c:	681a      	ldr	r2, [r3, #0]
 800700e:	4b37      	ldr	r3, [pc, #220]	@ (80070ec <USB_EPClearStall+0x11c>)
 8007010:	4013      	ands	r3, r2
 8007012:	60fb      	str	r3, [r7, #12]
 8007014:	687a      	ldr	r2, [r7, #4]
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	781b      	ldrb	r3, [r3, #0]
 800701a:	009b      	lsls	r3, r3, #2
 800701c:	441a      	add	r2, r3
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007024:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007028:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	78db      	ldrb	r3, [r3, #3]
 800702e:	2b01      	cmp	r3, #1
 8007030:	d054      	beq.n	80070dc <USB_EPClearStall+0x10c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	781b      	ldrb	r3, [r3, #0]
 8007038:	009b      	lsls	r3, r3, #2
 800703a:	4413      	add	r3, r2
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	4b2c      	ldr	r3, [pc, #176]	@ (80070f0 <USB_EPClearStall+0x120>)
 8007040:	4013      	ands	r3, r2
 8007042:	60bb      	str	r3, [r7, #8]
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	f083 0320 	eor.w	r3, r3, #32
 800704a:	60bb      	str	r3, [r7, #8]
 800704c:	687a      	ldr	r2, [r7, #4]
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	781b      	ldrb	r3, [r3, #0]
 8007052:	009b      	lsls	r3, r3, #2
 8007054:	441a      	add	r2, r3
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800705c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007060:	6013      	str	r3, [r2, #0]
 8007062:	e03b      	b.n	80070dc <USB_EPClearStall+0x10c>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	781b      	ldrb	r3, [r3, #0]
 800706a:	009b      	lsls	r3, r3, #2
 800706c:	4413      	add	r3, r2
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	61fb      	str	r3, [r7, #28]
 8007072:	69fb      	ldr	r3, [r7, #28]
 8007074:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007078:	2b00      	cmp	r3, #0
 800707a:	d013      	beq.n	80070a4 <USB_EPClearStall+0xd4>
 800707c:	687a      	ldr	r2, [r7, #4]
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	781b      	ldrb	r3, [r3, #0]
 8007082:	009b      	lsls	r3, r3, #2
 8007084:	4413      	add	r3, r2
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	4b18      	ldr	r3, [pc, #96]	@ (80070ec <USB_EPClearStall+0x11c>)
 800708a:	4013      	ands	r3, r2
 800708c:	61bb      	str	r3, [r7, #24]
 800708e:	687a      	ldr	r2, [r7, #4]
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	781b      	ldrb	r3, [r3, #0]
 8007094:	009b      	lsls	r3, r3, #2
 8007096:	441a      	add	r2, r3
 8007098:	69bb      	ldr	r3, [r7, #24]
 800709a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800709e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070a2:	6013      	str	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80070a4:	687a      	ldr	r2, [r7, #4]
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	781b      	ldrb	r3, [r3, #0]
 80070aa:	009b      	lsls	r3, r3, #2
 80070ac:	4413      	add	r3, r2
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	4b10      	ldr	r3, [pc, #64]	@ (80070f4 <USB_EPClearStall+0x124>)
 80070b2:	4013      	ands	r3, r2
 80070b4:	617b      	str	r3, [r7, #20]
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80070bc:	617b      	str	r3, [r7, #20]
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80070c4:	617b      	str	r3, [r7, #20]
 80070c6:	687a      	ldr	r2, [r7, #4]
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	781b      	ldrb	r3, [r3, #0]
 80070cc:	009b      	lsls	r3, r3, #2
 80070ce:	441a      	add	r2, r3
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80070d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070da:	6013      	str	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80070dc:	2300      	movs	r3, #0
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3724      	adds	r7, #36	@ 0x24
 80070e2:	46bd      	mov	sp, r7
 80070e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e8:	4770      	bx	lr
 80070ea:	bf00      	nop
 80070ec:	07ff8f8f 	.word	0x07ff8f8f
 80070f0:	07ff8fbf 	.word	0x07ff8fbf
 80070f4:	07ffbf8f 	.word	0x07ffbf8f

080070f8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_DRD_TypeDef *USBx, uint8_t address)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b083      	sub	sp, #12
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	460b      	mov	r3, r1
 8007102:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007104:	78fb      	ldrb	r3, [r7, #3]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d102      	bne.n	8007110 <USB_SetDevAddress+0x18>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2280      	movs	r2, #128	@ 0x80
 800710e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8007110:	2300      	movs	r3, #0
}
 8007112:	4618      	mov	r0, r3
 8007114:	370c      	adds	r7, #12
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr

0800711e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_DRD_TypeDef *USBx)
{
 800711e:	b480      	push	{r7}
 8007120:	b083      	sub	sp, #12
 8007122:	af00      	add	r7, sp, #0
 8007124:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800712a:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8007132:	2300      	movs	r3, #0
}
 8007134:	4618      	mov	r0, r3
 8007136:	370c      	adds	r7, #12
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr

08007140 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_DRD_TypeDef const *USBx)
{
 8007140:	b480      	push	{r7}
 8007142:	b085      	sub	sp, #20
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800714c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800714e:	68fb      	ldr	r3, [r7, #12]
}
 8007150:	4618      	mov	r0, r3
 8007152:	3714      	adds	r7, #20
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr

0800715c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800715c:	b480      	push	{r7}
 800715e:	b08b      	sub	sp, #44	@ 0x2c
 8007160:	af00      	add	r7, sp, #0
 8007162:	60f8      	str	r0, [r7, #12]
 8007164:	60b9      	str	r1, [r7, #8]
 8007166:	4611      	mov	r1, r2
 8007168:	461a      	mov	r2, r3
 800716a:	460b      	mov	r3, r1
 800716c:	80fb      	strh	r3, [r7, #6]
 800716e:	4613      	mov	r3, r2
 8007170:	80bb      	strh	r3, [r7, #4]
  UNUSED(USBx);
  uint32_t WrVal;
  uint32_t count;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 8007172:	88bb      	ldrh	r3, [r7, #4]
 8007174:	3303      	adds	r3, #3
 8007176:	089b      	lsrs	r3, r3, #2
 8007178:	61bb      	str	r3, [r7, #24]
  /* Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800717a:	88bb      	ldrh	r3, [r7, #4]
 800717c:	f003 0303 	and.w	r3, r3, #3
 8007180:	82fb      	strh	r3, [r7, #22]
  uint8_t *pBuf = pbUsrBuf;
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	613b      	str	r3, [r7, #16]

  /* Check if there is a remaining byte */
  if (remaining_bytes != 0U)
 8007186:	8afb      	ldrh	r3, [r7, #22]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d002      	beq.n	8007192 <USB_WritePMA+0x36>
  {
    NbWords--;
 800718c:	69bb      	ldr	r3, [r7, #24]
 800718e:	3b01      	subs	r3, #1
 8007190:	61bb      	str	r3, [r7, #24]
  }

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 8007192:	88fb      	ldrh	r3, [r7, #6]
 8007194:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007198:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800719c:	61fb      	str	r3, [r7, #28]

  /* Write the Calculated Word into the PMA related Buffer */
  for (count = NbWords; count != 0U; count--)
 800719e:	69bb      	ldr	r3, [r7, #24]
 80071a0:	623b      	str	r3, [r7, #32]
 80071a2:	e015      	b.n	80071d0 <USB_WritePMA+0x74>
  {
    *pdwVal = __UNALIGNED_UINT32_READ(pBuf);
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	681a      	ldr	r2, [r3, #0]
 80071a8:	69fb      	ldr	r3, [r7, #28]
 80071aa:	601a      	str	r2, [r3, #0]
    pdwVal++;
 80071ac:	69fb      	ldr	r3, [r7, #28]
 80071ae:	3304      	adds	r3, #4
 80071b0:	61fb      	str	r3, [r7, #28]
    /* Increment pBuf 4 Time as Word Increment */
    pBuf++;
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	3301      	adds	r3, #1
 80071b6:	613b      	str	r3, [r7, #16]
    pBuf++;
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	3301      	adds	r3, #1
 80071bc:	613b      	str	r3, [r7, #16]
    pBuf++;
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	3301      	adds	r3, #1
 80071c2:	613b      	str	r3, [r7, #16]
    pBuf++;
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	3301      	adds	r3, #1
 80071c8:	613b      	str	r3, [r7, #16]
  for (count = NbWords; count != 0U; count--)
 80071ca:	6a3b      	ldr	r3, [r7, #32]
 80071cc:	3b01      	subs	r3, #1
 80071ce:	623b      	str	r3, [r7, #32]
 80071d0:	6a3b      	ldr	r3, [r7, #32]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d1e6      	bne.n	80071a4 <USB_WritePMA+0x48>
  }

  /* When Number of data is not word aligned, write the remaining Byte */
  if (remaining_bytes != 0U)
 80071d6:	8afb      	ldrh	r3, [r7, #22]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d01a      	beq.n	8007212 <USB_WritePMA+0xb6>
  {
    WrVal = 0U;
 80071dc:	2300      	movs	r3, #0
 80071de:	627b      	str	r3, [r7, #36]	@ 0x24

    do
    {
      WrVal |= (uint32_t)(*(uint8_t *)pBuf) << (8U * count);
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	781b      	ldrb	r3, [r3, #0]
 80071e4:	461a      	mov	r2, r3
 80071e6:	6a3b      	ldr	r3, [r7, #32]
 80071e8:	00db      	lsls	r3, r3, #3
 80071ea:	fa02 f303 	lsl.w	r3, r2, r3
 80071ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071f0:	4313      	orrs	r3, r2
 80071f2:	627b      	str	r3, [r7, #36]	@ 0x24
      count++;
 80071f4:	6a3b      	ldr	r3, [r7, #32]
 80071f6:	3301      	adds	r3, #1
 80071f8:	623b      	str	r3, [r7, #32]
      pBuf++;
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	3301      	adds	r3, #1
 80071fe:	613b      	str	r3, [r7, #16]
      remaining_bytes--;
 8007200:	8afb      	ldrh	r3, [r7, #22]
 8007202:	3b01      	subs	r3, #1
 8007204:	82fb      	strh	r3, [r7, #22]
    } while (remaining_bytes != 0U);
 8007206:	8afb      	ldrh	r3, [r7, #22]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d1e9      	bne.n	80071e0 <USB_WritePMA+0x84>

    *pdwVal = WrVal;
 800720c:	69fb      	ldr	r3, [r7, #28]
 800720e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007210:	601a      	str	r2, [r3, #0]
  }
}
 8007212:	bf00      	nop
 8007214:	372c      	adds	r7, #44	@ 0x2c
 8007216:	46bd      	mov	sp, r7
 8007218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721c:	4770      	bx	lr

0800721e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800721e:	b480      	push	{r7}
 8007220:	b08b      	sub	sp, #44	@ 0x2c
 8007222:	af00      	add	r7, sp, #0
 8007224:	60f8      	str	r0, [r7, #12]
 8007226:	60b9      	str	r1, [r7, #8]
 8007228:	4611      	mov	r1, r2
 800722a:	461a      	mov	r2, r3
 800722c:	460b      	mov	r3, r1
 800722e:	80fb      	strh	r3, [r7, #6]
 8007230:	4613      	mov	r3, r2
 8007232:	80bb      	strh	r3, [r7, #4]
  UNUSED(USBx);
  uint32_t count;
  uint32_t RdVal;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 8007234:	88bb      	ldrh	r3, [r7, #4]
 8007236:	3303      	adds	r3, #3
 8007238:	089b      	lsrs	r3, r3, #2
 800723a:	61fb      	str	r3, [r7, #28]
  /*Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800723c:	88bb      	ldrh	r3, [r7, #4]
 800723e:	f003 0303 	and.w	r3, r3, #3
 8007242:	837b      	strh	r3, [r7, #26]
  uint8_t *pBuf = pbUsrBuf;
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	617b      	str	r3, [r7, #20]

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 8007248:	88fb      	ldrh	r3, [r7, #6]
 800724a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800724e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8007252:	623b      	str	r3, [r7, #32]

  /* if nbre of byte is not word aligned decrement the nbre of word*/
  if (remaining_bytes != 0U)
 8007254:	8b7b      	ldrh	r3, [r7, #26]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d002      	beq.n	8007260 <USB_ReadPMA+0x42>
  {
    NbWords--;
 800725a:	69fb      	ldr	r3, [r7, #28]
 800725c:	3b01      	subs	r3, #1
 800725e:	61fb      	str	r3, [r7, #28]
  }

  /*Read the Calculated Word From the PMA related Buffer*/
  for (count = NbWords; count != 0U; count--)
 8007260:	69fb      	ldr	r3, [r7, #28]
 8007262:	627b      	str	r3, [r7, #36]	@ 0x24
 8007264:	e015      	b.n	8007292 <USB_ReadPMA+0x74>
  {
    __UNALIGNED_UINT32_WRITE(pBuf, *pdwVal);
 8007266:	6a3b      	ldr	r3, [r7, #32]
 8007268:	681a      	ldr	r2, [r3, #0]
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	601a      	str	r2, [r3, #0]

    pdwVal++;
 800726e:	6a3b      	ldr	r3, [r7, #32]
 8007270:	3304      	adds	r3, #4
 8007272:	623b      	str	r3, [r7, #32]
    pBuf++;
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	3301      	adds	r3, #1
 8007278:	617b      	str	r3, [r7, #20]
    pBuf++;
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	3301      	adds	r3, #1
 800727e:	617b      	str	r3, [r7, #20]
    pBuf++;
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	3301      	adds	r3, #1
 8007284:	617b      	str	r3, [r7, #20]
    pBuf++;
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	3301      	adds	r3, #1
 800728a:	617b      	str	r3, [r7, #20]
  for (count = NbWords; count != 0U; count--)
 800728c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800728e:	3b01      	subs	r3, #1
 8007290:	627b      	str	r3, [r7, #36]	@ 0x24
 8007292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007294:	2b00      	cmp	r3, #0
 8007296:	d1e6      	bne.n	8007266 <USB_ReadPMA+0x48>
  }

  /*When Number of data is not word aligned, read the remaining byte*/
  if (remaining_bytes != 0U)
 8007298:	8b7b      	ldrh	r3, [r7, #26]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d017      	beq.n	80072ce <USB_ReadPMA+0xb0>
  {
    RdVal = *(__IO uint32_t *)pdwVal;
 800729e:	6a3b      	ldr	r3, [r7, #32]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	613b      	str	r3, [r7, #16]

    do
    {
      *(uint8_t *)pBuf = (uint8_t)(RdVal >> (8U * (uint8_t)(count)));
 80072a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072a6:	b2db      	uxtb	r3, r3
 80072a8:	00db      	lsls	r3, r3, #3
 80072aa:	693a      	ldr	r2, [r7, #16]
 80072ac:	fa22 f303 	lsr.w	r3, r2, r3
 80072b0:	b2da      	uxtb	r2, r3
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	701a      	strb	r2, [r3, #0]
      count++;
 80072b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072b8:	3301      	adds	r3, #1
 80072ba:	627b      	str	r3, [r7, #36]	@ 0x24
      pBuf++;
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	3301      	adds	r3, #1
 80072c0:	617b      	str	r3, [r7, #20]
      remaining_bytes--;
 80072c2:	8b7b      	ldrh	r3, [r7, #26]
 80072c4:	3b01      	subs	r3, #1
 80072c6:	837b      	strh	r3, [r7, #26]
    } while (remaining_bytes != 0U);
 80072c8:	8b7b      	ldrh	r3, [r7, #26]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d1ea      	bne.n	80072a4 <USB_ReadPMA+0x86>
  }
}
 80072ce:	bf00      	nop
 80072d0:	372c      	adds	r7, #44	@ 0x2c
 80072d2:	46bd      	mov	sp, r7
 80072d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d8:	4770      	bx	lr
	...

080072dc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b084      	sub	sp, #16
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
 80072e4:	460b      	mov	r3, r1
 80072e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80072e8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80072ec:	f001 ff40 	bl	8009170 <USBD_static_malloc>
 80072f0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d10a      	bne.n	800730e <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80072fe:	687a      	ldr	r2, [r7, #4]
 8007300:	33b0      	adds	r3, #176	@ 0xb0
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	4413      	add	r3, r2
 8007306:	2200      	movs	r2, #0
 8007308:	605a      	str	r2, [r3, #4]
    return (uint8_t)USBD_EMEM;
 800730a:	2302      	movs	r3, #2
 800730c:	e0fd      	b.n	800750a <USBD_CDC_Init+0x22e>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800730e:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8007312:	2100      	movs	r1, #0
 8007314:	68f8      	ldr	r0, [r7, #12]
 8007316:	f003 fd76 	bl	800ae06 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	33b0      	adds	r3, #176	@ 0xb0
 8007324:	009b      	lsls	r3, r3, #2
 8007326:	4413      	add	r3, r2
 8007328:	68fa      	ldr	r2, [r7, #12]
 800732a:	605a      	str	r2, [r3, #4]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007332:	687a      	ldr	r2, [r7, #4]
 8007334:	33b0      	adds	r3, #176	@ 0xb0
 8007336:	009b      	lsls	r3, r3, #2
 8007338:	4413      	add	r3, r2
 800733a:	685a      	ldr	r2, [r3, #4]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007348:	b2db      	uxtb	r3, r3
 800734a:	2202      	movs	r2, #2
 800734c:	2180      	movs	r1, #128	@ 0x80
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f002 fbba 	bl	8009ac8 <USBD_CoreGetEPAdd>
 8007354:	4603      	mov	r3, r0
 8007356:	461a      	mov	r2, r3
 8007358:	4b6e      	ldr	r3, [pc, #440]	@ (8007514 <USBD_CDC_Init+0x238>)
 800735a:	701a      	strb	r2, [r3, #0]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007362:	b2db      	uxtb	r3, r3
 8007364:	2202      	movs	r2, #2
 8007366:	2100      	movs	r1, #0
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f002 fbad 	bl	8009ac8 <USBD_CoreGetEPAdd>
 800736e:	4603      	mov	r3, r0
 8007370:	461a      	mov	r2, r3
 8007372:	4b69      	ldr	r3, [pc, #420]	@ (8007518 <USBD_CDC_Init+0x23c>)
 8007374:	701a      	strb	r2, [r3, #0]
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800737c:	b2db      	uxtb	r3, r3
 800737e:	2203      	movs	r2, #3
 8007380:	2180      	movs	r1, #128	@ 0x80
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f002 fba0 	bl	8009ac8 <USBD_CoreGetEPAdd>
 8007388:	4603      	mov	r3, r0
 800738a:	461a      	mov	r2, r3
 800738c:	4b63      	ldr	r3, [pc, #396]	@ (800751c <USBD_CDC_Init+0x240>)
 800738e:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	7c1b      	ldrb	r3, [r3, #16]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d138      	bne.n	800740a <USBD_CDC_Init+0x12e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007398:	4b5e      	ldr	r3, [pc, #376]	@ (8007514 <USBD_CDC_Init+0x238>)
 800739a:	7819      	ldrb	r1, [r3, #0]
 800739c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80073a0:	2202      	movs	r2, #2
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f001 fdeb 	bl	8008f7e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80073a8:	4b5a      	ldr	r3, [pc, #360]	@ (8007514 <USBD_CDC_Init+0x238>)
 80073aa:	781b      	ldrb	r3, [r3, #0]
 80073ac:	f003 020f 	and.w	r2, r3, #15
 80073b0:	6879      	ldr	r1, [r7, #4]
 80073b2:	4613      	mov	r3, r2
 80073b4:	009b      	lsls	r3, r3, #2
 80073b6:	4413      	add	r3, r2
 80073b8:	009b      	lsls	r3, r3, #2
 80073ba:	440b      	add	r3, r1
 80073bc:	3324      	adds	r3, #36	@ 0x24
 80073be:	2201      	movs	r2, #1
 80073c0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80073c2:	4b55      	ldr	r3, [pc, #340]	@ (8007518 <USBD_CDC_Init+0x23c>)
 80073c4:	7819      	ldrb	r1, [r3, #0]
 80073c6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80073ca:	2202      	movs	r2, #2
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f001 fdd6 	bl	8008f7e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80073d2:	4b51      	ldr	r3, [pc, #324]	@ (8007518 <USBD_CDC_Init+0x23c>)
 80073d4:	781b      	ldrb	r3, [r3, #0]
 80073d6:	f003 020f 	and.w	r2, r3, #15
 80073da:	6879      	ldr	r1, [r7, #4]
 80073dc:	4613      	mov	r3, r2
 80073de:	009b      	lsls	r3, r3, #2
 80073e0:	4413      	add	r3, r2
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	440b      	add	r3, r1
 80073e6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80073ea:	2201      	movs	r2, #1
 80073ec:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80073ee:	4b4b      	ldr	r3, [pc, #300]	@ (800751c <USBD_CDC_Init+0x240>)
 80073f0:	781b      	ldrb	r3, [r3, #0]
 80073f2:	f003 020f 	and.w	r2, r3, #15
 80073f6:	6879      	ldr	r1, [r7, #4]
 80073f8:	4613      	mov	r3, r2
 80073fa:	009b      	lsls	r3, r3, #2
 80073fc:	4413      	add	r3, r2
 80073fe:	009b      	lsls	r3, r3, #2
 8007400:	440b      	add	r3, r1
 8007402:	3326      	adds	r3, #38	@ 0x26
 8007404:	2210      	movs	r2, #16
 8007406:	801a      	strh	r2, [r3, #0]
 8007408:	e035      	b.n	8007476 <USBD_CDC_Init+0x19a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800740a:	4b42      	ldr	r3, [pc, #264]	@ (8007514 <USBD_CDC_Init+0x238>)
 800740c:	7819      	ldrb	r1, [r3, #0]
 800740e:	2340      	movs	r3, #64	@ 0x40
 8007410:	2202      	movs	r2, #2
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f001 fdb3 	bl	8008f7e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007418:	4b3e      	ldr	r3, [pc, #248]	@ (8007514 <USBD_CDC_Init+0x238>)
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	f003 020f 	and.w	r2, r3, #15
 8007420:	6879      	ldr	r1, [r7, #4]
 8007422:	4613      	mov	r3, r2
 8007424:	009b      	lsls	r3, r3, #2
 8007426:	4413      	add	r3, r2
 8007428:	009b      	lsls	r3, r3, #2
 800742a:	440b      	add	r3, r1
 800742c:	3324      	adds	r3, #36	@ 0x24
 800742e:	2201      	movs	r2, #1
 8007430:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007432:	4b39      	ldr	r3, [pc, #228]	@ (8007518 <USBD_CDC_Init+0x23c>)
 8007434:	7819      	ldrb	r1, [r3, #0]
 8007436:	2340      	movs	r3, #64	@ 0x40
 8007438:	2202      	movs	r2, #2
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f001 fd9f 	bl	8008f7e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007440:	4b35      	ldr	r3, [pc, #212]	@ (8007518 <USBD_CDC_Init+0x23c>)
 8007442:	781b      	ldrb	r3, [r3, #0]
 8007444:	f003 020f 	and.w	r2, r3, #15
 8007448:	6879      	ldr	r1, [r7, #4]
 800744a:	4613      	mov	r3, r2
 800744c:	009b      	lsls	r3, r3, #2
 800744e:	4413      	add	r3, r2
 8007450:	009b      	lsls	r3, r3, #2
 8007452:	440b      	add	r3, r1
 8007454:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007458:	2201      	movs	r2, #1
 800745a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800745c:	4b2f      	ldr	r3, [pc, #188]	@ (800751c <USBD_CDC_Init+0x240>)
 800745e:	781b      	ldrb	r3, [r3, #0]
 8007460:	f003 020f 	and.w	r2, r3, #15
 8007464:	6879      	ldr	r1, [r7, #4]
 8007466:	4613      	mov	r3, r2
 8007468:	009b      	lsls	r3, r3, #2
 800746a:	4413      	add	r3, r2
 800746c:	009b      	lsls	r3, r3, #2
 800746e:	440b      	add	r3, r1
 8007470:	3326      	adds	r3, #38	@ 0x26
 8007472:	2210      	movs	r2, #16
 8007474:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007476:	4b29      	ldr	r3, [pc, #164]	@ (800751c <USBD_CDC_Init+0x240>)
 8007478:	7819      	ldrb	r1, [r3, #0]
 800747a:	2308      	movs	r3, #8
 800747c:	2203      	movs	r2, #3
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f001 fd7d 	bl	8008f7e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007484:	4b25      	ldr	r3, [pc, #148]	@ (800751c <USBD_CDC_Init+0x240>)
 8007486:	781b      	ldrb	r3, [r3, #0]
 8007488:	f003 020f 	and.w	r2, r3, #15
 800748c:	6879      	ldr	r1, [r7, #4]
 800748e:	4613      	mov	r3, r2
 8007490:	009b      	lsls	r3, r3, #2
 8007492:	4413      	add	r3, r2
 8007494:	009b      	lsls	r3, r3, #2
 8007496:	440b      	add	r3, r1
 8007498:	3324      	adds	r3, #36	@ 0x24
 800749a:	2201      	movs	r2, #1
 800749c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2200      	movs	r2, #0
 80074a2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80074ac:	687a      	ldr	r2, [r7, #4]
 80074ae:	33b2      	adds	r3, #178	@ 0xb2
 80074b0:	009b      	lsls	r3, r3, #2
 80074b2:	4413      	add	r3, r2
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2200      	movs	r2, #0
 80074be:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2200      	movs	r2, #0
 80074c6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d101      	bne.n	80074d8 <USBD_CDC_Init+0x1fc>
  {
    return (uint8_t)USBD_EMEM;
 80074d4:	2302      	movs	r3, #2
 80074d6:	e018      	b.n	800750a <USBD_CDC_Init+0x22e>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	7c1b      	ldrb	r3, [r3, #16]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d10a      	bne.n	80074f6 <USBD_CDC_Init+0x21a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80074e0:	4b0d      	ldr	r3, [pc, #52]	@ (8007518 <USBD_CDC_Init+0x23c>)
 80074e2:	7819      	ldrb	r1, [r3, #0]
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80074ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f001 fe10 	bl	8009114 <USBD_LL_PrepareReceive>
 80074f4:	e008      	b.n	8007508 <USBD_CDC_Init+0x22c>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80074f6:	4b08      	ldr	r3, [pc, #32]	@ (8007518 <USBD_CDC_Init+0x23c>)
 80074f8:	7819      	ldrb	r1, [r3, #0]
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007500:	2340      	movs	r3, #64	@ 0x40
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f001 fe06 	bl	8009114 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007508:	2300      	movs	r3, #0
}
 800750a:	4618      	mov	r0, r3
 800750c:	3710      	adds	r7, #16
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}
 8007512:	bf00      	nop
 8007514:	20000048 	.word	0x20000048
 8007518:	20000049 	.word	0x20000049
 800751c:	2000004a 	.word	0x2000004a

08007520 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b082      	sub	sp, #8
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	460b      	mov	r3, r1
 800752a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);


#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this CDC class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007532:	b2db      	uxtb	r3, r3
 8007534:	2202      	movs	r2, #2
 8007536:	2180      	movs	r1, #128	@ 0x80
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f002 fac5 	bl	8009ac8 <USBD_CoreGetEPAdd>
 800753e:	4603      	mov	r3, r0
 8007540:	461a      	mov	r2, r3
 8007542:	4b4a      	ldr	r3, [pc, #296]	@ (800766c <USBD_CDC_DeInit+0x14c>)
 8007544:	701a      	strb	r2, [r3, #0]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800754c:	b2db      	uxtb	r3, r3
 800754e:	2202      	movs	r2, #2
 8007550:	2100      	movs	r1, #0
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f002 fab8 	bl	8009ac8 <USBD_CoreGetEPAdd>
 8007558:	4603      	mov	r3, r0
 800755a:	461a      	mov	r2, r3
 800755c:	4b44      	ldr	r3, [pc, #272]	@ (8007670 <USBD_CDC_DeInit+0x150>)
 800755e:	701a      	strb	r2, [r3, #0]
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007566:	b2db      	uxtb	r3, r3
 8007568:	2203      	movs	r2, #3
 800756a:	2180      	movs	r1, #128	@ 0x80
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f002 faab 	bl	8009ac8 <USBD_CoreGetEPAdd>
 8007572:	4603      	mov	r3, r0
 8007574:	461a      	mov	r2, r3
 8007576:	4b3f      	ldr	r3, [pc, #252]	@ (8007674 <USBD_CDC_DeInit+0x154>)
 8007578:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800757a:	4b3c      	ldr	r3, [pc, #240]	@ (800766c <USBD_CDC_DeInit+0x14c>)
 800757c:	781b      	ldrb	r3, [r3, #0]
 800757e:	4619      	mov	r1, r3
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f001 fd1c 	bl	8008fbe <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007586:	4b39      	ldr	r3, [pc, #228]	@ (800766c <USBD_CDC_DeInit+0x14c>)
 8007588:	781b      	ldrb	r3, [r3, #0]
 800758a:	f003 020f 	and.w	r2, r3, #15
 800758e:	6879      	ldr	r1, [r7, #4]
 8007590:	4613      	mov	r3, r2
 8007592:	009b      	lsls	r3, r3, #2
 8007594:	4413      	add	r3, r2
 8007596:	009b      	lsls	r3, r3, #2
 8007598:	440b      	add	r3, r1
 800759a:	3324      	adds	r3, #36	@ 0x24
 800759c:	2200      	movs	r2, #0
 800759e:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80075a0:	4b33      	ldr	r3, [pc, #204]	@ (8007670 <USBD_CDC_DeInit+0x150>)
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	4619      	mov	r1, r3
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f001 fd09 	bl	8008fbe <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80075ac:	4b30      	ldr	r3, [pc, #192]	@ (8007670 <USBD_CDC_DeInit+0x150>)
 80075ae:	781b      	ldrb	r3, [r3, #0]
 80075b0:	f003 020f 	and.w	r2, r3, #15
 80075b4:	6879      	ldr	r1, [r7, #4]
 80075b6:	4613      	mov	r3, r2
 80075b8:	009b      	lsls	r3, r3, #2
 80075ba:	4413      	add	r3, r2
 80075bc:	009b      	lsls	r3, r3, #2
 80075be:	440b      	add	r3, r1
 80075c0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80075c4:	2200      	movs	r2, #0
 80075c6:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80075c8:	4b2a      	ldr	r3, [pc, #168]	@ (8007674 <USBD_CDC_DeInit+0x154>)
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	4619      	mov	r1, r3
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f001 fcf5 	bl	8008fbe <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80075d4:	4b27      	ldr	r3, [pc, #156]	@ (8007674 <USBD_CDC_DeInit+0x154>)
 80075d6:	781b      	ldrb	r3, [r3, #0]
 80075d8:	f003 020f 	and.w	r2, r3, #15
 80075dc:	6879      	ldr	r1, [r7, #4]
 80075de:	4613      	mov	r3, r2
 80075e0:	009b      	lsls	r3, r3, #2
 80075e2:	4413      	add	r3, r2
 80075e4:	009b      	lsls	r3, r3, #2
 80075e6:	440b      	add	r3, r1
 80075e8:	3324      	adds	r3, #36	@ 0x24
 80075ea:	2200      	movs	r2, #0
 80075ec:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80075ee:	4b21      	ldr	r3, [pc, #132]	@ (8007674 <USBD_CDC_DeInit+0x154>)
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	f003 020f 	and.w	r2, r3, #15
 80075f6:	6879      	ldr	r1, [r7, #4]
 80075f8:	4613      	mov	r3, r2
 80075fa:	009b      	lsls	r3, r3, #2
 80075fc:	4413      	add	r3, r2
 80075fe:	009b      	lsls	r3, r3, #2
 8007600:	440b      	add	r3, r1
 8007602:	3326      	adds	r3, #38	@ 0x26
 8007604:	2200      	movs	r2, #0
 8007606:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800760e:	687a      	ldr	r2, [r7, #4]
 8007610:	33b0      	adds	r3, #176	@ 0xb0
 8007612:	009b      	lsls	r3, r3, #2
 8007614:	4413      	add	r3, r2
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d021      	beq.n	8007660 <USBD_CDC_DeInit+0x140>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	33b2      	adds	r3, #178	@ 0xb2
 8007626:	009b      	lsls	r3, r3, #2
 8007628:	4413      	add	r3, r2
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007636:	687a      	ldr	r2, [r7, #4]
 8007638:	33b0      	adds	r3, #176	@ 0xb0
 800763a:	009b      	lsls	r3, r3, #2
 800763c:	4413      	add	r3, r2
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	4618      	mov	r0, r3
 8007642:	f001 fda3 	bl	800918c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800764c:	687a      	ldr	r2, [r7, #4]
 800764e:	33b0      	adds	r3, #176	@ 0xb0
 8007650:	009b      	lsls	r3, r3, #2
 8007652:	4413      	add	r3, r2
 8007654:	2200      	movs	r2, #0
 8007656:	605a      	str	r2, [r3, #4]
    pdev->pClassData = NULL;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2200      	movs	r2, #0
 800765c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  }

  return (uint8_t)USBD_OK;
 8007660:	2300      	movs	r3, #0
}
 8007662:	4618      	mov	r0, r3
 8007664:	3708      	adds	r7, #8
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}
 800766a:	bf00      	nop
 800766c:	20000048 	.word	0x20000048
 8007670:	20000049 	.word	0x20000049
 8007674:	2000004a 	.word	0x2000004a

08007678 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b086      	sub	sp, #24
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007688:	687a      	ldr	r2, [r7, #4]
 800768a:	33b0      	adds	r3, #176	@ 0xb0
 800768c:	009b      	lsls	r3, r3, #2
 800768e:	4413      	add	r3, r2
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007694:	2300      	movs	r3, #0
 8007696:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007698:	2300      	movs	r3, #0
 800769a:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800769c:	2300      	movs	r3, #0
 800769e:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d101      	bne.n	80076aa <USBD_CDC_Setup+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80076a6:	2303      	movs	r3, #3
 80076a8:	e0c0      	b.n	800782c <USBD_CDC_Setup+0x1b4>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	781b      	ldrb	r3, [r3, #0]
 80076ae:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d050      	beq.n	8007758 <USBD_CDC_Setup+0xe0>
 80076b6:	2b20      	cmp	r3, #32
 80076b8:	f040 80b0 	bne.w	800781c <USBD_CDC_Setup+0x1a4>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	88db      	ldrh	r3, [r3, #6]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d03a      	beq.n	800773a <USBD_CDC_Setup+0xc2>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	781b      	ldrb	r3, [r3, #0]
 80076c8:	b25b      	sxtb	r3, r3
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	da1b      	bge.n	8007706 <USBD_CDC_Setup+0x8e>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80076d4:	687a      	ldr	r2, [r7, #4]
 80076d6:	33b2      	adds	r3, #178	@ 0xb2
 80076d8:	009b      	lsls	r3, r3, #2
 80076da:	4413      	add	r3, r2
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	689b      	ldr	r3, [r3, #8]
 80076e0:	683a      	ldr	r2, [r7, #0]
 80076e2:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80076e4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80076e6:	683a      	ldr	r2, [r7, #0]
 80076e8:	88d2      	ldrh	r2, [r2, #6]
 80076ea:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	88db      	ldrh	r3, [r3, #6]
 80076f0:	2b07      	cmp	r3, #7
 80076f2:	bf28      	it	cs
 80076f4:	2307      	movcs	r3, #7
 80076f6:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	89fa      	ldrh	r2, [r7, #14]
 80076fc:	4619      	mov	r1, r3
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f003 f9e1 	bl	800aac6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007704:	e091      	b.n	800782a <USBD_CDC_Setup+0x1b2>
          hcdc->CmdOpCode = req->bRequest;
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	785a      	ldrb	r2, [r3, #1]
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	88db      	ldrh	r3, [r3, #6]
 8007714:	2b3f      	cmp	r3, #63	@ 0x3f
 8007716:	d803      	bhi.n	8007720 <USBD_CDC_Setup+0xa8>
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	88db      	ldrh	r3, [r3, #6]
 800771c:	b2da      	uxtb	r2, r3
 800771e:	e000      	b.n	8007722 <USBD_CDC_Setup+0xaa>
 8007720:	2240      	movs	r2, #64	@ 0x40
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007728:	6939      	ldr	r1, [r7, #16]
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8007730:	461a      	mov	r2, r3
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f003 f9f3 	bl	800ab1e <USBD_CtlPrepareRx>
      break;
 8007738:	e077      	b.n	800782a <USBD_CDC_Setup+0x1b2>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007740:	687a      	ldr	r2, [r7, #4]
 8007742:	33b2      	adds	r3, #178	@ 0xb2
 8007744:	009b      	lsls	r3, r3, #2
 8007746:	4413      	add	r3, r2
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	689b      	ldr	r3, [r3, #8]
 800774c:	683a      	ldr	r2, [r7, #0]
 800774e:	7850      	ldrb	r0, [r2, #1]
 8007750:	2200      	movs	r2, #0
 8007752:	6839      	ldr	r1, [r7, #0]
 8007754:	4798      	blx	r3
      break;
 8007756:	e068      	b.n	800782a <USBD_CDC_Setup+0x1b2>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	785b      	ldrb	r3, [r3, #1]
 800775c:	2b0b      	cmp	r3, #11
 800775e:	d852      	bhi.n	8007806 <USBD_CDC_Setup+0x18e>
 8007760:	a201      	add	r2, pc, #4	@ (adr r2, 8007768 <USBD_CDC_Setup+0xf0>)
 8007762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007766:	bf00      	nop
 8007768:	08007799 	.word	0x08007799
 800776c:	08007815 	.word	0x08007815
 8007770:	08007807 	.word	0x08007807
 8007774:	08007807 	.word	0x08007807
 8007778:	08007807 	.word	0x08007807
 800777c:	08007807 	.word	0x08007807
 8007780:	08007807 	.word	0x08007807
 8007784:	08007807 	.word	0x08007807
 8007788:	08007807 	.word	0x08007807
 800778c:	08007807 	.word	0x08007807
 8007790:	080077c3 	.word	0x080077c3
 8007794:	080077ed 	.word	0x080077ed
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800779e:	b2db      	uxtb	r3, r3
 80077a0:	2b03      	cmp	r3, #3
 80077a2:	d107      	bne.n	80077b4 <USBD_CDC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80077a4:	f107 030a 	add.w	r3, r7, #10
 80077a8:	2202      	movs	r2, #2
 80077aa:	4619      	mov	r1, r3
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f003 f98a 	bl	800aac6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80077b2:	e032      	b.n	800781a <USBD_CDC_Setup+0x1a2>
            USBD_CtlError(pdev, req);
 80077b4:	6839      	ldr	r1, [r7, #0]
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f003 f805 	bl	800a7c6 <USBD_CtlError>
            ret = USBD_FAIL;
 80077bc:	2303      	movs	r3, #3
 80077be:	75fb      	strb	r3, [r7, #23]
          break;
 80077c0:	e02b      	b.n	800781a <USBD_CDC_Setup+0x1a2>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077c8:	b2db      	uxtb	r3, r3
 80077ca:	2b03      	cmp	r3, #3
 80077cc:	d107      	bne.n	80077de <USBD_CDC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80077ce:	f107 030d 	add.w	r3, r7, #13
 80077d2:	2201      	movs	r2, #1
 80077d4:	4619      	mov	r1, r3
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f003 f975 	bl	800aac6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80077dc:	e01d      	b.n	800781a <USBD_CDC_Setup+0x1a2>
            USBD_CtlError(pdev, req);
 80077de:	6839      	ldr	r1, [r7, #0]
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f002 fff0 	bl	800a7c6 <USBD_CtlError>
            ret = USBD_FAIL;
 80077e6:	2303      	movs	r3, #3
 80077e8:	75fb      	strb	r3, [r7, #23]
          break;
 80077ea:	e016      	b.n	800781a <USBD_CDC_Setup+0x1a2>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077f2:	b2db      	uxtb	r3, r3
 80077f4:	2b03      	cmp	r3, #3
 80077f6:	d00f      	beq.n	8007818 <USBD_CDC_Setup+0x1a0>
          {
            USBD_CtlError(pdev, req);
 80077f8:	6839      	ldr	r1, [r7, #0]
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f002 ffe3 	bl	800a7c6 <USBD_CtlError>
            ret = USBD_FAIL;
 8007800:	2303      	movs	r3, #3
 8007802:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007804:	e008      	b.n	8007818 <USBD_CDC_Setup+0x1a0>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007806:	6839      	ldr	r1, [r7, #0]
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f002 ffdc 	bl	800a7c6 <USBD_CtlError>
          ret = USBD_FAIL;
 800780e:	2303      	movs	r3, #3
 8007810:	75fb      	strb	r3, [r7, #23]
          break;
 8007812:	e002      	b.n	800781a <USBD_CDC_Setup+0x1a2>
          break;
 8007814:	bf00      	nop
 8007816:	e008      	b.n	800782a <USBD_CDC_Setup+0x1b2>
          break;
 8007818:	bf00      	nop
      }
      break;
 800781a:	e006      	b.n	800782a <USBD_CDC_Setup+0x1b2>

    default:
      USBD_CtlError(pdev, req);
 800781c:	6839      	ldr	r1, [r7, #0]
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f002 ffd1 	bl	800a7c6 <USBD_CtlError>
      ret = USBD_FAIL;
 8007824:	2303      	movs	r3, #3
 8007826:	75fb      	strb	r3, [r7, #23]
      break;
 8007828:	bf00      	nop
  }

  return (uint8_t)ret;
 800782a:	7dfb      	ldrb	r3, [r7, #23]
}
 800782c:	4618      	mov	r0, r3
 800782e:	3718      	adds	r7, #24
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}

08007834 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b084      	sub	sp, #16
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	460b      	mov	r3, r1
 800783e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007846:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800784e:	687a      	ldr	r2, [r7, #4]
 8007850:	33b0      	adds	r3, #176	@ 0xb0
 8007852:	009b      	lsls	r3, r3, #2
 8007854:	4413      	add	r3, r2
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d101      	bne.n	8007860 <USBD_CDC_DataIn+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800785c:	2303      	movs	r3, #3
 800785e:	e066      	b.n	800792e <USBD_CDC_DataIn+0xfa>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007866:	687a      	ldr	r2, [r7, #4]
 8007868:	33b0      	adds	r3, #176	@ 0xb0
 800786a:	009b      	lsls	r3, r3, #2
 800786c:	4413      	add	r3, r2
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007872:	78fb      	ldrb	r3, [r7, #3]
 8007874:	f003 020f 	and.w	r2, r3, #15
 8007878:	6879      	ldr	r1, [r7, #4]
 800787a:	4613      	mov	r3, r2
 800787c:	009b      	lsls	r3, r3, #2
 800787e:	4413      	add	r3, r2
 8007880:	009b      	lsls	r3, r3, #2
 8007882:	440b      	add	r3, r1
 8007884:	3318      	adds	r3, #24
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d02f      	beq.n	80078ec <USBD_CDC_DataIn+0xb8>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800788c:	78fb      	ldrb	r3, [r7, #3]
 800788e:	f003 020f 	and.w	r2, r3, #15
 8007892:	6879      	ldr	r1, [r7, #4]
 8007894:	4613      	mov	r3, r2
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	4413      	add	r3, r2
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	440b      	add	r3, r1
 800789e:	3318      	adds	r3, #24
 80078a0:	681a      	ldr	r2, [r3, #0]
 80078a2:	78fb      	ldrb	r3, [r7, #3]
 80078a4:	f003 010f 	and.w	r1, r3, #15
 80078a8:	68f8      	ldr	r0, [r7, #12]
 80078aa:	460b      	mov	r3, r1
 80078ac:	009b      	lsls	r3, r3, #2
 80078ae:	440b      	add	r3, r1
 80078b0:	00db      	lsls	r3, r3, #3
 80078b2:	4403      	add	r3, r0
 80078b4:	3324      	adds	r3, #36	@ 0x24
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	fbb2 f1f3 	udiv	r1, r2, r3
 80078bc:	fb01 f303 	mul.w	r3, r1, r3
 80078c0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d112      	bne.n	80078ec <USBD_CDC_DataIn+0xb8>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80078c6:	78fb      	ldrb	r3, [r7, #3]
 80078c8:	f003 020f 	and.w	r2, r3, #15
 80078cc:	6879      	ldr	r1, [r7, #4]
 80078ce:	4613      	mov	r3, r2
 80078d0:	009b      	lsls	r3, r3, #2
 80078d2:	4413      	add	r3, r2
 80078d4:	009b      	lsls	r3, r3, #2
 80078d6:	440b      	add	r3, r1
 80078d8:	3318      	adds	r3, #24
 80078da:	2200      	movs	r2, #0
 80078dc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80078de:	78f9      	ldrb	r1, [r7, #3]
 80078e0:	2300      	movs	r3, #0
 80078e2:	2200      	movs	r2, #0
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f001 fbfa 	bl	80090de <USBD_LL_Transmit>
 80078ea:	e01f      	b.n	800792c <USBD_CDC_DataIn+0xf8>
  }
  else
  {
    hcdc->TxState = 0U;
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	2200      	movs	r2, #0
 80078f0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80078fa:	687a      	ldr	r2, [r7, #4]
 80078fc:	33b2      	adds	r3, #178	@ 0xb2
 80078fe:	009b      	lsls	r3, r3, #2
 8007900:	4413      	add	r3, r2
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	691b      	ldr	r3, [r3, #16]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d010      	beq.n	800792c <USBD_CDC_DataIn+0xf8>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007910:	687a      	ldr	r2, [r7, #4]
 8007912:	33b2      	adds	r3, #178	@ 0xb2
 8007914:	009b      	lsls	r3, r3, #2
 8007916:	4413      	add	r3, r2
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	691b      	ldr	r3, [r3, #16]
 800791c:	68ba      	ldr	r2, [r7, #8]
 800791e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8007922:	68ba      	ldr	r2, [r7, #8]
 8007924:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007928:	78fa      	ldrb	r2, [r7, #3]
 800792a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800792c:	2300      	movs	r3, #0
}
 800792e:	4618      	mov	r0, r3
 8007930:	3710      	adds	r7, #16
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}

08007936 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007936:	b580      	push	{r7, lr}
 8007938:	b084      	sub	sp, #16
 800793a:	af00      	add	r7, sp, #0
 800793c:	6078      	str	r0, [r7, #4]
 800793e:	460b      	mov	r3, r1
 8007940:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007948:	687a      	ldr	r2, [r7, #4]
 800794a:	33b0      	adds	r3, #176	@ 0xb0
 800794c:	009b      	lsls	r3, r3, #2
 800794e:	4413      	add	r3, r2
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800795a:	687a      	ldr	r2, [r7, #4]
 800795c:	33b0      	adds	r3, #176	@ 0xb0
 800795e:	009b      	lsls	r3, r3, #2
 8007960:	4413      	add	r3, r2
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d101      	bne.n	800796c <USBD_CDC_DataOut+0x36>
  {
    return (uint8_t)USBD_FAIL;
 8007968:	2303      	movs	r3, #3
 800796a:	e01a      	b.n	80079a2 <USBD_CDC_DataOut+0x6c>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800796c:	78fb      	ldrb	r3, [r7, #3]
 800796e:	4619      	mov	r1, r3
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f001 fbea 	bl	800914a <USBD_LL_GetRxDataSize>
 8007976:	4602      	mov	r2, r0
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007984:	687a      	ldr	r2, [r7, #4]
 8007986:	33b2      	adds	r3, #178	@ 0xb2
 8007988:	009b      	lsls	r3, r3, #2
 800798a:	4413      	add	r3, r2
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	68db      	ldr	r3, [r3, #12]
 8007990:	68fa      	ldr	r2, [r7, #12]
 8007992:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007996:	68fa      	ldr	r2, [r7, #12]
 8007998:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800799c:	4611      	mov	r1, r2
 800799e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80079a0:	2300      	movs	r3, #0
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3710      	adds	r7, #16
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}

080079aa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80079aa:	b580      	push	{r7, lr}
 80079ac:	b084      	sub	sp, #16
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80079b8:	687a      	ldr	r2, [r7, #4]
 80079ba:	33b0      	adds	r3, #176	@ 0xb0
 80079bc:	009b      	lsls	r3, r3, #2
 80079be:	4413      	add	r3, r2
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d101      	bne.n	80079ce <USBD_CDC_EP0_RxReady+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80079ca:	2303      	movs	r3, #3
 80079cc:	e024      	b.n	8007a18 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80079d4:	687a      	ldr	r2, [r7, #4]
 80079d6:	33b2      	adds	r3, #178	@ 0xb2
 80079d8:	009b      	lsls	r3, r3, #2
 80079da:	4413      	add	r3, r2
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d019      	beq.n	8007a16 <USBD_CDC_EP0_RxReady+0x6c>
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80079e8:	2bff      	cmp	r3, #255	@ 0xff
 80079ea:	d014      	beq.n	8007a16 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80079f2:	687a      	ldr	r2, [r7, #4]
 80079f4:	33b2      	adds	r3, #178	@ 0xb2
 80079f6:	009b      	lsls	r3, r3, #2
 80079f8:	4413      	add	r3, r2
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	689b      	ldr	r3, [r3, #8]
 80079fe:	68fa      	ldr	r2, [r7, #12]
 8007a00:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8007a04:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007a06:	68fa      	ldr	r2, [r7, #12]
 8007a08:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007a0c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	22ff      	movs	r2, #255	@ 0xff
 8007a12:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007a16:	2300      	movs	r3, #0
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3710      	adds	r7, #16
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b083      	sub	sp, #12
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d101      	bne.n	8007a34 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007a30:	2303      	movs	r3, #3
 8007a32:	e009      	b.n	8007a48 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007a3a:	687a      	ldr	r2, [r7, #4]
 8007a3c:	33b2      	adds	r3, #178	@ 0xb2
 8007a3e:	009b      	lsls	r3, r3, #2
 8007a40:	4413      	add	r3, r2
 8007a42:	683a      	ldr	r2, [r7, #0]
 8007a44:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007a46:	2300      	movs	r3, #0
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	370c      	adds	r7, #12
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr

08007a54 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
#ifdef USE_USBD_COMPOSITE
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length, uint8_t ClassId)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b087      	sub	sp, #28
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	60f8      	str	r0, [r7, #12]
 8007a5c:	60b9      	str	r1, [r7, #8]
 8007a5e:	607a      	str	r2, [r7, #4]
 8007a60:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
 8007a62:	78fb      	ldrb	r3, [r7, #3]
 8007a64:	68fa      	ldr	r2, [r7, #12]
 8007a66:	33b0      	adds	r3, #176	@ 0xb0
 8007a68:	009b      	lsls	r3, r3, #2
 8007a6a:	4413      	add	r3, r2
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	617b      	str	r3, [r7, #20]
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d101      	bne.n	8007a7a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007a76:	2303      	movs	r3, #3
 8007a78:	e008      	b.n	8007a8c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	68ba      	ldr	r2, [r7, #8]
 8007a7e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	687a      	ldr	r2, [r7, #4]
 8007a86:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8007a8a:	2300      	movs	r3, #0
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	371c      	adds	r7, #28
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr

08007a98 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b085      	sub	sp, #20
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007aa8:	687a      	ldr	r2, [r7, #4]
 8007aaa:	33b0      	adds	r3, #176	@ 0xb0
 8007aac:	009b      	lsls	r3, r3, #2
 8007aae:	4413      	add	r3, r2
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d101      	bne.n	8007abe <USBD_CDC_SetRxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007aba:	2303      	movs	r3, #3
 8007abc:	e004      	b.n	8007ac8 <USBD_CDC_SetRxBuffer+0x30>
  }

  hcdc->RxBuffer = pbuff;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	683a      	ldr	r2, [r7, #0]
 8007ac2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8007ac6:	2300      	movs	r3, #0
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3714      	adds	r7, #20
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr

08007ad4 <USBD_CDC_TransmitPacket>:
  * @param  ClassId: The Class ID
  * @retval status
  */
#ifdef USE_USBD_COMPOSITE
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b084      	sub	sp, #16
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	460b      	mov	r3, r1
 8007ade:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
 8007ae0:	78fb      	ldrb	r3, [r7, #3]
 8007ae2:	687a      	ldr	r2, [r7, #4]
 8007ae4:	33b0      	adds	r3, #176	@ 0xb0
 8007ae6:	009b      	lsls	r3, r3, #2
 8007ae8:	4413      	add	r3, r2
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	60bb      	str	r3, [r7, #8]
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8007aee:	2301      	movs	r3, #1
 8007af0:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
 8007af2:	78fb      	ldrb	r3, [r7, #3]
 8007af4:	2202      	movs	r2, #2
 8007af6:	2180      	movs	r1, #128	@ 0x80
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f001 ffe5 	bl	8009ac8 <USBD_CoreGetEPAdd>
 8007afe:	4603      	mov	r3, r0
 8007b00:	461a      	mov	r2, r3
 8007b02:	4b18      	ldr	r3, [pc, #96]	@ (8007b64 <USBD_CDC_TransmitPacket+0x90>)
 8007b04:	701a      	strb	r2, [r3, #0]
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d101      	bne.n	8007b10 <USBD_CDC_TransmitPacket+0x3c>
  {
    return (uint8_t)USBD_FAIL;
 8007b0c:	2303      	movs	r3, #3
 8007b0e:	e025      	b.n	8007b5c <USBD_CDC_TransmitPacket+0x88>
  }

  if (hcdc->TxState == 0U)
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d11f      	bne.n	8007b5a <USBD_CDC_TransmitPacket+0x86>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	2201      	movs	r2, #1
 8007b1e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007b22:	4b10      	ldr	r3, [pc, #64]	@ (8007b64 <USBD_CDC_TransmitPacket+0x90>)
 8007b24:	781b      	ldrb	r3, [r3, #0]
 8007b26:	f003 020f 	and.w	r2, r3, #15
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	4613      	mov	r3, r2
 8007b34:	009b      	lsls	r3, r3, #2
 8007b36:	4413      	add	r3, r2
 8007b38:	009b      	lsls	r3, r3, #2
 8007b3a:	4403      	add	r3, r0
 8007b3c:	3318      	adds	r3, #24
 8007b3e:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007b40:	4b08      	ldr	r3, [pc, #32]	@ (8007b64 <USBD_CDC_TransmitPacket+0x90>)
 8007b42:	7819      	ldrb	r1, [r3, #0]
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f001 fac4 	bl	80090de <USBD_LL_Transmit>

    ret = USBD_OK;
 8007b56:	2300      	movs	r3, #0
 8007b58:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3710      	adds	r7, #16
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}
 8007b64:	20000048 	.word	0x20000048

08007b68 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b084      	sub	sp, #16
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007b76:	687a      	ldr	r2, [r7, #4]
 8007b78:	33b0      	adds	r3, #176	@ 0xb0
 8007b7a:	009b      	lsls	r3, r3, #2
 8007b7c:	4413      	add	r3, r2
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	60fb      	str	r3, [r7, #12]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007b88:	b2db      	uxtb	r3, r3
 8007b8a:	2202      	movs	r2, #2
 8007b8c:	2100      	movs	r1, #0
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f001 ff9a 	bl	8009ac8 <USBD_CoreGetEPAdd>
 8007b94:	4603      	mov	r3, r0
 8007b96:	461a      	mov	r2, r3
 8007b98:	4b15      	ldr	r3, [pc, #84]	@ (8007bf0 <USBD_CDC_ReceivePacket+0x88>)
 8007b9a:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007ba2:	687a      	ldr	r2, [r7, #4]
 8007ba4:	33b0      	adds	r3, #176	@ 0xb0
 8007ba6:	009b      	lsls	r3, r3, #2
 8007ba8:	4413      	add	r3, r2
 8007baa:	685b      	ldr	r3, [r3, #4]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d101      	bne.n	8007bb4 <USBD_CDC_ReceivePacket+0x4c>
  {
    return (uint8_t)USBD_FAIL;
 8007bb0:	2303      	movs	r3, #3
 8007bb2:	e018      	b.n	8007be6 <USBD_CDC_ReceivePacket+0x7e>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	7c1b      	ldrb	r3, [r3, #16]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d10a      	bne.n	8007bd2 <USBD_CDC_ReceivePacket+0x6a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8007bf0 <USBD_CDC_ReceivePacket+0x88>)
 8007bbe:	7819      	ldrb	r1, [r3, #0]
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007bc6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f001 faa2 	bl	8009114 <USBD_LL_PrepareReceive>
 8007bd0:	e008      	b.n	8007be4 <USBD_CDC_ReceivePacket+0x7c>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007bd2:	4b07      	ldr	r3, [pc, #28]	@ (8007bf0 <USBD_CDC_ReceivePacket+0x88>)
 8007bd4:	7819      	ldrb	r1, [r3, #0]
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007bdc:	2340      	movs	r3, #64	@ 0x40
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f001 fa98 	bl	8009114 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007be4:	2300      	movs	r3, #0
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3710      	adds	r7, #16
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}
 8007bee:	bf00      	nop
 8007bf0:	20000049 	.word	0x20000049

08007bf4 <TEMPLATE_Init>:
  *         Initializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Init(void)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	af00      	add	r7, sp, #0
	hUsbDeviceFS.classId = CDC_InstID;
 8007bf8:	4b09      	ldr	r3, [pc, #36]	@ (8007c20 <TEMPLATE_Init+0x2c>)
 8007bfa:	781b      	ldrb	r3, [r3, #0]
 8007bfc:	461a      	mov	r2, r3
 8007bfe:	4b09      	ldr	r3, [pc, #36]	@ (8007c24 <TEMPLATE_Init+0x30>)
 8007c00:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBuffer, sizeof("MY CDC is Working!\r\n"), CDC_InstID);
 8007c04:	4b06      	ldr	r3, [pc, #24]	@ (8007c20 <TEMPLATE_Init+0x2c>)
 8007c06:	781b      	ldrb	r3, [r3, #0]
 8007c08:	2215      	movs	r2, #21
 8007c0a:	4907      	ldr	r1, [pc, #28]	@ (8007c28 <TEMPLATE_Init+0x34>)
 8007c0c:	4805      	ldr	r0, [pc, #20]	@ (8007c24 <TEMPLATE_Init+0x30>)
 8007c0e:	f7ff ff21 	bl	8007a54 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBuffer);
 8007c12:	4906      	ldr	r1, [pc, #24]	@ (8007c2c <TEMPLATE_Init+0x38>)
 8007c14:	4803      	ldr	r0, [pc, #12]	@ (8007c24 <TEMPLATE_Init+0x30>)
 8007c16:	f7ff ff3f 	bl	8007a98 <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 8007c1a:	2300      	movs	r3, #0
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	bd80      	pop	{r7, pc}
 8007c20:	200008d1 	.word	0x200008d1
 8007c24:	2000058c 	.word	0x2000058c
 8007c28:	20000068 	.word	0x20000068
 8007c2c:	200008dc 	.word	0x200008dc

08007c30 <TEMPLATE_DeInit>:
  *         DeInitializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_DeInit(void)
{
 8007c30:	b480      	push	{r7}
 8007c32:	af00      	add	r7, sp, #0
  /*
     Add your deinitialization code here
  */
  return (0);
 8007c34:	2300      	movs	r3, #0
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3e:	4770      	bx	lr

08007c40 <TEMPLATE_Control>:
  * @param  Buf: Buffer containing command data (request parameters)
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Control(uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b083      	sub	sp, #12
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	4603      	mov	r3, r0
 8007c48:	6039      	str	r1, [r7, #0]
 8007c4a:	71fb      	strb	r3, [r7, #7]
 8007c4c:	4613      	mov	r3, r2
 8007c4e:	80bb      	strh	r3, [r7, #4]
  UNUSED(length);

  switch (cmd)
 8007c50:	79fb      	ldrb	r3, [r7, #7]
 8007c52:	2b23      	cmp	r3, #35	@ 0x23
 8007c54:	f200 8098 	bhi.w	8007d88 <TEMPLATE_Control+0x148>
 8007c58:	a201      	add	r2, pc, #4	@ (adr r2, 8007c60 <TEMPLATE_Control+0x20>)
 8007c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c5e:	bf00      	nop
 8007c60:	08007d89 	.word	0x08007d89
 8007c64:	08007d89 	.word	0x08007d89
 8007c68:	08007d89 	.word	0x08007d89
 8007c6c:	08007d89 	.word	0x08007d89
 8007c70:	08007d89 	.word	0x08007d89
 8007c74:	08007d89 	.word	0x08007d89
 8007c78:	08007d89 	.word	0x08007d89
 8007c7c:	08007d89 	.word	0x08007d89
 8007c80:	08007d89 	.word	0x08007d89
 8007c84:	08007d89 	.word	0x08007d89
 8007c88:	08007d89 	.word	0x08007d89
 8007c8c:	08007d89 	.word	0x08007d89
 8007c90:	08007d89 	.word	0x08007d89
 8007c94:	08007d89 	.word	0x08007d89
 8007c98:	08007d89 	.word	0x08007d89
 8007c9c:	08007d89 	.word	0x08007d89
 8007ca0:	08007d89 	.word	0x08007d89
 8007ca4:	08007d89 	.word	0x08007d89
 8007ca8:	08007d89 	.word	0x08007d89
 8007cac:	08007d89 	.word	0x08007d89
 8007cb0:	08007d89 	.word	0x08007d89
 8007cb4:	08007d89 	.word	0x08007d89
 8007cb8:	08007d89 	.word	0x08007d89
 8007cbc:	08007d89 	.word	0x08007d89
 8007cc0:	08007d89 	.word	0x08007d89
 8007cc4:	08007d89 	.word	0x08007d89
 8007cc8:	08007d89 	.word	0x08007d89
 8007ccc:	08007d89 	.word	0x08007d89
 8007cd0:	08007d89 	.word	0x08007d89
 8007cd4:	08007d89 	.word	0x08007d89
 8007cd8:	08007d89 	.word	0x08007d89
 8007cdc:	08007d89 	.word	0x08007d89
 8007ce0:	08007cf1 	.word	0x08007cf1
 8007ce4:	08007d35 	.word	0x08007d35
 8007ce8:	08007d89 	.word	0x08007d89
 8007cec:	08007d89 	.word	0x08007d89
    case CDC_CLEAR_COMM_FEATURE:
      /* Add your code here */
      break;

    case CDC_SET_LINE_CODING:
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	781b      	ldrb	r3, [r3, #0]
 8007cf4:	461a      	mov	r2, r3
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	3301      	adds	r3, #1
 8007cfa:	781b      	ldrb	r3, [r3, #0]
 8007cfc:	021b      	lsls	r3, r3, #8
 8007cfe:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	3302      	adds	r3, #2
 8007d04:	781b      	ldrb	r3, [r3, #0]
 8007d06:	041b      	lsls	r3, r3, #16
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 8007d08:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	3303      	adds	r3, #3
 8007d0e:	781b      	ldrb	r3, [r3, #0]
 8007d10:	061b      	lsls	r3, r3, #24
 8007d12:	4313      	orrs	r3, r2
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 8007d14:	461a      	mov	r2, r3
 8007d16:	4b20      	ldr	r3, [pc, #128]	@ (8007d98 <TEMPLATE_Control+0x158>)
 8007d18:	601a      	str	r2, [r3, #0]
      linecoding.format     = pbuf[4];
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	791a      	ldrb	r2, [r3, #4]
 8007d1e:	4b1e      	ldr	r3, [pc, #120]	@ (8007d98 <TEMPLATE_Control+0x158>)
 8007d20:	711a      	strb	r2, [r3, #4]
      linecoding.paritytype = pbuf[5];
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	795a      	ldrb	r2, [r3, #5]
 8007d26:	4b1c      	ldr	r3, [pc, #112]	@ (8007d98 <TEMPLATE_Control+0x158>)
 8007d28:	715a      	strb	r2, [r3, #5]
      linecoding.datatype   = pbuf[6];
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	799a      	ldrb	r2, [r3, #6]
 8007d2e:	4b1a      	ldr	r3, [pc, #104]	@ (8007d98 <TEMPLATE_Control+0x158>)
 8007d30:	719a      	strb	r2, [r3, #6]

      /* Add your code here */
      break;
 8007d32:	e02a      	b.n	8007d8a <TEMPLATE_Control+0x14a>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(linecoding.bitrate);
 8007d34:	4b18      	ldr	r3, [pc, #96]	@ (8007d98 <TEMPLATE_Control+0x158>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	b2da      	uxtb	r2, r3
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(linecoding.bitrate >> 8);
 8007d3e:	4b16      	ldr	r3, [pc, #88]	@ (8007d98 <TEMPLATE_Control+0x158>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	0a1a      	lsrs	r2, r3, #8
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	3301      	adds	r3, #1
 8007d48:	b2d2      	uxtb	r2, r2
 8007d4a:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(linecoding.bitrate >> 16);
 8007d4c:	4b12      	ldr	r3, [pc, #72]	@ (8007d98 <TEMPLATE_Control+0x158>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	0c1a      	lsrs	r2, r3, #16
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	3302      	adds	r3, #2
 8007d56:	b2d2      	uxtb	r2, r2
 8007d58:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(linecoding.bitrate >> 24);
 8007d5a:	4b0f      	ldr	r3, [pc, #60]	@ (8007d98 <TEMPLATE_Control+0x158>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	0e1a      	lsrs	r2, r3, #24
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	3303      	adds	r3, #3
 8007d64:	b2d2      	uxtb	r2, r2
 8007d66:	701a      	strb	r2, [r3, #0]
      pbuf[4] = linecoding.format;
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	3304      	adds	r3, #4
 8007d6c:	4a0a      	ldr	r2, [pc, #40]	@ (8007d98 <TEMPLATE_Control+0x158>)
 8007d6e:	7912      	ldrb	r2, [r2, #4]
 8007d70:	701a      	strb	r2, [r3, #0]
      pbuf[5] = linecoding.paritytype;
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	3305      	adds	r3, #5
 8007d76:	4a08      	ldr	r2, [pc, #32]	@ (8007d98 <TEMPLATE_Control+0x158>)
 8007d78:	7952      	ldrb	r2, [r2, #5]
 8007d7a:	701a      	strb	r2, [r3, #0]
      pbuf[6] = linecoding.datatype;
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	3306      	adds	r3, #6
 8007d80:	4a05      	ldr	r2, [pc, #20]	@ (8007d98 <TEMPLATE_Control+0x158>)
 8007d82:	7992      	ldrb	r2, [r2, #6]
 8007d84:	701a      	strb	r2, [r3, #0]

      /* Add your code here */
      break;
 8007d86:	e000      	b.n	8007d8a <TEMPLATE_Control+0x14a>
    case CDC_SEND_BREAK:
      /* Add your code here */
      break;

    default:
      break;
 8007d88:	bf00      	nop
  }

  return (0);
 8007d8a:	2300      	movs	r3, #0
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	370c      	adds	r7, #12
 8007d90:	46bd      	mov	sp, r7
 8007d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d96:	4770      	bx	lr
 8007d98:	20000060 	.word	0x20000060

08007d9c <TEMPLATE_Receive>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Receive(uint8_t *Buf, uint32_t *Len)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b082      	sub	sp, #8
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
 8007da4:	6039      	str	r1, [r7, #0]
	/* Add your RX code here */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007da6:	6879      	ldr	r1, [r7, #4]
 8007da8:	4805      	ldr	r0, [pc, #20]	@ (8007dc0 <TEMPLATE_Receive+0x24>)
 8007daa:	f7ff fe75 	bl	8007a98 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007dae:	4804      	ldr	r0, [pc, #16]	@ (8007dc0 <TEMPLATE_Receive+0x24>)
 8007db0:	f7ff feda 	bl	8007b68 <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 8007db4:	2300      	movs	r3, #0
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	3708      	adds	r7, #8
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}
 8007dbe:	bf00      	nop
 8007dc0:	2000058c 	.word	0x2000058c

08007dc4 <TEMPLATE_TransmitCplt>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_TransmitCplt(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b085      	sub	sp, #20
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	60f8      	str	r0, [r7, #12]
 8007dcc:	60b9      	str	r1, [r7, #8]
 8007dce:	4613      	mov	r3, r2
 8007dd0:	71fb      	strb	r3, [r7, #7]
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);

  return (0);
 8007dd2:	2300      	movs	r3, #0
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3714      	adds	r7, #20
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr

08007de0 <USBD_CMPSIT_AddClass>:
  */
uint8_t  USBD_CMPSIT_AddClass(USBD_HandleTypeDef *pdev,
                              USBD_ClassTypeDef *pclass,
                              USBD_CompositeClassTypeDef class,
                              uint8_t cfgidx)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b084      	sub	sp, #16
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	60f8      	str	r0, [r7, #12]
 8007de8:	60b9      	str	r1, [r7, #8]
 8007dea:	4611      	mov	r1, r2
 8007dec:	461a      	mov	r2, r3
 8007dee:	460b      	mov	r3, r1
 8007df0:	71fb      	strb	r3, [r7, #7]
 8007df2:	4613      	mov	r3, r2
 8007df4:	71bb      	strb	r3, [r7, #6]
  if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) && (pdev->tclasslist[pdev->classId].Active == 0U))
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d842      	bhi.n	8007e86 <USBD_CMPSIT_AddClass+0xa6>
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007e06:	68fa      	ldr	r2, [r7, #12]
 8007e08:	212c      	movs	r1, #44	@ 0x2c
 8007e0a:	fb01 f303 	mul.w	r3, r1, r3
 8007e0e:	4413      	add	r3, r2
 8007e10:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d135      	bne.n	8007e86 <USBD_CMPSIT_AddClass+0xa6>
  {
    /* Store the class parameters in the global tab */
    pdev->pClass[pdev->classId] = pclass;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	32ae      	adds	r2, #174	@ 0xae
 8007e24:	68b9      	ldr	r1, [r7, #8]
 8007e26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->tclasslist[pdev->classId].ClassId = pdev->classId;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007e30:	68fa      	ldr	r2, [r7, #12]
 8007e32:	f8d2 22e0 	ldr.w	r2, [r2, #736]	@ 0x2e0
 8007e36:	68f9      	ldr	r1, [r7, #12]
 8007e38:	202c      	movs	r0, #44	@ 0x2c
 8007e3a:	fb00 f303 	mul.w	r3, r0, r3
 8007e3e:	440b      	add	r3, r1
 8007e40:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 8007e44:	601a      	str	r2, [r3, #0]
    pdev->tclasslist[pdev->classId].Active = 1U;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007e4c:	68fa      	ldr	r2, [r7, #12]
 8007e4e:	212c      	movs	r1, #44	@ 0x2c
 8007e50:	fb01 f303 	mul.w	r3, r1, r3
 8007e54:	4413      	add	r3, r2
 8007e56:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	601a      	str	r2, [r3, #0]
    pdev->tclasslist[pdev->classId].ClassType = class;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007e64:	68fa      	ldr	r2, [r7, #12]
 8007e66:	212c      	movs	r1, #44	@ 0x2c
 8007e68:	fb01 f303 	mul.w	r3, r1, r3
 8007e6c:	4413      	add	r3, r2
 8007e6e:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 8007e72:	79fa      	ldrb	r2, [r7, #7]
 8007e74:	701a      	strb	r2, [r3, #0]

    /* Call configuration descriptor builder and endpoint configuration builder */
    if (USBD_CMPSIT_AddToConfDesc(pdev) != (uint8_t)USBD_OK)
 8007e76:	68f8      	ldr	r0, [r7, #12]
 8007e78:	f000 f80a 	bl	8007e90 <USBD_CMPSIT_AddToConfDesc>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d001      	beq.n	8007e86 <USBD_CMPSIT_AddClass+0xa6>
    {
      return (uint8_t)USBD_FAIL;
 8007e82:	2303      	movs	r3, #3
 8007e84:	e000      	b.n	8007e88 <USBD_CMPSIT_AddClass+0xa8>
    }
  }

  UNUSED(cfgidx);

  return (uint8_t)USBD_OK;
 8007e86:	2300      	movs	r3, #0
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3710      	adds	r7, #16
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}

08007e90 <USBD_CMPSIT_AddToConfDesc>:
  *         Add a new class to the configuration descriptor
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CMPSIT_AddToConfDesc(USBD_HandleTypeDef *pdev)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b084      	sub	sp, #16
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  uint8_t idxIf = 0U;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	73fb      	strb	r3, [r7, #15]
  uint8_t iEp = 0U;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	73bb      	strb	r3, [r7, #14]

  /* For the first class instance, start building the config descriptor common part */
  if (pdev->classId == 0U)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d105      	bne.n	8007eb6 <USBD_CMPSIT_AddToConfDesc+0x26>
  {
    /* Add configuration and IAD descriptors */
    USBD_CMPSIT_AddConfDesc((uint32_t)pCmpstFSConfDesc, &CurrFSConfDescSz);
 8007eaa:	4b88      	ldr	r3, [pc, #544]	@ (80080cc <USBD_CMPSIT_AddToConfDesc+0x23c>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4988      	ldr	r1, [pc, #544]	@ (80080d0 <USBD_CMPSIT_AddToConfDesc+0x240>)
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f000 f976 	bl	80081a2 <USBD_CMPSIT_AddConfDesc>
#ifdef USE_USB_HS
    USBD_CMPSIT_AddConfDesc((uint32_t)pCmpstHSConfDesc, &CurrHSConfDescSz);
#endif /* USE_USB_HS */
  }

  switch (pdev->tclasslist[pdev->classId].ClassType)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007ebc:	687a      	ldr	r2, [r7, #4]
 8007ebe:	212c      	movs	r1, #44	@ 0x2c
 8007ec0:	fb01 f303 	mul.w	r3, r1, r3
 8007ec4:	4413      	add	r3, r2
 8007ec6:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	2b01      	cmp	r3, #1
 8007ece:	d002      	beq.n	8007ed6 <USBD_CMPSIT_AddToConfDesc+0x46>
 8007ed0:	2b02      	cmp	r3, #2
 8007ed2:	d05b      	beq.n	8007f8c <USBD_CMPSIT_AddToConfDesc+0xfc>
    default:
      UNUSED(idxIf);
      UNUSED(iEp);
      UNUSED(USBD_CMPSIT_FindFreeIFNbr);
      UNUSED(USBD_CMPSIT_AssignEp);
      break;
 8007ed4:	e0f4      	b.n	80080c0 <USBD_CMPSIT_AddToConfDesc+0x230>
      pdev->tclasslist[pdev->classId].CurrPcktSze = HID_EPIN_SIZE;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007edc:	687a      	ldr	r2, [r7, #4]
 8007ede:	212c      	movs	r1, #44	@ 0x2c
 8007ee0:	fb01 f303 	mul.w	r3, r1, r3
 8007ee4:	4413      	add	r3, r2
 8007ee6:	f503 7344 	add.w	r3, r3, #784	@ 0x310
 8007eea:	2204      	movs	r2, #4
 8007eec:	601a      	str	r2, [r3, #0]
      idxIf = USBD_CMPSIT_FindFreeIFNbr(pdev);
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f000 f928 	bl	8008144 <USBD_CMPSIT_FindFreeIFNbr>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	73fb      	strb	r3, [r7, #15]
      pdev->tclasslist[pdev->classId].NumIf = 1U;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007efe:	687a      	ldr	r2, [r7, #4]
 8007f00:	212c      	movs	r1, #44	@ 0x2c
 8007f02:	fb01 f303 	mul.w	r3, r1, r3
 8007f06:	4413      	add	r3, r2
 8007f08:	f503 7342 	add.w	r3, r3, #776	@ 0x308
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	601a      	str	r2, [r3, #0]
      pdev->tclasslist[pdev->classId].Ifs[0] = idxIf;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007f16:	687a      	ldr	r2, [r7, #4]
 8007f18:	212c      	movs	r1, #44	@ 0x2c
 8007f1a:	fb01 f303 	mul.w	r3, r1, r3
 8007f1e:	4413      	add	r3, r2
 8007f20:	f503 7343 	add.w	r3, r3, #780	@ 0x30c
 8007f24:	7bfa      	ldrb	r2, [r7, #15]
 8007f26:	701a      	strb	r2, [r3, #0]
      pdev->tclasslist[pdev->classId].NumEps = 1U; /* EP1_IN */
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007f2e:	687a      	ldr	r2, [r7, #4]
 8007f30:	212c      	movs	r1, #44	@ 0x2c
 8007f32:	fb01 f303 	mul.w	r3, r1, r3
 8007f36:	4413      	add	r3, r2
 8007f38:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 8007f3c:	2201      	movs	r2, #1
 8007f3e:	601a      	str	r2, [r3, #0]
      iEp = pdev->tclasslist[pdev->classId].EpAdd[0];
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007f46:	687a      	ldr	r2, [r7, #4]
 8007f48:	212c      	movs	r1, #44	@ 0x2c
 8007f4a:	fb01 f303 	mul.w	r3, r1, r3
 8007f4e:	4413      	add	r3, r2
 8007f50:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	781b      	ldrb	r3, [r3, #0]
 8007f58:	73bb      	strb	r3, [r7, #14]
      USBD_CMPSIT_AssignEp(pdev, iEp, USBD_EP_TYPE_INTR, pdev->tclasslist[pdev->classId].CurrPcktSze);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007f60:	687a      	ldr	r2, [r7, #4]
 8007f62:	212c      	movs	r1, #44	@ 0x2c
 8007f64:	fb01 f303 	mul.w	r3, r1, r3
 8007f68:	4413      	add	r3, r2
 8007f6a:	f503 7344 	add.w	r3, r3, #784	@ 0x310
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	7bb9      	ldrb	r1, [r7, #14]
 8007f72:	2203      	movs	r2, #3
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f000 f941 	bl	80081fc <USBD_CMPSIT_AssignEp>
      USBD_CMPSIT_HIDMouseDesc(pdev, (uint32_t)pCmpstFSConfDesc, &CurrFSConfDescSz, (uint8_t)USBD_SPEED_FULL);
 8007f7a:	4b54      	ldr	r3, [pc, #336]	@ (80080cc <USBD_CMPSIT_AddToConfDesc+0x23c>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4619      	mov	r1, r3
 8007f80:	2301      	movs	r3, #1
 8007f82:	4a53      	ldr	r2, [pc, #332]	@ (80080d0 <USBD_CMPSIT_AddToConfDesc+0x240>)
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f000 f9af 	bl	80082e8 <USBD_CMPSIT_HIDMouseDesc>
      break;
 8007f8a:	e099      	b.n	80080c0 <USBD_CMPSIT_AddToConfDesc+0x230>
      pdev->tclasslist[pdev->classId].CurrPcktSze = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007f92:	687a      	ldr	r2, [r7, #4]
 8007f94:	212c      	movs	r1, #44	@ 0x2c
 8007f96:	fb01 f303 	mul.w	r3, r1, r3
 8007f9a:	4413      	add	r3, r2
 8007f9c:	f503 7344 	add.w	r3, r3, #784	@ 0x310
 8007fa0:	2240      	movs	r2, #64	@ 0x40
 8007fa2:	601a      	str	r2, [r3, #0]
      idxIf = USBD_CMPSIT_FindFreeIFNbr(pdev);
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f000 f8cd 	bl	8008144 <USBD_CMPSIT_FindFreeIFNbr>
 8007faa:	4603      	mov	r3, r0
 8007fac:	73fb      	strb	r3, [r7, #15]
      pdev->tclasslist[pdev->classId].NumIf = 2U;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007fb4:	687a      	ldr	r2, [r7, #4]
 8007fb6:	212c      	movs	r1, #44	@ 0x2c
 8007fb8:	fb01 f303 	mul.w	r3, r1, r3
 8007fbc:	4413      	add	r3, r2
 8007fbe:	f503 7342 	add.w	r3, r3, #776	@ 0x308
 8007fc2:	2202      	movs	r2, #2
 8007fc4:	601a      	str	r2, [r3, #0]
      pdev->tclasslist[pdev->classId].Ifs[0] = idxIf;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007fcc:	687a      	ldr	r2, [r7, #4]
 8007fce:	212c      	movs	r1, #44	@ 0x2c
 8007fd0:	fb01 f303 	mul.w	r3, r1, r3
 8007fd4:	4413      	add	r3, r2
 8007fd6:	f503 7343 	add.w	r3, r3, #780	@ 0x30c
 8007fda:	7bfa      	ldrb	r2, [r7, #15]
 8007fdc:	701a      	strb	r2, [r3, #0]
      pdev->tclasslist[pdev->classId].Ifs[1] = (uint8_t)(idxIf + 1U);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8007fe4:	7bfa      	ldrb	r2, [r7, #15]
 8007fe6:	3201      	adds	r2, #1
 8007fe8:	b2d0      	uxtb	r0, r2
 8007fea:	687a      	ldr	r2, [r7, #4]
 8007fec:	212c      	movs	r1, #44	@ 0x2c
 8007fee:	fb01 f303 	mul.w	r3, r1, r3
 8007ff2:	4413      	add	r3, r2
 8007ff4:	f203 330d 	addw	r3, r3, #781	@ 0x30d
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	701a      	strb	r2, [r3, #0]
      pdev->tclasslist[pdev->classId].NumEps = 3U;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008002:	687a      	ldr	r2, [r7, #4]
 8008004:	212c      	movs	r1, #44	@ 0x2c
 8008006:	fb01 f303 	mul.w	r3, r1, r3
 800800a:	4413      	add	r3, r2
 800800c:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 8008010:	2203      	movs	r2, #3
 8008012:	601a      	str	r2, [r3, #0]
      iEp = pdev->tclasslist[pdev->classId].EpAdd[0];
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800801a:	687a      	ldr	r2, [r7, #4]
 800801c:	212c      	movs	r1, #44	@ 0x2c
 800801e:	fb01 f303 	mul.w	r3, r1, r3
 8008022:	4413      	add	r3, r2
 8008024:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	781b      	ldrb	r3, [r3, #0]
 800802c:	73bb      	strb	r3, [r7, #14]
      USBD_CMPSIT_AssignEp(pdev, iEp, USBD_EP_TYPE_BULK, pdev->tclasslist[pdev->classId].CurrPcktSze);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008034:	687a      	ldr	r2, [r7, #4]
 8008036:	212c      	movs	r1, #44	@ 0x2c
 8008038:	fb01 f303 	mul.w	r3, r1, r3
 800803c:	4413      	add	r3, r2
 800803e:	f503 7344 	add.w	r3, r3, #784	@ 0x310
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	7bb9      	ldrb	r1, [r7, #14]
 8008046:	2202      	movs	r2, #2
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f000 f8d7 	bl	80081fc <USBD_CMPSIT_AssignEp>
      iEp = pdev->tclasslist[pdev->classId].EpAdd[1];
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008054:	687a      	ldr	r2, [r7, #4]
 8008056:	212c      	movs	r1, #44	@ 0x2c
 8008058:	fb01 f303 	mul.w	r3, r1, r3
 800805c:	4413      	add	r3, r2
 800805e:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	785b      	ldrb	r3, [r3, #1]
 8008066:	73bb      	strb	r3, [r7, #14]
      USBD_CMPSIT_AssignEp(pdev, iEp, USBD_EP_TYPE_BULK, pdev->tclasslist[pdev->classId].CurrPcktSze);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800806e:	687a      	ldr	r2, [r7, #4]
 8008070:	212c      	movs	r1, #44	@ 0x2c
 8008072:	fb01 f303 	mul.w	r3, r1, r3
 8008076:	4413      	add	r3, r2
 8008078:	f503 7344 	add.w	r3, r3, #784	@ 0x310
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	7bb9      	ldrb	r1, [r7, #14]
 8008080:	2202      	movs	r2, #2
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f000 f8ba 	bl	80081fc <USBD_CMPSIT_AssignEp>
      iEp = pdev->tclasslist[pdev->classId].EpAdd[2];
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800808e:	687a      	ldr	r2, [r7, #4]
 8008090:	212c      	movs	r1, #44	@ 0x2c
 8008092:	fb01 f303 	mul.w	r3, r1, r3
 8008096:	4413      	add	r3, r2
 8008098:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	789b      	ldrb	r3, [r3, #2]
 80080a0:	73bb      	strb	r3, [r7, #14]
      USBD_CMPSIT_AssignEp(pdev, iEp, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80080a2:	7bb9      	ldrb	r1, [r7, #14]
 80080a4:	2308      	movs	r3, #8
 80080a6:	2203      	movs	r2, #3
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f000 f8a7 	bl	80081fc <USBD_CMPSIT_AssignEp>
      USBD_CMPSIT_CDCDesc(pdev, (uint32_t)pCmpstFSConfDesc, &CurrFSConfDescSz, (uint8_t)USBD_SPEED_FULL);
 80080ae:	4b07      	ldr	r3, [pc, #28]	@ (80080cc <USBD_CMPSIT_AddToConfDesc+0x23c>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4619      	mov	r1, r3
 80080b4:	2301      	movs	r3, #1
 80080b6:	4a06      	ldr	r2, [pc, #24]	@ (80080d0 <USBD_CMPSIT_AddToConfDesc+0x240>)
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f000 f9e7 	bl	800848c <USBD_CMPSIT_CDCDesc>
      break;
 80080be:	bf00      	nop
  }

  return (uint8_t)USBD_OK;
 80080c0:	2300      	movs	r3, #0
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3710      	adds	r7, #16
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}
 80080ca:	bf00      	nop
 80080cc:	200000e0 	.word	0x200000e0
 80080d0:	20000a48 	.word	0x20000a48

080080d4 <USBD_CMPSIT_GetFSCfgDesc>:
  *         return configuration descriptor for both FS and HS modes
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t  *USBD_CMPSIT_GetFSCfgDesc(uint16_t *length)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b083      	sub	sp, #12
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)CurrFSConfDescSz;
 80080dc:	4b05      	ldr	r3, [pc, #20]	@ (80080f4 <USBD_CMPSIT_GetFSCfgDesc+0x20>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	b29a      	uxth	r2, r3
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	801a      	strh	r2, [r3, #0]

  return USBD_CMPSIT_FSCfgDesc;
 80080e6:	4b04      	ldr	r3, [pc, #16]	@ (80080f8 <USBD_CMPSIT_GetFSCfgDesc+0x24>)
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	370c      	adds	r7, #12
 80080ec:	46bd      	mov	sp, r7
 80080ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f2:	4770      	bx	lr
 80080f4:	20000a48 	.word	0x20000a48
 80080f8:	2000091c 	.word	0x2000091c

080080fc <USBD_CMPSIT_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t  *USBD_CMPSIT_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b083      	sub	sp, #12
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)CurrFSConfDescSz;
 8008104:	4b05      	ldr	r3, [pc, #20]	@ (800811c <USBD_CMPSIT_GetOtherSpeedCfgDesc+0x20>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	b29a      	uxth	r2, r3
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	801a      	strh	r2, [r3, #0]

  return USBD_CMPSIT_FSCfgDesc;
 800810e:	4b04      	ldr	r3, [pc, #16]	@ (8008120 <USBD_CMPSIT_GetOtherSpeedCfgDesc+0x24>)
}
 8008110:	4618      	mov	r0, r3
 8008112:	370c      	adds	r7, #12
 8008114:	46bd      	mov	sp, r7
 8008116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811a:	4770      	bx	lr
 800811c:	20000a48 	.word	0x20000a48
 8008120:	2000091c 	.word	0x2000091c

08008124 <USBD_CMPSIT_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t  *USBD_CMPSIT_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008124:	b480      	push	{r7}
 8008126:	b083      	sub	sp, #12
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)(sizeof(USBD_CMPSIT_DeviceQualifierDesc));
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	220a      	movs	r2, #10
 8008130:	801a      	strh	r2, [r3, #0]
  return USBD_CMPSIT_DeviceQualifierDesc;
 8008132:	4b03      	ldr	r3, [pc, #12]	@ (8008140 <USBD_CMPSIT_GetDeviceQualifierDescriptor+0x1c>)
}
 8008134:	4618      	mov	r0, r3
 8008136:	370c      	adds	r7, #12
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr
 8008140:	200000e4 	.word	0x200000e4

08008144 <USBD_CMPSIT_FindFreeIFNbr>:
  *         Find the first interface available slot
  * @param  pdev: device instance
  * @retval The interface number to be used
  */
static uint8_t USBD_CMPSIT_FindFreeIFNbr(USBD_HandleTypeDef *pdev)
{
 8008144:	b480      	push	{r7}
 8008146:	b087      	sub	sp, #28
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
  uint32_t idx = 0U;
 800814c:	2300      	movs	r3, #0
 800814e:	617b      	str	r3, [r7, #20]

  /* Unroll all already activated classes */
  for (uint32_t i = 0U; i < pdev->NumClasses; i++)
 8008150:	2300      	movs	r3, #0
 8008152:	613b      	str	r3, [r7, #16]
 8008154:	e017      	b.n	8008186 <USBD_CMPSIT_FindFreeIFNbr+0x42>
  {
    /* Unroll each class interfaces */
    for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 8008156:	2300      	movs	r3, #0
 8008158:	60fb      	str	r3, [r7, #12]
 800815a:	e005      	b.n	8008168 <USBD_CMPSIT_FindFreeIFNbr+0x24>
    {
      /* Increment the interface counter index */
      idx++;
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	3301      	adds	r3, #1
 8008160:	617b      	str	r3, [r7, #20]
    for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	3301      	adds	r3, #1
 8008166:	60fb      	str	r3, [r7, #12]
 8008168:	687a      	ldr	r2, [r7, #4]
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	212c      	movs	r1, #44	@ 0x2c
 800816e:	fb01 f303 	mul.w	r3, r1, r3
 8008172:	4413      	add	r3, r2
 8008174:	f503 7342 	add.w	r3, r3, #776	@ 0x308
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	68fa      	ldr	r2, [r7, #12]
 800817c:	429a      	cmp	r2, r3
 800817e:	d3ed      	bcc.n	800815c <USBD_CMPSIT_FindFreeIFNbr+0x18>
  for (uint32_t i = 0U; i < pdev->NumClasses; i++)
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	3301      	adds	r3, #1
 8008184:	613b      	str	r3, [r7, #16]
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f8d3 32e4 	ldr.w	r3, [r3, #740]	@ 0x2e4
 800818c:	693a      	ldr	r2, [r7, #16]
 800818e:	429a      	cmp	r2, r3
 8008190:	d3e1      	bcc.n	8008156 <USBD_CMPSIT_FindFreeIFNbr+0x12>
    }
  }

  /* Return the first available interface slot */
  return (uint8_t)idx;
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	b2db      	uxtb	r3, r3
}
 8008196:	4618      	mov	r0, r3
 8008198:	371c      	adds	r7, #28
 800819a:	46bd      	mov	sp, r7
 800819c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a0:	4770      	bx	lr

080081a2 <USBD_CMPSIT_AddConfDesc>:
  *         Add a new class to the configuration descriptor
  * @param  pdev: device instance
  * @retval none
  */
static void  USBD_CMPSIT_AddConfDesc(uint32_t Conf, __IO uint32_t *pSze)
{
 80081a2:	b480      	push	{r7}
 80081a4:	b085      	sub	sp, #20
 80081a6:	af00      	add	r7, sp, #0
 80081a8:	6078      	str	r0, [r7, #4]
 80081aa:	6039      	str	r1, [r7, #0]
  /* Intermediate variable to comply with MISRA-C Rule 11.3 */
  USBD_ConfigDescTypeDef *ptr = (USBD_ConfigDescTypeDef *)Conf;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	60fb      	str	r3, [r7, #12]

  ptr->bLength = (uint8_t)sizeof(USBD_ConfigDescTypeDef);
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	2209      	movs	r2, #9
 80081b4:	701a      	strb	r2, [r3, #0]
  ptr->bDescriptorType = USB_DESC_TYPE_CONFIGURATION;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	2202      	movs	r2, #2
 80081ba:	705a      	strb	r2, [r3, #1]
  ptr->wTotalLength = 0U;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2200      	movs	r2, #0
 80081c0:	709a      	strb	r2, [r3, #2]
 80081c2:	2200      	movs	r2, #0
 80081c4:	70da      	strb	r2, [r3, #3]
  ptr->bNumInterfaces = 0U;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2200      	movs	r2, #0
 80081ca:	711a      	strb	r2, [r3, #4]
  ptr->bConfigurationValue = 1U;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	2201      	movs	r2, #1
 80081d0:	715a      	strb	r2, [r3, #5]
  ptr->iConfiguration = USBD_CONFIG_STR_DESC_IDX;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2204      	movs	r2, #4
 80081d6:	719a      	strb	r2, [r3, #6]

#if (USBD_SELF_POWERED == 1U)
  ptr->bmAttributes = 0xC0U;   /* bmAttributes: Self Powered according to user configuration */
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	22c0      	movs	r2, #192	@ 0xc0
 80081dc:	71da      	strb	r2, [r3, #7]
#else
  ptr->bmAttributes = 0x80U;   /* bmAttributes: Bus Powered according to user configuration */
#endif /* USBD_SELF_POWERED */

  ptr->bMaxPower = USBD_MAX_POWER;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2232      	movs	r2, #50	@ 0x32
 80081e2:	721a      	strb	r2, [r3, #8]

  *pSze += sizeof(USBD_ConfigDescTypeDef);
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f103 0209 	add.w	r2, r3, #9
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	601a      	str	r2, [r3, #0]
}
 80081f0:	bf00      	nop
 80081f2:	3714      	adds	r7, #20
 80081f4:	46bd      	mov	sp, r7
 80081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fa:	4770      	bx	lr

080081fc <USBD_CMPSIT_AssignEp>:
  * @param  Type: Endpoint type
  * @param  Sze: Endpoint max packet size
  * @retval none
  */
static void  USBD_CMPSIT_AssignEp(USBD_HandleTypeDef *pdev, uint8_t Add, uint8_t Type, uint32_t Sze)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b087      	sub	sp, #28
 8008200:	af00      	add	r7, sp, #0
 8008202:	60f8      	str	r0, [r7, #12]
 8008204:	607b      	str	r3, [r7, #4]
 8008206:	460b      	mov	r3, r1
 8008208:	72fb      	strb	r3, [r7, #11]
 800820a:	4613      	mov	r3, r2
 800820c:	72bb      	strb	r3, [r7, #10]
  uint32_t idx = 0U;
 800820e:	2300      	movs	r3, #0
 8008210:	617b      	str	r3, [r7, #20]

  /* Find the first available endpoint slot */
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 8008212:	e002      	b.n	800821a <USBD_CMPSIT_AssignEp+0x1e>
          ((pdev->tclasslist[pdev->classId].Eps[idx].is_used) != 0U)))
  {
    /* Increment the index */
    idx++;
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	3301      	adds	r3, #1
 8008218:	617b      	str	r3, [r7, #20]
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008220:	68fa      	ldr	r2, [r7, #12]
 8008222:	212c      	movs	r1, #44	@ 0x2c
 8008224:	fb01 f303 	mul.w	r3, r1, r3
 8008228:	4413      	add	r3, r2
 800822a:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	697a      	ldr	r2, [r7, #20]
 8008232:	429a      	cmp	r2, r3
 8008234:	d210      	bcs.n	8008258 <USBD_CMPSIT_AssignEp+0x5c>
          ((pdev->tclasslist[pdev->classId].Eps[idx].is_used) != 0U)))
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 800823c:	68f9      	ldr	r1, [r7, #12]
 800823e:	4613      	mov	r3, r2
 8008240:	009b      	lsls	r3, r3, #2
 8008242:	4413      	add	r3, r2
 8008244:	005b      	lsls	r3, r3, #1
 8008246:	4413      	add	r3, r2
 8008248:	697a      	ldr	r2, [r7, #20]
 800824a:	4413      	add	r3, r2
 800824c:	33be      	adds	r3, #190	@ 0xbe
 800824e:	009b      	lsls	r3, r3, #2
 8008250:	440b      	add	r3, r1
 8008252:	78db      	ldrb	r3, [r3, #3]
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 8008254:	2b00      	cmp	r3, #0
 8008256:	d1dd      	bne.n	8008214 <USBD_CMPSIT_AssignEp+0x18>
  }

  /* Configure the endpoint */
  pdev->tclasslist[pdev->classId].Eps[idx].add = Add;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 800825e:	68f9      	ldr	r1, [r7, #12]
 8008260:	4613      	mov	r3, r2
 8008262:	009b      	lsls	r3, r3, #2
 8008264:	4413      	add	r3, r2
 8008266:	005b      	lsls	r3, r3, #1
 8008268:	4413      	add	r3, r2
 800826a:	697a      	ldr	r2, [r7, #20]
 800826c:	4413      	add	r3, r2
 800826e:	33be      	adds	r3, #190	@ 0xbe
 8008270:	7afa      	ldrb	r2, [r7, #11]
 8008272:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
  pdev->tclasslist[pdev->classId].Eps[idx].type = Type;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 800827c:	68f9      	ldr	r1, [r7, #12]
 800827e:	4613      	mov	r3, r2
 8008280:	009b      	lsls	r3, r3, #2
 8008282:	4413      	add	r3, r2
 8008284:	005b      	lsls	r3, r3, #1
 8008286:	4413      	add	r3, r2
 8008288:	697a      	ldr	r2, [r7, #20]
 800828a:	4413      	add	r3, r2
 800828c:	33be      	adds	r3, #190	@ 0xbe
 800828e:	009b      	lsls	r3, r3, #2
 8008290:	440b      	add	r3, r1
 8008292:	7aba      	ldrb	r2, [r7, #10]
 8008294:	705a      	strb	r2, [r3, #1]
  pdev->tclasslist[pdev->classId].Eps[idx].size = (uint8_t)Sze;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	b2d8      	uxtb	r0, r3
 80082a0:	68f9      	ldr	r1, [r7, #12]
 80082a2:	4613      	mov	r3, r2
 80082a4:	009b      	lsls	r3, r3, #2
 80082a6:	4413      	add	r3, r2
 80082a8:	005b      	lsls	r3, r3, #1
 80082aa:	4413      	add	r3, r2
 80082ac:	697a      	ldr	r2, [r7, #20]
 80082ae:	4413      	add	r3, r2
 80082b0:	33be      	adds	r3, #190	@ 0xbe
 80082b2:	009b      	lsls	r3, r3, #2
 80082b4:	440b      	add	r3, r1
 80082b6:	4602      	mov	r2, r0
 80082b8:	709a      	strb	r2, [r3, #2]
  pdev->tclasslist[pdev->classId].Eps[idx].is_used = 1U;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 80082c0:	68f9      	ldr	r1, [r7, #12]
 80082c2:	4613      	mov	r3, r2
 80082c4:	009b      	lsls	r3, r3, #2
 80082c6:	4413      	add	r3, r2
 80082c8:	005b      	lsls	r3, r3, #1
 80082ca:	4413      	add	r3, r2
 80082cc:	697a      	ldr	r2, [r7, #20]
 80082ce:	4413      	add	r3, r2
 80082d0:	33be      	adds	r3, #190	@ 0xbe
 80082d2:	009b      	lsls	r3, r3, #2
 80082d4:	440b      	add	r3, r1
 80082d6:	2201      	movs	r2, #1
 80082d8:	70da      	strb	r2, [r3, #3]
}
 80082da:	bf00      	nop
 80082dc:	371c      	adds	r7, #28
 80082de:	46bd      	mov	sp, r7
 80082e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e4:	4770      	bx	lr
	...

080082e8 <USBD_CMPSIT_HIDMouseDesc>:
  * @param  Sze: pointer to the current configuration descriptor size
  * @retval None
  */
static void  USBD_CMPSIT_HIDMouseDesc(USBD_HandleTypeDef *pdev, uint32_t pConf,
                                      __IO uint32_t *Sze, uint8_t speed)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b085      	sub	sp, #20
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	60f8      	str	r0, [r7, #12]
 80082f0:	60b9      	str	r1, [r7, #8]
 80082f2:	607a      	str	r2, [r7, #4]
 80082f4:	70fb      	strb	r3, [r7, #3]
  static USBD_IfDescTypeDef *pIfDesc;
  static USBD_EpDescTypeDef *pEpDesc;
  static USBD_HIDDescTypeDef *pHidMouseDesc;

  /* Append HID Interface descriptor to Configuration descriptor */
  __USBD_CMPSIT_SET_IF(pdev->tclasslist[pdev->classId].Ifs[0], 0U, \
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681a      	ldr	r2, [r3, #0]
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	4413      	add	r3, r2
 80082fe:	461a      	mov	r2, r3
 8008300:	4b5f      	ldr	r3, [pc, #380]	@ (8008480 <USBD_CMPSIT_HIDMouseDesc+0x198>)
 8008302:	601a      	str	r2, [r3, #0]
 8008304:	4b5e      	ldr	r3, [pc, #376]	@ (8008480 <USBD_CMPSIT_HIDMouseDesc+0x198>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	2209      	movs	r2, #9
 800830a:	701a      	strb	r2, [r3, #0]
 800830c:	4b5c      	ldr	r3, [pc, #368]	@ (8008480 <USBD_CMPSIT_HIDMouseDesc+0x198>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	2204      	movs	r2, #4
 8008312:	705a      	strb	r2, [r3, #1]
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 800831a:	4b59      	ldr	r3, [pc, #356]	@ (8008480 <USBD_CMPSIT_HIDMouseDesc+0x198>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	68f9      	ldr	r1, [r7, #12]
 8008320:	202c      	movs	r0, #44	@ 0x2c
 8008322:	fb00 f202 	mul.w	r2, r0, r2
 8008326:	440a      	add	r2, r1
 8008328:	f502 7243 	add.w	r2, r2, #780	@ 0x30c
 800832c:	7812      	ldrb	r2, [r2, #0]
 800832e:	709a      	strb	r2, [r3, #2]
 8008330:	4b53      	ldr	r3, [pc, #332]	@ (8008480 <USBD_CMPSIT_HIDMouseDesc+0x198>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	2200      	movs	r2, #0
 8008336:	70da      	strb	r2, [r3, #3]
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800833e:	68fa      	ldr	r2, [r7, #12]
 8008340:	212c      	movs	r1, #44	@ 0x2c
 8008342:	fb01 f303 	mul.w	r3, r1, r3
 8008346:	4413      	add	r3, r2
 8008348:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 800834c:	681a      	ldr	r2, [r3, #0]
 800834e:	4b4c      	ldr	r3, [pc, #304]	@ (8008480 <USBD_CMPSIT_HIDMouseDesc+0x198>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	b2d2      	uxtb	r2, r2
 8008354:	711a      	strb	r2, [r3, #4]
 8008356:	4b4a      	ldr	r3, [pc, #296]	@ (8008480 <USBD_CMPSIT_HIDMouseDesc+0x198>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	2203      	movs	r2, #3
 800835c:	715a      	strb	r2, [r3, #5]
 800835e:	4b48      	ldr	r3, [pc, #288]	@ (8008480 <USBD_CMPSIT_HIDMouseDesc+0x198>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	2201      	movs	r2, #1
 8008364:	719a      	strb	r2, [r3, #6]
 8008366:	4b46      	ldr	r3, [pc, #280]	@ (8008480 <USBD_CMPSIT_HIDMouseDesc+0x198>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	2202      	movs	r2, #2
 800836c:	71da      	strb	r2, [r3, #7]
 800836e:	4b44      	ldr	r3, [pc, #272]	@ (8008480 <USBD_CMPSIT_HIDMouseDesc+0x198>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	2200      	movs	r2, #0
 8008374:	721a      	strb	r2, [r3, #8]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f103 0209 	add.w	r2, r3, #9
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	601a      	str	r2, [r3, #0]
                       (uint8_t)(pdev->tclasslist[pdev->classId].NumEps), 0x03U, 0x01U, 0x02U, 0U);

  /* Append HID Functional descriptor to Configuration descriptor */
  pHidMouseDesc = ((USBD_HIDDescTypeDef *)(pConf + *Sze));
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681a      	ldr	r2, [r3, #0]
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	4413      	add	r3, r2
 800838a:	461a      	mov	r2, r3
 800838c:	4b3d      	ldr	r3, [pc, #244]	@ (8008484 <USBD_CMPSIT_HIDMouseDesc+0x19c>)
 800838e:	601a      	str	r2, [r3, #0]
  pHidMouseDesc->bLength = (uint8_t)sizeof(USBD_HIDDescTypeDef);
 8008390:	4b3c      	ldr	r3, [pc, #240]	@ (8008484 <USBD_CMPSIT_HIDMouseDesc+0x19c>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	2209      	movs	r2, #9
 8008396:	701a      	strb	r2, [r3, #0]
  pHidMouseDesc->bDescriptorType = HID_DESCRIPTOR_TYPE;
 8008398:	4b3a      	ldr	r3, [pc, #232]	@ (8008484 <USBD_CMPSIT_HIDMouseDesc+0x19c>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	2221      	movs	r2, #33	@ 0x21
 800839e:	705a      	strb	r2, [r3, #1]
  pHidMouseDesc->bcdHID = 0x0111U;
 80083a0:	4b38      	ldr	r3, [pc, #224]	@ (8008484 <USBD_CMPSIT_HIDMouseDesc+0x19c>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	2200      	movs	r2, #0
 80083a6:	f042 0211 	orr.w	r2, r2, #17
 80083aa:	709a      	strb	r2, [r3, #2]
 80083ac:	2200      	movs	r2, #0
 80083ae:	f042 0201 	orr.w	r2, r2, #1
 80083b2:	70da      	strb	r2, [r3, #3]
  pHidMouseDesc->bCountryCode = 0x00U;
 80083b4:	4b33      	ldr	r3, [pc, #204]	@ (8008484 <USBD_CMPSIT_HIDMouseDesc+0x19c>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	2200      	movs	r2, #0
 80083ba:	711a      	strb	r2, [r3, #4]
  pHidMouseDesc->bNumDescriptors = 0x01U;
 80083bc:	4b31      	ldr	r3, [pc, #196]	@ (8008484 <USBD_CMPSIT_HIDMouseDesc+0x19c>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	2201      	movs	r2, #1
 80083c2:	715a      	strb	r2, [r3, #5]
  pHidMouseDesc->bHIDDescriptorType = 0x22U;
 80083c4:	4b2f      	ldr	r3, [pc, #188]	@ (8008484 <USBD_CMPSIT_HIDMouseDesc+0x19c>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	2222      	movs	r2, #34	@ 0x22
 80083ca:	719a      	strb	r2, [r3, #6]
  pHidMouseDesc->wItemLength = HID_MOUSE_REPORT_DESC_SIZE;
 80083cc:	4b2d      	ldr	r3, [pc, #180]	@ (8008484 <USBD_CMPSIT_HIDMouseDesc+0x19c>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	2200      	movs	r2, #0
 80083d2:	f042 024a 	orr.w	r2, r2, #74	@ 0x4a
 80083d6:	71da      	strb	r2, [r3, #7]
 80083d8:	2200      	movs	r2, #0
 80083da:	721a      	strb	r2, [r3, #8]
  *Sze += (uint32_t)sizeof(USBD_HIDDescTypeDef);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f103 0209 	add.w	r2, r3, #9
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	601a      	str	r2, [r3, #0]

  /* Append Endpoint descriptor to Configuration descriptor */
  __USBD_CMPSIT_SET_EP(pdev->tclasslist[pdev->classId].Eps[0].add, USBD_EP_TYPE_INTR, HID_EPIN_SIZE, \
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681a      	ldr	r2, [r3, #0]
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	4413      	add	r3, r2
 80083f0:	461a      	mov	r2, r3
 80083f2:	4b25      	ldr	r3, [pc, #148]	@ (8008488 <USBD_CMPSIT_HIDMouseDesc+0x1a0>)
 80083f4:	601a      	str	r2, [r3, #0]
 80083f6:	4b24      	ldr	r3, [pc, #144]	@ (8008488 <USBD_CMPSIT_HIDMouseDesc+0x1a0>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	2207      	movs	r2, #7
 80083fc:	701a      	strb	r2, [r3, #0]
 80083fe:	4b22      	ldr	r3, [pc, #136]	@ (8008488 <USBD_CMPSIT_HIDMouseDesc+0x1a0>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	2205      	movs	r2, #5
 8008404:	705a      	strb	r2, [r3, #1]
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 800840c:	4b1e      	ldr	r3, [pc, #120]	@ (8008488 <USBD_CMPSIT_HIDMouseDesc+0x1a0>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	68f9      	ldr	r1, [r7, #12]
 8008412:	202c      	movs	r0, #44	@ 0x2c
 8008414:	fb00 f202 	mul.w	r2, r0, r2
 8008418:	440a      	add	r2, r1
 800841a:	f502 723e 	add.w	r2, r2, #760	@ 0x2f8
 800841e:	7812      	ldrb	r2, [r2, #0]
 8008420:	709a      	strb	r2, [r3, #2]
 8008422:	4b19      	ldr	r3, [pc, #100]	@ (8008488 <USBD_CMPSIT_HIDMouseDesc+0x1a0>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	2203      	movs	r2, #3
 8008428:	70da      	strb	r2, [r3, #3]
 800842a:	4b17      	ldr	r3, [pc, #92]	@ (8008488 <USBD_CMPSIT_HIDMouseDesc+0x1a0>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	2200      	movs	r2, #0
 8008430:	f042 0204 	orr.w	r2, r2, #4
 8008434:	711a      	strb	r2, [r3, #4]
 8008436:	2200      	movs	r2, #0
 8008438:	715a      	strb	r2, [r3, #5]
 800843a:	78fb      	ldrb	r3, [r7, #3]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d104      	bne.n	800844a <USBD_CMPSIT_HIDMouseDesc+0x162>
 8008440:	4b11      	ldr	r3, [pc, #68]	@ (8008488 <USBD_CMPSIT_HIDMouseDesc+0x1a0>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	2207      	movs	r2, #7
 8008446:	719a      	strb	r2, [r3, #6]
 8008448:	e003      	b.n	8008452 <USBD_CMPSIT_HIDMouseDesc+0x16a>
 800844a:	4b0f      	ldr	r3, [pc, #60]	@ (8008488 <USBD_CMPSIT_HIDMouseDesc+0x1a0>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	220a      	movs	r2, #10
 8008450:	719a      	strb	r2, [r3, #6]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	1dda      	adds	r2, r3, #7
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	601a      	str	r2, [r3, #0]
                       HID_HS_BINTERVAL, HID_FS_BINTERVAL);

  /* Update Config Descriptor and IAD descriptor */
  ((USBD_ConfigDescTypeDef *)pConf)->bNumInterfaces += 1U;
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	791a      	ldrb	r2, [r3, #4]
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	3201      	adds	r2, #1
 8008464:	b2d2      	uxtb	r2, r2
 8008466:	711a      	strb	r2, [r3, #4]
  ((USBD_ConfigDescTypeDef *)pConf)->wTotalLength  = (uint16_t)(*Sze);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681a      	ldr	r2, [r3, #0]
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	b292      	uxth	r2, r2
 8008470:	805a      	strh	r2, [r3, #2]
}
 8008472:	bf00      	nop
 8008474:	3714      	adds	r7, #20
 8008476:	46bd      	mov	sp, r7
 8008478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847c:	4770      	bx	lr
 800847e:	bf00      	nop
 8008480:	20000a4c 	.word	0x20000a4c
 8008484:	20000a50 	.word	0x20000a50
 8008488:	20000a54 	.word	0x20000a54

0800848c <USBD_CMPSIT_CDCDesc>:
  * @param  pConf: Configuration descriptor pointer
  * @param  Sze: pointer to the current configuration descriptor size
  * @retval None
  */
static void  USBD_CMPSIT_CDCDesc(USBD_HandleTypeDef *pdev, uint32_t pConf, __IO uint32_t *Sze, uint8_t speed)
{
 800848c:	b480      	push	{r7}
 800848e:	b085      	sub	sp, #20
 8008490:	af00      	add	r7, sp, #0
 8008492:	60f8      	str	r0, [r7, #12]
 8008494:	60b9      	str	r1, [r7, #8]
 8008496:	607a      	str	r2, [r7, #4]
 8008498:	70fb      	strb	r3, [r7, #3]
#if USBD_COMPOSITE_USE_IAD == 1
  static USBD_IadDescTypeDef              *pIadDesc;
#endif /* USBD_COMPOSITE_USE_IAD == 1 */

#if USBD_COMPOSITE_USE_IAD == 1
  pIadDesc                          = ((USBD_IadDescTypeDef *)(pConf + *Sze));
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681a      	ldr	r2, [r3, #0]
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	4413      	add	r3, r2
 80084a2:	461a      	mov	r2, r3
 80084a4:	4b9c      	ldr	r3, [pc, #624]	@ (8008718 <USBD_CMPSIT_CDCDesc+0x28c>)
 80084a6:	601a      	str	r2, [r3, #0]
  pIadDesc->bLength                 = (uint8_t)sizeof(USBD_IadDescTypeDef);
 80084a8:	4b9b      	ldr	r3, [pc, #620]	@ (8008718 <USBD_CMPSIT_CDCDesc+0x28c>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	2208      	movs	r2, #8
 80084ae:	701a      	strb	r2, [r3, #0]
  pIadDesc->bDescriptorType         = USB_DESC_TYPE_IAD; /* IAD descriptor */
 80084b0:	4b99      	ldr	r3, [pc, #612]	@ (8008718 <USBD_CMPSIT_CDCDesc+0x28c>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	220b      	movs	r2, #11
 80084b6:	705a      	strb	r2, [r3, #1]
  pIadDesc->bFirstInterface         = pdev->tclasslist[pdev->classId].Ifs[0];
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 80084be:	4b96      	ldr	r3, [pc, #600]	@ (8008718 <USBD_CMPSIT_CDCDesc+0x28c>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	68f9      	ldr	r1, [r7, #12]
 80084c4:	202c      	movs	r0, #44	@ 0x2c
 80084c6:	fb00 f202 	mul.w	r2, r0, r2
 80084ca:	440a      	add	r2, r1
 80084cc:	f502 7243 	add.w	r2, r2, #780	@ 0x30c
 80084d0:	7812      	ldrb	r2, [r2, #0]
 80084d2:	709a      	strb	r2, [r3, #2]
  pIadDesc->bInterfaceCount         = 2U;    /* 2 interfaces */
 80084d4:	4b90      	ldr	r3, [pc, #576]	@ (8008718 <USBD_CMPSIT_CDCDesc+0x28c>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	2202      	movs	r2, #2
 80084da:	70da      	strb	r2, [r3, #3]
  pIadDesc->bFunctionClass          = 0x02U;
 80084dc:	4b8e      	ldr	r3, [pc, #568]	@ (8008718 <USBD_CMPSIT_CDCDesc+0x28c>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	2202      	movs	r2, #2
 80084e2:	711a      	strb	r2, [r3, #4]
  pIadDesc->bFunctionSubClass       = 0x02U;
 80084e4:	4b8c      	ldr	r3, [pc, #560]	@ (8008718 <USBD_CMPSIT_CDCDesc+0x28c>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	2202      	movs	r2, #2
 80084ea:	715a      	strb	r2, [r3, #5]
  pIadDesc->bFunctionProtocol       = 0x01U;
 80084ec:	4b8a      	ldr	r3, [pc, #552]	@ (8008718 <USBD_CMPSIT_CDCDesc+0x28c>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	2201      	movs	r2, #1
 80084f2:	719a      	strb	r2, [r3, #6]
  pIadDesc->iFunction               = 0U; /* String Index */
 80084f4:	4b88      	ldr	r3, [pc, #544]	@ (8008718 <USBD_CMPSIT_CDCDesc+0x28c>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	2200      	movs	r2, #0
 80084fa:	71da      	strb	r2, [r3, #7]
  *Sze                              += (uint32_t)sizeof(USBD_IadDescTypeDef);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f103 0208 	add.w	r2, r3, #8
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	601a      	str	r2, [r3, #0]
#endif /* USBD_COMPOSITE_USE_IAD == 1 */

  /* Control Interface Descriptor */
  __USBD_CMPSIT_SET_IF(pdev->tclasslist[pdev->classId].Ifs[0], 0U, 1U, 0x02, 0x02U, 0x01U, 0U);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681a      	ldr	r2, [r3, #0]
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	4413      	add	r3, r2
 8008510:	461a      	mov	r2, r3
 8008512:	4b82      	ldr	r3, [pc, #520]	@ (800871c <USBD_CMPSIT_CDCDesc+0x290>)
 8008514:	601a      	str	r2, [r3, #0]
 8008516:	4b81      	ldr	r3, [pc, #516]	@ (800871c <USBD_CMPSIT_CDCDesc+0x290>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	2209      	movs	r2, #9
 800851c:	701a      	strb	r2, [r3, #0]
 800851e:	4b7f      	ldr	r3, [pc, #508]	@ (800871c <USBD_CMPSIT_CDCDesc+0x290>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	2204      	movs	r2, #4
 8008524:	705a      	strb	r2, [r3, #1]
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 800852c:	4b7b      	ldr	r3, [pc, #492]	@ (800871c <USBD_CMPSIT_CDCDesc+0x290>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	68f9      	ldr	r1, [r7, #12]
 8008532:	202c      	movs	r0, #44	@ 0x2c
 8008534:	fb00 f202 	mul.w	r2, r0, r2
 8008538:	440a      	add	r2, r1
 800853a:	f502 7243 	add.w	r2, r2, #780	@ 0x30c
 800853e:	7812      	ldrb	r2, [r2, #0]
 8008540:	709a      	strb	r2, [r3, #2]
 8008542:	4b76      	ldr	r3, [pc, #472]	@ (800871c <USBD_CMPSIT_CDCDesc+0x290>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	2200      	movs	r2, #0
 8008548:	70da      	strb	r2, [r3, #3]
 800854a:	4b74      	ldr	r3, [pc, #464]	@ (800871c <USBD_CMPSIT_CDCDesc+0x290>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	2201      	movs	r2, #1
 8008550:	711a      	strb	r2, [r3, #4]
 8008552:	4b72      	ldr	r3, [pc, #456]	@ (800871c <USBD_CMPSIT_CDCDesc+0x290>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	2202      	movs	r2, #2
 8008558:	715a      	strb	r2, [r3, #5]
 800855a:	4b70      	ldr	r3, [pc, #448]	@ (800871c <USBD_CMPSIT_CDCDesc+0x290>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	2202      	movs	r2, #2
 8008560:	719a      	strb	r2, [r3, #6]
 8008562:	4b6e      	ldr	r3, [pc, #440]	@ (800871c <USBD_CMPSIT_CDCDesc+0x290>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	2201      	movs	r2, #1
 8008568:	71da      	strb	r2, [r3, #7]
 800856a:	4b6c      	ldr	r3, [pc, #432]	@ (800871c <USBD_CMPSIT_CDCDesc+0x290>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	2200      	movs	r2, #0
 8008570:	721a      	strb	r2, [r3, #8]
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f103 0209 	add.w	r2, r3, #9
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	601a      	str	r2, [r3, #0]

  /* Control interface headers */
  pHeadDesc = ((USBD_CDCHeaderFuncDescTypeDef *)((uint32_t)pConf + *Sze));
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681a      	ldr	r2, [r3, #0]
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	4413      	add	r3, r2
 8008586:	461a      	mov	r2, r3
 8008588:	4b65      	ldr	r3, [pc, #404]	@ (8008720 <USBD_CMPSIT_CDCDesc+0x294>)
 800858a:	601a      	str	r2, [r3, #0]
  /* Header Functional Descriptor*/
  pHeadDesc->bLength = 0x05U;
 800858c:	4b64      	ldr	r3, [pc, #400]	@ (8008720 <USBD_CMPSIT_CDCDesc+0x294>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	2205      	movs	r2, #5
 8008592:	701a      	strb	r2, [r3, #0]
  pHeadDesc->bDescriptorType = 0x24U;
 8008594:	4b62      	ldr	r3, [pc, #392]	@ (8008720 <USBD_CMPSIT_CDCDesc+0x294>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	2224      	movs	r2, #36	@ 0x24
 800859a:	705a      	strb	r2, [r3, #1]
  pHeadDesc->bDescriptorSubtype = 0x00U;
 800859c:	4b60      	ldr	r3, [pc, #384]	@ (8008720 <USBD_CMPSIT_CDCDesc+0x294>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	2200      	movs	r2, #0
 80085a2:	709a      	strb	r2, [r3, #2]
  pHeadDesc->bcdCDC = 0x0110U;
 80085a4:	4b5e      	ldr	r3, [pc, #376]	@ (8008720 <USBD_CMPSIT_CDCDesc+0x294>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	2200      	movs	r2, #0
 80085aa:	f042 0210 	orr.w	r2, r2, #16
 80085ae:	70da      	strb	r2, [r3, #3]
 80085b0:	2200      	movs	r2, #0
 80085b2:	f042 0201 	orr.w	r2, r2, #1
 80085b6:	711a      	strb	r2, [r3, #4]
  *Sze += (uint32_t)sizeof(USBD_CDCHeaderFuncDescTypeDef);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	1d5a      	adds	r2, r3, #5
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	601a      	str	r2, [r3, #0]

  /* Call Management Functional Descriptor */
  pCallMgmDesc = ((USBD_CDCCallMgmFuncDescTypeDef *)((uint32_t)pConf + *Sze));
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681a      	ldr	r2, [r3, #0]
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	4413      	add	r3, r2
 80085ca:	461a      	mov	r2, r3
 80085cc:	4b55      	ldr	r3, [pc, #340]	@ (8008724 <USBD_CMPSIT_CDCDesc+0x298>)
 80085ce:	601a      	str	r2, [r3, #0]
  pCallMgmDesc->bLength = 0x05U;
 80085d0:	4b54      	ldr	r3, [pc, #336]	@ (8008724 <USBD_CMPSIT_CDCDesc+0x298>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	2205      	movs	r2, #5
 80085d6:	701a      	strb	r2, [r3, #0]
  pCallMgmDesc->bDescriptorType = 0x24U;
 80085d8:	4b52      	ldr	r3, [pc, #328]	@ (8008724 <USBD_CMPSIT_CDCDesc+0x298>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	2224      	movs	r2, #36	@ 0x24
 80085de:	705a      	strb	r2, [r3, #1]
  pCallMgmDesc->bDescriptorSubtype = 0x01U;
 80085e0:	4b50      	ldr	r3, [pc, #320]	@ (8008724 <USBD_CMPSIT_CDCDesc+0x298>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	2201      	movs	r2, #1
 80085e6:	709a      	strb	r2, [r3, #2]
  pCallMgmDesc->bmCapabilities = 0x00U;
 80085e8:	4b4e      	ldr	r3, [pc, #312]	@ (8008724 <USBD_CMPSIT_CDCDesc+0x298>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	2200      	movs	r2, #0
 80085ee:	70da      	strb	r2, [r3, #3]
  pCallMgmDesc->bDataInterface = pdev->tclasslist[pdev->classId].Ifs[1];
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 80085f6:	4b4b      	ldr	r3, [pc, #300]	@ (8008724 <USBD_CMPSIT_CDCDesc+0x298>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	68f9      	ldr	r1, [r7, #12]
 80085fc:	202c      	movs	r0, #44	@ 0x2c
 80085fe:	fb00 f202 	mul.w	r2, r0, r2
 8008602:	440a      	add	r2, r1
 8008604:	f202 320d 	addw	r2, r2, #781	@ 0x30d
 8008608:	7812      	ldrb	r2, [r2, #0]
 800860a:	711a      	strb	r2, [r3, #4]
  *Sze += (uint32_t)sizeof(USBD_CDCCallMgmFuncDescTypeDef);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	1d5a      	adds	r2, r3, #5
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	601a      	str	r2, [r3, #0]

  /* ACM Functional Descriptor*/
  pACMDesc = ((USBD_CDCACMFuncDescTypeDef *)((uint32_t)pConf + *Sze));
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681a      	ldr	r2, [r3, #0]
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	4413      	add	r3, r2
 800861e:	461a      	mov	r2, r3
 8008620:	4b41      	ldr	r3, [pc, #260]	@ (8008728 <USBD_CMPSIT_CDCDesc+0x29c>)
 8008622:	601a      	str	r2, [r3, #0]
  pACMDesc->bLength = 0x04U;
 8008624:	4b40      	ldr	r3, [pc, #256]	@ (8008728 <USBD_CMPSIT_CDCDesc+0x29c>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	2204      	movs	r2, #4
 800862a:	701a      	strb	r2, [r3, #0]
  pACMDesc->bDescriptorType = 0x24U;
 800862c:	4b3e      	ldr	r3, [pc, #248]	@ (8008728 <USBD_CMPSIT_CDCDesc+0x29c>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	2224      	movs	r2, #36	@ 0x24
 8008632:	705a      	strb	r2, [r3, #1]
  pACMDesc->bDescriptorSubtype = 0x02U;
 8008634:	4b3c      	ldr	r3, [pc, #240]	@ (8008728 <USBD_CMPSIT_CDCDesc+0x29c>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	2202      	movs	r2, #2
 800863a:	709a      	strb	r2, [r3, #2]
  pACMDesc->bmCapabilities = 0x02U;
 800863c:	4b3a      	ldr	r3, [pc, #232]	@ (8008728 <USBD_CMPSIT_CDCDesc+0x29c>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	2202      	movs	r2, #2
 8008642:	70da      	strb	r2, [r3, #3]
  *Sze += (uint32_t)sizeof(USBD_CDCACMFuncDescTypeDef);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	1d1a      	adds	r2, r3, #4
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	601a      	str	r2, [r3, #0]

  /* Union Functional Descriptor*/
  pUnionDesc = ((USBD_CDCUnionFuncDescTypeDef *)((uint32_t)pConf + *Sze));
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681a      	ldr	r2, [r3, #0]
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	4413      	add	r3, r2
 8008656:	461a      	mov	r2, r3
 8008658:	4b34      	ldr	r3, [pc, #208]	@ (800872c <USBD_CMPSIT_CDCDesc+0x2a0>)
 800865a:	601a      	str	r2, [r3, #0]
  pUnionDesc->bLength = 0x05U;
 800865c:	4b33      	ldr	r3, [pc, #204]	@ (800872c <USBD_CMPSIT_CDCDesc+0x2a0>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	2205      	movs	r2, #5
 8008662:	701a      	strb	r2, [r3, #0]
  pUnionDesc->bDescriptorType = 0x24U;
 8008664:	4b31      	ldr	r3, [pc, #196]	@ (800872c <USBD_CMPSIT_CDCDesc+0x2a0>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	2224      	movs	r2, #36	@ 0x24
 800866a:	705a      	strb	r2, [r3, #1]
  pUnionDesc->bDescriptorSubtype = 0x06U;
 800866c:	4b2f      	ldr	r3, [pc, #188]	@ (800872c <USBD_CMPSIT_CDCDesc+0x2a0>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	2206      	movs	r2, #6
 8008672:	709a      	strb	r2, [r3, #2]
  pUnionDesc->bMasterInterface = pdev->tclasslist[pdev->classId].Ifs[0];
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 800867a:	4b2c      	ldr	r3, [pc, #176]	@ (800872c <USBD_CMPSIT_CDCDesc+0x2a0>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	68f9      	ldr	r1, [r7, #12]
 8008680:	202c      	movs	r0, #44	@ 0x2c
 8008682:	fb00 f202 	mul.w	r2, r0, r2
 8008686:	440a      	add	r2, r1
 8008688:	f502 7243 	add.w	r2, r2, #780	@ 0x30c
 800868c:	7812      	ldrb	r2, [r2, #0]
 800868e:	70da      	strb	r2, [r3, #3]
  pUnionDesc->bSlaveInterface = pdev->tclasslist[pdev->classId].Ifs[1];
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 8008696:	4b25      	ldr	r3, [pc, #148]	@ (800872c <USBD_CMPSIT_CDCDesc+0x2a0>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	68f9      	ldr	r1, [r7, #12]
 800869c:	202c      	movs	r0, #44	@ 0x2c
 800869e:	fb00 f202 	mul.w	r2, r0, r2
 80086a2:	440a      	add	r2, r1
 80086a4:	f202 320d 	addw	r2, r2, #781	@ 0x30d
 80086a8:	7812      	ldrb	r2, [r2, #0]
 80086aa:	711a      	strb	r2, [r3, #4]
  *Sze += (uint32_t)sizeof(USBD_CDCUnionFuncDescTypeDef);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	1d5a      	adds	r2, r3, #5
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	601a      	str	r2, [r3, #0]

  /* Append Endpoint descriptor to Configuration descriptor */
  __USBD_CMPSIT_SET_EP(pdev->tclasslist[pdev->classId].Eps[2].add, \
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681a      	ldr	r2, [r3, #0]
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	4413      	add	r3, r2
 80086be:	461a      	mov	r2, r3
 80086c0:	4b1b      	ldr	r3, [pc, #108]	@ (8008730 <USBD_CMPSIT_CDCDesc+0x2a4>)
 80086c2:	601a      	str	r2, [r3, #0]
 80086c4:	4b1a      	ldr	r3, [pc, #104]	@ (8008730 <USBD_CMPSIT_CDCDesc+0x2a4>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	2207      	movs	r2, #7
 80086ca:	701a      	strb	r2, [r3, #0]
 80086cc:	4b18      	ldr	r3, [pc, #96]	@ (8008730 <USBD_CMPSIT_CDCDesc+0x2a4>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	2205      	movs	r2, #5
 80086d2:	705a      	strb	r2, [r3, #1]
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 80086da:	4b15      	ldr	r3, [pc, #84]	@ (8008730 <USBD_CMPSIT_CDCDesc+0x2a4>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	68f9      	ldr	r1, [r7, #12]
 80086e0:	202c      	movs	r0, #44	@ 0x2c
 80086e2:	fb00 f202 	mul.w	r2, r0, r2
 80086e6:	440a      	add	r2, r1
 80086e8:	f502 7240 	add.w	r2, r2, #768	@ 0x300
 80086ec:	7812      	ldrb	r2, [r2, #0]
 80086ee:	709a      	strb	r2, [r3, #2]
 80086f0:	4b0f      	ldr	r3, [pc, #60]	@ (8008730 <USBD_CMPSIT_CDCDesc+0x2a4>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	2203      	movs	r2, #3
 80086f6:	70da      	strb	r2, [r3, #3]
 80086f8:	4b0d      	ldr	r3, [pc, #52]	@ (8008730 <USBD_CMPSIT_CDCDesc+0x2a4>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	2200      	movs	r2, #0
 80086fe:	f042 0208 	orr.w	r2, r2, #8
 8008702:	711a      	strb	r2, [r3, #4]
 8008704:	2200      	movs	r2, #0
 8008706:	715a      	strb	r2, [r3, #5]
 8008708:	78fb      	ldrb	r3, [r7, #3]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d112      	bne.n	8008734 <USBD_CMPSIT_CDCDesc+0x2a8>
 800870e:	4b08      	ldr	r3, [pc, #32]	@ (8008730 <USBD_CMPSIT_CDCDesc+0x2a4>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	2210      	movs	r2, #16
 8008714:	719a      	strb	r2, [r3, #6]
 8008716:	e011      	b.n	800873c <USBD_CMPSIT_CDCDesc+0x2b0>
 8008718:	20000a58 	.word	0x20000a58
 800871c:	20000a5c 	.word	0x20000a5c
 8008720:	20000a60 	.word	0x20000a60
 8008724:	20000a64 	.word	0x20000a64
 8008728:	20000a68 	.word	0x20000a68
 800872c:	20000a6c 	.word	0x20000a6c
 8008730:	20000a70 	.word	0x20000a70
 8008734:	4b73      	ldr	r3, [pc, #460]	@ (8008904 <USBD_CMPSIT_CDCDesc+0x478>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	2210      	movs	r2, #16
 800873a:	719a      	strb	r2, [r3, #6]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	1dda      	adds	r2, r3, #7
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	601a      	str	r2, [r3, #0]
                       USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE, CDC_HS_BINTERVAL, CDC_FS_BINTERVAL);

  /* Data Interface Descriptor */
  __USBD_CMPSIT_SET_IF(pdev->tclasslist[pdev->classId].Ifs[1], 0U, 2U, 0x0A, 0U, 0U, 0U);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681a      	ldr	r2, [r3, #0]
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	4413      	add	r3, r2
 800874e:	461a      	mov	r2, r3
 8008750:	4b6d      	ldr	r3, [pc, #436]	@ (8008908 <USBD_CMPSIT_CDCDesc+0x47c>)
 8008752:	601a      	str	r2, [r3, #0]
 8008754:	4b6c      	ldr	r3, [pc, #432]	@ (8008908 <USBD_CMPSIT_CDCDesc+0x47c>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	2209      	movs	r2, #9
 800875a:	701a      	strb	r2, [r3, #0]
 800875c:	4b6a      	ldr	r3, [pc, #424]	@ (8008908 <USBD_CMPSIT_CDCDesc+0x47c>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	2204      	movs	r2, #4
 8008762:	705a      	strb	r2, [r3, #1]
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 800876a:	4b67      	ldr	r3, [pc, #412]	@ (8008908 <USBD_CMPSIT_CDCDesc+0x47c>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	68f9      	ldr	r1, [r7, #12]
 8008770:	202c      	movs	r0, #44	@ 0x2c
 8008772:	fb00 f202 	mul.w	r2, r0, r2
 8008776:	440a      	add	r2, r1
 8008778:	f202 320d 	addw	r2, r2, #781	@ 0x30d
 800877c:	7812      	ldrb	r2, [r2, #0]
 800877e:	709a      	strb	r2, [r3, #2]
 8008780:	4b61      	ldr	r3, [pc, #388]	@ (8008908 <USBD_CMPSIT_CDCDesc+0x47c>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	2200      	movs	r2, #0
 8008786:	70da      	strb	r2, [r3, #3]
 8008788:	4b5f      	ldr	r3, [pc, #380]	@ (8008908 <USBD_CMPSIT_CDCDesc+0x47c>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	2202      	movs	r2, #2
 800878e:	711a      	strb	r2, [r3, #4]
 8008790:	4b5d      	ldr	r3, [pc, #372]	@ (8008908 <USBD_CMPSIT_CDCDesc+0x47c>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	220a      	movs	r2, #10
 8008796:	715a      	strb	r2, [r3, #5]
 8008798:	4b5b      	ldr	r3, [pc, #364]	@ (8008908 <USBD_CMPSIT_CDCDesc+0x47c>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	2200      	movs	r2, #0
 800879e:	719a      	strb	r2, [r3, #6]
 80087a0:	4b59      	ldr	r3, [pc, #356]	@ (8008908 <USBD_CMPSIT_CDCDesc+0x47c>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	2200      	movs	r2, #0
 80087a6:	71da      	strb	r2, [r3, #7]
 80087a8:	4b57      	ldr	r3, [pc, #348]	@ (8008908 <USBD_CMPSIT_CDCDesc+0x47c>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	2200      	movs	r2, #0
 80087ae:	721a      	strb	r2, [r3, #8]
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f103 0209 	add.w	r2, r3, #9
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	601a      	str	r2, [r3, #0]

  if (speed == (uint8_t)USBD_SPEED_HIGH)
 80087bc:	78fb      	ldrb	r3, [r7, #3]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d10c      	bne.n	80087dc <USBD_CMPSIT_CDCDesc+0x350>
  {
    pdev->tclasslist[pdev->classId].CurrPcktSze = CDC_DATA_HS_MAX_PACKET_SIZE;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80087c8:	68fa      	ldr	r2, [r7, #12]
 80087ca:	212c      	movs	r1, #44	@ 0x2c
 80087cc:	fb01 f303 	mul.w	r3, r1, r3
 80087d0:	4413      	add	r3, r2
 80087d2:	f503 7344 	add.w	r3, r3, #784	@ 0x310
 80087d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80087da:	601a      	str	r2, [r3, #0]
  }

  /* Append Endpoint descriptor to Configuration descriptor */
  __USBD_CMPSIT_SET_EP((pdev->tclasslist[pdev->classId].Eps[0].add), \
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681a      	ldr	r2, [r3, #0]
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	4413      	add	r3, r2
 80087e4:	461a      	mov	r2, r3
 80087e6:	4b47      	ldr	r3, [pc, #284]	@ (8008904 <USBD_CMPSIT_CDCDesc+0x478>)
 80087e8:	601a      	str	r2, [r3, #0]
 80087ea:	4b46      	ldr	r3, [pc, #280]	@ (8008904 <USBD_CMPSIT_CDCDesc+0x478>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	2207      	movs	r2, #7
 80087f0:	701a      	strb	r2, [r3, #0]
 80087f2:	4b44      	ldr	r3, [pc, #272]	@ (8008904 <USBD_CMPSIT_CDCDesc+0x478>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	2205      	movs	r2, #5
 80087f8:	705a      	strb	r2, [r3, #1]
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 8008800:	4b40      	ldr	r3, [pc, #256]	@ (8008904 <USBD_CMPSIT_CDCDesc+0x478>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	68f9      	ldr	r1, [r7, #12]
 8008806:	202c      	movs	r0, #44	@ 0x2c
 8008808:	fb00 f202 	mul.w	r2, r0, r2
 800880c:	440a      	add	r2, r1
 800880e:	f502 723e 	add.w	r2, r2, #760	@ 0x2f8
 8008812:	7812      	ldrb	r2, [r2, #0]
 8008814:	709a      	strb	r2, [r3, #2]
 8008816:	4b3b      	ldr	r3, [pc, #236]	@ (8008904 <USBD_CMPSIT_CDCDesc+0x478>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	2202      	movs	r2, #2
 800881c:	70da      	strb	r2, [r3, #3]
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008824:	68fa      	ldr	r2, [r7, #12]
 8008826:	212c      	movs	r1, #44	@ 0x2c
 8008828:	fb01 f303 	mul.w	r3, r1, r3
 800882c:	4413      	add	r3, r2
 800882e:	f503 7344 	add.w	r3, r3, #784	@ 0x310
 8008832:	681a      	ldr	r2, [r3, #0]
 8008834:	4b33      	ldr	r3, [pc, #204]	@ (8008904 <USBD_CMPSIT_CDCDesc+0x478>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	b292      	uxth	r2, r2
 800883a:	809a      	strh	r2, [r3, #4]
 800883c:	78fb      	ldrb	r3, [r7, #3]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d104      	bne.n	800884c <USBD_CMPSIT_CDCDesc+0x3c0>
 8008842:	4b30      	ldr	r3, [pc, #192]	@ (8008904 <USBD_CMPSIT_CDCDesc+0x478>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	2200      	movs	r2, #0
 8008848:	719a      	strb	r2, [r3, #6]
 800884a:	e003      	b.n	8008854 <USBD_CMPSIT_CDCDesc+0x3c8>
 800884c:	4b2d      	ldr	r3, [pc, #180]	@ (8008904 <USBD_CMPSIT_CDCDesc+0x478>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	2200      	movs	r2, #0
 8008852:	719a      	strb	r2, [r3, #6]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	1dda      	adds	r2, r3, #7
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	601a      	str	r2, [r3, #0]
                       (USBD_EP_TYPE_BULK), (pdev->tclasslist[pdev->classId].CurrPcktSze), (0U), (0U));

  /* Append Endpoint descriptor to Configuration descriptor */
  __USBD_CMPSIT_SET_EP((pdev->tclasslist[pdev->classId].Eps[1].add), \
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681a      	ldr	r2, [r3, #0]
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	4413      	add	r3, r2
 8008866:	461a      	mov	r2, r3
 8008868:	4b26      	ldr	r3, [pc, #152]	@ (8008904 <USBD_CMPSIT_CDCDesc+0x478>)
 800886a:	601a      	str	r2, [r3, #0]
 800886c:	4b25      	ldr	r3, [pc, #148]	@ (8008904 <USBD_CMPSIT_CDCDesc+0x478>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	2207      	movs	r2, #7
 8008872:	701a      	strb	r2, [r3, #0]
 8008874:	4b23      	ldr	r3, [pc, #140]	@ (8008904 <USBD_CMPSIT_CDCDesc+0x478>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	2205      	movs	r2, #5
 800887a:	705a      	strb	r2, [r3, #1]
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 8008882:	4b20      	ldr	r3, [pc, #128]	@ (8008904 <USBD_CMPSIT_CDCDesc+0x478>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	68f9      	ldr	r1, [r7, #12]
 8008888:	202c      	movs	r0, #44	@ 0x2c
 800888a:	fb00 f202 	mul.w	r2, r0, r2
 800888e:	440a      	add	r2, r1
 8008890:	f502 723f 	add.w	r2, r2, #764	@ 0x2fc
 8008894:	7812      	ldrb	r2, [r2, #0]
 8008896:	709a      	strb	r2, [r3, #2]
 8008898:	4b1a      	ldr	r3, [pc, #104]	@ (8008904 <USBD_CMPSIT_CDCDesc+0x478>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	2202      	movs	r2, #2
 800889e:	70da      	strb	r2, [r3, #3]
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80088a6:	68fa      	ldr	r2, [r7, #12]
 80088a8:	212c      	movs	r1, #44	@ 0x2c
 80088aa:	fb01 f303 	mul.w	r3, r1, r3
 80088ae:	4413      	add	r3, r2
 80088b0:	f503 7344 	add.w	r3, r3, #784	@ 0x310
 80088b4:	681a      	ldr	r2, [r3, #0]
 80088b6:	4b13      	ldr	r3, [pc, #76]	@ (8008904 <USBD_CMPSIT_CDCDesc+0x478>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	b292      	uxth	r2, r2
 80088bc:	809a      	strh	r2, [r3, #4]
 80088be:	78fb      	ldrb	r3, [r7, #3]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d104      	bne.n	80088ce <USBD_CMPSIT_CDCDesc+0x442>
 80088c4:	4b0f      	ldr	r3, [pc, #60]	@ (8008904 <USBD_CMPSIT_CDCDesc+0x478>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	2200      	movs	r2, #0
 80088ca:	719a      	strb	r2, [r3, #6]
 80088cc:	e003      	b.n	80088d6 <USBD_CMPSIT_CDCDesc+0x44a>
 80088ce:	4b0d      	ldr	r3, [pc, #52]	@ (8008904 <USBD_CMPSIT_CDCDesc+0x478>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	2200      	movs	r2, #0
 80088d4:	719a      	strb	r2, [r3, #6]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	1dda      	adds	r2, r3, #7
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	601a      	str	r2, [r3, #0]
                       (USBD_EP_TYPE_BULK), (pdev->tclasslist[pdev->classId].CurrPcktSze), (0U), (0U));

  /* Update Config Descriptor and IAD descriptor */
  ((USBD_ConfigDescTypeDef *)pConf)->bNumInterfaces += 2U;
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	791a      	ldrb	r2, [r3, #4]
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	3202      	adds	r2, #2
 80088e8:	b2d2      	uxtb	r2, r2
 80088ea:	711a      	strb	r2, [r3, #4]
  ((USBD_ConfigDescTypeDef *)pConf)->wTotalLength = (uint16_t)(*Sze);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681a      	ldr	r2, [r3, #0]
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	b292      	uxth	r2, r2
 80088f4:	805a      	strh	r2, [r3, #2]
}
 80088f6:	bf00      	nop
 80088f8:	3714      	adds	r7, #20
 80088fa:	46bd      	mov	sp, r7
 80088fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008900:	4770      	bx	lr
 8008902:	bf00      	nop
 8008904:	20000a70 	.word	0x20000a70
 8008908:	20000a5c 	.word	0x20000a5c

0800890c <USBD_CMPSIT_SetClassID>:
  * @param  Class: Class type, can be CLASS_TYPE_NONE if requested to find class from setup request
  * @param  Instance: Instance number of the class (0 if first/unique instance, >0 otherwise)
  * @retval The Class ID, The pdev->classId is set with the value of the selected class ID.
  */
uint32_t  USBD_CMPSIT_SetClassID(USBD_HandleTypeDef *pdev, USBD_CompositeClassTypeDef Class, uint32_t Instance)
{
 800890c:	b480      	push	{r7}
 800890e:	b087      	sub	sp, #28
 8008910:	af00      	add	r7, sp, #0
 8008912:	60f8      	str	r0, [r7, #12]
 8008914:	460b      	mov	r3, r1
 8008916:	607a      	str	r2, [r7, #4]
 8008918:	72fb      	strb	r3, [r7, #11]
  uint32_t idx;
  uint32_t inst = 0U;
 800891a:	2300      	movs	r3, #0
 800891c:	613b      	str	r3, [r7, #16]

  /* Unroll all already activated classes */
  for (idx = 0U; idx < pdev->NumClasses; idx++)
 800891e:	2300      	movs	r3, #0
 8008920:	617b      	str	r3, [r7, #20]
 8008922:	e026      	b.n	8008972 <USBD_CMPSIT_SetClassID+0x66>
  {
    /* Check if the class correspond to the requested type and if it is active */
    if (((USBD_CompositeClassTypeDef)(pdev->tclasslist[idx].ClassType) == Class) &&
 8008924:	68fa      	ldr	r2, [r7, #12]
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	212c      	movs	r1, #44	@ 0x2c
 800892a:	fb01 f303 	mul.w	r3, r1, r3
 800892e:	4413      	add	r3, r2
 8008930:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 8008934:	781b      	ldrb	r3, [r3, #0]
 8008936:	7afa      	ldrb	r2, [r7, #11]
 8008938:	429a      	cmp	r2, r3
 800893a:	d117      	bne.n	800896c <USBD_CMPSIT_SetClassID+0x60>
        ((pdev->tclasslist[idx].Active) == 1U))
 800893c:	68fa      	ldr	r2, [r7, #12]
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	212c      	movs	r1, #44	@ 0x2c
 8008942:	fb01 f303 	mul.w	r3, r1, r3
 8008946:	4413      	add	r3, r2
 8008948:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 800894c:	681b      	ldr	r3, [r3, #0]
    if (((USBD_CompositeClassTypeDef)(pdev->tclasslist[idx].ClassType) == Class) &&
 800894e:	2b01      	cmp	r3, #1
 8008950:	d10c      	bne.n	800896c <USBD_CMPSIT_SetClassID+0x60>
    {
      if (inst == Instance)
 8008952:	693a      	ldr	r2, [r7, #16]
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	429a      	cmp	r2, r3
 8008958:	d105      	bne.n	8008966 <USBD_CMPSIT_SetClassID+0x5a>
      {
        /* Set the new class ID */
        pdev->classId = idx;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	697a      	ldr	r2, [r7, #20]
 800895e:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0

        /* Return the class ID value */
        return (idx);
 8008962:	697b      	ldr	r3, [r7, #20]
 8008964:	e00c      	b.n	8008980 <USBD_CMPSIT_SetClassID+0x74>
      }
      else
      {
        /* Increment instance index and look for next instance */
        inst++;
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	3301      	adds	r3, #1
 800896a:	613b      	str	r3, [r7, #16]
  for (idx = 0U; idx < pdev->NumClasses; idx++)
 800896c:	697b      	ldr	r3, [r7, #20]
 800896e:	3301      	adds	r3, #1
 8008970:	617b      	str	r3, [r7, #20]
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	f8d3 32e4 	ldr.w	r3, [r3, #740]	@ 0x2e4
 8008978:	697a      	ldr	r2, [r7, #20]
 800897a:	429a      	cmp	r2, r3
 800897c:	d3d2      	bcc.n	8008924 <USBD_CMPSIT_SetClassID+0x18>
      }
    }
  }

  /* No class found, return 0xFF */
  return 0xFFU;
 800897e:	23ff      	movs	r3, #255	@ 0xff
}
 8008980:	4618      	mov	r0, r3
 8008982:	371c      	adds	r7, #28
 8008984:	46bd      	mov	sp, r7
 8008986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898a:	4770      	bx	lr

0800898c <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b084      	sub	sp, #16
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	460b      	mov	r3, r1
 8008996:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8008998:	2010      	movs	r0, #16
 800899a:	f000 fbe9 	bl	8009170 <USBD_static_malloc>
 800899e:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d10a      	bne.n	80089bc <USBD_HID_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80089ac:	687a      	ldr	r2, [r7, #4]
 80089ae:	33b0      	adds	r3, #176	@ 0xb0
 80089b0:	009b      	lsls	r3, r3, #2
 80089b2:	4413      	add	r3, r2
 80089b4:	2200      	movs	r2, #0
 80089b6:	605a      	str	r2, [r3, #4]
    return (uint8_t)USBD_EMEM;
 80089b8:	2302      	movs	r3, #2
 80089ba:	e057      	b.n	8008a6c <USBD_HID_Init+0xe0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80089c2:	687a      	ldr	r2, [r7, #4]
 80089c4:	33b0      	adds	r3, #176	@ 0xb0
 80089c6:	009b      	lsls	r3, r3, #2
 80089c8:	4413      	add	r3, r2
 80089ca:	68fa      	ldr	r2, [r7, #12]
 80089cc:	605a      	str	r2, [r3, #4]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80089d4:	687a      	ldr	r2, [r7, #4]
 80089d6:	33b0      	adds	r3, #176	@ 0xb0
 80089d8:	009b      	lsls	r3, r3, #2
 80089da:	4413      	add	r3, r2
 80089dc:	685a      	ldr	r2, [r3, #4]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80089ea:	b2db      	uxtb	r3, r3
 80089ec:	2203      	movs	r2, #3
 80089ee:	2180      	movs	r1, #128	@ 0x80
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f001 f869 	bl	8009ac8 <USBD_CoreGetEPAdd>
 80089f6:	4603      	mov	r3, r0
 80089f8:	461a      	mov	r2, r3
 80089fa:	4b1e      	ldr	r3, [pc, #120]	@ (8008a74 <USBD_HID_Init+0xe8>)
 80089fc:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	7c1b      	ldrb	r3, [r3, #16]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d10d      	bne.n	8008a22 <USBD_HID_Init+0x96>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8008a06:	4b1b      	ldr	r3, [pc, #108]	@ (8008a74 <USBD_HID_Init+0xe8>)
 8008a08:	781b      	ldrb	r3, [r3, #0]
 8008a0a:	f003 020f 	and.w	r2, r3, #15
 8008a0e:	6879      	ldr	r1, [r7, #4]
 8008a10:	4613      	mov	r3, r2
 8008a12:	009b      	lsls	r3, r3, #2
 8008a14:	4413      	add	r3, r2
 8008a16:	009b      	lsls	r3, r3, #2
 8008a18:	440b      	add	r3, r1
 8008a1a:	3326      	adds	r3, #38	@ 0x26
 8008a1c:	2207      	movs	r2, #7
 8008a1e:	801a      	strh	r2, [r3, #0]
 8008a20:	e00c      	b.n	8008a3c <USBD_HID_Init+0xb0>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8008a22:	4b14      	ldr	r3, [pc, #80]	@ (8008a74 <USBD_HID_Init+0xe8>)
 8008a24:	781b      	ldrb	r3, [r3, #0]
 8008a26:	f003 020f 	and.w	r2, r3, #15
 8008a2a:	6879      	ldr	r1, [r7, #4]
 8008a2c:	4613      	mov	r3, r2
 8008a2e:	009b      	lsls	r3, r3, #2
 8008a30:	4413      	add	r3, r2
 8008a32:	009b      	lsls	r3, r3, #2
 8008a34:	440b      	add	r3, r1
 8008a36:	3326      	adds	r3, #38	@ 0x26
 8008a38:	220a      	movs	r2, #10
 8008a3a:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8008a3c:	4b0d      	ldr	r3, [pc, #52]	@ (8008a74 <USBD_HID_Init+0xe8>)
 8008a3e:	7819      	ldrb	r1, [r3, #0]
 8008a40:	2304      	movs	r3, #4
 8008a42:	2203      	movs	r2, #3
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	f000 fa9a 	bl	8008f7e <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8008a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8008a74 <USBD_HID_Init+0xe8>)
 8008a4c:	781b      	ldrb	r3, [r3, #0]
 8008a4e:	f003 020f 	and.w	r2, r3, #15
 8008a52:	6879      	ldr	r1, [r7, #4]
 8008a54:	4613      	mov	r3, r2
 8008a56:	009b      	lsls	r3, r3, #2
 8008a58:	4413      	add	r3, r2
 8008a5a:	009b      	lsls	r3, r3, #2
 8008a5c:	440b      	add	r3, r1
 8008a5e:	3324      	adds	r3, #36	@ 0x24
 8008a60:	2201      	movs	r2, #1
 8008a62:	801a      	strh	r2, [r3, #0]

  hhid->state = USBD_HID_IDLE;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	2200      	movs	r2, #0
 8008a68:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8008a6a:	2300      	movs	r3, #0
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3710      	adds	r7, #16
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}
 8008a74:	2000017e 	.word	0x2000017e

08008a78 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b082      	sub	sp, #8
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
 8008a80:	460b      	mov	r3, r1
 8008a82:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008a8a:	b2db      	uxtb	r3, r3
 8008a8c:	2203      	movs	r2, #3
 8008a8e:	2180      	movs	r1, #128	@ 0x80
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f001 f819 	bl	8009ac8 <USBD_CoreGetEPAdd>
 8008a96:	4603      	mov	r3, r0
 8008a98:	461a      	mov	r2, r3
 8008a9a:	4b22      	ldr	r3, [pc, #136]	@ (8008b24 <USBD_HID_DeInit+0xac>)
 8008a9c:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8008a9e:	4b21      	ldr	r3, [pc, #132]	@ (8008b24 <USBD_HID_DeInit+0xac>)
 8008aa0:	781b      	ldrb	r3, [r3, #0]
 8008aa2:	4619      	mov	r1, r3
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f000 fa8a 	bl	8008fbe <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8008aaa:	4b1e      	ldr	r3, [pc, #120]	@ (8008b24 <USBD_HID_DeInit+0xac>)
 8008aac:	781b      	ldrb	r3, [r3, #0]
 8008aae:	f003 020f 	and.w	r2, r3, #15
 8008ab2:	6879      	ldr	r1, [r7, #4]
 8008ab4:	4613      	mov	r3, r2
 8008ab6:	009b      	lsls	r3, r3, #2
 8008ab8:	4413      	add	r3, r2
 8008aba:	009b      	lsls	r3, r3, #2
 8008abc:	440b      	add	r3, r1
 8008abe:	3324      	adds	r3, #36	@ 0x24
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8008ac4:	4b17      	ldr	r3, [pc, #92]	@ (8008b24 <USBD_HID_DeInit+0xac>)
 8008ac6:	781b      	ldrb	r3, [r3, #0]
 8008ac8:	f003 020f 	and.w	r2, r3, #15
 8008acc:	6879      	ldr	r1, [r7, #4]
 8008ace:	4613      	mov	r3, r2
 8008ad0:	009b      	lsls	r3, r3, #2
 8008ad2:	4413      	add	r3, r2
 8008ad4:	009b      	lsls	r3, r3, #2
 8008ad6:	440b      	add	r3, r1
 8008ad8:	3326      	adds	r3, #38	@ 0x26
 8008ada:	2200      	movs	r2, #0
 8008adc:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008ae4:	687a      	ldr	r2, [r7, #4]
 8008ae6:	33b0      	adds	r3, #176	@ 0xb0
 8008ae8:	009b      	lsls	r3, r3, #2
 8008aea:	4413      	add	r3, r2
 8008aec:	685b      	ldr	r3, [r3, #4]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d013      	beq.n	8008b1a <USBD_HID_DeInit+0xa2>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008af8:	687a      	ldr	r2, [r7, #4]
 8008afa:	33b0      	adds	r3, #176	@ 0xb0
 8008afc:	009b      	lsls	r3, r3, #2
 8008afe:	4413      	add	r3, r2
 8008b00:	685b      	ldr	r3, [r3, #4]
 8008b02:	4618      	mov	r0, r3
 8008b04:	f000 fb42 	bl	800918c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008b0e:	687a      	ldr	r2, [r7, #4]
 8008b10:	33b0      	adds	r3, #176	@ 0xb0
 8008b12:	009b      	lsls	r3, r3, #2
 8008b14:	4413      	add	r3, r2
 8008b16:	2200      	movs	r2, #0
 8008b18:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)USBD_OK;
 8008b1a:	2300      	movs	r3, #0
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3708      	adds	r7, #8
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}
 8008b24:	2000017e 	.word	0x2000017e

08008b28 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b086      	sub	sp, #24
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
 8008b30:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008b38:	687a      	ldr	r2, [r7, #4]
 8008b3a:	33b0      	adds	r3, #176	@ 0xb0
 8008b3c:	009b      	lsls	r3, r3, #2
 8008b3e:	4413      	add	r3, r2
 8008b40:	685b      	ldr	r3, [r3, #4]
 8008b42:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b44:	2300      	movs	r3, #0
 8008b46:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d101      	bne.n	8008b56 <USBD_HID_Setup+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008b52:	2303      	movs	r3, #3
 8008b54:	e0e7      	b.n	8008d26 <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	781b      	ldrb	r3, [r3, #0]
 8008b5a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d045      	beq.n	8008bee <USBD_HID_Setup+0xc6>
 8008b62:	2b20      	cmp	r3, #32
 8008b64:	f040 80d7 	bne.w	8008d16 <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	785b      	ldrb	r3, [r3, #1]
 8008b6c:	3b02      	subs	r3, #2
 8008b6e:	2b09      	cmp	r3, #9
 8008b70:	d835      	bhi.n	8008bde <USBD_HID_Setup+0xb6>
 8008b72:	a201      	add	r2, pc, #4	@ (adr r2, 8008b78 <USBD_HID_Setup+0x50>)
 8008b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b78:	08008bcf 	.word	0x08008bcf
 8008b7c:	08008baf 	.word	0x08008baf
 8008b80:	08008bdf 	.word	0x08008bdf
 8008b84:	08008bdf 	.word	0x08008bdf
 8008b88:	08008bdf 	.word	0x08008bdf
 8008b8c:	08008bdf 	.word	0x08008bdf
 8008b90:	08008bdf 	.word	0x08008bdf
 8008b94:	08008bdf 	.word	0x08008bdf
 8008b98:	08008bbd 	.word	0x08008bbd
 8008b9c:	08008ba1 	.word	0x08008ba1
      {
        case USBD_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	885b      	ldrh	r3, [r3, #2]
 8008ba4:	b2db      	uxtb	r3, r3
 8008ba6:	461a      	mov	r2, r3
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	601a      	str	r2, [r3, #0]
          break;
 8008bac:	e01e      	b.n	8008bec <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	2201      	movs	r2, #1
 8008bb2:	4619      	mov	r1, r3
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f001 ff86 	bl	800aac6 <USBD_CtlSendData>
          break;
 8008bba:	e017      	b.n	8008bec <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	885b      	ldrh	r3, [r3, #2]
 8008bc0:	0a1b      	lsrs	r3, r3, #8
 8008bc2:	b29b      	uxth	r3, r3
 8008bc4:	b2db      	uxtb	r3, r3
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	605a      	str	r2, [r3, #4]
          break;
 8008bcc:	e00e      	b.n	8008bec <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	3304      	adds	r3, #4
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	4619      	mov	r1, r3
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f001 ff75 	bl	800aac6 <USBD_CtlSendData>
          break;
 8008bdc:	e006      	b.n	8008bec <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8008bde:	6839      	ldr	r1, [r7, #0]
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f001 fdf0 	bl	800a7c6 <USBD_CtlError>
          ret = USBD_FAIL;
 8008be6:	2303      	movs	r3, #3
 8008be8:	75fb      	strb	r3, [r7, #23]
          break;
 8008bea:	bf00      	nop
      }
      break;
 8008bec:	e09a      	b.n	8008d24 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	785b      	ldrb	r3, [r3, #1]
 8008bf2:	2b0b      	cmp	r3, #11
 8008bf4:	f200 8086 	bhi.w	8008d04 <USBD_HID_Setup+0x1dc>
 8008bf8:	a201      	add	r2, pc, #4	@ (adr r2, 8008c00 <USBD_HID_Setup+0xd8>)
 8008bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bfe:	bf00      	nop
 8008c00:	08008c31 	.word	0x08008c31
 8008c04:	08008d13 	.word	0x08008d13
 8008c08:	08008d05 	.word	0x08008d05
 8008c0c:	08008d05 	.word	0x08008d05
 8008c10:	08008d05 	.word	0x08008d05
 8008c14:	08008d05 	.word	0x08008d05
 8008c18:	08008c5b 	.word	0x08008c5b
 8008c1c:	08008d05 	.word	0x08008d05
 8008c20:	08008d05 	.word	0x08008d05
 8008c24:	08008d05 	.word	0x08008d05
 8008c28:	08008cb3 	.word	0x08008cb3
 8008c2c:	08008cdd 	.word	0x08008cdd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c36:	b2db      	uxtb	r3, r3
 8008c38:	2b03      	cmp	r3, #3
 8008c3a:	d107      	bne.n	8008c4c <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008c3c:	f107 030a 	add.w	r3, r7, #10
 8008c40:	2202      	movs	r2, #2
 8008c42:	4619      	mov	r1, r3
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f001 ff3e 	bl	800aac6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008c4a:	e063      	b.n	8008d14 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8008c4c:	6839      	ldr	r1, [r7, #0]
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f001 fdb9 	bl	800a7c6 <USBD_CtlError>
            ret = USBD_FAIL;
 8008c54:	2303      	movs	r3, #3
 8008c56:	75fb      	strb	r3, [r7, #23]
          break;
 8008c58:	e05c      	b.n	8008d14 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	885b      	ldrh	r3, [r3, #2]
 8008c5e:	0a1b      	lsrs	r3, r3, #8
 8008c60:	b29b      	uxth	r3, r3
 8008c62:	2b22      	cmp	r3, #34	@ 0x22
 8008c64:	d108      	bne.n	8008c78 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	88db      	ldrh	r3, [r3, #6]
 8008c6a:	2b4a      	cmp	r3, #74	@ 0x4a
 8008c6c:	bf28      	it	cs
 8008c6e:	234a      	movcs	r3, #74	@ 0x4a
 8008c70:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8008c72:	4b2f      	ldr	r3, [pc, #188]	@ (8008d30 <USBD_HID_Setup+0x208>)
 8008c74:	613b      	str	r3, [r7, #16]
 8008c76:	e015      	b.n	8008ca4 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	885b      	ldrh	r3, [r3, #2]
 8008c7c:	0a1b      	lsrs	r3, r3, #8
 8008c7e:	b29b      	uxth	r3, r3
 8008c80:	2b21      	cmp	r3, #33	@ 0x21
 8008c82:	d108      	bne.n	8008c96 <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8008c84:	4b2b      	ldr	r3, [pc, #172]	@ (8008d34 <USBD_HID_Setup+0x20c>)
 8008c86:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	88db      	ldrh	r3, [r3, #6]
 8008c8c:	2b09      	cmp	r3, #9
 8008c8e:	bf28      	it	cs
 8008c90:	2309      	movcs	r3, #9
 8008c92:	82bb      	strh	r3, [r7, #20]
 8008c94:	e006      	b.n	8008ca4 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8008c96:	6839      	ldr	r1, [r7, #0]
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f001 fd94 	bl	800a7c6 <USBD_CtlError>
            ret = USBD_FAIL;
 8008c9e:	2303      	movs	r3, #3
 8008ca0:	75fb      	strb	r3, [r7, #23]
            break;
 8008ca2:	e037      	b.n	8008d14 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8008ca4:	8abb      	ldrh	r3, [r7, #20]
 8008ca6:	461a      	mov	r2, r3
 8008ca8:	6939      	ldr	r1, [r7, #16]
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f001 ff0b 	bl	800aac6 <USBD_CtlSendData>
          break;
 8008cb0:	e030      	b.n	8008d14 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008cb8:	b2db      	uxtb	r3, r3
 8008cba:	2b03      	cmp	r3, #3
 8008cbc:	d107      	bne.n	8008cce <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	3308      	adds	r3, #8
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	4619      	mov	r1, r3
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f001 fefd 	bl	800aac6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008ccc:	e022      	b.n	8008d14 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8008cce:	6839      	ldr	r1, [r7, #0]
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f001 fd78 	bl	800a7c6 <USBD_CtlError>
            ret = USBD_FAIL;
 8008cd6:	2303      	movs	r3, #3
 8008cd8:	75fb      	strb	r3, [r7, #23]
          break;
 8008cda:	e01b      	b.n	8008d14 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ce2:	b2db      	uxtb	r3, r3
 8008ce4:	2b03      	cmp	r3, #3
 8008ce6:	d106      	bne.n	8008cf6 <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	885b      	ldrh	r3, [r3, #2]
 8008cec:	b2db      	uxtb	r3, r3
 8008cee:	461a      	mov	r2, r3
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008cf4:	e00e      	b.n	8008d14 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8008cf6:	6839      	ldr	r1, [r7, #0]
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f001 fd64 	bl	800a7c6 <USBD_CtlError>
            ret = USBD_FAIL;
 8008cfe:	2303      	movs	r3, #3
 8008d00:	75fb      	strb	r3, [r7, #23]
          break;
 8008d02:	e007      	b.n	8008d14 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008d04:	6839      	ldr	r1, [r7, #0]
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f001 fd5d 	bl	800a7c6 <USBD_CtlError>
          ret = USBD_FAIL;
 8008d0c:	2303      	movs	r3, #3
 8008d0e:	75fb      	strb	r3, [r7, #23]
          break;
 8008d10:	e000      	b.n	8008d14 <USBD_HID_Setup+0x1ec>
          break;
 8008d12:	bf00      	nop
      }
      break;
 8008d14:	e006      	b.n	8008d24 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8008d16:	6839      	ldr	r1, [r7, #0]
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f001 fd54 	bl	800a7c6 <USBD_CtlError>
      ret = USBD_FAIL;
 8008d1e:	2303      	movs	r3, #3
 8008d20:	75fb      	strb	r3, [r7, #23]
      break;
 8008d22:	bf00      	nop
  }

  return (uint8_t)ret;
 8008d24:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3718      	adds	r7, #24
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}
 8008d2e:	bf00      	nop
 8008d30:	20000134 	.word	0x20000134
 8008d34:	20000128 	.word	0x20000128

08008d38 <USBD_HID_SendReport>:
  * @param  ClassId: The Class ID
  * @retval status
  */
#ifdef USE_USBD_COMPOSITE
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len, uint8_t ClassId)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b086      	sub	sp, #24
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	60f8      	str	r0, [r7, #12]
 8008d40:	60b9      	str	r1, [r7, #8]
 8008d42:	4611      	mov	r1, r2
 8008d44:	461a      	mov	r2, r3
 8008d46:	460b      	mov	r3, r1
 8008d48:	80fb      	strh	r3, [r7, #6]
 8008d4a:	4613      	mov	r3, r2
 8008d4c:	717b      	strb	r3, [r7, #5]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
 8008d4e:	797b      	ldrb	r3, [r7, #5]
 8008d50:	68fa      	ldr	r2, [r7, #12]
 8008d52:	33b0      	adds	r3, #176	@ 0xb0
 8008d54:	009b      	lsls	r3, r3, #2
 8008d56:	4413      	add	r3, r2
 8008d58:	685b      	ldr	r3, [r3, #4]
 8008d5a:	617b      	str	r3, [r7, #20]
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 8008d5c:	697b      	ldr	r3, [r7, #20]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d101      	bne.n	8008d66 <USBD_HID_SendReport+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008d62:	2303      	movs	r3, #3
 8008d64:	e01e      	b.n	8008da4 <USBD_HID_SendReport+0x6c>
  }

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
 8008d66:	797b      	ldrb	r3, [r7, #5]
 8008d68:	2203      	movs	r2, #3
 8008d6a:	2180      	movs	r1, #128	@ 0x80
 8008d6c:	68f8      	ldr	r0, [r7, #12]
 8008d6e:	f000 feab 	bl	8009ac8 <USBD_CoreGetEPAdd>
 8008d72:	4603      	mov	r3, r0
 8008d74:	461a      	mov	r2, r3
 8008d76:	4b0d      	ldr	r3, [pc, #52]	@ (8008dac <USBD_HID_SendReport+0x74>)
 8008d78:	701a      	strb	r2, [r3, #0]
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d80:	b2db      	uxtb	r3, r3
 8008d82:	2b03      	cmp	r3, #3
 8008d84:	d10d      	bne.n	8008da2 <USBD_HID_SendReport+0x6a>
  {
    if (hhid->state == USBD_HID_IDLE)
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	7b1b      	ldrb	r3, [r3, #12]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d109      	bne.n	8008da2 <USBD_HID_SendReport+0x6a>
    {
      hhid->state = USBD_HID_BUSY;
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	2201      	movs	r2, #1
 8008d92:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 8008d94:	4b05      	ldr	r3, [pc, #20]	@ (8008dac <USBD_HID_SendReport+0x74>)
 8008d96:	7819      	ldrb	r1, [r3, #0]
 8008d98:	88fb      	ldrh	r3, [r7, #6]
 8008d9a:	68ba      	ldr	r2, [r7, #8]
 8008d9c:	68f8      	ldr	r0, [r7, #12]
 8008d9e:	f000 f99e 	bl	80090de <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8008da2:	2300      	movs	r3, #0
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	3718      	adds	r7, #24
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}
 8008dac:	2000017e 	.word	0x2000017e

08008db0 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008db0:	b480      	push	{r7}
 8008db2:	b083      	sub	sp, #12
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	460b      	mov	r3, r1
 8008dba:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8008dc2:	687a      	ldr	r2, [r7, #4]
 8008dc4:	33b0      	adds	r3, #176	@ 0xb0
 8008dc6:	009b      	lsls	r3, r3, #2
 8008dc8:	4413      	add	r3, r2
 8008dca:	685b      	ldr	r3, [r3, #4]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8008dd0:	2300      	movs	r3, #0
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	370c      	adds	r7, #12
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ddc:	4770      	bx	lr

08008dde <HAL_PCD_SetupStageCallback>:
extern PCD_HandleTypeDef hpcd_USB_DRD_FS;
/* Private function prototypes -----------------------------------------------*/
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status);
/* Private functions ---------------------------------------------------------*/
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8008dde:	b580      	push	{r7, lr}
 8008de0:	b082      	sub	sp, #8
 8008de2:	af00      	add	r7, sp, #0
 8008de4:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f8d3 22dc 	ldr.w	r2, [r3, #732]	@ 0x2dc
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 8008df2:	4619      	mov	r1, r3
 8008df4:	4610      	mov	r0, r2
 8008df6:	f000 fb56 	bl	80094a6 <USBD_LL_SetupStage>
}
 8008dfa:	bf00      	nop
 8008dfc:	3708      	adds	r7, #8
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}

08008e02 <HAL_PCD_DataOutStageCallback>:
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8008e02:	b580      	push	{r7, lr}
 8008e04:	b082      	sub	sp, #8
 8008e06:	af00      	add	r7, sp, #0
 8008e08:	6078      	str	r0, [r7, #4]
 8008e0a:	460b      	mov	r3, r1
 8008e0c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f8d3 02dc 	ldr.w	r0, [r3, #732]	@ 0x2dc
 8008e14:	78fa      	ldrb	r2, [r7, #3]
 8008e16:	6879      	ldr	r1, [r7, #4]
 8008e18:	4613      	mov	r3, r2
 8008e1a:	009b      	lsls	r3, r3, #2
 8008e1c:	4413      	add	r3, r2
 8008e1e:	00db      	lsls	r3, r3, #3
 8008e20:	440b      	add	r3, r1
 8008e22:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8008e26:	681a      	ldr	r2, [r3, #0]
 8008e28:	78fb      	ldrb	r3, [r7, #3]
 8008e2a:	4619      	mov	r1, r3
 8008e2c:	f000 fb90 	bl	8009550 <USBD_LL_DataOutStage>
}
 8008e30:	bf00      	nop
 8008e32:	3708      	adds	r7, #8
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}

08008e38 <HAL_PCD_DataInStageCallback>:
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b082      	sub	sp, #8
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
 8008e40:	460b      	mov	r3, r1
 8008e42:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f8d3 02dc 	ldr.w	r0, [r3, #732]	@ 0x2dc
 8008e4a:	78fa      	ldrb	r2, [r7, #3]
 8008e4c:	6879      	ldr	r1, [r7, #4]
 8008e4e:	4613      	mov	r3, r2
 8008e50:	009b      	lsls	r3, r3, #2
 8008e52:	4413      	add	r3, r2
 8008e54:	00db      	lsls	r3, r3, #3
 8008e56:	440b      	add	r3, r1
 8008e58:	3328      	adds	r3, #40	@ 0x28
 8008e5a:	681a      	ldr	r2, [r3, #0]
 8008e5c:	78fb      	ldrb	r3, [r7, #3]
 8008e5e:	4619      	mov	r1, r3
 8008e60:	f000 fc29 	bl	80096b6 <USBD_LL_DataInStage>
}
 8008e64:	bf00      	nop
 8008e66:	3708      	adds	r7, #8
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}

08008e6c <HAL_PCD_SOFCallback>:
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b082      	sub	sp, #8
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	f000 fd4d 	bl	800991a <USBD_LL_SOF>
}
 8008e80:	bf00      	nop
 8008e82:	3708      	adds	r7, #8
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}

08008e88 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b084      	sub	sp, #16
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008e90:	2301      	movs	r3, #1
 8008e92:	73fb      	strb	r3, [r7, #15]
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	79db      	ldrb	r3, [r3, #7]
 8008e98:	2b02      	cmp	r3, #2
 8008e9a:	d001      	beq.n	8008ea0 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008e9c:	f7f7 fbba 	bl	8000614 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 8008ea6:	7bfa      	ldrb	r2, [r7, #15]
 8008ea8:	4611      	mov	r1, r2
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f000 fd25 	bl	80098fa <USBD_LL_SetSpeed>
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f000 fcaf 	bl	800981a <USBD_LL_Reset>
}
 8008ebc:	bf00      	nop
 8008ebe:	3710      	adds	r7, #16
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}

08008ec4 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b082      	sub	sp, #8
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
	/* Link the driver to the stack */
	pdev->pData  = &hpcd_USB_DRD_FS;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	4a20      	ldr	r2, [pc, #128]	@ (8008f50 <USBD_LL_Init+0x8c>)
 8008ed0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
	hpcd_USB_DRD_FS.pData = pdev;
 8008ed4:	4a1e      	ldr	r2, [pc, #120]	@ (8008f50 <USBD_LL_Init+0x8c>)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f8c2 32dc 	str.w	r3, [r2, #732]	@ 0x2dc
	/* Initialize LL Driver */
	MX_USB_PCD_Init();
 8008edc:	f7f7 fb0e 	bl	80004fc <MX_USB_PCD_Init>
	/* Control Endpoints */
	HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x20);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8008ee6:	2320      	movs	r3, #32
 8008ee8:	2200      	movs	r2, #0
 8008eea:	2100      	movs	r1, #0
 8008eec:	f7f9 ffba 	bl	8002e64 <HAL_PCDEx_PMAConfig>
	HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x60);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8008ef6:	2360      	movs	r3, #96	@ 0x60
 8008ef8:	2200      	movs	r2, #0
 8008efa:	2180      	movs	r1, #128	@ 0x80
 8008efc:	f7f9 ffb2 	bl	8002e64 <HAL_PCDEx_PMAConfig>
	/* HID Endpoints */
	HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , HID_EPIN_ADDR , PCD_SNG_BUF, 0xA0);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8008f06:	23a0      	movs	r3, #160	@ 0xa0
 8008f08:	2200      	movs	r2, #0
 8008f0a:	2181      	movs	r1, #129	@ 0x81
 8008f0c:	f7f9 ffaa 	bl	8002e64 <HAL_PCDEx_PMAConfig>
	/* CDC Endpoints */
	HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_OUT_EP , PCD_SNG_BUF, 0xE0);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8008f16:	23e0      	movs	r3, #224	@ 0xe0
 8008f18:	2200      	movs	r2, #0
 8008f1a:	2101      	movs	r1, #1
 8008f1c:	f7f9 ffa2 	bl	8002e64 <HAL_PCDEx_PMAConfig>
	HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_IN_EP , PCD_SNG_BUF, 0x120);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8008f26:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	2182      	movs	r1, #130	@ 0x82
 8008f2e:	f7f9 ff99 	bl	8002e64 <HAL_PCDEx_PMAConfig>
	HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_CMD_EP , PCD_SNG_BUF, 0x140);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8008f38:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	2183      	movs	r1, #131	@ 0x83
 8008f40:	f7f9 ff90 	bl	8002e64 <HAL_PCDEx_PMAConfig>
	return USBD_OK;
 8008f44:	2300      	movs	r3, #0
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3708      	adds	r7, #8
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}
 8008f4e:	bf00      	nop
 8008f50:	200002ac 	.word	0x200002ac

08008f54 <USBD_LL_Start>:
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_DeInit(pdev->pData);
	return USBD_Get_USB_Status(hal_status);
}
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b084      	sub	sp, #16
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_Start(pdev->pData);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008f62:	4618      	mov	r0, r3
 8008f64:	f7f8 fc62 	bl	800182c <HAL_PCD_Start>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	73fb      	strb	r3, [r7, #15]
	return  USBD_Get_USB_Status(hal_status);
 8008f6c:	7bfb      	ldrb	r3, [r7, #15]
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f000 f916 	bl	80091a0 <USBD_Get_USB_Status>
 8008f74:	4603      	mov	r3, r0
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	3710      	adds	r7, #16
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}

08008f7e <USBD_LL_OpenEP>:
	hal_status = HAL_PCD_Stop(pdev->pData);
	return USBD_Get_USB_Status(hal_status);
}
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
		uint8_t ep_type, uint16_t ep_mps)
{
 8008f7e:	b580      	push	{r7, lr}
 8008f80:	b084      	sub	sp, #16
 8008f82:	af00      	add	r7, sp, #0
 8008f84:	6078      	str	r0, [r7, #4]
 8008f86:	4608      	mov	r0, r1
 8008f88:	4611      	mov	r1, r2
 8008f8a:	461a      	mov	r2, r3
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	70fb      	strb	r3, [r7, #3]
 8008f90:	460b      	mov	r3, r1
 8008f92:	70bb      	strb	r3, [r7, #2]
 8008f94:	4613      	mov	r3, r2
 8008f96:	803b      	strh	r3, [r7, #0]
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8008f9e:	78bb      	ldrb	r3, [r7, #2]
 8008fa0:	883a      	ldrh	r2, [r7, #0]
 8008fa2:	78f9      	ldrb	r1, [r7, #3]
 8008fa4:	f7f8 fd91 	bl	8001aca <HAL_PCD_EP_Open>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	73fb      	strb	r3, [r7, #15]
	return USBD_Get_USB_Status(hal_status);
 8008fac:	7bfb      	ldrb	r3, [r7, #15]
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f000 f8f6 	bl	80091a0 <USBD_Get_USB_Status>
 8008fb4:	4603      	mov	r3, r0
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3710      	adds	r7, #16
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}

08008fbe <USBD_LL_CloseEP>:
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008fbe:	b580      	push	{r7, lr}
 8008fc0:	b084      	sub	sp, #16
 8008fc2:	af00      	add	r7, sp, #0
 8008fc4:	6078      	str	r0, [r7, #4]
 8008fc6:	460b      	mov	r3, r1
 8008fc8:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008fd0:	78fa      	ldrb	r2, [r7, #3]
 8008fd2:	4611      	mov	r1, r2
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f7f8 fdd9 	bl	8001b8c <HAL_PCD_EP_Close>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	73fb      	strb	r3, [r7, #15]
	return USBD_Get_USB_Status(hal_status);
 8008fde:	7bfb      	ldrb	r3, [r7, #15]
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f000 f8dd 	bl	80091a0 <USBD_Get_USB_Status>
 8008fe6:	4603      	mov	r3, r0
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3710      	adds	r7, #16
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}

08008ff0 <USBD_LL_StallEP>:
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
	return USBD_Get_USB_Status(hal_status);
}
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b084      	sub	sp, #16
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
 8008ff8:	460b      	mov	r3, r1
 8008ffa:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009002:	78fa      	ldrb	r2, [r7, #3]
 8009004:	4611      	mov	r1, r2
 8009006:	4618      	mov	r0, r3
 8009008:	f7f8 fe8c 	bl	8001d24 <HAL_PCD_EP_SetStall>
 800900c:	4603      	mov	r3, r0
 800900e:	73fb      	strb	r3, [r7, #15]
	return USBD_Get_USB_Status(hal_status);
 8009010:	7bfb      	ldrb	r3, [r7, #15]
 8009012:	4618      	mov	r0, r3
 8009014:	f000 f8c4 	bl	80091a0 <USBD_Get_USB_Status>
 8009018:	4603      	mov	r3, r0
}
 800901a:	4618      	mov	r0, r3
 800901c:	3710      	adds	r7, #16
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}

08009022 <USBD_LL_ClearStallEP>:
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev,
		uint8_t ep_addr)
{
 8009022:	b580      	push	{r7, lr}
 8009024:	b084      	sub	sp, #16
 8009026:	af00      	add	r7, sp, #0
 8009028:	6078      	str	r0, [r7, #4]
 800902a:	460b      	mov	r3, r1
 800902c:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009034:	78fa      	ldrb	r2, [r7, #3]
 8009036:	4611      	mov	r1, r2
 8009038:	4618      	mov	r0, r3
 800903a:	f7f8 fec7 	bl	8001dcc <HAL_PCD_EP_ClrStall>
 800903e:	4603      	mov	r3, r0
 8009040:	73fb      	strb	r3, [r7, #15]
	return USBD_Get_USB_Status(hal_status);
 8009042:	7bfb      	ldrb	r3, [r7, #15]
 8009044:	4618      	mov	r0, r3
 8009046:	f000 f8ab 	bl	80091a0 <USBD_Get_USB_Status>
 800904a:	4603      	mov	r3, r0
}
 800904c:	4618      	mov	r0, r3
 800904e:	3710      	adds	r7, #16
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}

08009054 <USBD_LL_IsStallEP>:
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009054:	b480      	push	{r7}
 8009056:	b085      	sub	sp, #20
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
 800905c:	460b      	mov	r3, r1
 800905e:	70fb      	strb	r3, [r7, #3]
	PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009066:	60fb      	str	r3, [r7, #12]
	if((ep_addr & 0x80) == 0x80)
 8009068:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800906c:	2b00      	cmp	r3, #0
 800906e:	da0b      	bge.n	8009088 <USBD_LL_IsStallEP+0x34>
	{
		return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009070:	78fb      	ldrb	r3, [r7, #3]
 8009072:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009076:	68f9      	ldr	r1, [r7, #12]
 8009078:	4613      	mov	r3, r2
 800907a:	009b      	lsls	r3, r3, #2
 800907c:	4413      	add	r3, r2
 800907e:	00db      	lsls	r3, r3, #3
 8009080:	440b      	add	r3, r1
 8009082:	3316      	adds	r3, #22
 8009084:	781b      	ldrb	r3, [r3, #0]
 8009086:	e00b      	b.n	80090a0 <USBD_LL_IsStallEP+0x4c>
	}
	else
	{
		return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009088:	78fb      	ldrb	r3, [r7, #3]
 800908a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800908e:	68f9      	ldr	r1, [r7, #12]
 8009090:	4613      	mov	r3, r2
 8009092:	009b      	lsls	r3, r3, #2
 8009094:	4413      	add	r3, r2
 8009096:	00db      	lsls	r3, r3, #3
 8009098:	440b      	add	r3, r1
 800909a:	f503 73ab 	add.w	r3, r3, #342	@ 0x156
 800909e:	781b      	ldrb	r3, [r3, #0]
	}
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	3714      	adds	r7, #20
 80090a4:	46bd      	mov	sp, r7
 80090a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090aa:	4770      	bx	lr

080090ac <USBD_LL_SetUSBAddress>:
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev,
		uint8_t dev_addr)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b084      	sub	sp, #16
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
 80090b4:	460b      	mov	r3, r1
 80090b6:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80090be:	78fa      	ldrb	r2, [r7, #3]
 80090c0:	4611      	mov	r1, r2
 80090c2:	4618      	mov	r0, r3
 80090c4:	f7f8 fcdd 	bl	8001a82 <HAL_PCD_SetAddress>
 80090c8:	4603      	mov	r3, r0
 80090ca:	73fb      	strb	r3, [r7, #15]
	return USBD_Get_USB_Status(hal_status);
 80090cc:	7bfb      	ldrb	r3, [r7, #15]
 80090ce:	4618      	mov	r0, r3
 80090d0:	f000 f866 	bl	80091a0 <USBD_Get_USB_Status>
 80090d4:	4603      	mov	r3, r0
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3710      	adds	r7, #16
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}

080090de <USBD_LL_Transmit>:
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
		uint8_t *pbuf, uint32_t size)
{
 80090de:	b580      	push	{r7, lr}
 80090e0:	b086      	sub	sp, #24
 80090e2:	af00      	add	r7, sp, #0
 80090e4:	60f8      	str	r0, [r7, #12]
 80090e6:	607a      	str	r2, [r7, #4]
 80090e8:	603b      	str	r3, [r7, #0]
 80090ea:	460b      	mov	r3, r1
 80090ec:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 80090f4:	7af9      	ldrb	r1, [r7, #11]
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	687a      	ldr	r2, [r7, #4]
 80090fa:	f7f8 fddb 	bl	8001cb4 <HAL_PCD_EP_Transmit>
 80090fe:	4603      	mov	r3, r0
 8009100:	75fb      	strb	r3, [r7, #23]
	return USBD_Get_USB_Status(hal_status);
 8009102:	7dfb      	ldrb	r3, [r7, #23]
 8009104:	4618      	mov	r0, r3
 8009106:	f000 f84b 	bl	80091a0 <USBD_Get_USB_Status>
 800910a:	4603      	mov	r3, r0
}
 800910c:	4618      	mov	r0, r3
 800910e:	3718      	adds	r7, #24
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}

08009114 <USBD_LL_PrepareReceive>:
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev,
		uint8_t ep_addr, uint8_t *pbuf,
		uint32_t size)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b086      	sub	sp, #24
 8009118:	af00      	add	r7, sp, #0
 800911a:	60f8      	str	r0, [r7, #12]
 800911c:	607a      	str	r2, [r7, #4]
 800911e:	603b      	str	r3, [r7, #0]
 8009120:	460b      	mov	r3, r1
 8009122:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef hal_status;
	hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800912a:	7af9      	ldrb	r1, [r7, #11]
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	687a      	ldr	r2, [r7, #4]
 8009130:	f7f8 fd76 	bl	8001c20 <HAL_PCD_EP_Receive>
 8009134:	4603      	mov	r3, r0
 8009136:	75fb      	strb	r3, [r7, #23]
	return USBD_Get_USB_Status(hal_status);
 8009138:	7dfb      	ldrb	r3, [r7, #23]
 800913a:	4618      	mov	r0, r3
 800913c:	f000 f830 	bl	80091a0 <USBD_Get_USB_Status>
 8009140:	4603      	mov	r3, r0
}
 8009142:	4618      	mov	r0, r3
 8009144:	3718      	adds	r7, #24
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}

0800914a <USBD_LL_GetRxDataSize>:
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800914a:	b580      	push	{r7, lr}
 800914c:	b082      	sub	sp, #8
 800914e:	af00      	add	r7, sp, #0
 8009150:	6078      	str	r0, [r7, #4]
 8009152:	460b      	mov	r3, r1
 8009154:	70fb      	strb	r3, [r7, #3]
	return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800915c:	78fa      	ldrb	r2, [r7, #3]
 800915e:	4611      	mov	r1, r2
 8009160:	4618      	mov	r0, r3
 8009162:	f7f8 fd8f 	bl	8001c84 <HAL_PCD_EP_GetRxCount>
 8009166:	4603      	mov	r3, r0
}
 8009168:	4618      	mov	r0, r3
 800916a:	3708      	adds	r7, #8
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}

08009170 <USBD_static_malloc>:
void *USBD_static_malloc(uint32_t size)
{
 8009170:	b480      	push	{r7}
 8009172:	b083      	sub	sp, #12
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
	UNUSED(size);
	static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef) / 4) + 1]; /* On 32-bit boundary */
	return mem;
 8009178:	4b03      	ldr	r3, [pc, #12]	@ (8009188 <USBD_static_malloc+0x18>)
}
 800917a:	4618      	mov	r0, r3
 800917c:	370c      	adds	r7, #12
 800917e:	46bd      	mov	sp, r7
 8009180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009184:	4770      	bx	lr
 8009186:	bf00      	nop
 8009188:	20000a74 	.word	0x20000a74

0800918c <USBD_static_free>:
void USBD_static_free(void *p)
{
 800918c:	b480      	push	{r7}
 800918e:	b083      	sub	sp, #12
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
	UNUSED(p);
}
 8009194:	bf00      	nop
 8009196:	370c      	adds	r7, #12
 8009198:	46bd      	mov	sp, r7
 800919a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919e:	4770      	bx	lr

080091a0 <USBD_Get_USB_Status>:
{
     HAL_Delay(Delay);
}

USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b085      	sub	sp, #20
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	4603      	mov	r3, r0
 80091a8:	71fb      	strb	r3, [r7, #7]
	USBD_StatusTypeDef usb_status = USBD_OK;
 80091aa:	2300      	movs	r3, #0
 80091ac:	73fb      	strb	r3, [r7, #15]
	switch (hal_status)
 80091ae:	79fb      	ldrb	r3, [r7, #7]
 80091b0:	2b03      	cmp	r3, #3
 80091b2:	d817      	bhi.n	80091e4 <USBD_Get_USB_Status+0x44>
 80091b4:	a201      	add	r2, pc, #4	@ (adr r2, 80091bc <USBD_Get_USB_Status+0x1c>)
 80091b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091ba:	bf00      	nop
 80091bc:	080091cd 	.word	0x080091cd
 80091c0:	080091d3 	.word	0x080091d3
 80091c4:	080091d9 	.word	0x080091d9
 80091c8:	080091df 	.word	0x080091df
	{
	case HAL_OK :
		usb_status = USBD_OK;
 80091cc:	2300      	movs	r3, #0
 80091ce:	73fb      	strb	r3, [r7, #15]
		break;
 80091d0:	e00b      	b.n	80091ea <USBD_Get_USB_Status+0x4a>
	case HAL_ERROR :
		usb_status = USBD_FAIL;
 80091d2:	2303      	movs	r3, #3
 80091d4:	73fb      	strb	r3, [r7, #15]
		break;
 80091d6:	e008      	b.n	80091ea <USBD_Get_USB_Status+0x4a>
	case HAL_BUSY :
		usb_status = USBD_BUSY;
 80091d8:	2301      	movs	r3, #1
 80091da:	73fb      	strb	r3, [r7, #15]
		break;
 80091dc:	e005      	b.n	80091ea <USBD_Get_USB_Status+0x4a>
	case HAL_TIMEOUT :
		usb_status = USBD_FAIL;
 80091de:	2303      	movs	r3, #3
 80091e0:	73fb      	strb	r3, [r7, #15]
		break;
 80091e2:	e002      	b.n	80091ea <USBD_Get_USB_Status+0x4a>
	default :
		usb_status = USBD_FAIL;
 80091e4:	2303      	movs	r3, #3
 80091e6:	73fb      	strb	r3, [r7, #15]
		break;
 80091e8:	bf00      	nop
	}
	return usb_status;
 80091ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	3714      	adds	r7, #20
 80091f0:	46bd      	mov	sp, r7
 80091f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f6:	4770      	bx	lr

080091f8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b086      	sub	sp, #24
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	60f8      	str	r0, [r7, #12]
 8009200:	60b9      	str	r1, [r7, #8]
 8009202:	4613      	mov	r3, r2
 8009204:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d10a      	bne.n	8009222 <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 800920c:	4827      	ldr	r0, [pc, #156]	@ (80092ac <USBD_Init+0xb4>)
 800920e:	f001 fd9d 	bl	800ad4c <iprintf>
 8009212:	4827      	ldr	r0, [pc, #156]	@ (80092b0 <USBD_Init+0xb8>)
 8009214:	f001 fd9a 	bl	800ad4c <iprintf>
 8009218:	200a      	movs	r0, #10
 800921a:	f001 fda9 	bl	800ad70 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800921e:	2303      	movs	r3, #3
 8009220:	e03f      	b.n	80092a2 <USBD_Init+0xaa>
  }

#ifdef USE_USBD_COMPOSITE
  /* Parse the table of classes in use */
  for (uint32_t i = 0; i < USBD_MAX_SUPPORTED_CLASS; i++)
 8009222:	2300      	movs	r3, #0
 8009224:	617b      	str	r3, [r7, #20]
 8009226:	e021      	b.n	800926c <USBD_Init+0x74>
  {
    /* Unlink previous class*/
    pdev->pClass[i] = NULL;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	697a      	ldr	r2, [r7, #20]
 800922c:	32ae      	adds	r2, #174	@ 0xae
 800922e:	2100      	movs	r1, #0
 8009230:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pUserData[i] = NULL;
 8009234:	68fa      	ldr	r2, [r7, #12]
 8009236:	697b      	ldr	r3, [r7, #20]
 8009238:	33b2      	adds	r3, #178	@ 0xb2
 800923a:	009b      	lsls	r3, r3, #2
 800923c:	4413      	add	r3, r2
 800923e:	2200      	movs	r2, #0
 8009240:	605a      	str	r2, [r3, #4]

    /* Set class as inactive */
    pdev->tclasslist[i].Active = 0;
 8009242:	68fa      	ldr	r2, [r7, #12]
 8009244:	697b      	ldr	r3, [r7, #20]
 8009246:	212c      	movs	r1, #44	@ 0x2c
 8009248:	fb01 f303 	mul.w	r3, r1, r3
 800924c:	4413      	add	r3, r2
 800924e:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8009252:	2200      	movs	r2, #0
 8009254:	601a      	str	r2, [r3, #0]
    pdev->NumClasses = 0;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	2200      	movs	r2, #0
 800925a:	f8c3 22e4 	str.w	r2, [r3, #740]	@ 0x2e4
    pdev->classId = 0;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	2200      	movs	r2, #0
 8009262:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
  for (uint32_t i = 0; i < USBD_MAX_SUPPORTED_CLASS; i++)
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	3301      	adds	r3, #1
 800926a:	617b      	str	r3, [r7, #20]
 800926c:	697b      	ldr	r3, [r7, #20]
 800926e:	2b01      	cmp	r3, #1
 8009270:	d9da      	bls.n	8009228 <USBD_Init+0x30>
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
  pdev->pUserData[0] = NULL;
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	2200      	movs	r2, #0
 8009276:	f8c3 22dc 	str.w	r2, [r3, #732]	@ 0x2dc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d003      	beq.n	8009288 <USBD_Init+0x90>
  {
    pdev->pDesc = pdesc;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	68ba      	ldr	r2, [r7, #8]
 8009284:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	2201      	movs	r2, #1
 800928c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	79fa      	ldrb	r2, [r7, #7]
 8009294:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009296:	68f8      	ldr	r0, [r7, #12]
 8009298:	f7ff fe14 	bl	8008ec4 <USBD_LL_Init>
 800929c:	4603      	mov	r3, r0
 800929e:	74fb      	strb	r3, [r7, #19]

  return ret;
 80092a0:	7cfb      	ldrb	r3, [r7, #19]
}
 80092a2:	4618      	mov	r0, r3
 80092a4:	3718      	adds	r7, #24
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bd80      	pop	{r7, pc}
 80092aa:	bf00      	nop
 80092ac:	0800badc 	.word	0x0800badc
 80092b0:	0800bae4 	.word	0x0800bae4

080092b4 <USBD_RegisterClassComposite>:
  * @param  EpAddr: Endpoint Address handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClassComposite(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass,
                                                USBD_CompositeClassTypeDef classtype, uint8_t *EpAddr)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b086      	sub	sp, #24
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	60f8      	str	r0, [r7, #12]
 80092bc:	60b9      	str	r1, [r7, #8]
 80092be:	603b      	str	r3, [r7, #0]
 80092c0:	4613      	mov	r3, r2
 80092c2:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef   ret = USBD_OK;
 80092c4:	2300      	movs	r3, #0
 80092c6:	75fb      	strb	r3, [r7, #23]
  uint16_t len = 0U;
 80092c8:	2300      	movs	r3, #0
 80092ca:	82bb      	strh	r3, [r7, #20]

  if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) && (pdev->NumClasses < USBD_MAX_SUPPORTED_CLASS))
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80092d2:	2b01      	cmp	r3, #1
 80092d4:	d83d      	bhi.n	8009352 <USBD_RegisterClassComposite+0x9e>
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	f8d3 32e4 	ldr.w	r3, [r3, #740]	@ 0x2e4
 80092dc:	2b01      	cmp	r3, #1
 80092de:	d838      	bhi.n	8009352 <USBD_RegisterClassComposite+0x9e>
  {
    if ((uint32_t)pclass != 0U)
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d02a      	beq.n	800933c <USBD_RegisterClassComposite+0x88>
    {
      /* Link the class to the USB Device handle */
      pdev->pClass[pdev->classId] = pclass;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	32ae      	adds	r2, #174	@ 0xae
 80092f0:	68b9      	ldr	r1, [r7, #8]
 80092f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      ret = USBD_OK;
 80092f6:	2300      	movs	r3, #0
 80092f8:	75fb      	strb	r3, [r7, #23]

      pdev->tclasslist[pdev->classId].EpAdd = EpAddr;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8009300:	68fa      	ldr	r2, [r7, #12]
 8009302:	212c      	movs	r1, #44	@ 0x2c
 8009304:	fb01 f303 	mul.w	r3, r1, r3
 8009308:	4413      	add	r3, r2
 800930a:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 800930e:	683a      	ldr	r2, [r7, #0]
 8009310:	601a      	str	r2, [r3, #0]

      /* Call the composite class builder */
      (void)USBD_CMPSIT_AddClass(pdev, pclass, classtype, 0);
 8009312:	79fa      	ldrb	r2, [r7, #7]
 8009314:	2300      	movs	r3, #0
 8009316:	68b9      	ldr	r1, [r7, #8]
 8009318:	68f8      	ldr	r0, [r7, #12]
 800931a:	f7fe fd61 	bl	8007de0 <USBD_CMPSIT_AddClass>

      /* Increment the ClassId for the next occurrence */
      pdev->classId ++;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 8009324:	1c5a      	adds	r2, r3, #1
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
      pdev->NumClasses ++;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	f8d3 32e4 	ldr.w	r3, [r3, #740]	@ 0x2e4
 8009332:	1c5a      	adds	r2, r3, #1
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	f8c3 22e4 	str.w	r2, [r3, #740]	@ 0x2e4
 800933a:	e00a      	b.n	8009352 <USBD_RegisterClassComposite+0x9e>
    }
    else
    {
#if (USBD_DEBUG_LEVEL > 1U)
      USBD_ErrLog("Invalid Class handle");
 800933c:	480e      	ldr	r0, [pc, #56]	@ (8009378 <USBD_RegisterClassComposite+0xc4>)
 800933e:	f001 fd05 	bl	800ad4c <iprintf>
 8009342:	480e      	ldr	r0, [pc, #56]	@ (800937c <USBD_RegisterClassComposite+0xc8>)
 8009344:	f001 fd02 	bl	800ad4c <iprintf>
 8009348:	200a      	movs	r0, #10
 800934a:	f001 fd11 	bl	800ad70 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
      ret = USBD_FAIL;
 800934e:	2303      	movs	r3, #3
 8009350:	75fb      	strb	r3, [r7, #23]
    }
  }

  if (ret == USBD_OK)
 8009352:	7dfb      	ldrb	r3, [r7, #23]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d109      	bne.n	800936c <USBD_RegisterClassComposite+0xb8>
  {
    /* Get Device Configuration Descriptor */
#ifdef USE_USB_HS
    pdev->pConfDesc = USBD_CMPSIT.GetHSConfigDescriptor(&len);
#else /* Default USE_USB_FS */
    pdev->pConfDesc = USBD_CMPSIT.GetFSConfigDescriptor(&len);
 8009358:	4b09      	ldr	r3, [pc, #36]	@ (8009380 <USBD_RegisterClassComposite+0xcc>)
 800935a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800935c:	f107 0214 	add.w	r2, r7, #20
 8009360:	4610      	mov	r0, r2
 8009362:	4798      	blx	r3
 8009364:	4602      	mov	r2, r0
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	f8c3 22dc 	str.w	r2, [r3, #732]	@ 0x2dc
#endif /* USE_USB_FS */
  }

  return ret;
 800936c:	7dfb      	ldrb	r3, [r7, #23]
}
 800936e:	4618      	mov	r0, r3
 8009370:	3718      	adds	r7, #24
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}
 8009376:	bf00      	nop
 8009378:	0800badc 	.word	0x0800badc
 800937c:	0800bafc 	.word	0x0800bafc
 8009380:	200000a8 	.word	0x200000a8

08009384 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b082      	sub	sp, #8
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2200      	movs	r2, #0
 8009390:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f7ff fddd 	bl	8008f54 <USBD_LL_Start>
 800939a:	4603      	mov	r3, r0
}
 800939c:	4618      	mov	r0, r3
 800939e:	3708      	adds	r7, #8
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}

080093a4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80093a4:	b480      	push	{r7}
 80093a6:	b083      	sub	sp, #12
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80093ac:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	370c      	adds	r7, #12
 80093b2:	46bd      	mov	sp, r7
 80093b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b8:	4770      	bx	lr

080093ba <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80093ba:	b580      	push	{r7, lr}
 80093bc:	b084      	sub	sp, #16
 80093be:	af00      	add	r7, sp, #0
 80093c0:	6078      	str	r0, [r7, #4]
 80093c2:	460b      	mov	r3, r1
 80093c4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80093c6:	2300      	movs	r3, #0
 80093c8:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Parse the table of classes in use */
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 80093ca:	2300      	movs	r3, #0
 80093cc:	60bb      	str	r3, [r7, #8]
 80093ce:	e027      	b.n	8009420 <USBD_SetClassConfig+0x66>
  {
    /* Check if current class is in use */
    if ((pdev->tclasslist[i].Active) == 1U)
 80093d0:	687a      	ldr	r2, [r7, #4]
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	212c      	movs	r1, #44	@ 0x2c
 80093d6:	fb01 f303 	mul.w	r3, r1, r3
 80093da:	4413      	add	r3, r2
 80093dc:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	2b01      	cmp	r3, #1
 80093e4:	d119      	bne.n	800941a <USBD_SetClassConfig+0x60>
    {
      if (pdev->pClass[i] != NULL)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	68ba      	ldr	r2, [r7, #8]
 80093ea:	32ae      	adds	r2, #174	@ 0xae
 80093ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d012      	beq.n	800941a <USBD_SetClassConfig+0x60>
      {
        pdev->classId = i;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	68ba      	ldr	r2, [r7, #8]
 80093f8:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
        /* Set configuration  and Start the Class*/
        if (pdev->pClass[i]->Init(pdev, cfgidx) != 0U)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	68ba      	ldr	r2, [r7, #8]
 8009400:	32ae      	adds	r2, #174	@ 0xae
 8009402:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	78fa      	ldrb	r2, [r7, #3]
 800940a:	4611      	mov	r1, r2
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	4798      	blx	r3
 8009410:	4603      	mov	r3, r0
 8009412:	2b00      	cmp	r3, #0
 8009414:	d001      	beq.n	800941a <USBD_SetClassConfig+0x60>
        {
          ret = USBD_FAIL;
 8009416:	2303      	movs	r3, #3
 8009418:	73fb      	strb	r3, [r7, #15]
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	3301      	adds	r3, #1
 800941e:	60bb      	str	r3, [r7, #8]
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	2b01      	cmp	r3, #1
 8009424:	d9d4      	bls.n	80093d0 <USBD_SetClassConfig+0x16>
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009426:	7bfb      	ldrb	r3, [r7, #15]
}
 8009428:	4618      	mov	r0, r3
 800942a:	3710      	adds	r7, #16
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}

08009430 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b084      	sub	sp, #16
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
 8009438:	460b      	mov	r3, r1
 800943a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800943c:	2300      	movs	r3, #0
 800943e:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Parse the table of classes in use */
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 8009440:	2300      	movs	r3, #0
 8009442:	60bb      	str	r3, [r7, #8]
 8009444:	e027      	b.n	8009496 <USBD_ClrClassConfig+0x66>
  {
    /* Check if current class is in use */
    if ((pdev->tclasslist[i].Active) == 1U)
 8009446:	687a      	ldr	r2, [r7, #4]
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	212c      	movs	r1, #44	@ 0x2c
 800944c:	fb01 f303 	mul.w	r3, r1, r3
 8009450:	4413      	add	r3, r2
 8009452:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	2b01      	cmp	r3, #1
 800945a:	d119      	bne.n	8009490 <USBD_ClrClassConfig+0x60>
    {
      if (pdev->pClass[i] != NULL)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	68ba      	ldr	r2, [r7, #8]
 8009460:	32ae      	adds	r2, #174	@ 0xae
 8009462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d012      	beq.n	8009490 <USBD_ClrClassConfig+0x60>
      {
        pdev->classId = i;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	68ba      	ldr	r2, [r7, #8]
 800946e:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
        /* Clear configuration  and De-initialize the Class process */
        if (pdev->pClass[i]->DeInit(pdev, cfgidx) != 0U)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	68ba      	ldr	r2, [r7, #8]
 8009476:	32ae      	adds	r2, #174	@ 0xae
 8009478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800947c:	685b      	ldr	r3, [r3, #4]
 800947e:	78fa      	ldrb	r2, [r7, #3]
 8009480:	4611      	mov	r1, r2
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	4798      	blx	r3
 8009486:	4603      	mov	r3, r0
 8009488:	2b00      	cmp	r3, #0
 800948a:	d001      	beq.n	8009490 <USBD_ClrClassConfig+0x60>
        {
          ret = USBD_FAIL;
 800948c:	2303      	movs	r3, #3
 800948e:	73fb      	strb	r3, [r7, #15]
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	3301      	adds	r3, #1
 8009494:	60bb      	str	r3, [r7, #8]
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	2b01      	cmp	r3, #1
 800949a:	d9d4      	bls.n	8009446 <USBD_ClrClassConfig+0x16>
  {
    ret = USBD_FAIL;
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800949c:	7bfb      	ldrb	r3, [r7, #15]
}
 800949e:	4618      	mov	r0, r3
 80094a0:	3710      	adds	r7, #16
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}

080094a6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80094a6:	b580      	push	{r7, lr}
 80094a8:	b084      	sub	sp, #16
 80094aa:	af00      	add	r7, sp, #0
 80094ac:	6078      	str	r0, [r7, #4]
 80094ae:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80094b6:	6839      	ldr	r1, [r7, #0]
 80094b8:	4618      	mov	r0, r3
 80094ba:	f001 f94a 	bl	800a752 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2201      	movs	r2, #1
 80094c2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80094cc:	461a      	mov	r2, r3
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80094da:	f003 031f 	and.w	r3, r3, #31
 80094de:	2b02      	cmp	r3, #2
 80094e0:	d01a      	beq.n	8009518 <USBD_LL_SetupStage+0x72>
 80094e2:	2b02      	cmp	r3, #2
 80094e4:	d822      	bhi.n	800952c <USBD_LL_SetupStage+0x86>
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d002      	beq.n	80094f0 <USBD_LL_SetupStage+0x4a>
 80094ea:	2b01      	cmp	r3, #1
 80094ec:	d00a      	beq.n	8009504 <USBD_LL_SetupStage+0x5e>
 80094ee:	e01d      	b.n	800952c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80094f6:	4619      	mov	r1, r3
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f000 fb67 	bl	8009bcc <USBD_StdDevReq>
 80094fe:	4603      	mov	r3, r0
 8009500:	73fb      	strb	r3, [r7, #15]
      break;
 8009502:	e020      	b.n	8009546 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800950a:	4619      	mov	r1, r3
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f000 fbcf 	bl	8009cb0 <USBD_StdItfReq>
 8009512:	4603      	mov	r3, r0
 8009514:	73fb      	strb	r3, [r7, #15]
      break;
 8009516:	e016      	b.n	8009546 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800951e:	4619      	mov	r1, r3
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f000 fc31 	bl	8009d88 <USBD_StdEPReq>
 8009526:	4603      	mov	r3, r0
 8009528:	73fb      	strb	r3, [r7, #15]
      break;
 800952a:	e00c      	b.n	8009546 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009532:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009536:	b2db      	uxtb	r3, r3
 8009538:	4619      	mov	r1, r3
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f7ff fd58 	bl	8008ff0 <USBD_LL_StallEP>
 8009540:	4603      	mov	r3, r0
 8009542:	73fb      	strb	r3, [r7, #15]
      break;
 8009544:	bf00      	nop
  }

  return ret;
 8009546:	7bfb      	ldrb	r3, [r7, #15]
}
 8009548:	4618      	mov	r0, r3
 800954a:	3710      	adds	r7, #16
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}

08009550 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b086      	sub	sp, #24
 8009554:	af00      	add	r7, sp, #0
 8009556:	60f8      	str	r0, [r7, #12]
 8009558:	460b      	mov	r3, r1
 800955a:	607a      	str	r2, [r7, #4]
 800955c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800955e:	2300      	movs	r3, #0
 8009560:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009562:	7afb      	ldrb	r3, [r7, #11]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d16e      	bne.n	8009646 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800956e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009576:	2b03      	cmp	r3, #3
 8009578:	f040 8098 	bne.w	80096ac <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800957c:	693b      	ldr	r3, [r7, #16]
 800957e:	689a      	ldr	r2, [r3, #8]
 8009580:	693b      	ldr	r3, [r7, #16]
 8009582:	68db      	ldr	r3, [r3, #12]
 8009584:	429a      	cmp	r2, r3
 8009586:	d913      	bls.n	80095b0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009588:	693b      	ldr	r3, [r7, #16]
 800958a:	689a      	ldr	r2, [r3, #8]
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	68db      	ldr	r3, [r3, #12]
 8009590:	1ad2      	subs	r2, r2, r3
 8009592:	693b      	ldr	r3, [r7, #16]
 8009594:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009596:	693b      	ldr	r3, [r7, #16]
 8009598:	68da      	ldr	r2, [r3, #12]
 800959a:	693b      	ldr	r3, [r7, #16]
 800959c:	689b      	ldr	r3, [r3, #8]
 800959e:	4293      	cmp	r3, r2
 80095a0:	bf28      	it	cs
 80095a2:	4613      	movcs	r3, r2
 80095a4:	461a      	mov	r2, r3
 80095a6:	6879      	ldr	r1, [r7, #4]
 80095a8:	68f8      	ldr	r0, [r7, #12]
 80095aa:	f001 fad5 	bl	800ab58 <USBD_CtlContinueRx>
 80095ae:	e07d      	b.n	80096ac <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80095b6:	f003 031f 	and.w	r3, r3, #31
 80095ba:	2b02      	cmp	r3, #2
 80095bc:	d014      	beq.n	80095e8 <USBD_LL_DataOutStage+0x98>
 80095be:	2b02      	cmp	r3, #2
 80095c0:	d81d      	bhi.n	80095fe <USBD_LL_DataOutStage+0xae>
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d002      	beq.n	80095cc <USBD_LL_DataOutStage+0x7c>
 80095c6:	2b01      	cmp	r3, #1
 80095c8:	d003      	beq.n	80095d2 <USBD_LL_DataOutStage+0x82>
 80095ca:	e018      	b.n	80095fe <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80095cc:	2300      	movs	r3, #0
 80095ce:	75bb      	strb	r3, [r7, #22]
            break;
 80095d0:	e018      	b.n	8009604 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80095d8:	b2db      	uxtb	r3, r3
 80095da:	4619      	mov	r1, r3
 80095dc:	68f8      	ldr	r0, [r7, #12]
 80095de:	f000 f9da 	bl	8009996 <USBD_CoreFindIF>
 80095e2:	4603      	mov	r3, r0
 80095e4:	75bb      	strb	r3, [r7, #22]
            break;
 80095e6:	e00d      	b.n	8009604 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80095ee:	b2db      	uxtb	r3, r3
 80095f0:	4619      	mov	r1, r3
 80095f2:	68f8      	ldr	r0, [r7, #12]
 80095f4:	f000 fa1b 	bl	8009a2e <USBD_CoreFindEP>
 80095f8:	4603      	mov	r3, r0
 80095fa:	75bb      	strb	r3, [r7, #22]
            break;
 80095fc:	e002      	b.n	8009604 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80095fe:	2300      	movs	r3, #0
 8009600:	75bb      	strb	r3, [r7, #22]
            break;
 8009602:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009604:	7dbb      	ldrb	r3, [r7, #22]
 8009606:	2b01      	cmp	r3, #1
 8009608:	d819      	bhi.n	800963e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009610:	b2db      	uxtb	r3, r3
 8009612:	2b03      	cmp	r3, #3
 8009614:	d113      	bne.n	800963e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009616:	7dba      	ldrb	r2, [r7, #22]
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	32ae      	adds	r2, #174	@ 0xae
 800961c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009620:	691b      	ldr	r3, [r3, #16]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d00b      	beq.n	800963e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009626:	7dba      	ldrb	r2, [r7, #22]
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800962e:	7dba      	ldrb	r2, [r7, #22]
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	32ae      	adds	r2, #174	@ 0xae
 8009634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009638:	691b      	ldr	r3, [r3, #16]
 800963a:	68f8      	ldr	r0, [r7, #12]
 800963c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800963e:	68f8      	ldr	r0, [r7, #12]
 8009640:	f001 fa9b 	bl	800ab7a <USBD_CtlSendStatus>
 8009644:	e032      	b.n	80096ac <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009646:	7afb      	ldrb	r3, [r7, #11]
 8009648:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800964c:	b2db      	uxtb	r3, r3
 800964e:	4619      	mov	r1, r3
 8009650:	68f8      	ldr	r0, [r7, #12]
 8009652:	f000 f9ec 	bl	8009a2e <USBD_CoreFindEP>
 8009656:	4603      	mov	r3, r0
 8009658:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800965a:	7dbb      	ldrb	r3, [r7, #22]
 800965c:	2bff      	cmp	r3, #255	@ 0xff
 800965e:	d025      	beq.n	80096ac <USBD_LL_DataOutStage+0x15c>
 8009660:	7dbb      	ldrb	r3, [r7, #22]
 8009662:	2b01      	cmp	r3, #1
 8009664:	d822      	bhi.n	80096ac <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800966c:	b2db      	uxtb	r3, r3
 800966e:	2b03      	cmp	r3, #3
 8009670:	d117      	bne.n	80096a2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009672:	7dba      	ldrb	r2, [r7, #22]
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	32ae      	adds	r2, #174	@ 0xae
 8009678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800967c:	699b      	ldr	r3, [r3, #24]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d00f      	beq.n	80096a2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009682:	7dba      	ldrb	r2, [r7, #22]
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800968a:	7dba      	ldrb	r2, [r7, #22]
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	32ae      	adds	r2, #174	@ 0xae
 8009690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009694:	699b      	ldr	r3, [r3, #24]
 8009696:	7afa      	ldrb	r2, [r7, #11]
 8009698:	4611      	mov	r1, r2
 800969a:	68f8      	ldr	r0, [r7, #12]
 800969c:	4798      	blx	r3
 800969e:	4603      	mov	r3, r0
 80096a0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80096a2:	7dfb      	ldrb	r3, [r7, #23]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d001      	beq.n	80096ac <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80096a8:	7dfb      	ldrb	r3, [r7, #23]
 80096aa:	e000      	b.n	80096ae <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80096ac:	2300      	movs	r3, #0
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3718      	adds	r7, #24
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}

080096b6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80096b6:	b580      	push	{r7, lr}
 80096b8:	b086      	sub	sp, #24
 80096ba:	af00      	add	r7, sp, #0
 80096bc:	60f8      	str	r0, [r7, #12]
 80096be:	460b      	mov	r3, r1
 80096c0:	607a      	str	r2, [r7, #4]
 80096c2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80096c4:	7afb      	ldrb	r3, [r7, #11]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d16f      	bne.n	80097aa <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	3314      	adds	r3, #20
 80096ce:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80096d6:	2b02      	cmp	r3, #2
 80096d8:	d15a      	bne.n	8009790 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80096da:	693b      	ldr	r3, [r7, #16]
 80096dc:	689a      	ldr	r2, [r3, #8]
 80096de:	693b      	ldr	r3, [r7, #16]
 80096e0:	68db      	ldr	r3, [r3, #12]
 80096e2:	429a      	cmp	r2, r3
 80096e4:	d914      	bls.n	8009710 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80096e6:	693b      	ldr	r3, [r7, #16]
 80096e8:	689a      	ldr	r2, [r3, #8]
 80096ea:	693b      	ldr	r3, [r7, #16]
 80096ec:	68db      	ldr	r3, [r3, #12]
 80096ee:	1ad2      	subs	r2, r2, r3
 80096f0:	693b      	ldr	r3, [r7, #16]
 80096f2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80096f4:	693b      	ldr	r3, [r7, #16]
 80096f6:	689b      	ldr	r3, [r3, #8]
 80096f8:	461a      	mov	r2, r3
 80096fa:	6879      	ldr	r1, [r7, #4]
 80096fc:	68f8      	ldr	r0, [r7, #12]
 80096fe:	f001 f9fd 	bl	800aafc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009702:	2300      	movs	r3, #0
 8009704:	2200      	movs	r2, #0
 8009706:	2100      	movs	r1, #0
 8009708:	68f8      	ldr	r0, [r7, #12]
 800970a:	f7ff fd03 	bl	8009114 <USBD_LL_PrepareReceive>
 800970e:	e03f      	b.n	8009790 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009710:	693b      	ldr	r3, [r7, #16]
 8009712:	68da      	ldr	r2, [r3, #12]
 8009714:	693b      	ldr	r3, [r7, #16]
 8009716:	689b      	ldr	r3, [r3, #8]
 8009718:	429a      	cmp	r2, r3
 800971a:	d11c      	bne.n	8009756 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800971c:	693b      	ldr	r3, [r7, #16]
 800971e:	685a      	ldr	r2, [r3, #4]
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009724:	429a      	cmp	r2, r3
 8009726:	d316      	bcc.n	8009756 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009728:	693b      	ldr	r3, [r7, #16]
 800972a:	685a      	ldr	r2, [r3, #4]
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009732:	429a      	cmp	r2, r3
 8009734:	d20f      	bcs.n	8009756 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009736:	2200      	movs	r2, #0
 8009738:	2100      	movs	r1, #0
 800973a:	68f8      	ldr	r0, [r7, #12]
 800973c:	f001 f9de 	bl	800aafc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	2200      	movs	r2, #0
 8009744:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009748:	2300      	movs	r3, #0
 800974a:	2200      	movs	r2, #0
 800974c:	2100      	movs	r1, #0
 800974e:	68f8      	ldr	r0, [r7, #12]
 8009750:	f7ff fce0 	bl	8009114 <USBD_LL_PrepareReceive>
 8009754:	e01c      	b.n	8009790 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800975c:	b2db      	uxtb	r3, r3
 800975e:	2b03      	cmp	r3, #3
 8009760:	d10f      	bne.n	8009782 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009768:	68db      	ldr	r3, [r3, #12]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d009      	beq.n	8009782 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	2200      	movs	r2, #0
 8009772:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800977c:	68db      	ldr	r3, [r3, #12]
 800977e:	68f8      	ldr	r0, [r7, #12]
 8009780:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009782:	2180      	movs	r1, #128	@ 0x80
 8009784:	68f8      	ldr	r0, [r7, #12]
 8009786:	f7ff fc33 	bl	8008ff0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800978a:	68f8      	ldr	r0, [r7, #12]
 800978c:	f001 fa08 	bl	800aba0 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009796:	2b00      	cmp	r3, #0
 8009798:	d03a      	beq.n	8009810 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800979a:	68f8      	ldr	r0, [r7, #12]
 800979c:	f7ff fe02 	bl	80093a4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	2200      	movs	r2, #0
 80097a4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80097a8:	e032      	b.n	8009810 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80097aa:	7afb      	ldrb	r3, [r7, #11]
 80097ac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80097b0:	b2db      	uxtb	r3, r3
 80097b2:	4619      	mov	r1, r3
 80097b4:	68f8      	ldr	r0, [r7, #12]
 80097b6:	f000 f93a 	bl	8009a2e <USBD_CoreFindEP>
 80097ba:	4603      	mov	r3, r0
 80097bc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80097be:	7dfb      	ldrb	r3, [r7, #23]
 80097c0:	2bff      	cmp	r3, #255	@ 0xff
 80097c2:	d025      	beq.n	8009810 <USBD_LL_DataInStage+0x15a>
 80097c4:	7dfb      	ldrb	r3, [r7, #23]
 80097c6:	2b01      	cmp	r3, #1
 80097c8:	d822      	bhi.n	8009810 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80097d0:	b2db      	uxtb	r3, r3
 80097d2:	2b03      	cmp	r3, #3
 80097d4:	d11c      	bne.n	8009810 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80097d6:	7dfa      	ldrb	r2, [r7, #23]
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	32ae      	adds	r2, #174	@ 0xae
 80097dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097e0:	695b      	ldr	r3, [r3, #20]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d014      	beq.n	8009810 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80097e6:	7dfa      	ldrb	r2, [r7, #23]
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80097ee:	7dfa      	ldrb	r2, [r7, #23]
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	32ae      	adds	r2, #174	@ 0xae
 80097f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097f8:	695b      	ldr	r3, [r3, #20]
 80097fa:	7afa      	ldrb	r2, [r7, #11]
 80097fc:	4611      	mov	r1, r2
 80097fe:	68f8      	ldr	r0, [r7, #12]
 8009800:	4798      	blx	r3
 8009802:	4603      	mov	r3, r0
 8009804:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009806:	7dbb      	ldrb	r3, [r7, #22]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d001      	beq.n	8009810 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800980c:	7dbb      	ldrb	r3, [r7, #22]
 800980e:	e000      	b.n	8009812 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009810:	2300      	movs	r3, #0
}
 8009812:	4618      	mov	r0, r3
 8009814:	3718      	adds	r7, #24
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}

0800981a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800981a:	b580      	push	{r7, lr}
 800981c:	b084      	sub	sp, #16
 800981e:	af00      	add	r7, sp, #0
 8009820:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009822:	2300      	movs	r3, #0
 8009824:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2201      	movs	r2, #1
 800982a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2200      	movs	r2, #0
 8009832:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2200      	movs	r2, #0
 800983a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2200      	movs	r2, #0
 8009840:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2200      	movs	r2, #0
 8009848:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0

#ifdef USE_USBD_COMPOSITE
  /* Parse the table of classes in use */
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 800984c:	2300      	movs	r3, #0
 800984e:	60bb      	str	r3, [r7, #8]
 8009850:	e031      	b.n	80098b6 <USBD_LL_Reset+0x9c>
  {
    /* Check if current class is in use */
    if ((pdev->tclasslist[i].Active) == 1U)
 8009852:	687a      	ldr	r2, [r7, #4]
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	212c      	movs	r1, #44	@ 0x2c
 8009858:	fb01 f303 	mul.w	r3, r1, r3
 800985c:	4413      	add	r3, r2
 800985e:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	2b01      	cmp	r3, #1
 8009866:	d123      	bne.n	80098b0 <USBD_LL_Reset+0x96>
    {
      if (pdev->pClass[i] != NULL)
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	68ba      	ldr	r2, [r7, #8]
 800986c:	32ae      	adds	r2, #174	@ 0xae
 800986e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d01c      	beq.n	80098b0 <USBD_LL_Reset+0x96>
      {
        pdev->classId = i;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	68ba      	ldr	r2, [r7, #8]
 800987a:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
        /* Clear configuration  and De-initialize the Class process*/

        if (pdev->pClass[i]->DeInit != NULL)
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	68ba      	ldr	r2, [r7, #8]
 8009882:	32ae      	adds	r2, #174	@ 0xae
 8009884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009888:	685b      	ldr	r3, [r3, #4]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d010      	beq.n	80098b0 <USBD_LL_Reset+0x96>
        {
          if (pdev->pClass[i]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	68ba      	ldr	r2, [r7, #8]
 8009892:	32ae      	adds	r2, #174	@ 0xae
 8009894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009898:	685b      	ldr	r3, [r3, #4]
 800989a:	687a      	ldr	r2, [r7, #4]
 800989c:	6852      	ldr	r2, [r2, #4]
 800989e:	b2d2      	uxtb	r2, r2
 80098a0:	4611      	mov	r1, r2
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	4798      	blx	r3
 80098a6:	4603      	mov	r3, r0
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d001      	beq.n	80098b0 <USBD_LL_Reset+0x96>
          {
            ret = USBD_FAIL;
 80098ac:	2303      	movs	r3, #3
 80098ae:	73fb      	strb	r3, [r7, #15]
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	3301      	adds	r3, #1
 80098b4:	60bb      	str	r3, [r7, #8]
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	2b01      	cmp	r3, #1
 80098ba:	d9ca      	bls.n	8009852 <USBD_LL_Reset+0x38>
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80098bc:	2340      	movs	r3, #64	@ 0x40
 80098be:	2200      	movs	r2, #0
 80098c0:	2100      	movs	r1, #0
 80098c2:	6878      	ldr	r0, [r7, #4]
 80098c4:	f7ff fb5b 	bl	8008f7e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2201      	movs	r2, #1
 80098cc:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2240      	movs	r2, #64	@ 0x40
 80098d4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80098d8:	2340      	movs	r3, #64	@ 0x40
 80098da:	2200      	movs	r2, #0
 80098dc:	2180      	movs	r1, #128	@ 0x80
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f7ff fb4d 	bl	8008f7e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2201      	movs	r2, #1
 80098e8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2240      	movs	r2, #64	@ 0x40
 80098ee:	621a      	str	r2, [r3, #32]

  return ret;
 80098f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80098f2:	4618      	mov	r0, r3
 80098f4:	3710      	adds	r7, #16
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}

080098fa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80098fa:	b480      	push	{r7}
 80098fc:	b083      	sub	sp, #12
 80098fe:	af00      	add	r7, sp, #0
 8009900:	6078      	str	r0, [r7, #4]
 8009902:	460b      	mov	r3, r1
 8009904:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	78fa      	ldrb	r2, [r7, #3]
 800990a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800990c:	2300      	movs	r3, #0
}
 800990e:	4618      	mov	r0, r3
 8009910:	370c      	adds	r7, #12
 8009912:	46bd      	mov	sp, r7
 8009914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009918:	4770      	bx	lr

0800991a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800991a:	b580      	push	{r7, lr}
 800991c:	b084      	sub	sp, #16
 800991e:	af00      	add	r7, sp, #0
 8009920:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009928:	b2db      	uxtb	r3, r3
 800992a:	2b03      	cmp	r3, #3
 800992c:	d12e      	bne.n	800998c <USBD_LL_SOF+0x72>
  {
#ifdef USE_USBD_COMPOSITE
    /* Parse the table of classes in use */
    for (uint32_t i = 0; i < USBD_MAX_SUPPORTED_CLASS; i++)
 800992e:	2300      	movs	r3, #0
 8009930:	60fb      	str	r3, [r7, #12]
 8009932:	e028      	b.n	8009986 <USBD_LL_SOF+0x6c>
    {
      /* Check if current class is in use */
      if ((pdev->tclasslist[i].Active) == 1U)
 8009934:	687a      	ldr	r2, [r7, #4]
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	212c      	movs	r1, #44	@ 0x2c
 800993a:	fb01 f303 	mul.w	r3, r1, r3
 800993e:	4413      	add	r3, r2
 8009940:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	2b01      	cmp	r3, #1
 8009948:	d11a      	bne.n	8009980 <USBD_LL_SOF+0x66>
      {
        if (pdev->pClass[i] != NULL)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	68fa      	ldr	r2, [r7, #12]
 800994e:	32ae      	adds	r2, #174	@ 0xae
 8009950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d013      	beq.n	8009980 <USBD_LL_SOF+0x66>
        {
          if (pdev->pClass[i]->SOF != NULL)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	68fa      	ldr	r2, [r7, #12]
 800995c:	32ae      	adds	r2, #174	@ 0xae
 800995e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009962:	69db      	ldr	r3, [r3, #28]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d00b      	beq.n	8009980 <USBD_LL_SOF+0x66>
          {
            pdev->classId = i;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	68fa      	ldr	r2, [r7, #12]
 800996c:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
            (void)pdev->pClass[i]->SOF(pdev);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	68fa      	ldr	r2, [r7, #12]
 8009974:	32ae      	adds	r2, #174	@ 0xae
 8009976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800997a:	69db      	ldr	r3, [r3, #28]
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	4798      	blx	r3
    for (uint32_t i = 0; i < USBD_MAX_SUPPORTED_CLASS; i++)
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	3301      	adds	r3, #1
 8009984:	60fb      	str	r3, [r7, #12]
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	2b01      	cmp	r3, #1
 800998a:	d9d3      	bls.n	8009934 <USBD_LL_SOF+0x1a>
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800998c:	2300      	movs	r3, #0
}
 800998e:	4618      	mov	r0, r3
 8009990:	3710      	adds	r7, #16
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}

08009996 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009996:	b480      	push	{r7}
 8009998:	b085      	sub	sp, #20
 800999a:	af00      	add	r7, sp, #0
 800999c:	6078      	str	r0, [r7, #4]
 800999e:	460b      	mov	r3, r1
 80099a0:	70fb      	strb	r3, [r7, #3]
#ifdef USE_USBD_COMPOSITE
  /* Parse the table of classes in use */
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 80099a2:	2300      	movs	r3, #0
 80099a4:	60fb      	str	r3, [r7, #12]
 80099a6:	e038      	b.n	8009a1a <USBD_CoreFindIF+0x84>
  {
    /* Check if current class is in use */
    if ((pdev->tclasslist[i].Active) == 1U)
 80099a8:	687a      	ldr	r2, [r7, #4]
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	212c      	movs	r1, #44	@ 0x2c
 80099ae:	fb01 f303 	mul.w	r3, r1, r3
 80099b2:	4413      	add	r3, r2
 80099b4:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	2b01      	cmp	r3, #1
 80099bc:	d12a      	bne.n	8009a14 <USBD_CoreFindIF+0x7e>
    {
      /* Parse all interfaces listed in the current class */
      for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 80099be:	2300      	movs	r3, #0
 80099c0:	60bb      	str	r3, [r7, #8]
 80099c2:	e01b      	b.n	80099fc <USBD_CoreFindIF+0x66>
      {
        /* Check if requested Interface matches the current class interface */
        if (pdev->tclasslist[i].Ifs[j] == index)
 80099c4:	687a      	ldr	r2, [r7, #4]
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	212c      	movs	r1, #44	@ 0x2c
 80099ca:	fb01 f303 	mul.w	r3, r1, r3
 80099ce:	441a      	add	r2, r3
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	4413      	add	r3, r2
 80099d4:	f503 7343 	add.w	r3, r3, #780	@ 0x30c
 80099d8:	781b      	ldrb	r3, [r3, #0]
 80099da:	78fa      	ldrb	r2, [r7, #3]
 80099dc:	429a      	cmp	r2, r3
 80099de:	d10a      	bne.n	80099f6 <USBD_CoreFindIF+0x60>
        {
          if (pdev->pClass[i]->Setup != NULL)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	68fa      	ldr	r2, [r7, #12]
 80099e4:	32ae      	adds	r2, #174	@ 0xae
 80099e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099ea:	689b      	ldr	r3, [r3, #8]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d002      	beq.n	80099f6 <USBD_CoreFindIF+0x60>
          {
            return (uint8_t)i;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	b2db      	uxtb	r3, r3
 80099f4:	e015      	b.n	8009a22 <USBD_CoreFindIF+0x8c>
      for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	3301      	adds	r3, #1
 80099fa:	60bb      	str	r3, [r7, #8]
 80099fc:	687a      	ldr	r2, [r7, #4]
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	212c      	movs	r1, #44	@ 0x2c
 8009a02:	fb01 f303 	mul.w	r3, r1, r3
 8009a06:	4413      	add	r3, r2
 8009a08:	f503 7342 	add.w	r3, r3, #776	@ 0x308
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	68ba      	ldr	r2, [r7, #8]
 8009a10:	429a      	cmp	r2, r3
 8009a12:	d3d7      	bcc.n	80099c4 <USBD_CoreFindIF+0x2e>
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	3301      	adds	r3, #1
 8009a18:	60fb      	str	r3, [r7, #12]
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	2b01      	cmp	r3, #1
 8009a1e:	d9c3      	bls.n	80099a8 <USBD_CoreFindIF+0x12>
        }
      }
    }
  }

  return 0xFFU;
 8009a20:	23ff      	movs	r3, #255	@ 0xff
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 8009a22:	4618      	mov	r0, r3
 8009a24:	3714      	adds	r7, #20
 8009a26:	46bd      	mov	sp, r7
 8009a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2c:	4770      	bx	lr

08009a2e <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009a2e:	b480      	push	{r7}
 8009a30:	b085      	sub	sp, #20
 8009a32:	af00      	add	r7, sp, #0
 8009a34:	6078      	str	r0, [r7, #4]
 8009a36:	460b      	mov	r3, r1
 8009a38:	70fb      	strb	r3, [r7, #3]
#ifdef USE_USBD_COMPOSITE
  /* Parse the table of classes in use */
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	60fb      	str	r3, [r7, #12]
 8009a3e:	e039      	b.n	8009ab4 <USBD_CoreFindEP+0x86>
  {
    /* Check if current class is in use */
    if ((pdev->tclasslist[i].Active) == 1U)
 8009a40:	687a      	ldr	r2, [r7, #4]
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	212c      	movs	r1, #44	@ 0x2c
 8009a46:	fb01 f303 	mul.w	r3, r1, r3
 8009a4a:	4413      	add	r3, r2
 8009a4c:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	2b01      	cmp	r3, #1
 8009a54:	d12b      	bne.n	8009aae <USBD_CoreFindEP+0x80>
    {
      /* Parse all endpoints listed in the current class */
      for (uint32_t j = 0U; j < pdev->tclasslist[i].NumEps; j++)
 8009a56:	2300      	movs	r3, #0
 8009a58:	60bb      	str	r3, [r7, #8]
 8009a5a:	e01c      	b.n	8009a96 <USBD_CoreFindEP+0x68>
      {
        /* Check if requested endpoint matches the current class endpoint */
        if (pdev->tclasslist[i].Eps[j].add == index)
 8009a5c:	6879      	ldr	r1, [r7, #4]
 8009a5e:	68fa      	ldr	r2, [r7, #12]
 8009a60:	4613      	mov	r3, r2
 8009a62:	009b      	lsls	r3, r3, #2
 8009a64:	4413      	add	r3, r2
 8009a66:	005b      	lsls	r3, r3, #1
 8009a68:	4413      	add	r3, r2
 8009a6a:	68ba      	ldr	r2, [r7, #8]
 8009a6c:	4413      	add	r3, r2
 8009a6e:	33be      	adds	r3, #190	@ 0xbe
 8009a70:	f811 3023 	ldrb.w	r3, [r1, r3, lsl #2]
 8009a74:	78fa      	ldrb	r2, [r7, #3]
 8009a76:	429a      	cmp	r2, r3
 8009a78:	d10a      	bne.n	8009a90 <USBD_CoreFindEP+0x62>
        {
          if (pdev->pClass[i]->Setup != NULL)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	68fa      	ldr	r2, [r7, #12]
 8009a7e:	32ae      	adds	r2, #174	@ 0xae
 8009a80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a84:	689b      	ldr	r3, [r3, #8]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d002      	beq.n	8009a90 <USBD_CoreFindEP+0x62>
          {
            return (uint8_t)i;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	b2db      	uxtb	r3, r3
 8009a8e:	e015      	b.n	8009abc <USBD_CoreFindEP+0x8e>
      for (uint32_t j = 0U; j < pdev->tclasslist[i].NumEps; j++)
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	3301      	adds	r3, #1
 8009a94:	60bb      	str	r3, [r7, #8]
 8009a96:	687a      	ldr	r2, [r7, #4]
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	212c      	movs	r1, #44	@ 0x2c
 8009a9c:	fb01 f303 	mul.w	r3, r1, r3
 8009aa0:	4413      	add	r3, r2
 8009aa2:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	68ba      	ldr	r2, [r7, #8]
 8009aaa:	429a      	cmp	r2, r3
 8009aac:	d3d6      	bcc.n	8009a5c <USBD_CoreFindEP+0x2e>
  for (uint32_t i = 0U; i < USBD_MAX_SUPPORTED_CLASS; i++)
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	3301      	adds	r3, #1
 8009ab2:	60fb      	str	r3, [r7, #12]
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	2b01      	cmp	r3, #1
 8009ab8:	d9c2      	bls.n	8009a40 <USBD_CoreFindEP+0x12>
        }
      }
    }
  }

  return 0xFFU;
 8009aba:	23ff      	movs	r3, #255	@ 0xff
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
#endif /* USE_USBD_COMPOSITE */
}
 8009abc:	4618      	mov	r0, r3
 8009abe:	3714      	adds	r7, #20
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac6:	4770      	bx	lr

08009ac8 <USBD_CoreGetEPAdd>:
  * @param  ep_type: USBD_EP_TYPE_CTRL, USBD_EP_TYPE_ISOC, USBD_EP_TYPE_BULK or USBD_EP_TYPE_INTR
  * @param  ClassId: The Class ID
  * @retval Address of the selected endpoint or 0xFFU if no endpoint found.
  */
uint8_t USBD_CoreGetEPAdd(USBD_HandleTypeDef *pdev, uint8_t ep_dir, uint8_t ep_type, uint8_t ClassId)
{
 8009ac8:	b480      	push	{r7}
 8009aca:	b085      	sub	sp, #20
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
 8009ad0:	4608      	mov	r0, r1
 8009ad2:	4611      	mov	r1, r2
 8009ad4:	461a      	mov	r2, r3
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	70fb      	strb	r3, [r7, #3]
 8009ada:	460b      	mov	r3, r1
 8009adc:	70bb      	strb	r3, [r7, #2]
 8009ade:	4613      	mov	r3, r2
 8009ae0:	707b      	strb	r3, [r7, #1]
  uint8_t idx;

  /* Find the EP address in the selected class table */
  for (idx = 0; idx < pdev->tclasslist[ClassId].NumEps; idx++)
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	73fb      	strb	r3, [r7, #15]
 8009ae6:	e03f      	b.n	8009b68 <USBD_CoreGetEPAdd+0xa0>
  {
    if (((pdev->tclasslist[ClassId].Eps[idx].add & USBD_EP_IN) == ep_dir) && \
 8009ae8:	787a      	ldrb	r2, [r7, #1]
 8009aea:	7bf8      	ldrb	r0, [r7, #15]
 8009aec:	6879      	ldr	r1, [r7, #4]
 8009aee:	4613      	mov	r3, r2
 8009af0:	009b      	lsls	r3, r3, #2
 8009af2:	4413      	add	r3, r2
 8009af4:	005b      	lsls	r3, r3, #1
 8009af6:	4413      	add	r3, r2
 8009af8:	4403      	add	r3, r0
 8009afa:	33be      	adds	r3, #190	@ 0xbe
 8009afc:	f811 3023 	ldrb.w	r3, [r1, r3, lsl #2]
 8009b00:	f003 0280 	and.w	r2, r3, #128	@ 0x80
 8009b04:	78fb      	ldrb	r3, [r7, #3]
 8009b06:	429a      	cmp	r2, r3
 8009b08:	d12b      	bne.n	8009b62 <USBD_CoreGetEPAdd+0x9a>
        (pdev->tclasslist[ClassId].Eps[idx].type == ep_type) && \
 8009b0a:	787a      	ldrb	r2, [r7, #1]
 8009b0c:	7bf8      	ldrb	r0, [r7, #15]
 8009b0e:	6879      	ldr	r1, [r7, #4]
 8009b10:	4613      	mov	r3, r2
 8009b12:	009b      	lsls	r3, r3, #2
 8009b14:	4413      	add	r3, r2
 8009b16:	005b      	lsls	r3, r3, #1
 8009b18:	4413      	add	r3, r2
 8009b1a:	4403      	add	r3, r0
 8009b1c:	33be      	adds	r3, #190	@ 0xbe
 8009b1e:	009b      	lsls	r3, r3, #2
 8009b20:	440b      	add	r3, r1
 8009b22:	785b      	ldrb	r3, [r3, #1]
    if (((pdev->tclasslist[ClassId].Eps[idx].add & USBD_EP_IN) == ep_dir) && \
 8009b24:	78ba      	ldrb	r2, [r7, #2]
 8009b26:	429a      	cmp	r2, r3
 8009b28:	d11b      	bne.n	8009b62 <USBD_CoreGetEPAdd+0x9a>
        (pdev->tclasslist[ClassId].Eps[idx].is_used != 0U))
 8009b2a:	787a      	ldrb	r2, [r7, #1]
 8009b2c:	7bf8      	ldrb	r0, [r7, #15]
 8009b2e:	6879      	ldr	r1, [r7, #4]
 8009b30:	4613      	mov	r3, r2
 8009b32:	009b      	lsls	r3, r3, #2
 8009b34:	4413      	add	r3, r2
 8009b36:	005b      	lsls	r3, r3, #1
 8009b38:	4413      	add	r3, r2
 8009b3a:	4403      	add	r3, r0
 8009b3c:	33be      	adds	r3, #190	@ 0xbe
 8009b3e:	009b      	lsls	r3, r3, #2
 8009b40:	440b      	add	r3, r1
 8009b42:	78db      	ldrb	r3, [r3, #3]
        (pdev->tclasslist[ClassId].Eps[idx].type == ep_type) && \
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d00c      	beq.n	8009b62 <USBD_CoreGetEPAdd+0x9a>
    {
      return (pdev->tclasslist[ClassId].Eps[idx].add);
 8009b48:	787a      	ldrb	r2, [r7, #1]
 8009b4a:	7bf8      	ldrb	r0, [r7, #15]
 8009b4c:	6879      	ldr	r1, [r7, #4]
 8009b4e:	4613      	mov	r3, r2
 8009b50:	009b      	lsls	r3, r3, #2
 8009b52:	4413      	add	r3, r2
 8009b54:	005b      	lsls	r3, r3, #1
 8009b56:	4413      	add	r3, r2
 8009b58:	4403      	add	r3, r0
 8009b5a:	33be      	adds	r3, #190	@ 0xbe
 8009b5c:	f811 3023 	ldrb.w	r3, [r1, r3, lsl #2]
 8009b60:	e00f      	b.n	8009b82 <USBD_CoreGetEPAdd+0xba>
  for (idx = 0; idx < pdev->tclasslist[ClassId].NumEps; idx++)
 8009b62:	7bfb      	ldrb	r3, [r7, #15]
 8009b64:	3301      	adds	r3, #1
 8009b66:	73fb      	strb	r3, [r7, #15]
 8009b68:	7bfa      	ldrb	r2, [r7, #15]
 8009b6a:	787b      	ldrb	r3, [r7, #1]
 8009b6c:	6879      	ldr	r1, [r7, #4]
 8009b6e:	202c      	movs	r0, #44	@ 0x2c
 8009b70:	fb00 f303 	mul.w	r3, r0, r3
 8009b74:	440b      	add	r3, r1
 8009b76:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	429a      	cmp	r2, r3
 8009b7e:	d3b3      	bcc.n	8009ae8 <USBD_CoreGetEPAdd+0x20>
    }
  }

  /* If reaching this point, then no endpoint was found */
  return 0xFFU;
 8009b80:	23ff      	movs	r3, #255	@ 0xff
}
 8009b82:	4618      	mov	r0, r3
 8009b84:	3714      	adds	r7, #20
 8009b86:	46bd      	mov	sp, r7
 8009b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8c:	4770      	bx	lr

08009b8e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009b8e:	b480      	push	{r7}
 8009b90:	b087      	sub	sp, #28
 8009b92:	af00      	add	r7, sp, #0
 8009b94:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009b9a:	697b      	ldr	r3, [r7, #20]
 8009b9c:	781b      	ldrb	r3, [r3, #0]
 8009b9e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009ba0:	697b      	ldr	r3, [r7, #20]
 8009ba2:	3301      	adds	r3, #1
 8009ba4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009ba6:	697b      	ldr	r3, [r7, #20]
 8009ba8:	781b      	ldrb	r3, [r3, #0]
 8009baa:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009bac:	8a3b      	ldrh	r3, [r7, #16]
 8009bae:	021b      	lsls	r3, r3, #8
 8009bb0:	b21a      	sxth	r2, r3
 8009bb2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009bb6:	4313      	orrs	r3, r2
 8009bb8:	b21b      	sxth	r3, r3
 8009bba:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009bbc:	89fb      	ldrh	r3, [r7, #14]
}
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	371c      	adds	r7, #28
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc8:	4770      	bx	lr
	...

08009bcc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b084      	sub	sp, #16
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
 8009bd4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	781b      	ldrb	r3, [r3, #0]
 8009bde:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009be2:	2b40      	cmp	r3, #64	@ 0x40
 8009be4:	d005      	beq.n	8009bf2 <USBD_StdDevReq+0x26>
 8009be6:	2b40      	cmp	r3, #64	@ 0x40
 8009be8:	d857      	bhi.n	8009c9a <USBD_StdDevReq+0xce>
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d00f      	beq.n	8009c0e <USBD_StdDevReq+0x42>
 8009bee:	2b20      	cmp	r3, #32
 8009bf0:	d153      	bne.n	8009c9a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	32ae      	adds	r2, #174	@ 0xae
 8009bfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c00:	689b      	ldr	r3, [r3, #8]
 8009c02:	6839      	ldr	r1, [r7, #0]
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	4798      	blx	r3
 8009c08:	4603      	mov	r3, r0
 8009c0a:	73fb      	strb	r3, [r7, #15]
      break;
 8009c0c:	e04a      	b.n	8009ca4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	785b      	ldrb	r3, [r3, #1]
 8009c12:	2b09      	cmp	r3, #9
 8009c14:	d83b      	bhi.n	8009c8e <USBD_StdDevReq+0xc2>
 8009c16:	a201      	add	r2, pc, #4	@ (adr r2, 8009c1c <USBD_StdDevReq+0x50>)
 8009c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c1c:	08009c71 	.word	0x08009c71
 8009c20:	08009c85 	.word	0x08009c85
 8009c24:	08009c8f 	.word	0x08009c8f
 8009c28:	08009c7b 	.word	0x08009c7b
 8009c2c:	08009c8f 	.word	0x08009c8f
 8009c30:	08009c4f 	.word	0x08009c4f
 8009c34:	08009c45 	.word	0x08009c45
 8009c38:	08009c8f 	.word	0x08009c8f
 8009c3c:	08009c67 	.word	0x08009c67
 8009c40:	08009c59 	.word	0x08009c59
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009c44:	6839      	ldr	r1, [r7, #0]
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f000 fa3c 	bl	800a0c4 <USBD_GetDescriptor>
          break;
 8009c4c:	e024      	b.n	8009c98 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009c4e:	6839      	ldr	r1, [r7, #0]
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f000 fbdb 	bl	800a40c <USBD_SetAddress>
          break;
 8009c56:	e01f      	b.n	8009c98 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009c58:	6839      	ldr	r1, [r7, #0]
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f000 fc1a 	bl	800a494 <USBD_SetConfig>
 8009c60:	4603      	mov	r3, r0
 8009c62:	73fb      	strb	r3, [r7, #15]
          break;
 8009c64:	e018      	b.n	8009c98 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009c66:	6839      	ldr	r1, [r7, #0]
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f000 fcbd 	bl	800a5e8 <USBD_GetConfig>
          break;
 8009c6e:	e013      	b.n	8009c98 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009c70:	6839      	ldr	r1, [r7, #0]
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f000 fcee 	bl	800a654 <USBD_GetStatus>
          break;
 8009c78:	e00e      	b.n	8009c98 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009c7a:	6839      	ldr	r1, [r7, #0]
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f000 fd1d 	bl	800a6bc <USBD_SetFeature>
          break;
 8009c82:	e009      	b.n	8009c98 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009c84:	6839      	ldr	r1, [r7, #0]
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f000 fd41 	bl	800a70e <USBD_ClrFeature>
          break;
 8009c8c:	e004      	b.n	8009c98 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009c8e:	6839      	ldr	r1, [r7, #0]
 8009c90:	6878      	ldr	r0, [r7, #4]
 8009c92:	f000 fd98 	bl	800a7c6 <USBD_CtlError>
          break;
 8009c96:	bf00      	nop
      }
      break;
 8009c98:	e004      	b.n	8009ca4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009c9a:	6839      	ldr	r1, [r7, #0]
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f000 fd92 	bl	800a7c6 <USBD_CtlError>
      break;
 8009ca2:	bf00      	nop
  }

  return ret;
 8009ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3710      	adds	r7, #16
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}
 8009cae:	bf00      	nop

08009cb0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b084      	sub	sp, #16
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
 8009cb8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	781b      	ldrb	r3, [r3, #0]
 8009cc2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009cc6:	2b40      	cmp	r3, #64	@ 0x40
 8009cc8:	d005      	beq.n	8009cd6 <USBD_StdItfReq+0x26>
 8009cca:	2b40      	cmp	r3, #64	@ 0x40
 8009ccc:	d852      	bhi.n	8009d74 <USBD_StdItfReq+0xc4>
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d001      	beq.n	8009cd6 <USBD_StdItfReq+0x26>
 8009cd2:	2b20      	cmp	r3, #32
 8009cd4:	d14e      	bne.n	8009d74 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009cdc:	b2db      	uxtb	r3, r3
 8009cde:	3b01      	subs	r3, #1
 8009ce0:	2b02      	cmp	r3, #2
 8009ce2:	d840      	bhi.n	8009d66 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	889b      	ldrh	r3, [r3, #4]
 8009ce8:	b2db      	uxtb	r3, r3
 8009cea:	2b01      	cmp	r3, #1
 8009cec:	d836      	bhi.n	8009d5c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	889b      	ldrh	r3, [r3, #4]
 8009cf2:	b2db      	uxtb	r3, r3
 8009cf4:	4619      	mov	r1, r3
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f7ff fe4d 	bl	8009996 <USBD_CoreFindIF>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009d00:	7bbb      	ldrb	r3, [r7, #14]
 8009d02:	2bff      	cmp	r3, #255	@ 0xff
 8009d04:	d01d      	beq.n	8009d42 <USBD_StdItfReq+0x92>
 8009d06:	7bbb      	ldrb	r3, [r7, #14]
 8009d08:	2b01      	cmp	r3, #1
 8009d0a:	d81a      	bhi.n	8009d42 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009d0c:	7bba      	ldrb	r2, [r7, #14]
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	32ae      	adds	r2, #174	@ 0xae
 8009d12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d16:	689b      	ldr	r3, [r3, #8]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d00f      	beq.n	8009d3c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009d1c:	7bba      	ldrb	r2, [r7, #14]
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009d24:	7bba      	ldrb	r2, [r7, #14]
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	32ae      	adds	r2, #174	@ 0xae
 8009d2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d2e:	689b      	ldr	r3, [r3, #8]
 8009d30:	6839      	ldr	r1, [r7, #0]
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	4798      	blx	r3
 8009d36:	4603      	mov	r3, r0
 8009d38:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009d3a:	e004      	b.n	8009d46 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009d3c:	2303      	movs	r3, #3
 8009d3e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009d40:	e001      	b.n	8009d46 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009d42:	2303      	movs	r3, #3
 8009d44:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	88db      	ldrh	r3, [r3, #6]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d110      	bne.n	8009d70 <USBD_StdItfReq+0xc0>
 8009d4e:	7bfb      	ldrb	r3, [r7, #15]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d10d      	bne.n	8009d70 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f000 ff10 	bl	800ab7a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009d5a:	e009      	b.n	8009d70 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009d5c:	6839      	ldr	r1, [r7, #0]
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f000 fd31 	bl	800a7c6 <USBD_CtlError>
          break;
 8009d64:	e004      	b.n	8009d70 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009d66:	6839      	ldr	r1, [r7, #0]
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f000 fd2c 	bl	800a7c6 <USBD_CtlError>
          break;
 8009d6e:	e000      	b.n	8009d72 <USBD_StdItfReq+0xc2>
          break;
 8009d70:	bf00      	nop
      }
      break;
 8009d72:	e004      	b.n	8009d7e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009d74:	6839      	ldr	r1, [r7, #0]
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f000 fd25 	bl	800a7c6 <USBD_CtlError>
      break;
 8009d7c:	bf00      	nop
  }

  return ret;
 8009d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d80:	4618      	mov	r0, r3
 8009d82:	3710      	adds	r7, #16
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}

08009d88 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b084      	sub	sp, #16
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
 8009d90:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009d92:	2300      	movs	r3, #0
 8009d94:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	889b      	ldrh	r3, [r3, #4]
 8009d9a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	781b      	ldrb	r3, [r3, #0]
 8009da0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009da4:	2b40      	cmp	r3, #64	@ 0x40
 8009da6:	d007      	beq.n	8009db8 <USBD_StdEPReq+0x30>
 8009da8:	2b40      	cmp	r3, #64	@ 0x40
 8009daa:	f200 817f 	bhi.w	800a0ac <USBD_StdEPReq+0x324>
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d02a      	beq.n	8009e08 <USBD_StdEPReq+0x80>
 8009db2:	2b20      	cmp	r3, #32
 8009db4:	f040 817a 	bne.w	800a0ac <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009db8:	7bbb      	ldrb	r3, [r7, #14]
 8009dba:	4619      	mov	r1, r3
 8009dbc:	6878      	ldr	r0, [r7, #4]
 8009dbe:	f7ff fe36 	bl	8009a2e <USBD_CoreFindEP>
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009dc6:	7b7b      	ldrb	r3, [r7, #13]
 8009dc8:	2bff      	cmp	r3, #255	@ 0xff
 8009dca:	f000 8174 	beq.w	800a0b6 <USBD_StdEPReq+0x32e>
 8009dce:	7b7b      	ldrb	r3, [r7, #13]
 8009dd0:	2b01      	cmp	r3, #1
 8009dd2:	f200 8170 	bhi.w	800a0b6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009dd6:	7b7a      	ldrb	r2, [r7, #13]
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009dde:	7b7a      	ldrb	r2, [r7, #13]
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	32ae      	adds	r2, #174	@ 0xae
 8009de4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009de8:	689b      	ldr	r3, [r3, #8]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	f000 8163 	beq.w	800a0b6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009df0:	7b7a      	ldrb	r2, [r7, #13]
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	32ae      	adds	r2, #174	@ 0xae
 8009df6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dfa:	689b      	ldr	r3, [r3, #8]
 8009dfc:	6839      	ldr	r1, [r7, #0]
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	4798      	blx	r3
 8009e02:	4603      	mov	r3, r0
 8009e04:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009e06:	e156      	b.n	800a0b6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	785b      	ldrb	r3, [r3, #1]
 8009e0c:	2b03      	cmp	r3, #3
 8009e0e:	d008      	beq.n	8009e22 <USBD_StdEPReq+0x9a>
 8009e10:	2b03      	cmp	r3, #3
 8009e12:	f300 8145 	bgt.w	800a0a0 <USBD_StdEPReq+0x318>
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	f000 809b 	beq.w	8009f52 <USBD_StdEPReq+0x1ca>
 8009e1c:	2b01      	cmp	r3, #1
 8009e1e:	d03c      	beq.n	8009e9a <USBD_StdEPReq+0x112>
 8009e20:	e13e      	b.n	800a0a0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e28:	b2db      	uxtb	r3, r3
 8009e2a:	2b02      	cmp	r3, #2
 8009e2c:	d002      	beq.n	8009e34 <USBD_StdEPReq+0xac>
 8009e2e:	2b03      	cmp	r3, #3
 8009e30:	d016      	beq.n	8009e60 <USBD_StdEPReq+0xd8>
 8009e32:	e02c      	b.n	8009e8e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009e34:	7bbb      	ldrb	r3, [r7, #14]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d00d      	beq.n	8009e56 <USBD_StdEPReq+0xce>
 8009e3a:	7bbb      	ldrb	r3, [r7, #14]
 8009e3c:	2b80      	cmp	r3, #128	@ 0x80
 8009e3e:	d00a      	beq.n	8009e56 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009e40:	7bbb      	ldrb	r3, [r7, #14]
 8009e42:	4619      	mov	r1, r3
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	f7ff f8d3 	bl	8008ff0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009e4a:	2180      	movs	r1, #128	@ 0x80
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f7ff f8cf 	bl	8008ff0 <USBD_LL_StallEP>
 8009e52:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009e54:	e020      	b.n	8009e98 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009e56:	6839      	ldr	r1, [r7, #0]
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f000 fcb4 	bl	800a7c6 <USBD_CtlError>
              break;
 8009e5e:	e01b      	b.n	8009e98 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	885b      	ldrh	r3, [r3, #2]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d10e      	bne.n	8009e86 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009e68:	7bbb      	ldrb	r3, [r7, #14]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d00b      	beq.n	8009e86 <USBD_StdEPReq+0xfe>
 8009e6e:	7bbb      	ldrb	r3, [r7, #14]
 8009e70:	2b80      	cmp	r3, #128	@ 0x80
 8009e72:	d008      	beq.n	8009e86 <USBD_StdEPReq+0xfe>
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	88db      	ldrh	r3, [r3, #6]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d104      	bne.n	8009e86 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009e7c:	7bbb      	ldrb	r3, [r7, #14]
 8009e7e:	4619      	mov	r1, r3
 8009e80:	6878      	ldr	r0, [r7, #4]
 8009e82:	f7ff f8b5 	bl	8008ff0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f000 fe77 	bl	800ab7a <USBD_CtlSendStatus>

              break;
 8009e8c:	e004      	b.n	8009e98 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009e8e:	6839      	ldr	r1, [r7, #0]
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	f000 fc98 	bl	800a7c6 <USBD_CtlError>
              break;
 8009e96:	bf00      	nop
          }
          break;
 8009e98:	e107      	b.n	800a0aa <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ea0:	b2db      	uxtb	r3, r3
 8009ea2:	2b02      	cmp	r3, #2
 8009ea4:	d002      	beq.n	8009eac <USBD_StdEPReq+0x124>
 8009ea6:	2b03      	cmp	r3, #3
 8009ea8:	d016      	beq.n	8009ed8 <USBD_StdEPReq+0x150>
 8009eaa:	e04b      	b.n	8009f44 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009eac:	7bbb      	ldrb	r3, [r7, #14]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d00d      	beq.n	8009ece <USBD_StdEPReq+0x146>
 8009eb2:	7bbb      	ldrb	r3, [r7, #14]
 8009eb4:	2b80      	cmp	r3, #128	@ 0x80
 8009eb6:	d00a      	beq.n	8009ece <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009eb8:	7bbb      	ldrb	r3, [r7, #14]
 8009eba:	4619      	mov	r1, r3
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f7ff f897 	bl	8008ff0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009ec2:	2180      	movs	r1, #128	@ 0x80
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f7ff f893 	bl	8008ff0 <USBD_LL_StallEP>
 8009eca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009ecc:	e040      	b.n	8009f50 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009ece:	6839      	ldr	r1, [r7, #0]
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	f000 fc78 	bl	800a7c6 <USBD_CtlError>
              break;
 8009ed6:	e03b      	b.n	8009f50 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	885b      	ldrh	r3, [r3, #2]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d136      	bne.n	8009f4e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009ee0:	7bbb      	ldrb	r3, [r7, #14]
 8009ee2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d004      	beq.n	8009ef4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009eea:	7bbb      	ldrb	r3, [r7, #14]
 8009eec:	4619      	mov	r1, r3
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	f7ff f897 	bl	8009022 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f000 fe40 	bl	800ab7a <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009efa:	7bbb      	ldrb	r3, [r7, #14]
 8009efc:	4619      	mov	r1, r3
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f7ff fd95 	bl	8009a2e <USBD_CoreFindEP>
 8009f04:	4603      	mov	r3, r0
 8009f06:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009f08:	7b7b      	ldrb	r3, [r7, #13]
 8009f0a:	2bff      	cmp	r3, #255	@ 0xff
 8009f0c:	d01f      	beq.n	8009f4e <USBD_StdEPReq+0x1c6>
 8009f0e:	7b7b      	ldrb	r3, [r7, #13]
 8009f10:	2b01      	cmp	r3, #1
 8009f12:	d81c      	bhi.n	8009f4e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009f14:	7b7a      	ldrb	r2, [r7, #13]
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009f1c:	7b7a      	ldrb	r2, [r7, #13]
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	32ae      	adds	r2, #174	@ 0xae
 8009f22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f26:	689b      	ldr	r3, [r3, #8]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d010      	beq.n	8009f4e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009f2c:	7b7a      	ldrb	r2, [r7, #13]
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	32ae      	adds	r2, #174	@ 0xae
 8009f32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f36:	689b      	ldr	r3, [r3, #8]
 8009f38:	6839      	ldr	r1, [r7, #0]
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	4798      	blx	r3
 8009f3e:	4603      	mov	r3, r0
 8009f40:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009f42:	e004      	b.n	8009f4e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009f44:	6839      	ldr	r1, [r7, #0]
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f000 fc3d 	bl	800a7c6 <USBD_CtlError>
              break;
 8009f4c:	e000      	b.n	8009f50 <USBD_StdEPReq+0x1c8>
              break;
 8009f4e:	bf00      	nop
          }
          break;
 8009f50:	e0ab      	b.n	800a0aa <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f58:	b2db      	uxtb	r3, r3
 8009f5a:	2b02      	cmp	r3, #2
 8009f5c:	d002      	beq.n	8009f64 <USBD_StdEPReq+0x1dc>
 8009f5e:	2b03      	cmp	r3, #3
 8009f60:	d032      	beq.n	8009fc8 <USBD_StdEPReq+0x240>
 8009f62:	e097      	b.n	800a094 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009f64:	7bbb      	ldrb	r3, [r7, #14]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d007      	beq.n	8009f7a <USBD_StdEPReq+0x1f2>
 8009f6a:	7bbb      	ldrb	r3, [r7, #14]
 8009f6c:	2b80      	cmp	r3, #128	@ 0x80
 8009f6e:	d004      	beq.n	8009f7a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009f70:	6839      	ldr	r1, [r7, #0]
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f000 fc27 	bl	800a7c6 <USBD_CtlError>
                break;
 8009f78:	e091      	b.n	800a09e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f7a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	da0b      	bge.n	8009f9a <USBD_StdEPReq+0x212>
 8009f82:	7bbb      	ldrb	r3, [r7, #14]
 8009f84:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009f88:	4613      	mov	r3, r2
 8009f8a:	009b      	lsls	r3, r3, #2
 8009f8c:	4413      	add	r3, r2
 8009f8e:	009b      	lsls	r3, r3, #2
 8009f90:	3310      	adds	r3, #16
 8009f92:	687a      	ldr	r2, [r7, #4]
 8009f94:	4413      	add	r3, r2
 8009f96:	3304      	adds	r3, #4
 8009f98:	e00b      	b.n	8009fb2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009f9a:	7bbb      	ldrb	r3, [r7, #14]
 8009f9c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009fa0:	4613      	mov	r3, r2
 8009fa2:	009b      	lsls	r3, r3, #2
 8009fa4:	4413      	add	r3, r2
 8009fa6:	009b      	lsls	r3, r3, #2
 8009fa8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009fac:	687a      	ldr	r2, [r7, #4]
 8009fae:	4413      	add	r3, r2
 8009fb0:	3304      	adds	r3, #4
 8009fb2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	2202      	movs	r2, #2
 8009fbe:	4619      	mov	r1, r3
 8009fc0:	6878      	ldr	r0, [r7, #4]
 8009fc2:	f000 fd80 	bl	800aac6 <USBD_CtlSendData>
              break;
 8009fc6:	e06a      	b.n	800a09e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009fc8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	da11      	bge.n	8009ff4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009fd0:	7bbb      	ldrb	r3, [r7, #14]
 8009fd2:	f003 020f 	and.w	r2, r3, #15
 8009fd6:	6879      	ldr	r1, [r7, #4]
 8009fd8:	4613      	mov	r3, r2
 8009fda:	009b      	lsls	r3, r3, #2
 8009fdc:	4413      	add	r3, r2
 8009fde:	009b      	lsls	r3, r3, #2
 8009fe0:	440b      	add	r3, r1
 8009fe2:	3324      	adds	r3, #36	@ 0x24
 8009fe4:	881b      	ldrh	r3, [r3, #0]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d117      	bne.n	800a01a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009fea:	6839      	ldr	r1, [r7, #0]
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f000 fbea 	bl	800a7c6 <USBD_CtlError>
                  break;
 8009ff2:	e054      	b.n	800a09e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009ff4:	7bbb      	ldrb	r3, [r7, #14]
 8009ff6:	f003 020f 	and.w	r2, r3, #15
 8009ffa:	6879      	ldr	r1, [r7, #4]
 8009ffc:	4613      	mov	r3, r2
 8009ffe:	009b      	lsls	r3, r3, #2
 800a000:	4413      	add	r3, r2
 800a002:	009b      	lsls	r3, r3, #2
 800a004:	440b      	add	r3, r1
 800a006:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a00a:	881b      	ldrh	r3, [r3, #0]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d104      	bne.n	800a01a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a010:	6839      	ldr	r1, [r7, #0]
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f000 fbd7 	bl	800a7c6 <USBD_CtlError>
                  break;
 800a018:	e041      	b.n	800a09e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a01a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	da0b      	bge.n	800a03a <USBD_StdEPReq+0x2b2>
 800a022:	7bbb      	ldrb	r3, [r7, #14]
 800a024:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a028:	4613      	mov	r3, r2
 800a02a:	009b      	lsls	r3, r3, #2
 800a02c:	4413      	add	r3, r2
 800a02e:	009b      	lsls	r3, r3, #2
 800a030:	3310      	adds	r3, #16
 800a032:	687a      	ldr	r2, [r7, #4]
 800a034:	4413      	add	r3, r2
 800a036:	3304      	adds	r3, #4
 800a038:	e00b      	b.n	800a052 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a03a:	7bbb      	ldrb	r3, [r7, #14]
 800a03c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a040:	4613      	mov	r3, r2
 800a042:	009b      	lsls	r3, r3, #2
 800a044:	4413      	add	r3, r2
 800a046:	009b      	lsls	r3, r3, #2
 800a048:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a04c:	687a      	ldr	r2, [r7, #4]
 800a04e:	4413      	add	r3, r2
 800a050:	3304      	adds	r3, #4
 800a052:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a054:	7bbb      	ldrb	r3, [r7, #14]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d002      	beq.n	800a060 <USBD_StdEPReq+0x2d8>
 800a05a:	7bbb      	ldrb	r3, [r7, #14]
 800a05c:	2b80      	cmp	r3, #128	@ 0x80
 800a05e:	d103      	bne.n	800a068 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a060:	68bb      	ldr	r3, [r7, #8]
 800a062:	2200      	movs	r2, #0
 800a064:	601a      	str	r2, [r3, #0]
 800a066:	e00e      	b.n	800a086 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a068:	7bbb      	ldrb	r3, [r7, #14]
 800a06a:	4619      	mov	r1, r3
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f7fe fff1 	bl	8009054 <USBD_LL_IsStallEP>
 800a072:	4603      	mov	r3, r0
 800a074:	2b00      	cmp	r3, #0
 800a076:	d003      	beq.n	800a080 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	2201      	movs	r2, #1
 800a07c:	601a      	str	r2, [r3, #0]
 800a07e:	e002      	b.n	800a086 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	2200      	movs	r2, #0
 800a084:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a086:	68bb      	ldr	r3, [r7, #8]
 800a088:	2202      	movs	r2, #2
 800a08a:	4619      	mov	r1, r3
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f000 fd1a 	bl	800aac6 <USBD_CtlSendData>
              break;
 800a092:	e004      	b.n	800a09e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a094:	6839      	ldr	r1, [r7, #0]
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f000 fb95 	bl	800a7c6 <USBD_CtlError>
              break;
 800a09c:	bf00      	nop
          }
          break;
 800a09e:	e004      	b.n	800a0aa <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a0a0:	6839      	ldr	r1, [r7, #0]
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f000 fb8f 	bl	800a7c6 <USBD_CtlError>
          break;
 800a0a8:	bf00      	nop
      }
      break;
 800a0aa:	e005      	b.n	800a0b8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a0ac:	6839      	ldr	r1, [r7, #0]
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	f000 fb89 	bl	800a7c6 <USBD_CtlError>
      break;
 800a0b4:	e000      	b.n	800a0b8 <USBD_StdEPReq+0x330>
      break;
 800a0b6:	bf00      	nop
  }

  return ret;
 800a0b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3710      	adds	r7, #16
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}
	...

0800a0c4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b084      	sub	sp, #16
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
 800a0cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	885b      	ldrh	r3, [r3, #2]
 800a0de:	0a1b      	lsrs	r3, r3, #8
 800a0e0:	b29b      	uxth	r3, r3
 800a0e2:	3b01      	subs	r3, #1
 800a0e4:	2b06      	cmp	r3, #6
 800a0e6:	f200 8163 	bhi.w	800a3b0 <USBD_GetDescriptor+0x2ec>
 800a0ea:	a201      	add	r2, pc, #4	@ (adr r2, 800a0f0 <USBD_GetDescriptor+0x2c>)
 800a0ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0f0:	0800a10d 	.word	0x0800a10d
 800a0f4:	0800a125 	.word	0x0800a125
 800a0f8:	0800a19d 	.word	0x0800a19d
 800a0fc:	0800a3b1 	.word	0x0800a3b1
 800a100:	0800a3b1 	.word	0x0800a3b1
 800a104:	0800a313 	.word	0x0800a313
 800a108:	0800a35b 	.word	0x0800a35b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	687a      	ldr	r2, [r7, #4]
 800a116:	7c12      	ldrb	r2, [r2, #16]
 800a118:	f107 0108 	add.w	r1, r7, #8
 800a11c:	4610      	mov	r0, r2
 800a11e:	4798      	blx	r3
 800a120:	60f8      	str	r0, [r7, #12]
      break;
 800a122:	e14d      	b.n	800a3c0 <USBD_GetDescriptor+0x2fc>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	7c1b      	ldrb	r3, [r3, #16]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d11b      	bne.n	800a164 <USBD_GetDescriptor+0xa0>
      {
#ifdef USE_USBD_COMPOSITE
        if ((uint8_t)(pdev->NumClasses) > 0U)
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f8d3 32e4 	ldr.w	r3, [r3, #740]	@ 0x2e4
 800a132:	b2db      	uxtb	r3, r3
 800a134:	2b00      	cmp	r3, #0
 800a136:	d007      	beq.n	800a148 <USBD_GetDescriptor+0x84>
        {
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
 800a138:	4b9c      	ldr	r3, [pc, #624]	@ (800a3ac <USBD_GetDescriptor+0x2e8>)
 800a13a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a13c:	f107 0208 	add.w	r2, r7, #8
 800a140:	4610      	mov	r0, r2
 800a142:	4798      	blx	r3
 800a144:	60f8      	str	r0, [r7, #12]
 800a146:	e008      	b.n	800a15a <USBD_GetDescriptor+0x96>
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a14e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a150:	f107 0208 	add.w	r2, r7, #8
 800a154:	4610      	mov	r0, r2
 800a156:	4798      	blx	r3
 800a158:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	3301      	adds	r3, #1
 800a15e:	2202      	movs	r2, #2
 800a160:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a162:	e12d      	b.n	800a3c0 <USBD_GetDescriptor+0x2fc>
        if ((uint8_t)(pdev->NumClasses) > 0U)
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f8d3 32e4 	ldr.w	r3, [r3, #740]	@ 0x2e4
 800a16a:	b2db      	uxtb	r3, r3
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d007      	beq.n	800a180 <USBD_GetDescriptor+0xbc>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetFSConfigDescriptor(&len);
 800a170:	4b8e      	ldr	r3, [pc, #568]	@ (800a3ac <USBD_GetDescriptor+0x2e8>)
 800a172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a174:	f107 0208 	add.w	r2, r7, #8
 800a178:	4610      	mov	r0, r2
 800a17a:	4798      	blx	r3
 800a17c:	60f8      	str	r0, [r7, #12]
 800a17e:	e008      	b.n	800a192 <USBD_GetDescriptor+0xce>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a188:	f107 0208 	add.w	r2, r7, #8
 800a18c:	4610      	mov	r0, r2
 800a18e:	4798      	blx	r3
 800a190:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	3301      	adds	r3, #1
 800a196:	2202      	movs	r2, #2
 800a198:	701a      	strb	r2, [r3, #0]
      break;
 800a19a:	e111      	b.n	800a3c0 <USBD_GetDescriptor+0x2fc>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	885b      	ldrh	r3, [r3, #2]
 800a1a0:	b2db      	uxtb	r3, r3
 800a1a2:	2b05      	cmp	r3, #5
 800a1a4:	f200 80ac 	bhi.w	800a300 <USBD_GetDescriptor+0x23c>
 800a1a8:	a201      	add	r2, pc, #4	@ (adr r2, 800a1b0 <USBD_GetDescriptor+0xec>)
 800a1aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1ae:	bf00      	nop
 800a1b0:	0800a1c9 	.word	0x0800a1c9
 800a1b4:	0800a1fd 	.word	0x0800a1fd
 800a1b8:	0800a231 	.word	0x0800a231
 800a1bc:	0800a265 	.word	0x0800a265
 800a1c0:	0800a299 	.word	0x0800a299
 800a1c4:	0800a2cd 	.word	0x0800a2cd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1ce:	685b      	ldr	r3, [r3, #4]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d00b      	beq.n	800a1ec <USBD_GetDescriptor+0x128>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1da:	685b      	ldr	r3, [r3, #4]
 800a1dc:	687a      	ldr	r2, [r7, #4]
 800a1de:	7c12      	ldrb	r2, [r2, #16]
 800a1e0:	f107 0108 	add.w	r1, r7, #8
 800a1e4:	4610      	mov	r0, r2
 800a1e6:	4798      	blx	r3
 800a1e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a1ea:	e091      	b.n	800a310 <USBD_GetDescriptor+0x24c>
            USBD_CtlError(pdev, req);
 800a1ec:	6839      	ldr	r1, [r7, #0]
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	f000 fae9 	bl	800a7c6 <USBD_CtlError>
            err++;
 800a1f4:	7afb      	ldrb	r3, [r7, #11]
 800a1f6:	3301      	adds	r3, #1
 800a1f8:	72fb      	strb	r3, [r7, #11]
          break;
 800a1fa:	e089      	b.n	800a310 <USBD_GetDescriptor+0x24c>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a202:	689b      	ldr	r3, [r3, #8]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d00b      	beq.n	800a220 <USBD_GetDescriptor+0x15c>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a20e:	689b      	ldr	r3, [r3, #8]
 800a210:	687a      	ldr	r2, [r7, #4]
 800a212:	7c12      	ldrb	r2, [r2, #16]
 800a214:	f107 0108 	add.w	r1, r7, #8
 800a218:	4610      	mov	r0, r2
 800a21a:	4798      	blx	r3
 800a21c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a21e:	e077      	b.n	800a310 <USBD_GetDescriptor+0x24c>
            USBD_CtlError(pdev, req);
 800a220:	6839      	ldr	r1, [r7, #0]
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f000 facf 	bl	800a7c6 <USBD_CtlError>
            err++;
 800a228:	7afb      	ldrb	r3, [r7, #11]
 800a22a:	3301      	adds	r3, #1
 800a22c:	72fb      	strb	r3, [r7, #11]
          break;
 800a22e:	e06f      	b.n	800a310 <USBD_GetDescriptor+0x24c>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a236:	68db      	ldr	r3, [r3, #12]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d00b      	beq.n	800a254 <USBD_GetDescriptor+0x190>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a242:	68db      	ldr	r3, [r3, #12]
 800a244:	687a      	ldr	r2, [r7, #4]
 800a246:	7c12      	ldrb	r2, [r2, #16]
 800a248:	f107 0108 	add.w	r1, r7, #8
 800a24c:	4610      	mov	r0, r2
 800a24e:	4798      	blx	r3
 800a250:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a252:	e05d      	b.n	800a310 <USBD_GetDescriptor+0x24c>
            USBD_CtlError(pdev, req);
 800a254:	6839      	ldr	r1, [r7, #0]
 800a256:	6878      	ldr	r0, [r7, #4]
 800a258:	f000 fab5 	bl	800a7c6 <USBD_CtlError>
            err++;
 800a25c:	7afb      	ldrb	r3, [r7, #11]
 800a25e:	3301      	adds	r3, #1
 800a260:	72fb      	strb	r3, [r7, #11]
          break;
 800a262:	e055      	b.n	800a310 <USBD_GetDescriptor+0x24c>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a26a:	691b      	ldr	r3, [r3, #16]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d00b      	beq.n	800a288 <USBD_GetDescriptor+0x1c4>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a276:	691b      	ldr	r3, [r3, #16]
 800a278:	687a      	ldr	r2, [r7, #4]
 800a27a:	7c12      	ldrb	r2, [r2, #16]
 800a27c:	f107 0108 	add.w	r1, r7, #8
 800a280:	4610      	mov	r0, r2
 800a282:	4798      	blx	r3
 800a284:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a286:	e043      	b.n	800a310 <USBD_GetDescriptor+0x24c>
            USBD_CtlError(pdev, req);
 800a288:	6839      	ldr	r1, [r7, #0]
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f000 fa9b 	bl	800a7c6 <USBD_CtlError>
            err++;
 800a290:	7afb      	ldrb	r3, [r7, #11]
 800a292:	3301      	adds	r3, #1
 800a294:	72fb      	strb	r3, [r7, #11]
          break;
 800a296:	e03b      	b.n	800a310 <USBD_GetDescriptor+0x24c>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a29e:	695b      	ldr	r3, [r3, #20]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d00b      	beq.n	800a2bc <USBD_GetDescriptor+0x1f8>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a2aa:	695b      	ldr	r3, [r3, #20]
 800a2ac:	687a      	ldr	r2, [r7, #4]
 800a2ae:	7c12      	ldrb	r2, [r2, #16]
 800a2b0:	f107 0108 	add.w	r1, r7, #8
 800a2b4:	4610      	mov	r0, r2
 800a2b6:	4798      	blx	r3
 800a2b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a2ba:	e029      	b.n	800a310 <USBD_GetDescriptor+0x24c>
            USBD_CtlError(pdev, req);
 800a2bc:	6839      	ldr	r1, [r7, #0]
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	f000 fa81 	bl	800a7c6 <USBD_CtlError>
            err++;
 800a2c4:	7afb      	ldrb	r3, [r7, #11]
 800a2c6:	3301      	adds	r3, #1
 800a2c8:	72fb      	strb	r3, [r7, #11]
          break;
 800a2ca:	e021      	b.n	800a310 <USBD_GetDescriptor+0x24c>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a2d2:	699b      	ldr	r3, [r3, #24]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d00b      	beq.n	800a2f0 <USBD_GetDescriptor+0x22c>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a2de:	699b      	ldr	r3, [r3, #24]
 800a2e0:	687a      	ldr	r2, [r7, #4]
 800a2e2:	7c12      	ldrb	r2, [r2, #16]
 800a2e4:	f107 0108 	add.w	r1, r7, #8
 800a2e8:	4610      	mov	r0, r2
 800a2ea:	4798      	blx	r3
 800a2ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a2ee:	e00f      	b.n	800a310 <USBD_GetDescriptor+0x24c>
            USBD_CtlError(pdev, req);
 800a2f0:	6839      	ldr	r1, [r7, #0]
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	f000 fa67 	bl	800a7c6 <USBD_CtlError>
            err++;
 800a2f8:	7afb      	ldrb	r3, [r7, #11]
 800a2fa:	3301      	adds	r3, #1
 800a2fc:	72fb      	strb	r3, [r7, #11]
          break;
 800a2fe:	e007      	b.n	800a310 <USBD_GetDescriptor+0x24c>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a300:	6839      	ldr	r1, [r7, #0]
 800a302:	6878      	ldr	r0, [r7, #4]
 800a304:	f000 fa5f 	bl	800a7c6 <USBD_CtlError>
          err++;
 800a308:	7afb      	ldrb	r3, [r7, #11]
 800a30a:	3301      	adds	r3, #1
 800a30c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a30e:	bf00      	nop
      }
      break;
 800a310:	e056      	b.n	800a3c0 <USBD_GetDescriptor+0x2fc>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	7c1b      	ldrb	r3, [r3, #16]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d117      	bne.n	800a34a <USBD_GetDescriptor+0x286>
      {
#ifdef USE_USBD_COMPOSITE
        if ((uint8_t)(pdev->NumClasses) > 0U)
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	f8d3 32e4 	ldr.w	r3, [r3, #740]	@ 0x2e4
 800a320:	b2db      	uxtb	r3, r3
 800a322:	2b00      	cmp	r3, #0
 800a324:	d007      	beq.n	800a336 <USBD_GetDescriptor+0x272>
        {
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
 800a326:	4b21      	ldr	r3, [pc, #132]	@ (800a3ac <USBD_GetDescriptor+0x2e8>)
 800a328:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a32a:	f107 0208 	add.w	r2, r7, #8
 800a32e:	4610      	mov	r0, r2
 800a330:	4798      	blx	r3
 800a332:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a334:	e044      	b.n	800a3c0 <USBD_GetDescriptor+0x2fc>
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a33c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a33e:	f107 0208 	add.w	r2, r7, #8
 800a342:	4610      	mov	r0, r2
 800a344:	4798      	blx	r3
 800a346:	60f8      	str	r0, [r7, #12]
      break;
 800a348:	e03a      	b.n	800a3c0 <USBD_GetDescriptor+0x2fc>
        USBD_CtlError(pdev, req);
 800a34a:	6839      	ldr	r1, [r7, #0]
 800a34c:	6878      	ldr	r0, [r7, #4]
 800a34e:	f000 fa3a 	bl	800a7c6 <USBD_CtlError>
        err++;
 800a352:	7afb      	ldrb	r3, [r7, #11]
 800a354:	3301      	adds	r3, #1
 800a356:	72fb      	strb	r3, [r7, #11]
      break;
 800a358:	e032      	b.n	800a3c0 <USBD_GetDescriptor+0x2fc>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	7c1b      	ldrb	r3, [r3, #16]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d11b      	bne.n	800a39a <USBD_GetDescriptor+0x2d6>
      {
#ifdef USE_USBD_COMPOSITE
        if ((uint8_t)(pdev->NumClasses) > 0U)
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	f8d3 32e4 	ldr.w	r3, [r3, #740]	@ 0x2e4
 800a368:	b2db      	uxtb	r3, r3
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d007      	beq.n	800a37e <USBD_GetDescriptor+0x2ba>
        {
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
 800a36e:	4b0f      	ldr	r3, [pc, #60]	@ (800a3ac <USBD_GetDescriptor+0x2e8>)
 800a370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a372:	f107 0208 	add.w	r2, r7, #8
 800a376:	4610      	mov	r0, r2
 800a378:	4798      	blx	r3
 800a37a:	60f8      	str	r0, [r7, #12]
 800a37c:	e008      	b.n	800a390 <USBD_GetDescriptor+0x2cc>
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a386:	f107 0208 	add.w	r2, r7, #8
 800a38a:	4610      	mov	r0, r2
 800a38c:	4798      	blx	r3
 800a38e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	3301      	adds	r3, #1
 800a394:	2207      	movs	r2, #7
 800a396:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a398:	e012      	b.n	800a3c0 <USBD_GetDescriptor+0x2fc>
        USBD_CtlError(pdev, req);
 800a39a:	6839      	ldr	r1, [r7, #0]
 800a39c:	6878      	ldr	r0, [r7, #4]
 800a39e:	f000 fa12 	bl	800a7c6 <USBD_CtlError>
        err++;
 800a3a2:	7afb      	ldrb	r3, [r7, #11]
 800a3a4:	3301      	adds	r3, #1
 800a3a6:	72fb      	strb	r3, [r7, #11]
      break;
 800a3a8:	e00a      	b.n	800a3c0 <USBD_GetDescriptor+0x2fc>
 800a3aa:	bf00      	nop
 800a3ac:	200000a8 	.word	0x200000a8

    default:
      USBD_CtlError(pdev, req);
 800a3b0:	6839      	ldr	r1, [r7, #0]
 800a3b2:	6878      	ldr	r0, [r7, #4]
 800a3b4:	f000 fa07 	bl	800a7c6 <USBD_CtlError>
      err++;
 800a3b8:	7afb      	ldrb	r3, [r7, #11]
 800a3ba:	3301      	adds	r3, #1
 800a3bc:	72fb      	strb	r3, [r7, #11]
      break;
 800a3be:	bf00      	nop
  }

  if (err != 0U)
 800a3c0:	7afb      	ldrb	r3, [r7, #11]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d11e      	bne.n	800a404 <USBD_GetDescriptor+0x340>
  {
    return;
  }

  if (req->wLength != 0U)
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	88db      	ldrh	r3, [r3, #6]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d016      	beq.n	800a3fc <USBD_GetDescriptor+0x338>
  {
    if (len != 0U)
 800a3ce:	893b      	ldrh	r3, [r7, #8]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d00e      	beq.n	800a3f2 <USBD_GetDescriptor+0x32e>
    {
      len = MIN(len, req->wLength);
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	88da      	ldrh	r2, [r3, #6]
 800a3d8:	893b      	ldrh	r3, [r7, #8]
 800a3da:	4293      	cmp	r3, r2
 800a3dc:	bf28      	it	cs
 800a3de:	4613      	movcs	r3, r2
 800a3e0:	b29b      	uxth	r3, r3
 800a3e2:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a3e4:	893b      	ldrh	r3, [r7, #8]
 800a3e6:	461a      	mov	r2, r3
 800a3e8:	68f9      	ldr	r1, [r7, #12]
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f000 fb6b 	bl	800aac6 <USBD_CtlSendData>
 800a3f0:	e009      	b.n	800a406 <USBD_GetDescriptor+0x342>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a3f2:	6839      	ldr	r1, [r7, #0]
 800a3f4:	6878      	ldr	r0, [r7, #4]
 800a3f6:	f000 f9e6 	bl	800a7c6 <USBD_CtlError>
 800a3fa:	e004      	b.n	800a406 <USBD_GetDescriptor+0x342>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a3fc:	6878      	ldr	r0, [r7, #4]
 800a3fe:	f000 fbbc 	bl	800ab7a <USBD_CtlSendStatus>
 800a402:	e000      	b.n	800a406 <USBD_GetDescriptor+0x342>
    return;
 800a404:	bf00      	nop
  }
}
 800a406:	3710      	adds	r7, #16
 800a408:	46bd      	mov	sp, r7
 800a40a:	bd80      	pop	{r7, pc}

0800a40c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b084      	sub	sp, #16
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
 800a414:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	889b      	ldrh	r3, [r3, #4]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d131      	bne.n	800a482 <USBD_SetAddress+0x76>
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	88db      	ldrh	r3, [r3, #6]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d12d      	bne.n	800a482 <USBD_SetAddress+0x76>
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	885b      	ldrh	r3, [r3, #2]
 800a42a:	2b7f      	cmp	r3, #127	@ 0x7f
 800a42c:	d829      	bhi.n	800a482 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	885b      	ldrh	r3, [r3, #2]
 800a432:	b2db      	uxtb	r3, r3
 800a434:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a438:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a440:	b2db      	uxtb	r3, r3
 800a442:	2b03      	cmp	r3, #3
 800a444:	d104      	bne.n	800a450 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a446:	6839      	ldr	r1, [r7, #0]
 800a448:	6878      	ldr	r0, [r7, #4]
 800a44a:	f000 f9bc 	bl	800a7c6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a44e:	e01d      	b.n	800a48c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	7bfa      	ldrb	r2, [r7, #15]
 800a454:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a458:	7bfb      	ldrb	r3, [r7, #15]
 800a45a:	4619      	mov	r1, r3
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	f7fe fe25 	bl	80090ac <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a462:	6878      	ldr	r0, [r7, #4]
 800a464:	f000 fb89 	bl	800ab7a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a468:	7bfb      	ldrb	r3, [r7, #15]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d004      	beq.n	800a478 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2202      	movs	r2, #2
 800a472:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a476:	e009      	b.n	800a48c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2201      	movs	r2, #1
 800a47c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a480:	e004      	b.n	800a48c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a482:	6839      	ldr	r1, [r7, #0]
 800a484:	6878      	ldr	r0, [r7, #4]
 800a486:	f000 f99e 	bl	800a7c6 <USBD_CtlError>
  }
}
 800a48a:	bf00      	nop
 800a48c:	bf00      	nop
 800a48e:	3710      	adds	r7, #16
 800a490:	46bd      	mov	sp, r7
 800a492:	bd80      	pop	{r7, pc}

0800a494 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b084      	sub	sp, #16
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
 800a49c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a49e:	2300      	movs	r3, #0
 800a4a0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	885b      	ldrh	r3, [r3, #2]
 800a4a6:	b2da      	uxtb	r2, r3
 800a4a8:	4b4e      	ldr	r3, [pc, #312]	@ (800a5e4 <USBD_SetConfig+0x150>)
 800a4aa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a4ac:	4b4d      	ldr	r3, [pc, #308]	@ (800a5e4 <USBD_SetConfig+0x150>)
 800a4ae:	781b      	ldrb	r3, [r3, #0]
 800a4b0:	2b01      	cmp	r3, #1
 800a4b2:	d905      	bls.n	800a4c0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a4b4:	6839      	ldr	r1, [r7, #0]
 800a4b6:	6878      	ldr	r0, [r7, #4]
 800a4b8:	f000 f985 	bl	800a7c6 <USBD_CtlError>
    return USBD_FAIL;
 800a4bc:	2303      	movs	r3, #3
 800a4be:	e08c      	b.n	800a5da <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a4c6:	b2db      	uxtb	r3, r3
 800a4c8:	2b02      	cmp	r3, #2
 800a4ca:	d002      	beq.n	800a4d2 <USBD_SetConfig+0x3e>
 800a4cc:	2b03      	cmp	r3, #3
 800a4ce:	d029      	beq.n	800a524 <USBD_SetConfig+0x90>
 800a4d0:	e075      	b.n	800a5be <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a4d2:	4b44      	ldr	r3, [pc, #272]	@ (800a5e4 <USBD_SetConfig+0x150>)
 800a4d4:	781b      	ldrb	r3, [r3, #0]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d020      	beq.n	800a51c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a4da:	4b42      	ldr	r3, [pc, #264]	@ (800a5e4 <USBD_SetConfig+0x150>)
 800a4dc:	781b      	ldrb	r3, [r3, #0]
 800a4de:	461a      	mov	r2, r3
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a4e4:	4b3f      	ldr	r3, [pc, #252]	@ (800a5e4 <USBD_SetConfig+0x150>)
 800a4e6:	781b      	ldrb	r3, [r3, #0]
 800a4e8:	4619      	mov	r1, r3
 800a4ea:	6878      	ldr	r0, [r7, #4]
 800a4ec:	f7fe ff65 	bl	80093ba <USBD_SetClassConfig>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a4f4:	7bfb      	ldrb	r3, [r7, #15]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d008      	beq.n	800a50c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a4fa:	6839      	ldr	r1, [r7, #0]
 800a4fc:	6878      	ldr	r0, [r7, #4]
 800a4fe:	f000 f962 	bl	800a7c6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2202      	movs	r2, #2
 800a506:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a50a:	e065      	b.n	800a5d8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a50c:	6878      	ldr	r0, [r7, #4]
 800a50e:	f000 fb34 	bl	800ab7a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	2203      	movs	r2, #3
 800a516:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a51a:	e05d      	b.n	800a5d8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	f000 fb2c 	bl	800ab7a <USBD_CtlSendStatus>
      break;
 800a522:	e059      	b.n	800a5d8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a524:	4b2f      	ldr	r3, [pc, #188]	@ (800a5e4 <USBD_SetConfig+0x150>)
 800a526:	781b      	ldrb	r3, [r3, #0]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d112      	bne.n	800a552 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2202      	movs	r2, #2
 800a530:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a534:	4b2b      	ldr	r3, [pc, #172]	@ (800a5e4 <USBD_SetConfig+0x150>)
 800a536:	781b      	ldrb	r3, [r3, #0]
 800a538:	461a      	mov	r2, r3
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a53e:	4b29      	ldr	r3, [pc, #164]	@ (800a5e4 <USBD_SetConfig+0x150>)
 800a540:	781b      	ldrb	r3, [r3, #0]
 800a542:	4619      	mov	r1, r3
 800a544:	6878      	ldr	r0, [r7, #4]
 800a546:	f7fe ff73 	bl	8009430 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a54a:	6878      	ldr	r0, [r7, #4]
 800a54c:	f000 fb15 	bl	800ab7a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a550:	e042      	b.n	800a5d8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a552:	4b24      	ldr	r3, [pc, #144]	@ (800a5e4 <USBD_SetConfig+0x150>)
 800a554:	781b      	ldrb	r3, [r3, #0]
 800a556:	461a      	mov	r2, r3
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	685b      	ldr	r3, [r3, #4]
 800a55c:	429a      	cmp	r2, r3
 800a55e:	d02a      	beq.n	800a5b6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	685b      	ldr	r3, [r3, #4]
 800a564:	b2db      	uxtb	r3, r3
 800a566:	4619      	mov	r1, r3
 800a568:	6878      	ldr	r0, [r7, #4]
 800a56a:	f7fe ff61 	bl	8009430 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a56e:	4b1d      	ldr	r3, [pc, #116]	@ (800a5e4 <USBD_SetConfig+0x150>)
 800a570:	781b      	ldrb	r3, [r3, #0]
 800a572:	461a      	mov	r2, r3
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a578:	4b1a      	ldr	r3, [pc, #104]	@ (800a5e4 <USBD_SetConfig+0x150>)
 800a57a:	781b      	ldrb	r3, [r3, #0]
 800a57c:	4619      	mov	r1, r3
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	f7fe ff1b 	bl	80093ba <USBD_SetClassConfig>
 800a584:	4603      	mov	r3, r0
 800a586:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a588:	7bfb      	ldrb	r3, [r7, #15]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d00f      	beq.n	800a5ae <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a58e:	6839      	ldr	r1, [r7, #0]
 800a590:	6878      	ldr	r0, [r7, #4]
 800a592:	f000 f918 	bl	800a7c6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	685b      	ldr	r3, [r3, #4]
 800a59a:	b2db      	uxtb	r3, r3
 800a59c:	4619      	mov	r1, r3
 800a59e:	6878      	ldr	r0, [r7, #4]
 800a5a0:	f7fe ff46 	bl	8009430 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2202      	movs	r2, #2
 800a5a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a5ac:	e014      	b.n	800a5d8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a5ae:	6878      	ldr	r0, [r7, #4]
 800a5b0:	f000 fae3 	bl	800ab7a <USBD_CtlSendStatus>
      break;
 800a5b4:	e010      	b.n	800a5d8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f000 fadf 	bl	800ab7a <USBD_CtlSendStatus>
      break;
 800a5bc:	e00c      	b.n	800a5d8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a5be:	6839      	ldr	r1, [r7, #0]
 800a5c0:	6878      	ldr	r0, [r7, #4]
 800a5c2:	f000 f900 	bl	800a7c6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a5c6:	4b07      	ldr	r3, [pc, #28]	@ (800a5e4 <USBD_SetConfig+0x150>)
 800a5c8:	781b      	ldrb	r3, [r3, #0]
 800a5ca:	4619      	mov	r1, r3
 800a5cc:	6878      	ldr	r0, [r7, #4]
 800a5ce:	f7fe ff2f 	bl	8009430 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a5d2:	2303      	movs	r3, #3
 800a5d4:	73fb      	strb	r3, [r7, #15]
      break;
 800a5d6:	bf00      	nop
  }

  return ret;
 800a5d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	3710      	adds	r7, #16
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd80      	pop	{r7, pc}
 800a5e2:	bf00      	nop
 800a5e4:	20000a88 	.word	0x20000a88

0800a5e8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b082      	sub	sp, #8
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
 800a5f0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	88db      	ldrh	r3, [r3, #6]
 800a5f6:	2b01      	cmp	r3, #1
 800a5f8:	d004      	beq.n	800a604 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a5fa:	6839      	ldr	r1, [r7, #0]
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	f000 f8e2 	bl	800a7c6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a602:	e023      	b.n	800a64c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a60a:	b2db      	uxtb	r3, r3
 800a60c:	2b02      	cmp	r3, #2
 800a60e:	dc02      	bgt.n	800a616 <USBD_GetConfig+0x2e>
 800a610:	2b00      	cmp	r3, #0
 800a612:	dc03      	bgt.n	800a61c <USBD_GetConfig+0x34>
 800a614:	e015      	b.n	800a642 <USBD_GetConfig+0x5a>
 800a616:	2b03      	cmp	r3, #3
 800a618:	d00b      	beq.n	800a632 <USBD_GetConfig+0x4a>
 800a61a:	e012      	b.n	800a642 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2200      	movs	r2, #0
 800a620:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	3308      	adds	r3, #8
 800a626:	2201      	movs	r2, #1
 800a628:	4619      	mov	r1, r3
 800a62a:	6878      	ldr	r0, [r7, #4]
 800a62c:	f000 fa4b 	bl	800aac6 <USBD_CtlSendData>
        break;
 800a630:	e00c      	b.n	800a64c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	3304      	adds	r3, #4
 800a636:	2201      	movs	r2, #1
 800a638:	4619      	mov	r1, r3
 800a63a:	6878      	ldr	r0, [r7, #4]
 800a63c:	f000 fa43 	bl	800aac6 <USBD_CtlSendData>
        break;
 800a640:	e004      	b.n	800a64c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a642:	6839      	ldr	r1, [r7, #0]
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f000 f8be 	bl	800a7c6 <USBD_CtlError>
        break;
 800a64a:	bf00      	nop
}
 800a64c:	bf00      	nop
 800a64e:	3708      	adds	r7, #8
 800a650:	46bd      	mov	sp, r7
 800a652:	bd80      	pop	{r7, pc}

0800a654 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b082      	sub	sp, #8
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
 800a65c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a664:	b2db      	uxtb	r3, r3
 800a666:	3b01      	subs	r3, #1
 800a668:	2b02      	cmp	r3, #2
 800a66a:	d81e      	bhi.n	800a6aa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	88db      	ldrh	r3, [r3, #6]
 800a670:	2b02      	cmp	r3, #2
 800a672:	d004      	beq.n	800a67e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a674:	6839      	ldr	r1, [r7, #0]
 800a676:	6878      	ldr	r0, [r7, #4]
 800a678:	f000 f8a5 	bl	800a7c6 <USBD_CtlError>
        break;
 800a67c:	e01a      	b.n	800a6b4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	2201      	movs	r2, #1
 800a682:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d005      	beq.n	800a69a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	68db      	ldr	r3, [r3, #12]
 800a692:	f043 0202 	orr.w	r2, r3, #2
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	330c      	adds	r3, #12
 800a69e:	2202      	movs	r2, #2
 800a6a0:	4619      	mov	r1, r3
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	f000 fa0f 	bl	800aac6 <USBD_CtlSendData>
      break;
 800a6a8:	e004      	b.n	800a6b4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a6aa:	6839      	ldr	r1, [r7, #0]
 800a6ac:	6878      	ldr	r0, [r7, #4]
 800a6ae:	f000 f88a 	bl	800a7c6 <USBD_CtlError>
      break;
 800a6b2:	bf00      	nop
  }
}
 800a6b4:	bf00      	nop
 800a6b6:	3708      	adds	r7, #8
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	bd80      	pop	{r7, pc}

0800a6bc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b082      	sub	sp, #8
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
 800a6c4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	885b      	ldrh	r3, [r3, #2]
 800a6ca:	2b01      	cmp	r3, #1
 800a6cc:	d107      	bne.n	800a6de <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2201      	movs	r2, #1
 800a6d2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a6d6:	6878      	ldr	r0, [r7, #4]
 800a6d8:	f000 fa4f 	bl	800ab7a <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a6dc:	e013      	b.n	800a706 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	885b      	ldrh	r3, [r3, #2]
 800a6e2:	2b02      	cmp	r3, #2
 800a6e4:	d10b      	bne.n	800a6fe <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	889b      	ldrh	r3, [r3, #4]
 800a6ea:	0a1b      	lsrs	r3, r3, #8
 800a6ec:	b29b      	uxth	r3, r3
 800a6ee:	b2da      	uxtb	r2, r3
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	f000 fa3f 	bl	800ab7a <USBD_CtlSendStatus>
}
 800a6fc:	e003      	b.n	800a706 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a6fe:	6839      	ldr	r1, [r7, #0]
 800a700:	6878      	ldr	r0, [r7, #4]
 800a702:	f000 f860 	bl	800a7c6 <USBD_CtlError>
}
 800a706:	bf00      	nop
 800a708:	3708      	adds	r7, #8
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}

0800a70e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a70e:	b580      	push	{r7, lr}
 800a710:	b082      	sub	sp, #8
 800a712:	af00      	add	r7, sp, #0
 800a714:	6078      	str	r0, [r7, #4]
 800a716:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a71e:	b2db      	uxtb	r3, r3
 800a720:	3b01      	subs	r3, #1
 800a722:	2b02      	cmp	r3, #2
 800a724:	d80b      	bhi.n	800a73e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	885b      	ldrh	r3, [r3, #2]
 800a72a:	2b01      	cmp	r3, #1
 800a72c:	d10c      	bne.n	800a748 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	2200      	movs	r2, #0
 800a732:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a736:	6878      	ldr	r0, [r7, #4]
 800a738:	f000 fa1f 	bl	800ab7a <USBD_CtlSendStatus>
      }
      break;
 800a73c:	e004      	b.n	800a748 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a73e:	6839      	ldr	r1, [r7, #0]
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f000 f840 	bl	800a7c6 <USBD_CtlError>
      break;
 800a746:	e000      	b.n	800a74a <USBD_ClrFeature+0x3c>
      break;
 800a748:	bf00      	nop
  }
}
 800a74a:	bf00      	nop
 800a74c:	3708      	adds	r7, #8
 800a74e:	46bd      	mov	sp, r7
 800a750:	bd80      	pop	{r7, pc}

0800a752 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a752:	b580      	push	{r7, lr}
 800a754:	b084      	sub	sp, #16
 800a756:	af00      	add	r7, sp, #0
 800a758:	6078      	str	r0, [r7, #4]
 800a75a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	781a      	ldrb	r2, [r3, #0]
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	3301      	adds	r3, #1
 800a76c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	781a      	ldrb	r2, [r3, #0]
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	3301      	adds	r3, #1
 800a77a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a77c:	68f8      	ldr	r0, [r7, #12]
 800a77e:	f7ff fa06 	bl	8009b8e <SWAPBYTE>
 800a782:	4603      	mov	r3, r0
 800a784:	461a      	mov	r2, r3
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	3301      	adds	r3, #1
 800a78e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	3301      	adds	r3, #1
 800a794:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a796:	68f8      	ldr	r0, [r7, #12]
 800a798:	f7ff f9f9 	bl	8009b8e <SWAPBYTE>
 800a79c:	4603      	mov	r3, r0
 800a79e:	461a      	mov	r2, r3
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	3301      	adds	r3, #1
 800a7a8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	3301      	adds	r3, #1
 800a7ae:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a7b0:	68f8      	ldr	r0, [r7, #12]
 800a7b2:	f7ff f9ec 	bl	8009b8e <SWAPBYTE>
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	461a      	mov	r2, r3
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	80da      	strh	r2, [r3, #6]
}
 800a7be:	bf00      	nop
 800a7c0:	3710      	adds	r7, #16
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}

0800a7c6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7c6:	b580      	push	{r7, lr}
 800a7c8:	b082      	sub	sp, #8
 800a7ca:	af00      	add	r7, sp, #0
 800a7cc:	6078      	str	r0, [r7, #4]
 800a7ce:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a7d0:	2180      	movs	r1, #128	@ 0x80
 800a7d2:	6878      	ldr	r0, [r7, #4]
 800a7d4:	f7fe fc0c 	bl	8008ff0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a7d8:	2100      	movs	r1, #0
 800a7da:	6878      	ldr	r0, [r7, #4]
 800a7dc:	f7fe fc08 	bl	8008ff0 <USBD_LL_StallEP>
}
 800a7e0:	bf00      	nop
 800a7e2:	3708      	adds	r7, #8
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	bd80      	pop	{r7, pc}

0800a7e8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b086      	sub	sp, #24
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	60f8      	str	r0, [r7, #12]
 800a7f0:	60b9      	str	r1, [r7, #8]
 800a7f2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d036      	beq.n	800a86c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a802:	6938      	ldr	r0, [r7, #16]
 800a804:	f000 f836 	bl	800a874 <USBD_GetLen>
 800a808:	4603      	mov	r3, r0
 800a80a:	3301      	adds	r3, #1
 800a80c:	b29b      	uxth	r3, r3
 800a80e:	005b      	lsls	r3, r3, #1
 800a810:	b29a      	uxth	r2, r3
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a816:	7dfb      	ldrb	r3, [r7, #23]
 800a818:	68ba      	ldr	r2, [r7, #8]
 800a81a:	4413      	add	r3, r2
 800a81c:	687a      	ldr	r2, [r7, #4]
 800a81e:	7812      	ldrb	r2, [r2, #0]
 800a820:	701a      	strb	r2, [r3, #0]
  idx++;
 800a822:	7dfb      	ldrb	r3, [r7, #23]
 800a824:	3301      	adds	r3, #1
 800a826:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a828:	7dfb      	ldrb	r3, [r7, #23]
 800a82a:	68ba      	ldr	r2, [r7, #8]
 800a82c:	4413      	add	r3, r2
 800a82e:	2203      	movs	r2, #3
 800a830:	701a      	strb	r2, [r3, #0]
  idx++;
 800a832:	7dfb      	ldrb	r3, [r7, #23]
 800a834:	3301      	adds	r3, #1
 800a836:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a838:	e013      	b.n	800a862 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a83a:	7dfb      	ldrb	r3, [r7, #23]
 800a83c:	68ba      	ldr	r2, [r7, #8]
 800a83e:	4413      	add	r3, r2
 800a840:	693a      	ldr	r2, [r7, #16]
 800a842:	7812      	ldrb	r2, [r2, #0]
 800a844:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a846:	693b      	ldr	r3, [r7, #16]
 800a848:	3301      	adds	r3, #1
 800a84a:	613b      	str	r3, [r7, #16]
    idx++;
 800a84c:	7dfb      	ldrb	r3, [r7, #23]
 800a84e:	3301      	adds	r3, #1
 800a850:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a852:	7dfb      	ldrb	r3, [r7, #23]
 800a854:	68ba      	ldr	r2, [r7, #8]
 800a856:	4413      	add	r3, r2
 800a858:	2200      	movs	r2, #0
 800a85a:	701a      	strb	r2, [r3, #0]
    idx++;
 800a85c:	7dfb      	ldrb	r3, [r7, #23]
 800a85e:	3301      	adds	r3, #1
 800a860:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a862:	693b      	ldr	r3, [r7, #16]
 800a864:	781b      	ldrb	r3, [r3, #0]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d1e7      	bne.n	800a83a <USBD_GetString+0x52>
 800a86a:	e000      	b.n	800a86e <USBD_GetString+0x86>
    return;
 800a86c:	bf00      	nop
  }
}
 800a86e:	3718      	adds	r7, #24
 800a870:	46bd      	mov	sp, r7
 800a872:	bd80      	pop	{r7, pc}

0800a874 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a874:	b480      	push	{r7}
 800a876:	b085      	sub	sp, #20
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a87c:	2300      	movs	r3, #0
 800a87e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a884:	e005      	b.n	800a892 <USBD_GetLen+0x1e>
  {
    len++;
 800a886:	7bfb      	ldrb	r3, [r7, #15]
 800a888:	3301      	adds	r3, #1
 800a88a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a88c:	68bb      	ldr	r3, [r7, #8]
 800a88e:	3301      	adds	r3, #1
 800a890:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a892:	68bb      	ldr	r3, [r7, #8]
 800a894:	781b      	ldrb	r3, [r3, #0]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d1f5      	bne.n	800a886 <USBD_GetLen+0x12>
  }

  return len;
 800a89a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a89c:	4618      	mov	r0, r3
 800a89e:	3714      	adds	r7, #20
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a6:	4770      	bx	lr

0800a8a8 <USBD_Class_DeviceDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a8a8:	b480      	push	{r7}
 800a8aa:	b083      	sub	sp, #12
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	6039      	str	r1, [r7, #0]
 800a8b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = sizeof(USBD_DeviceDesc);
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	2212      	movs	r2, #18
 800a8b8:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)USBD_DeviceDesc;
 800a8ba:	4b03      	ldr	r3, [pc, #12]	@ (800a8c8 <USBD_Class_DeviceDescriptor+0x20>)
}
 800a8bc:	4618      	mov	r0, r3
 800a8be:	370c      	adds	r7, #12
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c6:	4770      	bx	lr
 800a8c8:	2000019c 	.word	0x2000019c

0800a8cc <USBD_Class_LangIDStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a8cc:	b480      	push	{r7}
 800a8ce:	b083      	sub	sp, #12
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	6039      	str	r1, [r7, #0]
 800a8d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = sizeof(USBD_LangIDDesc);
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	2204      	movs	r2, #4
 800a8dc:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)USBD_LangIDDesc;
 800a8de:	4b03      	ldr	r3, [pc, #12]	@ (800a8ec <USBD_Class_LangIDStrDescriptor+0x20>)
}
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	370c      	adds	r7, #12
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ea:	4770      	bx	lr
 800a8ec:	200001b0 	.word	0x200001b0

0800a8f0 <USBD_Class_ProductStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b082      	sub	sp, #8
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	6039      	str	r1, [r7, #0]
 800a8fa:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 800a8fc:	79fb      	ldrb	r3, [r7, #7]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d105      	bne.n	800a90e <USBD_Class_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_HS_STRING, USBD_StrDesc, length);
 800a902:	683a      	ldr	r2, [r7, #0]
 800a904:	4907      	ldr	r1, [pc, #28]	@ (800a924 <USBD_Class_ProductStrDescriptor+0x34>)
 800a906:	4808      	ldr	r0, [pc, #32]	@ (800a928 <USBD_Class_ProductStrDescriptor+0x38>)
 800a908:	f7ff ff6e 	bl	800a7e8 <USBD_GetString>
 800a90c:	e004      	b.n	800a918 <USBD_Class_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);
 800a90e:	683a      	ldr	r2, [r7, #0]
 800a910:	4904      	ldr	r1, [pc, #16]	@ (800a924 <USBD_Class_ProductStrDescriptor+0x34>)
 800a912:	4806      	ldr	r0, [pc, #24]	@ (800a92c <USBD_Class_ProductStrDescriptor+0x3c>)
 800a914:	f7ff ff68 	bl	800a7e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a918:	4b02      	ldr	r3, [pc, #8]	@ (800a924 <USBD_Class_ProductStrDescriptor+0x34>)
}
 800a91a:	4618      	mov	r0, r3
 800a91c:	3708      	adds	r7, #8
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}
 800a922:	bf00      	nop
 800a924:	20000a8c 	.word	0x20000a8c
 800a928:	0800bb54 	.word	0x0800bb54
 800a92c:	0800bb78 	.word	0x0800bb78

0800a930 <USBD_Class_ManufacturerStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b082      	sub	sp, #8
 800a934:	af00      	add	r7, sp, #0
 800a936:	4603      	mov	r3, r0
 800a938:	6039      	str	r1, [r7, #0]
 800a93a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a93c:	683a      	ldr	r2, [r7, #0]
 800a93e:	4904      	ldr	r1, [pc, #16]	@ (800a950 <USBD_Class_ManufacturerStrDescriptor+0x20>)
 800a940:	4804      	ldr	r0, [pc, #16]	@ (800a954 <USBD_Class_ManufacturerStrDescriptor+0x24>)
 800a942:	f7ff ff51 	bl	800a7e8 <USBD_GetString>
  return USBD_StrDesc;
 800a946:	4b02      	ldr	r3, [pc, #8]	@ (800a950 <USBD_Class_ManufacturerStrDescriptor+0x20>)
}
 800a948:	4618      	mov	r0, r3
 800a94a:	3708      	adds	r7, #8
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bd80      	pop	{r7, pc}
 800a950:	20000a8c 	.word	0x20000a8c
 800a954:	0800bb9c 	.word	0x0800bb9c

0800a958 <USBD_Class_SerialStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b082      	sub	sp, #8
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	4603      	mov	r3, r0
 800a960:	6039      	str	r1, [r7, #0]
 800a962:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = USB_SIZ_STRING_SERIAL;
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	221a      	movs	r2, #26
 800a968:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique ID*/
  Get_SerialNum();
 800a96a:	f000 f843 	bl	800a9f4 <Get_SerialNum>

  return (uint8_t *)USBD_StringSerial;
 800a96e:	4b02      	ldr	r3, [pc, #8]	@ (800a978 <USBD_Class_SerialStrDescriptor+0x20>)
}
 800a970:	4618      	mov	r0, r3
 800a972:	3708      	adds	r7, #8
 800a974:	46bd      	mov	sp, r7
 800a976:	bd80      	pop	{r7, pc}
 800a978:	200001b4 	.word	0x200001b4

0800a97c <USBD_Class_ConfigStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b082      	sub	sp, #8
 800a980:	af00      	add	r7, sp, #0
 800a982:	4603      	mov	r3, r0
 800a984:	6039      	str	r1, [r7, #0]
 800a986:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 800a988:	79fb      	ldrb	r3, [r7, #7]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d105      	bne.n	800a99a <USBD_Class_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_HS_STRING, USBD_StrDesc, length);
 800a98e:	683a      	ldr	r2, [r7, #0]
 800a990:	4907      	ldr	r1, [pc, #28]	@ (800a9b0 <USBD_Class_ConfigStrDescriptor+0x34>)
 800a992:	4808      	ldr	r0, [pc, #32]	@ (800a9b4 <USBD_Class_ConfigStrDescriptor+0x38>)
 800a994:	f7ff ff28 	bl	800a7e8 <USBD_GetString>
 800a998:	e004      	b.n	800a9a4 <USBD_Class_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length);
 800a99a:	683a      	ldr	r2, [r7, #0]
 800a99c:	4904      	ldr	r1, [pc, #16]	@ (800a9b0 <USBD_Class_ConfigStrDescriptor+0x34>)
 800a99e:	4805      	ldr	r0, [pc, #20]	@ (800a9b4 <USBD_Class_ConfigStrDescriptor+0x38>)
 800a9a0:	f7ff ff22 	bl	800a7e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a9a4:	4b02      	ldr	r3, [pc, #8]	@ (800a9b0 <USBD_Class_ConfigStrDescriptor+0x34>)
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	3708      	adds	r7, #8
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}
 800a9ae:	bf00      	nop
 800a9b0:	20000a8c 	.word	0x20000a8c
 800a9b4:	0800bbb0 	.word	0x0800bbb0

0800a9b8 <USBD_Class_InterfaceStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b082      	sub	sp, #8
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	4603      	mov	r3, r0
 800a9c0:	6039      	str	r1, [r7, #0]
 800a9c2:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 800a9c4:	79fb      	ldrb	r3, [r7, #7]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d105      	bne.n	800a9d6 <USBD_Class_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_HS_STRING, USBD_StrDesc, length);
 800a9ca:	683a      	ldr	r2, [r7, #0]
 800a9cc:	4907      	ldr	r1, [pc, #28]	@ (800a9ec <USBD_Class_InterfaceStrDescriptor+0x34>)
 800a9ce:	4808      	ldr	r0, [pc, #32]	@ (800a9f0 <USBD_Class_InterfaceStrDescriptor+0x38>)
 800a9d0:	f7ff ff0a 	bl	800a7e8 <USBD_GetString>
 800a9d4:	e004      	b.n	800a9e0 <USBD_Class_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 800a9d6:	683a      	ldr	r2, [r7, #0]
 800a9d8:	4904      	ldr	r1, [pc, #16]	@ (800a9ec <USBD_Class_InterfaceStrDescriptor+0x34>)
 800a9da:	4805      	ldr	r0, [pc, #20]	@ (800a9f0 <USBD_Class_InterfaceStrDescriptor+0x38>)
 800a9dc:	f7ff ff04 	bl	800a7e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a9e0:	4b02      	ldr	r3, [pc, #8]	@ (800a9ec <USBD_Class_InterfaceStrDescriptor+0x34>)
}
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	3708      	adds	r7, #8
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd80      	pop	{r7, pc}
 800a9ea:	bf00      	nop
 800a9ec:	20000a8c 	.word	0x20000a8c
 800a9f0:	0800bbd0 	.word	0x0800bbd0

0800a9f4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b084      	sub	sp, #16
 800a9f8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *)DEVICE_ID1;
 800a9fa:	4b0f      	ldr	r3, [pc, #60]	@ (800aa38 <Get_SerialNum+0x44>)
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *)DEVICE_ID2;
 800aa00:	4b0e      	ldr	r3, [pc, #56]	@ (800aa3c <Get_SerialNum+0x48>)
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *)DEVICE_ID3;
 800aa06:	4b0e      	ldr	r3, [pc, #56]	@ (800aa40 <Get_SerialNum+0x4c>)
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800aa0c:	68fa      	ldr	r2, [r7, #12]
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	4413      	add	r3, r2
 800aa12:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0U)
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d009      	beq.n	800aa2e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8U);
 800aa1a:	2208      	movs	r2, #8
 800aa1c:	4909      	ldr	r1, [pc, #36]	@ (800aa44 <Get_SerialNum+0x50>)
 800aa1e:	68f8      	ldr	r0, [r7, #12]
 800aa20:	f000 f814 	bl	800aa4c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4U);
 800aa24:	2204      	movs	r2, #4
 800aa26:	4908      	ldr	r1, [pc, #32]	@ (800aa48 <Get_SerialNum+0x54>)
 800aa28:	68b8      	ldr	r0, [r7, #8]
 800aa2a:	f000 f80f 	bl	800aa4c <IntToUnicode>
  }
}
 800aa2e:	bf00      	nop
 800aa30:	3710      	adds	r7, #16
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bd80      	pop	{r7, pc}
 800aa36:	bf00      	nop
 800aa38:	08fff800 	.word	0x08fff800
 800aa3c:	08fff804 	.word	0x08fff804
 800aa40:	08fff808 	.word	0x08fff808
 800aa44:	200001b6 	.word	0x200001b6
 800aa48:	200001c6 	.word	0x200001c6

0800aa4c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t *pbuf, uint8_t len)
{
 800aa4c:	b480      	push	{r7}
 800aa4e:	b087      	sub	sp, #28
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	60f8      	str	r0, [r7, #12]
 800aa54:	60b9      	str	r1, [r7, #8]
 800aa56:	4613      	mov	r3, r2
 800aa58:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0U;
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0U ; idx < len ; idx ++)
 800aa5e:	2300      	movs	r3, #0
 800aa60:	75fb      	strb	r3, [r7, #23]
 800aa62:	e025      	b.n	800aab0 <IntToUnicode+0x64>
  {
    if (((value >> 28)) < 0xAU)
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	0f1b      	lsrs	r3, r3, #28
 800aa68:	2b09      	cmp	r3, #9
 800aa6a:	d80a      	bhi.n	800aa82 <IntToUnicode+0x36>
    {
      pbuf[ 2U * idx] = (value >> 28) + '0';
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	0f1b      	lsrs	r3, r3, #28
 800aa70:	b2da      	uxtb	r2, r3
 800aa72:	7dfb      	ldrb	r3, [r7, #23]
 800aa74:	005b      	lsls	r3, r3, #1
 800aa76:	68b9      	ldr	r1, [r7, #8]
 800aa78:	440b      	add	r3, r1
 800aa7a:	3230      	adds	r2, #48	@ 0x30
 800aa7c:	b2d2      	uxtb	r2, r2
 800aa7e:	701a      	strb	r2, [r3, #0]
 800aa80:	e009      	b.n	800aa96 <IntToUnicode+0x4a>
    }
    else
    {
      pbuf[2U * idx] = (value >> 28) + 'A' - 10U;
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	0f1b      	lsrs	r3, r3, #28
 800aa86:	b2da      	uxtb	r2, r3
 800aa88:	7dfb      	ldrb	r3, [r7, #23]
 800aa8a:	005b      	lsls	r3, r3, #1
 800aa8c:	68b9      	ldr	r1, [r7, #8]
 800aa8e:	440b      	add	r3, r1
 800aa90:	3237      	adds	r2, #55	@ 0x37
 800aa92:	b2d2      	uxtb	r2, r2
 800aa94:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	011b      	lsls	r3, r3, #4
 800aa9a:	60fb      	str	r3, [r7, #12]

    pbuf[2U * idx + 1] = 0U;
 800aa9c:	7dfb      	ldrb	r3, [r7, #23]
 800aa9e:	005b      	lsls	r3, r3, #1
 800aaa0:	3301      	adds	r3, #1
 800aaa2:	68ba      	ldr	r2, [r7, #8]
 800aaa4:	4413      	add	r3, r2
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	701a      	strb	r2, [r3, #0]
  for (idx = 0U ; idx < len ; idx ++)
 800aaaa:	7dfb      	ldrb	r3, [r7, #23]
 800aaac:	3301      	adds	r3, #1
 800aaae:	75fb      	strb	r3, [r7, #23]
 800aab0:	7dfa      	ldrb	r2, [r7, #23]
 800aab2:	79fb      	ldrb	r3, [r7, #7]
 800aab4:	429a      	cmp	r2, r3
 800aab6:	d3d5      	bcc.n	800aa64 <IntToUnicode+0x18>
  }
}
 800aab8:	bf00      	nop
 800aaba:	bf00      	nop
 800aabc:	371c      	adds	r7, #28
 800aabe:	46bd      	mov	sp, r7
 800aac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac4:	4770      	bx	lr

0800aac6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800aac6:	b580      	push	{r7, lr}
 800aac8:	b084      	sub	sp, #16
 800aaca:	af00      	add	r7, sp, #0
 800aacc:	60f8      	str	r0, [r7, #12]
 800aace:	60b9      	str	r1, [r7, #8]
 800aad0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	2202      	movs	r2, #2
 800aad6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	687a      	ldr	r2, [r7, #4]
 800aade:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	687a      	ldr	r2, [r7, #4]
 800aae4:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	68ba      	ldr	r2, [r7, #8]
 800aaea:	2100      	movs	r1, #0
 800aaec:	68f8      	ldr	r0, [r7, #12]
 800aaee:	f7fe faf6 	bl	80090de <USBD_LL_Transmit>

  return USBD_OK;
 800aaf2:	2300      	movs	r3, #0
}
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	3710      	adds	r7, #16
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	bd80      	pop	{r7, pc}

0800aafc <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b084      	sub	sp, #16
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	60f8      	str	r0, [r7, #12]
 800ab04:	60b9      	str	r1, [r7, #8]
 800ab06:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	68ba      	ldr	r2, [r7, #8]
 800ab0c:	2100      	movs	r1, #0
 800ab0e:	68f8      	ldr	r0, [r7, #12]
 800ab10:	f7fe fae5 	bl	80090de <USBD_LL_Transmit>

  return USBD_OK;
 800ab14:	2300      	movs	r3, #0
}
 800ab16:	4618      	mov	r0, r3
 800ab18:	3710      	adds	r7, #16
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bd80      	pop	{r7, pc}

0800ab1e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ab1e:	b580      	push	{r7, lr}
 800ab20:	b084      	sub	sp, #16
 800ab22:	af00      	add	r7, sp, #0
 800ab24:	60f8      	str	r0, [r7, #12]
 800ab26:	60b9      	str	r1, [r7, #8]
 800ab28:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	2203      	movs	r2, #3
 800ab2e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	687a      	ldr	r2, [r7, #4]
 800ab36:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	687a      	ldr	r2, [r7, #4]
 800ab3e:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	68ba      	ldr	r2, [r7, #8]
 800ab46:	2100      	movs	r1, #0
 800ab48:	68f8      	ldr	r0, [r7, #12]
 800ab4a:	f7fe fae3 	bl	8009114 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ab4e:	2300      	movs	r3, #0
}
 800ab50:	4618      	mov	r0, r3
 800ab52:	3710      	adds	r7, #16
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}

0800ab58 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b084      	sub	sp, #16
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	60f8      	str	r0, [r7, #12]
 800ab60:	60b9      	str	r1, [r7, #8]
 800ab62:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	68ba      	ldr	r2, [r7, #8]
 800ab68:	2100      	movs	r1, #0
 800ab6a:	68f8      	ldr	r0, [r7, #12]
 800ab6c:	f7fe fad2 	bl	8009114 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ab70:	2300      	movs	r3, #0
}
 800ab72:	4618      	mov	r0, r3
 800ab74:	3710      	adds	r7, #16
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}

0800ab7a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ab7a:	b580      	push	{r7, lr}
 800ab7c:	b082      	sub	sp, #8
 800ab7e:	af00      	add	r7, sp, #0
 800ab80:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	2204      	movs	r2, #4
 800ab86:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	2100      	movs	r1, #0
 800ab90:	6878      	ldr	r0, [r7, #4]
 800ab92:	f7fe faa4 	bl	80090de <USBD_LL_Transmit>

  return USBD_OK;
 800ab96:	2300      	movs	r3, #0
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	3708      	adds	r7, #8
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd80      	pop	{r7, pc}

0800aba0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b082      	sub	sp, #8
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2205      	movs	r2, #5
 800abac:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800abb0:	2300      	movs	r3, #0
 800abb2:	2200      	movs	r2, #0
 800abb4:	2100      	movs	r1, #0
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	f7fe faac 	bl	8009114 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800abbc:	2300      	movs	r3, #0
}
 800abbe:	4618      	mov	r0, r3
 800abc0:	3708      	adds	r7, #8
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bd80      	pop	{r7, pc}
	...

0800abc8 <std>:
 800abc8:	2300      	movs	r3, #0
 800abca:	b510      	push	{r4, lr}
 800abcc:	4604      	mov	r4, r0
 800abce:	6083      	str	r3, [r0, #8]
 800abd0:	8181      	strh	r1, [r0, #12]
 800abd2:	4619      	mov	r1, r3
 800abd4:	6643      	str	r3, [r0, #100]	@ 0x64
 800abd6:	81c2      	strh	r2, [r0, #14]
 800abd8:	2208      	movs	r2, #8
 800abda:	6183      	str	r3, [r0, #24]
 800abdc:	e9c0 3300 	strd	r3, r3, [r0]
 800abe0:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800abe4:	305c      	adds	r0, #92	@ 0x5c
 800abe6:	f000 f90e 	bl	800ae06 <memset>
 800abea:	4b0d      	ldr	r3, [pc, #52]	@ (800ac20 <std+0x58>)
 800abec:	6224      	str	r4, [r4, #32]
 800abee:	6263      	str	r3, [r4, #36]	@ 0x24
 800abf0:	4b0c      	ldr	r3, [pc, #48]	@ (800ac24 <std+0x5c>)
 800abf2:	62a3      	str	r3, [r4, #40]	@ 0x28
 800abf4:	4b0c      	ldr	r3, [pc, #48]	@ (800ac28 <std+0x60>)
 800abf6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800abf8:	4b0c      	ldr	r3, [pc, #48]	@ (800ac2c <std+0x64>)
 800abfa:	6323      	str	r3, [r4, #48]	@ 0x30
 800abfc:	4b0c      	ldr	r3, [pc, #48]	@ (800ac30 <std+0x68>)
 800abfe:	429c      	cmp	r4, r3
 800ac00:	d006      	beq.n	800ac10 <std+0x48>
 800ac02:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ac06:	4294      	cmp	r4, r2
 800ac08:	d002      	beq.n	800ac10 <std+0x48>
 800ac0a:	33d0      	adds	r3, #208	@ 0xd0
 800ac0c:	429c      	cmp	r4, r3
 800ac0e:	d105      	bne.n	800ac1c <std+0x54>
 800ac10:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ac14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac18:	f000 b96e 	b.w	800aef8 <__retarget_lock_init_recursive>
 800ac1c:	bd10      	pop	{r4, pc}
 800ac1e:	bf00      	nop
 800ac20:	0800ad81 	.word	0x0800ad81
 800ac24:	0800ada3 	.word	0x0800ada3
 800ac28:	0800addb 	.word	0x0800addb
 800ac2c:	0800adff 	.word	0x0800adff
 800ac30:	20000b8c 	.word	0x20000b8c

0800ac34 <stdio_exit_handler>:
 800ac34:	4a02      	ldr	r2, [pc, #8]	@ (800ac40 <stdio_exit_handler+0xc>)
 800ac36:	4903      	ldr	r1, [pc, #12]	@ (800ac44 <stdio_exit_handler+0x10>)
 800ac38:	4803      	ldr	r0, [pc, #12]	@ (800ac48 <stdio_exit_handler+0x14>)
 800ac3a:	f000 b869 	b.w	800ad10 <_fwalk_sglue>
 800ac3e:	bf00      	nop
 800ac40:	200001d0 	.word	0x200001d0
 800ac44:	0800b7a1 	.word	0x0800b7a1
 800ac48:	200001e0 	.word	0x200001e0

0800ac4c <cleanup_stdio>:
 800ac4c:	6841      	ldr	r1, [r0, #4]
 800ac4e:	4b0c      	ldr	r3, [pc, #48]	@ (800ac80 <cleanup_stdio+0x34>)
 800ac50:	4299      	cmp	r1, r3
 800ac52:	b510      	push	{r4, lr}
 800ac54:	4604      	mov	r4, r0
 800ac56:	d001      	beq.n	800ac5c <cleanup_stdio+0x10>
 800ac58:	f000 fda2 	bl	800b7a0 <_fflush_r>
 800ac5c:	68a1      	ldr	r1, [r4, #8]
 800ac5e:	4b09      	ldr	r3, [pc, #36]	@ (800ac84 <cleanup_stdio+0x38>)
 800ac60:	4299      	cmp	r1, r3
 800ac62:	d002      	beq.n	800ac6a <cleanup_stdio+0x1e>
 800ac64:	4620      	mov	r0, r4
 800ac66:	f000 fd9b 	bl	800b7a0 <_fflush_r>
 800ac6a:	68e1      	ldr	r1, [r4, #12]
 800ac6c:	4b06      	ldr	r3, [pc, #24]	@ (800ac88 <cleanup_stdio+0x3c>)
 800ac6e:	4299      	cmp	r1, r3
 800ac70:	d004      	beq.n	800ac7c <cleanup_stdio+0x30>
 800ac72:	4620      	mov	r0, r4
 800ac74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac78:	f000 bd92 	b.w	800b7a0 <_fflush_r>
 800ac7c:	bd10      	pop	{r4, pc}
 800ac7e:	bf00      	nop
 800ac80:	20000b8c 	.word	0x20000b8c
 800ac84:	20000bf4 	.word	0x20000bf4
 800ac88:	20000c5c 	.word	0x20000c5c

0800ac8c <global_stdio_init.part.0>:
 800ac8c:	b510      	push	{r4, lr}
 800ac8e:	4b0b      	ldr	r3, [pc, #44]	@ (800acbc <global_stdio_init.part.0+0x30>)
 800ac90:	2104      	movs	r1, #4
 800ac92:	4c0b      	ldr	r4, [pc, #44]	@ (800acc0 <global_stdio_init.part.0+0x34>)
 800ac94:	4a0b      	ldr	r2, [pc, #44]	@ (800acc4 <global_stdio_init.part.0+0x38>)
 800ac96:	4620      	mov	r0, r4
 800ac98:	601a      	str	r2, [r3, #0]
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	f7ff ff94 	bl	800abc8 <std>
 800aca0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800aca4:	2201      	movs	r2, #1
 800aca6:	2109      	movs	r1, #9
 800aca8:	f7ff ff8e 	bl	800abc8 <std>
 800acac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800acb0:	2202      	movs	r2, #2
 800acb2:	2112      	movs	r1, #18
 800acb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800acb8:	f7ff bf86 	b.w	800abc8 <std>
 800acbc:	20000cc4 	.word	0x20000cc4
 800acc0:	20000b8c 	.word	0x20000b8c
 800acc4:	0800ac35 	.word	0x0800ac35

0800acc8 <__sfp_lock_acquire>:
 800acc8:	4801      	ldr	r0, [pc, #4]	@ (800acd0 <__sfp_lock_acquire+0x8>)
 800acca:	f000 b916 	b.w	800aefa <__retarget_lock_acquire_recursive>
 800acce:	bf00      	nop
 800acd0:	20000ccd 	.word	0x20000ccd

0800acd4 <__sfp_lock_release>:
 800acd4:	4801      	ldr	r0, [pc, #4]	@ (800acdc <__sfp_lock_release+0x8>)
 800acd6:	f000 b911 	b.w	800aefc <__retarget_lock_release_recursive>
 800acda:	bf00      	nop
 800acdc:	20000ccd 	.word	0x20000ccd

0800ace0 <__sinit>:
 800ace0:	b510      	push	{r4, lr}
 800ace2:	4604      	mov	r4, r0
 800ace4:	f7ff fff0 	bl	800acc8 <__sfp_lock_acquire>
 800ace8:	6a23      	ldr	r3, [r4, #32]
 800acea:	b11b      	cbz	r3, 800acf4 <__sinit+0x14>
 800acec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800acf0:	f7ff bff0 	b.w	800acd4 <__sfp_lock_release>
 800acf4:	4b04      	ldr	r3, [pc, #16]	@ (800ad08 <__sinit+0x28>)
 800acf6:	6223      	str	r3, [r4, #32]
 800acf8:	4b04      	ldr	r3, [pc, #16]	@ (800ad0c <__sinit+0x2c>)
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d1f5      	bne.n	800acec <__sinit+0xc>
 800ad00:	f7ff ffc4 	bl	800ac8c <global_stdio_init.part.0>
 800ad04:	e7f2      	b.n	800acec <__sinit+0xc>
 800ad06:	bf00      	nop
 800ad08:	0800ac4d 	.word	0x0800ac4d
 800ad0c:	20000cc4 	.word	0x20000cc4

0800ad10 <_fwalk_sglue>:
 800ad10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad14:	4607      	mov	r7, r0
 800ad16:	4688      	mov	r8, r1
 800ad18:	4614      	mov	r4, r2
 800ad1a:	2600      	movs	r6, #0
 800ad1c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ad20:	f1b9 0901 	subs.w	r9, r9, #1
 800ad24:	d505      	bpl.n	800ad32 <_fwalk_sglue+0x22>
 800ad26:	6824      	ldr	r4, [r4, #0]
 800ad28:	2c00      	cmp	r4, #0
 800ad2a:	d1f7      	bne.n	800ad1c <_fwalk_sglue+0xc>
 800ad2c:	4630      	mov	r0, r6
 800ad2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad32:	89ab      	ldrh	r3, [r5, #12]
 800ad34:	2b01      	cmp	r3, #1
 800ad36:	d907      	bls.n	800ad48 <_fwalk_sglue+0x38>
 800ad38:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ad3c:	3301      	adds	r3, #1
 800ad3e:	d003      	beq.n	800ad48 <_fwalk_sglue+0x38>
 800ad40:	4629      	mov	r1, r5
 800ad42:	4638      	mov	r0, r7
 800ad44:	47c0      	blx	r8
 800ad46:	4306      	orrs	r6, r0
 800ad48:	3568      	adds	r5, #104	@ 0x68
 800ad4a:	e7e9      	b.n	800ad20 <_fwalk_sglue+0x10>

0800ad4c <iprintf>:
 800ad4c:	b40f      	push	{r0, r1, r2, r3}
 800ad4e:	b507      	push	{r0, r1, r2, lr}
 800ad50:	4906      	ldr	r1, [pc, #24]	@ (800ad6c <iprintf+0x20>)
 800ad52:	ab04      	add	r3, sp, #16
 800ad54:	6808      	ldr	r0, [r1, #0]
 800ad56:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad5a:	6881      	ldr	r1, [r0, #8]
 800ad5c:	9301      	str	r3, [sp, #4]
 800ad5e:	f000 f9f1 	bl	800b144 <_vfiprintf_r>
 800ad62:	b003      	add	sp, #12
 800ad64:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad68:	b004      	add	sp, #16
 800ad6a:	4770      	bx	lr
 800ad6c:	200001dc 	.word	0x200001dc

0800ad70 <putchar>:
 800ad70:	4b02      	ldr	r3, [pc, #8]	@ (800ad7c <putchar+0xc>)
 800ad72:	4601      	mov	r1, r0
 800ad74:	6818      	ldr	r0, [r3, #0]
 800ad76:	6882      	ldr	r2, [r0, #8]
 800ad78:	f000 bd3a 	b.w	800b7f0 <_putc_r>
 800ad7c:	200001dc 	.word	0x200001dc

0800ad80 <__sread>:
 800ad80:	b510      	push	{r4, lr}
 800ad82:	460c      	mov	r4, r1
 800ad84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad88:	f000 f868 	bl	800ae5c <_read_r>
 800ad8c:	2800      	cmp	r0, #0
 800ad8e:	bfab      	itete	ge
 800ad90:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ad92:	89a3      	ldrhlt	r3, [r4, #12]
 800ad94:	181b      	addge	r3, r3, r0
 800ad96:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ad9a:	bfac      	ite	ge
 800ad9c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ad9e:	81a3      	strhlt	r3, [r4, #12]
 800ada0:	bd10      	pop	{r4, pc}

0800ada2 <__swrite>:
 800ada2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ada6:	461f      	mov	r7, r3
 800ada8:	898b      	ldrh	r3, [r1, #12]
 800adaa:	4605      	mov	r5, r0
 800adac:	460c      	mov	r4, r1
 800adae:	05db      	lsls	r3, r3, #23
 800adb0:	4616      	mov	r6, r2
 800adb2:	d505      	bpl.n	800adc0 <__swrite+0x1e>
 800adb4:	2302      	movs	r3, #2
 800adb6:	2200      	movs	r2, #0
 800adb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adbc:	f000 f83c 	bl	800ae38 <_lseek_r>
 800adc0:	89a3      	ldrh	r3, [r4, #12]
 800adc2:	4632      	mov	r2, r6
 800adc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800adc8:	4628      	mov	r0, r5
 800adca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800adce:	81a3      	strh	r3, [r4, #12]
 800add0:	463b      	mov	r3, r7
 800add2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800add6:	f000 b853 	b.w	800ae80 <_write_r>

0800adda <__sseek>:
 800adda:	b510      	push	{r4, lr}
 800addc:	460c      	mov	r4, r1
 800adde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ade2:	f000 f829 	bl	800ae38 <_lseek_r>
 800ade6:	1c43      	adds	r3, r0, #1
 800ade8:	89a3      	ldrh	r3, [r4, #12]
 800adea:	bf15      	itete	ne
 800adec:	6560      	strne	r0, [r4, #84]	@ 0x54
 800adee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800adf2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800adf6:	81a3      	strheq	r3, [r4, #12]
 800adf8:	bf18      	it	ne
 800adfa:	81a3      	strhne	r3, [r4, #12]
 800adfc:	bd10      	pop	{r4, pc}

0800adfe <__sclose>:
 800adfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae02:	f000 b809 	b.w	800ae18 <_close_r>

0800ae06 <memset>:
 800ae06:	4402      	add	r2, r0
 800ae08:	4603      	mov	r3, r0
 800ae0a:	4293      	cmp	r3, r2
 800ae0c:	d100      	bne.n	800ae10 <memset+0xa>
 800ae0e:	4770      	bx	lr
 800ae10:	f803 1b01 	strb.w	r1, [r3], #1
 800ae14:	e7f9      	b.n	800ae0a <memset+0x4>
	...

0800ae18 <_close_r>:
 800ae18:	b538      	push	{r3, r4, r5, lr}
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	4d05      	ldr	r5, [pc, #20]	@ (800ae34 <_close_r+0x1c>)
 800ae1e:	4604      	mov	r4, r0
 800ae20:	4608      	mov	r0, r1
 800ae22:	602b      	str	r3, [r5, #0]
 800ae24:	f7f5 fd25 	bl	8000872 <_close>
 800ae28:	1c43      	adds	r3, r0, #1
 800ae2a:	d102      	bne.n	800ae32 <_close_r+0x1a>
 800ae2c:	682b      	ldr	r3, [r5, #0]
 800ae2e:	b103      	cbz	r3, 800ae32 <_close_r+0x1a>
 800ae30:	6023      	str	r3, [r4, #0]
 800ae32:	bd38      	pop	{r3, r4, r5, pc}
 800ae34:	20000cc8 	.word	0x20000cc8

0800ae38 <_lseek_r>:
 800ae38:	b538      	push	{r3, r4, r5, lr}
 800ae3a:	4604      	mov	r4, r0
 800ae3c:	4d06      	ldr	r5, [pc, #24]	@ (800ae58 <_lseek_r+0x20>)
 800ae3e:	4608      	mov	r0, r1
 800ae40:	4611      	mov	r1, r2
 800ae42:	2200      	movs	r2, #0
 800ae44:	602a      	str	r2, [r5, #0]
 800ae46:	461a      	mov	r2, r3
 800ae48:	f7f5 fd3a 	bl	80008c0 <_lseek>
 800ae4c:	1c43      	adds	r3, r0, #1
 800ae4e:	d102      	bne.n	800ae56 <_lseek_r+0x1e>
 800ae50:	682b      	ldr	r3, [r5, #0]
 800ae52:	b103      	cbz	r3, 800ae56 <_lseek_r+0x1e>
 800ae54:	6023      	str	r3, [r4, #0]
 800ae56:	bd38      	pop	{r3, r4, r5, pc}
 800ae58:	20000cc8 	.word	0x20000cc8

0800ae5c <_read_r>:
 800ae5c:	b538      	push	{r3, r4, r5, lr}
 800ae5e:	4604      	mov	r4, r0
 800ae60:	4d06      	ldr	r5, [pc, #24]	@ (800ae7c <_read_r+0x20>)
 800ae62:	4608      	mov	r0, r1
 800ae64:	4611      	mov	r1, r2
 800ae66:	2200      	movs	r2, #0
 800ae68:	602a      	str	r2, [r5, #0]
 800ae6a:	461a      	mov	r2, r3
 800ae6c:	f7f5 fcc8 	bl	8000800 <_read>
 800ae70:	1c43      	adds	r3, r0, #1
 800ae72:	d102      	bne.n	800ae7a <_read_r+0x1e>
 800ae74:	682b      	ldr	r3, [r5, #0]
 800ae76:	b103      	cbz	r3, 800ae7a <_read_r+0x1e>
 800ae78:	6023      	str	r3, [r4, #0]
 800ae7a:	bd38      	pop	{r3, r4, r5, pc}
 800ae7c:	20000cc8 	.word	0x20000cc8

0800ae80 <_write_r>:
 800ae80:	b538      	push	{r3, r4, r5, lr}
 800ae82:	4604      	mov	r4, r0
 800ae84:	4d06      	ldr	r5, [pc, #24]	@ (800aea0 <_write_r+0x20>)
 800ae86:	4608      	mov	r0, r1
 800ae88:	4611      	mov	r1, r2
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	602a      	str	r2, [r5, #0]
 800ae8e:	461a      	mov	r2, r3
 800ae90:	f7f5 fcd3 	bl	800083a <_write>
 800ae94:	1c43      	adds	r3, r0, #1
 800ae96:	d102      	bne.n	800ae9e <_write_r+0x1e>
 800ae98:	682b      	ldr	r3, [r5, #0]
 800ae9a:	b103      	cbz	r3, 800ae9e <_write_r+0x1e>
 800ae9c:	6023      	str	r3, [r4, #0]
 800ae9e:	bd38      	pop	{r3, r4, r5, pc}
 800aea0:	20000cc8 	.word	0x20000cc8

0800aea4 <__errno>:
 800aea4:	4b01      	ldr	r3, [pc, #4]	@ (800aeac <__errno+0x8>)
 800aea6:	6818      	ldr	r0, [r3, #0]
 800aea8:	4770      	bx	lr
 800aeaa:	bf00      	nop
 800aeac:	200001dc 	.word	0x200001dc

0800aeb0 <__libc_init_array>:
 800aeb0:	b570      	push	{r4, r5, r6, lr}
 800aeb2:	4d0d      	ldr	r5, [pc, #52]	@ (800aee8 <__libc_init_array+0x38>)
 800aeb4:	2600      	movs	r6, #0
 800aeb6:	4c0d      	ldr	r4, [pc, #52]	@ (800aeec <__libc_init_array+0x3c>)
 800aeb8:	1b64      	subs	r4, r4, r5
 800aeba:	10a4      	asrs	r4, r4, #2
 800aebc:	42a6      	cmp	r6, r4
 800aebe:	d109      	bne.n	800aed4 <__libc_init_array+0x24>
 800aec0:	4d0b      	ldr	r5, [pc, #44]	@ (800aef0 <__libc_init_array+0x40>)
 800aec2:	2600      	movs	r6, #0
 800aec4:	4c0b      	ldr	r4, [pc, #44]	@ (800aef4 <__libc_init_array+0x44>)
 800aec6:	f000 fdfd 	bl	800bac4 <_init>
 800aeca:	1b64      	subs	r4, r4, r5
 800aecc:	10a4      	asrs	r4, r4, #2
 800aece:	42a6      	cmp	r6, r4
 800aed0:	d105      	bne.n	800aede <__libc_init_array+0x2e>
 800aed2:	bd70      	pop	{r4, r5, r6, pc}
 800aed4:	f855 3b04 	ldr.w	r3, [r5], #4
 800aed8:	3601      	adds	r6, #1
 800aeda:	4798      	blx	r3
 800aedc:	e7ee      	b.n	800aebc <__libc_init_array+0xc>
 800aede:	f855 3b04 	ldr.w	r3, [r5], #4
 800aee2:	3601      	adds	r6, #1
 800aee4:	4798      	blx	r3
 800aee6:	e7f2      	b.n	800aece <__libc_init_array+0x1e>
 800aee8:	0800bc34 	.word	0x0800bc34
 800aeec:	0800bc34 	.word	0x0800bc34
 800aef0:	0800bc34 	.word	0x0800bc34
 800aef4:	0800bc38 	.word	0x0800bc38

0800aef8 <__retarget_lock_init_recursive>:
 800aef8:	4770      	bx	lr

0800aefa <__retarget_lock_acquire_recursive>:
 800aefa:	4770      	bx	lr

0800aefc <__retarget_lock_release_recursive>:
 800aefc:	4770      	bx	lr
	...

0800af00 <_free_r>:
 800af00:	b538      	push	{r3, r4, r5, lr}
 800af02:	4605      	mov	r5, r0
 800af04:	2900      	cmp	r1, #0
 800af06:	d041      	beq.n	800af8c <_free_r+0x8c>
 800af08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af0c:	1f0c      	subs	r4, r1, #4
 800af0e:	2b00      	cmp	r3, #0
 800af10:	bfb8      	it	lt
 800af12:	18e4      	addlt	r4, r4, r3
 800af14:	f000 f8e0 	bl	800b0d8 <__malloc_lock>
 800af18:	4a1d      	ldr	r2, [pc, #116]	@ (800af90 <_free_r+0x90>)
 800af1a:	6813      	ldr	r3, [r2, #0]
 800af1c:	b933      	cbnz	r3, 800af2c <_free_r+0x2c>
 800af1e:	6063      	str	r3, [r4, #4]
 800af20:	6014      	str	r4, [r2, #0]
 800af22:	4628      	mov	r0, r5
 800af24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af28:	f000 b8dc 	b.w	800b0e4 <__malloc_unlock>
 800af2c:	42a3      	cmp	r3, r4
 800af2e:	d908      	bls.n	800af42 <_free_r+0x42>
 800af30:	6820      	ldr	r0, [r4, #0]
 800af32:	1821      	adds	r1, r4, r0
 800af34:	428b      	cmp	r3, r1
 800af36:	bf01      	itttt	eq
 800af38:	6819      	ldreq	r1, [r3, #0]
 800af3a:	685b      	ldreq	r3, [r3, #4]
 800af3c:	1809      	addeq	r1, r1, r0
 800af3e:	6021      	streq	r1, [r4, #0]
 800af40:	e7ed      	b.n	800af1e <_free_r+0x1e>
 800af42:	461a      	mov	r2, r3
 800af44:	685b      	ldr	r3, [r3, #4]
 800af46:	b10b      	cbz	r3, 800af4c <_free_r+0x4c>
 800af48:	42a3      	cmp	r3, r4
 800af4a:	d9fa      	bls.n	800af42 <_free_r+0x42>
 800af4c:	6811      	ldr	r1, [r2, #0]
 800af4e:	1850      	adds	r0, r2, r1
 800af50:	42a0      	cmp	r0, r4
 800af52:	d10b      	bne.n	800af6c <_free_r+0x6c>
 800af54:	6820      	ldr	r0, [r4, #0]
 800af56:	4401      	add	r1, r0
 800af58:	1850      	adds	r0, r2, r1
 800af5a:	6011      	str	r1, [r2, #0]
 800af5c:	4283      	cmp	r3, r0
 800af5e:	d1e0      	bne.n	800af22 <_free_r+0x22>
 800af60:	6818      	ldr	r0, [r3, #0]
 800af62:	685b      	ldr	r3, [r3, #4]
 800af64:	4408      	add	r0, r1
 800af66:	6053      	str	r3, [r2, #4]
 800af68:	6010      	str	r0, [r2, #0]
 800af6a:	e7da      	b.n	800af22 <_free_r+0x22>
 800af6c:	d902      	bls.n	800af74 <_free_r+0x74>
 800af6e:	230c      	movs	r3, #12
 800af70:	602b      	str	r3, [r5, #0]
 800af72:	e7d6      	b.n	800af22 <_free_r+0x22>
 800af74:	6820      	ldr	r0, [r4, #0]
 800af76:	1821      	adds	r1, r4, r0
 800af78:	428b      	cmp	r3, r1
 800af7a:	bf02      	ittt	eq
 800af7c:	6819      	ldreq	r1, [r3, #0]
 800af7e:	685b      	ldreq	r3, [r3, #4]
 800af80:	1809      	addeq	r1, r1, r0
 800af82:	6063      	str	r3, [r4, #4]
 800af84:	bf08      	it	eq
 800af86:	6021      	streq	r1, [r4, #0]
 800af88:	6054      	str	r4, [r2, #4]
 800af8a:	e7ca      	b.n	800af22 <_free_r+0x22>
 800af8c:	bd38      	pop	{r3, r4, r5, pc}
 800af8e:	bf00      	nop
 800af90:	20000cd4 	.word	0x20000cd4

0800af94 <sbrk_aligned>:
 800af94:	b570      	push	{r4, r5, r6, lr}
 800af96:	4e0f      	ldr	r6, [pc, #60]	@ (800afd4 <sbrk_aligned+0x40>)
 800af98:	460c      	mov	r4, r1
 800af9a:	4605      	mov	r5, r0
 800af9c:	6831      	ldr	r1, [r6, #0]
 800af9e:	b911      	cbnz	r1, 800afa6 <sbrk_aligned+0x12>
 800afa0:	f000 fcee 	bl	800b980 <_sbrk_r>
 800afa4:	6030      	str	r0, [r6, #0]
 800afa6:	4621      	mov	r1, r4
 800afa8:	4628      	mov	r0, r5
 800afaa:	f000 fce9 	bl	800b980 <_sbrk_r>
 800afae:	1c43      	adds	r3, r0, #1
 800afb0:	d103      	bne.n	800afba <sbrk_aligned+0x26>
 800afb2:	f04f 34ff 	mov.w	r4, #4294967295
 800afb6:	4620      	mov	r0, r4
 800afb8:	bd70      	pop	{r4, r5, r6, pc}
 800afba:	1cc4      	adds	r4, r0, #3
 800afbc:	f024 0403 	bic.w	r4, r4, #3
 800afc0:	42a0      	cmp	r0, r4
 800afc2:	d0f8      	beq.n	800afb6 <sbrk_aligned+0x22>
 800afc4:	1a21      	subs	r1, r4, r0
 800afc6:	4628      	mov	r0, r5
 800afc8:	f000 fcda 	bl	800b980 <_sbrk_r>
 800afcc:	3001      	adds	r0, #1
 800afce:	d1f2      	bne.n	800afb6 <sbrk_aligned+0x22>
 800afd0:	e7ef      	b.n	800afb2 <sbrk_aligned+0x1e>
 800afd2:	bf00      	nop
 800afd4:	20000cd0 	.word	0x20000cd0

0800afd8 <_malloc_r>:
 800afd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afdc:	1ccd      	adds	r5, r1, #3
 800afde:	4606      	mov	r6, r0
 800afe0:	f025 0503 	bic.w	r5, r5, #3
 800afe4:	3508      	adds	r5, #8
 800afe6:	2d0c      	cmp	r5, #12
 800afe8:	bf38      	it	cc
 800afea:	250c      	movcc	r5, #12
 800afec:	2d00      	cmp	r5, #0
 800afee:	db01      	blt.n	800aff4 <_malloc_r+0x1c>
 800aff0:	42a9      	cmp	r1, r5
 800aff2:	d904      	bls.n	800affe <_malloc_r+0x26>
 800aff4:	230c      	movs	r3, #12
 800aff6:	6033      	str	r3, [r6, #0]
 800aff8:	2000      	movs	r0, #0
 800affa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800affe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b0d4 <_malloc_r+0xfc>
 800b002:	f000 f869 	bl	800b0d8 <__malloc_lock>
 800b006:	f8d8 3000 	ldr.w	r3, [r8]
 800b00a:	461c      	mov	r4, r3
 800b00c:	bb44      	cbnz	r4, 800b060 <_malloc_r+0x88>
 800b00e:	4629      	mov	r1, r5
 800b010:	4630      	mov	r0, r6
 800b012:	f7ff ffbf 	bl	800af94 <sbrk_aligned>
 800b016:	1c43      	adds	r3, r0, #1
 800b018:	4604      	mov	r4, r0
 800b01a:	d158      	bne.n	800b0ce <_malloc_r+0xf6>
 800b01c:	f8d8 4000 	ldr.w	r4, [r8]
 800b020:	4627      	mov	r7, r4
 800b022:	2f00      	cmp	r7, #0
 800b024:	d143      	bne.n	800b0ae <_malloc_r+0xd6>
 800b026:	2c00      	cmp	r4, #0
 800b028:	d04b      	beq.n	800b0c2 <_malloc_r+0xea>
 800b02a:	6823      	ldr	r3, [r4, #0]
 800b02c:	4639      	mov	r1, r7
 800b02e:	4630      	mov	r0, r6
 800b030:	eb04 0903 	add.w	r9, r4, r3
 800b034:	f000 fca4 	bl	800b980 <_sbrk_r>
 800b038:	4581      	cmp	r9, r0
 800b03a:	d142      	bne.n	800b0c2 <_malloc_r+0xea>
 800b03c:	6821      	ldr	r1, [r4, #0]
 800b03e:	4630      	mov	r0, r6
 800b040:	1a6d      	subs	r5, r5, r1
 800b042:	4629      	mov	r1, r5
 800b044:	f7ff ffa6 	bl	800af94 <sbrk_aligned>
 800b048:	3001      	adds	r0, #1
 800b04a:	d03a      	beq.n	800b0c2 <_malloc_r+0xea>
 800b04c:	6823      	ldr	r3, [r4, #0]
 800b04e:	442b      	add	r3, r5
 800b050:	6023      	str	r3, [r4, #0]
 800b052:	f8d8 3000 	ldr.w	r3, [r8]
 800b056:	685a      	ldr	r2, [r3, #4]
 800b058:	bb62      	cbnz	r2, 800b0b4 <_malloc_r+0xdc>
 800b05a:	f8c8 7000 	str.w	r7, [r8]
 800b05e:	e00f      	b.n	800b080 <_malloc_r+0xa8>
 800b060:	6822      	ldr	r2, [r4, #0]
 800b062:	1b52      	subs	r2, r2, r5
 800b064:	d420      	bmi.n	800b0a8 <_malloc_r+0xd0>
 800b066:	2a0b      	cmp	r2, #11
 800b068:	d917      	bls.n	800b09a <_malloc_r+0xc2>
 800b06a:	1961      	adds	r1, r4, r5
 800b06c:	42a3      	cmp	r3, r4
 800b06e:	6025      	str	r5, [r4, #0]
 800b070:	bf18      	it	ne
 800b072:	6059      	strne	r1, [r3, #4]
 800b074:	6863      	ldr	r3, [r4, #4]
 800b076:	bf08      	it	eq
 800b078:	f8c8 1000 	streq.w	r1, [r8]
 800b07c:	5162      	str	r2, [r4, r5]
 800b07e:	604b      	str	r3, [r1, #4]
 800b080:	4630      	mov	r0, r6
 800b082:	f000 f82f 	bl	800b0e4 <__malloc_unlock>
 800b086:	f104 000b 	add.w	r0, r4, #11
 800b08a:	1d23      	adds	r3, r4, #4
 800b08c:	f020 0007 	bic.w	r0, r0, #7
 800b090:	1ac2      	subs	r2, r0, r3
 800b092:	bf1c      	itt	ne
 800b094:	1a1b      	subne	r3, r3, r0
 800b096:	50a3      	strne	r3, [r4, r2]
 800b098:	e7af      	b.n	800affa <_malloc_r+0x22>
 800b09a:	6862      	ldr	r2, [r4, #4]
 800b09c:	42a3      	cmp	r3, r4
 800b09e:	bf0c      	ite	eq
 800b0a0:	f8c8 2000 	streq.w	r2, [r8]
 800b0a4:	605a      	strne	r2, [r3, #4]
 800b0a6:	e7eb      	b.n	800b080 <_malloc_r+0xa8>
 800b0a8:	4623      	mov	r3, r4
 800b0aa:	6864      	ldr	r4, [r4, #4]
 800b0ac:	e7ae      	b.n	800b00c <_malloc_r+0x34>
 800b0ae:	463c      	mov	r4, r7
 800b0b0:	687f      	ldr	r7, [r7, #4]
 800b0b2:	e7b6      	b.n	800b022 <_malloc_r+0x4a>
 800b0b4:	461a      	mov	r2, r3
 800b0b6:	685b      	ldr	r3, [r3, #4]
 800b0b8:	42a3      	cmp	r3, r4
 800b0ba:	d1fb      	bne.n	800b0b4 <_malloc_r+0xdc>
 800b0bc:	2300      	movs	r3, #0
 800b0be:	6053      	str	r3, [r2, #4]
 800b0c0:	e7de      	b.n	800b080 <_malloc_r+0xa8>
 800b0c2:	230c      	movs	r3, #12
 800b0c4:	4630      	mov	r0, r6
 800b0c6:	6033      	str	r3, [r6, #0]
 800b0c8:	f000 f80c 	bl	800b0e4 <__malloc_unlock>
 800b0cc:	e794      	b.n	800aff8 <_malloc_r+0x20>
 800b0ce:	6005      	str	r5, [r0, #0]
 800b0d0:	e7d6      	b.n	800b080 <_malloc_r+0xa8>
 800b0d2:	bf00      	nop
 800b0d4:	20000cd4 	.word	0x20000cd4

0800b0d8 <__malloc_lock>:
 800b0d8:	4801      	ldr	r0, [pc, #4]	@ (800b0e0 <__malloc_lock+0x8>)
 800b0da:	f7ff bf0e 	b.w	800aefa <__retarget_lock_acquire_recursive>
 800b0de:	bf00      	nop
 800b0e0:	20000ccc 	.word	0x20000ccc

0800b0e4 <__malloc_unlock>:
 800b0e4:	4801      	ldr	r0, [pc, #4]	@ (800b0ec <__malloc_unlock+0x8>)
 800b0e6:	f7ff bf09 	b.w	800aefc <__retarget_lock_release_recursive>
 800b0ea:	bf00      	nop
 800b0ec:	20000ccc 	.word	0x20000ccc

0800b0f0 <__sfputc_r>:
 800b0f0:	6893      	ldr	r3, [r2, #8]
 800b0f2:	3b01      	subs	r3, #1
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	6093      	str	r3, [r2, #8]
 800b0f8:	b410      	push	{r4}
 800b0fa:	da08      	bge.n	800b10e <__sfputc_r+0x1e>
 800b0fc:	6994      	ldr	r4, [r2, #24]
 800b0fe:	42a3      	cmp	r3, r4
 800b100:	db01      	blt.n	800b106 <__sfputc_r+0x16>
 800b102:	290a      	cmp	r1, #10
 800b104:	d103      	bne.n	800b10e <__sfputc_r+0x1e>
 800b106:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b10a:	f000 bba5 	b.w	800b858 <__swbuf_r>
 800b10e:	6813      	ldr	r3, [r2, #0]
 800b110:	1c58      	adds	r0, r3, #1
 800b112:	6010      	str	r0, [r2, #0]
 800b114:	4608      	mov	r0, r1
 800b116:	7019      	strb	r1, [r3, #0]
 800b118:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b11c:	4770      	bx	lr

0800b11e <__sfputs_r>:
 800b11e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b120:	4606      	mov	r6, r0
 800b122:	460f      	mov	r7, r1
 800b124:	4614      	mov	r4, r2
 800b126:	18d5      	adds	r5, r2, r3
 800b128:	42ac      	cmp	r4, r5
 800b12a:	d101      	bne.n	800b130 <__sfputs_r+0x12>
 800b12c:	2000      	movs	r0, #0
 800b12e:	e007      	b.n	800b140 <__sfputs_r+0x22>
 800b130:	463a      	mov	r2, r7
 800b132:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b136:	4630      	mov	r0, r6
 800b138:	f7ff ffda 	bl	800b0f0 <__sfputc_r>
 800b13c:	1c43      	adds	r3, r0, #1
 800b13e:	d1f3      	bne.n	800b128 <__sfputs_r+0xa>
 800b140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b144 <_vfiprintf_r>:
 800b144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b148:	460d      	mov	r5, r1
 800b14a:	b09d      	sub	sp, #116	@ 0x74
 800b14c:	4614      	mov	r4, r2
 800b14e:	4698      	mov	r8, r3
 800b150:	4606      	mov	r6, r0
 800b152:	b118      	cbz	r0, 800b15c <_vfiprintf_r+0x18>
 800b154:	6a03      	ldr	r3, [r0, #32]
 800b156:	b90b      	cbnz	r3, 800b15c <_vfiprintf_r+0x18>
 800b158:	f7ff fdc2 	bl	800ace0 <__sinit>
 800b15c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b15e:	07d9      	lsls	r1, r3, #31
 800b160:	d405      	bmi.n	800b16e <_vfiprintf_r+0x2a>
 800b162:	89ab      	ldrh	r3, [r5, #12]
 800b164:	059a      	lsls	r2, r3, #22
 800b166:	d402      	bmi.n	800b16e <_vfiprintf_r+0x2a>
 800b168:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b16a:	f7ff fec6 	bl	800aefa <__retarget_lock_acquire_recursive>
 800b16e:	89ab      	ldrh	r3, [r5, #12]
 800b170:	071b      	lsls	r3, r3, #28
 800b172:	d501      	bpl.n	800b178 <_vfiprintf_r+0x34>
 800b174:	692b      	ldr	r3, [r5, #16]
 800b176:	b99b      	cbnz	r3, 800b1a0 <_vfiprintf_r+0x5c>
 800b178:	4629      	mov	r1, r5
 800b17a:	4630      	mov	r0, r6
 800b17c:	f000 fbaa 	bl	800b8d4 <__swsetup_r>
 800b180:	b170      	cbz	r0, 800b1a0 <_vfiprintf_r+0x5c>
 800b182:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b184:	07dc      	lsls	r4, r3, #31
 800b186:	d504      	bpl.n	800b192 <_vfiprintf_r+0x4e>
 800b188:	f04f 30ff 	mov.w	r0, #4294967295
 800b18c:	b01d      	add	sp, #116	@ 0x74
 800b18e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b192:	89ab      	ldrh	r3, [r5, #12]
 800b194:	0598      	lsls	r0, r3, #22
 800b196:	d4f7      	bmi.n	800b188 <_vfiprintf_r+0x44>
 800b198:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b19a:	f7ff feaf 	bl	800aefc <__retarget_lock_release_recursive>
 800b19e:	e7f3      	b.n	800b188 <_vfiprintf_r+0x44>
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	f8cd 800c 	str.w	r8, [sp, #12]
 800b1a6:	f04f 0901 	mov.w	r9, #1
 800b1aa:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800b360 <_vfiprintf_r+0x21c>
 800b1ae:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1b0:	2320      	movs	r3, #32
 800b1b2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b1b6:	2330      	movs	r3, #48	@ 0x30
 800b1b8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b1bc:	4623      	mov	r3, r4
 800b1be:	469a      	mov	sl, r3
 800b1c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b1c4:	b10a      	cbz	r2, 800b1ca <_vfiprintf_r+0x86>
 800b1c6:	2a25      	cmp	r2, #37	@ 0x25
 800b1c8:	d1f9      	bne.n	800b1be <_vfiprintf_r+0x7a>
 800b1ca:	ebba 0b04 	subs.w	fp, sl, r4
 800b1ce:	d00b      	beq.n	800b1e8 <_vfiprintf_r+0xa4>
 800b1d0:	465b      	mov	r3, fp
 800b1d2:	4622      	mov	r2, r4
 800b1d4:	4629      	mov	r1, r5
 800b1d6:	4630      	mov	r0, r6
 800b1d8:	f7ff ffa1 	bl	800b11e <__sfputs_r>
 800b1dc:	3001      	adds	r0, #1
 800b1de:	f000 80a7 	beq.w	800b330 <_vfiprintf_r+0x1ec>
 800b1e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b1e4:	445a      	add	r2, fp
 800b1e6:	9209      	str	r2, [sp, #36]	@ 0x24
 800b1e8:	f89a 3000 	ldrb.w	r3, [sl]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	f000 809f 	beq.w	800b330 <_vfiprintf_r+0x1ec>
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	f04f 32ff 	mov.w	r2, #4294967295
 800b1f8:	f10a 0a01 	add.w	sl, sl, #1
 800b1fc:	9304      	str	r3, [sp, #16]
 800b1fe:	9307      	str	r3, [sp, #28]
 800b200:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b204:	931a      	str	r3, [sp, #104]	@ 0x68
 800b206:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b20a:	4654      	mov	r4, sl
 800b20c:	2205      	movs	r2, #5
 800b20e:	4854      	ldr	r0, [pc, #336]	@ (800b360 <_vfiprintf_r+0x21c>)
 800b210:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b214:	f000 fbc4 	bl	800b9a0 <memchr>
 800b218:	9a04      	ldr	r2, [sp, #16]
 800b21a:	b9d8      	cbnz	r0, 800b254 <_vfiprintf_r+0x110>
 800b21c:	06d1      	lsls	r1, r2, #27
 800b21e:	bf44      	itt	mi
 800b220:	2320      	movmi	r3, #32
 800b222:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b226:	0713      	lsls	r3, r2, #28
 800b228:	bf44      	itt	mi
 800b22a:	232b      	movmi	r3, #43	@ 0x2b
 800b22c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b230:	f89a 3000 	ldrb.w	r3, [sl]
 800b234:	2b2a      	cmp	r3, #42	@ 0x2a
 800b236:	d015      	beq.n	800b264 <_vfiprintf_r+0x120>
 800b238:	9a07      	ldr	r2, [sp, #28]
 800b23a:	4654      	mov	r4, sl
 800b23c:	2000      	movs	r0, #0
 800b23e:	f04f 0c0a 	mov.w	ip, #10
 800b242:	4621      	mov	r1, r4
 800b244:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b248:	3b30      	subs	r3, #48	@ 0x30
 800b24a:	2b09      	cmp	r3, #9
 800b24c:	d94b      	bls.n	800b2e6 <_vfiprintf_r+0x1a2>
 800b24e:	b1b0      	cbz	r0, 800b27e <_vfiprintf_r+0x13a>
 800b250:	9207      	str	r2, [sp, #28]
 800b252:	e014      	b.n	800b27e <_vfiprintf_r+0x13a>
 800b254:	eba0 0308 	sub.w	r3, r0, r8
 800b258:	46a2      	mov	sl, r4
 800b25a:	fa09 f303 	lsl.w	r3, r9, r3
 800b25e:	4313      	orrs	r3, r2
 800b260:	9304      	str	r3, [sp, #16]
 800b262:	e7d2      	b.n	800b20a <_vfiprintf_r+0xc6>
 800b264:	9b03      	ldr	r3, [sp, #12]
 800b266:	1d19      	adds	r1, r3, #4
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	9103      	str	r1, [sp, #12]
 800b26e:	bfbb      	ittet	lt
 800b270:	425b      	neglt	r3, r3
 800b272:	f042 0202 	orrlt.w	r2, r2, #2
 800b276:	9307      	strge	r3, [sp, #28]
 800b278:	9307      	strlt	r3, [sp, #28]
 800b27a:	bfb8      	it	lt
 800b27c:	9204      	strlt	r2, [sp, #16]
 800b27e:	7823      	ldrb	r3, [r4, #0]
 800b280:	2b2e      	cmp	r3, #46	@ 0x2e
 800b282:	d10a      	bne.n	800b29a <_vfiprintf_r+0x156>
 800b284:	7863      	ldrb	r3, [r4, #1]
 800b286:	2b2a      	cmp	r3, #42	@ 0x2a
 800b288:	d132      	bne.n	800b2f0 <_vfiprintf_r+0x1ac>
 800b28a:	9b03      	ldr	r3, [sp, #12]
 800b28c:	3402      	adds	r4, #2
 800b28e:	1d1a      	adds	r2, r3, #4
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b296:	9203      	str	r2, [sp, #12]
 800b298:	9305      	str	r3, [sp, #20]
 800b29a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b370 <_vfiprintf_r+0x22c>
 800b29e:	2203      	movs	r2, #3
 800b2a0:	7821      	ldrb	r1, [r4, #0]
 800b2a2:	4650      	mov	r0, sl
 800b2a4:	f000 fb7c 	bl	800b9a0 <memchr>
 800b2a8:	b138      	cbz	r0, 800b2ba <_vfiprintf_r+0x176>
 800b2aa:	eba0 000a 	sub.w	r0, r0, sl
 800b2ae:	2240      	movs	r2, #64	@ 0x40
 800b2b0:	9b04      	ldr	r3, [sp, #16]
 800b2b2:	3401      	adds	r4, #1
 800b2b4:	4082      	lsls	r2, r0
 800b2b6:	4313      	orrs	r3, r2
 800b2b8:	9304      	str	r3, [sp, #16]
 800b2ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2be:	2206      	movs	r2, #6
 800b2c0:	4828      	ldr	r0, [pc, #160]	@ (800b364 <_vfiprintf_r+0x220>)
 800b2c2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b2c6:	f000 fb6b 	bl	800b9a0 <memchr>
 800b2ca:	2800      	cmp	r0, #0
 800b2cc:	d03f      	beq.n	800b34e <_vfiprintf_r+0x20a>
 800b2ce:	4b26      	ldr	r3, [pc, #152]	@ (800b368 <_vfiprintf_r+0x224>)
 800b2d0:	bb1b      	cbnz	r3, 800b31a <_vfiprintf_r+0x1d6>
 800b2d2:	9b03      	ldr	r3, [sp, #12]
 800b2d4:	3307      	adds	r3, #7
 800b2d6:	f023 0307 	bic.w	r3, r3, #7
 800b2da:	3308      	adds	r3, #8
 800b2dc:	9303      	str	r3, [sp, #12]
 800b2de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2e0:	443b      	add	r3, r7
 800b2e2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b2e4:	e76a      	b.n	800b1bc <_vfiprintf_r+0x78>
 800b2e6:	fb0c 3202 	mla	r2, ip, r2, r3
 800b2ea:	460c      	mov	r4, r1
 800b2ec:	2001      	movs	r0, #1
 800b2ee:	e7a8      	b.n	800b242 <_vfiprintf_r+0xfe>
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	3401      	adds	r4, #1
 800b2f4:	f04f 0c0a 	mov.w	ip, #10
 800b2f8:	4619      	mov	r1, r3
 800b2fa:	9305      	str	r3, [sp, #20]
 800b2fc:	4620      	mov	r0, r4
 800b2fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b302:	3a30      	subs	r2, #48	@ 0x30
 800b304:	2a09      	cmp	r2, #9
 800b306:	d903      	bls.n	800b310 <_vfiprintf_r+0x1cc>
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d0c6      	beq.n	800b29a <_vfiprintf_r+0x156>
 800b30c:	9105      	str	r1, [sp, #20]
 800b30e:	e7c4      	b.n	800b29a <_vfiprintf_r+0x156>
 800b310:	fb0c 2101 	mla	r1, ip, r1, r2
 800b314:	4604      	mov	r4, r0
 800b316:	2301      	movs	r3, #1
 800b318:	e7f0      	b.n	800b2fc <_vfiprintf_r+0x1b8>
 800b31a:	ab03      	add	r3, sp, #12
 800b31c:	462a      	mov	r2, r5
 800b31e:	a904      	add	r1, sp, #16
 800b320:	4630      	mov	r0, r6
 800b322:	9300      	str	r3, [sp, #0]
 800b324:	4b11      	ldr	r3, [pc, #68]	@ (800b36c <_vfiprintf_r+0x228>)
 800b326:	f3af 8000 	nop.w
 800b32a:	4607      	mov	r7, r0
 800b32c:	1c78      	adds	r0, r7, #1
 800b32e:	d1d6      	bne.n	800b2de <_vfiprintf_r+0x19a>
 800b330:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b332:	07d9      	lsls	r1, r3, #31
 800b334:	d405      	bmi.n	800b342 <_vfiprintf_r+0x1fe>
 800b336:	89ab      	ldrh	r3, [r5, #12]
 800b338:	059a      	lsls	r2, r3, #22
 800b33a:	d402      	bmi.n	800b342 <_vfiprintf_r+0x1fe>
 800b33c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b33e:	f7ff fddd 	bl	800aefc <__retarget_lock_release_recursive>
 800b342:	89ab      	ldrh	r3, [r5, #12]
 800b344:	065b      	lsls	r3, r3, #25
 800b346:	f53f af1f 	bmi.w	800b188 <_vfiprintf_r+0x44>
 800b34a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b34c:	e71e      	b.n	800b18c <_vfiprintf_r+0x48>
 800b34e:	ab03      	add	r3, sp, #12
 800b350:	462a      	mov	r2, r5
 800b352:	a904      	add	r1, sp, #16
 800b354:	4630      	mov	r0, r6
 800b356:	9300      	str	r3, [sp, #0]
 800b358:	4b04      	ldr	r3, [pc, #16]	@ (800b36c <_vfiprintf_r+0x228>)
 800b35a:	f000 f87d 	bl	800b458 <_printf_i>
 800b35e:	e7e4      	b.n	800b32a <_vfiprintf_r+0x1e6>
 800b360:	0800bc00 	.word	0x0800bc00
 800b364:	0800bc0a 	.word	0x0800bc0a
 800b368:	00000000 	.word	0x00000000
 800b36c:	0800b11f 	.word	0x0800b11f
 800b370:	0800bc06 	.word	0x0800bc06

0800b374 <_printf_common>:
 800b374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b378:	4616      	mov	r6, r2
 800b37a:	4698      	mov	r8, r3
 800b37c:	688a      	ldr	r2, [r1, #8]
 800b37e:	4607      	mov	r7, r0
 800b380:	690b      	ldr	r3, [r1, #16]
 800b382:	460c      	mov	r4, r1
 800b384:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b388:	4293      	cmp	r3, r2
 800b38a:	bfb8      	it	lt
 800b38c:	4613      	movlt	r3, r2
 800b38e:	6033      	str	r3, [r6, #0]
 800b390:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b394:	b10a      	cbz	r2, 800b39a <_printf_common+0x26>
 800b396:	3301      	adds	r3, #1
 800b398:	6033      	str	r3, [r6, #0]
 800b39a:	6823      	ldr	r3, [r4, #0]
 800b39c:	0699      	lsls	r1, r3, #26
 800b39e:	bf42      	ittt	mi
 800b3a0:	6833      	ldrmi	r3, [r6, #0]
 800b3a2:	3302      	addmi	r3, #2
 800b3a4:	6033      	strmi	r3, [r6, #0]
 800b3a6:	6825      	ldr	r5, [r4, #0]
 800b3a8:	f015 0506 	ands.w	r5, r5, #6
 800b3ac:	d106      	bne.n	800b3bc <_printf_common+0x48>
 800b3ae:	f104 0a19 	add.w	sl, r4, #25
 800b3b2:	68e3      	ldr	r3, [r4, #12]
 800b3b4:	6832      	ldr	r2, [r6, #0]
 800b3b6:	1a9b      	subs	r3, r3, r2
 800b3b8:	42ab      	cmp	r3, r5
 800b3ba:	dc2b      	bgt.n	800b414 <_printf_common+0xa0>
 800b3bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b3c0:	6822      	ldr	r2, [r4, #0]
 800b3c2:	3b00      	subs	r3, #0
 800b3c4:	bf18      	it	ne
 800b3c6:	2301      	movne	r3, #1
 800b3c8:	0692      	lsls	r2, r2, #26
 800b3ca:	d430      	bmi.n	800b42e <_printf_common+0xba>
 800b3cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b3d0:	4641      	mov	r1, r8
 800b3d2:	4638      	mov	r0, r7
 800b3d4:	47c8      	blx	r9
 800b3d6:	3001      	adds	r0, #1
 800b3d8:	d023      	beq.n	800b422 <_printf_common+0xae>
 800b3da:	6823      	ldr	r3, [r4, #0]
 800b3dc:	341a      	adds	r4, #26
 800b3de:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800b3e2:	f003 0306 	and.w	r3, r3, #6
 800b3e6:	2b04      	cmp	r3, #4
 800b3e8:	bf0a      	itet	eq
 800b3ea:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800b3ee:	2500      	movne	r5, #0
 800b3f0:	6833      	ldreq	r3, [r6, #0]
 800b3f2:	f04f 0600 	mov.w	r6, #0
 800b3f6:	bf08      	it	eq
 800b3f8:	1aed      	subeq	r5, r5, r3
 800b3fa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800b3fe:	bf08      	it	eq
 800b400:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b404:	4293      	cmp	r3, r2
 800b406:	bfc4      	itt	gt
 800b408:	1a9b      	subgt	r3, r3, r2
 800b40a:	18ed      	addgt	r5, r5, r3
 800b40c:	42b5      	cmp	r5, r6
 800b40e:	d11a      	bne.n	800b446 <_printf_common+0xd2>
 800b410:	2000      	movs	r0, #0
 800b412:	e008      	b.n	800b426 <_printf_common+0xb2>
 800b414:	2301      	movs	r3, #1
 800b416:	4652      	mov	r2, sl
 800b418:	4641      	mov	r1, r8
 800b41a:	4638      	mov	r0, r7
 800b41c:	47c8      	blx	r9
 800b41e:	3001      	adds	r0, #1
 800b420:	d103      	bne.n	800b42a <_printf_common+0xb6>
 800b422:	f04f 30ff 	mov.w	r0, #4294967295
 800b426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b42a:	3501      	adds	r5, #1
 800b42c:	e7c1      	b.n	800b3b2 <_printf_common+0x3e>
 800b42e:	18e1      	adds	r1, r4, r3
 800b430:	1c5a      	adds	r2, r3, #1
 800b432:	2030      	movs	r0, #48	@ 0x30
 800b434:	3302      	adds	r3, #2
 800b436:	4422      	add	r2, r4
 800b438:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b43c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b440:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b444:	e7c2      	b.n	800b3cc <_printf_common+0x58>
 800b446:	2301      	movs	r3, #1
 800b448:	4622      	mov	r2, r4
 800b44a:	4641      	mov	r1, r8
 800b44c:	4638      	mov	r0, r7
 800b44e:	47c8      	blx	r9
 800b450:	3001      	adds	r0, #1
 800b452:	d0e6      	beq.n	800b422 <_printf_common+0xae>
 800b454:	3601      	adds	r6, #1
 800b456:	e7d9      	b.n	800b40c <_printf_common+0x98>

0800b458 <_printf_i>:
 800b458:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b45c:	7e0f      	ldrb	r7, [r1, #24]
 800b45e:	4691      	mov	r9, r2
 800b460:	4680      	mov	r8, r0
 800b462:	460c      	mov	r4, r1
 800b464:	2f78      	cmp	r7, #120	@ 0x78
 800b466:	469a      	mov	sl, r3
 800b468:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b46a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b46e:	d807      	bhi.n	800b480 <_printf_i+0x28>
 800b470:	2f62      	cmp	r7, #98	@ 0x62
 800b472:	d80a      	bhi.n	800b48a <_printf_i+0x32>
 800b474:	2f00      	cmp	r7, #0
 800b476:	f000 80d2 	beq.w	800b61e <_printf_i+0x1c6>
 800b47a:	2f58      	cmp	r7, #88	@ 0x58
 800b47c:	f000 80b9 	beq.w	800b5f2 <_printf_i+0x19a>
 800b480:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b484:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b488:	e03a      	b.n	800b500 <_printf_i+0xa8>
 800b48a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b48e:	2b15      	cmp	r3, #21
 800b490:	d8f6      	bhi.n	800b480 <_printf_i+0x28>
 800b492:	a101      	add	r1, pc, #4	@ (adr r1, 800b498 <_printf_i+0x40>)
 800b494:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b498:	0800b4f1 	.word	0x0800b4f1
 800b49c:	0800b505 	.word	0x0800b505
 800b4a0:	0800b481 	.word	0x0800b481
 800b4a4:	0800b481 	.word	0x0800b481
 800b4a8:	0800b481 	.word	0x0800b481
 800b4ac:	0800b481 	.word	0x0800b481
 800b4b0:	0800b505 	.word	0x0800b505
 800b4b4:	0800b481 	.word	0x0800b481
 800b4b8:	0800b481 	.word	0x0800b481
 800b4bc:	0800b481 	.word	0x0800b481
 800b4c0:	0800b481 	.word	0x0800b481
 800b4c4:	0800b605 	.word	0x0800b605
 800b4c8:	0800b52f 	.word	0x0800b52f
 800b4cc:	0800b5bf 	.word	0x0800b5bf
 800b4d0:	0800b481 	.word	0x0800b481
 800b4d4:	0800b481 	.word	0x0800b481
 800b4d8:	0800b627 	.word	0x0800b627
 800b4dc:	0800b481 	.word	0x0800b481
 800b4e0:	0800b52f 	.word	0x0800b52f
 800b4e4:	0800b481 	.word	0x0800b481
 800b4e8:	0800b481 	.word	0x0800b481
 800b4ec:	0800b5c7 	.word	0x0800b5c7
 800b4f0:	6833      	ldr	r3, [r6, #0]
 800b4f2:	1d1a      	adds	r2, r3, #4
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	6032      	str	r2, [r6, #0]
 800b4f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b4fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b500:	2301      	movs	r3, #1
 800b502:	e09d      	b.n	800b640 <_printf_i+0x1e8>
 800b504:	6833      	ldr	r3, [r6, #0]
 800b506:	6820      	ldr	r0, [r4, #0]
 800b508:	1d19      	adds	r1, r3, #4
 800b50a:	6031      	str	r1, [r6, #0]
 800b50c:	0606      	lsls	r6, r0, #24
 800b50e:	d501      	bpl.n	800b514 <_printf_i+0xbc>
 800b510:	681d      	ldr	r5, [r3, #0]
 800b512:	e003      	b.n	800b51c <_printf_i+0xc4>
 800b514:	0645      	lsls	r5, r0, #25
 800b516:	d5fb      	bpl.n	800b510 <_printf_i+0xb8>
 800b518:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b51c:	2d00      	cmp	r5, #0
 800b51e:	da03      	bge.n	800b528 <_printf_i+0xd0>
 800b520:	232d      	movs	r3, #45	@ 0x2d
 800b522:	426d      	negs	r5, r5
 800b524:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b528:	4859      	ldr	r0, [pc, #356]	@ (800b690 <_printf_i+0x238>)
 800b52a:	230a      	movs	r3, #10
 800b52c:	e011      	b.n	800b552 <_printf_i+0xfa>
 800b52e:	6821      	ldr	r1, [r4, #0]
 800b530:	6833      	ldr	r3, [r6, #0]
 800b532:	0608      	lsls	r0, r1, #24
 800b534:	f853 5b04 	ldr.w	r5, [r3], #4
 800b538:	d402      	bmi.n	800b540 <_printf_i+0xe8>
 800b53a:	0649      	lsls	r1, r1, #25
 800b53c:	bf48      	it	mi
 800b53e:	b2ad      	uxthmi	r5, r5
 800b540:	2f6f      	cmp	r7, #111	@ 0x6f
 800b542:	6033      	str	r3, [r6, #0]
 800b544:	4852      	ldr	r0, [pc, #328]	@ (800b690 <_printf_i+0x238>)
 800b546:	bf14      	ite	ne
 800b548:	230a      	movne	r3, #10
 800b54a:	2308      	moveq	r3, #8
 800b54c:	2100      	movs	r1, #0
 800b54e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b552:	6866      	ldr	r6, [r4, #4]
 800b554:	2e00      	cmp	r6, #0
 800b556:	60a6      	str	r6, [r4, #8]
 800b558:	bfa2      	ittt	ge
 800b55a:	6821      	ldrge	r1, [r4, #0]
 800b55c:	f021 0104 	bicge.w	r1, r1, #4
 800b560:	6021      	strge	r1, [r4, #0]
 800b562:	b90d      	cbnz	r5, 800b568 <_printf_i+0x110>
 800b564:	2e00      	cmp	r6, #0
 800b566:	d04b      	beq.n	800b600 <_printf_i+0x1a8>
 800b568:	4616      	mov	r6, r2
 800b56a:	fbb5 f1f3 	udiv	r1, r5, r3
 800b56e:	fb03 5711 	mls	r7, r3, r1, r5
 800b572:	5dc7      	ldrb	r7, [r0, r7]
 800b574:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b578:	462f      	mov	r7, r5
 800b57a:	460d      	mov	r5, r1
 800b57c:	42bb      	cmp	r3, r7
 800b57e:	d9f4      	bls.n	800b56a <_printf_i+0x112>
 800b580:	2b08      	cmp	r3, #8
 800b582:	d10b      	bne.n	800b59c <_printf_i+0x144>
 800b584:	6823      	ldr	r3, [r4, #0]
 800b586:	07df      	lsls	r7, r3, #31
 800b588:	d508      	bpl.n	800b59c <_printf_i+0x144>
 800b58a:	6923      	ldr	r3, [r4, #16]
 800b58c:	6861      	ldr	r1, [r4, #4]
 800b58e:	4299      	cmp	r1, r3
 800b590:	bfde      	ittt	le
 800b592:	2330      	movle	r3, #48	@ 0x30
 800b594:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b598:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b59c:	1b92      	subs	r2, r2, r6
 800b59e:	6122      	str	r2, [r4, #16]
 800b5a0:	464b      	mov	r3, r9
 800b5a2:	aa03      	add	r2, sp, #12
 800b5a4:	4621      	mov	r1, r4
 800b5a6:	4640      	mov	r0, r8
 800b5a8:	f8cd a000 	str.w	sl, [sp]
 800b5ac:	f7ff fee2 	bl	800b374 <_printf_common>
 800b5b0:	3001      	adds	r0, #1
 800b5b2:	d14a      	bne.n	800b64a <_printf_i+0x1f2>
 800b5b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b5b8:	b004      	add	sp, #16
 800b5ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5be:	6823      	ldr	r3, [r4, #0]
 800b5c0:	f043 0320 	orr.w	r3, r3, #32
 800b5c4:	6023      	str	r3, [r4, #0]
 800b5c6:	2778      	movs	r7, #120	@ 0x78
 800b5c8:	4832      	ldr	r0, [pc, #200]	@ (800b694 <_printf_i+0x23c>)
 800b5ca:	6823      	ldr	r3, [r4, #0]
 800b5cc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b5d0:	061f      	lsls	r7, r3, #24
 800b5d2:	6831      	ldr	r1, [r6, #0]
 800b5d4:	f851 5b04 	ldr.w	r5, [r1], #4
 800b5d8:	d402      	bmi.n	800b5e0 <_printf_i+0x188>
 800b5da:	065f      	lsls	r7, r3, #25
 800b5dc:	bf48      	it	mi
 800b5de:	b2ad      	uxthmi	r5, r5
 800b5e0:	6031      	str	r1, [r6, #0]
 800b5e2:	07d9      	lsls	r1, r3, #31
 800b5e4:	bf44      	itt	mi
 800b5e6:	f043 0320 	orrmi.w	r3, r3, #32
 800b5ea:	6023      	strmi	r3, [r4, #0]
 800b5ec:	b11d      	cbz	r5, 800b5f6 <_printf_i+0x19e>
 800b5ee:	2310      	movs	r3, #16
 800b5f0:	e7ac      	b.n	800b54c <_printf_i+0xf4>
 800b5f2:	4827      	ldr	r0, [pc, #156]	@ (800b690 <_printf_i+0x238>)
 800b5f4:	e7e9      	b.n	800b5ca <_printf_i+0x172>
 800b5f6:	6823      	ldr	r3, [r4, #0]
 800b5f8:	f023 0320 	bic.w	r3, r3, #32
 800b5fc:	6023      	str	r3, [r4, #0]
 800b5fe:	e7f6      	b.n	800b5ee <_printf_i+0x196>
 800b600:	4616      	mov	r6, r2
 800b602:	e7bd      	b.n	800b580 <_printf_i+0x128>
 800b604:	6833      	ldr	r3, [r6, #0]
 800b606:	6825      	ldr	r5, [r4, #0]
 800b608:	1d18      	adds	r0, r3, #4
 800b60a:	6961      	ldr	r1, [r4, #20]
 800b60c:	6030      	str	r0, [r6, #0]
 800b60e:	062e      	lsls	r6, r5, #24
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	d501      	bpl.n	800b618 <_printf_i+0x1c0>
 800b614:	6019      	str	r1, [r3, #0]
 800b616:	e002      	b.n	800b61e <_printf_i+0x1c6>
 800b618:	0668      	lsls	r0, r5, #25
 800b61a:	d5fb      	bpl.n	800b614 <_printf_i+0x1bc>
 800b61c:	8019      	strh	r1, [r3, #0]
 800b61e:	2300      	movs	r3, #0
 800b620:	4616      	mov	r6, r2
 800b622:	6123      	str	r3, [r4, #16]
 800b624:	e7bc      	b.n	800b5a0 <_printf_i+0x148>
 800b626:	6833      	ldr	r3, [r6, #0]
 800b628:	2100      	movs	r1, #0
 800b62a:	1d1a      	adds	r2, r3, #4
 800b62c:	6032      	str	r2, [r6, #0]
 800b62e:	681e      	ldr	r6, [r3, #0]
 800b630:	6862      	ldr	r2, [r4, #4]
 800b632:	4630      	mov	r0, r6
 800b634:	f000 f9b4 	bl	800b9a0 <memchr>
 800b638:	b108      	cbz	r0, 800b63e <_printf_i+0x1e6>
 800b63a:	1b80      	subs	r0, r0, r6
 800b63c:	6060      	str	r0, [r4, #4]
 800b63e:	6863      	ldr	r3, [r4, #4]
 800b640:	6123      	str	r3, [r4, #16]
 800b642:	2300      	movs	r3, #0
 800b644:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b648:	e7aa      	b.n	800b5a0 <_printf_i+0x148>
 800b64a:	6923      	ldr	r3, [r4, #16]
 800b64c:	4632      	mov	r2, r6
 800b64e:	4649      	mov	r1, r9
 800b650:	4640      	mov	r0, r8
 800b652:	47d0      	blx	sl
 800b654:	3001      	adds	r0, #1
 800b656:	d0ad      	beq.n	800b5b4 <_printf_i+0x15c>
 800b658:	6823      	ldr	r3, [r4, #0]
 800b65a:	079b      	lsls	r3, r3, #30
 800b65c:	d413      	bmi.n	800b686 <_printf_i+0x22e>
 800b65e:	68e0      	ldr	r0, [r4, #12]
 800b660:	9b03      	ldr	r3, [sp, #12]
 800b662:	4298      	cmp	r0, r3
 800b664:	bfb8      	it	lt
 800b666:	4618      	movlt	r0, r3
 800b668:	e7a6      	b.n	800b5b8 <_printf_i+0x160>
 800b66a:	2301      	movs	r3, #1
 800b66c:	4632      	mov	r2, r6
 800b66e:	4649      	mov	r1, r9
 800b670:	4640      	mov	r0, r8
 800b672:	47d0      	blx	sl
 800b674:	3001      	adds	r0, #1
 800b676:	d09d      	beq.n	800b5b4 <_printf_i+0x15c>
 800b678:	3501      	adds	r5, #1
 800b67a:	68e3      	ldr	r3, [r4, #12]
 800b67c:	9903      	ldr	r1, [sp, #12]
 800b67e:	1a5b      	subs	r3, r3, r1
 800b680:	42ab      	cmp	r3, r5
 800b682:	dcf2      	bgt.n	800b66a <_printf_i+0x212>
 800b684:	e7eb      	b.n	800b65e <_printf_i+0x206>
 800b686:	2500      	movs	r5, #0
 800b688:	f104 0619 	add.w	r6, r4, #25
 800b68c:	e7f5      	b.n	800b67a <_printf_i+0x222>
 800b68e:	bf00      	nop
 800b690:	0800bc11 	.word	0x0800bc11
 800b694:	0800bc22 	.word	0x0800bc22

0800b698 <__sflush_r>:
 800b698:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b69c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6a0:	0716      	lsls	r6, r2, #28
 800b6a2:	4605      	mov	r5, r0
 800b6a4:	460c      	mov	r4, r1
 800b6a6:	d454      	bmi.n	800b752 <__sflush_r+0xba>
 800b6a8:	684b      	ldr	r3, [r1, #4]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	dc02      	bgt.n	800b6b4 <__sflush_r+0x1c>
 800b6ae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	dd48      	ble.n	800b746 <__sflush_r+0xae>
 800b6b4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b6b6:	2e00      	cmp	r6, #0
 800b6b8:	d045      	beq.n	800b746 <__sflush_r+0xae>
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b6c0:	682f      	ldr	r7, [r5, #0]
 800b6c2:	6a21      	ldr	r1, [r4, #32]
 800b6c4:	602b      	str	r3, [r5, #0]
 800b6c6:	d030      	beq.n	800b72a <__sflush_r+0x92>
 800b6c8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b6ca:	89a3      	ldrh	r3, [r4, #12]
 800b6cc:	0759      	lsls	r1, r3, #29
 800b6ce:	d505      	bpl.n	800b6dc <__sflush_r+0x44>
 800b6d0:	6863      	ldr	r3, [r4, #4]
 800b6d2:	1ad2      	subs	r2, r2, r3
 800b6d4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b6d6:	b10b      	cbz	r3, 800b6dc <__sflush_r+0x44>
 800b6d8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b6da:	1ad2      	subs	r2, r2, r3
 800b6dc:	2300      	movs	r3, #0
 800b6de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b6e0:	6a21      	ldr	r1, [r4, #32]
 800b6e2:	4628      	mov	r0, r5
 800b6e4:	47b0      	blx	r6
 800b6e6:	1c43      	adds	r3, r0, #1
 800b6e8:	89a3      	ldrh	r3, [r4, #12]
 800b6ea:	d106      	bne.n	800b6fa <__sflush_r+0x62>
 800b6ec:	6829      	ldr	r1, [r5, #0]
 800b6ee:	291d      	cmp	r1, #29
 800b6f0:	d82b      	bhi.n	800b74a <__sflush_r+0xb2>
 800b6f2:	4a2a      	ldr	r2, [pc, #168]	@ (800b79c <__sflush_r+0x104>)
 800b6f4:	410a      	asrs	r2, r1
 800b6f6:	07d6      	lsls	r6, r2, #31
 800b6f8:	d427      	bmi.n	800b74a <__sflush_r+0xb2>
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	04d9      	lsls	r1, r3, #19
 800b6fe:	6062      	str	r2, [r4, #4]
 800b700:	6922      	ldr	r2, [r4, #16]
 800b702:	6022      	str	r2, [r4, #0]
 800b704:	d504      	bpl.n	800b710 <__sflush_r+0x78>
 800b706:	1c42      	adds	r2, r0, #1
 800b708:	d101      	bne.n	800b70e <__sflush_r+0x76>
 800b70a:	682b      	ldr	r3, [r5, #0]
 800b70c:	b903      	cbnz	r3, 800b710 <__sflush_r+0x78>
 800b70e:	6560      	str	r0, [r4, #84]	@ 0x54
 800b710:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b712:	602f      	str	r7, [r5, #0]
 800b714:	b1b9      	cbz	r1, 800b746 <__sflush_r+0xae>
 800b716:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b71a:	4299      	cmp	r1, r3
 800b71c:	d002      	beq.n	800b724 <__sflush_r+0x8c>
 800b71e:	4628      	mov	r0, r5
 800b720:	f7ff fbee 	bl	800af00 <_free_r>
 800b724:	2300      	movs	r3, #0
 800b726:	6363      	str	r3, [r4, #52]	@ 0x34
 800b728:	e00d      	b.n	800b746 <__sflush_r+0xae>
 800b72a:	2301      	movs	r3, #1
 800b72c:	4628      	mov	r0, r5
 800b72e:	47b0      	blx	r6
 800b730:	4602      	mov	r2, r0
 800b732:	1c50      	adds	r0, r2, #1
 800b734:	d1c9      	bne.n	800b6ca <__sflush_r+0x32>
 800b736:	682b      	ldr	r3, [r5, #0]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d0c6      	beq.n	800b6ca <__sflush_r+0x32>
 800b73c:	2b1d      	cmp	r3, #29
 800b73e:	d001      	beq.n	800b744 <__sflush_r+0xac>
 800b740:	2b16      	cmp	r3, #22
 800b742:	d11d      	bne.n	800b780 <__sflush_r+0xe8>
 800b744:	602f      	str	r7, [r5, #0]
 800b746:	2000      	movs	r0, #0
 800b748:	e021      	b.n	800b78e <__sflush_r+0xf6>
 800b74a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b74e:	b21b      	sxth	r3, r3
 800b750:	e01a      	b.n	800b788 <__sflush_r+0xf0>
 800b752:	690f      	ldr	r7, [r1, #16]
 800b754:	2f00      	cmp	r7, #0
 800b756:	d0f6      	beq.n	800b746 <__sflush_r+0xae>
 800b758:	0793      	lsls	r3, r2, #30
 800b75a:	680e      	ldr	r6, [r1, #0]
 800b75c:	600f      	str	r7, [r1, #0]
 800b75e:	bf0c      	ite	eq
 800b760:	694b      	ldreq	r3, [r1, #20]
 800b762:	2300      	movne	r3, #0
 800b764:	eba6 0807 	sub.w	r8, r6, r7
 800b768:	608b      	str	r3, [r1, #8]
 800b76a:	f1b8 0f00 	cmp.w	r8, #0
 800b76e:	ddea      	ble.n	800b746 <__sflush_r+0xae>
 800b770:	4643      	mov	r3, r8
 800b772:	463a      	mov	r2, r7
 800b774:	6a21      	ldr	r1, [r4, #32]
 800b776:	4628      	mov	r0, r5
 800b778:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b77a:	47b0      	blx	r6
 800b77c:	2800      	cmp	r0, #0
 800b77e:	dc08      	bgt.n	800b792 <__sflush_r+0xfa>
 800b780:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b784:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b788:	f04f 30ff 	mov.w	r0, #4294967295
 800b78c:	81a3      	strh	r3, [r4, #12]
 800b78e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b792:	4407      	add	r7, r0
 800b794:	eba8 0800 	sub.w	r8, r8, r0
 800b798:	e7e7      	b.n	800b76a <__sflush_r+0xd2>
 800b79a:	bf00      	nop
 800b79c:	dfbffffe 	.word	0xdfbffffe

0800b7a0 <_fflush_r>:
 800b7a0:	b538      	push	{r3, r4, r5, lr}
 800b7a2:	690b      	ldr	r3, [r1, #16]
 800b7a4:	4605      	mov	r5, r0
 800b7a6:	460c      	mov	r4, r1
 800b7a8:	b913      	cbnz	r3, 800b7b0 <_fflush_r+0x10>
 800b7aa:	2500      	movs	r5, #0
 800b7ac:	4628      	mov	r0, r5
 800b7ae:	bd38      	pop	{r3, r4, r5, pc}
 800b7b0:	b118      	cbz	r0, 800b7ba <_fflush_r+0x1a>
 800b7b2:	6a03      	ldr	r3, [r0, #32]
 800b7b4:	b90b      	cbnz	r3, 800b7ba <_fflush_r+0x1a>
 800b7b6:	f7ff fa93 	bl	800ace0 <__sinit>
 800b7ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d0f3      	beq.n	800b7aa <_fflush_r+0xa>
 800b7c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b7c4:	07d0      	lsls	r0, r2, #31
 800b7c6:	d404      	bmi.n	800b7d2 <_fflush_r+0x32>
 800b7c8:	0599      	lsls	r1, r3, #22
 800b7ca:	d402      	bmi.n	800b7d2 <_fflush_r+0x32>
 800b7cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b7ce:	f7ff fb94 	bl	800aefa <__retarget_lock_acquire_recursive>
 800b7d2:	4628      	mov	r0, r5
 800b7d4:	4621      	mov	r1, r4
 800b7d6:	f7ff ff5f 	bl	800b698 <__sflush_r>
 800b7da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b7dc:	4605      	mov	r5, r0
 800b7de:	07da      	lsls	r2, r3, #31
 800b7e0:	d4e4      	bmi.n	800b7ac <_fflush_r+0xc>
 800b7e2:	89a3      	ldrh	r3, [r4, #12]
 800b7e4:	059b      	lsls	r3, r3, #22
 800b7e6:	d4e1      	bmi.n	800b7ac <_fflush_r+0xc>
 800b7e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b7ea:	f7ff fb87 	bl	800aefc <__retarget_lock_release_recursive>
 800b7ee:	e7dd      	b.n	800b7ac <_fflush_r+0xc>

0800b7f0 <_putc_r>:
 800b7f0:	b570      	push	{r4, r5, r6, lr}
 800b7f2:	460d      	mov	r5, r1
 800b7f4:	4614      	mov	r4, r2
 800b7f6:	4606      	mov	r6, r0
 800b7f8:	b118      	cbz	r0, 800b802 <_putc_r+0x12>
 800b7fa:	6a03      	ldr	r3, [r0, #32]
 800b7fc:	b90b      	cbnz	r3, 800b802 <_putc_r+0x12>
 800b7fe:	f7ff fa6f 	bl	800ace0 <__sinit>
 800b802:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b804:	07d8      	lsls	r0, r3, #31
 800b806:	d405      	bmi.n	800b814 <_putc_r+0x24>
 800b808:	89a3      	ldrh	r3, [r4, #12]
 800b80a:	0599      	lsls	r1, r3, #22
 800b80c:	d402      	bmi.n	800b814 <_putc_r+0x24>
 800b80e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b810:	f7ff fb73 	bl	800aefa <__retarget_lock_acquire_recursive>
 800b814:	68a3      	ldr	r3, [r4, #8]
 800b816:	3b01      	subs	r3, #1
 800b818:	2b00      	cmp	r3, #0
 800b81a:	60a3      	str	r3, [r4, #8]
 800b81c:	da05      	bge.n	800b82a <_putc_r+0x3a>
 800b81e:	69a2      	ldr	r2, [r4, #24]
 800b820:	4293      	cmp	r3, r2
 800b822:	db12      	blt.n	800b84a <_putc_r+0x5a>
 800b824:	b2eb      	uxtb	r3, r5
 800b826:	2b0a      	cmp	r3, #10
 800b828:	d00f      	beq.n	800b84a <_putc_r+0x5a>
 800b82a:	6823      	ldr	r3, [r4, #0]
 800b82c:	1c5a      	adds	r2, r3, #1
 800b82e:	6022      	str	r2, [r4, #0]
 800b830:	701d      	strb	r5, [r3, #0]
 800b832:	b2ed      	uxtb	r5, r5
 800b834:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b836:	07da      	lsls	r2, r3, #31
 800b838:	d405      	bmi.n	800b846 <_putc_r+0x56>
 800b83a:	89a3      	ldrh	r3, [r4, #12]
 800b83c:	059b      	lsls	r3, r3, #22
 800b83e:	d402      	bmi.n	800b846 <_putc_r+0x56>
 800b840:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b842:	f7ff fb5b 	bl	800aefc <__retarget_lock_release_recursive>
 800b846:	4628      	mov	r0, r5
 800b848:	bd70      	pop	{r4, r5, r6, pc}
 800b84a:	4629      	mov	r1, r5
 800b84c:	4622      	mov	r2, r4
 800b84e:	4630      	mov	r0, r6
 800b850:	f000 f802 	bl	800b858 <__swbuf_r>
 800b854:	4605      	mov	r5, r0
 800b856:	e7ed      	b.n	800b834 <_putc_r+0x44>

0800b858 <__swbuf_r>:
 800b858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b85a:	460e      	mov	r6, r1
 800b85c:	4614      	mov	r4, r2
 800b85e:	4605      	mov	r5, r0
 800b860:	b118      	cbz	r0, 800b86a <__swbuf_r+0x12>
 800b862:	6a03      	ldr	r3, [r0, #32]
 800b864:	b90b      	cbnz	r3, 800b86a <__swbuf_r+0x12>
 800b866:	f7ff fa3b 	bl	800ace0 <__sinit>
 800b86a:	69a3      	ldr	r3, [r4, #24]
 800b86c:	60a3      	str	r3, [r4, #8]
 800b86e:	89a3      	ldrh	r3, [r4, #12]
 800b870:	071a      	lsls	r2, r3, #28
 800b872:	d501      	bpl.n	800b878 <__swbuf_r+0x20>
 800b874:	6923      	ldr	r3, [r4, #16]
 800b876:	b943      	cbnz	r3, 800b88a <__swbuf_r+0x32>
 800b878:	4621      	mov	r1, r4
 800b87a:	4628      	mov	r0, r5
 800b87c:	f000 f82a 	bl	800b8d4 <__swsetup_r>
 800b880:	b118      	cbz	r0, 800b88a <__swbuf_r+0x32>
 800b882:	f04f 37ff 	mov.w	r7, #4294967295
 800b886:	4638      	mov	r0, r7
 800b888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b88a:	6823      	ldr	r3, [r4, #0]
 800b88c:	b2f6      	uxtb	r6, r6
 800b88e:	6922      	ldr	r2, [r4, #16]
 800b890:	4637      	mov	r7, r6
 800b892:	1a98      	subs	r0, r3, r2
 800b894:	6963      	ldr	r3, [r4, #20]
 800b896:	4283      	cmp	r3, r0
 800b898:	dc05      	bgt.n	800b8a6 <__swbuf_r+0x4e>
 800b89a:	4621      	mov	r1, r4
 800b89c:	4628      	mov	r0, r5
 800b89e:	f7ff ff7f 	bl	800b7a0 <_fflush_r>
 800b8a2:	2800      	cmp	r0, #0
 800b8a4:	d1ed      	bne.n	800b882 <__swbuf_r+0x2a>
 800b8a6:	68a3      	ldr	r3, [r4, #8]
 800b8a8:	3b01      	subs	r3, #1
 800b8aa:	60a3      	str	r3, [r4, #8]
 800b8ac:	6823      	ldr	r3, [r4, #0]
 800b8ae:	1c5a      	adds	r2, r3, #1
 800b8b0:	6022      	str	r2, [r4, #0]
 800b8b2:	701e      	strb	r6, [r3, #0]
 800b8b4:	1c43      	adds	r3, r0, #1
 800b8b6:	6962      	ldr	r2, [r4, #20]
 800b8b8:	429a      	cmp	r2, r3
 800b8ba:	d004      	beq.n	800b8c6 <__swbuf_r+0x6e>
 800b8bc:	89a3      	ldrh	r3, [r4, #12]
 800b8be:	07db      	lsls	r3, r3, #31
 800b8c0:	d5e1      	bpl.n	800b886 <__swbuf_r+0x2e>
 800b8c2:	2e0a      	cmp	r6, #10
 800b8c4:	d1df      	bne.n	800b886 <__swbuf_r+0x2e>
 800b8c6:	4621      	mov	r1, r4
 800b8c8:	4628      	mov	r0, r5
 800b8ca:	f7ff ff69 	bl	800b7a0 <_fflush_r>
 800b8ce:	2800      	cmp	r0, #0
 800b8d0:	d0d9      	beq.n	800b886 <__swbuf_r+0x2e>
 800b8d2:	e7d6      	b.n	800b882 <__swbuf_r+0x2a>

0800b8d4 <__swsetup_r>:
 800b8d4:	b538      	push	{r3, r4, r5, lr}
 800b8d6:	4b29      	ldr	r3, [pc, #164]	@ (800b97c <__swsetup_r+0xa8>)
 800b8d8:	4605      	mov	r5, r0
 800b8da:	460c      	mov	r4, r1
 800b8dc:	6818      	ldr	r0, [r3, #0]
 800b8de:	b118      	cbz	r0, 800b8e8 <__swsetup_r+0x14>
 800b8e0:	6a03      	ldr	r3, [r0, #32]
 800b8e2:	b90b      	cbnz	r3, 800b8e8 <__swsetup_r+0x14>
 800b8e4:	f7ff f9fc 	bl	800ace0 <__sinit>
 800b8e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8ec:	0719      	lsls	r1, r3, #28
 800b8ee:	d422      	bmi.n	800b936 <__swsetup_r+0x62>
 800b8f0:	06da      	lsls	r2, r3, #27
 800b8f2:	d407      	bmi.n	800b904 <__swsetup_r+0x30>
 800b8f4:	2209      	movs	r2, #9
 800b8f6:	602a      	str	r2, [r5, #0]
 800b8f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b8fc:	f04f 30ff 	mov.w	r0, #4294967295
 800b900:	81a3      	strh	r3, [r4, #12]
 800b902:	e033      	b.n	800b96c <__swsetup_r+0x98>
 800b904:	0758      	lsls	r0, r3, #29
 800b906:	d512      	bpl.n	800b92e <__swsetup_r+0x5a>
 800b908:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b90a:	b141      	cbz	r1, 800b91e <__swsetup_r+0x4a>
 800b90c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b910:	4299      	cmp	r1, r3
 800b912:	d002      	beq.n	800b91a <__swsetup_r+0x46>
 800b914:	4628      	mov	r0, r5
 800b916:	f7ff faf3 	bl	800af00 <_free_r>
 800b91a:	2300      	movs	r3, #0
 800b91c:	6363      	str	r3, [r4, #52]	@ 0x34
 800b91e:	89a3      	ldrh	r3, [r4, #12]
 800b920:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b924:	81a3      	strh	r3, [r4, #12]
 800b926:	2300      	movs	r3, #0
 800b928:	6063      	str	r3, [r4, #4]
 800b92a:	6923      	ldr	r3, [r4, #16]
 800b92c:	6023      	str	r3, [r4, #0]
 800b92e:	89a3      	ldrh	r3, [r4, #12]
 800b930:	f043 0308 	orr.w	r3, r3, #8
 800b934:	81a3      	strh	r3, [r4, #12]
 800b936:	6923      	ldr	r3, [r4, #16]
 800b938:	b94b      	cbnz	r3, 800b94e <__swsetup_r+0x7a>
 800b93a:	89a3      	ldrh	r3, [r4, #12]
 800b93c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b940:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b944:	d003      	beq.n	800b94e <__swsetup_r+0x7a>
 800b946:	4621      	mov	r1, r4
 800b948:	4628      	mov	r0, r5
 800b94a:	f000 f85c 	bl	800ba06 <__smakebuf_r>
 800b94e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b952:	f013 0201 	ands.w	r2, r3, #1
 800b956:	d00a      	beq.n	800b96e <__swsetup_r+0x9a>
 800b958:	2200      	movs	r2, #0
 800b95a:	60a2      	str	r2, [r4, #8]
 800b95c:	6962      	ldr	r2, [r4, #20]
 800b95e:	4252      	negs	r2, r2
 800b960:	61a2      	str	r2, [r4, #24]
 800b962:	6922      	ldr	r2, [r4, #16]
 800b964:	b942      	cbnz	r2, 800b978 <__swsetup_r+0xa4>
 800b966:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b96a:	d1c5      	bne.n	800b8f8 <__swsetup_r+0x24>
 800b96c:	bd38      	pop	{r3, r4, r5, pc}
 800b96e:	0799      	lsls	r1, r3, #30
 800b970:	bf58      	it	pl
 800b972:	6962      	ldrpl	r2, [r4, #20]
 800b974:	60a2      	str	r2, [r4, #8]
 800b976:	e7f4      	b.n	800b962 <__swsetup_r+0x8e>
 800b978:	2000      	movs	r0, #0
 800b97a:	e7f7      	b.n	800b96c <__swsetup_r+0x98>
 800b97c:	200001dc 	.word	0x200001dc

0800b980 <_sbrk_r>:
 800b980:	b538      	push	{r3, r4, r5, lr}
 800b982:	2300      	movs	r3, #0
 800b984:	4d05      	ldr	r5, [pc, #20]	@ (800b99c <_sbrk_r+0x1c>)
 800b986:	4604      	mov	r4, r0
 800b988:	4608      	mov	r0, r1
 800b98a:	602b      	str	r3, [r5, #0]
 800b98c:	f7f4 ffa6 	bl	80008dc <_sbrk>
 800b990:	1c43      	adds	r3, r0, #1
 800b992:	d102      	bne.n	800b99a <_sbrk_r+0x1a>
 800b994:	682b      	ldr	r3, [r5, #0]
 800b996:	b103      	cbz	r3, 800b99a <_sbrk_r+0x1a>
 800b998:	6023      	str	r3, [r4, #0]
 800b99a:	bd38      	pop	{r3, r4, r5, pc}
 800b99c:	20000cc8 	.word	0x20000cc8

0800b9a0 <memchr>:
 800b9a0:	b2c9      	uxtb	r1, r1
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	4402      	add	r2, r0
 800b9a6:	b510      	push	{r4, lr}
 800b9a8:	4293      	cmp	r3, r2
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	d101      	bne.n	800b9b2 <memchr+0x12>
 800b9ae:	2000      	movs	r0, #0
 800b9b0:	e003      	b.n	800b9ba <memchr+0x1a>
 800b9b2:	7804      	ldrb	r4, [r0, #0]
 800b9b4:	3301      	adds	r3, #1
 800b9b6:	428c      	cmp	r4, r1
 800b9b8:	d1f6      	bne.n	800b9a8 <memchr+0x8>
 800b9ba:	bd10      	pop	{r4, pc}

0800b9bc <__swhatbuf_r>:
 800b9bc:	b570      	push	{r4, r5, r6, lr}
 800b9be:	460c      	mov	r4, r1
 800b9c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9c4:	b096      	sub	sp, #88	@ 0x58
 800b9c6:	4615      	mov	r5, r2
 800b9c8:	2900      	cmp	r1, #0
 800b9ca:	461e      	mov	r6, r3
 800b9cc:	da0c      	bge.n	800b9e8 <__swhatbuf_r+0x2c>
 800b9ce:	89a3      	ldrh	r3, [r4, #12]
 800b9d0:	2100      	movs	r1, #0
 800b9d2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b9d6:	bf14      	ite	ne
 800b9d8:	2340      	movne	r3, #64	@ 0x40
 800b9da:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b9de:	2000      	movs	r0, #0
 800b9e0:	6031      	str	r1, [r6, #0]
 800b9e2:	602b      	str	r3, [r5, #0]
 800b9e4:	b016      	add	sp, #88	@ 0x58
 800b9e6:	bd70      	pop	{r4, r5, r6, pc}
 800b9e8:	466a      	mov	r2, sp
 800b9ea:	f000 f849 	bl	800ba80 <_fstat_r>
 800b9ee:	2800      	cmp	r0, #0
 800b9f0:	dbed      	blt.n	800b9ce <__swhatbuf_r+0x12>
 800b9f2:	9901      	ldr	r1, [sp, #4]
 800b9f4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b9f8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b9fc:	4259      	negs	r1, r3
 800b9fe:	4159      	adcs	r1, r3
 800ba00:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ba04:	e7eb      	b.n	800b9de <__swhatbuf_r+0x22>

0800ba06 <__smakebuf_r>:
 800ba06:	898b      	ldrh	r3, [r1, #12]
 800ba08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ba0a:	079d      	lsls	r5, r3, #30
 800ba0c:	4606      	mov	r6, r0
 800ba0e:	460c      	mov	r4, r1
 800ba10:	d507      	bpl.n	800ba22 <__smakebuf_r+0x1c>
 800ba12:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ba16:	6023      	str	r3, [r4, #0]
 800ba18:	6123      	str	r3, [r4, #16]
 800ba1a:	2301      	movs	r3, #1
 800ba1c:	6163      	str	r3, [r4, #20]
 800ba1e:	b003      	add	sp, #12
 800ba20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba22:	ab01      	add	r3, sp, #4
 800ba24:	466a      	mov	r2, sp
 800ba26:	f7ff ffc9 	bl	800b9bc <__swhatbuf_r>
 800ba2a:	9f00      	ldr	r7, [sp, #0]
 800ba2c:	4605      	mov	r5, r0
 800ba2e:	4630      	mov	r0, r6
 800ba30:	4639      	mov	r1, r7
 800ba32:	f7ff fad1 	bl	800afd8 <_malloc_r>
 800ba36:	b948      	cbnz	r0, 800ba4c <__smakebuf_r+0x46>
 800ba38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba3c:	059a      	lsls	r2, r3, #22
 800ba3e:	d4ee      	bmi.n	800ba1e <__smakebuf_r+0x18>
 800ba40:	f023 0303 	bic.w	r3, r3, #3
 800ba44:	f043 0302 	orr.w	r3, r3, #2
 800ba48:	81a3      	strh	r3, [r4, #12]
 800ba4a:	e7e2      	b.n	800ba12 <__smakebuf_r+0xc>
 800ba4c:	89a3      	ldrh	r3, [r4, #12]
 800ba4e:	6020      	str	r0, [r4, #0]
 800ba50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba54:	81a3      	strh	r3, [r4, #12]
 800ba56:	9b01      	ldr	r3, [sp, #4]
 800ba58:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ba5c:	b15b      	cbz	r3, 800ba76 <__smakebuf_r+0x70>
 800ba5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba62:	4630      	mov	r0, r6
 800ba64:	f000 f81e 	bl	800baa4 <_isatty_r>
 800ba68:	b128      	cbz	r0, 800ba76 <__smakebuf_r+0x70>
 800ba6a:	89a3      	ldrh	r3, [r4, #12]
 800ba6c:	f023 0303 	bic.w	r3, r3, #3
 800ba70:	f043 0301 	orr.w	r3, r3, #1
 800ba74:	81a3      	strh	r3, [r4, #12]
 800ba76:	89a3      	ldrh	r3, [r4, #12]
 800ba78:	431d      	orrs	r5, r3
 800ba7a:	81a5      	strh	r5, [r4, #12]
 800ba7c:	e7cf      	b.n	800ba1e <__smakebuf_r+0x18>
	...

0800ba80 <_fstat_r>:
 800ba80:	b538      	push	{r3, r4, r5, lr}
 800ba82:	2300      	movs	r3, #0
 800ba84:	4d06      	ldr	r5, [pc, #24]	@ (800baa0 <_fstat_r+0x20>)
 800ba86:	4604      	mov	r4, r0
 800ba88:	4608      	mov	r0, r1
 800ba8a:	4611      	mov	r1, r2
 800ba8c:	602b      	str	r3, [r5, #0]
 800ba8e:	f7f4 fefc 	bl	800088a <_fstat>
 800ba92:	1c43      	adds	r3, r0, #1
 800ba94:	d102      	bne.n	800ba9c <_fstat_r+0x1c>
 800ba96:	682b      	ldr	r3, [r5, #0]
 800ba98:	b103      	cbz	r3, 800ba9c <_fstat_r+0x1c>
 800ba9a:	6023      	str	r3, [r4, #0]
 800ba9c:	bd38      	pop	{r3, r4, r5, pc}
 800ba9e:	bf00      	nop
 800baa0:	20000cc8 	.word	0x20000cc8

0800baa4 <_isatty_r>:
 800baa4:	b538      	push	{r3, r4, r5, lr}
 800baa6:	2300      	movs	r3, #0
 800baa8:	4d05      	ldr	r5, [pc, #20]	@ (800bac0 <_isatty_r+0x1c>)
 800baaa:	4604      	mov	r4, r0
 800baac:	4608      	mov	r0, r1
 800baae:	602b      	str	r3, [r5, #0]
 800bab0:	f7f4 fefb 	bl	80008aa <_isatty>
 800bab4:	1c43      	adds	r3, r0, #1
 800bab6:	d102      	bne.n	800babe <_isatty_r+0x1a>
 800bab8:	682b      	ldr	r3, [r5, #0]
 800baba:	b103      	cbz	r3, 800babe <_isatty_r+0x1a>
 800babc:	6023      	str	r3, [r4, #0]
 800babe:	bd38      	pop	{r3, r4, r5, pc}
 800bac0:	20000cc8 	.word	0x20000cc8

0800bac4 <_init>:
 800bac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bac6:	bf00      	nop
 800bac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800baca:	bc08      	pop	{r3}
 800bacc:	469e      	mov	lr, r3
 800bace:	4770      	bx	lr

0800bad0 <_fini>:
 800bad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bad2:	bf00      	nop
 800bad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bad6:	bc08      	pop	{r3}
 800bad8:	469e      	mov	lr, r3
 800bada:	4770      	bx	lr
